
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.


-- alias_both av_ctrl          [incr counter]
--    vdefine av_write_mask                   0x0001
-- alias_src  av_waitrequest   [incr counter]




-- :begin -- = 0x0000
    0000 : 2601 ; -- <0041> leds = 1
    0001 : 2e00 ; -- <0042> atx_ctrl = 0

    0002 : 0241 ; -- <0044> a = 65
    0003 : 2000 ; -- <0045> push a -- push a
    0004 : 0242 ; -- <0046> a = 66
    0005 : 2000 ; -- <0047> push a -- push a
    0006 : 0243 ; -- <0048> a = 67
    0007 : 2000 ; -- <0049> push a -- push a
    0008 : 0244 ; -- <0050> a = 68
    0009 : 2000 ; -- <0051> push a -- push a
    000a : 0245 ; -- <0052> a = 69
    000b : 2000 ; -- <0053> push a -- push a

    000c : 0408 ; -- <0055> pop b -- pop b
    000d : 0001 ; -- <0056> a = b -- putchar b
    000e : fba0 ; -- <0056> putchar b
    000f : 012c ; -- <0056> "
    0010 : fc00 ; -- <0056> "
    0011 : 0408 ; -- <0057> pop b -- pop b
    0012 : 0001 ; -- <0058> a = b -- putchar b
    0013 : fba0 ; -- <0058> putchar b
    0014 : 012c ; -- <0058> "
    0015 : fc00 ; -- <0058> "
    0016 : 0408 ; -- <0059> pop b -- pop b
    0017 : 0001 ; -- <0060> a = b -- putchar b
    0018 : fba0 ; -- <0060> putchar b
    0019 : 012c ; -- <0060> "
    001a : fc00 ; -- <0060> "
    001b : 0408 ; -- <0061> pop b -- pop b
    001c : 0001 ; -- <0062> a = b -- putchar b
    001d : fba0 ; -- <0062> putchar b
    001e : 012c ; -- <0062> "
    001f : fc00 ; -- <0062> "
    0020 : 0408 ; -- <0063> pop b -- pop b
    0021 : 0001 ; -- <0064> a = b -- putchar b
    0022 : fba0 ; -- <0064> putchar b
    0023 : 012c ; -- <0064> "
    0024 : fc00 ; -- <0064> "

    0025 : 03a0 ; -- <0066> a = 0x1234
    0026 : 1234 ; -- <0066> "
    0027 : fba0 ; -- <0067> call put4x
    0028 : 00a8 ; -- <0067> "
    0029 : fc00 ; -- <0067> "

    002a : 13a0 ; -- <0069> x = 0x1234
    002b : 1234 ; -- <0069> "
    002c : 1601 ; -- <0070> y = 1
    002d : 0200 ; -- <0071> a = 0
-- :nextwrite -- = 0x002e
    002e : 3800 ; -- <0073> m9k_addr = a
    002f : 3c04 ; -- <0074> m9k_data = x
    0030 : 1320 ; -- <0075> x = x+y
    0031 : 0601 ; -- <0076> b = 1
    0032 : c800 ; -- <0077> nop
    0033 : 0300 ; -- <0078> a = a+b
    0034 : 07a0 ; -- <0079> b = 1024
    0035 : 0400 ; -- <0079> "
    0036 : c800 ; -- <0080> nop
    0037 : e005 ; -- <0081> br lt :nextwrite
    0038 : 002e ; -- <0081> "

--patch
    0039 : 1200 ; -- <0084> x = 0
    003a : 1601 ; -- <0085> y = 1
-- :patch -- = 0x003b

    003b : 0009 ; -- <0088> a = leds
    003c : 0601 ; -- <0089> b = 1
    003d : c800 ; -- <0090> nop
    003e : 2700 ; -- <0091> leds = a+b

-- :wait_key_press -- = 0x003f
    003f : 0203 ; -- <0094> a = 0x03
    0040 : 0410 ; -- <0095> b = keys
    0041 : c800 ; -- <0096> nop
    0042 : e007 ; -- <0097> br eq :wait_key_press
    0043 : 003f ; -- <0097> "
-- :wait_key_release -- = 0x0044
    0044 : 0410 ; -- <0099> b = keys
    0045 : c800 ; -- <0100> nop
    0046 : e407 ; -- <0101> bn eq :wait_key_release
    0047 : 0044 ; -- <0101> "

    0048 : 0655 ; -- <0103> b = 85
    0049 : 0001 ; -- <0104> a = b -- putchar b
    004a : fba0 ; -- <0104> putchar b
    004b : 012c ; -- <0104> "
    004c : fc00 ; -- <0104> "

    004d : 1320 ; -- <0106> x = x+y
    004e : c800 ; -- <0107> nop
    004f : 0004 ; -- <0108> a = x
    0050 : fba0 ; -- <0109> call put4x
    0051 : 00a8 ; -- <0109> "
    0052 : fc00 ; -- <0109> "

    0053 : 0264 ; -- <0111> a = 100
    0054 : fba0 ; -- <0112> call :spinwait
    0055 : 0096 ; -- <0112> "
    0056 : fc00 ; -- <0112> "

    0057 : 0620 ; -- <0114> b = 32
    0058 : 0001 ; -- <0115> a = b -- putchar b
    0059 : fba0 ; -- <0115> putchar b
    005a : 012c ; -- <0115> "
    005b : fc00 ; -- <0115> "
    005c : 3804 ; -- <0116> m9k_addr = x
    005d : 000f ; -- <0117> a = m9k_data
    005e : fba0 ; -- <0118> call put4x
    005f : 00a8 ; -- <0118> "
    0060 : fc00 ; -- <0118> "
    0061 : 060d ; -- <0119> b = 13
    0062 : 0001 ; -- <0120> a = b -- putchar b
    0063 : fba0 ; -- <0120> putchar b
    0064 : 012c ; -- <0120> "
    0065 : fc00 ; -- <0120> "
    0066 : 060a ; -- <0121> b = 10
    0067 : 0001 ; -- <0122> a = b -- putchar b
    0068 : fba0 ; -- <0122> putchar b
    0069 : 012c ; -- <0122> "
    006a : fc00 ; -- <0122> "

    006b : e00f ; -- <0124> jmp :patch
    006c : 003b ; -- <0124> "





-- using i as index into string.
    006d : 0a00 ; -- <0131> i = 0

-- cache the string limit in g6.
    006e : 0210 ; -- <0134> a = 16
    006f : 0760 ; -- <0135> b = 0xffff
    0070 : c800 ; -- <0136> nop
    0071 : 1b38 ; -- <0137> g6 = xor

-- :again -- = 0x0072
-- -- wait for keypress.
-- :wait_key_press
-- a = 0
-- b = keys
-- nop
-- br z :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn z :wait_key_release

    0072 : 0264 ; -- <0151> a = 100
    0073 : fba0 ; -- <0152> call :spinwait
    0074 : 0096 ; -- <0152> "
    0075 : fc00 ; -- <0152> "

-- increment LEDs
    0076 : 0009 ; -- <0155> a = leds
    0077 : 0601 ; -- <0156> b = 1
    0078 : c800 ; -- <0157> nop
    0079 : 2700 ; -- <0158> leds = a+b

-- fetch a word from test pattern to the UART.  its low byte is a character.
    007a : 0fa0 ; -- <0161> j = :msg
    007b : 008d ; -- <0161> "
    007c : c800 ; -- <0162> nop
    007d : d310 ; -- <0163> fetch a from i+j
    007e : 03b0 ; -- <0163> "
    007f : 0000 ; -- <0164> a = a -- putchar a
    0080 : fba0 ; -- <0164> putchar a
    0081 : 012c ; -- <0164> "
    0082 : fc00 ; -- <0164> "

-- increment index & wrap around end of pattern.
    0083 : 0e01 ; -- <0167> j = 1
    0084 : c800 ; -- <0168> nop
    0085 : 0b10 ; -- <0169> i = i+j
    0086 : 0c06 ; -- <0170> j = g6
    0087 : c800 ; -- <0171> nop
    0088 : e401 ; -- <0172> bn 1z :no_wrap
    0089 : 008b ; -- <0172> "
    008a : 0a00 ; -- <0173> i = 0
-- :no_wrap -- = 0x008b

-- repeat forever.
    008b : e00f ; -- <0177> jmp :again
    008c : 0072 ; -- <0177> "

-- :msg -- = 0x008d
-- "1234567890abcdef\n\x00"
    008d : 3231 ; -- <0180> 21
    008e : 3433 ; -- <0180> 43
    008f : 3635 ; -- <0180> 65
    0090 : 3837 ; -- <0180> 87
    0091 : 3039 ; -- <0180> 09
    0092 : 6261 ; -- <0180> ba
    0093 : 6463 ; -- <0180> dc
    0094 : 6665 ; -- <0180> fe
    0095 : 000a ; -- <0180>   

-- routine waits a number of milliseconds given in a.
    0096 : 2004 ; -- <0183> push x -- func spinwait
    0097 : 2005 ; -- <0183> push y -- "
    0098 : 0760 ; -- <0184> b = -1
-- :spinwait_outer -- = 0x0099
    0099 : 13a0 ; -- <0186> x = 12500
    009a : 30d4 ; -- <0186> "
    009b : 1760 ; -- <0187> y = -1
    009c : c800 ; -- <0188> nop
-- :spinwait_inner -- = 0x009d
    009d : 1320 ; -- <0190> x = x+y
    009e : c800 ; -- <0191> nop
    009f : e400 ; -- <0192> bn 2z :spinwait_inner
    00a0 : 009d ; -- <0192> "
    00a1 : 0300 ; -- <0193> a = a+b
    00a2 : c800 ; -- <0194> nop
    00a3 : e404 ; -- <0195> bn z :spinwait_outer
    00a4 : 0099 ; -- <0195> "
    00a5 : 1408 ; -- <0196> pop y -- return
    00a6 : 1008 ; -- <0196> pop x -- "
    00a7 : fc00 ; -- <0196> return

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    00a8 : 2004 ; -- <0200> push x -- func put4x
    00a9 : 2006 ; -- <0200> push g6 -- "
    00aa : 203e ; -- <0200> push rtna -- "
    00ab : 13a0 ; -- <0201> x = :hexdigits
    00ac : 00e5 ; -- <0201> "

    00ad : 1800 ; -- <0203> g6 = a
    00ae : 07a0 ; -- <0204> b = 0xF000
    00af : f000 ; -- <0204> "
    00b0 : c800 ; -- <0205> nop
    00b1 : 0330 ; -- <0206> a = and
    00b2 : 0353 ; -- <0207> a = a>>4
    00b3 : 0353 ; -- <0208> a = a>>4
    00b4 : 0353 ; -- <0209> a = a>>4
    00b5 : fba0 ; -- <0210> call fetch_byte
    00b6 : 00ed ; -- <0210> "
    00b7 : fc00 ; -- <0210> "
    00b8 : 0000 ; -- <0211> a = a -- putchar a
    00b9 : fba0 ; -- <0211> putchar a
    00ba : 012c ; -- <0211> "
    00bb : fc00 ; -- <0211> "

    00bc : 0006 ; -- <0213> a = g6
    00bd : 07a0 ; -- <0214> b = 0x0F00
    00be : 0f00 ; -- <0214> "
    00bf : c800 ; -- <0215> nop
    00c0 : 0330 ; -- <0216> a = and
    00c1 : 0353 ; -- <0217> a = a>>4
    00c2 : 0353 ; -- <0218> a = a>>4
    00c3 : fba0 ; -- <0219> call fetch_byte
    00c4 : 00ed ; -- <0219> "
    00c5 : fc00 ; -- <0219> "
    00c6 : 0000 ; -- <0220> a = a -- putchar a
    00c7 : fba0 ; -- <0220> putchar a
    00c8 : 012c ; -- <0220> "
    00c9 : fc00 ; -- <0220> "

    00ca : 0006 ; -- <0222> a = g6
    00cb : 06f0 ; -- <0223> b = 0x00F0
    00cc : c800 ; -- <0224> nop
    00cd : 0330 ; -- <0225> a = and
    00ce : 0353 ; -- <0226> a = a>>4
    00cf : fba0 ; -- <0227> call fetch_byte
    00d0 : 00ed ; -- <0227> "
    00d1 : fc00 ; -- <0227> "
    00d2 : 0000 ; -- <0228> a = a -- putchar a
    00d3 : fba0 ; -- <0228> putchar a
    00d4 : 012c ; -- <0228> "
    00d5 : fc00 ; -- <0228> "

    00d6 : 0006 ; -- <0230> a = g6
    00d7 : 060f ; -- <0231> b = 0x000F
    00d8 : c800 ; -- <0232> nop
    00d9 : 0330 ; -- <0233> a = and
    00da : fba0 ; -- <0234> call fetch_byte
    00db : 00ed ; -- <0234> "
    00dc : fc00 ; -- <0234> "
    00dd : 0000 ; -- <0235> a = a -- putchar a
    00de : fba0 ; -- <0235> putchar a
    00df : 012c ; -- <0235> "
    00e0 : fc00 ; -- <0235> "

    00e1 : f808 ; -- <0237> pop rtna -- return
    00e2 : 1808 ; -- <0237> pop g6 -- "
    00e3 : 1008 ; -- <0237> pop x -- "
    00e4 : fc00 ; -- <0237> return

-- :hexdigits -- = 0x00e5
-- "0123456789abcdef"
    00e5 : 3130 ; -- <0240> 10
    00e6 : 3332 ; -- <0240> 32
    00e7 : 3534 ; -- <0240> 54
    00e8 : 3736 ; -- <0240> 76
    00e9 : 3938 ; -- <0240> 98
    00ea : 6261 ; -- <0240> ba
    00eb : 6463 ; -- <0240> dc
    00ec : 6665 ; -- <0240> fe

-- pick a byte from an array of words.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    00ed : 0601 ; -- <0245> b = 1
    00ee : c800 ; -- <0246> nop
    00ef : e002 ; -- <0247> br and0z :pick_byte_even
    00f0 : 00f9 ; -- <0247> "
    00f1 : 0350 ; -- <0248> a = a>>1
    00f2 : 0404 ; -- <0249> b = x
    00f3 : c800 ; -- <0250> nop
    00f4 : d300 ; -- <0251> fetch a from a+b
    00f5 : 03b0 ; -- <0251> "
    00f6 : 0353 ; -- <0252> a = a>>4
    00f7 : 0353 ; -- <0253> a = a>>4
    00f8 : fc00 ; -- <0254> return
-- :pick_byte_even -- = 0x00f9
    00f9 : 0350 ; -- <0256> a = a>>1
    00fa : 0404 ; -- <0257> b = x
    00fb : c800 ; -- <0258> nop
    00fc : d300 ; -- <0259> fetch a from a+b
    00fd : 03b0 ; -- <0259> "
    00fe : fc00 ; -- <0260> return

-- compute the modulus(255) of a number given in a.  return remainder in a.
    00ff : 2006 ; -- <0263> push g6 -- func mod255
    0100 : 2007 ; -- <0263> push g7 -- "
-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x0101
    0101 : 06fe ; -- <0266> b = 0xfe
    0102 : c800 ; -- <0267> nop
    0103 : e006 ; -- <0268> br gt :mod255_greater
    0104 : 0108 ; -- <0268> "
    0105 : 1c08 ; -- <0269> pop g7 -- return
    0106 : 1808 ; -- <0269> pop g6 -- "
    0107 : fc00 ; -- <0269> return
-- :mod255_greater -- = 0x0108
    0108 : 07a0 ; -- <0271> b = 0xff01
    0109 : ff01 ; -- <0271> "
    010a : c800 ; -- <0272> nop
    010b : 0300 ; -- <0273> a = a+b
    010c : e00f ; -- <0274> jmp :mod255_again
    010d : 0101 ; -- <0274> "

-- set up Fletcher16 checksum algorithm to accumulate in the 2 given register names.

    010e : 1a00 ; -- <0284> fletcher16_init g6 g7
    010f : 1e00 ; -- <0284> "

-- accumulate a Fletcher16 checksum in g6 and g7,
-- given the next byte of data in a.
    0110 : 2006 ; -- <0288> push g6 -- func fletcher16_input
    0111 : 2007 ; -- <0288> push g7 -- "
    0112 : 203e ; -- <0288> push rtna -- "
--patch: need a way to declare summing registers as "static" or "preserve" so they're not auto-stacked.
    0113 : 0406 ; -- <0290> b = $fletcher_sum1_reg
    0114 : c800 ; -- <0291> nop
    0115 : 0300 ; -- <0292> a = a+b
    0116 : fba0 ; -- <0293> call :mod255
    0117 : 00ff ; -- <0293> "
    0118 : fc00 ; -- <0293> "
    0119 : 1800 ; -- <0294> $fletcher_sum1_reg = a

    011a : 0407 ; -- <0296> b = $fletcher_sum2_reg
    011b : c800 ; -- <0297> nop
    011c : 0300 ; -- <0298> a = a+b
    011d : fba0 ; -- <0299> call :mod255
    011e : 00ff ; -- <0299> "
    011f : fc00 ; -- <0299> "
    0120 : 1c00 ; -- <0300> $fletcher_sum2_reg = a
    0121 : f808 ; -- <0301> pop rtna -- return
    0122 : 1c08 ; -- <0301> pop g7 -- "
    0123 : 1808 ; -- <0301> pop g6 -- "
    0124 : fc00 ; -- <0301> return

-- return the combined 16-bit result of Fletcher16 checksum in a.
    0125 : 0007 ; -- <0305> a = $fletcher_sum2_reg
    0126 : 0352 ; -- <0306> a = a<<4
    0127 : 0352 ; -- <0307> a = a<<4
    0128 : 0406 ; -- <0308> b = $fletcher_sum1_reg
    0129 : c800 ; -- <0309> nop
    012a : 0334 ; -- <0310> a = or
    012b : fc00 ; -- <0311> return

-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
    012c : 2004 ; -- <0314> push x -- func putchar_atx

    012d : 1000 ; -- <0316> x = a

-- wait for UART to be idle (not busy).
    012e : 0202 ; -- <0319> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x012f
    012f : 040b ; -- <0321> b = atx_ctrl
    0130 : c800 ; -- <0322> nop
    0131 : e402 ; -- <0323> bn and0z :pcatx_wait_for_idle
    0132 : 012f ; -- <0323> "

-- push word to the UART.  its low byte is a character.
    0133 : 2804 ; -- <0326> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    0134 : 2e01 ; -- <0331> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    0135 : 0202 ; -- <0334> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x0136
    0136 : 040b ; -- <0336> b = atx_ctrl
    0137 : e002 ; -- <0337> br and0z :pcatx_wait_for_busy
    0138 : 0136 ; -- <0337> "

    0139 : 2e00 ; -- <0339> atx_ctrl = 0
    013a : 1008 ; -- <0340> pop x -- return
    013b : fc00 ; -- <0340> return

        
        END;
    
