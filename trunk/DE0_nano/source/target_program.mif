
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.


-- alias_both av_ctrl          [incr counter]
--    vdefine av_write_mask                   0x0001
-- alias_src  av_waitrequest   [incr counter]



-- :begin -- = 0x0000
    0000 : 2601 ; -- <0038> leds = 1
    0001 : 2e00 ; -- <0039> atx_ctrl = 0

    0002 : 0241 ; -- <0041> a = 65
    0003 : 2000 ; -- <0042> push a -- push a
    0004 : 0242 ; -- <0043> a = 66
    0005 : 2000 ; -- <0044> push a -- push a
    0006 : 0243 ; -- <0045> a = 67
    0007 : 2000 ; -- <0046> push a -- push a
    0008 : 0244 ; -- <0047> a = 68
    0009 : 2000 ; -- <0048> push a -- push a
    000a : 0245 ; -- <0049> a = 69
    000b : 2000 ; -- <0050> push a -- push a

    000c : 0408 ; -- <0052> pop b -- pop b
    000d : 2004 ; -- <0053> push x -- push x -- putchar b
    000e : 1001 ; -- <0053> x = b -- putchar b
    000f : fba0 ; -- <0053> putchar b
    0010 : 011b ; -- <0053> "
    0011 : fc00 ; -- <0053> "
    0012 : 1008 ; -- <0053> pop x -- pop x -- putchar b
    0013 : 0408 ; -- <0054> pop b -- pop b
    0014 : 2004 ; -- <0055> push x -- push x -- putchar b
    0015 : 1001 ; -- <0055> x = b -- putchar b
    0016 : fba0 ; -- <0055> putchar b
    0017 : 011b ; -- <0055> "
    0018 : fc00 ; -- <0055> "
    0019 : 1008 ; -- <0055> pop x -- pop x -- putchar b
    001a : 0408 ; -- <0056> pop b -- pop b
    001b : 2004 ; -- <0057> push x -- push x -- putchar b
    001c : 1001 ; -- <0057> x = b -- putchar b
    001d : fba0 ; -- <0057> putchar b
    001e : 011b ; -- <0057> "
    001f : fc00 ; -- <0057> "
    0020 : 1008 ; -- <0057> pop x -- pop x -- putchar b
    0021 : 0408 ; -- <0058> pop b -- pop b
    0022 : 2004 ; -- <0059> push x -- push x -- putchar b
    0023 : 1001 ; -- <0059> x = b -- putchar b
    0024 : fba0 ; -- <0059> putchar b
    0025 : 011b ; -- <0059> "
    0026 : fc00 ; -- <0059> "
    0027 : 1008 ; -- <0059> pop x -- pop x -- putchar b
    0028 : 0408 ; -- <0060> pop b -- pop b
    0029 : 2004 ; -- <0061> push x -- push x -- putchar b
    002a : 1001 ; -- <0061> x = b -- putchar b
    002b : fba0 ; -- <0061> putchar b
    002c : 011b ; -- <0061> "
    002d : fc00 ; -- <0061> "
    002e : 1008 ; -- <0061> pop x -- pop x -- putchar b

    002f : 03a0 ; -- <0063> a = 0x1234
    0030 : 1234 ; -- <0063> "
    0031 : fba0 ; -- <0064> call put4x
    0032 : 008f ; -- <0064> "
    0033 : fc00 ; -- <0064> "

--patch
    0034 : 1200 ; -- <0067> x = 0
    0035 : 1601 ; -- <0068> y = 1
-- :patch -- = 0x0036

    0036 : 0009 ; -- <0071> a = leds
    0037 : 0601 ; -- <0072> b = 1
    0038 : c800 ; -- <0073> nop
    0039 : 2700 ; -- <0074> leds = a+b

-- :wait_key_press -- = 0x003a
    003a : 0203 ; -- <0077> a = 0x03
    003b : 040e ; -- <0078> b = keys
    003c : c800 ; -- <0079> nop
    003d : e007 ; -- <0080> br eq :wait_key_press
    003e : 003a ; -- <0080> "
-- :wait_key_release -- = 0x003f
    003f : 040e ; -- <0082> b = keys
    0040 : c800 ; -- <0083> nop
    0041 : e407 ; -- <0084> bn eq :wait_key_release
    0042 : 003f ; -- <0084> "

    0043 : 0655 ; -- <0086> b = 85
    0044 : 2004 ; -- <0087> push x -- push x -- putchar b
    0045 : 1001 ; -- <0087> x = b -- putchar b
    0046 : fba0 ; -- <0087> putchar b
    0047 : 011b ; -- <0087> "
    0048 : fc00 ; -- <0087> "
    0049 : 1008 ; -- <0087> pop x -- pop x -- putchar b

    004a : 1320 ; -- <0089> x = x+y
    004b : c800 ; -- <0090> nop
    004c : 0004 ; -- <0091> a = x
    004d : fba0 ; -- <0092> call put4x
    004e : 008f ; -- <0092> "
    004f : fc00 ; -- <0092> "

--    a = 100
--    call :spinwait

    0050 : e00f ; -- <0097> jmp :patch
    0051 : 0036 ; -- <0097> "





-- using i as index into string.
    0052 : 0a00 ; -- <0104> i = 0

-- cache the string limit in g6.
    0053 : 0210 ; -- <0107> a = 16
    0054 : 0760 ; -- <0108> b = 0xffff
    0055 : c800 ; -- <0109> nop
    0056 : 1b38 ; -- <0110> g6 = xor

-- :again -- = 0x0057
-- -- wait for keypress.
-- :wait_key_press
-- a = 0
-- b = keys
-- nop
-- br z :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn z :wait_key_release

    0057 : 0264 ; -- <0124> a = 100
    0058 : fba0 ; -- <0125> call :spinwait
    0059 : 007d ; -- <0125> "
    005a : fc00 ; -- <0125> "

-- increment LEDs
    005b : 0009 ; -- <0128> a = leds
    005c : 0601 ; -- <0129> b = 1
    005d : c800 ; -- <0130> nop
    005e : 2700 ; -- <0131> leds = a+b

-- fetch a word from test pattern to the UART.  its low byte is a character.
    005f : 0fa0 ; -- <0134> j = :msg
    0060 : 0074 ; -- <0134> "
    0061 : c800 ; -- <0135> nop
    0062 : d310 ; -- <0136> fetch a from i+j
    0063 : 03b0 ; -- <0136> "
    0064 : 2004 ; -- <0137> push x -- push x -- putchar a
    0065 : 1000 ; -- <0137> x = a -- putchar a
    0066 : fba0 ; -- <0137> putchar a
    0067 : 011b ; -- <0137> "
    0068 : fc00 ; -- <0137> "
    0069 : 1008 ; -- <0137> pop x -- pop x -- putchar a

-- increment index & wrap around end of pattern.
    006a : 0e01 ; -- <0140> j = 1
    006b : c800 ; -- <0141> nop
    006c : 0b10 ; -- <0142> i = i+j
    006d : 0c06 ; -- <0143> j = g6
    006e : c800 ; -- <0144> nop
    006f : e401 ; -- <0145> bn 1z :no_wrap
    0070 : 0072 ; -- <0145> "
    0071 : 0a00 ; -- <0146> i = 0
-- :no_wrap -- = 0x0072

-- repeat forever.
    0072 : e00f ; -- <0150> jmp :again
    0073 : 0057 ; -- <0150> "

-- :msg -- = 0x0074
-- "1234567890abcdef\n\x00"
    0074 : 3231 ; -- <0153> 21
    0075 : 3433 ; -- <0153> 43
    0076 : 3635 ; -- <0153> 65
    0077 : 3837 ; -- <0153> 87
    0078 : 3039 ; -- <0153> 09
    0079 : 6261 ; -- <0153> ba
    007a : 6463 ; -- <0153> dc
    007b : 6665 ; -- <0153> fe
    007c : 000a ; -- <0153>   

-- routine waits a number of milliseconds given in a.
    007d : 2004 ; -- <0156> push x -- func spinwait
    007e : 2005 ; -- <0156> push y -- "
    007f : 0760 ; -- <0157> b = -1
-- :spinwait_outer -- = 0x0080
    0080 : 13a0 ; -- <0159> x = 12500
    0081 : 30d4 ; -- <0159> "
    0082 : 1760 ; -- <0160> y = -1
    0083 : c800 ; -- <0161> nop
-- :spinwait_inner -- = 0x0084
    0084 : 1320 ; -- <0163> x = x+y
    0085 : c800 ; -- <0164> nop
    0086 : e400 ; -- <0165> bn 2z :spinwait_inner
    0087 : 0084 ; -- <0165> "
    0088 : 0300 ; -- <0166> a = a+b
    0089 : c800 ; -- <0167> nop
    008a : e404 ; -- <0168> bn z :spinwait_outer
    008b : 0080 ; -- <0168> "
    008c : 1408 ; -- <0169> pop y -- return
    008d : 1008 ; -- <0169> pop x -- "
    008e : fc00 ; -- <0169> return

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    008f : 2004 ; -- <0173> push x -- func put4x
    0090 : 2006 ; -- <0173> push g6 -- "
    0091 : 203e ; -- <0173> push rtna -- "
    0092 : 13a0 ; -- <0174> x = :hexdigits
    0093 : 00d4 ; -- <0174> "

    0094 : 1800 ; -- <0176> g6 = a
    0095 : 07a0 ; -- <0177> b = 0xF000
    0096 : f000 ; -- <0177> "
    0097 : c800 ; -- <0178> nop
    0098 : 0330 ; -- <0179> a = and
    0099 : 0353 ; -- <0180> a = a>>4
    009a : 0353 ; -- <0181> a = a>>4
    009b : 0353 ; -- <0182> a = a>>4
    009c : fba0 ; -- <0183> call fetch_byte
    009d : 00dc ; -- <0183> "
    009e : fc00 ; -- <0183> "
    009f : 2004 ; -- <0184> push x -- push x -- putchar a
    00a0 : 1000 ; -- <0184> x = a -- putchar a
    00a1 : fba0 ; -- <0184> putchar a
    00a2 : 011b ; -- <0184> "
    00a3 : fc00 ; -- <0184> "
    00a4 : 1008 ; -- <0184> pop x -- pop x -- putchar a

    00a5 : 0006 ; -- <0186> a = g6
    00a6 : 07a0 ; -- <0187> b = 0x0F00
    00a7 : 0f00 ; -- <0187> "
    00a8 : c800 ; -- <0188> nop
    00a9 : 0330 ; -- <0189> a = and
    00aa : 0353 ; -- <0190> a = a>>4
    00ab : 0353 ; -- <0191> a = a>>4
    00ac : fba0 ; -- <0192> call fetch_byte
    00ad : 00dc ; -- <0192> "
    00ae : fc00 ; -- <0192> "
    00af : 2004 ; -- <0193> push x -- push x -- putchar a
    00b0 : 1000 ; -- <0193> x = a -- putchar a
    00b1 : fba0 ; -- <0193> putchar a
    00b2 : 011b ; -- <0193> "
    00b3 : fc00 ; -- <0193> "
    00b4 : 1008 ; -- <0193> pop x -- pop x -- putchar a

    00b5 : 0006 ; -- <0195> a = g6
    00b6 : 06f0 ; -- <0196> b = 0x00F0
    00b7 : c800 ; -- <0197> nop
    00b8 : 0330 ; -- <0198> a = and
    00b9 : 0353 ; -- <0199> a = a>>4
    00ba : fba0 ; -- <0200> call fetch_byte
    00bb : 00dc ; -- <0200> "
    00bc : fc00 ; -- <0200> "
    00bd : 2004 ; -- <0201> push x -- push x -- putchar a
    00be : 1000 ; -- <0201> x = a -- putchar a
    00bf : fba0 ; -- <0201> putchar a
    00c0 : 011b ; -- <0201> "
    00c1 : fc00 ; -- <0201> "
    00c2 : 1008 ; -- <0201> pop x -- pop x -- putchar a

    00c3 : 0006 ; -- <0203> a = g6
    00c4 : 060f ; -- <0204> b = 0x000F
    00c5 : c800 ; -- <0205> nop
    00c6 : 0330 ; -- <0206> a = and
    00c7 : fba0 ; -- <0207> call fetch_byte
    00c8 : 00dc ; -- <0207> "
    00c9 : fc00 ; -- <0207> "
    00ca : 2004 ; -- <0208> push x -- push x -- putchar a
    00cb : 1000 ; -- <0208> x = a -- putchar a
    00cc : fba0 ; -- <0208> putchar a
    00cd : 011b ; -- <0208> "
    00ce : fc00 ; -- <0208> "
    00cf : 1008 ; -- <0208> pop x -- pop x -- putchar a

    00d0 : f808 ; -- <0210> pop rtna -- return
    00d1 : 1808 ; -- <0210> pop g6 -- "
    00d2 : 1008 ; -- <0210> pop x -- "
    00d3 : fc00 ; -- <0210> return

-- :hexdigits -- = 0x00d4
-- "0123456789abcdef"
    00d4 : 3130 ; -- <0213> 10
    00d5 : 3332 ; -- <0213> 32
    00d6 : 3534 ; -- <0213> 54
    00d7 : 3736 ; -- <0213> 76
    00d8 : 3938 ; -- <0213> 98
    00d9 : 6261 ; -- <0213> ba
    00da : 6463 ; -- <0213> dc
    00db : 6665 ; -- <0213> fe

-- pick a byte from an array of words.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    00dc : 0601 ; -- <0218> b = 1
    00dd : c800 ; -- <0219> nop
    00de : e002 ; -- <0220> br and0z :pick_byte_even
    00df : 00e8 ; -- <0220> "
    00e0 : 0350 ; -- <0221> a = a>>1
    00e1 : 0404 ; -- <0222> b = x
    00e2 : c800 ; -- <0223> nop
    00e3 : d300 ; -- <0224> fetch a from a+b
    00e4 : 03b0 ; -- <0224> "
    00e5 : 0353 ; -- <0225> a = a>>4
    00e6 : 0353 ; -- <0226> a = a>>4
    00e7 : fc00 ; -- <0227> return
-- :pick_byte_even -- = 0x00e8
    00e8 : 0350 ; -- <0229> a = a>>1
    00e9 : 0404 ; -- <0230> b = x
    00ea : c800 ; -- <0231> nop
    00eb : d300 ; -- <0232> fetch a from a+b
    00ec : 03b0 ; -- <0232> "
    00ed : fc00 ; -- <0233> return

-- compute the modulus(255) of a number given in a.  return remainder in a.
    00ee : 2006 ; -- <0236> push g6 -- func mod255
    00ef : 2007 ; -- <0236> push g7 -- "
-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x00f0
    00f0 : 06fe ; -- <0239> b = 0xfe
    00f1 : c800 ; -- <0240> nop
    00f2 : e006 ; -- <0241> br gt :mod255_greater
    00f3 : 00f7 ; -- <0241> "
    00f4 : 1c08 ; -- <0242> pop g7 -- return
    00f5 : 1808 ; -- <0242> pop g6 -- "
    00f6 : fc00 ; -- <0242> return
-- :mod255_greater -- = 0x00f7
    00f7 : 07a0 ; -- <0244> b = 0xff01
    00f8 : ff01 ; -- <0244> "
    00f9 : c800 ; -- <0245> nop
    00fa : 0300 ; -- <0246> a = a+b
    00fb : e00f ; -- <0247> jmp :mod255_again
    00fc : 00f0 ; -- <0247> "

-- set up Fletcher16 checksum algorithm to accumulate in the 2 given register names.

    00fd : 1a00 ; -- <0257> fletcher16_init g6 g7
    00fe : 1e00 ; -- <0257> "

-- accumulate a Fletcher16 checksum in g6 and g7,
-- given the next byte of data in a.
    00ff : 2006 ; -- <0261> push g6 -- func fletcher16_input
    0100 : 2007 ; -- <0261> push g7 -- "
    0101 : 203e ; -- <0261> push rtna -- "
--patch: need a way to declare summing registers as "static" or "preserve" so they're not auto-stacked.
    0102 : 0406 ; -- <0263> b = $fletcher_sum1_reg
    0103 : c800 ; -- <0264> nop
    0104 : 0300 ; -- <0265> a = a+b
    0105 : fba0 ; -- <0266> call :mod255
    0106 : 00ee ; -- <0266> "
    0107 : fc00 ; -- <0266> "
    0108 : 1800 ; -- <0267> $fletcher_sum1_reg = a

    0109 : 0407 ; -- <0269> b = $fletcher_sum2_reg
    010a : c800 ; -- <0270> nop
    010b : 0300 ; -- <0271> a = a+b
    010c : fba0 ; -- <0272> call :mod255
    010d : 00ee ; -- <0272> "
    010e : fc00 ; -- <0272> "
    010f : 1c00 ; -- <0273> $fletcher_sum2_reg = a
    0110 : f808 ; -- <0274> pop rtna -- return
    0111 : 1c08 ; -- <0274> pop g7 -- "
    0112 : 1808 ; -- <0274> pop g6 -- "
    0113 : fc00 ; -- <0274> return

-- return the combined 16-bit result of Fletcher16 checksum in a.
    0114 : 0007 ; -- <0278> a = $fletcher_sum2_reg
    0115 : 0352 ; -- <0279> a = a<<4
    0116 : 0352 ; -- <0280> a = a<<4
    0117 : 0406 ; -- <0281> b = $fletcher_sum1_reg
    0118 : c800 ; -- <0282> nop
    0119 : 0334 ; -- <0283> a = or
    011a : fc00 ; -- <0284> return

-- routine sends out the low byte from x to the UART.  blocks until the UART accepts the byte.

-- wait for UART to be idle (not busy).
    011b : 0202 ; -- <0290> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x011c
    011c : 040b ; -- <0292> b = atx_ctrl
    011d : c800 ; -- <0293> nop
    011e : e402 ; -- <0294> bn and0z :pcatx_wait_for_idle
    011f : 011c ; -- <0294> "

-- push word to the UART.  its low byte is a character.
    0120 : 2804 ; -- <0297> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    0121 : 2e01 ; -- <0302> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    0122 : 0202 ; -- <0305> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x0123
    0123 : 040b ; -- <0307> b = atx_ctrl
    0124 : e002 ; -- <0308> br and0z :pcatx_wait_for_busy
    0125 : 0123 ; -- <0308> "

    0126 : 2e00 ; -- <0310> atx_ctrl = 0
    0127 : fc00 ; -- <0311> return

        
        END;
    
