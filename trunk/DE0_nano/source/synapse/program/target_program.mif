
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

-- register file configuration

-- application-specific register aliases.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.


-- -- I/O expansion bus.
-- alias_both exp                  [incr counter]
-- alias_both exp_addr             [incr counter]
-- vdefine exp_num_regs 32
-- vdefine exp_top_reg ($exp_num_regs - 1)
-- setvar exp_counter -1

-- alias_src  keys                 [incr exp_counter]@exp
-- alias_both leds                 [incr exp_counter]@exp

-- alias_both anmux_ctrl           [incr exp_counter]@exp
-- vdefine     anmux_enable_mask       0x0008
-- vdefine     anmux_channel_mask      0x0007




-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- SETTING efi_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_20us NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.



    0000 : e00f ; -- <0132> jmp :main
    0001 : 0158 ; -- <0132> "

    0002 : 001c ; -- <0134> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0134>   
    0004 : 2020 ; -- <0134>   
    0005 : 2020 ; -- <0134>   
    0006 : 6120 ; -- <0134> a 
-- "       b"
    0007 : 2020 ; -- <0134>   
    0008 : 2020 ; -- <0134>   
    0009 : 2020 ; -- <0134>   
    000a : 6220 ; -- <0134> b 
-- "       i"
    000b : 2020 ; -- <0134>   
    000c : 2020 ; -- <0134>   
    000d : 2020 ; -- <0134>   
    000e : 6920 ; -- <0134> i 
-- "       j"
    000f : 2020 ; -- <0134>   
    0010 : 2020 ; -- <0134>   
    0011 : 2020 ; -- <0134>   
    0012 : 6a20 ; -- <0134> j 
-- "       x"
    0013 : 2020 ; -- <0134>   
    0014 : 2020 ; -- <0134>   
    0015 : 2020 ; -- <0134>   
    0016 : 7820 ; -- <0134> x 
-- "       y"
    0017 : 2020 ; -- <0134>   
    0018 : 2020 ; -- <0134>   
    0019 : 2020 ; -- <0134>   
    001a : 7920 ; -- <0134> y 
-- "      g6"
    001b : 2020 ; -- <0134>   
    001c : 2020 ; -- <0134>   
    001d : 2020 ; -- <0134>   
    001e : 3667 ; -- <0134> 6g
-- "      g7"
    001f : 2020 ; -- <0134>   
    0020 : 2020 ; -- <0134>   
    0021 : 2020 ; -- <0134>   
    0022 : 3767 ; -- <0134> 7g
-- "--rstk  "
    0023 : 2f2f ; -- <0134> --
    0024 : 7372 ; -- <0134> sr
    0025 : 6b74 ; -- <0134> kt
    0026 : 2020 ; -- <0134>   
-- "  ev_pri"
    0027 : 2020 ; -- <0134>   
    0028 : 7665 ; -- <0134> ve
    0029 : 705f ; -- <0134> p_
    002a : 6972 ; -- <0134> ir
-- "softevnt"
    002b : 6f73 ; -- <0134> os
    002c : 7466 ; -- <0134> tf
    002d : 7665 ; -- <0134> ve
    002e : 746e ; -- <0134> tn
-- "   usage"
    002f : 2020 ; -- <0134>   
    0030 : 7520 ; -- <0134> u 
    0031 : 6173 ; -- <0134> as
    0032 : 6567 ; -- <0134> eg
-- "ustimer0"
    0033 : 7375 ; -- <0134> su
    0034 : 6974 ; -- <0134> it
    0035 : 656d ; -- <0134> em
    0036 : 3072 ; -- <0134> 0r
-- "mstimer0"
    0037 : 736d ; -- <0134> sm
    0038 : 6974 ; -- <0134> it
    0039 : 656d ; -- <0134> em
    003a : 3072 ; -- <0134> 0r
-- "mstimer1"
    003b : 736d ; -- <0134> sm
    003c : 6974 ; -- <0134> it
    003d : 656d ; -- <0134> em
    003e : 3172 ; -- <0134> 1r
-- "spi_data"
    003f : 7073 ; -- <0134> ps
    0040 : 5f69 ; -- <0134> _i
    0041 : 6164 ; -- <0134> ad
    0042 : 6174 ; -- <0134> at
-- "--avwrdt"
    0043 : 2f2f ; -- <0134> --
    0044 : 7661 ; -- <0134> va
    0045 : 7277 ; -- <0134> rw
    0046 : 7464 ; -- <0134> td
-- "av_rd_dt"
    0047 : 7661 ; -- <0134> va
    0048 : 725f ; -- <0134> r_
    0049 : 5f64 ; -- <0134> _d
    004a : 7464 ; -- <0134> td
-- "av_ad_hi"
    004b : 7661 ; -- <0134> va
    004c : 615f ; -- <0134> a_
    004d : 5f64 ; -- <0134> _d
    004e : 6968 ; -- <0134> ih
-- "av_ad_lo"
    004f : 7661 ; -- <0134> va
    0050 : 615f ; -- <0134> a_
    0051 : 5f64 ; -- <0134> _d
    0052 : 6f6c ; -- <0134> ol
-- "--uartdt"
    0053 : 2f2f ; -- <0134> --
    0054 : 6175 ; -- <0134> au
    0055 : 7472 ; -- <0134> tr
    0056 : 7464 ; -- <0134> td
-- "uartstat"
    0057 : 6175 ; -- <0134> au
    0058 : 7472 ; -- <0134> tr
    0059 : 7473 ; -- <0134> ts
    005a : 7461 ; -- <0134> ta
-- "    leds"
    005b : 2020 ; -- <0134>   
    005c : 2020 ; -- <0134>   
    005d : 656c ; -- <0134> el
    005e : 7364 ; -- <0134> sd
-- "brd_ctrl"
    005f : 7262 ; -- <0134> rb
    0060 : 5f64 ; -- <0134> _d
    0061 : 7463 ; -- <0134> tc
    0062 : 6c72 ; -- <0134> lr
-- "   anmux"
    0063 : 2020 ; -- <0134>   
    0064 : 6120 ; -- <0134> a 
    0065 : 6d6e ; -- <0134> mn
    0066 : 7875 ; -- <0134> xu
-- "pwr_duty"
    0067 : 7770 ; -- <0134> wp
    0068 : 5f72 ; -- <0134> _r
    0069 : 7564 ; -- <0134> ud
    006a : 7974 ; -- <0134> yt
-- "efilenus"
    006b : 6665 ; -- <0134> fe
    006c : 6c69 ; -- <0134> li
    006d : 6e65 ; -- <0134> ne
    006e : 7375 ; -- <0134> su
-- "igntmout"
    006f : 6769 ; -- <0134> gi
    0070 : 746e ; -- <0134> tn
    0071 : 6f6d ; -- <0134> om
    0072 : 7475 ; -- <0134> tu

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x0073
-- initialize prior to polling loop, for minimum latency.
    0073 : 07a0 ; -- <0006> b = :event_table
    0074 : 018a ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0075
    0075 : 0009 ; -- <0009> a = event_priority
    0076 : e000 ; -- <0010> br 0z :poll_events_again
    0077 : 0075 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0078 : 2400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0079 : d300 ; -- <0015> fetch rtna from ad0
    007a : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    007b : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    007c : 5ba0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    007d : ffc0 ; -- <0021> "
    007e : e00f ; -- <0021> error_halt_code 0xffc0
    007f : 007e ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x0080
    0080 : 2004 ; -- <0044> push x -- func putchar_fduart

    0081 : 1000 ; -- <0046> x = a

-- wait for FIFO to be available.
    0082 : 0202 ; -- <0049> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x0083
    0083 : 0415 ; -- <0051> b = fduart_status
    0084 : e403 ; -- <0052> bn and0z :pcfduart_wait_for_idle
    0085 : 0083 ; -- <0052> "

-- push word to the UART.  its low byte is a character.
    0086 : 5004 ; -- <0055> fduart_data = x
    0087 : 1008 ; -- <0056> pop x -- end_func
    0088 : fc00 ; -- <0056> end_func

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x0089
-- wait until FIFO is populated.
    0089 : 0208 ; -- <0062> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x008a
    008a : 0415 ; -- <0064> b = fduart_status
    008b : e403 ; -- <0065> bn and0z :wait_for_busy
    008c : 008a ; -- <0065> "
    008d : 0014 ; -- <0066> a = fduart_data
    008e : fc00 ; -- <0067> end_func

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x008f
-- check for FIFO is populated.
    008f : 0208 ; -- <0072> a = $arx_fifo_empty_mask
    0090 : 0415 ; -- <0073> b = fduart_status
    0091 : e403 ; -- <0074> bn and0z :none
    0092 : 0095 ; -- <0074> "
    0093 : 0014 ; -- <0075> a = fduart_data
    0094 : fc00 ; -- <0076> rtn
-- :none -- = 0x0095
    0095 : 0360 ; -- <0078> a = -1
    0096 : fc00 ; -- <0079> end_func


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x0097
-- set & enable analog muxer
    0097 : 0608 ; -- <0007> b = $anmux_enable_mask
    0098 : c800 ; -- <0008> anmux_ctrl = or
    0099 : 6334 ; -- <0008> "
    009a : fc00 ; -- <0009> end_func

-- ######## func anmux_get_chn -- = 0x009b
    009b : 0018 ; -- <0012> a = anmux_ctrl
    009c : 0607 ; -- <0013> b = $anmux_channel_mask
    009d : c800 ; -- <0014> a = and
    009e : 0330 ; -- <0014> "
    009f : fc00 ; -- <0015> end_func


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x00a0
    00a0 : 0601 ; -- <0005> b = 1
    00a1 : e003 ; -- <0006> br and0z :pick_byte_even
    00a2 : 00ab ; -- <0006> "
    00a3 : 0350 ; -- <0007> a = a>>1
    00a4 : 0404 ; -- <0008> b = x
    00a5 : c800 ; -- <0009> fetch a from a+b
    00a6 : d300 ; -- <0009> "
    00a7 : 03b0 ; -- <0009> "
    00a8 : 0353 ; -- <0010> a = a>>4
    00a9 : 0353 ; -- <0011> a = a>>4
    00aa : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x00ab
    00ab : 0350 ; -- <0014> a = a>>1
    00ac : 0404 ; -- <0015> b = x
    00ad : c800 ; -- <0016> fetch a from a+b
    00ae : d300 ; -- <0016> "
    00af : 03b0 ; -- <0016> "
    00b0 : 06ff ; -- <0017> b = 0xff
    00b1 : c800 ; -- <0018> a = and
    00b2 : 0330 ; -- <0018> "
    00b3 : fc00 ; -- <0019> end_func

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x00b4
    00b4 : 2002 ; -- <0027> push i -- func find_in_fetch
    00b5 : 2003 ; -- <0027> push j -- "
    00b6 : 2005 ; -- <0027> push y -- "
    00b7 : 203e ; -- <0027> push rtna -- "
    00b8 : 1400 ; -- <0028> y = a
    00b9 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x00ba
    00ba : e001 ; -- <0031> br iz :fail
    00bb : 00ca ; -- <0031> "
    00bc : 0b10 ; -- <0032> i = ad1
    00bd : 0002 ; -- <0033> a = i
    00be : fba0 ; -- <0034> call :fetch_byte
    00bf : 00a0 ; -- <0034> "
    00c0 : fc00 ; -- <0034> "
    00c1 : 0405 ; -- <0035> b = y
    00c2 : e407 ; -- <0036> bn eq :again
    00c3 : 00ba ; -- <0036> "
-- :found -- = 0x00c4
    00c4 : 0002 ; -- <0038> a = i
    00c5 : f808 ; -- <0039> pop rtna -- rtn
    00c6 : 1408 ; -- <0039> pop y -- "
    00c7 : 0c08 ; -- <0039> pop j -- "
    00c8 : 0808 ; -- <0039> pop i -- "
    00c9 : fc00 ; -- <0039> rtn
-- :fail -- = 0x00ca
    00ca : 0360 ; -- <0041> a = -1
    00cb : f808 ; -- <0042> pop rtna -- end_func
    00cc : 1408 ; -- <0042> pop y -- "
    00cd : 0c08 ; -- <0042> pop j -- "
    00ce : 0808 ; -- <0042> pop i -- "
    00cf : fc00 ; -- <0042> end_func



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00d0
-- "0123456789abcdef"
    00d0 : 3130 ; -- <0054> 10
    00d1 : 3332 ; -- <0054> 32
    00d2 : 3534 ; -- <0054> 54
    00d3 : 3736 ; -- <0054> 76
    00d4 : 3938 ; -- <0054> 98
    00d5 : 6261 ; -- <0054> ba
    00d6 : 6463 ; -- <0054> dc
    00d7 : 6665 ; -- <0054> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00d8
    00d8 : 2004 ; -- <0058> push x -- func put4x
    00d9 : 2006 ; -- <0058> push g6 -- "
    00da : 203e ; -- <0058> push rtna -- "
    00db : 13a0 ; -- <0059> x = :hexdigits
    00dc : 00d0 ; -- <0059> "

    00dd : 1800 ; -- <0061> g6 = a
    00de : 07a0 ; -- <0062> b = 0xF000
    00df : f000 ; -- <0062> "
    00e0 : c800 ; -- <0063> a = and
    00e1 : 0330 ; -- <0063> "
    00e2 : 0353 ; -- <0064> a = a>>4
    00e3 : 0353 ; -- <0065> a = a>>4
    00e4 : 0353 ; -- <0066> a = a>>4
    00e5 : fba0 ; -- <0067> call fetch_byte
    00e6 : 00a0 ; -- <0067> "
    00e7 : fc00 ; -- <0067> "
    00e8 : 0000 ; -- <0068> a = a -- putchar a
    00e9 : fba0 ; -- <0068> putchar a
    00ea : 0080 ; -- <0068> "
    00eb : fc00 ; -- <0068> "

    00ec : 0006 ; -- <0070> a = g6
    00ed : 07a0 ; -- <0071> b = 0x0F00
    00ee : 0f00 ; -- <0071> "
    00ef : c800 ; -- <0072> a = and
    00f0 : 0330 ; -- <0072> "
    00f1 : 0353 ; -- <0073> a = a>>4
    00f2 : 0353 ; -- <0074> a = a>>4
    00f3 : fba0 ; -- <0075> call fetch_byte
    00f4 : 00a0 ; -- <0075> "
    00f5 : fc00 ; -- <0075> "
    00f6 : 0000 ; -- <0076> a = a -- putchar a
    00f7 : fba0 ; -- <0076> putchar a
    00f8 : 0080 ; -- <0076> "
    00f9 : fc00 ; -- <0076> "

    00fa : 0006 ; -- <0078> a = g6
    00fb : 06f0 ; -- <0079> b = 0x00F0
    00fc : c800 ; -- <0080> a = and
    00fd : 0330 ; -- <0080> "
    00fe : 0353 ; -- <0081> a = a>>4
    00ff : fba0 ; -- <0082> call fetch_byte
    0100 : 00a0 ; -- <0082> "
    0101 : fc00 ; -- <0082> "
    0102 : 0000 ; -- <0083> a = a -- putchar a
    0103 : fba0 ; -- <0083> putchar a
    0104 : 0080 ; -- <0083> "
    0105 : fc00 ; -- <0083> "

    0106 : 0006 ; -- <0085> a = g6
    0107 : 060f ; -- <0086> b = 0x000F
    0108 : c800 ; -- <0087> a = and
    0109 : 0330 ; -- <0087> "
    010a : fba0 ; -- <0088> call fetch_byte
    010b : 00a0 ; -- <0088> "
    010c : fc00 ; -- <0088> "
    010d : 0000 ; -- <0089> a = a -- putchar a
    010e : fba0 ; -- <0089> putchar a
    010f : 0080 ; -- <0089> "
    0110 : fc00 ; -- <0089> "

    0111 : f808 ; -- <0091> pop rtna -- end_func
    0112 : 1808 ; -- <0091> pop g6 -- "
    0113 : 1008 ; -- <0091> pop x -- "
    0114 : fc00 ; -- <0091> end_func

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x0115
    0115 : 2002 ; -- <0095> push i -- func get4x
    0116 : 2003 ; -- <0095> push j -- "
    0117 : 2004 ; -- <0095> push x -- "
    0118 : 2005 ; -- <0095> push y -- "
    0119 : 203e ; -- <0095> push rtna -- "
-- y = digit counter
-- j = sum
    011a : 1604 ; -- <0098> y = 4
-- :again -- = 0x011b
    011b : fba0 ; -- <0100> getchar
    011c : 0089 ; -- <0100> "
    011d : fc00 ; -- <0100> "
    011e : 2000 ; -- <0100> push a -- "
    011f : 0000 ; -- <0100> a = a -- "
    0120 : fba0 ; -- <0100> "
    0121 : 0080 ; -- <0100> "
    0122 : fc00 ; -- <0100> "
    0123 : 0008 ; -- <0100> pop a -- "
    0124 : 13a0 ; -- <0101> x = :hexdigits
    0125 : 00d0 ; -- <0101> "
    0126 : 0a10 ; -- <0102> i = 16
    0127 : fba0 ; -- <0103> call :find_in_fetch
    0128 : 00b4 ; -- <0103> "
    0129 : fc00 ; -- <0103> "
    012a : 0760 ; -- <0104> b = -1
    012b : e007 ; -- <0105> br eq :fail
    012c : 0140 ; -- <0105> "
    012d : 0400 ; -- <0106> b = a
    012e : 0003 ; -- <0107> a = j
    012f : 0352 ; -- <0108> a = a<<4
    0130 : c800 ; -- <0109> j = or
    0131 : 0f34 ; -- <0109> "
    0132 : 1360 ; -- <0110> x = -1
    0133 : c800 ; -- <0111> y = x+y
    0134 : 1720 ; -- <0111> "
    0135 : 0005 ; -- <0112> a = y
    0136 : e400 ; -- <0113> bn az :again
    0137 : 011b ; -- <0113> "
    0138 : 0003 ; -- <0114> a = j
    0139 : 0600 ; -- <0115> b = 0
    013a : f808 ; -- <0116> pop rtna -- rtn
    013b : 1408 ; -- <0116> pop y -- "
    013c : 1008 ; -- <0116> pop x -- "
    013d : 0c08 ; -- <0116> pop j -- "
    013e : 0808 ; -- <0116> pop i -- "
    013f : fc00 ; -- <0116> rtn
-- :fail -- = 0x0140
    0140 : 0760 ; -- <0118> b = -1
    0141 : f808 ; -- <0119> pop rtna -- end_func
    0142 : 1408 ; -- <0119> pop y -- "
    0143 : 1008 ; -- <0119> pop x -- "
    0144 : 0c08 ; -- <0119> pop j -- "
    0145 : 0808 ; -- <0119> pop i -- "
    0146 : fc00 ; -- <0119> end_func

-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x0147
    0147 : 2004 ; -- <0002> push x -- func spinwait
    0148 : 2005 ; -- <0002> push y -- "
--patch
--rtn
    0149 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x014a
    014a : 13a0 ; -- <0007> x = 16666
    014b : 411a ; -- <0007> "
    014c : 1760 ; -- <0008> y = -1
    014d : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x014e
-- use of the ad2 name overrides auto-nop here.
    014e : 1320 ; -- <0012> x = ad2
    014f : e402 ; -- <0013> bn xz :spinwait_inner
    0150 : 014e ; -- <0013> "
    0151 : c800 ; -- <0014> a = a+b
    0152 : 0300 ; -- <0014> "
    0153 : e400 ; -- <0015> bn az :spinwait_outer
    0154 : 014a ; -- <0015> "
    0155 : 1408 ; -- <0016> pop y -- end_func
    0156 : 1008 ; -- <0016> pop x -- "
    0157 : fc00 ; -- <0016> end_func



-- #########################################################################
-- :main -- = 0x0158

-- soft_event = $event_controller_reset_mask
-- soft_event = 0
-- mstimer0 = 1000
-- :waiting
-- a = event_priority
-- br az :waiting
-- event_priority = a
-- putasc "."
-- jmp :main

-- clear the first 64k of RAM.
    0158 : 4a00 ; -- <0159> av_ad_hi = 0
    0159 : 0200 ; -- <0160> a = 0
    015a : 0602 ; -- <0161> b = 2
-- :clear_next_word -- = 0x015b
    015b : 4c00 ; -- <0163> av_ad_lo = a
    015c : 4200 ; -- <0164> av_write_data = 0
    015d : 0300 ; -- <0165> a = ad0
    015e : e400 ; -- <0166> bn az :clear_next_word
    015f : 015b ; -- <0166> "

-- init RAM variables.
    0160 : 4a00 ; -- <0169> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0161 : 4e04 ; -- <0169> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 4
    0162 : 4360 ; -- <0169> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0163 : 4a00 ; -- <0170> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    0164 : 4e06 ; -- <0170> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 6
    0165 : 4202 ; -- <0170> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- init fuel injection.
    0166 : 6fa0 ; -- <0173> ign_timeout_len_20us = 0xfffc
    0167 : fffc ; -- <0173> "
    0168 : 6ba0 ; -- <0174> efi_len_us = 3000
    0169 : 0bb8 ; -- <0174> "

-- power up FTDI USB board, and init any other special board control functions.
    016a : 5e80 ; -- <0177> board_ctrl = $ftdi_power_mask

--patch
-- :testagain -- = 0x016b
    016b : 5e40 ; -- <0181> board_ctrl = $beeper_enable_mask
    016c : 03a0 ; -- <0182> a = 1000
    016d : 03e8 ; -- <0182> "
    016e : fba0 ; -- <0183> call :spinwait
    016f : 0147 ; -- <0183> "
    0170 : fc00 ; -- <0183> "
    0171 : 5e80 ; -- <0184> board_ctrl = $ftdi_power_mask
    0172 : 03a0 ; -- <0185> a = 1000
    0173 : 03e8 ; -- <0185> "
    0174 : fba0 ; -- <0186> call :spinwait
    0175 : 0147 ; -- <0186> "
    0176 : fc00 ; -- <0186> "
    0177 : e00f ; -- <0187> br always :testagain
    0178 : 016b ; -- <0187> "


-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    0179 : 6600 ; -- <0195> power_duty = $power_duty_closing
    017a : 0019 ; -- <0196> a = power_duty
    017b : 06c0 ; -- <0197> b = ($power_lost_mask | $ignition_switch_off_mask)
    017c : e003 ; -- <0198> br and0z :skip_power_lost
    017d : 0183 ; -- <0198> "
    017e : 6632 ; -- <0199> power_duty = $power_duty_opening
    017f : 5ba0 ; -- <0200> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    0180 : fffb ; -- <0200> "
    0181 : e00f ; -- <0200> error_halt_code $err_power_lost_at_boot
    0182 : 0181 ; -- <0200> "
-- :skip_power_lost -- = 0x0183

-- start handling events.
    0183 : 2ba0 ; -- <0204> soft_event = $event_controller_reset_mask
    0184 : 8000 ; -- <0204> "
    0185 : 2a00 ; -- <0205> soft_event = 0
    0186 : 37a0 ; -- <0206> mstimer0 = 1000
    0187 : 03e8 ; -- <0206> "
    0188 : e00f ; -- <0207> jmp :poll_events
    0189 : 0073 ; -- <0207> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x018a
    018a : 0073 ; -- <0212> ([label :poll_events])
    018b : 026a ; -- <0213> ([label :power_lost_handler])
    018c : 0289 ; -- <0214> ([label :puff1_done_handler])
    018d : 019c ; -- <0215> ([label :ustimer0_handler])
    018e : 019e ; -- <0216> ([label :spi_done_handler])
    018f : 01d1 ; -- <0217> ([label :mstimer0_handler])
    0190 : 01f9 ; -- <0218> ([label :mstimer1_handler])
    0191 : 021a ; -- <0219> ([label :uart_rx_handler])
    0192 : 021c ; -- <0220> ([label :uart_rx_overflow_handler])
    0193 : 0222 ; -- <0221> ([label :uart_tx_overflow_handler])
    0194 : 0228 ; -- <0222> ([label :key0_handler])
    0195 : 0234 ; -- <0223> ([label :key1_handler])
    0196 : 0279 ; -- <0224> ([label :ignition_switch_off_handler])
    0197 : 0284 ; -- <0225> ([label :ignition_switch_on_handler])
    0198 : 0240 ; -- <0226> ([label :softevent3_handler])
    0199 : 0242 ; -- <0227> ([label :softevent2_handler])
    019a : 0244 ; -- <0228> ([label :softevent1_handler])
    019b : 0246 ; -- <0229> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ustimer0_handler -- = 0x019c
    019c : e00f ; -- <0234> end_event
    019d : 0073 ; -- <0234> "

-- ######## event spi_done_handler -- = 0x019e
-- discard-counter in RAM.
    019e : 4a00 ; -- <0238> ram a = $ram_daq_discard_cnt -- av_ad_hi = 0
    019f : 4e02 ; -- <0238> ram a = $ram_daq_discard_cnt -- av_ad_lo = 2
    01a0 : 0010 ; -- <0238> ram a = $ram_daq_discard_cnt -- a = av_write_data -- start read cycle
    01a1 : 0011 ; -- <0238> ram a = $ram_daq_discard_cnt -- a = av_read_data -- finish read cycle
    01a2 : e000 ; -- <0239> br az :report
    01a3 : 01b0 ; -- <0239> "
    01a4 : 0760 ; -- <0240> b = -1
    01a5 : c800 ; -- <0241> a = a+b
    01a6 : 0300 ; -- <0241> "
    01a7 : 4a00 ; -- <0242> ram $ram_daq_discard_cnt = a -- av_ad_hi = 0
    01a8 : 4e02 ; -- <0242> ram $ram_daq_discard_cnt = a -- av_ad_lo = 2
    01a9 : 4000 ; -- <0242> ram $ram_daq_discard_cnt = a -- av_write_data = a
    01aa : 0207 ; -- <0243> a = $anmux_adc_channel
    01ab : fba0 ; -- <0244> call :begin_adc_conversion
    01ac : 0263 ; -- <0244> "
    01ad : fc00 ; -- <0244> "
    01ae : e00f ; -- <0245> event_return
    01af : 0073 ; -- <0245> "

-- report ADC reading.
-- :report -- = 0x01b0
    01b0 : 000f ; -- <0249> a = spi_data
    01b1 : fba0 ; -- <0250> call :put4x
    01b2 : 00d8 ; -- <0250> "
    01b3 : fc00 ; -- <0250> "

-- decrement anmux channel & start waiting again.
    01b4 : fba0 ; -- <0253> call :anmux_get_chn
    01b5 : 009b ; -- <0253> "
    01b6 : fc00 ; -- <0253> "
    01b7 : e000 ; -- <0254> br az :all_done
    01b8 : 01c2 ; -- <0254> "
    01b9 : 0760 ; -- <0255> b = -1
    01ba : c800 ; -- <0256> a = a+b
    01bb : 0300 ; -- <0256> "
    01bc : fba0 ; -- <0257> call :anmux_set_chn
    01bd : 0097 ; -- <0257> "
    01be : fc00 ; -- <0257> "
    01bf : 3a05 ; -- <0258> mstimer1 = $anmux_settle_ms
    01c0 : e00f ; -- <0259> event_return
    01c1 : 0073 ; -- <0259> "

-- end of daq pass.
-- :all_done -- = 0x01c2
    01c2 : 020d ; -- <0263> a = 13 -- puteol
    01c3 : 0000 ; -- <0263> a = a -- puteol
    01c4 : fba0 ; -- <0263> puteol
    01c5 : 0080 ; -- <0263> "
    01c6 : fc00 ; -- <0263> "
    01c7 : 020a ; -- <0263> a = 10 -- puteol
    01c8 : 0000 ; -- <0263> a = a -- puteol
    01c9 : fba0 ; -- <0263> puteol
    01ca : 0080 ; -- <0263> "
    01cb : fc00 ; -- <0263> "
    01cc : 4a00 ; -- <0264> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    01cd : 4e0e ; -- <0264> ram $ram_dial_setting = spi_data -- av_ad_lo = 14
    01ce : 400f ; -- <0264> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    01cf : e00f ; -- <0265> end_event
    01d0 : 0073 ; -- <0265> "

-- ######## event mstimer0_handler -- = 0x01d1
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    01d1 : 37a0 ; -- <0271> mstimer0 = 1000
    01d2 : 03e8 ; -- <0271> "

-- realtime counters in RAM.
    01d3 : 4a00 ; -- <0274> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    01d4 : 4e0a ; -- <0274> ram a = $ram_seconds_cnt -- av_ad_lo = 10
    01d5 : 0010 ; -- <0274> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    01d6 : 0011 ; -- <0274> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    01d7 : 0601 ; -- <0275> b = 1
    01d8 : c800 ; -- <0276> a = a+b
    01d9 : 0300 ; -- <0276> "
    01da : 063c ; -- <0277> b = 60
    01db : e407 ; -- <0278> bn eq :same_minute
    01dc : 01ee ; -- <0278> "
    01dd : 4a00 ; -- <0279> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    01de : 4e0a ; -- <0279> ram $ram_seconds_cnt = 0 -- av_ad_lo = 10
    01df : 4200 ; -- <0279> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    01e0 : 4a00 ; -- <0280> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    01e1 : 4e08 ; -- <0280> ram a = $ram_minutes_cnt -- av_ad_lo = 8
    01e2 : 0010 ; -- <0280> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    01e3 : 0011 ; -- <0280> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    01e4 : 0601 ; -- <0281> b = 1
    01e5 : 4a00 ; -- <0282> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    01e6 : 4e08 ; -- <0282> ram $ram_minutes_cnt = a+b -- av_ad_lo = 8
    01e7 : c800 ; -- <0282> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    01e8 : 4300 ; -- <0282> "
    01e9 : fba0 ; -- <0283> call :minute_events
    01ea : 0296 ; -- <0283> "
    01eb : fc00 ; -- <0283> "
    01ec : e00f ; -- <0284> jmp :minutes_done
    01ed : 01f1 ; -- <0284> "
-- :same_minute -- = 0x01ee
    01ee : 4a00 ; -- <0286> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    01ef : 4e0a ; -- <0286> ram $ram_seconds_cnt = a -- av_ad_lo = 10
    01f0 : 4000 ; -- <0286> ram $ram_seconds_cnt = a -- av_write_data = a
-- :minutes_done -- = 0x01f1

    01f1 : fba0 ; -- <0289> call :check_power_relay
    01f2 : 029c ; -- <0289> "
    01f3 : fc00 ; -- <0289> "
    01f4 : fba0 ; -- <0290> call :start_daq_pass
    01f5 : 0248 ; -- <0290> "
    01f6 : fc00 ; -- <0290> "
    01f7 : e00f ; -- <0291> end_event
    01f8 : 0073 ; -- <0291> "

-- ######## event mstimer1_handler -- = 0x01f9
-- start a reading from the current anmux channel.
    01f9 : 4a00 ; -- <0295> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_hi = 0
    01fa : 4e02 ; -- <0295> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_lo = 2
    01fb : 4202 ; -- <0295> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_write_data = 2
    01fc : 0220 ; -- <0296> a = 32 -- putasc " "
    01fd : 0000 ; -- <0296> a = a -- putasc " "
    01fe : fba0 ; -- <0296> putasc " "
    01ff : 0080 ; -- <0296> "
    0200 : fc00 ; -- <0296> "
    0201 : 0273 ; -- <0297> a = 115 -- putasc "s"
    0202 : 0000 ; -- <0297> a = a -- putasc "s"
    0203 : fba0 ; -- <0297> putasc "s"
    0204 : 0080 ; -- <0297> "
    0205 : fc00 ; -- <0297> "
    0206 : fba0 ; -- <0298> call :anmux_get_chn
    0207 : 009b ; -- <0298> "
    0208 : fc00 ; -- <0298> "
    0209 : 0630 ; -- <0299> b = 48 -- asc b = "0"
    020a : c800 ; -- <0300> a = a+b -- putchar a+b
    020b : 0300 ; -- <0300> "
    020c : fba0 ; -- <0300> putchar a+b
    020d : 0080 ; -- <0300> "
    020e : fc00 ; -- <0300> "
    020f : 023d ; -- <0301> a = 61 -- putasc "="
    0210 : 0000 ; -- <0301> a = a -- putasc "="
    0211 : fba0 ; -- <0301> putasc "="
    0212 : 0080 ; -- <0301> "
    0213 : fc00 ; -- <0301> "
    0214 : 0207 ; -- <0302> a = $anmux_adc_channel
    0215 : fba0 ; -- <0303> call :begin_adc_conversion
    0216 : 0263 ; -- <0303> "
    0217 : fc00 ; -- <0303> "
    0218 : e00f ; -- <0304> end_event
    0219 : 0073 ; -- <0304> "

-- ######## event uart_rx_handler -- = 0x021a
-- handle data here
    021a : e00f ; -- <0308> end_event
    021b : 0073 ; -- <0308> "

-- ######## event uart_rx_overflow_handler -- = 0x021c
    021c : 5ba0 ; -- <0311> error_halt_code $err_rx_overflow -- leds = 0xfffe
    021d : fffe ; -- <0311> "
    021e : e00f ; -- <0311> error_halt_code $err_rx_overflow
    021f : 021e ; -- <0311> "
    0220 : e00f ; -- <0312> end_event
    0221 : 0073 ; -- <0312> "

-- ######## event uart_tx_overflow_handler -- = 0x0222
    0222 : 5ba0 ; -- <0315> error_halt_code $err_tx_overflow -- leds = 0xfffd
    0223 : fffd ; -- <0315> "
    0224 : e00f ; -- <0315> error_halt_code $err_tx_overflow
    0225 : 0224 ; -- <0315> "
    0226 : e00f ; -- <0316> end_event
    0227 : 0073 ; -- <0316> "

-- ######## event key0_handler -- = 0x0228
    0228 : 026b ; -- <0319> a = 107 -- putasc "k"
    0229 : 0000 ; -- <0319> a = a -- putasc "k"
    022a : fba0 ; -- <0319> putasc "k"
    022b : 0080 ; -- <0319> "
    022c : fc00 ; -- <0319> "
    022d : 0230 ; -- <0320> a = 48 -- putasc "0"
    022e : 0000 ; -- <0320> a = a -- putasc "0"
    022f : fba0 ; -- <0320> putasc "0"
    0230 : 0080 ; -- <0320> "
    0231 : fc00 ; -- <0320> "
    0232 : e00f ; -- <0321> end_event
    0233 : 0073 ; -- <0321> "

-- ######## event key1_handler -- = 0x0234
    0234 : 026b ; -- <0324> a = 107 -- putasc "k"
    0235 : 0000 ; -- <0324> a = a -- putasc "k"
    0236 : fba0 ; -- <0324> putasc "k"
    0237 : 0080 ; -- <0324> "
    0238 : fc00 ; -- <0324> "
    0239 : 0231 ; -- <0325> a = 49 -- putasc "1"
    023a : 0000 ; -- <0325> a = a -- putasc "1"
    023b : fba0 ; -- <0325> putasc "1"
    023c : 0080 ; -- <0325> "
    023d : fc00 ; -- <0325> "
    023e : e00f ; -- <0326> end_event
    023f : 0073 ; -- <0326> "

-- ######## event softevent3_handler -- = 0x0240
    0240 : e00f ; -- <0329> end_event
    0241 : 0073 ; -- <0329> "

-- ######## event softevent2_handler -- = 0x0242
    0242 : e00f ; -- <0332> end_event
    0243 : 0073 ; -- <0332> "

-- ######## event softevent1_handler -- = 0x0244
    0244 : e00f ; -- <0335> end_event
    0245 : 0073 ; -- <0335> "

-- ######## event softevent0_handler -- = 0x0246
    0246 : e00f ; -- <0338> end_event
    0247 : 0073 ; -- <0338> "

-- ######## func start_daq_pass -- = 0x0248
    0248 : 203e ; -- <0340> push rtna -- func start_daq_pass
-- daq pass counter in RAM.
    0249 : 4a00 ; -- <0342> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    024a : 4e00 ; -- <0342> ram a = $ram_daq_pass_cnt -- av_ad_lo = 0
    024b : 0010 ; -- <0342> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    024c : 0011 ; -- <0342> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    024d : 0601 ; -- <0343> b = 1
    024e : c800 ; -- <0344> a = a+b
    024f : 0300 ; -- <0344> "
    0250 : 5800 ; -- <0345> leds = a
    0251 : 4a00 ; -- <0346> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    0252 : 4e00 ; -- <0346> ram $ram_daq_pass_cnt = a -- av_ad_lo = 0
    0253 : 4000 ; -- <0346> ram $ram_daq_pass_cnt = a -- av_write_data = a
    0254 : fba0 ; -- <0347> call :put4x
    0255 : 00d8 ; -- <0347> "
    0256 : fc00 ; -- <0347> "
    0257 : 023a ; -- <0348> a = 58 -- putasc ":"
    0258 : 0000 ; -- <0348> a = a -- putasc ":"
    0259 : fba0 ; -- <0348> putasc ":"
    025a : 0080 ; -- <0348> "
    025b : fc00 ; -- <0348> "

-- start to acquire & report all anmux channels.
    025c : 0207 ; -- <0351> a = 7
    025d : fba0 ; -- <0352> call :anmux_set_chn
    025e : 0097 ; -- <0352> "
    025f : fc00 ; -- <0352> "
    0260 : 3a05 ; -- <0353> mstimer1 = $anmux_settle_ms

-- -- observe MCU utilization.
-- a = usage_count
-- call :put4x
-- usage_count = 0
    0261 : f808 ; -- <0359> pop rtna -- end_func
    0262 : fc00 ; -- <0359> end_func

-- ######## func begin_adc_conversion -- = 0x0263
-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.  pass that in a.

    0263 : 0352 ; -- <0365> a = a<<4
    0264 : 0352 ; -- <0366> a = a<<4
    0265 : 0351 ; -- <0367> a = a<<1
    0266 : 0351 ; -- <0368> a = a<<1
    0267 : 0351 ; -- <0369> a = a<<1
    0268 : 3c00 ; -- <0370> spi_data = a
    0269 : fc00 ; -- <0371> end_func

-- ######## event power_lost_handler -- = 0x026a
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    026a : 6600 ; -- <0380> power_duty = $power_duty_closing
    026b : 4a00 ; -- <0381> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    026c : 4e00 ; -- <0381> ram a = $ram_daq_pass_cnt -- av_ad_lo = 0
    026d : 0010 ; -- <0381> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    026e : 0011 ; -- <0381> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    026f : 0602 ; -- <0382> b = $relay_hold_passes
    0270 : 4a00 ; -- <0383> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    0271 : 4e06 ; -- <0383> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 6
    0272 : c800 ; -- <0383> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    0273 : 4300 ; -- <0383> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    0274 : fba0 ; -- <0388> call :save_persistent_data
    0275 : 02c3 ; -- <0388> "
    0276 : fc00 ; -- <0388> "
    0277 : e00f ; -- <0389> end_event
    0278 : 0073 ; -- <0389> "

-- ######## event ignition_switch_off_handler -- = 0x0279
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    0279 : 4a00 ; -- <0393> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    027a : 4e08 ; -- <0393> ram a = $ram_minutes_cnt -- av_ad_lo = 8
    027b : 0010 ; -- <0393> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    027c : 0011 ; -- <0393> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    027d : 060a ; -- <0394> b = $power_extend_minutes
    027e : 4a00 ; -- <0395> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    027f : 4e04 ; -- <0395> ram $ram_power_down_at_min = a+b -- av_ad_lo = 4
    0280 : c800 ; -- <0395> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    0281 : 4300 ; -- <0395> "
    0282 : e00f ; -- <0396> end_event
    0283 : 0073 ; -- <0396> "

-- ######## event ignition_switch_on_handler -- = 0x0284
    0284 : 4a00 ; -- <0399> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0285 : 4e04 ; -- <0399> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 4
    0286 : 4360 ; -- <0399> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0287 : e00f ; -- <0400> end_event
    0288 : 0073 ; -- <0400> "

-- ######## event puff1_done_handler -- = 0x0289
    0289 : 4a00 ; -- <0403> ram a = $ram_dial_setting -- av_ad_hi = 0
    028a : 4e0e ; -- <0403> ram a = $ram_dial_setting -- av_ad_lo = 14
    028b : 0010 ; -- <0403> ram a = $ram_dial_setting -- a = av_write_data -- start read cycle
    028c : 0011 ; -- <0403> ram a = $ram_dial_setting -- a = av_read_data -- finish read cycle
    028d : 0351 ; -- <0404> a = a<<1
    028e : 0351 ; -- <0405> a = a<<1
    028f : 0351 ; -- <0406> a = a<<1
    0290 : e400 ; -- <0407> bn az :nonzero
    0291 : 0293 ; -- <0407> "
    0292 : 0201 ; -- <0408> a = 1
-- :nonzero -- = 0x0293
    0293 : 6800 ; -- <0410> efi_len_us = a
    0294 : e00f ; -- <0411> end_event
    0295 : 0073 ; -- <0411> "

-- ######## func minute_events -- = 0x0296
    0296 : 203e ; -- <0413> push rtna -- func minute_events
    0297 : fba0 ; -- <0414> call :check_power_down
    0298 : 02a8 ; -- <0414> "
    0299 : fc00 ; -- <0414> "
    029a : f808 ; -- <0415> pop rtna -- end_func
    029b : fc00 ; -- <0415> end_func

-- ######## func check_power_relay -- = 0x029c
    029c : 4a00 ; -- <0418> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    029d : 4e00 ; -- <0418> ram a = $ram_daq_pass_cnt -- av_ad_lo = 0
    029e : 0010 ; -- <0418> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    029f : 0011 ; -- <0418> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    02a0 : 4a00 ; -- <0419> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    02a1 : 4e06 ; -- <0419> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 6
    02a2 : 0410 ; -- <0419> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    02a3 : 0411 ; -- <0419> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle
    02a4 : e407 ; -- <0420> bn eq :done
    02a5 : 02a7 ; -- <0420> "
-- time to begin "solenoid saver" coil power reduction by PWM.
    02a6 : 6619 ; -- <0422> power_duty = $power_duty_holding
-- :done -- = 0x02a7
    02a7 : fc00 ; -- <0424> end_func

-- ######## func check_power_down -- = 0x02a8
    02a8 : 203e ; -- <0426> push rtna -- func check_power_down
-- check power-down deadline in RAM.
    02a9 : 4a00 ; -- <0428> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    02aa : 4e08 ; -- <0428> ram a = $ram_minutes_cnt -- av_ad_lo = 8
    02ab : 0010 ; -- <0428> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    02ac : 0011 ; -- <0428> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    02ad : 4a00 ; -- <0429> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    02ae : 4e04 ; -- <0429> ram b = $ram_power_down_at_min -- av_ad_lo = 4
    02af : 0410 ; -- <0429> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    02b0 : 0411 ; -- <0429> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle
    02b1 : e407 ; -- <0430> bn eq :done
    02b2 : 02b6 ; -- <0430> "
    02b3 : fba0 ; -- <0431> call :power_down
    02b4 : 02b8 ; -- <0431> "
    02b5 : fc00 ; -- <0431> "
-- :done -- = 0x02b6
    02b6 : f808 ; -- <0433> pop rtna -- end_func
    02b7 : fc00 ; -- <0433> end_func

-- ######## func power_down -- = 0x02b8
    02b8 : 203e ; -- <0435> push rtna -- func power_down
-- this function never returns.
    02b9 : fba0 ; -- <0437> call :save_persistent_data
    02ba : 02c3 ; -- <0437> "
    02bb : fc00 ; -- <0437> "
    02bc : 6632 ; -- <0438> power_duty = $power_duty_opening
    02bd : 5ba0 ; -- <0439> error_halt_code $err_power_down -- leds = 0xfffc
    02be : fffc ; -- <0439> "
    02bf : e00f ; -- <0439> error_halt_code $err_power_down
    02c0 : 02bf ; -- <0439> "
    02c1 : f808 ; -- <0440> pop rtna -- end_func
    02c2 : fc00 ; -- <0440> end_func

-- ######## func save_persistent_data -- = 0x02c3
    02c3 : fc00 ; -- <0443> end_func

        
        END;
    
