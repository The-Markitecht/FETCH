
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 0749 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.





-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 8750 RPM = about 80 jf between rising edges on chevy ignition white wire.  ignition counter noise blanking begins here in rev 627.
-- 5000 RPM = about 140 jf
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 0022 ; -- <0189> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0189>   
    0004 : 2020 ; -- <0189>   
    0005 : 2020 ; -- <0189>   
    0006 : 6120 ; -- <0189> a 
-- "       b"
    0007 : 2020 ; -- <0189>   
    0008 : 2020 ; -- <0189>   
    0009 : 2020 ; -- <0189>   
    000a : 6220 ; -- <0189> b 
-- "       i"
    000b : 2020 ; -- <0189>   
    000c : 2020 ; -- <0189>   
    000d : 2020 ; -- <0189>   
    000e : 6920 ; -- <0189> i 
-- "       j"
    000f : 2020 ; -- <0189>   
    0010 : 2020 ; -- <0189>   
    0011 : 2020 ; -- <0189>   
    0012 : 6a20 ; -- <0189> j 
-- "       x"
    0013 : 2020 ; -- <0189>   
    0014 : 2020 ; -- <0189>   
    0015 : 2020 ; -- <0189>   
    0016 : 7820 ; -- <0189> x 
-- "       y"
    0017 : 2020 ; -- <0189>   
    0018 : 2020 ; -- <0189>   
    0019 : 2020 ; -- <0189>   
    001a : 7920 ; -- <0189> y 
-- "      ga"
    001b : 2020 ; -- <0189>   
    001c : 2020 ; -- <0189>   
    001d : 2020 ; -- <0189>   
    001e : 6167 ; -- <0189> ag
-- "      gb"
    001f : 2020 ; -- <0189>   
    0020 : 2020 ; -- <0189>   
    0021 : 2020 ; -- <0189>   
    0022 : 6267 ; -- <0189> bg
-- "      pa"
    0023 : 2020 ; -- <0189>   
    0024 : 2020 ; -- <0189>   
    0025 : 2020 ; -- <0189>   
    0026 : 6170 ; -- <0189> ap
-- "      pb"
    0027 : 2020 ; -- <0189>   
    0028 : 2020 ; -- <0189>   
    0029 : 2020 ; -- <0189>   
    002a : 6270 ; -- <0189> bp
-- "      pc"
    002b : 2020 ; -- <0189>   
    002c : 2020 ; -- <0189>   
    002d : 2020 ; -- <0189>   
    002e : 6370 ; -- <0189> cp
-- "      pd"
    002f : 2020 ; -- <0189>   
    0030 : 2020 ; -- <0189>   
    0031 : 2020 ; -- <0189>   
    0032 : 6470 ; -- <0189> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0189> --
    0034 : 7372 ; -- <0189> sr
    0035 : 6b74 ; -- <0189> kt
    0036 : 2020 ; -- <0189>   
-- "  ev_pri"
    0037 : 2020 ; -- <0189>   
    0038 : 7665 ; -- <0189> ve
    0039 : 705f ; -- <0189> p_
    003a : 6972 ; -- <0189> ir
-- "softevnt"
    003b : 6f73 ; -- <0189> os
    003c : 7466 ; -- <0189> tf
    003d : 7665 ; -- <0189> ve
    003e : 746e ; -- <0189> tn
-- "   usage"
    003f : 2020 ; -- <0189>   
    0040 : 7520 ; -- <0189> u 
    0041 : 6173 ; -- <0189> as
    0042 : 6567 ; -- <0189> eg
-- "ustimer0"
    0043 : 7375 ; -- <0189> su
    0044 : 6974 ; -- <0189> it
    0045 : 656d ; -- <0189> em
    0046 : 3072 ; -- <0189> 0r
-- "mstimer0"
    0047 : 736d ; -- <0189> sm
    0048 : 6974 ; -- <0189> it
    0049 : 656d ; -- <0189> em
    004a : 3072 ; -- <0189> 0r
-- "mstimer1"
    004b : 736d ; -- <0189> sm
    004c : 6974 ; -- <0189> it
    004d : 656d ; -- <0189> em
    004e : 3172 ; -- <0189> 1r
-- "mstimer2"
    004f : 736d ; -- <0189> sm
    0050 : 6974 ; -- <0189> it
    0051 : 656d ; -- <0189> em
    0052 : 3272 ; -- <0189> 2r
-- "spi_data"
    0053 : 7073 ; -- <0189> ps
    0054 : 5f69 ; -- <0189> _i
    0055 : 6164 ; -- <0189> ad
    0056 : 6174 ; -- <0189> at
-- "--avwrdt"
    0057 : 2f2f ; -- <0189> --
    0058 : 7661 ; -- <0189> va
    0059 : 7277 ; -- <0189> rw
    005a : 7464 ; -- <0189> td
-- "av_rd_dt"
    005b : 7661 ; -- <0189> va
    005c : 725f ; -- <0189> r_
    005d : 5f64 ; -- <0189> _d
    005e : 7464 ; -- <0189> td
-- "av_ad_hi"
    005f : 7661 ; -- <0189> va
    0060 : 615f ; -- <0189> a_
    0061 : 5f64 ; -- <0189> _d
    0062 : 6968 ; -- <0189> ih
-- "av_ad_lo"
    0063 : 7661 ; -- <0189> va
    0064 : 615f ; -- <0189> a_
    0065 : 5f64 ; -- <0189> _d
    0066 : 6f6c ; -- <0189> ol
-- "--uartdt"
    0067 : 2f2f ; -- <0189> --
    0068 : 6175 ; -- <0189> au
    0069 : 7472 ; -- <0189> tr
    006a : 7464 ; -- <0189> td
-- "uartstat"
    006b : 6175 ; -- <0189> au
    006c : 7472 ; -- <0189> tr
    006d : 7473 ; -- <0189> ts
    006e : 7461 ; -- <0189> ta
-- "    leds"
    006f : 2020 ; -- <0189>   
    0070 : 2020 ; -- <0189>   
    0071 : 656c ; -- <0189> el
    0072 : 7364 ; -- <0189> sd
-- "brd_ctrl"
    0073 : 7262 ; -- <0189> rb
    0074 : 5f64 ; -- <0189> _d
    0075 : 7463 ; -- <0189> tc
    0076 : 6c72 ; -- <0189> lr
-- "   anmux"
    0077 : 2020 ; -- <0189>   
    0078 : 6120 ; -- <0189> a 
    0079 : 6d6e ; -- <0189> mn
    007a : 7875 ; -- <0189> xu
-- "pwr_duty"
    007b : 7770 ; -- <0189> wp
    007c : 5f72 ; -- <0189> _r
    007d : 7564 ; -- <0189> ud
    007e : 7974 ; -- <0189> yt
-- "igntmcap"
    007f : 6769 ; -- <0189> gi
    0080 : 746e ; -- <0189> tn
    0081 : 636d ; -- <0189> cm
    0082 : 7061 ; -- <0189> pa
-- "igntmout"
    0083 : 6769 ; -- <0189> gi
    0084 : 746e ; -- <0189> tn
    0085 : 6f6d ; -- <0189> om
    0086 : 7475 ; -- <0189> tu
-- "puflenus"
    0087 : 7570 ; -- <0189> up
    0088 : 6c66 ; -- <0189> lf
    0089 : 6e65 ; -- <0189> ne
    008a : 7375 ; -- <0189> su

-- string resources
-- :boot_msg -- = 0x008b
-- "TGT\r\n\x0"
    008b : 4754 ; -- <0193> GT
    008c : 0d54 ; -- <0193>  T
    008d : 000a ; -- <0193>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x008e
-- initialize prior to polling loop, for minimum latency.
    008e : 07a0 ; -- <0006> b = :event_table
    008f : 0771 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0090
    0090 : 000d ; -- <0009> a = event_priority
    0091 : e000 ; -- <0010> br 0z :poll_events_again
    0092 : 0090 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0093 : 3400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0094 : d300 ; -- <0015> fetch rtna from ad0
    0095 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0096 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0097 : 6fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0098 : ffc0 ; -- <0021> "
    0099 : e00f ; -- <0021> error_halt_code 0xffc0
    009a : 0099 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x009b
    009b : 3004 ; -- <0046> push x -- func putchar_fduart

    009c : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    009d : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x009e
    009e : 041a ; -- <0053> b = fduart_status
    009f : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    00a0 : 009e ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    00a1 : 6404 ; -- <0057> fduart_data = x
    00a2 : 100c ; -- <0058> pop x -- end_func
    00a3 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x00a4
-- wait until FIFO is populated.
    00a4 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x00a5
    00a5 : 041a ; -- <0066> b = fduart_status
    00a6 : e403 ; -- <0067> bn and0z :wait_for_busy
    00a7 : 00a5 ; -- <0067> "
    00a8 : 0019 ; -- <0068> a = fduart_data
    00a9 : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x00aa
-- check for FIFO is populated.
    00aa : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    00ab : 041a ; -- <0075> b = fduart_status
    00ac : e403 ; -- <0076> bn and0z :none
    00ad : 00b0 ; -- <0076> "
    00ae : 0019 ; -- <0077> a = fduart_data
    00af : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x00b0
    00b0 : 0360 ; -- <0080> a = -1
    00b1 : fc00 ; -- <0080> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00b2
-- set & enable analog muxer
    00b2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00b3 : c800 ; -- <0008> anmux_ctrl = or
    00b4 : 7734 ; -- <0008> "
    00b5 : fc00 ; -- <0008> swapra = nop

-- ######## func anmux_get_chn -- = 0x00b6
    00b6 : 001d ; -- <0012> a = anmux_ctrl
    00b7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00b8 : c800 ; -- <0014> a = and
    00b9 : 0330 ; -- <0014> "
    00ba : fc00 ; -- <0014> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00bb
-- "0123456789abcdef"
    00bb : 3130 ; -- <0050> 10
    00bc : 3332 ; -- <0050> 32
    00bd : 3534 ; -- <0050> 54
    00be : 3736 ; -- <0050> 76
    00bf : 3938 ; -- <0050> 98
    00c0 : 6261 ; -- <0050> ba
    00c1 : 6463 ; -- <0050> dc
    00c2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00c3
    00c3 : 3004 ; -- <0054> push x -- func put4x
    00c4 : 3006 ; -- <0054> push g6 -- "
    00c5 : 303e ; -- <0054> push rtna -- "
    00c6 : 13a0 ; -- <0055> x = :hexdigits
    00c7 : 00bb ; -- <0055> "

    00c8 : 1800 ; -- <0057> g6 = a
    00c9 : 07a0 ; -- <0058> b = 0xF000
    00ca : f000 ; -- <0058> "
    00cb : c800 ; -- <0059> a = and
    00cc : 0330 ; -- <0059> "
    00cd : 0353 ; -- <0060> a = a>>4
    00ce : 0353 ; -- <0061> a = a>>4
    00cf : 0353 ; -- <0062> a = a>>4
    00d0 : fba0 ; -- <0063> call fetch_byte
    00d1 : 01dc ; -- <0063> "
    00d2 : fc00 ; -- <0063> "
    00d3 : fba0 ; -- <0064> putchar a
    00d4 : 009b ; -- <0064> "
    00d5 : fc00 ; -- <0064> "

    00d6 : 0006 ; -- <0066> a = g6
    00d7 : 07a0 ; -- <0067> b = 0x0F00
    00d8 : 0f00 ; -- <0067> "
    00d9 : c800 ; -- <0068> a = and
    00da : 0330 ; -- <0068> "
    00db : 0353 ; -- <0069> a = a>>4
    00dc : 0353 ; -- <0070> a = a>>4
    00dd : fba0 ; -- <0071> call fetch_byte
    00de : 01dc ; -- <0071> "
    00df : fc00 ; -- <0071> "
    00e0 : fba0 ; -- <0072> putchar a
    00e1 : 009b ; -- <0072> "
    00e2 : fc00 ; -- <0072> "

    00e3 : 0006 ; -- <0074> a = g6
    00e4 : 06f0 ; -- <0075> b = 0x00F0
    00e5 : c800 ; -- <0076> a = and
    00e6 : 0330 ; -- <0076> "
    00e7 : 0353 ; -- <0077> a = a>>4
    00e8 : fba0 ; -- <0078> call fetch_byte
    00e9 : 01dc ; -- <0078> "
    00ea : fc00 ; -- <0078> "
    00eb : fba0 ; -- <0079> putchar a
    00ec : 009b ; -- <0079> "
    00ed : fc00 ; -- <0079> "

    00ee : 0006 ; -- <0081> a = g6
    00ef : 060f ; -- <0082> b = 0x000F
    00f0 : c800 ; -- <0083> a = and
    00f1 : 0330 ; -- <0083> "
    00f2 : fba0 ; -- <0084> call fetch_byte
    00f3 : 01dc ; -- <0084> "
    00f4 : fc00 ; -- <0084> "
    00f5 : fba0 ; -- <0085> putchar a
    00f6 : 009b ; -- <0085> "
    00f7 : fc00 ; -- <0085> "

    00f8 : f80c ; -- <0087> pop rtna -- end_func
    00f9 : 180c ; -- <0087> pop g6 -- "
    00fa : 100c ; -- <0087> pop x -- "
    00fb : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00fc
    00fc : 3002 ; -- <0091> push i -- func get4x
    00fd : 3003 ; -- <0091> push j -- "
    00fe : 3004 ; -- <0091> push x -- "
    00ff : 3005 ; -- <0091> push y -- "
    0100 : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    0101 : 1604 ; -- <0094> y = 4
-- :again -- = 0x0102
    0102 : fba0 ; -- <0096> getchar
    0103 : 00a4 ; -- <0096> "
    0104 : fc00 ; -- <0096> "
    0105 : 13a0 ; -- <0097> x = :hexdigits
    0106 : 00bb ; -- <0097> "
    0107 : 0a10 ; -- <0098> i = 16
    0108 : fba0 ; -- <0099> call :find_in_fetch
    0109 : 01f0 ; -- <0099> "
    010a : fc00 ; -- <0099> "
    010b : 0760 ; -- <0100> b = -1
    010c : e007 ; -- <0101> br eq :fail
    010d : 0121 ; -- <0101> "
    010e : 0400 ; -- <0102> b = a
    010f : 0003 ; -- <0103> a = j
    0110 : 0352 ; -- <0104> a = a<<4
    0111 : c800 ; -- <0105> j = or
    0112 : 0f34 ; -- <0105> "
    0113 : 1360 ; -- <0106> x = -1
    0114 : c800 ; -- <0107> y = x+y
    0115 : 1720 ; -- <0107> "
    0116 : 0005 ; -- <0108> a = y
    0117 : e400 ; -- <0109> bn az :again
    0118 : 0102 ; -- <0109> "
    0119 : 0003 ; -- <0110> a = j
    011a : 0600 ; -- <0111> b = 0
    011b : f80c ; -- <0112> pop rtna -- rtn
    011c : 140c ; -- <0112> pop y -- "
    011d : 100c ; -- <0112> pop x -- "
    011e : 0c0c ; -- <0112> pop j -- "
    011f : 080c ; -- <0112> pop i -- "
    0120 : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x0121
    0121 : 0760 ; -- <0114> b = -1
    0122 : f80c ; -- <0115> pop rtna -- end_func
    0123 : 140c ; -- <0115> pop y -- "
    0124 : 100c ; -- <0115> pop x -- "
    0125 : 0c0c ; -- <0115> pop j -- "
    0126 : 080c ; -- <0115> pop i -- "
    0127 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0128
    0128 : 3002 ; -- <0121> push i -- func print_fixed
    0129 : 3003 ; -- <0121> push j -- "
    012a : 3004 ; -- <0121> push x -- "
    012b : 3005 ; -- <0121> push y -- "
    012c : 3006 ; -- <0121> push g6 -- "
    012d : 303e ; -- <0121> push rtna -- "
    012e : 0800 ; -- <0122> i = a
    012f : 0e01 ; -- <0123> j = 1
    0130 : 1001 ; -- <0124> x = b
    0131 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0132
    0132 : e002 ; -- <0127> br xz :done
    0133 : 0148 ; -- <0127> "
    0134 : 1320 ; -- <0128> x = ad2
    0135 : d002 ; -- <0129> fetch g6 from i
    0136 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0137 : 0006 ; -- <0131> a = g6 -- putchar g6
    0138 : fba0 ; -- <0131> putchar g6
    0139 : 009b ; -- <0131> "
    013a : fc00 ; -- <0131> "
    013b : e002 ; -- <0132> br xz :done
    013c : 0148 ; -- <0132> "
    013d : 1320 ; -- <0133> x = ad2
    013e : 0006 ; -- <0134> a = g6
    013f : 0353 ; -- <0135> a = a>>4
    0140 : 0353 ; -- <0136> a = a>>4
    0141 : fba0 ; -- <0137> putchar a
    0142 : 009b ; -- <0137> "
    0143 : fc00 ; -- <0137> "
    0144 : c800 ; -- <0138> i = i+j
    0145 : 0b10 ; -- <0138> "
    0146 : e00f ; -- <0139> jmp :next_word
    0147 : 0132 ; -- <0139> "
-- :done -- = 0x0148
    0148 : f80c ; -- <0141> pop rtna -- end_func
    0149 : 180c ; -- <0141> pop g6 -- "
    014a : 140c ; -- <0141> pop y -- "
    014b : 100c ; -- <0141> pop x -- "
    014c : 0c0c ; -- <0141> pop j -- "
    014d : 080c ; -- <0141> pop i -- "
    014e : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x014f
    014f : 3002 ; -- <0147> push i -- func print_nt
    0150 : 3003 ; -- <0147> push j -- "
    0151 : 3004 ; -- <0147> push x -- "
    0152 : 303e ; -- <0147> push rtna -- "
    0153 : 0800 ; -- <0148> i = a
    0154 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0155
    0155 : d002 ; -- <0151> fetch x from i
    0156 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0157 : 0004 ; -- <0153> a = x
    0158 : 06ff ; -- <0154> b = 0xff
    0159 : e003 ; -- <0155> br and0z :done
    015a : 016b ; -- <0155> "
    015b : fba0 ; -- <0156> putchar a
    015c : 009b ; -- <0156> "
    015d : fc00 ; -- <0156> "
    015e : 0004 ; -- <0157> a = x
    015f : 0353 ; -- <0158> a = a>>4
    0160 : 0353 ; -- <0159> a = a>>4
    0161 : 06ff ; -- <0160> b = 0xff
    0162 : e003 ; -- <0161> br and0z :done
    0163 : 016b ; -- <0161> "
    0164 : fba0 ; -- <0162> putchar a
    0165 : 009b ; -- <0162> "
    0166 : fc00 ; -- <0162> "
    0167 : c800 ; -- <0163> i = i+j
    0168 : 0b10 ; -- <0163> "
    0169 : e00f ; -- <0164> jmp :next_word
    016a : 0155 ; -- <0164> "
-- :done -- = 0x016b
    016b : f80c ; -- <0166> pop rtna -- end_func
    016c : 100c ; -- <0166> pop x -- "
    016d : 0c0c ; -- <0166> pop j -- "
    016e : 080c ; -- <0166> pop i -- "
    016f : fc00 ; -- <0165> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0170
    0170 : 3002 ; -- <0004> push i -- func multiply
    0171 : 3003 ; -- <0004> push j -- "
    0172 : 3004 ; -- <0004> push x -- "
    0173 : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0174 : 1000 ; -- <0009> x = a
    0175 : 1401 ; -- <0010> y = b
    0176 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0177
    0177 : e002 ; -- <0013> br xz :done
    0178 : 0186 ; -- <0013> "
    0179 : 0004 ; -- <0014> a = x
    017a : 0601 ; -- <0015> b = 1
    017b : e003 ; -- <0016> br and0z :skip_add
    017c : 0180 ; -- <0016> "
    017d : 0c05 ; -- <0017> j = y
    017e : c800 ; -- <0018> i = i+j
    017f : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0180
    0180 : 0004 ; -- <0020> a = x
    0181 : 1350 ; -- <0021> x = a>>1
    0182 : 0005 ; -- <0022> a = y
    0183 : 1751 ; -- <0023> y = a<<1
    0184 : e00f ; -- <0024> jmp :again
    0185 : 0177 ; -- <0024> "
-- :done -- = 0x0186
    0186 : 0002 ; -- <0026> a = i
    0187 : 140c ; -- <0027> pop y -- end_func
    0188 : 100c ; -- <0027> pop x -- "
    0189 : 0c0c ; -- <0027> pop j -- "
    018a : 080c ; -- <0027> pop i -- "
    018b : fc00 ; -- <0026> swapra = nop

-- ######## func divide -- = 0x018c
    018c : 3002 ; -- <0029> push i -- func divide
    018d : 3003 ; -- <0029> push j -- "
    018e : 3004 ; -- <0029> push x -- "
    018f : 3005 ; -- <0029> push y -- "
    0190 : 3006 ; -- <0029> push g6 -- "
    0191 : 3007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0192 : e005 ; -- <0037> br lt :zero
    0193 : 01cd ; -- <0037> "
    0194 : e000 ; -- <0038> br az :zero
    0195 : 01cd ; -- <0038> "
    0196 : 1000 ; -- <0039> x = a
--    g7 = x
    0197 : 0001 ; -- <0041> a = b
    0198 : e000 ; -- <0042> br az :zero
    0199 : 01cd ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    019a : 0404 ; -- <0058> b = x
    019b : 0a00 ; -- <0059> i = 0
    019c : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x019d
    019d : e006 ; -- <0062> br gt :shift_done
    019e : 01a3 ; -- <0062> "
    019f : 0351 ; -- <0063> a = a<<1
    01a0 : 0b10 ; -- <0064> i = ad1
    01a1 : e00f ; -- <0065> jmp :shift_again
    01a2 : 019d ; -- <0065> "
-- :shift_done -- = 0x01a3
    01a3 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    01a4 : 1e00 ; -- <0078> g7 = 0
    01a5 : 0f60 ; -- <0079> j = -1
-- :again -- = 0x01a6
    01a6 : e001 ; -- <0081> br iz :done
    01a7 : 01c4 ; -- <0081> "
    01a8 : 0006 ; -- <0082> a = g6
    01a9 : 0404 ; -- <0083> b = x
    01aa : e006 ; -- <0084> br gt :result0
    01ab : 01bc ; -- <0084> "
-- temp does fit; output a 1.
    01ac : 0007 ; -- <0086> a = g7
    01ad : 0351 ; -- <0087> a = a<<1
    01ae : 0601 ; -- <0088> b = 1
    01af : c800 ; -- <0089> g7 = or
    01b0 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    01b1 : 0006 ; -- <0091> a = g6
    01b2 : 0760 ; -- <0092> b = -1
    01b3 : c800 ; -- <0093> a = xor
    01b4 : 0338 ; -- <0093> "
    01b5 : 0601 ; -- <0094> b = 1
    01b6 : c800 ; -- <0095> y = a+b
    01b7 : 1700 ; -- <0095> "
    01b8 : c800 ; -- <0096> x = x+y
    01b9 : 1320 ; -- <0096> "
    01ba : e00f ; -- <0097> jmp :next
    01bb : 01be ; -- <0097> "
-- :result0 -- = 0x01bc
-- temp does not fit; output a 0.
    01bc : 0007 ; -- <0100> a = g7
    01bd : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01be
    01be : 0006 ; -- <0104> a = g6
    01bf : 1b50 ; -- <0105> g6 = a>>1
    01c0 : c800 ; -- <0106> i = i+j
    01c1 : 0b10 ; -- <0106> "
    01c2 : e00f ; -- <0107> jmp :again
    01c3 : 01a6 ; -- <0107> "

-- :done -- = 0x01c4
    01c4 : 0407 ; -- <0110> b = g7
    01c5 : 0004 ; -- <0111> a = x
    01c6 : 1c0c ; -- <0112> pop g7 -- rtn
    01c7 : 180c ; -- <0112> pop g6 -- "
    01c8 : 140c ; -- <0112> pop y -- "
    01c9 : 100c ; -- <0112> pop x -- "
    01ca : 0c0c ; -- <0112> pop j -- "
    01cb : 080c ; -- <0112> pop i -- "
    01cc : fc00 ; -- <0111> swapra = nop

-- :zero -- = 0x01cd
    01cd : 0600 ; -- <0115> b = 0
    01ce : 1c0c ; -- <0116> pop g7 -- rtn
    01cf : 180c ; -- <0116> pop g6 -- "
    01d0 : 140c ; -- <0116> pop y -- "
    01d1 : 100c ; -- <0116> pop x -- "
    01d2 : 0c0c ; -- <0116> pop j -- "
    01d3 : 080c ; -- <0116> pop i -- "
    01d4 : fc00 ; -- <0115> swapra = nop
    01d5 : 1c0c ; -- <0117> pop g7 -- end_func
    01d6 : 180c ; -- <0117> pop g6 -- "
    01d7 : 140c ; -- <0117> pop y -- "
    01d8 : 100c ; -- <0117> pop x -- "
    01d9 : 0c0c ; -- <0117> pop j -- "
    01da : 080c ; -- <0117> pop i -- "
    01db : fc00 ; -- <0116> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01dc
    01dc : 0601 ; -- <0005> b = 1
    01dd : e003 ; -- <0006> br and0z :pick_byte_even
    01de : 01e7 ; -- <0006> "
    01df : 0350 ; -- <0007> a = a>>1
    01e0 : 0404 ; -- <0008> b = x
    01e1 : c800 ; -- <0009> fetch a from a+b
    01e2 : d300 ; -- <0009> "
    01e3 : 03b0 ; -- <0009> "
    01e4 : 0353 ; -- <0010> a = a>>4
    01e5 : 0353 ; -- <0011> a = a>>4
    01e6 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x01e7
    01e7 : 0350 ; -- <0014> a = a>>1
    01e8 : 0404 ; -- <0015> b = x
    01e9 : c800 ; -- <0016> fetch a from a+b
    01ea : d300 ; -- <0016> "
    01eb : 03b0 ; -- <0016> "
    01ec : 06ff ; -- <0017> b = 0xff
    01ed : c800 ; -- <0018> a = and
    01ee : 0330 ; -- <0018> "
    01ef : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01f0
    01f0 : 3002 ; -- <0027> push i -- func find_in_fetch
    01f1 : 3003 ; -- <0027> push j -- "
    01f2 : 3005 ; -- <0027> push y -- "
    01f3 : 303e ; -- <0027> push rtna -- "
    01f4 : 1400 ; -- <0028> y = a
    01f5 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01f6
    01f6 : e001 ; -- <0031> br iz :fail
    01f7 : 0206 ; -- <0031> "
    01f8 : 0b10 ; -- <0032> i = ad1
    01f9 : 0002 ; -- <0033> a = i
    01fa : fba0 ; -- <0034> call :fetch_byte
    01fb : 01dc ; -- <0034> "
    01fc : fc00 ; -- <0034> "
    01fd : 0405 ; -- <0035> b = y
    01fe : e407 ; -- <0036> bn eq :again
    01ff : 01f6 ; -- <0036> "
-- :found -- = 0x0200
    0200 : 0002 ; -- <0038> a = i
    0201 : f80c ; -- <0039> pop rtna -- rtn
    0202 : 140c ; -- <0039> pop y -- "
    0203 : 0c0c ; -- <0039> pop j -- "
    0204 : 080c ; -- <0039> pop i -- "
    0205 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0206
    0206 : 0360 ; -- <0041> a = -1
    0207 : f80c ; -- <0042> pop rtna -- end_func
    0208 : 140c ; -- <0042> pop y -- "
    0209 : 0c0c ; -- <0042> pop j -- "
    020a : 080c ; -- <0042> pop i -- "
    020b : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x020c
    020c : 3004 ; -- <0002> push x -- func spinwait
    020d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    020e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x020f
    020f : 13a0 ; -- <0007> x = 16666
    0210 : 411a ; -- <0007> "
    0211 : 1760 ; -- <0008> y = -1
    0212 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0213
-- use of the ad2 name overrides auto-nop here.
    0213 : 1320 ; -- <0012> x = ad2
    0214 : e402 ; -- <0013> bn xz :spinwait_inner
    0215 : 0213 ; -- <0013> "
    0216 : c800 ; -- <0014> a = a+b
    0217 : 0300 ; -- <0014> "
    0218 : e400 ; -- <0015> bn az :spinwait_outer
    0219 : 020f ; -- <0015> "
    021a : 140c ; -- <0016> pop y -- end_func
    021b : 100c ; -- <0016> pop x -- "
    021c : fc00 ; -- <0015> swapra = nop




-- :cmd_table -- = 0x021d
-- "  hello"
    021d : 2020 ; -- <0005>   
    021e : 6568 ; -- <0005> eh
    021f : 6c6c ; -- <0005> ll
    0220 : 006f ; -- <0005>  o
    0221 : 02e0 ; -- <0006> ([label hello_cmd])
-- "  plstp"
    0222 : 2020 ; -- <0007>   
    0223 : 6c70 ; -- <0007> lp
    0224 : 7473 ; -- <0007> ts
    0225 : 0070 ; -- <0007>  p
    0226 : 02e4 ; -- <0008> ([label set_plan_stop_cmd])
-- "   plcr"
    0227 : 2020 ; -- <0009>   
    0228 : 7020 ; -- <0009> p 
    0229 : 636c ; -- <0009> cl
    022a : 0072 ; -- <0009>  r
    022b : 02ef ; -- <0010> ([label set_plan_crank_cmd])
-- "   plwm"
    022c : 2020 ; -- <0011>   
    022d : 7020 ; -- <0011> p 
    022e : 776c ; -- <0011> wl
    022f : 006d ; -- <0011>  m
    0230 : 02fa ; -- <0012> ([label set_plan_warmup_cmd])
-- "   plrn"
    0231 : 2020 ; -- <0013>   
    0232 : 7020 ; -- <0013> p 
    0233 : 726c ; -- <0013> rl
    0234 : 006e ; -- <0013>  n
    0235 : 0305 ; -- <0014> ([label set_plan_run_cmd])
-- "   plln"
    0236 : 2020 ; -- <0015>   
    0237 : 7020 ; -- <0015> p 
    0238 : 6c6c ; -- <0015> ll
    0239 : 006e ; -- <0015>  n
    023a : 0310 ; -- <0016> ([label set_plan_learn_cmd])
-- "   smap"
    023b : 2020 ; -- <0017>   
    023c : 7320 ; -- <0017> s 
    023d : 616d ; -- <0017> am
    023e : 0070 ; -- <0017>  p
    023f : 058b ; -- <0018> ([label dump_smap_cmd])
-- " ldsmap"
    0240 : 6c20 ; -- <0019> l 
    0241 : 7364 ; -- <0019> sd
    0242 : 616d ; -- <0019> am
    0243 : 0070 ; -- <0019>  p
    0244 : 0637 ; -- <0020> ([label load_smap_cmd])
-- " clsmap"
    0245 : 6320 ; -- <0021> c 
    0246 : 736c ; -- <0021> sl
    0247 : 616d ; -- <0021> am
    0248 : 0070 ; -- <0021>  p
    0249 : 0653 ; -- <0022> ([label clear_smap_cmd])
-- " ldtpsr"
    024a : 6c20 ; -- <0023> l 
    024b : 7464 ; -- <0023> td
    024c : 7370 ; -- <0023> sp
    024d : 0072 ; -- <0023>  r
    024e : 0668 ; -- <0024> ([label load_tps_ref_cmd])
-- " ldtpse"
    024f : 6c20 ; -- <0025> l 
    0250 : 7464 ; -- <0025> td
    0251 : 7370 ; -- <0025> sp
    0252 : 0065 ; -- <0025>  e
    0253 : 061b ; -- <0026> ([label load_tps_enrich_cmd])
-- "      ,"
    0254 : 2020 ; -- <0027>   
    0255 : 2020 ; -- <0027>   
    0256 : 2020 ; -- <0027>   
    0257 : 002c ; -- <0027>  ,
    0258 : 0686 ; -- <0028> ([label trim_lean_cmd])
-- "      ."
    0259 : 2020 ; -- <0029>   
    025a : 2020 ; -- <0029>   
    025b : 2020 ; -- <0029>   
    025c : 002e ; -- <0029>  .
    025d : 0697 ; -- <0030> ([label trim_rich_cmd])
-- "      \["
    025e : 2020 ; -- <0031>   
    025f : 2020 ; -- <0031>   
    0260 : 2020 ; -- <0031>   
    0261 : 005b ; -- <0031>  [
    0262 : 06a8 ; -- <0032> ([label trim_2lean_cmd])
-- "      \]"
    0263 : 2020 ; -- <0033>   
    0264 : 2020 ; -- <0033>   
    0265 : 2020 ; -- <0033>   
    0266 : 005d ; -- <0033>  ]
    0267 : 06b9 ; -- <0034> ([label trim_2rich_cmd])
-- "\x0\x0"
    0268 : 0000 ; -- <0035>   


-- ######## func parse_key -- = 0x0269
    0269 : 3002 ; -- <0053> push i -- func parse_key
    026a : 3004 ; -- <0053> push x -- "
    026b : 3005 ; -- <0053> push y -- "
    026c : 303e ; -- <0053> push rtna -- "

-- memorize into ram_key_buf, pushing down existing content.
    026d : 1008 ; -- <0040> x = key
    026e : 0a07 ; -- <0049> i = $key_buf_max
-- :loop_622 -- = 0x026f

    026f : 0002 ; -- <0041> a = i

    0270 : 0351 ; -- <0042> a = a<<1
    0271 : 0600 ; -- <0042> b = 0
    0272 : 5e00 ; -- <0042> av_ad_hi = 0
    0273 : 6300 ; -- <0042> av_ad_lo = ad0
    0274 : 0415 ; -- <0042> b = av_write_data
    0275 : 0416 ; -- <0042> b = av_read_data

    0276 : 1401 ; -- <0043> y = b
    0277 : 0002 ; -- <0044> a = i
    0278 : 0404 ; -- <0045> b = x

    0279 : 0351 ; -- <0046> a = a<<1
    027a : 3001 ; -- <0046> push b -- push b
    027b : 0600 ; -- <0046> b = 0
    027c : 5e00 ; -- <0046> av_ad_hi = 0
    027d : 6300 ; -- <0046> av_ad_lo = ad0
    027e : 540c ; -- <0046> pop av_write_data -- pop av_write_data

    027f : 1005 ; -- <0047> x = y


    0280 : 0002 ; -- <0049> a = i
    0281 : 0600 ; -- <0049> b = 0
    0282 : e007 ; -- <0049> br eq :end_622
    0283 : 028c ; -- <0049> "


    0284 : 0002 ; -- <0049> a = i
    0285 : 0760 ; -- <0049> b = -1
    0286 : c800 ; -- <0049> i = a+b
    0287 : 0b00 ; -- <0049> "


    0288 : 0002 ; -- <0049> a = i
    0289 : 0600 ; -- <0049> b = 0
    028a : e405 ; -- <0049> bn lt :loop_622
    028b : 026f ; -- <0049> "

-- :end_622 -- = 0x028c

    028c : 0008 ; -- <0052> a = key
    028d : 060d ; -- <0052> b = 13

    028e : e407 ; -- <0050> bn eq :else_654
    028f : 0293 ; -- <0050> "

    0290 : fba0 ; -- <0051> callx  parse_command
    0291 : 029a ; -- <0051> "
    0292 : fc00 ; -- <0051> "


    0293 : f80c ; -- <0054> pop rtna -- func parse_key
    0294 : 140c ; -- <0054> pop y -- "
    0295 : 100c ; -- <0054> pop x -- "
    0296 : 080c ; -- <0054> pop i -- "
    0297 : fc00 ; -- <0054> swapra = nop

-- :cmd_ack_msg -- = 0x0298
-- "OK\x0"
    0298 : 4b4f ; -- <0056> KO
    0299 : 0000 ; -- <0056>   

-- ######## func parse_command -- = 0x029a
    029a : 3002 ; -- <0097> push i -- func parse_command
    029b : 3004 ; -- <0097> push x -- "
    029c : 3005 ; -- <0097> push y -- "
    029d : 303e ; -- <0097> push rtna -- "

    029e : 13a0 ; -- <0059> x = :cmd_table
    029f : 021d ; -- <0059> "
-- :next_cmd -- = 0x02a0
    02a0 : d004 ; -- <0061> fetch a from x
    02a1 : 03b0 ; -- <0061> "
    02a2 : e000 ; -- <0062> br az :done
    02a3 : 02db ; -- <0062> "

    02a4 : 0a00 ; -- <0078> i = 0
-- :loop_676 -- = 0x02a5

    02a5 : 0002 ; -- <0064> a = i
    02a6 : fba0 ; -- <0065> call :fetch_byte
    02a7 : 01dc ; -- <0065> "
    02a8 : fc00 ; -- <0065> "
    02a9 : 1400 ; -- <0066> y = a
    02aa : 0620 ; -- <0067> b = 32 -- asc b = " "

    02ab : 0000 ; -- <0076> a = a
    02ac : 0401 ; -- <0076> b = b

    02ad : e007 ; -- <0068> br eq :else_685
    02ae : 02bc ; -- <0068> "

    02af : 062a ; -- <0069> b = 42 -- asc b = "*"
    02b0 : e007 ; -- <0070> br eq :matched
    02b1 : 02c4 ; -- <0070> "
-- parameter character.  succeed early.
    02b2 : 0002 ; -- <0072> a = i

    02b3 : 0351 ; -- <0073> a = a<<1
    02b4 : 0600 ; -- <0073> b = 0
    02b5 : 5e00 ; -- <0073> av_ad_hi = 0
    02b6 : 6300 ; -- <0073> av_ad_lo = ad0
    02b7 : 0415 ; -- <0073> b = av_write_data
    02b8 : 0416 ; -- <0073> b = av_read_data

    02b9 : 0005 ; -- <0074> a = y
    02ba : e407 ; -- <0075> bn eq :no_match
    02bb : 02d0 ; -- <0075> "



    02bc : 0002 ; -- <0078> a = i
    02bd : 0601 ; -- <0078> b = 1
    02be : c800 ; -- <0078> i = a+b
    02bf : 0b00 ; -- <0078> "


    02c0 : 0002 ; -- <0078> a = i
    02c1 : 0607 ; -- <0078> b = $key_buf_max
    02c2 : e005 ; -- <0078> br lt :loop_676
    02c3 : 02a5 ; -- <0078> "

-- :end_676 -- = 0x02c4

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x02c4
    02c4 : 23a0 ; -- <0082> pa = :cmd_ack_msg
    02c5 : 0298 ; -- <0082> "
    02c6 : fba0 ; -- <0082> callx  set_text_flag  :cmd_ack_msg
    02c7 : 0aa8 ; -- <0082> "
    02c8 : fc00 ; -- <0082> "
    02c9 : 1604 ; -- <0083> y = ($key_buf_len / 2)
    02ca : c800 ; -- <0084> fetch rtna from x+y
    02cb : d320 ; -- <0084> "
    02cc : fbb0 ; -- <0084> "
    02cd : fc00 ; -- <0085> swapra = nop
    02ce : e00f ; -- <0087> jmp :done
    02cf : 02db ; -- <0087> "

-- :no_match -- = 0x02d0
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    02d0 : 5e00 ; -- <0091> ram a = $ram_terminal_connected -- av_ad_hi = 0
    02d1 : 6294 ; -- <0091> ram a = $ram_terminal_connected -- av_ad_lo = 148
    02d2 : 0015 ; -- <0091> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    02d3 : 0016 ; -- <0091> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    02d4 : e000 ; -- <0092> br az :done
    02d5 : 02db ; -- <0092> "

    02d6 : 1605 ; -- <0094> y = (($key_buf_len / 2) + 1)
    02d7 : c800 ; -- <0095> x = x+y
    02d8 : 1320 ; -- <0095> "
    02d9 : e00f ; -- <0096> jmp :next_cmd
    02da : 02a0 ; -- <0096> "
-- :done -- = 0x02db

    02db : f80c ; -- <0099> pop rtna -- func parse_command
    02dc : 140c ; -- <0099> pop y -- "
    02dd : 100c ; -- <0099> pop x -- "
    02de : 080c ; -- <0099> pop i -- "
    02df : fc00 ; -- <0099> swapra = nop

-- ######## func hello_cmd -- = 0x02e0

    02e0 : 5e00 ; -- <0101> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    02e1 : 6294 ; -- <0101> ram $ram_terminal_connected = 1 -- av_ad_lo = 148
    02e2 : 5601 ; -- <0101> ram $ram_terminal_connected = 1 -- av_write_data = 1

    02e3 : fc00 ; -- <0103> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x02e4
    02e4 : 303e ; -- <0108> push rtna -- func set_plan_stop_cmd

    02e5 : 5e00 ; -- <0105> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02e6 : 628e ; -- <0105> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    02e7 : f815 ; -- <0105> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02e8 : f816 ; -- <0105> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02e9 : fc00 ; -- <0106> swapra = nop
    02ea : fba0 ; -- <0108> callx  init_plan_stop
    02eb : 031d ; -- <0108> "
    02ec : fc00 ; -- <0108> "

    02ed : f80c ; -- <0110> pop rtna -- func set_plan_stop_cmd
    02ee : fc00 ; -- <0110> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x02ef
    02ef : 303e ; -- <0115> push rtna -- func set_plan_crank_cmd

    02f0 : 5e00 ; -- <0112> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02f1 : 628e ; -- <0112> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    02f2 : f815 ; -- <0112> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02f3 : f816 ; -- <0112> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02f4 : fc00 ; -- <0113> swapra = nop
    02f5 : fba0 ; -- <0115> callx  init_plan_crank
    02f6 : 035c ; -- <0115> "
    02f7 : fc00 ; -- <0115> "

    02f8 : f80c ; -- <0117> pop rtna -- func set_plan_crank_cmd
    02f9 : fc00 ; -- <0117> swapra = nop

-- ######## func set_plan_warmup_cmd -- = 0x02fa
    02fa : 303e ; -- <0122> push rtna -- func set_plan_warmup_cmd

    02fb : 5e00 ; -- <0119> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02fc : 628e ; -- <0119> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    02fd : f815 ; -- <0119> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02fe : f816 ; -- <0119> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02ff : fc00 ; -- <0120> swapra = nop
    0300 : fba0 ; -- <0122> callx  init_plan_warmup
    0301 : 03c2 ; -- <0122> "
    0302 : fc00 ; -- <0122> "

    0303 : f80c ; -- <0124> pop rtna -- func set_plan_warmup_cmd
    0304 : fc00 ; -- <0124> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x0305
    0305 : 303e ; -- <0129> push rtna -- func set_plan_run_cmd

    0306 : 5e00 ; -- <0126> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0307 : 628e ; -- <0126> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0308 : f815 ; -- <0126> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0309 : f816 ; -- <0126> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    030a : fc00 ; -- <0127> swapra = nop
    030b : fba0 ; -- <0129> callx  init_plan_run
    030c : 06ca ; -- <0129> "
    030d : fc00 ; -- <0129> "

    030e : f80c ; -- <0131> pop rtna -- func set_plan_run_cmd
    030f : fc00 ; -- <0131> swapra = nop

-- ######## func set_plan_learn_cmd -- = 0x0310
    0310 : 303e ; -- <0136> push rtna -- func set_plan_learn_cmd

    0311 : 5e00 ; -- <0133> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0312 : 628e ; -- <0133> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0313 : f815 ; -- <0133> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0314 : f816 ; -- <0133> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0315 : fc00 ; -- <0134> swapra = nop
    0316 : fba0 ; -- <0136> callx  init_plan_learn_stoich
    0317 : 0455 ; -- <0136> "
    0318 : fc00 ; -- <0136> "

    0319 : f80c ; -- <0138> pop rtna -- func set_plan_learn_cmd
    031a : fc00 ; -- <0138> swapra = nop


-- :plan_name_stop -- = 0x031b
-- "STP\x0"
    031b : 5453 ; -- <0002> TS
    031c : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x031d
    031d : 303e ; -- <0023> push rtna -- func init_plan_stop

-- set up the stop plan.
    031e : fba0 ; -- <0006> callx  clear_ign_history
    031f : 07ec ; -- <0006> "
    0320 : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    0321 : 5e00 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    0322 : 6282 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 130
    0323 : 57a0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    0324 : 025b ; -- <0008> "
    0325 : 5e00 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0326 : 6284 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    0327 : 57a0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    0328 : 36b0 ; -- <0009> "
    0329 : 83a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    032a : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    032b : 5e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    032c : 6290 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    032d : 5600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    032e : 8600 ; -- <0016> puff_len_us = 0

-- memorize state.
    032f : 5e00 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    0330 : 6288 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 136
    0331 : 57a0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    0332 : 031b ; -- <0019> "
    0333 : 5e00 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    0334 : 628a ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 138
    0335 : 57a0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    0336 : 0342 ; -- <0020> "
    0337 : 5e00 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    0338 : 628c ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 140
    0339 : 57a0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    033a : 0346 ; -- <0021> "
    033b : 5e00 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    033c : 628e ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 142
    033d : 57a0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    033e : 0341 ; -- <0022> "

    033f : f80c ; -- <0024> pop rtna -- func init_plan_stop
    0340 : fc00 ; -- <0024> swapra = nop

-- ######## func destroy_plan_stop -- = 0x0341


    0341 : fc00 ; -- <0027> swapra = nop

-- ######## func puff_len_stop -- = 0x0342

    0342 : 5e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0343 : 6290 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    0344 : 5600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0

    0345 : fc00 ; -- <0031> swapra = nop

-- ######## func leave_stop -- = 0x0346
    0346 : 303e ; -- <0044> push rtna -- func leave_stop

-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    0347 : 001e ; -- <0035> a = power_duty
    0348 : 0680 ; -- <0036> b = $ign_switch_off_mask
    0349 : e403 ; -- <0037> bn and0z :stay
    034a : 0358 ; -- <0037> "
    034b : 5e00 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    034c : 6280 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 128
    034d : 0015 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    034e : 0016 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    034f : 0608 ; -- <0039> b = ($ign_history_len / 2)
    0350 : e006 ; -- <0040> br gt :stay
    0351 : 0358 ; -- <0040> "
    0352 : fba0 ; -- <0041> callx  destroy_plan_stop
    0353 : 0341 ; -- <0041> "
    0354 : fc00 ; -- <0041> "
    0355 : fba0 ; -- <0042> callx  init_plan_crank
    0356 : 035c ; -- <0042> "
    0357 : fc00 ; -- <0042> "
-- :stay -- = 0x0358

    0358 : f80c ; -- <0045> pop rtna -- func leave_stop
    0359 : fc00 ; -- <0045> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 10000 to 20000 us length in about 5 seconds.

-- :plan_name_crank -- = 0x035a
-- "CR\x0"
    035a : 5243 ; -- <0011> RC
    035b : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x035c
    035c : 303e ; -- <0033> push rtna -- func init_plan_crank

-- set up the crank plan.
    035d : 5e00 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    035e : 6292 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 146
    035f : 5600 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0360 : 5e00 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    0361 : 6282 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 130
    0362 : 5657 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    0363 : 5e00 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0364 : 6284 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    0365 : 57a0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    0366 : 36b0 ; -- <0018> "
    0367 : 83a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    0368 : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    0369 : 5e00 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    036a : 6290 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 144
    036b : 57a0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 10000
    036c : 2710 ; -- <0023> "
    036d : 87a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    036e : 2710 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    036f : fba0 ; -- <0026> callx  clear_ign_history
    0370 : 07ec ; -- <0026> "
    0371 : fc00 ; -- <0026> "

-- memorize state.
    0372 : 5e00 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    0373 : 6288 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 136
    0374 : 57a0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    0375 : 035a ; -- <0029> "
    0376 : 5e00 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    0377 : 628a ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 138
    0378 : 57a0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    0379 : 0385 ; -- <0030> "
    037a : 5e00 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    037b : 628c ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 140
    037c : 57a0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    037d : 03a3 ; -- <0031> "
    037e : 5e00 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    037f : 628e ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 142
    0380 : 57a0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    0381 : 0384 ; -- <0032> "

    0382 : f80c ; -- <0034> pop rtna -- func init_plan_crank
    0383 : fc00 ; -- <0034> swapra = nop

-- ######## func destroy_plan_crank -- = 0x0384


    0384 : fc00 ; -- <0037> swapra = nop

-- ######## func puff_len_crank -- = 0x0385
    0385 : 303e ; -- <0054> push rtna -- func puff_len_crank

    0386 : 5e00 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    0387 : 6292 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 146
    0388 : 0015 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0389 : 0016 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    038a : 0606 ; -- <0040> b = $crank_max_puffs
    038b : e006 ; -- <0041> br gt :puff_limit
    038c : 039a ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    038d : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    038e : 05dc ; -- <0043> "
    038f : fba0 ; -- <0044> call :multiply
    0390 : 0170 ; -- <0044> "
    0391 : fc00 ; -- <0044> "
    0392 : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    0393 : 2710 ; -- <0045> "
    0394 : 5e00 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    0395 : 6290 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 144
    0396 : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    0397 : 5700 ; -- <0046> "
    0398 : e00f ; -- <0047> jmp :done
    0399 : 03a1 ; -- <0047> "
-- :puff_limit -- = 0x039a
-- prevent the puff counter from going higher & eventually rolling over.
    039a : 5e00 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    039b : 6292 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 146
    039c : 5606 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 6
-- accept max puff len.
    039d : 5e00 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    039e : 6290 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 144
    039f : 57a0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    03a0 : 4e20 ; -- <0052> "
-- :done -- = 0x03a1

    03a1 : f80c ; -- <0055> pop rtna -- func puff_len_crank
    03a2 : fc00 ; -- <0055> swapra = nop

-- ######## func leave_crank -- = 0x03a3
    03a3 : 303e ; -- <0071> push rtna -- func leave_crank

    03a4 : fba0 ; -- <0057> callx  check_engine_stop  a
    03a5 : 0bd8 ; -- <0057> "
    03a6 : fc00 ; -- <0057> "
    03a7 : 0008 ; -- <0057> a = pa
    03a8 : e400 ; -- <0058> bn az :done
    03a9 : 03be ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    03aa : 5e00 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    03ab : 627e ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 126
    03ac : 0015 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    03ad : 0016 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    03ae : e000 ; -- <0062> br az :stay
    03af : 03be ; -- <0062> "
    03b0 : 5e00 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    03b1 : 627c ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 124
    03b2 : 0015 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    03b3 : 0016 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    03b4 : 07a0 ; -- <0064> b = $crank_success_rpm
    03b5 : 0320 ; -- <0064> "
    03b6 : e005 ; -- <0065> br lt :stay
    03b7 : 03be ; -- <0065> "
    03b8 : fba0 ; -- <0066> callx  destroy_plan_crank
    03b9 : 0384 ; -- <0066> "
    03ba : fc00 ; -- <0066> "
    03bb : fba0 ; -- <0067> callx  init_plan_warmup
    03bc : 03c2 ; -- <0067> "
    03bd : fc00 ; -- <0067> "
-- :stay -- = 0x03be

-- :done -- = 0x03be

    03be : f80c ; -- <0072> pop rtna -- func leave_crank
    03bf : fc00 ; -- <0072> swapra = nop



-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.
-- 750 = 0 degF.
-- max 6000 & min 4500 over a temp range 750 to 0x4c0 gives 6900 us puff at 74 deg F.  program rev 594.
-- this is used if the engine temp is unavailable.

-- :plan_name_warmup -- = 0x03c0
-- "WM\x0"
    03c0 : 4d57 ; -- <0016> MW
    03c1 : 0000 ; -- <0016>   

-- ######## func init_plan_warmup -- = 0x03c2

-- set up the warmup plan.
    03c2 : 5e00 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03c3 : 6214 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03c4 : 0015 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03c5 : 0016 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03c6 : 063c ; -- <0021> b = $warmup_timeout_sec
    03c7 : 5e00 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_hi = 0
    03c8 : 6296 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_lo = 150
    03c9 : c800 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_write_data = a+b
    03ca : 5700 ; -- <0022> "

-- memorize state.
    03cb : 5e00 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    03cc : 6288 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 136
    03cd : 57a0 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    03ce : 03c0 ; -- <0025> "
    03cf : 5e00 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    03d0 : 628a ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 138
    03d1 : 57a0 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    03d2 : 03dd ; -- <0026> "
    03d3 : 5e00 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    03d4 : 628c ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 140
    03d5 : 57a0 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    03d6 : 040f ; -- <0027> "
    03d7 : 5e00 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    03d8 : 628e ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 142
    03d9 : 57a0 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    03da : 03dc ; -- <0028> "

    03db : fc00 ; -- <0030> swapra = nop

-- ######## func destroy_plan_warmup -- = 0x03dc


    03dc : fc00 ; -- <0033> swapra = nop

-- ######## func puff_len_warmup -- = 0x03dd
    03dd : 3004 ; -- <0070> push x -- func puff_len_warmup
    03de : 303e ; -- <0070> push rtna -- "

-- x = enrichment us.
    03df : 13a0 ; -- <0036> x = $warmup_limping_enrichment_us
    03e0 : 07d0 ; -- <0036> "

-- check engine block temp sensor.  if valid, enrich by a linear function:
-- {warmup_min_temp_adc...warmup_success_temp_adc} -> {$warmup_max_enrichment_us...0}
    03e1 : 0202 ; -- <0040> a = $anmux_engine_block_temp

    03e2 : 0351 ; -- <0041> a = a<<1
    03e3 : 0616 ; -- <0041> b = 22
    03e4 : 5e00 ; -- <0041> av_ad_hi = 0
    03e5 : 6300 ; -- <0041> av_ad_lo = ad0
    03e6 : 0415 ; -- <0041> b = av_write_data
    03e7 : 0416 ; -- <0041> b = av_read_data

-- b = sensor reading in adc counts.
    03e8 : 03a0 ; -- <0043> a = $temp_ceiling_adc
    03e9 : 0ff0 ; -- <0043> "
    03ea : e005 ; -- <0044> br lt :temp_invalid
    03eb : 0405 ; -- <0044> "
    03ec : 03a0 ; -- <0045> a = $warmup_success_temp_adc
    03ed : 04c0 ; -- <0045> "
    03ee : e005 ; -- <0046> br lt :too_warm
    03ef : 0405 ; -- <0046> "
    03f0 : 03a0 ; -- <0047> a = $warmup_min_temp_adc
    03f1 : 02ee ; -- <0047> "
    03f2 : e005 ; -- <0048> br lt :in_range
    03f3 : 03f6 ; -- <0048> "
    03f4 : 07a0 ; -- <0049> b = $warmup_min_temp_adc
    03f5 : 02ee ; -- <0049> "
-- :in_range -- = 0x03f6
-- negate the sensor reading so as to subtract it from warmup_success_temp_adc.
    03f6 : 0360 ; -- <0052> a = 0xffff
    03f7 : c800 ; -- <0053> b = xor
    03f8 : 0738 ; -- <0053> "
    03f9 : 0201 ; -- <0054> a = 1
    03fa : c800 ; -- <0055> b = a+b
    03fb : 0700 ; -- <0055> "
    03fc : 03a0 ; -- <0056> a = $warmup_success_temp_adc
    03fd : 04c0 ; -- <0056> "
    03fe : c800 ; -- <0057> b = a+b
    03ff : 0700 ; -- <0057> "
-- b = how many counts "cold" we are.  multiply that by the slope warmup_us_per_cold_adc.
    0400 : 020c ; -- <0059> a = $warmup_us_per_cold_adc
    0401 : fba0 ; -- <0060> call :multiply
    0402 : 0170 ; -- <0060> "
    0403 : fc00 ; -- <0060> "
    0404 : 1000 ; -- <0061> x = a
-- :too_warm -- = 0x0405
-- :temp_invalid -- = 0x0405

-- apply total of base amount and enrichment.
-- $warmup_min_puff_len_us <= total <= ($warmup_min_puff_len_us + $warmup_max_enrichment_us)
    0405 : 03a0 ; -- <0067> a = $warmup_min_puff_len_us
    0406 : 09c4 ; -- <0067> "
    0407 : 0404 ; -- <0068> b = x
    0408 : 5e00 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    0409 : 6290 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 144
    040a : c800 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    040b : 5700 ; -- <0069> "

    040c : f80c ; -- <0071> pop rtna -- func puff_len_warmup
    040d : 100c ; -- <0071> pop x -- "
    040e : fc00 ; -- <0071> swapra = nop

-- ######## func leave_warmup -- = 0x040f
    040f : 303e ; -- <0099> push rtna -- func leave_warmup

    0410 : fba0 ; -- <0073> callx  check_engine_stop  a
    0411 : 0bd8 ; -- <0073> "
    0412 : fc00 ; -- <0073> "
    0413 : 0008 ; -- <0073> a = pa
    0414 : e400 ; -- <0074> bn az :done
    0415 : 0443 ; -- <0074> "

-- transition to plan_run if warmup has expired.
    0416 : 5e00 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0417 : 6214 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0418 : 0015 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0419 : 0016 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    041a : 5e00 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_hi = 0
    041b : 6296 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_lo = 150
    041c : 0415 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_write_data -- start read cycle
    041d : 0416 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_read_data -- finish read cycle

    041e : 0000 ; -- <0083> a = a
    041f : 0401 ; -- <0083> b = b

    0420 : e406 ; -- <0079> bn gt :else_1056
    0421 : 042a ; -- <0079> "

    0422 : fba0 ; -- <0080> callx  destroy_plan_warmup
    0423 : 03dc ; -- <0080> "
    0424 : fc00 ; -- <0080> "
    0425 : fba0 ; -- <0081> callx  init_plan_run
    0426 : 06ca ; -- <0081> "
    0427 : fc00 ; -- <0081> "
    0428 : e00f ; -- <0082> jmp :done
    0429 : 0443 ; -- <0082> "


-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    042a : 0202 ; -- <0087> a = $anmux_engine_block_temp

    042b : 0351 ; -- <0088> a = a<<1
    042c : 0616 ; -- <0088> b = 22
    042d : 5e00 ; -- <0088> av_ad_hi = 0
    042e : 6300 ; -- <0088> av_ad_lo = ad0
    042f : 0415 ; -- <0088> b = av_write_data
    0430 : 0416 ; -- <0088> b = av_read_data

    0431 : 03a0 ; -- <0089> a = $temp_ceiling_adc
    0432 : 0ff0 ; -- <0089> "

    0433 : 0000 ; -- <0096> a = a
    0434 : 0401 ; -- <0096> b = b

    0435 : e406 ; -- <0090> bn gt :else_1077
    0436 : 0443 ; -- <0090> "

    0437 : 03a0 ; -- <0091> a = $warmup_success_temp_adc
    0438 : 04c0 ; -- <0091> "

    0439 : 0000 ; -- <0095> a = a
    043a : 0401 ; -- <0095> b = b

    043b : e405 ; -- <0092> bn lt :else_1083
    043c : 0443 ; -- <0092> "

    043d : fba0 ; -- <0093> callx  destroy_plan_warmup
    043e : 03dc ; -- <0093> "
    043f : fc00 ; -- <0093> "
    0440 : fba0 ; -- <0094> callx  init_plan_run
    0441 : 06ca ; -- <0094> "
    0442 : fc00 ; -- <0094> "



-- :done -- = 0x0443

    0443 : f80c ; -- <0100> pop rtna -- func leave_warmup
    0444 : fc00 ; -- <0100> swapra = nop



-- :rpm_cells -- = 0x0445
    0445 : 01f4 ; -- <0004> 500
    0446 : 0271 ; -- <0005> 625
    0447 : 030d ; -- <0006> 781
    0448 : 03d1 ; -- <0007> 977
    0449 : 04c5 ; -- <0008> 1221
    044a : 05f6 ; -- <0009> 1526
    044b : 0773 ; -- <0010> 1907
    044c : 0950 ; -- <0011> 2384
    044d : 0ba4 ; -- <0012> 2980
    044e : 0e8d ; -- <0013> 3725
    044f : 1231 ; -- <0014> 4657
    0450 : 16bd ; -- <0015> 5821
    0451 : 1c6c ; -- <0016> 7276
    0452 : ffff ; -- <0017> 0xffff




-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed.

-- o2 sensor interpetation & state machine.

-- :plan_name_learn_stoich -- = 0x0453
-- "LN\x0"
    0453 : 4e4c ; -- <0059> NL
    0454 : 0000 ; -- <0059>   

-- ######## func init_plan_learn_stoich -- = 0x0455

-- set up the learn_stoich plan.
    0455 : 5e00 ; -- <0063> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    0456 : 62e4 ; -- <0063> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 228
    0457 : 560a ; -- <0063> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- memorize state.
    0458 : 5e00 ; -- <0066> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_hi = 0
    0459 : 6288 ; -- <0066> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_lo = 136
    045a : 57a0 ; -- <0066> ram $ram_plan_name = :plan_name_learn_stoich -- av_write_data = :plan_name_learn_stoich
    045b : 0453 ; -- <0066> "
    045c : 5e00 ; -- <0067> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_hi = 0
    045d : 628a ; -- <0067> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_lo = 138
    045e : 57a0 ; -- <0067> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_write_data = :puff_len_learn_stoich
    045f : 046e ; -- <0067> "
    0460 : 5e00 ; -- <0068> ram $ram_transition_func = :leave_learn_stoich -- av_ad_hi = 0
    0461 : 628c ; -- <0068> ram $ram_transition_func = :leave_learn_stoich -- av_ad_lo = 140
    0462 : 57a0 ; -- <0068> ram $ram_transition_func = :leave_learn_stoich -- av_write_data = :leave_learn_stoich
    0463 : 0568 ; -- <0068> "
    0464 : 5e00 ; -- <0069> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_hi = 0
    0465 : 628e ; -- <0069> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_lo = 142
    0466 : 57a0 ; -- <0069> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_write_data = :destroy_plan_learn_stoich
    0467 : 0469 ; -- <0069> "

    0468 : fc00 ; -- <0071> swapra = nop

-- ######## func destroy_plan_learn_stoich -- = 0x0469


    0469 : fc00 ; -- <0074> swapra = nop

-- :lrns_trim_up_msg -- = 0x046a
-- "trR\x0"
    046a : 7274 ; -- <0076> rt
    046b : 0052 ; -- <0076>  R
-- :lrns_trim_down_msg -- = 0x046c
-- "trL\x0"
    046c : 7274 ; -- <0078> rt
    046d : 004c ; -- <0078>  L

-- ######## func puff_len_learn_stoich -- = 0x046e
    046e : 3002 ; -- <0113> push i -- func puff_len_learn_stoich
    046f : 3003 ; -- <0113> push j -- "
    0470 : 3006 ; -- <0113> push g6 -- "
    0471 : 3007 ; -- <0113> push g7 -- "
    0472 : 303e ; -- <0113> push rtna -- "

    0473 : 5e00 ; -- <0081> ram i = $ram_lrns_ticks_remain -- av_ad_hi = 0
    0474 : 62e4 ; -- <0081> ram i = $ram_lrns_ticks_remain -- av_ad_lo = 228
    0475 : 0815 ; -- <0081> ram i = $ram_lrns_ticks_remain -- i = av_write_data -- start read cycle
    0476 : 0816 ; -- <0081> ram i = $ram_lrns_ticks_remain -- i = av_read_data -- finish read cycle

    0477 : 0002 ; -- <0112> a = i
    0478 : 0600 ; -- <0112> b = 0

    0479 : e406 ; -- <0082> bn gt :else_1145
    047a : 0482 ; -- <0082> "

    047b : 0f60 ; -- <0083> j = -1
    047c : 5e00 ; -- <0084> ram $ram_lrns_ticks_remain = i+j -- av_ad_hi = 0
    047d : 62e4 ; -- <0084> ram $ram_lrns_ticks_remain = i+j -- av_ad_lo = 228
    047e : c800 ; -- <0084> ram $ram_lrns_ticks_remain = i+j -- av_write_data = i+j
    047f : 5710 ; -- <0084> "

    0480 : e00f ; -- <0086> jmp :end_1145
    0481 : 04be ; -- <0086> "

    0482 : 5e00 ; -- <0087> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    0483 : 62e4 ; -- <0087> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 228
    0484 : 560a ; -- <0087> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    0485 : 5e00 ; -- <0090> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    0486 : 6290 ; -- <0090> ram i = $ram_next_puff_len_us -- av_ad_lo = 144
    0487 : 0815 ; -- <0090> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    0488 : 0816 ; -- <0090> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    0489 : 0e00 ; -- <0091> j = 0
    048a : 5e00 ; -- <0092> ram g6 = $ram_o2_state -- av_ad_hi = 0
    048b : 62e6 ; -- <0092> ram g6 = $ram_o2_state -- av_ad_lo = 230
    048c : 1815 ; -- <0092> ram g6 = $ram_o2_state -- g6 = av_write_data -- start read cycle
    048d : 1816 ; -- <0092> ram g6 = $ram_o2_state -- g6 = av_read_data -- finish read cycle
    048e : fba0 ; -- <0093> callx  interpret_o2
    048f : 052b ; -- <0093> "
    0490 : fc00 ; -- <0093> "
    0491 : 5e00 ; -- <0094> ram g7 = $ram_o2_state -- av_ad_hi = 0
    0492 : 62e6 ; -- <0094> ram g7 = $ram_o2_state -- av_ad_lo = 230
    0493 : 1c15 ; -- <0094> ram g7 = $ram_o2_state -- g7 = av_write_data -- start read cycle
    0494 : 1c16 ; -- <0094> ram g7 = $ram_o2_state -- g7 = av_read_data -- finish read cycle

    0495 : 0007 ; -- <0111> a = g7
    0496 : 0601 ; -- <0111> b = 1

    0497 : e407 ; -- <0095> bn eq :else_1175
    0498 : 04ae ; -- <0095> "

-- sensing a lean condition.  trim up to enrich.

    0499 : 0002 ; -- <0099> a = i
    049a : 07a0 ; -- <0099> b = 10000
    049b : 2710 ; -- <0099> "

    049c : e405 ; -- <0097> bn lt :else_1180
    049d : 04a0 ; -- <0097> "

    049e : 0fa0 ; -- <0098> j = $lrns_puff_step_up_us
    049f : 0258 ; -- <0098> "

    04a0 : 23a0 ; -- <0100> pa = :lrns_trim_up_msg
    04a1 : 046a ; -- <0100> "
    04a2 : fba0 ; -- <0100> callx  set_text_flag  :lrns_trim_up_msg
    04a3 : 0aa8 ; -- <0100> "
    04a4 : fc00 ; -- <0100> "

    04a5 : 0006 ; -- <0104> a = g6
    04a6 : 0602 ; -- <0104> b = 2

    04a7 : e407 ; -- <0101> bn eq :else_1191
    04a8 : 04ac ; -- <0101> "

-- o2 state just switched to lean.  adjust map.
    04a9 : fba0 ; -- <0103> callx  learn_smap
    04aa : 04ca ; -- <0103> "
    04ab : fc00 ; -- <0103> "


    04ac : e00f ; -- <0106> jmp :end_1175
    04ad : 04ba ; -- <0106> "

-- sensing a rich condition.  trim down to lean it out.

    04ae : 0002 ; -- <0110> a = i
    04af : 07a0 ; -- <0110> b = 2000
    04b0 : 07d0 ; -- <0110> "

    04b1 : e406 ; -- <0108> bn gt :else_1201
    04b2 : 04b5 ; -- <0108> "

    04b3 : 0fa0 ; -- <0109> j = $lrns_puff_step_down_us
    04b4 : ffdf ; -- <0109> "

    04b5 : 23a0 ; -- <0111> pa = :lrns_trim_down_msg
    04b6 : 046c ; -- <0111> "
    04b7 : fba0 ; -- <0111> callx  set_text_flag  :lrns_trim_down_msg
    04b8 : 0aa8 ; -- <0111> "
    04b9 : fc00 ; -- <0111> "

    04ba : 5e00 ; -- <0112> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    04bb : 6290 ; -- <0112> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 144
    04bc : c800 ; -- <0112> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    04bd : 5710 ; -- <0112> "


    04be : f80c ; -- <0114> pop rtna -- func puff_len_learn_stoich
    04bf : 1c0c ; -- <0114> pop g7 -- "
    04c0 : 180c ; -- <0114> pop g6 -- "
    04c1 : 0c0c ; -- <0114> pop j -- "
    04c2 : 080c ; -- <0114> pop i -- "
    04c3 : fc00 ; -- <0114> swapra = nop

-- :lrns_enrich_msg -- = 0x04c4
-- "lrnR\x0"
    04c4 : 726c ; -- <0116> rl
    04c5 : 526e ; -- <0116> Rn
    04c6 : 0000 ; -- <0116>   
-- :lrns_lean_msg -- = 0x04c7
-- "lrnL\x0"
    04c7 : 726c ; -- <0118> rl
    04c8 : 4c6e ; -- <0118> Ln
    04c9 : 0000 ; -- <0118>   

-- ######## func learn_smap -- = 0x04ca
    04ca : 3002 ; -- <0154> push i -- func learn_smap
    04cb : 3004 ; -- <0154> push x -- "
    04cc : 3005 ; -- <0154> push y -- "
    04cd : 303e ; -- <0154> push rtna -- "

    04ce : 5e00 ; -- <0121> ram a = $ram_rpm_valid -- av_ad_hi = 0
    04cf : 627e ; -- <0121> ram a = $ram_rpm_valid -- av_ad_lo = 126
    04d0 : 0015 ; -- <0121> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    04d1 : 0016 ; -- <0121> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    04d2 : 0000 ; -- <0153> a = a
    04d3 : 0601 ; -- <0153> b = 1

    04d4 : e407 ; -- <0122> bn eq :else_1236
    04d5 : 0522 ; -- <0122> "

-- let g6 = map cell num.  x = map puff len.  i = observed stoich puff len.
    04d6 : 5e00 ; -- <0124> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    04d7 : 627c ; -- <0124> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    04d8 : 2015 ; -- <0124> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    04d9 : 2016 ; -- <0124> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    04da : fba0 ; -- <0125> callx  find_rpm_cell  pa  g6
    04db : 056e ; -- <0125> "
    04dc : fc00 ; -- <0125> "
    04dd : 1808 ; -- <0125> g6 = pa
    04de : 0006 ; -- <0126> a = g6

    04df : 0351 ; -- <0127> a = a<<1
    04e0 : 0698 ; -- <0127> b = 152
    04e1 : 5e00 ; -- <0127> av_ad_hi = 0
    04e2 : 6300 ; -- <0127> av_ad_lo = ad0
    04e3 : 0415 ; -- <0127> b = av_write_data
    04e4 : 0416 ; -- <0127> b = av_read_data

    04e5 : 1001 ; -- <0128> x = b
    04e6 : 5e00 ; -- <0129> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    04e7 : 6290 ; -- <0129> ram i = $ram_next_puff_len_us -- av_ad_lo = 144
    04e8 : 0815 ; -- <0129> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    04e9 : 0816 ; -- <0129> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    04ea : 17a0 ; -- <0130> y = (0xffff - $lrns_map_step + 1)
    04eb : ff38 ; -- <0130> "

    04ec : c800 ; -- <0137> a = x+y
    04ed : 0320 ; -- <0137> "
    04ee : 0402 ; -- <0137> b = i

    04ef : e406 ; -- <0131> bn gt :else_1263
    04f0 : 04ff ; -- <0131> "

-- map is richer than observed stoich.  lean the map 1 step.
    04f1 : 0006 ; -- <0133> a = g6
    04f2 : c800 ; -- <0134> b = x+y
    04f3 : 0720 ; -- <0134> "

    04f4 : 0351 ; -- <0135> a = a<<1
    04f5 : 3001 ; -- <0135> push b -- push b
    04f6 : 0698 ; -- <0135> b = 152
    04f7 : 5e00 ; -- <0135> av_ad_hi = 0
    04f8 : 6300 ; -- <0135> av_ad_lo = ad0
    04f9 : 540c ; -- <0135> pop av_write_data -- pop av_write_data

    04fa : 23a0 ; -- <0136> pa = :lrns_lean_msg
    04fb : 04c7 ; -- <0136> "
    04fc : fba0 ; -- <0136> callx  set_text_flag  :lrns_lean_msg
    04fd : 0aa8 ; -- <0136> "
    04fe : fc00 ; -- <0136> "

    04ff : 16c8 ; -- <0138> y = $lrns_map_step

    0500 : c800 ; -- <0145> a = x+y
    0501 : 0320 ; -- <0145> "
    0502 : 0402 ; -- <0145> b = i

    0503 : e405 ; -- <0139> bn lt :else_1283
    0504 : 0513 ; -- <0139> "

-- map is leaner than observed stoich.  rich the map 1 step.
    0505 : 0006 ; -- <0141> a = g6
    0506 : c800 ; -- <0142> b = x+y
    0507 : 0720 ; -- <0142> "

    0508 : 0351 ; -- <0143> a = a<<1
    0509 : 3001 ; -- <0143> push b -- push b
    050a : 0698 ; -- <0143> b = 152
    050b : 5e00 ; -- <0143> av_ad_hi = 0
    050c : 6300 ; -- <0143> av_ad_lo = ad0
    050d : 540c ; -- <0143> pop av_write_data -- pop av_write_data

    050e : 23a0 ; -- <0144> pa = :lrns_enrich_msg
    050f : 04c4 ; -- <0144> "
    0510 : fba0 ; -- <0144> callx  set_text_flag  :lrns_enrich_msg
    0511 : 0aa8 ; -- <0144> "
    0512 : fc00 ; -- <0144> "


-- dump smap if we haven't done so lately.
    0513 : 5e00 ; -- <0148> ram a = $ram_last_learn_second -- av_ad_hi = 0
    0514 : 62b2 ; -- <0148> ram a = $ram_last_learn_second -- av_ad_lo = 178
    0515 : 0015 ; -- <0148> ram a = $ram_last_learn_second -- a = av_write_data -- start read cycle
    0516 : 0016 ; -- <0148> ram a = $ram_last_learn_second -- a = av_read_data -- finish read cycle
    0517 : 5e00 ; -- <0149> ram b = $ram_seconds_cnt -- av_ad_hi = 0
    0518 : 6242 ; -- <0149> ram b = $ram_seconds_cnt -- av_ad_lo = 66
    0519 : 0415 ; -- <0149> ram b = $ram_seconds_cnt -- b = av_write_data -- start read cycle
    051a : 0416 ; -- <0149> ram b = $ram_seconds_cnt -- b = av_read_data -- finish read cycle

    051b : 0000 ; -- <0152> a = a
    051c : 0401 ; -- <0152> b = b

    051d : e007 ; -- <0150> br eq :else_1309
    051e : 0522 ; -- <0150> "

    051f : fba0 ; -- <0151> callx  dump_smap_cmd
    0520 : 058b ; -- <0151> "
    0521 : fc00 ; -- <0151> "



    0522 : f80c ; -- <0155> pop rtna -- func learn_smap
    0523 : 140c ; -- <0155> pop y -- "
    0524 : 100c ; -- <0155> pop x -- "
    0525 : 080c ; -- <0155> pop i -- "
    0526 : fc00 ; -- <0155> swapra = nop

-- :o2_rich_msg -- = 0x0527
-- "o2R\x0"
    0527 : 326f ; -- <0157> 2o
    0528 : 0052 ; -- <0157>  R
-- :o2_lean_msg -- = 0x0529
-- "o2L\x0"
    0529 : 326f ; -- <0159> 2o
    052a : 004c ; -- <0159>  L

-- ######## func interpret_o2 -- = 0x052b

    052b : 5e00 ; -- <0162> ram a = $ram_o2_state -- av_ad_hi = 0
    052c : 62e6 ; -- <0162> ram a = $ram_o2_state -- av_ad_lo = 230
    052d : 0015 ; -- <0162> ram a = $ram_o2_state -- a = av_write_data -- start read cycle
    052e : 0016 ; -- <0162> ram a = $ram_o2_state -- a = av_read_data -- finish read cycle

    052f : 0000 ; -- <0173> a = a
    0530 : 0601 ; -- <0173> b = 1

    0531 : e007 ; -- <0163> br eq :else_1329
    0532 : 0546 ; -- <0163> "

-- check sensor for lean state.
    0533 : 0205 ; -- <0165> a = $o2_adc_channel

    0534 : 0351 ; -- <0166> a = a<<1
    0535 : 0626 ; -- <0166> b = 38
    0536 : 5e00 ; -- <0166> av_ad_hi = 0
    0537 : 6300 ; -- <0166> av_ad_lo = ad0
    0538 : 0415 ; -- <0166> b = av_write_data
    0539 : 0416 ; -- <0166> b = av_read_data

    053a : 03a0 ; -- <0167> a = $o2_lean_thresh_adc
    053b : 01c2 ; -- <0167> "

    053c : 0000 ; -- <0172> a = a
    053d : 0401 ; -- <0172> b = b

    053e : e406 ; -- <0168> bn gt :else_1342
    053f : 0546 ; -- <0168> "

    0540 : 5e00 ; -- <0169> ram $ram_o2_state = $o2_state_lean -- av_ad_hi = 0
    0541 : 62e6 ; -- <0169> ram $ram_o2_state = $o2_state_lean -- av_ad_lo = 230
    0542 : 5601 ; -- <0169> ram $ram_o2_state = $o2_state_lean -- av_write_data = 1
    0543 : 5e00 ; -- <0170> ram $ram_o2_been_lean = 1 -- av_ad_hi = 0
    0544 : 62ea ; -- <0170> ram $ram_o2_been_lean = 1 -- av_ad_lo = 234
    0545 : 5601 ; -- <0170> ram $ram_o2_been_lean = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_lean_msg



    0546 : 0000 ; -- <0184> a = a
    0547 : 0602 ; -- <0184> b = 2

    0548 : e007 ; -- <0174> br eq :else_1352
    0549 : 055d ; -- <0174> "

-- check sensor for rich state.
    054a : 0205 ; -- <0176> a = $o2_adc_channel

    054b : 0351 ; -- <0177> a = a<<1
    054c : 0626 ; -- <0177> b = 38
    054d : 5e00 ; -- <0177> av_ad_hi = 0
    054e : 6300 ; -- <0177> av_ad_lo = ad0
    054f : 0415 ; -- <0177> b = av_write_data
    0550 : 0416 ; -- <0177> b = av_read_data

    0551 : 03a0 ; -- <0178> a = $o2_rich_thresh_adc
    0552 : 02bc ; -- <0178> "

    0553 : 0000 ; -- <0183> a = a
    0554 : 0401 ; -- <0183> b = b

    0555 : e405 ; -- <0179> bn lt :else_1365
    0556 : 055d ; -- <0179> "

    0557 : 5e00 ; -- <0180> ram $ram_o2_state = $o2_state_rich -- av_ad_hi = 0
    0558 : 62e6 ; -- <0180> ram $ram_o2_state = $o2_state_rich -- av_ad_lo = 230
    0559 : 5602 ; -- <0180> ram $ram_o2_state = $o2_state_rich -- av_write_data = 2
    055a : 5e00 ; -- <0181> ram $ram_o2_been_rich = 1 -- av_ad_hi = 0
    055b : 62e8 ; -- <0181> ram $ram_o2_been_rich = 1 -- av_ad_lo = 232
    055c : 5601 ; -- <0181> ram $ram_o2_been_rich = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_rich_msg



    055d : fc00 ; -- <0186> swapra = nop

-- ######## func init_o2_state -- = 0x055e

    055e : 5e00 ; -- <0188> ram $ram_o2_state = $o2_state_init -- av_ad_hi = 0
    055f : 62e6 ; -- <0188> ram $ram_o2_state = $o2_state_init -- av_ad_lo = 230
    0560 : 5600 ; -- <0188> ram $ram_o2_state = $o2_state_init -- av_write_data = 0
    0561 : 5e00 ; -- <0189> ram $ram_o2_been_lean = 0 -- av_ad_hi = 0
    0562 : 62ea ; -- <0189> ram $ram_o2_been_lean = 0 -- av_ad_lo = 234
    0563 : 5600 ; -- <0189> ram $ram_o2_been_lean = 0 -- av_write_data = 0
    0564 : 5e00 ; -- <0190> ram $ram_o2_been_rich = 0 -- av_ad_hi = 0
    0565 : 62e8 ; -- <0190> ram $ram_o2_been_rich = 0 -- av_ad_lo = 232
    0566 : 5600 ; -- <0190> ram $ram_o2_been_rich = 0 -- av_write_data = 0

    0567 : fc00 ; -- <0192> swapra = nop

-- ######## func leave_learn_stoich -- = 0x0568
    0568 : 303e ; -- <0195> push rtna -- func leave_learn_stoich

    0569 : fba0 ; -- <0194> callx  check_engine_stop  pa
    056a : 0bd8 ; -- <0194> "
    056b : fc00 ; -- <0194> "

    056c : f80c ; -- <0196> pop rtna -- func leave_learn_stoich
    056d : fc00 ; -- <0196> swapra = nop

-- ######## func find_rpm_cell -- = 0x056e
    056e : 3002 ; -- <0213> push i -- func find_rpm_cell
    056f : 3003 ; -- <0213> push j -- "

    0570 : 0a01 ; -- <0198> i = 1
    0571 : 0008 ; -- <0199> a = rpm
    0572 : 0760 ; -- <0200> b = 0xffff
    0573 : e007 ; -- <0201> br eq :found
    0574 : 0582 ; -- <0201> "
-- :next_cell -- = 0x0575
    0575 : 0fa0 ; -- <0203> j = :rpm_cells
    0576 : 0445 ; -- <0203> "
    0577 : c800 ; -- <0204> fetch a from i+j
    0578 : d310 ; -- <0204> "
    0579 : 03b0 ; -- <0204> "
    057a : 0408 ; -- <0205> b = rpm
    057b : e006 ; -- <0206> br gt :found
    057c : 0582 ; -- <0206> "
    057d : 0e01 ; -- <0207> j = 1
    057e : c800 ; -- <0208> i = i+j
    057f : 0b10 ; -- <0208> "
    0580 : e00f ; -- <0209> jmp :next_cell
    0581 : 0575 ; -- <0209> "
-- :found -- = 0x0582
    0582 : 0f60 ; -- <0211> j = -1
    0583 : c800 ; -- <0212> cell = i+j
    0584 : 2310 ; -- <0212> "
    0585 : 0c0c ; -- <0212> pop j -- rtn i+j
    0586 : 080c ; -- <0212> pop i -- "
    0587 : fc00 ; -- <0211> swapra = nop

    0588 : 0c0c ; -- <0214> pop j -- func find_rpm_cell
    0589 : 080c ; -- <0214> pop i -- "
    058a : fc00 ; -- <0214> swapra = nop

-- ######## func dump_smap_cmd -- = 0x058b
    058b : 3004 ; -- <0253> push x -- func dump_smap_cmd
    058c : 303e ; -- <0253> push rtna -- "

    058d : 020d ; -- <0216> a = 13 -- puteol
    058e : fba0 ; -- <0216> puteol
    058f : 009b ; -- <0216> "
    0590 : fc00 ; -- <0216> "
    0591 : 020a ; -- <0216> a = 10 -- puteol
    0592 : fba0 ; -- <0216> puteol
    0593 : 009b ; -- <0216> "
    0594 : fc00 ; -- <0216> "
    0595 : 5e00 ; -- <0217> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    0596 : 627c ; -- <0217> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    0597 : 2015 ; -- <0217> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    0598 : 2016 ; -- <0217> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    0599 : fba0 ; -- <0218> callx  find_rpm_cell  pa  pa
    059a : 056e ; -- <0218> "
    059b : fc00 ; -- <0218> "
    059c : 1200 ; -- <0228> x = 0
-- :loop_1436 -- = 0x059d

    059d : 0004 ; -- <0219> a = x

    059e : 0351 ; -- <0220> a = a<<1
    059f : 0698 ; -- <0220> b = 152
    05a0 : 5e00 ; -- <0220> av_ad_hi = 0
    05a1 : 6300 ; -- <0220> av_ad_lo = ad0
    05a2 : 0415 ; -- <0220> b = av_write_data
    05a3 : 0416 ; -- <0220> b = av_read_data

    05a4 : 0001 ; -- <0221> a = b
    05a5 : fba0 ; -- <0222> call put4x
    05a6 : 00c3 ; -- <0222> "
    05a7 : fc00 ; -- <0222> "

    05a8 : 0004 ; -- <0225> a = x
    05a9 : 0408 ; -- <0225> b = pa

    05aa : e407 ; -- <0223> bn eq :else_1450
    05ab : 05b0 ; -- <0223> "

    05ac : 023c ; -- <0224> a = 60 -- putasc "<"
    05ad : fba0 ; -- <0224> putasc "<"
    05ae : 009b ; -- <0224> "
    05af : fc00 ; -- <0224> "

    05b0 : 0220 ; -- <0226> a = 32 -- putasc " "
    05b1 : fba0 ; -- <0226> putasc " "
    05b2 : 009b ; -- <0226> "
    05b3 : fc00 ; -- <0226> "


    05b4 : 0004 ; -- <0228> a = x
    05b5 : 0601 ; -- <0228> b = 1
    05b6 : c800 ; -- <0228> x = a+b
    05b7 : 1300 ; -- <0228> "


    05b8 : 0004 ; -- <0228> a = x
    05b9 : 060d ; -- <0228> b = $num_rpm_cells
    05ba : e005 ; -- <0228> br lt :loop_1436
    05bb : 059d ; -- <0228> "

-- :end_1436 -- = 0x05bc
    05bc : 020d ; -- <0229> a = 13 -- puteol
    05bd : fba0 ; -- <0229> puteol
    05be : 009b ; -- <0229> "
    05bf : fc00 ; -- <0229> "
    05c0 : 020a ; -- <0229> a = 10 -- puteol
    05c1 : fba0 ; -- <0229> puteol
    05c2 : 009b ; -- <0229> "
    05c3 : fc00 ; -- <0229> "
    05c4 : 1200 ; -- <0239> x = 0
-- :loop_1476 -- = 0x05c5

    05c5 : 0004 ; -- <0230> a = x

    05c6 : 0351 ; -- <0231> a = a<<1
    05c7 : 06b4 ; -- <0231> b = 180
    05c8 : 5e00 ; -- <0231> av_ad_hi = 0
    05c9 : 6300 ; -- <0231> av_ad_lo = ad0
    05ca : 0415 ; -- <0231> b = av_write_data
    05cb : 0416 ; -- <0231> b = av_read_data

    05cc : 0001 ; -- <0232> a = b
    05cd : fba0 ; -- <0233> call put4x
    05ce : 00c3 ; -- <0233> "
    05cf : fc00 ; -- <0233> "

    05d0 : 0004 ; -- <0236> a = x
    05d1 : 0408 ; -- <0236> b = pa

    05d2 : e407 ; -- <0234> bn eq :else_1490
    05d3 : 05d8 ; -- <0234> "

    05d4 : 023c ; -- <0235> a = 60 -- putasc "<"
    05d5 : fba0 ; -- <0235> putasc "<"
    05d6 : 009b ; -- <0235> "
    05d7 : fc00 ; -- <0235> "

    05d8 : 0220 ; -- <0237> a = 32 -- putasc " "
    05d9 : fba0 ; -- <0237> putasc " "
    05da : 009b ; -- <0237> "
    05db : fc00 ; -- <0237> "


    05dc : 0004 ; -- <0239> a = x
    05dd : 0601 ; -- <0239> b = 1
    05de : c800 ; -- <0239> x = a+b
    05df : 1300 ; -- <0239> "


    05e0 : 0004 ; -- <0239> a = x
    05e1 : 060d ; -- <0239> b = $num_tps_cells
    05e2 : e005 ; -- <0239> br lt :loop_1476
    05e3 : 05c5 ; -- <0239> "

-- :end_1476 -- = 0x05e4
    05e4 : 020d ; -- <0240> a = 13 -- puteol
    05e5 : fba0 ; -- <0240> puteol
    05e6 : 009b ; -- <0240> "
    05e7 : fc00 ; -- <0240> "
    05e8 : 020a ; -- <0240> a = 10 -- puteol
    05e9 : fba0 ; -- <0240> puteol
    05ea : 009b ; -- <0240> "
    05eb : fc00 ; -- <0240> "
    05ec : 5e00 ; -- <0241> ram pa = $ram_tps_state -- av_ad_hi = 0
    05ed : 62ce ; -- <0241> ram pa = $ram_tps_state -- av_ad_lo = 206
    05ee : 2015 ; -- <0241> ram pa = $ram_tps_state -- pa = av_write_data -- start read cycle
    05ef : 2016 ; -- <0241> ram pa = $ram_tps_state -- pa = av_read_data -- finish read cycle
    05f0 : 1200 ; -- <0251> x = 0
-- :loop_1520 -- = 0x05f1

    05f1 : 0004 ; -- <0242> a = x

    05f2 : 0351 ; -- <0243> a = a<<1
    05f3 : 06d0 ; -- <0243> b = 208
    05f4 : 5e00 ; -- <0243> av_ad_hi = 0
    05f5 : 6300 ; -- <0243> av_ad_lo = ad0
    05f6 : 0415 ; -- <0243> b = av_write_data
    05f7 : 0416 ; -- <0243> b = av_read_data

    05f8 : 0001 ; -- <0244> a = b
    05f9 : fba0 ; -- <0245> call put4x
    05fa : 00c3 ; -- <0245> "
    05fb : fc00 ; -- <0245> "

    05fc : 0004 ; -- <0248> a = x
    05fd : 0408 ; -- <0248> b = pa

    05fe : e407 ; -- <0246> bn eq :else_1534
    05ff : 0604 ; -- <0246> "

    0600 : 023c ; -- <0247> a = 60 -- putasc "<"
    0601 : fba0 ; -- <0247> putasc "<"
    0602 : 009b ; -- <0247> "
    0603 : fc00 ; -- <0247> "

    0604 : 0220 ; -- <0249> a = 32 -- putasc " "
    0605 : fba0 ; -- <0249> putasc " "
    0606 : 009b ; -- <0249> "
    0607 : fc00 ; -- <0249> "


    0608 : 0004 ; -- <0251> a = x
    0609 : 0601 ; -- <0251> b = 1
    060a : c800 ; -- <0251> x = a+b
    060b : 1300 ; -- <0251> "


    060c : 0004 ; -- <0251> a = x
    060d : 0605 ; -- <0251> b = $num_tps_states
    060e : e005 ; -- <0251> br lt :loop_1520
    060f : 05f1 ; -- <0251> "

-- :end_1520 -- = 0x0610
    0610 : 020d ; -- <0252> a = 13 -- puteol
    0611 : fba0 ; -- <0252> puteol
    0612 : 009b ; -- <0252> "
    0613 : fc00 ; -- <0252> "
    0614 : 020a ; -- <0252> a = 10 -- puteol
    0615 : fba0 ; -- <0252> puteol
    0616 : 009b ; -- <0252> "
    0617 : fc00 ; -- <0252> "

    0618 : f80c ; -- <0254> pop rtna -- func dump_smap_cmd
    0619 : 100c ; -- <0254> pop x -- "
    061a : fc00 ; -- <0254> swapra = nop

-- ######## func load_tps_enrich_cmd -- = 0x061b
    061b : 3002 ; -- <0263> push i -- func load_tps_enrich_cmd
    061c : 303e ; -- <0263> push rtna -- "

    061d : 0a00 ; -- <0262> i = 0
-- :loop_1565 -- = 0x061e

    061e : fba0 ; -- <0256> call  get4x
    061f : 00fc ; -- <0256> "
    0620 : fc00 ; -- <0256> "
    0621 : 0400 ; -- <0257> b = a
    0622 : 0002 ; -- <0258> a = i

    0623 : 0351 ; -- <0259> a = a<<1
    0624 : 3001 ; -- <0259> push b -- push b
    0625 : 06d0 ; -- <0259> b = 208
    0626 : 5e00 ; -- <0259> av_ad_hi = 0
    0627 : 6300 ; -- <0259> av_ad_lo = ad0
    0628 : 540c ; -- <0259> pop av_write_data -- pop av_write_data

    0629 : fba0 ; -- <0260> getchar
    062a : 00a4 ; -- <0260> "
    062b : fc00 ; -- <0260> "


    062c : 0002 ; -- <0262> a = i
    062d : 0601 ; -- <0262> b = 1
    062e : c800 ; -- <0262> i = a+b
    062f : 0b00 ; -- <0262> "


    0630 : 0002 ; -- <0262> a = i
    0631 : 0605 ; -- <0262> b = $num_tps_states
    0632 : e005 ; -- <0262> br lt :loop_1565
    0633 : 061e ; -- <0262> "

-- :end_1565 -- = 0x0634

    0634 : f80c ; -- <0264> pop rtna -- func load_tps_enrich_cmd
    0635 : 080c ; -- <0264> pop i -- "
    0636 : fc00 ; -- <0264> swapra = nop

-- ######## func load_smap_cmd -- = 0x0637
    0637 : 3002 ; -- <0273> push i -- func load_smap_cmd
    0638 : 303e ; -- <0273> push rtna -- "

    0639 : 0a00 ; -- <0272> i = 0
-- :loop_1593 -- = 0x063a

    063a : fba0 ; -- <0266> call  get4x
    063b : 00fc ; -- <0266> "
    063c : fc00 ; -- <0266> "
    063d : 0400 ; -- <0267> b = a
    063e : 0002 ; -- <0268> a = i

    063f : 0351 ; -- <0269> a = a<<1
    0640 : 3001 ; -- <0269> push b -- push b
    0641 : 0698 ; -- <0269> b = 152
    0642 : 5e00 ; -- <0269> av_ad_hi = 0
    0643 : 6300 ; -- <0269> av_ad_lo = ad0
    0644 : 540c ; -- <0269> pop av_write_data -- pop av_write_data

    0645 : fba0 ; -- <0270> getchar
    0646 : 00a4 ; -- <0270> "
    0647 : fc00 ; -- <0270> "


    0648 : 0002 ; -- <0272> a = i
    0649 : 0601 ; -- <0272> b = 1
    064a : c800 ; -- <0272> i = a+b
    064b : 0b00 ; -- <0272> "


    064c : 0002 ; -- <0272> a = i
    064d : 060d ; -- <0272> b = $num_rpm_cells
    064e : e005 ; -- <0272> br lt :loop_1593
    064f : 063a ; -- <0272> "

-- :end_1593 -- = 0x0650

    0650 : f80c ; -- <0274> pop rtna -- func load_smap_cmd
    0651 : 080c ; -- <0274> pop i -- "
    0652 : fc00 ; -- <0274> swapra = nop

-- ######## func clear_smap_cmd -- = 0x0653
    0653 : 3002 ; -- <0281> push i -- func clear_smap_cmd

    0654 : 0a00 ; -- <0280> i = 0
-- :loop_1620 -- = 0x0655

    0655 : 0002 ; -- <0276> a = i
    0656 : 07a0 ; -- <0277> b = 3000
    0657 : 0bb8 ; -- <0277> "

    0658 : 0351 ; -- <0278> a = a<<1
    0659 : 3001 ; -- <0278> push b -- push b
    065a : 0698 ; -- <0278> b = 152
    065b : 5e00 ; -- <0278> av_ad_hi = 0
    065c : 6300 ; -- <0278> av_ad_lo = ad0
    065d : 540c ; -- <0278> pop av_write_data -- pop av_write_data



    065e : 0002 ; -- <0280> a = i
    065f : 0601 ; -- <0280> b = 1
    0660 : c800 ; -- <0280> i = a+b
    0661 : 0b00 ; -- <0280> "


    0662 : 0002 ; -- <0280> a = i
    0663 : 060d ; -- <0280> b = $num_rpm_cells
    0664 : e005 ; -- <0280> br lt :loop_1620
    0665 : 0655 ; -- <0280> "

-- :end_1620 -- = 0x0666

    0666 : 080c ; -- <0282> pop i -- func clear_smap_cmd
    0667 : fc00 ; -- <0282> swapra = nop

-- ######## func load_tps_ref_cmd -- = 0x0668
    0668 : 3002 ; -- <0291> push i -- func load_tps_ref_cmd
    0669 : 303e ; -- <0291> push rtna -- "

    066a : 0a00 ; -- <0290> i = 0
-- :loop_1642 -- = 0x066b

    066b : fba0 ; -- <0284> call  get4x
    066c : 00fc ; -- <0284> "
    066d : fc00 ; -- <0284> "
    066e : 0400 ; -- <0285> b = a
    066f : 0002 ; -- <0286> a = i

    0670 : 0351 ; -- <0287> a = a<<1
    0671 : 3001 ; -- <0287> push b -- push b
    0672 : 06b4 ; -- <0287> b = 180
    0673 : 5e00 ; -- <0287> av_ad_hi = 0
    0674 : 6300 ; -- <0287> av_ad_lo = ad0
    0675 : 540c ; -- <0287> pop av_write_data -- pop av_write_data

    0676 : fba0 ; -- <0288> getchar
    0677 : 00a4 ; -- <0288> "
    0678 : fc00 ; -- <0288> "


    0679 : 0002 ; -- <0290> a = i
    067a : 0601 ; -- <0290> b = 1
    067b : c800 ; -- <0290> i = a+b
    067c : 0b00 ; -- <0290> "


    067d : 0002 ; -- <0290> a = i
    067e : 060d ; -- <0290> b = $num_tps_cells
    067f : e005 ; -- <0290> br lt :loop_1642
    0680 : 066b ; -- <0290> "

-- :end_1642 -- = 0x0681

    0681 : f80c ; -- <0292> pop rtna -- func load_tps_ref_cmd
    0682 : 080c ; -- <0292> pop i -- "
    0683 : fc00 ; -- <0292> swapra = nop


-- :plan_name_run -- = 0x0684
-- "RN\x0"
    0684 : 4e52 ; -- <0002> NR
    0685 : 0000 ; -- <0002>   


-- max trim is about 200 thou prior to multiplier overflow.
-- or more if the smap puff is below 8000.
-- trim resolution is 4 thou due to multiplier.
-- smap resolution for trimming is 16 us.
-- final trim enrichment us resolution is 16 us.

-- ######## func trim_lean_cmd -- = 0x0686

    0686 : 5e00 ; -- <0016> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    0687 : 62ec ; -- <0016> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    0688 : 0015 ; -- <0016> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    0689 : 0016 ; -- <0016> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    068a : 0000 ; -- <0021> a = a
    068b : 0600 ; -- <0021> b = 0

    068c : e7a0 ; -- <0017> bn = :else_1676
    068d : 0690 ; -- <0017> "


    068e : e00f ; -- <0019> jmp :end_1676
    068f : 0696 ; -- <0019> "

    0690 : 07a0 ; -- <0020> b = ($run_manual_trim_step_thou ^ 0xffff + 1)
    0691 : 10004 ; -- <0020> "
    0692 : 5e00 ; -- <0021> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    0693 : 62ec ; -- <0021> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 236
    0694 : c800 ; -- <0021> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    0695 : 5700 ; -- <0021> "


    0696 : fc00 ; -- <0023> swapra = nop

-- ######## func trim_rich_cmd -- = 0x0697

    0697 : 5e00 ; -- <0025> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    0698 : 62ec ; -- <0025> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    0699 : 0015 ; -- <0025> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    069a : 0016 ; -- <0025> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    069b : 0000 ; -- <0030> a = a
    069c : 07a0 ; -- <0030> b = 800
    069d : 0320 ; -- <0030> "

    069e : e406 ; -- <0026> bn gt :else_1694
    069f : 06a2 ; -- <0026> "


    06a0 : e00f ; -- <0028> jmp :end_1694
    06a1 : 06a7 ; -- <0028> "

    06a2 : 0604 ; -- <0029> b = $run_manual_trim_step_thou
    06a3 : 5e00 ; -- <0030> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06a4 : 62ec ; -- <0030> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 236
    06a5 : c800 ; -- <0030> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06a6 : 5700 ; -- <0030> "


    06a7 : fc00 ; -- <0032> swapra = nop

-- ######## func trim_2lean_cmd -- = 0x06a8

    06a8 : 5e00 ; -- <0034> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    06a9 : 62ec ; -- <0034> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    06aa : 0015 ; -- <0034> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    06ab : 0016 ; -- <0034> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    06ac : 0000 ; -- <0039> a = a
    06ad : 0600 ; -- <0039> b = 0

    06ae : e7a0 ; -- <0035> bn = :else_1710
    06af : 06b2 ; -- <0035> "


    06b0 : e00f ; -- <0037> jmp :end_1710
    06b1 : 06b8 ; -- <0037> "

    06b2 : 07a0 ; -- <0038> b = (($run_manual_trim_step_thou << 3) ^ 0xffff + 1)
    06b3 : 10020 ; -- <0038> "
    06b4 : 5e00 ; -- <0039> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06b5 : 62ec ; -- <0039> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 236
    06b6 : c800 ; -- <0039> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06b7 : 5700 ; -- <0039> "


    06b8 : fc00 ; -- <0041> swapra = nop

-- ######## func trim_2rich_cmd -- = 0x06b9

    06b9 : 5e00 ; -- <0043> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    06ba : 62ec ; -- <0043> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    06bb : 0015 ; -- <0043> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    06bc : 0016 ; -- <0043> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    06bd : 0000 ; -- <0048> a = a
    06be : 07a0 ; -- <0048> b = 800
    06bf : 0320 ; -- <0048> "

    06c0 : e406 ; -- <0044> bn gt :else_1728
    06c1 : 06c4 ; -- <0044> "


    06c2 : e00f ; -- <0046> jmp :end_1728
    06c3 : 06c9 ; -- <0046> "

    06c4 : 0620 ; -- <0047> b = ($run_manual_trim_step_thou << 3)
    06c5 : 5e00 ; -- <0048> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06c6 : 62ec ; -- <0048> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 236
    06c7 : c800 ; -- <0048> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06c8 : 5700 ; -- <0048> "


    06c9 : fc00 ; -- <0050> swapra = nop

-- ######## func init_plan_run -- = 0x06ca

-- set up the run plan.
    06ca : 5e00 ; -- <0053> ram $ram_run_manual_trim_thou = 0 -- av_ad_hi = 0
    06cb : 62ec ; -- <0053> ram $ram_run_manual_trim_thou = 0 -- av_ad_lo = 236
    06cc : 5600 ; -- <0053> ram $ram_run_manual_trim_thou = 0 -- av_write_data = 0

-- memorize state.
    06cd : 5e00 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    06ce : 6288 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 136
    06cf : 57a0 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    06d0 : 0684 ; -- <0056> "
    06d1 : 5e00 ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    06d2 : 628a ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 138
    06d3 : 57a0 ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    06d4 : 06e5 ; -- <0057> "
    06d5 : 5e00 ; -- <0058> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    06d6 : 628c ; -- <0058> ram $ram_transition_func = :leave_run -- av_ad_lo = 140
    06d7 : 57a0 ; -- <0058> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    06d8 : 0743 ; -- <0058> "
    06d9 : 5e00 ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    06da : 628e ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 142
    06db : 57a0 ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    06dc : 06de ; -- <0059> "

    06dd : fc00 ; -- <0061> swapra = nop

-- ######## func destroy_plan_run -- = 0x06de


    06de : fc00 ; -- <0064> swapra = nop

-- :tps_accel2_msg -- = 0x06df
-- "tpsa2\x0"
    06df : 7074 ; -- <0066> pt
    06e0 : 6173 ; -- <0066> as
    06e1 : 0032 ; -- <0066>  2
-- :tps_open_msg -- = 0x06e2
-- "tpsop\x0"
    06e2 : 7074 ; -- <0068> pt
    06e3 : 6f73 ; -- <0068> os
    06e4 : 0070 ; -- <0068>  p

-- ######## func puff_len_run -- = 0x06e5
    06e5 : 3004 ; -- <0123> push x -- func puff_len_run
    06e6 : 3006 ; -- <0123> push ga -- "
    06e7 : 303e ; -- <0123> push rtna -- "

    06e8 : 5e00 ; -- <0071> ram a = $ram_rpm_valid -- av_ad_hi = 0
    06e9 : 627e ; -- <0071> ram a = $ram_rpm_valid -- av_ad_lo = 126
    06ea : 0015 ; -- <0071> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    06eb : 0016 ; -- <0071> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    06ec : 0000 ; -- <0122> a = a
    06ed : 0601 ; -- <0122> b = 1

    06ee : e407 ; -- <0072> bn eq :else_1774
    06ef : 073f ; -- <0072> "

-- read smap puff into ga
    06f0 : 5e00 ; -- <0074> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    06f1 : 627c ; -- <0074> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    06f2 : 2015 ; -- <0074> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    06f3 : 2016 ; -- <0074> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    06f4 : fba0 ; -- <0075> callx  find_rpm_cell  pa  a
    06f5 : 056e ; -- <0075> "
    06f6 : fc00 ; -- <0075> "
    06f7 : 0008 ; -- <0075> a = pa

    06f8 : 0351 ; -- <0076> a = a<<1
    06f9 : 0698 ; -- <0076> b = 152
    06fa : 5e00 ; -- <0076> av_ad_hi = 0
    06fb : 6300 ; -- <0076> av_ad_lo = ad0
    06fc : 0415 ; -- <0076> b = av_write_data
    06fd : 0416 ; -- <0076> b = av_read_data

    06fe : 1801 ; -- <0077> ga = b

-- calculate manual enrichment in us.  apply a total of 10 bits of right-shift to
-- implement division by 1024 (thou unit).  spread them out to prevent overflow.
    06ff : 5e00 ; -- <0081> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    0700 : 62ec ; -- <0081> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    0701 : 0015 ; -- <0081> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    0702 : 0016 ; -- <0081> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle
    0703 : 0350 ; -- <0082> a = a>>1
    0704 : 0750 ; -- <0083> b = a>>1
    0705 : 0006 ; -- <0084> a = ga
    0706 : 0353 ; -- <0085> a = a>>4
    0707 : fba0 ; -- <0086> call  multiply
    0708 : 0170 ; -- <0086> "
    0709 : fc00 ; -- <0086> "
    070a : 0353 ; -- <0087> a = a>>4

-- add enrichment to smap puff.
    070b : 0406 ; -- <0090> b = ga
    070c : c800 ; -- <0091> ga = a+b
    070d : 1b00 ; -- <0091> "

-- determine TPS enrichment for acceleration.
    070e : 1a00 ; -- <0094> ga = 0
    070f : 5e00 ; -- <0095> ram x = $ram_tps_state -- av_ad_hi = 0
    0710 : 62ce ; -- <0095> ram x = $ram_tps_state -- av_ad_lo = 206
    0711 : 1015 ; -- <0095> ram x = $ram_tps_state -- x = av_write_data -- start read cycle
    0712 : 1016 ; -- <0095> ram x = $ram_tps_state -- x = av_read_data -- finish read cycle

    0713 : 0004 ; -- <0098> a = x
    0714 : 0603 ; -- <0098> b = 3

    0715 : e407 ; -- <0096> bn eq :else_1813
    0716 : 071c ; -- <0096> "

    0717 : 23a0 ; -- <0097> pa = :tps_accel2_msg
    0718 : 06df ; -- <0097> "
    0719 : fba0 ; -- <0097> callx  unique_text_flag  :tps_accel2_msg
    071a : 0abd ; -- <0097> "
    071b : fc00 ; -- <0097> "


    071c : 0004 ; -- <0101> a = x
    071d : 0604 ; -- <0101> b = 4

    071e : e407 ; -- <0099> bn eq :else_1822
    071f : 0725 ; -- <0099> "

    0720 : 23a0 ; -- <0100> pa = :tps_open_msg
    0721 : 06e2 ; -- <0100> "
    0722 : fba0 ; -- <0100> callx  unique_text_flag  :tps_open_msg
    0723 : 0abd ; -- <0100> "
    0724 : fc00 ; -- <0100> "

    0725 : 0004 ; -- <0102> a = x

    0726 : 0351 ; -- <0103> a = a<<1
    0727 : 06d0 ; -- <0103> b = 208
    0728 : 5e00 ; -- <0103> av_ad_hi = 0
    0729 : 6300 ; -- <0103> av_ad_lo = ad0
    072a : 0415 ; -- <0103> b = av_write_data
    072b : 0416 ; -- <0103> b = av_read_data


    072c : 0200 ; -- <0118> a = 0
    072d : 0401 ; -- <0118> b = b

    072e : e007 ; -- <0104> br eq :else_1838
    072f : 073c ; -- <0104> "

-- calculate TPS enrichment in us.  apply a total of 10 bits of right-shift to
-- implement division by 1024 (thou unit).  spread them out to prevent overflow.
    0730 : 0001 ; -- <0107> a = b
    0731 : 0350 ; -- <0108> a = a>>1
    0732 : 0750 ; -- <0109> b = a>>1
    0733 : 0006 ; -- <0110> a = ga
    0734 : 0353 ; -- <0111> a = a>>4
    0735 : fba0 ; -- <0112> call  multiply
    0736 : 0170 ; -- <0112> "
    0737 : fc00 ; -- <0112> "
    0738 : 0353 ; -- <0113> a = a>>4

-- add enrichment to smap puff.
    0739 : 0406 ; -- <0116> b = ga
    073a : c800 ; -- <0117> ga = a+b
    073b : 1b00 ; -- <0117> "


-- memorize total puff.
    073c : 5e00 ; -- <0121> ram $ram_next_puff_len_us = ga -- av_ad_hi = 0
    073d : 6290 ; -- <0121> ram $ram_next_puff_len_us = ga -- av_ad_lo = 144
    073e : 5406 ; -- <0121> ram $ram_next_puff_len_us = ga -- av_write_data = ga


    073f : f80c ; -- <0124> pop rtna -- func puff_len_run
    0740 : 180c ; -- <0124> pop ga -- "
    0741 : 100c ; -- <0124> pop x -- "
    0742 : fc00 ; -- <0124> swapra = nop

-- ######## func leave_run -- = 0x0743
    0743 : 303e ; -- <0127> push rtna -- func leave_run

    0744 : fba0 ; -- <0126> callx  check_engine_stop  pa
    0745 : 0bd8 ; -- <0126> "
    0746 : fc00 ; -- <0126> "

    0747 : f80c ; -- <0128> pop rtna -- func leave_run
    0748 : fc00 ; -- <0128> swapra = nop



-- #########################################################################
-- :main -- = 0x0749
    0749 : 03a0 ; -- <0214> a = :boot_msg
    074a : 008b ; -- <0214> "
    074b : fba0 ; -- <0215> call :print_nt
    074c : 014f ; -- <0215> "
    074d : fc00 ; -- <0215> "

-- clear the first 64k of RAM.
    074e : 5e00 ; -- <0218> av_ad_hi = 0
    074f : fba0 ; -- <0218> callx  clear_ram_page  0
    0750 : 0aa0 ; -- <0218> "
    0751 : fc00 ; -- <0218> "

-- init fuel injection.
    0752 : fba0 ; -- <0221> callx  init_plan_stop
    0753 : 031d ; -- <0221> "
    0754 : fc00 ; -- <0221> "

-- power up FTDI USB board, and init any other special board control functions.
    0755 : 7280 ; -- <0224> board_ctrl = $ftdi_power_mask
    0756 : fba0 ; -- <0225> callx postpone_comm_restart
    0757 : 0a77 ; -- <0225> "
    0758 : fc00 ; -- <0225> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    0759 : 7a00 ; -- <0232> power_duty = $power_duty_closing

    075a : 001e ; -- <0236> a = power_duty
    075b : 06c0 ; -- <0236> b = ( $power_lost_mask | $ign_switch_off_mask )

    075c : e003 ; -- <0233> br and0z :else_1884
    075d : 0763 ; -- <0233> "

    075e : 7a32 ; -- <0234> power_duty = $power_duty_opening
    075f : 6fa0 ; -- <0235> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    0760 : fffb ; -- <0235> "
    0761 : e00f ; -- <0235> error_halt_code $err_power_lost_at_boot
    0762 : 0761 ; -- <0235> "

    0763 : 5e00 ; -- <0237> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0764 : 623c ; -- <0237> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 60
    0765 : 5760 ; -- <0237> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0766 : 5e00 ; -- <0238> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    0767 : 623e ; -- <0238> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 62
    0768 : 5602 ; -- <0238> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    0769 : 3ba0 ; -- <0241> soft_event = $event_controller_reset_mask
    076a : 8000 ; -- <0241> "
    076b : 3a00 ; -- <0242> soft_event = 0
    076c : 47a0 ; -- <0243> mstimer0 = 1000
    076d : 03e8 ; -- <0243> "
    076e : 4e14 ; -- <0244> mstimer2 = $plan_tick_ms
    076f : e00f ; -- <0245> jmp :poll_events
    0770 : 008e ; -- <0245> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x0771
    0771 : 008e ; -- <0250> ([label :poll_events])
    0772 : 09d2 ; -- <0251> ([label :power_lost_handler])
    0773 : 0786 ; -- <0252> ([label :ign_capture_handler])
    0774 : 0806 ; -- <0253> ([label :ign_capture_timeout_handler])
    0775 : 0a06 ; -- <0254> ([label :puff1_done_handler])
    0776 : 080b ; -- <0255> ([label :ustimer0_handler])
    0777 : 095d ; -- <0256> ([label :spi_done_handler])
    0778 : 080d ; -- <0257> ([label :mstimer0_handler])
    0779 : 0929 ; -- <0258> ([label :mstimer1_handler])
    077a : 083c ; -- <0259> ([label :mstimer2_handler])
    077b : 0868 ; -- <0260> ([label :uart_rx_handler])
    077c : 0881 ; -- <0261> ([label :uart_rx_overflow_handler])
    077d : 0887 ; -- <0262> ([label :uart_tx_overflow_handler])
    077e : 088d ; -- <0263> ([label :key0_handler])
    077f : 0897 ; -- <0264> ([label :key1_handler])
    0780 : 09e9 ; -- <0265> ([label :ign_switch_off_handler])
    0781 : 09fc ; -- <0266> ([label :ign_switch_on_handler])
    0782 : 08a1 ; -- <0267> ([label :softevent3_handler])
    0783 : 08a3 ; -- <0268> ([label :softevent2_handler])
    0784 : 08a5 ; -- <0269> ([label :softevent1_handler])
    0785 : 08a7 ; -- <0270> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x0786
-- discard outlier time.
    0786 : 181f ; -- <0276> g6 = ign_capture_jf
    0787 : 5e00 ; -- <0277> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    0788 : 6282 ; -- <0277> ram b = $ram_ign_fastest_jf -- av_ad_lo = 130
    0789 : 0415 ; -- <0277> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    078a : 0416 ; -- <0277> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle

    078b : 0006 ; -- <0280> a = g6
    078c : 0401 ; -- <0280> b = b

    078d : e405 ; -- <0278> bn lt :else_1933
    078e : 0790 ; -- <0278> "

    078f : 1a00 ; -- <0279> g6 = 0

    0790 : 5e00 ; -- <0281> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    0791 : 6284 ; -- <0281> ram b = $ram_ign_slowest_jf -- av_ad_lo = 132
    0792 : 0415 ; -- <0281> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    0793 : 0416 ; -- <0281> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle

    0794 : 0006 ; -- <0284> a = g6
    0795 : 0401 ; -- <0284> b = b

    0796 : e406 ; -- <0282> bn gt :else_1942
    0797 : 0799 ; -- <0282> "

    0798 : 1a00 ; -- <0283> g6 = 0


-- increment buffer index and memorize time.
    0799 : 5e00 ; -- <0287> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    079a : 6258 ; -- <0287> ram a = $ram_ign_history_idx -- av_ad_lo = 88
    079b : 0015 ; -- <0287> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    079c : 0016 ; -- <0287> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    079d : 0601 ; -- <0288> b = 1
    079e : c800 ; -- <0289> a = a+b
    079f : 0300 ; -- <0289> "
    07a0 : 060f ; -- <0290> b = $ign_history_idx_mask
    07a1 : c800 ; -- <0291> a = and
    07a2 : 0330 ; -- <0291> "
    07a3 : 5e00 ; -- <0292> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    07a4 : 6258 ; -- <0292> ram $ram_ign_history_idx = a -- av_ad_lo = 88
    07a5 : 5400 ; -- <0292> ram $ram_ign_history_idx = a -- av_write_data = a
    07a6 : 0406 ; -- <0293> b = g6

    07a7 : 0351 ; -- <0294> a = a<<1
    07a8 : 3001 ; -- <0294> push b -- push b
    07a9 : 065a ; -- <0294> b = 90
    07aa : 5e00 ; -- <0294> av_ad_hi = 0
    07ab : 6300 ; -- <0294> av_ad_lo = ad0
    07ac : 540c ; -- <0294> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, y = sample, i = index = loop count, g6 = count of invalid samples.
    07ad : 1200 ; -- <0299> x = 0
    07ae : 1a00 ; -- <0300> g6 = 0
    07af : 0a00 ; -- <0316> i = 0
-- :loop_1967 -- = 0x07b0

    07b0 : 0002 ; -- <0301> a = i

    07b1 : 0351 ; -- <0302> a = a<<1
    07b2 : 065a ; -- <0302> b = 90
    07b3 : 5e00 ; -- <0302> av_ad_hi = 0
    07b4 : 6300 ; -- <0302> av_ad_lo = ad0
    07b5 : 0415 ; -- <0302> b = av_write_data
    07b6 : 0416 ; -- <0302> b = av_read_data

    07b7 : 1401 ; -- <0303> y = b

    07b8 : 0005 ; -- <0314> a = y
    07b9 : 0600 ; -- <0314> b = 0

    07ba : e407 ; -- <0304> bn eq :else_1978
    07bb : 07c2 ; -- <0304> "

    07bc : 0006 ; -- <0305> a = g6
    07bd : 0601 ; -- <0306> b = 1
    07be : c800 ; -- <0307> g6 = a+b
    07bf : 1b00 ; -- <0307> "

    07c0 : e00f ; -- <0309> jmp :end_1978
    07c1 : 07c9 ; -- <0309> "

    07c2 : 0208 ; -- <0310> a = ($ign_history_len / 2)
    07c3 : 0405 ; -- <0311> b = y
    07c4 : c800 ; -- <0312> a = a+b
    07c5 : 0300 ; -- <0312> "
    07c6 : 1753 ; -- <0313> y = a>>$ign_history_idx_bits
    07c7 : c800 ; -- <0314> x = x+y
    07c8 : 1320 ; -- <0314> "



    07c9 : 0002 ; -- <0316> a = i
    07ca : 0601 ; -- <0316> b = 1
    07cb : c800 ; -- <0316> i = a+b
    07cc : 0b00 ; -- <0316> "


    07cd : 0002 ; -- <0316> a = i
    07ce : 0610 ; -- <0316> b = $ign_history_len
    07cf : e005 ; -- <0316> br lt :loop_1967
    07d0 : 07b0 ; -- <0316> "

-- :end_1967 -- = 0x07d1
    07d1 : 5e00 ; -- <0317> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    07d2 : 627a ; -- <0317> ram $ram_ign_avg_jf = x -- av_ad_lo = 122
    07d3 : 5404 ; -- <0317> ram $ram_ign_avg_jf = x -- av_write_data = x
    07d4 : 5e00 ; -- <0318> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    07d5 : 6280 ; -- <0318> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 128
    07d6 : 5406 ; -- <0318> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.


    07d7 : 0006 ; -- <0334> a = g6
    07d8 : 0604 ; -- <0334> b = ( $ign_history_len / 4 )

    07d9 : e406 ; -- <0327> bn gt :else_2009
    07da : 07e0 ; -- <0327> "

    07db : 5e00 ; -- <0328> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    07dc : 627e ; -- <0328> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    07dd : 5600 ; -- <0328> ram $ram_rpm_valid = 0 -- av_write_data = 0

    07de : e00f ; -- <0330> jmp :end_2009
    07df : 07ea ; -- <0330> "

-- convert jiffies b to new RPM estimate.
    07e0 : 2004 ; -- <0332> pa = x
    07e1 : fba0 ; -- <0332> callx  jf_to_rpm  x  pa
    07e2 : 0bcc ; -- <0332> "
    07e3 : fc00 ; -- <0332> "
    07e4 : 5e00 ; -- <0333> ram $ram_avg_rpm = pa -- av_ad_hi = 0
    07e5 : 627c ; -- <0333> ram $ram_avg_rpm = pa -- av_ad_lo = 124
    07e6 : 5408 ; -- <0333> ram $ram_avg_rpm = pa -- av_write_data = pa
    07e7 : 5e00 ; -- <0334> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    07e8 : 627e ; -- <0334> ram $ram_rpm_valid = 1 -- av_ad_lo = 126
    07e9 : 5601 ; -- <0334> ram $ram_rpm_valid = 1 -- av_write_data = 1

    07ea : e00f ; -- <0335> end_event
    07eb : 008e ; -- <0335> "

-- ######## func clear_ign_history -- = 0x07ec
    07ec : 3002 ; -- <0348> push i -- func clear_ign_history

-- invalidate the RPM estimate.
    07ed : 5e00 ; -- <0339> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    07ee : 627e ; -- <0339> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    07ef : 5600 ; -- <0339> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    07f0 : 5e00 ; -- <0342> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    07f1 : 6280 ; -- <0342> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 128
    07f2 : 5610 ; -- <0342> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    07f3 : 0a00 ; -- <0347> i = 0
-- :loop_2035 -- = 0x07f4

    07f4 : 0002 ; -- <0343> a = i
    07f5 : 0600 ; -- <0344> b = 0

    07f6 : 0351 ; -- <0345> a = a<<1
    07f7 : 3001 ; -- <0345> push b -- push b
    07f8 : 065a ; -- <0345> b = 90
    07f9 : 5e00 ; -- <0345> av_ad_hi = 0
    07fa : 6300 ; -- <0345> av_ad_lo = ad0
    07fb : 540c ; -- <0345> pop av_write_data -- pop av_write_data



    07fc : 0002 ; -- <0347> a = i
    07fd : 0601 ; -- <0347> b = 1
    07fe : c800 ; -- <0347> i = a+b
    07ff : 0b00 ; -- <0347> "


    0800 : 0002 ; -- <0347> a = i
    0801 : 0610 ; -- <0347> b = $ign_history_len
    0802 : e005 ; -- <0347> br lt :loop_2035
    0803 : 07f4 ; -- <0347> "

-- :end_2035 -- = 0x0804

    0804 : 080c ; -- <0349> pop i -- func clear_ign_history
    0805 : fc00 ; -- <0349> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x0806
-- it's been too long since the last ignition pulse detect.
    0806 : fba0 ; -- <0352> callx clear_ign_history
    0807 : 07ec ; -- <0352> "
    0808 : fc00 ; -- <0352> "
    0809 : e00f ; -- <0353> end_event
    080a : 008e ; -- <0353> "

-- ######## event ustimer0_handler -- = 0x080b
    080b : e00f ; -- <0356> end_event
    080c : 008e ; -- <0356> "

-- ######## event mstimer0_handler -- = 0x080d
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    080d : 47a0 ; -- <0362> mstimer0 = 1000
    080e : 03e8 ; -- <0362> "

-- realtime counters in RAM.
    080f : 5e00 ; -- <0365> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    0810 : 6242 ; -- <0365> ram a = $ram_seconds_cnt -- av_ad_lo = 66
    0811 : 0015 ; -- <0365> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    0812 : 0016 ; -- <0365> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    0813 : 0601 ; -- <0366> b = 1
    0814 : c800 ; -- <0367> a = a+b
    0815 : 0300 ; -- <0367> "

    0816 : 0000 ; -- <0376> a = a
    0817 : 063c ; -- <0376> b = 60

    0818 : e407 ; -- <0368> bn eq :else_2072
    0819 : 082b ; -- <0368> "

    081a : 5e00 ; -- <0369> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    081b : 6242 ; -- <0369> ram $ram_seconds_cnt = 0 -- av_ad_lo = 66
    081c : 5600 ; -- <0369> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    081d : 5e00 ; -- <0370> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    081e : 6240 ; -- <0370> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    081f : 0015 ; -- <0370> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0820 : 0016 ; -- <0370> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0821 : 0601 ; -- <0371> b = 1
    0822 : 5e00 ; -- <0372> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    0823 : 6240 ; -- <0372> ram $ram_minutes_cnt = a+b -- av_ad_lo = 64
    0824 : c800 ; -- <0372> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    0825 : 5700 ; -- <0372> "
    0826 : fba0 ; -- <0373> callx minute_events
    0827 : 0a15 ; -- <0373> "
    0828 : fc00 ; -- <0373> "

    0829 : e00f ; -- <0375> jmp :end_2072
    082a : 082e ; -- <0375> "

    082b : 5e00 ; -- <0376> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    082c : 6242 ; -- <0376> ram $ram_seconds_cnt = a -- av_ad_lo = 66
    082d : 5400 ; -- <0376> ram $ram_seconds_cnt = a -- av_write_data = a


-- all 1-second functions here.
    082e : fba0 ; -- <0379> callx check_power_relay
    082f : 0a1d ; -- <0379> "
    0830 : fc00 ; -- <0379> "
    0831 : fba0 ; -- <0380> callx check_communication
    0832 : 0a4a ; -- <0380> "
    0833 : fc00 ; -- <0380> "
    0834 : fba0 ; -- <0381> callx start_daq_pass
    0835 : 08b6 ; -- <0381> "
    0836 : fc00 ; -- <0381> "
    0837 : e00f ; -- <0382> end_event
    0838 : 008e ; -- <0382> "

-- :plan_transition_msg -- = 0x0839
-- "PLAN\x0"
    0839 : 4c50 ; -- <0385> LP
    083a : 4e41 ; -- <0385> NA
    083b : 0000 ; -- <0385>   

-- ######## event mstimer2_handler -- = 0x083c
-- engine management plan tick timer.

-- restart timer.
    083c : 4e14 ; -- <0391> mstimer2 = $plan_tick_ms

-- start another TPS reading prior to every plan tick.
-- this will also invoke a o2 reading.  that's done last of all prior to plan_tick,
-- so there's minimal latency between that and the plan_tick utilizing it.
    083d : 5e00 ; -- <0396> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    083e : 6236 ; -- <0396> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    083f : 0015 ; -- <0396> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0840 : 0016 ; -- <0396> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    0841 : 0000 ; -- <0399> a = a
    0842 : 0600 ; -- <0399> b = 0

    0843 : e407 ; -- <0397> bn eq :else_2115
    0844 : 0849 ; -- <0397> "

    0845 : 2206 ; -- <0398> pa = 6
    0846 : fba0 ; -- <0398> callx  begin_adc_conversion  $tps_adc_channel
    0847 : 094f ; -- <0398> "
    0848 : fc00 ; -- <0398> "

    0849 : e00f ; -- <0400> end_event
    084a : 008e ; -- <0400> "

-- ######## func plan_tick -- = 0x084b
    084b : 3004 ; -- <0417> push x -- func plan_tick
    084c : 303e ; -- <0417> push rtna -- "

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    084d : 5e00 ; -- <0406> ram rtna = $ram_transition_func -- av_ad_hi = 0
    084e : 628c ; -- <0406> ram rtna = $ram_transition_func -- av_ad_lo = 140
    084f : f815 ; -- <0406> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    0850 : f816 ; -- <0406> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    0851 : 103e ; -- <0407> x = rtna
    0852 : fc00 ; -- <0408> swapra = nop
    0853 : 5e00 ; -- <0410> ram b = $ram_transition_func -- av_ad_hi = 0
    0854 : 628c ; -- <0410> ram b = $ram_transition_func -- av_ad_lo = 140
    0855 : 0415 ; -- <0410> ram b = $ram_transition_func -- b = av_write_data -- start read cycle
    0856 : 0416 ; -- <0410> ram b = $ram_transition_func -- b = av_read_data -- finish read cycle

    0857 : 0004 ; -- <0413> a = x
    0858 : 0401 ; -- <0413> b = b

    0859 : e007 ; -- <0411> br eq :else_2137
    085a : 0860 ; -- <0411> "

    085b : 23a0 ; -- <0412> pa = :plan_transition_msg
    085c : 0839 ; -- <0412> "
    085d : fba0 ; -- <0412> callx  set_text_flag  :plan_transition_msg
    085e : 0aa8 ; -- <0412> "
    085f : fc00 ; -- <0412> "

-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    0860 : 5e00 ; -- <0416> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    0861 : 628a ; -- <0416> ram rtna = $ram_puff_len_func -- av_ad_lo = 138
    0862 : f815 ; -- <0416> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    0863 : f816 ; -- <0416> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    0864 : fc00 ; -- <0417> swapra = nop

    0865 : f80c ; -- <0420> pop rtna -- func plan_tick
    0866 : 100c ; -- <0420> pop x -- "
    0867 : fc00 ; -- <0420> swapra = nop

-- ######## event uart_rx_handler -- = 0x0868
-- :again -- = 0x0868
    0868 : fba0 ; -- <0423> pollchar
    0869 : 00aa ; -- <0423> "
    086a : fc00 ; -- <0423> "
    086b : 1000 ; -- <0424> x = a

    086c : 0004 ; -- <0427> a = x
    086d : 0760 ; -- <0427> b = -1

    086e : e407 ; -- <0425> bn eq :else_2158
    086f : 0872 ; -- <0425> "

    0870 : e00f ; -- <0426> event_return
    0871 : 008e ; -- <0426> "


    0872 : 0004 ; -- <0430> a = x
    0873 : 060a ; -- <0430> b = 10

    0874 : e407 ; -- <0428> bn eq :else_2164
    0875 : 0879 ; -- <0428> "

    0876 : fba0 ; -- <0429> callx  postpone_comm_restart
    0877 : 0a77 ; -- <0429> "
    0878 : fc00 ; -- <0429> "

    0879 : 2004 ; -- <0431> pa = x
    087a : fba0 ; -- <0431> callx  parse_key  x
    087b : 0269 ; -- <0431> "
    087c : fc00 ; -- <0431> "
    087d : e00f ; -- <0432> jmp :again
    087e : 0868 ; -- <0432> "
    087f : e00f ; -- <0433> end_event
    0880 : 008e ; -- <0433> "

-- ######## event uart_rx_overflow_handler -- = 0x0881
    0881 : 6fa0 ; -- <0436> error_halt_code $err_rx_overflow -- leds = 0xfffe
    0882 : fffe ; -- <0436> "
    0883 : e00f ; -- <0436> error_halt_code $err_rx_overflow
    0884 : 0883 ; -- <0436> "
    0885 : e00f ; -- <0437> end_event
    0886 : 008e ; -- <0437> "

-- ######## event uart_tx_overflow_handler -- = 0x0887
    0887 : 6fa0 ; -- <0440> error_halt_code $err_tx_overflow -- leds = 0xfffd
    0888 : fffd ; -- <0440> "
    0889 : e00f ; -- <0440> error_halt_code $err_tx_overflow
    088a : 0889 ; -- <0440> "
    088b : e00f ; -- <0441> end_event
    088c : 008e ; -- <0441> "

-- ######## event key0_handler -- = 0x088d
    088d : 026b ; -- <0444> a = 107 -- putasc "k"
    088e : fba0 ; -- <0444> putasc "k"
    088f : 009b ; -- <0444> "
    0890 : fc00 ; -- <0444> "
    0891 : 0230 ; -- <0445> a = 48 -- putasc "0"
    0892 : fba0 ; -- <0445> putasc "0"
    0893 : 009b ; -- <0445> "
    0894 : fc00 ; -- <0445> "
    0895 : e00f ; -- <0446> end_event
    0896 : 008e ; -- <0446> "

-- ######## event key1_handler -- = 0x0897
    0897 : 026b ; -- <0449> a = 107 -- putasc "k"
    0898 : fba0 ; -- <0449> putasc "k"
    0899 : 009b ; -- <0449> "
    089a : fc00 ; -- <0449> "
    089b : 0231 ; -- <0450> a = 49 -- putasc "1"
    089c : fba0 ; -- <0450> putasc "1"
    089d : 009b ; -- <0450> "
    089e : fc00 ; -- <0450> "
    089f : e00f ; -- <0451> end_event
    08a0 : 008e ; -- <0451> "

-- ######## event softevent3_handler -- = 0x08a1
    08a1 : e00f ; -- <0454> end_event
    08a2 : 008e ; -- <0454> "

-- ######## event softevent2_handler -- = 0x08a3
    08a3 : e00f ; -- <0457> end_event
    08a4 : 008e ; -- <0457> "

-- ######## event softevent1_handler -- = 0x08a5
    08a5 : e00f ; -- <0460> end_event
    08a6 : 008e ; -- <0460> "

-- ######## event softevent0_handler -- = 0x08a7
    08a7 : e00f ; -- <0463> end_event
    08a8 : 008e ; -- <0463> "

-- :rpm_msg -- = 0x08a9
-- ": rpm=\x0"
    08a9 : 203a ; -- <0466>  :
    08aa : 7072 ; -- <0466> pr
    08ab : 3d6d ; -- <0466> =m
    08ac : 0000 ; -- <0466>   

-- :puff_len_msg -- = 0x08ad
-- " pfl=\x0"
    08ad : 7020 ; -- <0469> p 
    08ae : 6c66 ; -- <0469> lf
    08af : 003d ; -- <0469>  =

-- :o2_msg -- = 0x08b0
-- " o2=\x0"
    08b0 : 6f20 ; -- <0472> o 
    08b1 : 3d32 ; -- <0472> =2
    08b2 : 0000 ; -- <0472>   

-- :tps_msg -- = 0x08b3
-- " tp=\x0"
    08b3 : 7420 ; -- <0475> t 
    08b4 : 3d70 ; -- <0475> =p
    08b5 : 0000 ; -- <0475>   

-- ######## func start_daq_pass -- = 0x08b6
    08b6 : 3004 ; -- <0529> push x -- func start_daq_pass
    08b7 : 303e ; -- <0529> push rtna -- "

-- daq pass counter in RAM.
    08b8 : 5e00 ; -- <0479> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    08b9 : 6214 ; -- <0479> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    08ba : 0015 ; -- <0479> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    08bb : 0016 ; -- <0479> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    08bc : 0601 ; -- <0480> b = 1
    08bd : c800 ; -- <0481> a = a+b
    08be : 0300 ; -- <0481> "
    08bf : 6c00 ; -- <0482> leds = a
    08c0 : 5e00 ; -- <0483> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    08c1 : 6214 ; -- <0483> ram $ram_daq_pass_cnt = a -- av_ad_lo = 20
    08c2 : 5400 ; -- <0483> ram $ram_daq_pass_cnt = a -- av_write_data = a
    08c3 : fba0 ; -- <0484> call :put4x
    08c4 : 00c3 ; -- <0484> "
    08c5 : fc00 ; -- <0484> "

    08c6 : 03a0 ; -- <0486> a = :rpm_msg
    08c7 : 08a9 ; -- <0486> "
    08c8 : fba0 ; -- <0487> call :print_nt
    08c9 : 014f ; -- <0487> "
    08ca : fc00 ; -- <0487> "
    08cb : 0200 ; -- <0488> a = 0
    08cc : 5e00 ; -- <0489> ram x = $ram_rpm_valid -- av_ad_hi = 0
    08cd : 627e ; -- <0489> ram x = $ram_rpm_valid -- av_ad_lo = 126
    08ce : 1015 ; -- <0489> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    08cf : 1016 ; -- <0489> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle

    08d0 : 0004 ; -- <0492> a = x
    08d1 : 0600 ; -- <0492> b = 0

    08d2 : e007 ; -- <0490> br eq :else_2258
    08d3 : 08d8 ; -- <0490> "

    08d4 : 5e00 ; -- <0491> ram a = $ram_avg_rpm -- av_ad_hi = 0
    08d5 : 627c ; -- <0491> ram a = $ram_avg_rpm -- av_ad_lo = 124
    08d6 : 0015 ; -- <0491> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    08d7 : 0016 ; -- <0491> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle

    08d8 : fba0 ; -- <0493> call :put4x
    08d9 : 00c3 ; -- <0493> "
    08da : fc00 ; -- <0493> "

    08db : 03a0 ; -- <0495> a = :puff_len_msg
    08dc : 08ad ; -- <0495> "
    08dd : fba0 ; -- <0496> call :print_nt
    08de : 014f ; -- <0496> "
    08df : fc00 ; -- <0496> "
    08e0 : 0021 ; -- <0497> a = puff_len_us
    08e1 : fba0 ; -- <0498> call :put4x
    08e2 : 00c3 ; -- <0498> "
    08e3 : fc00 ; -- <0498> "
    08e4 : 022c ; -- <0499> a = 44 -- putasc ","
    08e5 : fba0 ; -- <0499> putasc ","
    08e6 : 009b ; -- <0499> "
    08e7 : fc00 ; -- <0499> "
    08e8 : 5e00 ; -- <0500> ram a = $ram_puff_count -- av_ad_hi = 0
    08e9 : 6292 ; -- <0500> ram a = $ram_puff_count -- av_ad_lo = 146
    08ea : 0015 ; -- <0500> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    08eb : 0016 ; -- <0500> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    08ec : fba0 ; -- <0501> call :put4x
    08ed : 00c3 ; -- <0501> "
    08ee : fc00 ; -- <0501> "

    08ef : 03a0 ; -- <0503> a = :o2_msg
    08f0 : 08b0 ; -- <0503> "
    08f1 : fba0 ; -- <0504> call :print_nt
    08f2 : 014f ; -- <0504> "
    08f3 : fc00 ; -- <0504> "
    08f4 : 0205 ; -- <0505> a = $o2_adc_channel

    08f5 : 0351 ; -- <0506> a = a<<1
    08f6 : 0626 ; -- <0506> b = 38
    08f7 : 5e00 ; -- <0506> av_ad_hi = 0
    08f8 : 6300 ; -- <0506> av_ad_lo = ad0
    08f9 : 0415 ; -- <0506> b = av_write_data
    08fa : 0416 ; -- <0506> b = av_read_data

    08fb : 0001 ; -- <0507> a = b
    08fc : fba0 ; -- <0508> call :put4x
    08fd : 00c3 ; -- <0508> "
    08fe : fc00 ; -- <0508> "

    08ff : 03a0 ; -- <0510> a = :tps_msg
    0900 : 08b3 ; -- <0510> "
    0901 : fba0 ; -- <0511> call :print_nt
    0902 : 014f ; -- <0511> "
    0903 : fc00 ; -- <0511> "
    0904 : 0206 ; -- <0512> a = $tps_adc_channel

    0905 : 0351 ; -- <0513> a = a<<1
    0906 : 0626 ; -- <0513> b = 38
    0907 : 5e00 ; -- <0513> av_ad_hi = 0
    0908 : 6300 ; -- <0513> av_ad_lo = ad0
    0909 : 0415 ; -- <0513> b = av_write_data
    090a : 0416 ; -- <0513> b = av_read_data

    090b : 0001 ; -- <0514> a = b
    090c : fba0 ; -- <0515> call :put4x
    090d : 00c3 ; -- <0515> "
    090e : fc00 ; -- <0515> "
    090f : 022c ; -- <0516> a = 44 -- putasc ","
    0910 : fba0 ; -- <0516> putasc ","
    0911 : 009b ; -- <0516> "
    0912 : fc00 ; -- <0516> "
    0913 : 5e00 ; -- <0517> ram a = $ram_tps_state -- av_ad_hi = 0
    0914 : 62ce ; -- <0517> ram a = $ram_tps_state -- av_ad_lo = 206
    0915 : 0015 ; -- <0517> ram a = $ram_tps_state -- a = av_write_data -- start read cycle
    0916 : 0016 ; -- <0517> ram a = $ram_tps_state -- a = av_read_data -- finish read cycle
    0917 : 0630 ; -- <0518> b = 48 -- asc b = "0"
    0918 : c800 ; -- <0519> a = a+b -- putchar a+b
    0919 : 0300 ; -- <0519> "
    091a : fba0 ; -- <0519> putchar a+b
    091b : 009b ; -- <0519> "
    091c : fc00 ; -- <0519> "

-- start to acquire & report all anmux channels.
    091d : 0207 ; -- <0522> a = ($anmux_num_channels - 1)
    091e : fba0 ; -- <0523> call :anmux_set_chn
    091f : 00b2 ; -- <0523> "
    0920 : fc00 ; -- <0523> "
    0921 : 4a05 ; -- <0524> mstimer1 = $anmux_settle_ms

-- observe MCU utilization.  this RAM variable can be seen by the debugger.
    0922 : 5e00 ; -- <0527> ram $ram_mcu_usage_cnt = usage_count -- av_ad_hi = 0
    0923 : 6244 ; -- <0527> ram $ram_mcu_usage_cnt = usage_count -- av_ad_lo = 68
    0924 : 540f ; -- <0527> ram $ram_mcu_usage_cnt = usage_count -- av_write_data = usage_count
    0925 : 3e00 ; -- <0528> usage_count = 0

    0926 : f80c ; -- <0530> pop rtna -- func start_daq_pass
    0927 : 100c ; -- <0530> pop x -- "
    0928 : fc00 ; -- <0530> swapra = nop

-- ######## event mstimer1_handler -- = 0x0929
-- anmux signal has settled.

    0929 : 5e00 ; -- <0534> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    092a : 6236 ; -- <0534> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    092b : 0015 ; -- <0534> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    092c : 0016 ; -- <0534> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    092d : 0000 ; -- <0539> a = a
    092e : 0600 ; -- <0539> b = 0

    092f : e007 ; -- <0535> br eq :else_2351
    0930 : 0934 ; -- <0535> "

-- ADC is busy right now.  wait a while & try again.
    0931 : 4a02 ; -- <0537> mstimer1 = $anmux_retry_ms
    0932 : e00f ; -- <0538> event_return
    0933 : 008e ; -- <0538> "


-- start a reading from the current anmux channel.
    0934 : 0220 ; -- <0542> a = 32 -- putasc " "
    0935 : fba0 ; -- <0542> putasc " "
    0936 : 009b ; -- <0542> "
    0937 : fc00 ; -- <0542> "
    0938 : 0273 ; -- <0543> a = 115 -- putasc "s"
    0939 : fba0 ; -- <0543> putasc "s"
    093a : 009b ; -- <0543> "
    093b : fc00 ; -- <0543> "
    093c : fba0 ; -- <0544> call :anmux_get_chn
    093d : 00b6 ; -- <0544> "
    093e : fc00 ; -- <0544> "
    093f : 0630 ; -- <0545> b = 48 -- asc b = "0"
    0940 : c800 ; -- <0546> a = a+b -- putchar a+b
    0941 : 0300 ; -- <0546> "
    0942 : fba0 ; -- <0546> putchar a+b
    0943 : 009b ; -- <0546> "
    0944 : fc00 ; -- <0546> "
    0945 : 023d ; -- <0547> a = 61 -- putasc "="
    0946 : fba0 ; -- <0547> putasc "="
    0947 : 009b ; -- <0547> "
    0948 : fc00 ; -- <0547> "
    0949 : 2207 ; -- <0548> pa = 7
    094a : fba0 ; -- <0548> callx  begin_adc_conversion  $anmux_adc_channel
    094b : 094f ; -- <0548> "
    094c : fc00 ; -- <0548> "
    094d : e00f ; -- <0549> end_event
    094e : 008e ; -- <0549> "

-- ######## func begin_adc_conversion -- = 0x094f

-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.

    094f : 5e00 ; -- <0555> ram $ram_adc_chn_pending = next_channel -- av_ad_hi = 0
    0950 : 6236 ; -- <0555> ram $ram_adc_chn_pending = next_channel -- av_ad_lo = 54
    0951 : 5408 ; -- <0555> ram $ram_adc_chn_pending = next_channel -- av_write_data = next_channel
    0952 : 0008 ; -- <0556> a = next_channel
    0953 : 0352 ; -- <0557> a = a<<4
    0954 : 0352 ; -- <0558> a = a<<4
    0955 : 0351 ; -- <0559> a = a<<1
    0956 : 0351 ; -- <0560> a = a<<1
    0957 : 0351 ; -- <0561> a = a<<1
    0958 : 5000 ; -- <0562> spi_data = a
    0959 : 5e00 ; -- <0563> ram $ram_adc_junk = 1 -- av_ad_hi = 0
    095a : 6238 ; -- <0563> ram $ram_adc_junk = 1 -- av_ad_lo = 56
    095b : 5601 ; -- <0563> ram $ram_adc_junk = 1 -- av_write_data = 1

    095c : fc00 ; -- <0565> swapra = nop

-- ######## event spi_done_handler -- = 0x095d
-- discard the results of the first SPI exchange with the ADC.  that's only for writing the channel num out to the ADC.
    095d : 5e00 ; -- <0568> ram a = $ram_adc_junk -- av_ad_hi = 0
    095e : 6238 ; -- <0568> ram a = $ram_adc_junk -- av_ad_lo = 56
    095f : 0015 ; -- <0568> ram a = $ram_adc_junk -- a = av_write_data -- start read cycle
    0960 : 0016 ; -- <0568> ram a = $ram_adc_junk -- a = av_read_data -- finish read cycle

    0961 : 0000 ; -- <0580> a = a
    0962 : 0600 ; -- <0580> b = 0

    0963 : e007 ; -- <0569> br eq :else_2403
    0964 : 0974 ; -- <0569> "

-- start another SPI exchange to retrieve the actual reading.
    0965 : 5e00 ; -- <0571> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0966 : 6236 ; -- <0571> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    0967 : 0015 ; -- <0571> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0968 : 0016 ; -- <0571> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle
    0969 : 0352 ; -- <0572> a = a<<4
    096a : 0352 ; -- <0573> a = a<<4
    096b : 0351 ; -- <0574> a = a<<1
    096c : 0351 ; -- <0575> a = a<<1
    096d : 0351 ; -- <0576> a = a<<1
    096e : 5000 ; -- <0577> spi_data = a
    096f : 5e00 ; -- <0578> ram $ram_adc_junk = 0 -- av_ad_hi = 0
    0970 : 6238 ; -- <0578> ram $ram_adc_junk = 0 -- av_ad_lo = 56
    0971 : 5600 ; -- <0578> ram $ram_adc_junk = 0 -- av_write_data = 0
    0972 : e00f ; -- <0579> event_return
    0973 : 008e ; -- <0579> "


-- memorize an actual ADC reading.
    0974 : 5e00 ; -- <0583> ram i = $ram_adc_chn_pending -- av_ad_hi = 0
    0975 : 6236 ; -- <0583> ram i = $ram_adc_chn_pending -- av_ad_lo = 54
    0976 : 0815 ; -- <0583> ram i = $ram_adc_chn_pending -- i = av_write_data -- start read cycle
    0977 : 0816 ; -- <0583> ram i = $ram_adc_chn_pending -- i = av_read_data -- finish read cycle
    0978 : 5e00 ; -- <0584> ram $ram_adc_chn_pending = 0 -- av_ad_hi = 0
    0979 : 6236 ; -- <0584> ram $ram_adc_chn_pending = 0 -- av_ad_lo = 54
    097a : 5600 ; -- <0584> ram $ram_adc_chn_pending = 0 -- av_write_data = 0
    097b : 0002 ; -- <0585> a = i
    097c : 0414 ; -- <0586> b = spi_data

    097d : 0351 ; -- <0587> a = a<<1
    097e : 3001 ; -- <0587> push b -- push b
    097f : 0626 ; -- <0587> b = 38
    0980 : 5e00 ; -- <0587> av_ad_hi = 0
    0981 : 6300 ; -- <0587> av_ad_lo = ad0
    0982 : 540c ; -- <0587> pop av_write_data -- pop av_write_data


-- react to ADC reading.

    0983 : 0002 ; -- <0594> a = i
    0984 : 0606 ; -- <0594> b = 6

    0985 : e407 ; -- <0590> bn eq :else_2437
    0986 : 0990 ; -- <0590> "

    0987 : 2205 ; -- <0591> pa = 5
    0988 : fba0 ; -- <0591> callx  begin_adc_conversion  $o2_adc_channel
    0989 : 094f ; -- <0591> "
    098a : fc00 ; -- <0591> "
    098b : fba0 ; -- <0592> callx  interpret_tps
    098c : 0b2d ; -- <0592> "
    098d : fc00 ; -- <0592> "
    098e : e00f ; -- <0593> event_return
    098f : 008e ; -- <0593> "


    0990 : 0002 ; -- <0598> a = i
    0991 : 0605 ; -- <0598> b = 5

    0992 : e407 ; -- <0595> bn eq :else_2450
    0993 : 0999 ; -- <0595> "

    0994 : fba0 ; -- <0596> callx  plan_tick
    0995 : 084b ; -- <0596> "
    0996 : fc00 ; -- <0596> "
    0997 : e00f ; -- <0597> event_return
    0998 : 008e ; -- <0597> "


    0999 : 0002 ; -- <0625> a = i
    099a : 0607 ; -- <0625> b = 7

    099b : e407 ; -- <0599> bn eq :else_2459
    099c : 09ce ; -- <0599> "

-- report anmux reading.
    099d : 0014 ; -- <0601> a = spi_data
    099e : fba0 ; -- <0602> call :put4x
    099f : 00c3 ; -- <0602> "
    09a0 : fc00 ; -- <0602> "

-- memorize anmux reading.
    09a1 : fba0 ; -- <0605> call :anmux_get_chn
    09a2 : 00b6 ; -- <0605> "
    09a3 : fc00 ; -- <0605> "
    09a4 : 0414 ; -- <0606> b = spi_data

    09a5 : 0351 ; -- <0607> a = a<<1
    09a6 : 3001 ; -- <0607> push b -- push b
    09a7 : 0616 ; -- <0607> b = 22
    09a8 : 5e00 ; -- <0607> av_ad_hi = 0
    09a9 : 6300 ; -- <0607> av_ad_lo = ad0
    09aa : 540c ; -- <0607> pop av_write_data -- pop av_write_data


-- decrement anmux channel & start waiting again.
    09ab : fba0 ; -- <0610> call :anmux_get_chn
    09ac : 00b6 ; -- <0610> "
    09ad : fc00 ; -- <0610> "

    09ae : 0000 ; -- <0617> a = a
    09af : 0600 ; -- <0617> b = 0

    09b0 : e007 ; -- <0611> br eq :else_2480
    09b1 : 09bb ; -- <0611> "

    09b2 : 0760 ; -- <0612> b = -1
    09b3 : c800 ; -- <0613> a = a+b
    09b4 : 0300 ; -- <0613> "
    09b5 : fba0 ; -- <0614> call :anmux_set_chn
    09b6 : 00b2 ; -- <0614> "
    09b7 : fc00 ; -- <0614> "
    09b8 : 4a05 ; -- <0615> mstimer1 = $anmux_settle_ms
    09b9 : e00f ; -- <0616> event_return
    09ba : 008e ; -- <0616> "


-- end of temperature daq pass.
    09bb : fba0 ; -- <0620> callx  report_plan
    09bc : 0b12 ; -- <0620> "
    09bd : fc00 ; -- <0620> "
    09be : fba0 ; -- <0621> callx  report_text_flags
    09bf : 0adf ; -- <0621> "
    09c0 : fc00 ; -- <0621> "
    09c1 : 020d ; -- <0622> a = 13 -- puteol
    09c2 : fba0 ; -- <0622> puteol
    09c3 : 009b ; -- <0622> "
    09c4 : fc00 ; -- <0622> "
    09c5 : 020a ; -- <0622> a = 10 -- puteol
    09c6 : fba0 ; -- <0622> puteol
    09c7 : 009b ; -- <0622> "
    09c8 : fc00 ; -- <0622> "
    09c9 : 5e00 ; -- <0623> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    09ca : 623a ; -- <0623> ram $ram_dial_setting = spi_data -- av_ad_lo = 58
    09cb : 5414 ; -- <0623> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    09cc : e00f ; -- <0624> event_return
    09cd : 008e ; -- <0624> "

    09ce : e00f ; -- <0626> end_event
    09cf : 008e ; -- <0626> "

-- :power_lost_msg -- = 0x09d0
-- "PWL\x0"
    09d0 : 5750 ; -- <0629> WP
    09d1 : 004c ; -- <0629>  L

-- ######## event power_lost_handler -- = 0x09d2
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    09d2 : 7a00 ; -- <0638> power_duty = $power_duty_closing
    09d3 : 5e00 ; -- <0639> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    09d4 : 6214 ; -- <0639> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    09d5 : 0015 ; -- <0639> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    09d6 : 0016 ; -- <0639> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    09d7 : 0602 ; -- <0640> b = $relay_hold_passes
    09d8 : 5e00 ; -- <0641> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    09d9 : 623e ; -- <0641> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 62
    09da : c800 ; -- <0641> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    09db : 5700 ; -- <0641> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    09dc : fba0 ; -- <0646> callx  save_persistent_data
    09dd : 0a49 ; -- <0646> "
    09de : fc00 ; -- <0646> "

    09df : 23a0 ; -- <0648> pa = :power_lost_msg
    09e0 : 09d0 ; -- <0648> "
    09e1 : fba0 ; -- <0648> callx  set_text_flag  :power_lost_msg
    09e2 : 0aa8 ; -- <0648> "
    09e3 : fc00 ; -- <0648> "
    09e4 : e00f ; -- <0649> end_event
    09e5 : 008e ; -- <0649> "

-- :ign_off_msg -- = 0x09e6
-- "IGOF\x0"
    09e6 : 4749 ; -- <0652> GI
    09e7 : 464f ; -- <0652> FO
    09e8 : 0000 ; -- <0652>   

-- ######## event ign_switch_off_handler -- = 0x09e9
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    09e9 : 5e00 ; -- <0656> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    09ea : 6240 ; -- <0656> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    09eb : 0015 ; -- <0656> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    09ec : 0016 ; -- <0656> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    09ed : 060a ; -- <0657> b = $power_extend_minutes
    09ee : 5e00 ; -- <0658> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    09ef : 623c ; -- <0658> ram $ram_power_down_at_min = a+b -- av_ad_lo = 60
    09f0 : c800 ; -- <0658> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    09f1 : 5700 ; -- <0658> "
    09f2 : 23a0 ; -- <0659> pa = :ign_off_msg
    09f3 : 09e6 ; -- <0659> "
    09f4 : fba0 ; -- <0659> callx  set_text_flag   :ign_off_msg
    09f5 : 0aa8 ; -- <0659> "
    09f6 : fc00 ; -- <0659> "
    09f7 : e00f ; -- <0660> end_event
    09f8 : 008e ; -- <0660> "

-- :ign_on_msg -- = 0x09f9
-- "IGON\x0"
    09f9 : 4749 ; -- <0663> GI
    09fa : 4e4f ; -- <0663> NO
    09fb : 0000 ; -- <0663>   

-- ######## event ign_switch_on_handler -- = 0x09fc
    09fc : 5e00 ; -- <0666> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    09fd : 623c ; -- <0666> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 60
    09fe : 5760 ; -- <0666> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    09ff : 23a0 ; -- <0667> pa = :ign_on_msg
    0a00 : 09f9 ; -- <0667> "
    0a01 : fba0 ; -- <0667> callx  set_text_flag   :ign_on_msg
    0a02 : 0aa8 ; -- <0667> "
    0a03 : fc00 ; -- <0667> "
    0a04 : e00f ; -- <0668> end_event
    0a05 : 008e ; -- <0668> "

-- ######## event puff1_done_handler -- = 0x0a06
-- puff just finished.  set length of next puff.
    0a06 : 5e00 ; -- <0672> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    0a07 : 6290 ; -- <0672> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 144
    0a08 : 8415 ; -- <0672> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    0a09 : 8416 ; -- <0672> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    0a0a : 5e00 ; -- <0675> ram a = $ram_puff_count -- av_ad_hi = 0
    0a0b : 6292 ; -- <0675> ram a = $ram_puff_count -- av_ad_lo = 146
    0a0c : 0015 ; -- <0675> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0a0d : 0016 ; -- <0675> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0a0e : 0601 ; -- <0676> b = 1
    0a0f : 5e00 ; -- <0677> ram $ram_puff_count = a+b -- av_ad_hi = 0
    0a10 : 6292 ; -- <0677> ram $ram_puff_count = a+b -- av_ad_lo = 146
    0a11 : c800 ; -- <0677> ram $ram_puff_count = a+b -- av_write_data = a+b
    0a12 : 5700 ; -- <0677> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    0a13 : e00f ; -- <0688> end_event
    0a14 : 008e ; -- <0688> "

-- ######## func minute_events -- = 0x0a15
    0a15 : 303e ; -- <0692> push rtna -- func minute_events

    0a16 : fba0 ; -- <0691> callx  check_power_down
    0a17 : 0a32 ; -- <0691> "
    0a18 : fc00 ; -- <0691> "

    0a19 : f80c ; -- <0693> pop rtna -- func minute_events
    0a1a : fc00 ; -- <0693> swapra = nop

-- :power_hold_msg -- = 0x0a1b
-- "PWH\x0"
    0a1b : 5750 ; -- <0695> WP
    0a1c : 0048 ; -- <0695>  H

-- ######## func check_power_relay -- = 0x0a1d
    0a1d : 303e ; -- <0705> push rtna -- func check_power_relay

    0a1e : 5e00 ; -- <0698> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0a1f : 6214 ; -- <0698> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0a20 : 0015 ; -- <0698> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0a21 : 0016 ; -- <0698> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0a22 : 5e00 ; -- <0699> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    0a23 : 623e ; -- <0699> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 62
    0a24 : 0415 ; -- <0699> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    0a25 : 0416 ; -- <0699> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle

    0a26 : 0000 ; -- <0704> a = a
    0a27 : 0401 ; -- <0704> b = b

    0a28 : e407 ; -- <0700> bn eq :else_2600
    0a29 : 0a30 ; -- <0700> "

-- time to begin "solenoid saver" coil power reduction by PWM.
    0a2a : 7a19 ; -- <0702> power_duty = $power_duty_holding
    0a2b : 23a0 ; -- <0703> pa = :power_hold_msg
    0a2c : 0a1b ; -- <0703> "
    0a2d : fba0 ; -- <0703> callx  set_text_flag  :power_hold_msg
    0a2e : 0aa8 ; -- <0703> "
    0a2f : fc00 ; -- <0703> "


    0a30 : f80c ; -- <0706> pop rtna -- func check_power_relay
    0a31 : fc00 ; -- <0706> swapra = nop

-- ######## func check_power_down -- = 0x0a32

-- check power-down deadline in RAM.
    0a32 : 5e00 ; -- <0709> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0a33 : 6240 ; -- <0709> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0a34 : 0015 ; -- <0709> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0a35 : 0016 ; -- <0709> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0a36 : 5e00 ; -- <0710> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    0a37 : 623c ; -- <0710> ram b = $ram_power_down_at_min -- av_ad_lo = 60
    0a38 : 0415 ; -- <0710> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    0a39 : 0416 ; -- <0710> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle

    0a3a : 0000 ; -- <0713> a = a
    0a3b : 0401 ; -- <0713> b = b

    0a3c : e407 ; -- <0711> bn eq :else_2620
    0a3d : 0a40 ; -- <0711> "

    0a3e : e00f ; -- <0712> jmp :power_down
    0a3f : 0a41 ; -- <0712> "


    0a40 : fc00 ; -- <0715> swapra = nop

-- :power_down -- = 0x0a41
-- this code never returns.
    0a41 : fba0 ; -- <0718> callx  save_persistent_data
    0a42 : 0a49 ; -- <0718> "
    0a43 : fc00 ; -- <0718> "
    0a44 : 7a32 ; -- <0719> power_duty = $power_duty_opening
    0a45 : 6fa0 ; -- <0720> error_halt_code $err_power_down -- leds = 0xfffc
    0a46 : fffc ; -- <0720> "
    0a47 : e00f ; -- <0720> error_halt_code $err_power_down
    0a48 : 0a47 ; -- <0720> "

-- ######## func save_persistent_data -- = 0x0a49


    0a49 : fc00 ; -- <0724> swapra = nop

-- ######## func check_communication -- = 0x0a4a
    0a4a : 303e ; -- <0744> push rtna -- func check_communication

    0a4b : 5e00 ; -- <0726> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    0a4c : 6212 ; -- <0726> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 18
    0a4d : 0015 ; -- <0726> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    0a4e : 0016 ; -- <0726> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle

    0a4f : 0000 ; -- <0734> a = a
    0a50 : 0600 ; -- <0734> b = 0

    0a51 : e007 ; -- <0727> br eq :else_2641
    0a52 : 0a60 ; -- <0727> "

    0a53 : 0760 ; -- <0728> b = -1
    0a54 : c800 ; -- <0729> a = a+b
    0a55 : 0300 ; -- <0729> "
    0a56 : 5e00 ; -- <0730> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0a57 : 6212 ; -- <0730> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 18
    0a58 : 5400 ; -- <0730> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a

    0a59 : 0000 ; -- <0733> a = a
    0a5a : 0600 ; -- <0733> b = 0

    0a5b : e407 ; -- <0731> bn eq :else_2651
    0a5c : 0a60 ; -- <0731> "

    0a5d : fba0 ; -- <0732> callx  ftdi_power_on
    0a5e : 0a94 ; -- <0732> "
    0a5f : fc00 ; -- <0732> "



    0a60 : 5e00 ; -- <0736> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0a61 : 6240 ; -- <0736> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0a62 : 0015 ; -- <0736> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0a63 : 0016 ; -- <0736> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0a64 : 5e00 ; -- <0737> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0a65 : 6210 ; -- <0737> ram b = $ram_comm_restart_at_min -- av_ad_lo = 16
    0a66 : 0415 ; -- <0737> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0a67 : 0416 ; -- <0737> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle

    0a68 : 0000 ; -- <0743> a = a
    0a69 : 0401 ; -- <0743> b = b

    0a6a : e407 ; -- <0738> bn eq :else_2666
    0a6b : 0a75 ; -- <0738> "

-- comm restart is required.
    0a6c : fba0 ; -- <0740> callx  postpone_comm_restart
    0a6d : 0a77 ; -- <0740> "
    0a6e : fc00 ; -- <0740> "
    0a6f : 5e00 ; -- <0741> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    0a70 : 6212 ; -- <0741> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 18
    0a71 : 5605 ; -- <0741> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    0a72 : fba0 ; -- <0742> callx  ftdi_power_off
    0a73 : 0a84 ; -- <0742> "
    0a74 : fc00 ; -- <0742> "


    0a75 : f80c ; -- <0745> pop rtna -- func check_communication
    0a76 : fc00 ; -- <0745> swapra = nop

-- ######## func postpone_comm_restart -- = 0x0a77

    0a77 : 5e00 ; -- <0747> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0a78 : 6240 ; -- <0747> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0a79 : 0015 ; -- <0747> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0a7a : 0016 ; -- <0747> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0a7b : 0602 ; -- <0748> b = $comm_grace_period_min
    0a7c : 5e00 ; -- <0749> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    0a7d : 6210 ; -- <0749> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 16
    0a7e : c800 ; -- <0749> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    0a7f : 5700 ; -- <0749> "

    0a80 : fc00 ; -- <0751> swapra = nop

-- :ftdi_off_msg -- = 0x0a81
-- "FTOF\x0"
    0a81 : 5446 ; -- <0753> TF
    0a82 : 464f ; -- <0753> FO
    0a83 : 0000 ; -- <0753>   

-- ######## func ftdi_power_off -- = 0x0a84
    0a84 : 303e ; -- <0760> push rtna -- func ftdi_power_off

    0a85 : 001c ; -- <0756> a = board_ctrl
    0a86 : 07a0 ; -- <0757> b = $not_ftdi_power_mask
    0a87 : ff7f ; -- <0757> "
    0a88 : c800 ; -- <0758> board_ctrl = and
    0a89 : 7330 ; -- <0758> "
    0a8a : 23a0 ; -- <0759> pa = :ftdi_off_msg
    0a8b : 0a81 ; -- <0759> "
    0a8c : fba0 ; -- <0759> callx  set_text_flag  :ftdi_off_msg
    0a8d : 0aa8 ; -- <0759> "
    0a8e : fc00 ; -- <0759> "

    0a8f : f80c ; -- <0761> pop rtna -- func ftdi_power_off
    0a90 : fc00 ; -- <0761> swapra = nop

-- :ftdi_on_msg -- = 0x0a91
-- "FTON\x0"
    0a91 : 5446 ; -- <0763> TF
    0a92 : 4e4f ; -- <0763> NO
    0a93 : 0000 ; -- <0763>   

-- ######## func ftdi_power_on -- = 0x0a94
    0a94 : 303e ; -- <0770> push rtna -- func ftdi_power_on

    0a95 : 001c ; -- <0766> a = board_ctrl
    0a96 : 0680 ; -- <0767> b = $ftdi_power_mask
    0a97 : c800 ; -- <0768> board_ctrl = or
    0a98 : 7334 ; -- <0768> "
    0a99 : 23a0 ; -- <0769> pa = :ftdi_on_msg
    0a9a : 0a91 ; -- <0769> "
    0a9b : fba0 ; -- <0769> callx  set_text_flag  :ftdi_on_msg
    0a9c : 0aa8 ; -- <0769> "
    0a9d : fc00 ; -- <0769> "

    0a9e : f80c ; -- <0771> pop rtna -- func ftdi_power_on
    0a9f : fc00 ; -- <0771> swapra = nop

-- ######## func clear_ram_page -- = 0x0aa0

    0aa0 : 0200 ; -- <0773> a = 0
    0aa1 : 0602 ; -- <0774> b = 2
-- :clear_next_word -- = 0x0aa2
    0aa2 : 6000 ; -- <0776> av_ad_lo = a
    0aa3 : 5600 ; -- <0777> av_write_data = 0
    0aa4 : 0300 ; -- <0778> a = ad0
    0aa5 : e400 ; -- <0779> bn az :clear_next_word
    0aa6 : 0aa2 ; -- <0779> "

    0aa7 : fc00 ; -- <0781> swapra = nop

-- ######## func set_text_flag -- = 0x0aa8

    0aa8 : 0408 ; -- <0783> b = flag_addr
    0aa9 : 5e00 ; -- <0784> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    0aaa : 6256 ; -- <0784> ram a = $ram_next_tfp_idx -- av_ad_lo = 86
    0aab : 0015 ; -- <0784> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    0aac : 0016 ; -- <0784> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle

    0aad : 0351 ; -- <0785> a = a<<1
    0aae : 3001 ; -- <0785> push b -- push b
    0aaf : 0646 ; -- <0785> b = 70
    0ab0 : 5e00 ; -- <0785> av_ad_hi = 0
    0ab1 : 6300 ; -- <0785> av_ad_lo = ad0
    0ab2 : 540c ; -- <0785> pop av_write_data -- pop av_write_data

    0ab3 : 0008 ; -- <0786> a = flag_addr
    0ab4 : 0760 ; -- <0787> b = -1
    0ab5 : c800 ; -- <0788> a = a+b
    0ab6 : 0300 ; -- <0788> "
    0ab7 : 0607 ; -- <0789> b = $tfp_mask
    0ab8 : 5e00 ; -- <0790> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    0ab9 : 6256 ; -- <0790> ram $ram_next_tfp_idx = and -- av_ad_lo = 86
    0aba : c800 ; -- <0790> ram $ram_next_tfp_idx = and -- av_write_data = and
    0abb : 5730 ; -- <0790> "

    0abc : fc00 ; -- <0792> swapra = nop

-- ######## func unique_text_flag -- = 0x0abd
    0abd : 3002 ; -- <0803> push i -- func unique_text_flag
    0abe : 303e ; -- <0803> push rtna -- "

    0abf : 0a00 ; -- <0800> i = 0
-- :loop_2751 -- = 0x0ac0

    0ac0 : 0002 ; -- <0794> a = i

    0ac1 : 0351 ; -- <0795> a = a<<1
    0ac2 : 0646 ; -- <0795> b = 70
    0ac3 : 5e00 ; -- <0795> av_ad_hi = 0
    0ac4 : 6300 ; -- <0795> av_ad_lo = ad0
    0ac5 : 0415 ; -- <0795> b = av_write_data
    0ac6 : 0416 ; -- <0795> b = av_read_data


    0ac7 : 0001 ; -- <0798> a = b
    0ac8 : 0408 ; -- <0798> b = flag_addr

    0ac9 : e407 ; -- <0796> bn eq :else_2761
    0aca : 0acd ; -- <0796> "

    0acb : e00f ; -- <0797> jmp :skip
    0acc : 0ad9 ; -- <0797> "



    0acd : 0002 ; -- <0800> a = i
    0ace : 0601 ; -- <0800> b = 1
    0acf : c800 ; -- <0800> i = a+b
    0ad0 : 0b00 ; -- <0800> "


    0ad1 : 0002 ; -- <0800> a = i
    0ad2 : 0608 ; -- <0800> b = $num_text_flag_pointers
    0ad3 : e005 ; -- <0800> br lt :loop_2751
    0ad4 : 0ac0 ; -- <0800> "

-- :end_2751 -- = 0x0ad5
    0ad5 : 2008 ; -- <0801> pa = flag_addr
    0ad6 : fba0 ; -- <0801> callx  set_text_flag  flag_addr
    0ad7 : 0aa8 ; -- <0801> "
    0ad8 : fc00 ; -- <0801> "
-- :skip -- = 0x0ad9

    0ad9 : f80c ; -- <0804> pop rtna -- func unique_text_flag
    0ada : 080c ; -- <0804> pop i -- "
    0adb : fc00 ; -- <0804> swapra = nop

-- :text_flags_msg -- = 0x0adc
-- " tf=\x0"
    0adc : 7420 ; -- <0806> t 
    0add : 3d66 ; -- <0806> =f
    0ade : 0000 ; -- <0806>   

-- ######## func report_text_flags -- = 0x0adf
    0adf : 3002 ; -- <0822> push i -- func report_text_flags
    0ae0 : 303e ; -- <0822> push rtna -- "

    0ae1 : 03a0 ; -- <0809> a = :text_flags_msg
    0ae2 : 0adc ; -- <0809> "
    0ae3 : fba0 ; -- <0810> call :print_nt
    0ae4 : 014f ; -- <0810> "
    0ae5 : fc00 ; -- <0810> "
    0ae6 : 0a00 ; -- <0821> i = 0
-- :loop_2790 -- = 0x0ae7

    0ae7 : 0002 ; -- <0811> a = i

    0ae8 : 0351 ; -- <0812> a = a<<1
    0ae9 : 0646 ; -- <0812> b = 70
    0aea : 5e00 ; -- <0812> av_ad_hi = 0
    0aeb : 6300 ; -- <0812> av_ad_lo = ad0
    0aec : 0415 ; -- <0812> b = av_write_data
    0aed : 0416 ; -- <0812> b = av_read_data


    0aee : 0001 ; -- <0819> a = b
    0aef : 0600 ; -- <0819> b = 0

    0af0 : e007 ; -- <0813> br eq :else_2800
    0af1 : 0b01 ; -- <0813> "

    0af2 : fba0 ; -- <0814> call :print_nt
    0af3 : 014f ; -- <0814> "
    0af4 : fc00 ; -- <0814> "
    0af5 : 022c ; -- <0815> a = 44 -- putasc ","
    0af6 : fba0 ; -- <0815> putasc ","
    0af7 : 009b ; -- <0815> "
    0af8 : fc00 ; -- <0815> "
    0af9 : 0002 ; -- <0816> a = i
    0afa : 0600 ; -- <0817> b = 0

    0afb : 0351 ; -- <0818> a = a<<1
    0afc : 3001 ; -- <0818> push b -- push b
    0afd : 0646 ; -- <0818> b = 70
    0afe : 5e00 ; -- <0818> av_ad_hi = 0
    0aff : 6300 ; -- <0818> av_ad_lo = ad0
    0b00 : 540c ; -- <0818> pop av_write_data -- pop av_write_data




    0b01 : 0002 ; -- <0821> a = i
    0b02 : 0601 ; -- <0821> b = 1
    0b03 : c800 ; -- <0821> i = a+b
    0b04 : 0b00 ; -- <0821> "


    0b05 : 0002 ; -- <0821> a = i
    0b06 : 0608 ; -- <0821> b = $num_text_flag_pointers
    0b07 : e005 ; -- <0821> br lt :loop_2790
    0b08 : 0ae7 ; -- <0821> "

-- :end_2790 -- = 0x0b09

    0b09 : f80c ; -- <0823> pop rtna -- func report_text_flags
    0b0a : 080c ; -- <0823> pop i -- "
    0b0b : fc00 ; -- <0823> swapra = nop

-- :plan_msg -- = 0x0b0c
-- " pl=\x0"
    0b0c : 7020 ; -- <0825> p 
    0b0d : 3d6c ; -- <0825> =l
    0b0e : 0000 ; -- <0825>   
-- :manual_trim_msg -- = 0x0b0f
-- " mt=\x0"
    0b0f : 6d20 ; -- <0827> m 
    0b10 : 3d74 ; -- <0827> =t
    0b11 : 0000 ; -- <0827>   

-- ######## func report_plan -- = 0x0b12
    0b12 : 303e ; -- <0839> push rtna -- func report_plan

    0b13 : 03a0 ; -- <0830> a = :plan_msg
    0b14 : 0b0c ; -- <0830> "
    0b15 : fba0 ; -- <0831> call :print_nt
    0b16 : 014f ; -- <0831> "
    0b17 : fc00 ; -- <0831> "
    0b18 : 5e00 ; -- <0832> ram a = $ram_plan_name -- av_ad_hi = 0
    0b19 : 6288 ; -- <0832> ram a = $ram_plan_name -- av_ad_lo = 136
    0b1a : 0015 ; -- <0832> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    0b1b : 0016 ; -- <0832> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    0b1c : fba0 ; -- <0833> call :print_nt
    0b1d : 014f ; -- <0833> "
    0b1e : fc00 ; -- <0833> "

    0b1f : 03a0 ; -- <0835> a = :manual_trim_msg
    0b20 : 0b0f ; -- <0835> "
    0b21 : fba0 ; -- <0836> call :print_nt
    0b22 : 014f ; -- <0836> "
    0b23 : fc00 ; -- <0836> "
    0b24 : 5e00 ; -- <0837> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    0b25 : 62ec ; -- <0837> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    0b26 : 0015 ; -- <0837> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    0b27 : 0016 ; -- <0837> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle
    0b28 : fba0 ; -- <0838> call :put4x
    0b29 : 00c3 ; -- <0838> "
    0b2a : fc00 ; -- <0838> "

    0b2b : f80c ; -- <0840> pop rtna -- func report_plan
    0b2c : fc00 ; -- <0840> swapra = nop

-- ######## func interpret_tps -- = 0x0b2d
    0b2d : 3002 ; -- <0923> push i -- func interpret_tps
    0b2e : 3004 ; -- <0923> push x -- "
    0b2f : 3005 ; -- <0923> push y -- "
    0b30 : 3006 ; -- <0923> push ga -- "
    0b31 : 3007 ; -- <0923> push gb -- "
    0b32 : 303e ; -- <0923> push rtna -- "

    0b33 : 0206 ; -- <0842> a = $tps_adc_channel

    0b34 : 0351 ; -- <0843> a = a<<1
    0b35 : 0626 ; -- <0843> b = 38
    0b36 : 5e00 ; -- <0843> av_ad_hi = 0
    0b37 : 6300 ; -- <0843> av_ad_lo = ad0
    0b38 : 0415 ; -- <0843> b = av_write_data
    0b39 : 0416 ; -- <0843> b = av_read_data

-- memorize reading into slot 0 and shift history up 1 slot.  total up as we go.
    0b3a : 1801 ; -- <0845> ga = b
    0b3b : 1200 ; -- <0846> x = 0
    0b3c : 0a00 ; -- <0857> i = 0
-- :loop_2876 -- = 0x0b3d

    0b3d : 0002 ; -- <0847> a = i

    0b3e : 0351 ; -- <0848> a = a<<1
    0b3f : 06dc ; -- <0848> b = 220
    0b40 : 5e00 ; -- <0848> av_ad_hi = 0
    0b41 : 6300 ; -- <0848> av_ad_lo = ad0
    0b42 : 0415 ; -- <0848> b = av_write_data
    0b43 : 0416 ; -- <0848> b = av_read_data

    0b44 : 1c01 ; -- <0849> gb = b
    0b45 : 1401 ; -- <0850> y = b
    0b46 : c800 ; -- <0851> x = x+y
    0b47 : 1320 ; -- <0851> "
    0b48 : 0002 ; -- <0852> a = i
    0b49 : 0406 ; -- <0853> b = ga

    0b4a : 0351 ; -- <0854> a = a<<1
    0b4b : 3001 ; -- <0854> push b -- push b
    0b4c : 06dc ; -- <0854> b = 220
    0b4d : 5e00 ; -- <0854> av_ad_hi = 0
    0b4e : 6300 ; -- <0854> av_ad_lo = ad0
    0b4f : 540c ; -- <0854> pop av_write_data -- pop av_write_data

    0b50 : 1807 ; -- <0855> ga = gb


    0b51 : 0002 ; -- <0857> a = i
    0b52 : 0601 ; -- <0857> b = 1
    0b53 : c800 ; -- <0857> i = a+b
    0b54 : 0b00 ; -- <0857> "


    0b55 : 0002 ; -- <0857> a = i
    0b56 : 0604 ; -- <0857> b = $tps_history_len
    0b57 : e005 ; -- <0857> br lt :loop_2876
    0b58 : 0b3d ; -- <0857> "

-- :end_2876 -- = 0x0b59
-- memorize average.
    0b59 : 0004 ; -- <0859> a = x
    0b5a : 0350 ; -- <0860> a = a>>1
    0b5b : 1b50 ; -- <0861> ga = a>>1
    0b5c : 5e00 ; -- <0862> ram $ram_tps_avg = ga -- av_ad_hi = 0
    0b5d : 62da ; -- <0862> ram $ram_tps_avg = ga -- av_ad_lo = 218
    0b5e : 5406 ; -- <0862> ram $ram_tps_avg = ga -- av_write_data = ga
-- interpret state by comparing vs. reference table.
-- compare to idle reference.
    0b5f : 0200 ; -- <0865> a = 0

    0b60 : 0351 ; -- <0866> a = a<<1
    0b61 : 06b4 ; -- <0866> b = 180
    0b62 : 5e00 ; -- <0866> av_ad_hi = 0
    0b63 : 6300 ; -- <0866> av_ad_lo = ad0
    0b64 : 0415 ; -- <0866> b = av_write_data
    0b65 : 0416 ; -- <0866> b = av_read_data

    0b66 : 0001 ; -- <0867> a = b
    0b67 : 0353 ; -- <0868> a = a>>4
    0b68 : c800 ; -- <0869> b = a+b
    0b69 : 0700 ; -- <0869> "

    0b6a : 0006 ; -- <0873> a = ga
    0b6b : 0401 ; -- <0873> b = b

    0b6c : e405 ; -- <0870> bn lt :else_2924
    0b6d : 0b73 ; -- <0870> "

    0b6e : 5e00 ; -- <0871> ram $ram_tps_state = $tps_state_closed -- av_ad_hi = 0
    0b6f : 62ce ; -- <0871> ram $ram_tps_state = $tps_state_closed -- av_ad_lo = 206
    0b70 : 5600 ; -- <0871> ram $ram_tps_state = $tps_state_closed -- av_write_data = 0
    0b71 : e00f ; -- <0872> jmp :end
    0b72 : 0bc5 ; -- <0872> "

-- compare to wide open reference.
    0b73 : 020c ; -- <0875> a = ($num_tps_cells - 1)

    0b74 : 0351 ; -- <0876> a = a<<1
    0b75 : 06b4 ; -- <0876> b = 180
    0b76 : 5e00 ; -- <0876> av_ad_hi = 0
    0b77 : 6300 ; -- <0876> av_ad_lo = ad0
    0b78 : 0415 ; -- <0876> b = av_write_data
    0b79 : 0416 ; -- <0876> b = av_read_data

    0b7a : 1001 ; -- <0877> x = b
    0b7b : 0001 ; -- <0878> a = b
    0b7c : 0350 ; -- <0879> a = a>>1
    0b7d : 0350 ; -- <0880> a = a>>1
    0b7e : 0760 ; -- <0881> b = 0xffff
    0b7f : c800 ; -- <0882> y = xor
    0b80 : 1738 ; -- <0882> "

    0b81 : 0006 ; -- <0886> a = ga
    0b82 : c800 ; -- <0886> b = x+y
    0b83 : 0720 ; -- <0886> "

    0b84 : e406 ; -- <0883> bn gt :else_2948
    0b85 : 0b8b ; -- <0883> "

    0b86 : 5e00 ; -- <0884> ram $ram_tps_state = $tps_state_open -- av_ad_hi = 0
    0b87 : 62ce ; -- <0884> ram $ram_tps_state = $tps_state_open -- av_ad_lo = 206
    0b88 : 5604 ; -- <0884> ram $ram_tps_state = $tps_state_open -- av_write_data = 4
    0b89 : e00f ; -- <0885> jmp :end
    0b8a : 0bc5 ; -- <0885> "

-- compare to current RPM's reference position.
    0b8b : 5e00 ; -- <0888> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    0b8c : 627c ; -- <0888> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    0b8d : 2015 ; -- <0888> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    0b8e : 2016 ; -- <0888> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    0b8f : fba0 ; -- <0889> callx  find_rpm_cell  pa  a
    0b90 : 056e ; -- <0889> "
    0b91 : fc00 ; -- <0889> "
    0b92 : 0008 ; -- <0889> a = pa

    0b93 : 0351 ; -- <0890> a = a<<1
    0b94 : 06b4 ; -- <0890> b = 180
    0b95 : 5e00 ; -- <0890> av_ad_hi = 0
    0b96 : 6300 ; -- <0890> av_ad_lo = ad0
    0b97 : 0415 ; -- <0890> b = av_write_data
    0b98 : 0416 ; -- <0890> b = av_read_data

    0b99 : 1001 ; -- <0891> x = b
-- test if it's within 1/16 of reference.
    0b9a : 0004 ; -- <0893> a = x
    0b9b : 0353 ; -- <0894> a = a>>4
    0b9c : c800 ; -- <0895> a = a+b
    0b9d : 0300 ; -- <0895> "

    0b9e : 0000 ; -- <0899> a = a
    0b9f : 0406 ; -- <0899> b = ga

    0ba0 : e406 ; -- <0896> bn gt :else_2976
    0ba1 : 0ba7 ; -- <0896> "

    0ba2 : 5e00 ; -- <0897> ram $ram_tps_state = $tps_state_cruise -- av_ad_hi = 0
    0ba3 : 62ce ; -- <0897> ram $ram_tps_state = $tps_state_cruise -- av_ad_lo = 206
    0ba4 : 5601 ; -- <0897> ram $ram_tps_state = $tps_state_cruise -- av_write_data = 1
    0ba5 : e00f ; -- <0898> jmp :end
    0ba6 : 0bc5 ; -- <0898> "

-- test if it's within 1/8 of reference.
    0ba7 : 0004 ; -- <0901> a = x
    0ba8 : 0350 ; -- <0902> a = a>>1
    0ba9 : 0350 ; -- <0903> a = a>>1
    0baa : 0350 ; -- <0904> a = a>>1
    0bab : 0404 ; -- <0905> b = x
    0bac : c800 ; -- <0906> a = a+b
    0bad : 0300 ; -- <0906> "

    0bae : 0000 ; -- <0910> a = a
    0baf : 0406 ; -- <0910> b = ga

    0bb0 : e406 ; -- <0907> bn gt :else_2992
    0bb1 : 0bb7 ; -- <0907> "

    0bb2 : 5e00 ; -- <0908> ram $ram_tps_state = $tps_state_accel1 -- av_ad_hi = 0
    0bb3 : 62ce ; -- <0908> ram $ram_tps_state = $tps_state_accel1 -- av_ad_lo = 206
    0bb4 : 5602 ; -- <0908> ram $ram_tps_state = $tps_state_accel1 -- av_write_data = 2
    0bb5 : e00f ; -- <0909> jmp :end
    0bb6 : 0bc5 ; -- <0909> "

-- test if it's within 1/2 of reference.
    0bb7 : 0004 ; -- <0912> a = x
    0bb8 : 0350 ; -- <0913> a = a>>1
    0bb9 : 0404 ; -- <0914> b = x
    0bba : c800 ; -- <0915> a = a+b
    0bbb : 0300 ; -- <0915> "

    0bbc : 0000 ; -- <0919> a = a
    0bbd : 0406 ; -- <0919> b = ga

    0bbe : e406 ; -- <0916> bn gt :else_3006
    0bbf : 0bc5 ; -- <0916> "

    0bc0 : 5e00 ; -- <0917> ram $ram_tps_state = $tps_state_accel2 -- av_ad_hi = 0
    0bc1 : 62ce ; -- <0917> ram $ram_tps_state = $tps_state_accel2 -- av_ad_lo = 206
    0bc2 : 5603 ; -- <0917> ram $ram_tps_state = $tps_state_accel2 -- av_write_data = 3
    0bc3 : e00f ; -- <0918> jmp :end
    0bc4 : 0bc5 ; -- <0918> "

-- in this case leave ram_tps_state as-is.

-- :end -- = 0x0bc5

    0bc5 : f80c ; -- <0924> pop rtna -- func interpret_tps
    0bc6 : 1c0c ; -- <0924> pop gb -- "
    0bc7 : 180c ; -- <0924> pop ga -- "
    0bc8 : 140c ; -- <0924> pop y -- "
    0bc9 : 100c ; -- <0924> pop x -- "
    0bca : 080c ; -- <0924> pop i -- "
    0bcb : fc00 ; -- <0924> swapra = nop

-- ######## func jf_to_rpm -- = 0x0bcc
    0bcc : 303e ; -- <0934> push rtna -- func jf_to_rpm

-- resolution = 32 rpm.
    0bcd : 0408 ; -- <0927> b = jiffies
    0bce : 03a0 ; -- <0928> a = 0x5573
    0bcf : 5573 ; -- <0928> "
-- = 700000 >> 5
    0bd0 : fba0 ; -- <0930> call :divide
    0bd1 : 018c ; -- <0930> "
    0bd2 : fc00 ; -- <0930> "
    0bd3 : 0001 ; -- <0931> a = b
    0bd4 : 0352 ; -- <0932> a = a<<4
    0bd5 : 2351 ; -- <0933> rpm = a<<1

    0bd6 : f80c ; -- <0935> pop rtna -- func jf_to_rpm
    0bd7 : fc00 ; -- <0935> swapra = nop

-- ######## func check_engine_stop -- = 0x0bd8
    0bd8 : 303e ; -- <0951> push rtna -- func check_engine_stop

-- returns 1 if transitioned to stop, else 0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.

    0bd9 : 001e ; -- <0949> a = power_duty
    0bda : 0680 ; -- <0949> b = ( 0x0080 )

    0bdb : e003 ; -- <0941> br and0z :else_3035
    0bdc : 0bf0 ; -- <0941> "

    0bdd : 5e00 ; -- <0942> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0bde : 627e ; -- <0942> ram a = $ram_rpm_valid -- av_ad_lo = 126
    0bdf : 0015 ; -- <0942> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0be0 : 0016 ; -- <0942> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0be1 : 0000 ; -- <0948> a = a
    0be2 : 0600 ; -- <0948> b = 0

    0be3 : e407 ; -- <0943> bn eq :else_3043
    0be4 : 0bf0 ; -- <0943> "

    0be5 : 5e00 ; -- <0944> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0be6 : 628e ; -- <0944> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0be7 : f815 ; -- <0944> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0be8 : f816 ; -- <0944> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0be9 : fc00 ; -- <0945> swapra = nop
    0bea : fba0 ; -- <0947> callx  init_plan_stop
    0beb : 031d ; -- <0947> "
    0bec : fc00 ; -- <0947> "
    0bed : 2201 ; -- <0948> did_stop = 1
    0bee : f80c ; -- <0948> pop rtna -- rtn 1
    0bef : fc00 ; -- <0947> swapra = nop


    0bf0 : 2200 ; -- <0950> did_stop = 0
    0bf1 : f80c ; -- <0950> pop rtna -- rtn 0
    0bf2 : fc00 ; -- <0949> swapra = nop

    0bf3 : f80c ; -- <0952> pop rtna -- func check_engine_stop
    0bf4 : fc00 ; -- <0952> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d event_priority
-- src reg 000e soft_event
-- src reg 000f usage_count
-- src reg 0010 ustimer0
-- src reg 0011 mstimer0
-- src reg 0012 mstimer1
-- src reg 0013 mstimer2
-- src reg 0014 spi_data
-- src reg 0015 av_write_data
-- src reg 0016 av_read_data
-- src reg 0017 av_ad_hi
-- src reg 0018 av_ad_lo
-- src reg 0019 fduart_data
-- src reg 001a fduart_status
-- src reg 001b leds
-- src reg 001c board_ctrl
-- src reg 001d anmux_ctrl
-- src reg 001e power_duty
-- src reg 001f ign_capture_jf
-- src reg 0020 ign_timeout_len_jf
-- src reg 0021 puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d event_priority
-- dest reg 000e soft_event
-- dest reg 000f usage_count
-- dest reg 0010 ustimer0
-- dest reg 0011 mstimer0
-- dest reg 0012 mstimer1
-- dest reg 0013 mstimer2
-- dest reg 0014 spi_data
-- dest reg 0015 av_write_data
-- dest reg 0017 av_ad_hi
-- dest reg 0018 av_ad_lo
-- dest reg 0019 fduart_data
-- dest reg 001a fduart_status
-- dest reg 001b leds
-- dest reg 001c board_ctrl
-- dest reg 001d anmux_ctrl
-- dest reg 001e power_duty
-- dest reg 0020 ign_timeout_len_jf
-- dest reg 0021 puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_last_anmux_data
-- ram 00000026 ram_last_adc_data
-- ram 00000036 ram_adc_chn_pending
-- ram 00000038 ram_adc_junk
-- ram 0000003a ram_dial_setting
-- ram 0000003c ram_power_down_at_min
-- ram 0000003e ram_relay_hold_at_pass
-- ram 00000040 ram_minutes_cnt
-- ram 00000042 ram_seconds_cnt
-- ram 00000044 ram_mcu_usage_cnt
-- ram 00000046 ram_text_flag_pointers
-- ram 00000056 ram_next_tfp_idx
-- ram 00000058 ram_ign_history_idx
-- ram 0000005a ram_ign_history_jf
-- ram 0000007a ram_ign_avg_jf
-- ram 0000007c ram_avg_rpm
-- ram 0000007e ram_rpm_valid
-- ram 00000080 ram_ign_bad_samples
-- ram 00000082 ram_ign_fastest_jf
-- ram 00000084 ram_ign_slowest_jf
-- ram 00000086 ram_next_puff_len_us
-- ram 00000088 ram_plan_name
-- ram 0000008a ram_puff_len_func
-- ram 0000008c ram_transition_func
-- ram 0000008e ram_destroy_plan_func
-- ram 00000090 ram_next_puff_len_us
-- ram 00000092 ram_puff_count
-- ram 00000094 ram_terminal_connected
-- ram 00000096 ram_warmup_timeout_at_pass
-- ram 00000098 ram_smap
-- ram 000000b2 ram_last_learn_second
-- ram 000000b4 ram_tps_reference
-- ram 000000ce ram_tps_state
-- ram 000000d0 ram_tps_enrich_thou
-- ram 000000da ram_tps_avg
-- ram 000000dc ram_tps_history
-- ram 000000e4 ram_lrns_ticks_remain
-- ram 000000e6 ram_o2_state
-- ram 000000e8 ram_o2_been_rich
-- ram 000000ea ram_o2_been_lean
-- ram 000000ec ram_run_manual_trim_thou
        
        END;
    
