
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 0809 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.


-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.






-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 8750 RPM = about 80 jf between rising edges on chevy ignition white wire.  ignition counter noise blanking begins here in rev 627.
-- 5000 RPM = about 140 jf
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 0026 ; -- <0196> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0196>   
    0004 : 2020 ; -- <0196>   
    0005 : 2020 ; -- <0196>   
    0006 : 6120 ; -- <0196> a 
-- "       b"
    0007 : 2020 ; -- <0196>   
    0008 : 2020 ; -- <0196>   
    0009 : 2020 ; -- <0196>   
    000a : 6220 ; -- <0196> b 
-- "       i"
    000b : 2020 ; -- <0196>   
    000c : 2020 ; -- <0196>   
    000d : 2020 ; -- <0196>   
    000e : 6920 ; -- <0196> i 
-- "       j"
    000f : 2020 ; -- <0196>   
    0010 : 2020 ; -- <0196>   
    0011 : 2020 ; -- <0196>   
    0012 : 6a20 ; -- <0196> j 
-- "       x"
    0013 : 2020 ; -- <0196>   
    0014 : 2020 ; -- <0196>   
    0015 : 2020 ; -- <0196>   
    0016 : 7820 ; -- <0196> x 
-- "       y"
    0017 : 2020 ; -- <0196>   
    0018 : 2020 ; -- <0196>   
    0019 : 2020 ; -- <0196>   
    001a : 7920 ; -- <0196> y 
-- "      ga"
    001b : 2020 ; -- <0196>   
    001c : 2020 ; -- <0196>   
    001d : 2020 ; -- <0196>   
    001e : 6167 ; -- <0196> ag
-- "      gb"
    001f : 2020 ; -- <0196>   
    0020 : 2020 ; -- <0196>   
    0021 : 2020 ; -- <0196>   
    0022 : 6267 ; -- <0196> bg
-- "      pa"
    0023 : 2020 ; -- <0196>   
    0024 : 2020 ; -- <0196>   
    0025 : 2020 ; -- <0196>   
    0026 : 6170 ; -- <0196> ap
-- "      pb"
    0027 : 2020 ; -- <0196>   
    0028 : 2020 ; -- <0196>   
    0029 : 2020 ; -- <0196>   
    002a : 6270 ; -- <0196> bp
-- "      pc"
    002b : 2020 ; -- <0196>   
    002c : 2020 ; -- <0196>   
    002d : 2020 ; -- <0196>   
    002e : 6370 ; -- <0196> cp
-- "      pd"
    002f : 2020 ; -- <0196>   
    0030 : 2020 ; -- <0196>   
    0031 : 2020 ; -- <0196>   
    0032 : 6470 ; -- <0196> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0196> --
    0034 : 7372 ; -- <0196> sr
    0035 : 6b74 ; -- <0196> kt
    0036 : 2020 ; -- <0196>   
-- "  ev_pri"
    0037 : 2020 ; -- <0196>   
    0038 : 7665 ; -- <0196> ve
    0039 : 705f ; -- <0196> p_
    003a : 6972 ; -- <0196> ir
-- "softevnt"
    003b : 6f73 ; -- <0196> os
    003c : 7466 ; -- <0196> tf
    003d : 7665 ; -- <0196> ve
    003e : 746e ; -- <0196> tn
-- "   usage"
    003f : 2020 ; -- <0196>   
    0040 : 7520 ; -- <0196> u 
    0041 : 6173 ; -- <0196> as
    0042 : 6567 ; -- <0196> eg
-- "prductlo"
    0043 : 7270 ; -- <0196> rp
    0044 : 7564 ; -- <0196> ud
    0045 : 7463 ; -- <0196> tc
    0046 : 6f6c ; -- <0196> ol
-- "prducthi"
    0047 : 7270 ; -- <0196> rp
    0048 : 7564 ; -- <0196> ud
    0049 : 7463 ; -- <0196> tc
    004a : 6968 ; -- <0196> ih
-- "ustimer0"
    004b : 7375 ; -- <0196> su
    004c : 6974 ; -- <0196> it
    004d : 656d ; -- <0196> em
    004e : 3072 ; -- <0196> 0r
-- "mstimer0"
    004f : 736d ; -- <0196> sm
    0050 : 6974 ; -- <0196> it
    0051 : 656d ; -- <0196> em
    0052 : 3072 ; -- <0196> 0r
-- "mstimer1"
    0053 : 736d ; -- <0196> sm
    0054 : 6974 ; -- <0196> it
    0055 : 656d ; -- <0196> em
    0056 : 3172 ; -- <0196> 1r
-- "mstimer2"
    0057 : 736d ; -- <0196> sm
    0058 : 6974 ; -- <0196> it
    0059 : 656d ; -- <0196> em
    005a : 3272 ; -- <0196> 2r
-- "spi_data"
    005b : 7073 ; -- <0196> ps
    005c : 5f69 ; -- <0196> _i
    005d : 6164 ; -- <0196> ad
    005e : 6174 ; -- <0196> at
-- "--avwrdt"
    005f : 2f2f ; -- <0196> --
    0060 : 7661 ; -- <0196> va
    0061 : 7277 ; -- <0196> rw
    0062 : 7464 ; -- <0196> td
-- "av_rd_dt"
    0063 : 7661 ; -- <0196> va
    0064 : 725f ; -- <0196> r_
    0065 : 5f64 ; -- <0196> _d
    0066 : 7464 ; -- <0196> td
-- "av_ad_hi"
    0067 : 7661 ; -- <0196> va
    0068 : 615f ; -- <0196> a_
    0069 : 5f64 ; -- <0196> _d
    006a : 6968 ; -- <0196> ih
-- "av_ad_lo"
    006b : 7661 ; -- <0196> va
    006c : 615f ; -- <0196> a_
    006d : 5f64 ; -- <0196> _d
    006e : 6f6c ; -- <0196> ol
-- "--rom_ad"
    006f : 2f2f ; -- <0196> --
    0070 : 6f72 ; -- <0196> or
    0071 : 5f6d ; -- <0196> _m
    0072 : 6461 ; -- <0196> da
-- "rom_data"
    0073 : 6f72 ; -- <0196> or
    0074 : 5f6d ; -- <0196> _m
    0075 : 6164 ; -- <0196> ad
    0076 : 6174 ; -- <0196> at
-- "--uartdt"
    0077 : 2f2f ; -- <0196> --
    0078 : 6175 ; -- <0196> au
    0079 : 7472 ; -- <0196> tr
    007a : 7464 ; -- <0196> td
-- "uartstat"
    007b : 6175 ; -- <0196> au
    007c : 7472 ; -- <0196> tr
    007d : 7473 ; -- <0196> ts
    007e : 7461 ; -- <0196> ta
-- "    leds"
    007f : 2020 ; -- <0196>   
    0080 : 2020 ; -- <0196>   
    0081 : 656c ; -- <0196> el
    0082 : 7364 ; -- <0196> sd
-- "brd_ctrl"
    0083 : 7262 ; -- <0196> rb
    0084 : 5f64 ; -- <0196> _d
    0085 : 7463 ; -- <0196> tc
    0086 : 6c72 ; -- <0196> lr
-- "   anmux"
    0087 : 2020 ; -- <0196>   
    0088 : 6120 ; -- <0196> a 
    0089 : 6d6e ; -- <0196> mn
    008a : 7875 ; -- <0196> xu
-- "pwr_duty"
    008b : 7770 ; -- <0196> wp
    008c : 5f72 ; -- <0196> _r
    008d : 7564 ; -- <0196> ud
    008e : 7974 ; -- <0196> yt
-- "igntmcap"
    008f : 6769 ; -- <0196> gi
    0090 : 746e ; -- <0196> tn
    0091 : 636d ; -- <0196> cm
    0092 : 7061 ; -- <0196> pa
-- "igntmout"
    0093 : 6769 ; -- <0196> gi
    0094 : 746e ; -- <0196> tn
    0095 : 6f6d ; -- <0196> om
    0096 : 7475 ; -- <0196> tu
-- "puflenus"
    0097 : 7570 ; -- <0196> up
    0098 : 6c66 ; -- <0196> lf
    0099 : 6e65 ; -- <0196> ne
    009a : 7375 ; -- <0196> su

-- string resources
-- :boot_msg -- = 0x009b
-- "TGT\r\n\x0"
    009b : 4754 ; -- <0200> GT
    009c : 0d54 ; -- <0200>  T
    009d : 000a ; -- <0200>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x009e
-- initialize prior to polling loop, for minimum latency.
    009e : 07a0 ; -- <0006> b = :event_table
    009f : 087a ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x00a0
    00a0 : 000d ; -- <0009> a = event_priority
    00a1 : e000 ; -- <0010> br 0z :poll_events_again
    00a2 : 00a0 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    00a3 : 3400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    00a4 : d300 ; -- <0015> fetch rtna from ad0
    00a5 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    00a6 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    00a7 : 7fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    00a8 : ffc0 ; -- <0021> "
    00a9 : e00f ; -- <0021> error_halt_code 0xffc0
    00aa : 00a9 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x00ab
    00ab : 3004 ; -- <0046> push x -- func putchar_fduart

    00ac : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    00ad : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x00ae
    00ae : 041e ; -- <0053> b = fduart_status
    00af : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    00b0 : 00ae ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    00b1 : 7404 ; -- <0057> fduart_data = x
    00b2 : 100c ; -- <0058> pop x -- end_func
    00b3 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x00b4
-- wait until FIFO is populated.
    00b4 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x00b5
    00b5 : 041e ; -- <0066> b = fduart_status
    00b6 : e403 ; -- <0067> bn and0z :wait_for_busy
    00b7 : 00b5 ; -- <0067> "
    00b8 : 001d ; -- <0068> a = fduart_data
    00b9 : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x00ba
-- check for FIFO is populated.
    00ba : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    00bb : 041e ; -- <0075> b = fduart_status
    00bc : e403 ; -- <0076> bn and0z :none
    00bd : 00c0 ; -- <0076> "
    00be : 001d ; -- <0077> a = fduart_data
    00bf : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x00c0
    00c0 : 0360 ; -- <0080> a = -1
    00c1 : fc00 ; -- <0080> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00c2
-- set & enable analog muxer
    00c2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00c3 : c800 ; -- <0008> anmux_ctrl = or
    00c4 : 8734 ; -- <0008> "
    00c5 : fc00 ; -- <0008> swapra = nop

-- ######## func anmux_get_chn -- = 0x00c6
    00c6 : 0021 ; -- <0012> a = anmux_ctrl
    00c7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00c8 : c800 ; -- <0014> a = and
    00c9 : 0330 ; -- <0014> "
    00ca : fc00 ; -- <0014> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00cb
-- "0123456789abcdef"
    00cb : 3130 ; -- <0050> 10
    00cc : 3332 ; -- <0050> 32
    00cd : 3534 ; -- <0050> 54
    00ce : 3736 ; -- <0050> 76
    00cf : 3938 ; -- <0050> 98
    00d0 : 6261 ; -- <0050> ba
    00d1 : 6463 ; -- <0050> dc
    00d2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00d3
    00d3 : 3004 ; -- <0054> push x -- func put4x
    00d4 : 3006 ; -- <0054> push g6 -- "
    00d5 : 303e ; -- <0054> push rtna -- "
    00d6 : 13a0 ; -- <0055> x = :hexdigits
    00d7 : 00cb ; -- <0055> "

    00d8 : 1800 ; -- <0057> g6 = a
    00d9 : 07a0 ; -- <0058> b = 0xF000
    00da : f000 ; -- <0058> "
    00db : c800 ; -- <0059> a = and
    00dc : 0330 ; -- <0059> "
    00dd : 0353 ; -- <0060> a = a>>4
    00de : 0353 ; -- <0061> a = a>>4
    00df : 0353 ; -- <0062> a = a>>4
    00e0 : fba0 ; -- <0063> call fetch_byte
    00e1 : 01ec ; -- <0063> "
    00e2 : fc00 ; -- <0063> "
    00e3 : fba0 ; -- <0064> putchar a
    00e4 : 00ab ; -- <0064> "
    00e5 : fc00 ; -- <0064> "

    00e6 : 0006 ; -- <0066> a = g6
    00e7 : 07a0 ; -- <0067> b = 0x0F00
    00e8 : 0f00 ; -- <0067> "
    00e9 : c800 ; -- <0068> a = and
    00ea : 0330 ; -- <0068> "
    00eb : 0353 ; -- <0069> a = a>>4
    00ec : 0353 ; -- <0070> a = a>>4
    00ed : fba0 ; -- <0071> call fetch_byte
    00ee : 01ec ; -- <0071> "
    00ef : fc00 ; -- <0071> "
    00f0 : fba0 ; -- <0072> putchar a
    00f1 : 00ab ; -- <0072> "
    00f2 : fc00 ; -- <0072> "

    00f3 : 0006 ; -- <0074> a = g6
    00f4 : 06f0 ; -- <0075> b = 0x00F0
    00f5 : c800 ; -- <0076> a = and
    00f6 : 0330 ; -- <0076> "
    00f7 : 0353 ; -- <0077> a = a>>4
    00f8 : fba0 ; -- <0078> call fetch_byte
    00f9 : 01ec ; -- <0078> "
    00fa : fc00 ; -- <0078> "
    00fb : fba0 ; -- <0079> putchar a
    00fc : 00ab ; -- <0079> "
    00fd : fc00 ; -- <0079> "

    00fe : 0006 ; -- <0081> a = g6
    00ff : 060f ; -- <0082> b = 0x000F
    0100 : c800 ; -- <0083> a = and
    0101 : 0330 ; -- <0083> "
    0102 : fba0 ; -- <0084> call fetch_byte
    0103 : 01ec ; -- <0084> "
    0104 : fc00 ; -- <0084> "
    0105 : fba0 ; -- <0085> putchar a
    0106 : 00ab ; -- <0085> "
    0107 : fc00 ; -- <0085> "

    0108 : f80c ; -- <0087> pop rtna -- end_func
    0109 : 180c ; -- <0087> pop g6 -- "
    010a : 100c ; -- <0087> pop x -- "
    010b : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x010c
    010c : 3002 ; -- <0091> push i -- func get4x
    010d : 3003 ; -- <0091> push j -- "
    010e : 3004 ; -- <0091> push x -- "
    010f : 3005 ; -- <0091> push y -- "
    0110 : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    0111 : 1604 ; -- <0094> y = 4
-- :again -- = 0x0112
    0112 : fba0 ; -- <0096> getchar
    0113 : 00b4 ; -- <0096> "
    0114 : fc00 ; -- <0096> "
    0115 : 13a0 ; -- <0097> x = :hexdigits
    0116 : 00cb ; -- <0097> "
    0117 : 0a10 ; -- <0098> i = 16
    0118 : fba0 ; -- <0099> call :find_in_fetch
    0119 : 0200 ; -- <0099> "
    011a : fc00 ; -- <0099> "
    011b : 0760 ; -- <0100> b = -1
    011c : e007 ; -- <0101> br eq :fail
    011d : 0131 ; -- <0101> "
    011e : 0400 ; -- <0102> b = a
    011f : 0003 ; -- <0103> a = j
    0120 : 0352 ; -- <0104> a = a<<4
    0121 : c800 ; -- <0105> j = or
    0122 : 0f34 ; -- <0105> "
    0123 : 1360 ; -- <0106> x = -1
    0124 : c800 ; -- <0107> y = x+y
    0125 : 1720 ; -- <0107> "
    0126 : 0005 ; -- <0108> a = y
    0127 : e400 ; -- <0109> bn az :again
    0128 : 0112 ; -- <0109> "
    0129 : 0003 ; -- <0110> a = j
    012a : 0600 ; -- <0111> b = 0
    012b : f80c ; -- <0112> pop rtna -- rtn
    012c : 140c ; -- <0112> pop y -- "
    012d : 100c ; -- <0112> pop x -- "
    012e : 0c0c ; -- <0112> pop j -- "
    012f : 080c ; -- <0112> pop i -- "
    0130 : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x0131
    0131 : 0760 ; -- <0114> b = -1
    0132 : f80c ; -- <0115> pop rtna -- end_func
    0133 : 140c ; -- <0115> pop y -- "
    0134 : 100c ; -- <0115> pop x -- "
    0135 : 0c0c ; -- <0115> pop j -- "
    0136 : 080c ; -- <0115> pop i -- "
    0137 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0138
    0138 : 3002 ; -- <0121> push i -- func print_fixed
    0139 : 3003 ; -- <0121> push j -- "
    013a : 3004 ; -- <0121> push x -- "
    013b : 3005 ; -- <0121> push y -- "
    013c : 3006 ; -- <0121> push g6 -- "
    013d : 303e ; -- <0121> push rtna -- "
    013e : 0800 ; -- <0122> i = a
    013f : 0e01 ; -- <0123> j = 1
    0140 : 1001 ; -- <0124> x = b
    0141 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0142
    0142 : e002 ; -- <0127> br xz :done
    0143 : 0158 ; -- <0127> "
    0144 : 1320 ; -- <0128> x = ad2
    0145 : d002 ; -- <0129> fetch g6 from i
    0146 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0147 : 0006 ; -- <0131> a = g6 -- putchar g6
    0148 : fba0 ; -- <0131> putchar g6
    0149 : 00ab ; -- <0131> "
    014a : fc00 ; -- <0131> "
    014b : e002 ; -- <0132> br xz :done
    014c : 0158 ; -- <0132> "
    014d : 1320 ; -- <0133> x = ad2
    014e : 0006 ; -- <0134> a = g6
    014f : 0353 ; -- <0135> a = a>>4
    0150 : 0353 ; -- <0136> a = a>>4
    0151 : fba0 ; -- <0137> putchar a
    0152 : 00ab ; -- <0137> "
    0153 : fc00 ; -- <0137> "
    0154 : c800 ; -- <0138> i = i+j
    0155 : 0b10 ; -- <0138> "
    0156 : e00f ; -- <0139> jmp :next_word
    0157 : 0142 ; -- <0139> "
-- :done -- = 0x0158
    0158 : f80c ; -- <0141> pop rtna -- end_func
    0159 : 180c ; -- <0141> pop g6 -- "
    015a : 140c ; -- <0141> pop y -- "
    015b : 100c ; -- <0141> pop x -- "
    015c : 0c0c ; -- <0141> pop j -- "
    015d : 080c ; -- <0141> pop i -- "
    015e : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x015f
    015f : 3002 ; -- <0147> push i -- func print_nt
    0160 : 3003 ; -- <0147> push j -- "
    0161 : 3004 ; -- <0147> push x -- "
    0162 : 303e ; -- <0147> push rtna -- "
    0163 : 0800 ; -- <0148> i = a
    0164 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0165
    0165 : d002 ; -- <0151> fetch x from i
    0166 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0167 : 0004 ; -- <0153> a = x
    0168 : 06ff ; -- <0154> b = 0xff
    0169 : e003 ; -- <0155> br and0z :done
    016a : 017b ; -- <0155> "
    016b : fba0 ; -- <0156> putchar a
    016c : 00ab ; -- <0156> "
    016d : fc00 ; -- <0156> "
    016e : 0004 ; -- <0157> a = x
    016f : 0353 ; -- <0158> a = a>>4
    0170 : 0353 ; -- <0159> a = a>>4
    0171 : 06ff ; -- <0160> b = 0xff
    0172 : e003 ; -- <0161> br and0z :done
    0173 : 017b ; -- <0161> "
    0174 : fba0 ; -- <0162> putchar a
    0175 : 00ab ; -- <0162> "
    0176 : fc00 ; -- <0162> "
    0177 : c800 ; -- <0163> i = i+j
    0178 : 0b10 ; -- <0163> "
    0179 : e00f ; -- <0164> jmp :next_word
    017a : 0165 ; -- <0164> "
-- :done -- = 0x017b
    017b : f80c ; -- <0166> pop rtna -- end_func
    017c : 100c ; -- <0166> pop x -- "
    017d : 0c0c ; -- <0166> pop j -- "
    017e : 080c ; -- <0166> pop i -- "
    017f : fc00 ; -- <0165> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0180
    0180 : 3002 ; -- <0004> push i -- func multiply
    0181 : 3003 ; -- <0004> push j -- "
    0182 : 3004 ; -- <0004> push x -- "
    0183 : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- x = operand a
-- y = operand b
-- i = total
-- x is shifted right so its low bit can be tested each time.
-- y is shifted left so its value (for summing) increases each time.
    0184 : 1000 ; -- <0014> x = a
    0185 : 1401 ; -- <0015> y = b
    0186 : 0a00 ; -- <0016> i = 0
-- :again -- = 0x0187
    0187 : e002 ; -- <0018> br xz :done
    0188 : 0196 ; -- <0018> "
    0189 : 0004 ; -- <0019> a = x
    018a : 0601 ; -- <0020> b = 1
    018b : e003 ; -- <0021> br and0z :skip_add
    018c : 0190 ; -- <0021> "
    018d : 0c05 ; -- <0022> j = y
    018e : c800 ; -- <0023> i = i+j
    018f : 0b10 ; -- <0023> "
-- :skip_add -- = 0x0190
    0190 : 0004 ; -- <0025> a = x
    0191 : 1350 ; -- <0026> x = a>>1
    0192 : 0005 ; -- <0027> a = y
    0193 : 1751 ; -- <0028> y = a<<1
    0194 : e00f ; -- <0029> jmp :again
    0195 : 0187 ; -- <0029> "
-- :done -- = 0x0196
    0196 : 0002 ; -- <0031> a = i
    0197 : 140c ; -- <0032> pop y -- end_func
    0198 : 100c ; -- <0032> pop x -- "
    0199 : 0c0c ; -- <0032> pop j -- "
    019a : 080c ; -- <0032> pop i -- "
    019b : fc00 ; -- <0031> swapra = nop

-- ######## func divide -- = 0x019c
    019c : 3002 ; -- <0034> push i -- func divide
    019d : 3003 ; -- <0034> push j -- "
    019e : 3004 ; -- <0034> push x -- "
    019f : 3005 ; -- <0034> push y -- "
    01a0 : 3006 ; -- <0034> push g6 -- "
    01a1 : 3007 ; -- <0034> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    01a2 : e005 ; -- <0042> br lt :zero
    01a3 : 01dd ; -- <0042> "
    01a4 : e000 ; -- <0043> br az :zero
    01a5 : 01dd ; -- <0043> "
    01a6 : 1000 ; -- <0044> x = a
--    g7 = x
    01a7 : 0001 ; -- <0046> a = b
    01a8 : e000 ; -- <0047> br az :zero
    01a9 : 01dd ; -- <0047> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    01aa : 0404 ; -- <0063> b = x
    01ab : 0a00 ; -- <0064> i = 0
    01ac : 0e01 ; -- <0065> j = 1
-- :shift_again -- = 0x01ad
    01ad : e006 ; -- <0067> br gt :shift_done
    01ae : 01b3 ; -- <0067> "
    01af : 0351 ; -- <0068> a = a<<1
    01b0 : 0b10 ; -- <0069> i = ad1
    01b1 : e00f ; -- <0070> jmp :shift_again
    01b2 : 01ad ; -- <0070> "
-- :shift_done -- = 0x01b3
    01b3 : 1b50 ; -- <0072> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    01b4 : 1e00 ; -- <0083> g7 = 0
    01b5 : 0f60 ; -- <0084> j = -1
-- :again -- = 0x01b6
    01b6 : e001 ; -- <0086> br iz :done
    01b7 : 01d4 ; -- <0086> "
    01b8 : 0006 ; -- <0087> a = g6
    01b9 : 0404 ; -- <0088> b = x
    01ba : e006 ; -- <0089> br gt :result0
    01bb : 01cc ; -- <0089> "
-- temp does fit; output a 1.
    01bc : 0007 ; -- <0091> a = g7
    01bd : 0351 ; -- <0092> a = a<<1
    01be : 0601 ; -- <0093> b = 1
    01bf : c800 ; -- <0094> g7 = or
    01c0 : 1f34 ; -- <0094> "
-- dividend = dividend - temp
    01c1 : 0006 ; -- <0096> a = g6
    01c2 : 0760 ; -- <0097> b = -1
    01c3 : c800 ; -- <0098> a = xor
    01c4 : 0338 ; -- <0098> "
    01c5 : 0601 ; -- <0099> b = 1
    01c6 : c800 ; -- <0100> y = a+b
    01c7 : 1700 ; -- <0100> "
    01c8 : c800 ; -- <0101> x = x+y
    01c9 : 1320 ; -- <0101> "
    01ca : e00f ; -- <0102> jmp :next
    01cb : 01ce ; -- <0102> "
-- :result0 -- = 0x01cc
-- temp does not fit; output a 0.
    01cc : 0007 ; -- <0105> a = g7
    01cd : 1f51 ; -- <0106> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01ce
    01ce : 0006 ; -- <0109> a = g6
    01cf : 1b50 ; -- <0110> g6 = a>>1
    01d0 : c800 ; -- <0111> i = i+j
    01d1 : 0b10 ; -- <0111> "
    01d2 : e00f ; -- <0112> jmp :again
    01d3 : 01b6 ; -- <0112> "

-- :done -- = 0x01d4
    01d4 : 0407 ; -- <0115> b = g7
    01d5 : 0004 ; -- <0116> a = x
    01d6 : 1c0c ; -- <0117> pop g7 -- rtn
    01d7 : 180c ; -- <0117> pop g6 -- "
    01d8 : 140c ; -- <0117> pop y -- "
    01d9 : 100c ; -- <0117> pop x -- "
    01da : 0c0c ; -- <0117> pop j -- "
    01db : 080c ; -- <0117> pop i -- "
    01dc : fc00 ; -- <0116> swapra = nop

-- :zero -- = 0x01dd
    01dd : 0600 ; -- <0120> b = 0
    01de : 1c0c ; -- <0121> pop g7 -- rtn
    01df : 180c ; -- <0121> pop g6 -- "
    01e0 : 140c ; -- <0121> pop y -- "
    01e1 : 100c ; -- <0121> pop x -- "
    01e2 : 0c0c ; -- <0121> pop j -- "
    01e3 : 080c ; -- <0121> pop i -- "
    01e4 : fc00 ; -- <0120> swapra = nop
    01e5 : 1c0c ; -- <0122> pop g7 -- end_func
    01e6 : 180c ; -- <0122> pop g6 -- "
    01e7 : 140c ; -- <0122> pop y -- "
    01e8 : 100c ; -- <0122> pop x -- "
    01e9 : 0c0c ; -- <0122> pop j -- "
    01ea : 080c ; -- <0122> pop i -- "
    01eb : fc00 ; -- <0121> swapra = nop


--func multiply32 {arg_a in pa} {arg_b in pb} {product_lo out pa} {product_hi out pb} {
---- unsigned 16-bit multiplication with 32-bit product.

---- ga = product_lo
---- gb = product_hi
---- pa is shifted right so its low bit can be tested each time.
---- pb is shifted left so its value (for summing) increases each time.
--FAIL:  because pb is shifting, it will be destroyed in cases where total bits > 16.
--despite supporting carry overflow, the algorithm still assumes total bits <= 16.
--also i think the loop order is backward for correctly shifting into the hi word.
--could fix that by reversing the hi word shift.
--ga = 0
--gb = 0
--:again
--br xz :done
--a = arg_a
--b = 1
--br and0z :skip_add
--a = ga
--b = arg_b
--ga = a+b
--br ad0c :carry
--a = gb
--gb = a<<1
--jmp :carry_done
--:carry
--a = gb
--a = a<<1
--b = 1
--gb = a+b
--:carry_done
--:skip_add
--a = arg_a
--arg_a = a>>1
--a = arg_b
--arg_b = a<<1
--jmp :again
--:done
--product_lo = ga
--product_hi = gb
--end_func


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01ec
    01ec : 0601 ; -- <0005> b = 1
    01ed : e003 ; -- <0006> br and0z :pick_byte_even
    01ee : 01f7 ; -- <0006> "
    01ef : 0350 ; -- <0007> a = a>>1
    01f0 : 0404 ; -- <0008> b = x
    01f1 : c800 ; -- <0009> fetch a from a+b
    01f2 : d300 ; -- <0009> "
    01f3 : 03b0 ; -- <0009> "
    01f4 : 0353 ; -- <0010> a = a>>4
    01f5 : 0353 ; -- <0011> a = a>>4
    01f6 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x01f7
    01f7 : 0350 ; -- <0014> a = a>>1
    01f8 : 0404 ; -- <0015> b = x
    01f9 : c800 ; -- <0016> fetch a from a+b
    01fa : d300 ; -- <0016> "
    01fb : 03b0 ; -- <0016> "
    01fc : 06ff ; -- <0017> b = 0xff
    01fd : c800 ; -- <0018> a = and
    01fe : 0330 ; -- <0018> "
    01ff : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x0200
    0200 : 3002 ; -- <0027> push i -- func find_in_fetch
    0201 : 3003 ; -- <0027> push j -- "
    0202 : 3005 ; -- <0027> push y -- "
    0203 : 303e ; -- <0027> push rtna -- "
    0204 : 1400 ; -- <0028> y = a
    0205 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0206
    0206 : e001 ; -- <0031> br iz :fail
    0207 : 0216 ; -- <0031> "
    0208 : 0b10 ; -- <0032> i = ad1
    0209 : 0002 ; -- <0033> a = i
    020a : fba0 ; -- <0034> call :fetch_byte
    020b : 01ec ; -- <0034> "
    020c : fc00 ; -- <0034> "
    020d : 0405 ; -- <0035> b = y
    020e : e407 ; -- <0036> bn eq :again
    020f : 0206 ; -- <0036> "
-- :found -- = 0x0210
    0210 : 0002 ; -- <0038> a = i
    0211 : f80c ; -- <0039> pop rtna -- rtn
    0212 : 140c ; -- <0039> pop y -- "
    0213 : 0c0c ; -- <0039> pop j -- "
    0214 : 080c ; -- <0039> pop i -- "
    0215 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0216
    0216 : 0360 ; -- <0041> a = -1
    0217 : f80c ; -- <0042> pop rtna -- end_func
    0218 : 140c ; -- <0042> pop y -- "
    0219 : 0c0c ; -- <0042> pop j -- "
    021a : 080c ; -- <0042> pop i -- "
    021b : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x021c
    021c : 3004 ; -- <0002> push x -- func spinwait
    021d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    021e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x021f
    021f : 13a0 ; -- <0007> x = 16666
    0220 : 411a ; -- <0007> "
    0221 : 1760 ; -- <0008> y = -1
    0222 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0223
-- use of the ad2 name overrides auto-nop here.
    0223 : 1320 ; -- <0012> x = ad2
    0224 : e402 ; -- <0013> bn xz :spinwait_inner
    0225 : 0223 ; -- <0013> "
    0226 : c800 ; -- <0014> a = a+b
    0227 : 0300 ; -- <0014> "
    0228 : e400 ; -- <0015> bn az :spinwait_outer
    0229 : 021f ; -- <0015> "
    022a : 140c ; -- <0016> pop y -- end_func
    022b : 100c ; -- <0016> pop x -- "
    022c : fc00 ; -- <0015> swapra = nop










-- ######## func init_data_rom -- = 0x022d
    022d : 3002 ; -- <0036> push i -- func init_data_rom

-- copy entire ROM content to a shadow area in RAM.
    022e : 67a0 ; -- <0030> av_ad_hi = ($drom_shadow_base >> 16)
    022f : 0100 ; -- <0030> "
    0230 : 0a00 ; -- <0035> i = 0
-- :loop_560 -- = 0x0231

    0231 : 6c02 ; -- <0031> data_rom_ad = i
    0232 : 6802 ; -- <0032> av_ad_lo = i
    0233 : 5c1c ; -- <0033> av_write_data = data_rom_data


    0234 : 0002 ; -- <0035> a = i
    0235 : 0601 ; -- <0035> b = 1
    0236 : c800 ; -- <0035> i = a+b
    0237 : 0b00 ; -- <0035> "


    0238 : 0002 ; -- <0035> a = i
    0239 : 07a0 ; -- <0035> b = $drom_shadow_len_bytes
    023a : 0b20 ; -- <0035> "
    023b : e005 ; -- <0035> br lt :loop_560
    023c : 0231 ; -- <0035> "

-- :end_560 -- = 0x023d

    023d : 080c ; -- <0037> pop i -- func init_data_rom
    023e : fc00 ; -- <0037> swapra = nop



-- when commands share a common suffix, the longer command must come FIRST here.
-- :cmd_table -- = 0x023f
-- "  hello"
    023f : 2020 ; -- <0006>   
    0240 : 6568 ; -- <0006> eh
    0241 : 6c6c ; -- <0006> ll
    0242 : 006f ; -- <0006>  o
    0243 : 0307 ; -- <0007> ([label hello_cmd])
-- "  plstp"
    0244 : 2020 ; -- <0008>   
    0245 : 6c70 ; -- <0008> lp
    0246 : 7473 ; -- <0008> ts
    0247 : 0070 ; -- <0008>  p
    0248 : 030b ; -- <0009> ([label set_plan_stop_cmd])
-- "   plcr"
    0249 : 2020 ; -- <0010>   
    024a : 7020 ; -- <0010> p 
    024b : 636c ; -- <0010> cl
    024c : 0072 ; -- <0010>  r
    024d : 0316 ; -- <0011> ([label set_plan_crank_cmd])
-- "   plwm"
    024e : 2020 ; -- <0012>   
    024f : 7020 ; -- <0012> p 
    0250 : 776c ; -- <0012> wl
    0251 : 006d ; -- <0012>  m
    0252 : 0321 ; -- <0013> ([label set_plan_warmup_cmd])
-- "   plrn"
    0253 : 2020 ; -- <0014>   
    0254 : 7020 ; -- <0014> p 
    0255 : 726c ; -- <0014> rl
    0256 : 006e ; -- <0014>  n
    0257 : 032c ; -- <0015> ([label set_plan_run_cmd])
-- "   plln"
    0258 : 2020 ; -- <0016>   
    0259 : 7020 ; -- <0016> p 
    025a : 6c6c ; -- <0016> ll
    025b : 006e ; -- <0016>  n
    025c : 0337 ; -- <0017> ([label set_plan_learn_cmd])
-- " ldsmap"
    025d : 6c20 ; -- <0018> l 
    025e : 7364 ; -- <0018> sd
    025f : 616d ; -- <0018> am
    0260 : 0070 ; -- <0018>  p
    0261 : 0635 ; -- <0019> ([label load_smap_cmd])
-- " clsmap"
    0262 : 6320 ; -- <0020> c 
    0263 : 736c ; -- <0020> sl
    0264 : 616d ; -- <0020> am
    0265 : 0070 ; -- <0020>  p
    0266 : 0651 ; -- <0021> ([label clear_smap_cmd])
-- "   smap"
    0267 : 2020 ; -- <0022>   
    0268 : 7320 ; -- <0022> s 
    0269 : 616d ; -- <0022> am
    026a : 0070 ; -- <0022>  p
    026b : 05d0 ; -- <0023> ([label dump_smap_cmd])
-- "   ltps"
    026c : 2020 ; -- <0024>   
    026d : 6c20 ; -- <0024> l 
    026e : 7074 ; -- <0024> pt
    026f : 0073 ; -- <0024>  s
    0270 : 0689 ; -- <0025> ([label learn_tps_ref_cmd])
-- " ldtpsr"
    0271 : 6c20 ; -- <0026> l 
    0272 : 7464 ; -- <0026> td
    0273 : 7370 ; -- <0026> sp
    0274 : 0072 ; -- <0026>  r
    0275 : 0666 ; -- <0027> ([label load_tps_ref_cmd])
-- " ldtpse"
    0276 : 6c20 ; -- <0028> l 
    0277 : 7464 ; -- <0028> td
    0278 : 7370 ; -- <0028> sp
    0279 : 0065 ; -- <0028>  e
    027a : 0634 ; -- <0029> ([label load_tps_enrich_cmd])
-- "      ,"
    027b : 2020 ; -- <0030>   
    027c : 2020 ; -- <0030>   
    027d : 2020 ; -- <0030>   
    027e : 002c ; -- <0030>  ,
    027f : 06a1 ; -- <0031> ([label trim_lean_cmd])
-- "      ."
    0280 : 2020 ; -- <0032>   
    0281 : 2020 ; -- <0032>   
    0282 : 2020 ; -- <0032>   
    0283 : 002e ; -- <0032>  .
    0284 : 06b4 ; -- <0033> ([label trim_rich_cmd])
-- "      \["
    0285 : 2020 ; -- <0034>   
    0286 : 2020 ; -- <0034>   
    0287 : 2020 ; -- <0034>   
    0288 : 005b ; -- <0034>  [
    0289 : 06c7 ; -- <0035> ([label trim_2lean_cmd])
-- "      \]"
    028a : 2020 ; -- <0036>   
    028b : 2020 ; -- <0036>   
    028c : 2020 ; -- <0036>   
    028d : 005d ; -- <0036>  ]
    028e : 06da ; -- <0037> ([label trim_2rich_cmd])
-- "\x0\x0"
    028f : 0000 ; -- <0038>   


-- ######## func parse_key -- = 0x0290
    0290 : 3002 ; -- <0056> push i -- func parse_key
    0291 : 3004 ; -- <0056> push x -- "
    0292 : 3005 ; -- <0056> push y -- "
    0293 : 303e ; -- <0056> push rtna -- "

-- memorize into ram_key_buf, pushing down existing content.
    0294 : 1008 ; -- <0043> x = key
    0295 : 0a07 ; -- <0052> i = $key_buf_max
-- :loop_661 -- = 0x0296

    0296 : 0002 ; -- <0044> a = i

    0297 : 0351 ; -- <0045> a = a<<1
    0298 : 0600 ; -- <0045> b = 0
    0299 : 6600 ; -- <0045> av_ad_hi = 0
    029a : 6b00 ; -- <0045> av_ad_lo = ad0
    029b : 0417 ; -- <0045> b = av_write_data
    029c : 0418 ; -- <0045> b = av_read_data

    029d : 1401 ; -- <0046> y = b
    029e : 0002 ; -- <0047> a = i
    029f : 0404 ; -- <0048> b = x

    02a0 : 0351 ; -- <0049> a = a<<1
    02a1 : 3001 ; -- <0049> push b -- push b
    02a2 : 0600 ; -- <0049> b = 0
    02a3 : 6600 ; -- <0049> av_ad_hi = 0
    02a4 : 6b00 ; -- <0049> av_ad_lo = ad0
    02a5 : 5c0c ; -- <0049> pop av_write_data -- pop av_write_data

    02a6 : 1005 ; -- <0050> x = y


    02a7 : 0002 ; -- <0052> a = i
    02a8 : 0600 ; -- <0052> b = 0
    02a9 : e007 ; -- <0052> br eq :end_661
    02aa : 02b3 ; -- <0052> "


    02ab : 0002 ; -- <0052> a = i
    02ac : 0760 ; -- <0052> b = -1
    02ad : c800 ; -- <0052> i = a+b
    02ae : 0b00 ; -- <0052> "


    02af : 0002 ; -- <0052> a = i
    02b0 : 0600 ; -- <0052> b = 0
    02b1 : e405 ; -- <0052> bn lt :loop_661
    02b2 : 0296 ; -- <0052> "

-- :end_661 -- = 0x02b3

    02b3 : 0008 ; -- <0055> a = key
    02b4 : 060d ; -- <0055> b = 13

    02b5 : e407 ; -- <0053> bn eq :else_693
    02b6 : 02ba ; -- <0053> "

    02b7 : fba0 ; -- <0054> callx  parse_command
    02b8 : 02c1 ; -- <0054> "
    02b9 : fc00 ; -- <0054> "


    02ba : f80c ; -- <0057> pop rtna -- func parse_key
    02bb : 140c ; -- <0057> pop y -- "
    02bc : 100c ; -- <0057> pop x -- "
    02bd : 080c ; -- <0057> pop i -- "
    02be : fc00 ; -- <0057> swapra = nop

-- :cmd_ack_msg -- = 0x02bf
-- "OK\x0"
    02bf : 4b4f ; -- <0059> KO
    02c0 : 0000 ; -- <0059>   

-- ######## func parse_command -- = 0x02c1
    02c1 : 3002 ; -- <0100> push i -- func parse_command
    02c2 : 3004 ; -- <0100> push x -- "
    02c3 : 3005 ; -- <0100> push y -- "
    02c4 : 303e ; -- <0100> push rtna -- "

    02c5 : 13a0 ; -- <0062> x = :cmd_table
    02c6 : 023f ; -- <0062> "
-- :next_cmd -- = 0x02c7
    02c7 : d004 ; -- <0064> fetch a from x
    02c8 : 03b0 ; -- <0064> "
    02c9 : e000 ; -- <0065> br az :done
    02ca : 0302 ; -- <0065> "

    02cb : 0a00 ; -- <0081> i = 0
-- :loop_715 -- = 0x02cc

    02cc : 0002 ; -- <0067> a = i
    02cd : fba0 ; -- <0068> call :fetch_byte
    02ce : 01ec ; -- <0068> "
    02cf : fc00 ; -- <0068> "
    02d0 : 1400 ; -- <0069> y = a
    02d1 : 0620 ; -- <0070> b = 32 -- asc b = " "

    02d2 : 0000 ; -- <0079> a = a
    02d3 : 0401 ; -- <0079> b = b

    02d4 : e007 ; -- <0071> br eq :else_724
    02d5 : 02e3 ; -- <0071> "

    02d6 : 062a ; -- <0072> b = 42 -- asc b = "*"
    02d7 : e007 ; -- <0073> br eq :matched
    02d8 : 02eb ; -- <0073> "
-- parameter character.  succeed early.
    02d9 : 0002 ; -- <0075> a = i

    02da : 0351 ; -- <0076> a = a<<1
    02db : 0600 ; -- <0076> b = 0
    02dc : 6600 ; -- <0076> av_ad_hi = 0
    02dd : 6b00 ; -- <0076> av_ad_lo = ad0
    02de : 0417 ; -- <0076> b = av_write_data
    02df : 0418 ; -- <0076> b = av_read_data

    02e0 : 0005 ; -- <0077> a = y
    02e1 : e407 ; -- <0078> bn eq :no_match
    02e2 : 02f7 ; -- <0078> "



    02e3 : 0002 ; -- <0081> a = i
    02e4 : 0601 ; -- <0081> b = 1
    02e5 : c800 ; -- <0081> i = a+b
    02e6 : 0b00 ; -- <0081> "


    02e7 : 0002 ; -- <0081> a = i
    02e8 : 0607 ; -- <0081> b = $key_buf_max
    02e9 : e005 ; -- <0081> br lt :loop_715
    02ea : 02cc ; -- <0081> "

-- :end_715 -- = 0x02eb

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x02eb
    02eb : 23a0 ; -- <0085> pa = :cmd_ack_msg
    02ec : 02bf ; -- <0085> "
    02ed : fba0 ; -- <0085> callx  set_text_flag  :cmd_ack_msg
    02ee : 0bf3 ; -- <0085> "
    02ef : fc00 ; -- <0085> "
    02f0 : 1604 ; -- <0086> y = ($key_buf_len / 2)
    02f1 : c800 ; -- <0087> fetch rtna from x+y
    02f2 : d320 ; -- <0087> "
    02f3 : fbb0 ; -- <0087> "
    02f4 : fc00 ; -- <0088> swapra = nop
    02f5 : e00f ; -- <0090> jmp :done
    02f6 : 0302 ; -- <0090> "

-- :no_match -- = 0x02f7
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    02f7 : 6600 ; -- <0094> ram a = $ram_terminal_connected -- av_ad_hi = 0
    02f8 : 6a94 ; -- <0094> ram a = $ram_terminal_connected -- av_ad_lo = 148
    02f9 : 0017 ; -- <0094> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    02fa : 0018 ; -- <0094> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    02fb : e000 ; -- <0095> br az :done
    02fc : 0302 ; -- <0095> "

    02fd : 1605 ; -- <0097> y = (($key_buf_len / 2) + 1)
    02fe : c800 ; -- <0098> x = x+y
    02ff : 1320 ; -- <0098> "
    0300 : e00f ; -- <0099> jmp :next_cmd
    0301 : 02c7 ; -- <0099> "
-- :done -- = 0x0302

    0302 : f80c ; -- <0102> pop rtna -- func parse_command
    0303 : 140c ; -- <0102> pop y -- "
    0304 : 100c ; -- <0102> pop x -- "
    0305 : 080c ; -- <0102> pop i -- "
    0306 : fc00 ; -- <0102> swapra = nop

-- ######## func hello_cmd -- = 0x0307

    0307 : 6600 ; -- <0104> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    0308 : 6a94 ; -- <0104> ram $ram_terminal_connected = 1 -- av_ad_lo = 148
    0309 : 5e01 ; -- <0104> ram $ram_terminal_connected = 1 -- av_write_data = 1

    030a : fc00 ; -- <0106> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x030b
    030b : 303e ; -- <0111> push rtna -- func set_plan_stop_cmd

    030c : 6600 ; -- <0108> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    030d : 6a8e ; -- <0108> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    030e : f817 ; -- <0108> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    030f : f818 ; -- <0108> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0310 : fc00 ; -- <0109> swapra = nop
    0311 : fba0 ; -- <0111> callx  init_plan_stop
    0312 : 0344 ; -- <0111> "
    0313 : fc00 ; -- <0111> "

    0314 : f80c ; -- <0113> pop rtna -- func set_plan_stop_cmd
    0315 : fc00 ; -- <0113> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x0316
    0316 : 303e ; -- <0118> push rtna -- func set_plan_crank_cmd

    0317 : 6600 ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0318 : 6a8e ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0319 : f817 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    031a : f818 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    031b : fc00 ; -- <0116> swapra = nop
    031c : fba0 ; -- <0118> callx  init_plan_crank
    031d : 0383 ; -- <0118> "
    031e : fc00 ; -- <0118> "

    031f : f80c ; -- <0120> pop rtna -- func set_plan_crank_cmd
    0320 : fc00 ; -- <0120> swapra = nop

-- ######## func set_plan_warmup_cmd -- = 0x0321
    0321 : 303e ; -- <0125> push rtna -- func set_plan_warmup_cmd

    0322 : 6600 ; -- <0122> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0323 : 6a8e ; -- <0122> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0324 : f817 ; -- <0122> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0325 : f818 ; -- <0122> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0326 : fc00 ; -- <0123> swapra = nop
    0327 : fba0 ; -- <0125> callx  init_plan_warmup
    0328 : 03e9 ; -- <0125> "
    0329 : fc00 ; -- <0125> "

    032a : f80c ; -- <0127> pop rtna -- func set_plan_warmup_cmd
    032b : fc00 ; -- <0127> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x032c
    032c : 303e ; -- <0132> push rtna -- func set_plan_run_cmd

    032d : 6600 ; -- <0129> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    032e : 6a8e ; -- <0129> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    032f : f817 ; -- <0129> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0330 : f818 ; -- <0129> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0331 : fc00 ; -- <0130> swapra = nop
    0332 : fba0 ; -- <0132> callx  init_plan_run
    0333 : 06ee ; -- <0132> "
    0334 : fc00 ; -- <0132> "

    0335 : f80c ; -- <0134> pop rtna -- func set_plan_run_cmd
    0336 : fc00 ; -- <0134> swapra = nop

-- ######## func set_plan_learn_cmd -- = 0x0337
    0337 : 303e ; -- <0139> push rtna -- func set_plan_learn_cmd

    0338 : 6600 ; -- <0136> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0339 : 6a8e ; -- <0136> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    033a : f817 ; -- <0136> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    033b : f818 ; -- <0136> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    033c : fc00 ; -- <0137> swapra = nop
    033d : fba0 ; -- <0139> callx  init_plan_learn_stoich
    033e : 0489 ; -- <0139> "
    033f : fc00 ; -- <0139> "

    0340 : f80c ; -- <0141> pop rtna -- func set_plan_learn_cmd
    0341 : fc00 ; -- <0141> swapra = nop


-- :plan_name_stop -- = 0x0342
-- "STP\x0"
    0342 : 5453 ; -- <0002> TS
    0343 : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x0344
    0344 : 303e ; -- <0023> push rtna -- func init_plan_stop

-- set up the stop plan.
    0345 : fba0 ; -- <0006> callx  clear_ign_history
    0346 : 0918 ; -- <0006> "
    0347 : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    0348 : 6600 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    0349 : 6a82 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 130
    034a : 5fa0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    034b : 025b ; -- <0008> "
    034c : 6600 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    034d : 6a84 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    034e : 5fa0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    034f : 36b0 ; -- <0009> "
    0350 : 93a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    0351 : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    0352 : 6600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0353 : 6a90 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    0354 : 5e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    0355 : 9600 ; -- <0016> puff_len_us = 0

-- memorize state.
    0356 : 6600 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    0357 : 6a88 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 136
    0358 : 5fa0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    0359 : 0342 ; -- <0019> "
    035a : 6600 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    035b : 6a8a ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 138
    035c : 5fa0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    035d : 0369 ; -- <0020> "
    035e : 6600 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    035f : 6a8c ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 140
    0360 : 5fa0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    0361 : 036d ; -- <0021> "
    0362 : 6600 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0363 : 6a8e ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 142
    0364 : 5fa0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0365 : 0368 ; -- <0022> "

    0366 : f80c ; -- <0024> pop rtna -- func init_plan_stop
    0367 : fc00 ; -- <0024> swapra = nop

-- ######## func destroy_plan_stop -- = 0x0368


    0368 : fc00 ; -- <0027> swapra = nop

-- ######## func puff_len_stop -- = 0x0369

    0369 : 6600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    036a : 6a90 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    036b : 5e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0

    036c : fc00 ; -- <0031> swapra = nop

-- ######## func leave_stop -- = 0x036d
    036d : 303e ; -- <0044> push rtna -- func leave_stop

-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    036e : 0022 ; -- <0035> a = power_duty
    036f : 0680 ; -- <0036> b = $ign_switch_off_mask
    0370 : e403 ; -- <0037> bn and0z :stay
    0371 : 037f ; -- <0037> "
    0372 : 6600 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    0373 : 6a80 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 128
    0374 : 0017 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0375 : 0018 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0376 : 0608 ; -- <0039> b = ($ign_history_len / 2)
    0377 : e006 ; -- <0040> br gt :stay
    0378 : 037f ; -- <0040> "
    0379 : fba0 ; -- <0041> callx  destroy_plan_stop
    037a : 0368 ; -- <0041> "
    037b : fc00 ; -- <0041> "
    037c : fba0 ; -- <0042> callx  init_plan_crank
    037d : 0383 ; -- <0042> "
    037e : fc00 ; -- <0042> "
-- :stay -- = 0x037f

    037f : f80c ; -- <0045> pop rtna -- func leave_stop
    0380 : fc00 ; -- <0045> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 10000 to 20000 us length in about 5 seconds.

-- :plan_name_crank -- = 0x0381
-- "CR\x0"
    0381 : 5243 ; -- <0011> RC
    0382 : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x0383
    0383 : 303e ; -- <0033> push rtna -- func init_plan_crank

-- set up the crank plan.
    0384 : 6600 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    0385 : 6a92 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 146
    0386 : 5e00 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0387 : 6600 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    0388 : 6a82 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 130
    0389 : 5e57 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    038a : 6600 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    038b : 6a84 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    038c : 5fa0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    038d : 36b0 ; -- <0018> "
    038e : 93a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    038f : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    0390 : 6600 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    0391 : 6a90 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 144
    0392 : 5fa0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 10000
    0393 : 2710 ; -- <0023> "
    0394 : 97a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    0395 : 2710 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    0396 : fba0 ; -- <0026> callx  clear_ign_history
    0397 : 0918 ; -- <0026> "
    0398 : fc00 ; -- <0026> "

-- memorize state.
    0399 : 6600 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    039a : 6a88 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 136
    039b : 5fa0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    039c : 0381 ; -- <0029> "
    039d : 6600 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    039e : 6a8a ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 138
    039f : 5fa0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    03a0 : 03ac ; -- <0030> "
    03a1 : 6600 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    03a2 : 6a8c ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 140
    03a3 : 5fa0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    03a4 : 03ca ; -- <0031> "
    03a5 : 6600 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    03a6 : 6a8e ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 142
    03a7 : 5fa0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    03a8 : 03ab ; -- <0032> "

    03a9 : f80c ; -- <0034> pop rtna -- func init_plan_crank
    03aa : fc00 ; -- <0034> swapra = nop

-- ######## func destroy_plan_crank -- = 0x03ab


    03ab : fc00 ; -- <0037> swapra = nop

-- ######## func puff_len_crank -- = 0x03ac
    03ac : 303e ; -- <0054> push rtna -- func puff_len_crank

    03ad : 6600 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    03ae : 6a92 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 146
    03af : 0017 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    03b0 : 0018 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    03b1 : 0604 ; -- <0040> b = $crank_max_puffs
    03b2 : e006 ; -- <0041> br gt :puff_limit
    03b3 : 03c1 ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    03b4 : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    03b5 : 09c4 ; -- <0043> "
    03b6 : fba0 ; -- <0044> call :multiply
    03b7 : 0180 ; -- <0044> "
    03b8 : fc00 ; -- <0044> "
    03b9 : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    03ba : 2710 ; -- <0045> "
    03bb : 6600 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    03bc : 6a90 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 144
    03bd : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    03be : 5f00 ; -- <0046> "
    03bf : e00f ; -- <0047> jmp :done
    03c0 : 03c8 ; -- <0047> "
-- :puff_limit -- = 0x03c1
-- prevent the puff counter from going higher & eventually rolling over.
    03c1 : 6600 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    03c2 : 6a92 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 146
    03c3 : 5e04 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 4
-- accept max puff len.
    03c4 : 6600 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    03c5 : 6a90 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 144
    03c6 : 5fa0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    03c7 : 4e20 ; -- <0052> "
-- :done -- = 0x03c8

    03c8 : f80c ; -- <0055> pop rtna -- func puff_len_crank
    03c9 : fc00 ; -- <0055> swapra = nop

-- ######## func leave_crank -- = 0x03ca
    03ca : 303e ; -- <0071> push rtna -- func leave_crank

    03cb : fba0 ; -- <0057> callx  check_engine_stop  a
    03cc : 0d71 ; -- <0057> "
    03cd : fc00 ; -- <0057> "
    03ce : 0008 ; -- <0057> a = pa
    03cf : e400 ; -- <0058> bn az :done
    03d0 : 03e5 ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    03d1 : 6600 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    03d2 : 6a7e ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 126
    03d3 : 0017 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    03d4 : 0018 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    03d5 : e000 ; -- <0062> br az :stay
    03d6 : 03e5 ; -- <0062> "
    03d7 : 6600 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    03d8 : 6a7c ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 124
    03d9 : 0017 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    03da : 0018 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    03db : 07a0 ; -- <0064> b = $crank_success_rpm
    03dc : 0320 ; -- <0064> "
    03dd : e005 ; -- <0065> br lt :stay
    03de : 03e5 ; -- <0065> "
    03df : fba0 ; -- <0066> callx  destroy_plan_crank
    03e0 : 03ab ; -- <0066> "
    03e1 : fc00 ; -- <0066> "
    03e2 : fba0 ; -- <0067> callx  init_plan_warmup
    03e3 : 03e9 ; -- <0067> "
    03e4 : fc00 ; -- <0067> "
-- :stay -- = 0x03e5

-- :done -- = 0x03e5

    03e5 : f80c ; -- <0072> pop rtna -- func leave_crank
    03e6 : fc00 ; -- <0072> swapra = nop



-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.
-- 750 = 0 degF.
-- max 6000 & min 4500 over a temp range 750 to 0x4c0 gives 6900 us puff at 74 deg F.  program rev 594.
-- this is used if the engine temp is unavailable.

-- :plan_name_warmup -- = 0x03e7
-- "WM\x0"
    03e7 : 4d57 ; -- <0016> MW
    03e8 : 0000 ; -- <0016>   

-- ######## func init_plan_warmup -- = 0x03e9

-- set up the warmup plan.
    03e9 : 6600 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03ea : 6a14 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03eb : 0017 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03ec : 0018 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03ed : 063c ; -- <0021> b = $warmup_timeout_sec
    03ee : 6600 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_hi = 0
    03ef : 6a96 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_lo = 150
    03f0 : c800 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_write_data = a+b
    03f1 : 5f00 ; -- <0022> "

-- memorize state.
    03f2 : 6600 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    03f3 : 6a88 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 136
    03f4 : 5fa0 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    03f5 : 03e7 ; -- <0025> "
    03f6 : 6600 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    03f7 : 6a8a ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 138
    03f8 : 5fa0 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    03f9 : 0404 ; -- <0026> "
    03fa : 6600 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    03fb : 6a8c ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 140
    03fc : 5fa0 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    03fd : 0436 ; -- <0027> "
    03fe : 6600 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    03ff : 6a8e ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 142
    0400 : 5fa0 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    0401 : 0403 ; -- <0028> "

    0402 : fc00 ; -- <0030> swapra = nop

-- ######## func destroy_plan_warmup -- = 0x0403


    0403 : fc00 ; -- <0033> swapra = nop

-- ######## func puff_len_warmup -- = 0x0404
    0404 : 3004 ; -- <0070> push x -- func puff_len_warmup
    0405 : 303e ; -- <0070> push rtna -- "

-- x = enrichment us.
    0406 : 13a0 ; -- <0036> x = $warmup_limping_enrichment_us
    0407 : 07d0 ; -- <0036> "

-- check engine block temp sensor.  if valid, enrich by a linear function:
-- {warmup_min_temp_adc...warmup_success_temp_adc} -> {$warmup_max_enrichment_us...0}
    0408 : 0202 ; -- <0040> a = $anmux_engine_block_temp

    0409 : 0351 ; -- <0041> a = a<<1
    040a : 0616 ; -- <0041> b = 22
    040b : 6600 ; -- <0041> av_ad_hi = 0
    040c : 6b00 ; -- <0041> av_ad_lo = ad0
    040d : 0417 ; -- <0041> b = av_write_data
    040e : 0418 ; -- <0041> b = av_read_data

-- b = sensor reading in adc counts.
    040f : 03a0 ; -- <0043> a = $temp_ceiling_adc
    0410 : 0ff0 ; -- <0043> "
    0411 : e005 ; -- <0044> br lt :temp_invalid
    0412 : 042c ; -- <0044> "
    0413 : 03a0 ; -- <0045> a = $warmup_success_temp_adc
    0414 : 04c0 ; -- <0045> "
    0415 : e005 ; -- <0046> br lt :too_warm
    0416 : 042c ; -- <0046> "
    0417 : 03a0 ; -- <0047> a = $warmup_min_temp_adc
    0418 : 02ee ; -- <0047> "
    0419 : e005 ; -- <0048> br lt :in_range
    041a : 041d ; -- <0048> "
    041b : 07a0 ; -- <0049> b = $warmup_min_temp_adc
    041c : 02ee ; -- <0049> "
-- :in_range -- = 0x041d
-- negate the sensor reading so as to subtract it from warmup_success_temp_adc.
    041d : 0360 ; -- <0052> a = 0xffff
    041e : c800 ; -- <0053> b = xor
    041f : 0738 ; -- <0053> "
    0420 : 0201 ; -- <0054> a = 1
    0421 : c800 ; -- <0055> b = a+b
    0422 : 0700 ; -- <0055> "
    0423 : 03a0 ; -- <0056> a = $warmup_success_temp_adc
    0424 : 04c0 ; -- <0056> "
    0425 : c800 ; -- <0057> b = a+b
    0426 : 0700 ; -- <0057> "
-- b = how many counts "cold" we are.  multiply that by the slope warmup_us_per_cold_adc.
    0427 : 020c ; -- <0059> a = $warmup_us_per_cold_adc
    0428 : fba0 ; -- <0060> call :multiply
    0429 : 0180 ; -- <0060> "
    042a : fc00 ; -- <0060> "
    042b : 1000 ; -- <0061> x = a
-- :too_warm -- = 0x042c
-- :temp_invalid -- = 0x042c

-- apply total of base amount and enrichment.
-- $warmup_min_puff_len_us <= total <= ($warmup_min_puff_len_us + $warmup_max_enrichment_us)
    042c : 03a0 ; -- <0067> a = $warmup_min_puff_len_us
    042d : 09c4 ; -- <0067> "
    042e : 0404 ; -- <0068> b = x
    042f : 6600 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    0430 : 6a90 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 144
    0431 : c800 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    0432 : 5f00 ; -- <0069> "

    0433 : f80c ; -- <0071> pop rtna -- func puff_len_warmup
    0434 : 100c ; -- <0071> pop x -- "
    0435 : fc00 ; -- <0071> swapra = nop

-- ######## func leave_warmup -- = 0x0436
    0436 : 303e ; -- <0099> push rtna -- func leave_warmup

    0437 : fba0 ; -- <0073> callx  check_engine_stop  a
    0438 : 0d71 ; -- <0073> "
    0439 : fc00 ; -- <0073> "
    043a : 0008 ; -- <0073> a = pa
    043b : e400 ; -- <0074> bn az :done
    043c : 046a ; -- <0074> "

-- transition to plan_run if warmup has expired.
    043d : 6600 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    043e : 6a14 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    043f : 0017 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0440 : 0018 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0441 : 6600 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_hi = 0
    0442 : 6a96 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_lo = 150
    0443 : 0417 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_write_data -- start read cycle
    0444 : 0418 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_read_data -- finish read cycle

    0445 : 0000 ; -- <0083> a = a
    0446 : 0401 ; -- <0083> b = b

    0447 : e406 ; -- <0079> bn gt :else_1095
    0448 : 0451 ; -- <0079> "

    0449 : fba0 ; -- <0080> callx  destroy_plan_warmup
    044a : 0403 ; -- <0080> "
    044b : fc00 ; -- <0080> "
    044c : fba0 ; -- <0081> callx  init_plan_run
    044d : 06ee ; -- <0081> "
    044e : fc00 ; -- <0081> "
    044f : e00f ; -- <0082> jmp :done
    0450 : 046a ; -- <0082> "


-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    0451 : 0202 ; -- <0087> a = $anmux_engine_block_temp

    0452 : 0351 ; -- <0088> a = a<<1
    0453 : 0616 ; -- <0088> b = 22
    0454 : 6600 ; -- <0088> av_ad_hi = 0
    0455 : 6b00 ; -- <0088> av_ad_lo = ad0
    0456 : 0417 ; -- <0088> b = av_write_data
    0457 : 0418 ; -- <0088> b = av_read_data

    0458 : 03a0 ; -- <0089> a = $temp_ceiling_adc
    0459 : 0ff0 ; -- <0089> "

    045a : 0000 ; -- <0096> a = a
    045b : 0401 ; -- <0096> b = b

    045c : e406 ; -- <0090> bn gt :else_1116
    045d : 046a ; -- <0090> "

    045e : 03a0 ; -- <0091> a = $warmup_success_temp_adc
    045f : 04c0 ; -- <0091> "

    0460 : 0000 ; -- <0095> a = a
    0461 : 0401 ; -- <0095> b = b

    0462 : e405 ; -- <0092> bn lt :else_1122
    0463 : 046a ; -- <0092> "

    0464 : fba0 ; -- <0093> callx  destroy_plan_warmup
    0465 : 0403 ; -- <0093> "
    0466 : fc00 ; -- <0093> "
    0467 : fba0 ; -- <0094> callx  init_plan_run
    0468 : 06ee ; -- <0094> "
    0469 : fc00 ; -- <0094> "



-- :done -- = 0x046a

    046a : f80c ; -- <0100> pop rtna -- func leave_warmup
    046b : fc00 ; -- <0100> swapra = nop



-- :rpm_cells -- = 0x046c
    046c : 01f4 ; -- <0004> 500
    046d : 0271 ; -- <0005> 625
    046e : 030d ; -- <0006> 781
    046f : 03d1 ; -- <0007> 977
    0470 : 04c5 ; -- <0008> 1221
    0471 : 05f6 ; -- <0009> 1526
    0472 : 0773 ; -- <0010> 1907
    0473 : 0950 ; -- <0011> 2384
    0474 : 0ba4 ; -- <0012> 2980
    0475 : 0e8d ; -- <0013> 3725
    0476 : 1231 ; -- <0014> 4657
    0477 : 16bd ; -- <0015> 5821
    0478 : 1c6c ; -- <0016> 7276
    0479 : ffff ; -- <0017> 0xffff




-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed.

-- o2 sensor interpetation & state machine.

-- default maps
-- :default_tps_reference -- = 0x047a
    047a : 0100 ; -- <0064> 0x0100
    047b : 0540 ; -- <0065> 0x0540
    047c : 0540 ; -- <0066> 0x0540
    047d : 0540 ; -- <0067> 0x0540
    047e : 0540 ; -- <0068> 0x0540
    047f : 0540 ; -- <0069> 0x0540
    0480 : 0540 ; -- <0070> 0x0540
    0481 : 0540 ; -- <0071> 0x0540
    0482 : 0540 ; -- <0072> 0x0540
    0483 : 0540 ; -- <0073> 0x0540
    0484 : 0540 ; -- <0074> 0x0540
    0485 : 0540 ; -- <0075> 0x0540
    0486 : 0b00 ; -- <0076> 0x0b00

-- :plan_name_learn_stoich -- = 0x0487
-- "LN\x0"
    0487 : 4e4c ; -- <0079> NL
    0488 : 0000 ; -- <0079>   

-- ######## func init_plan_learn_stoich -- = 0x0489

-- set up the learn_stoich plan.
    0489 : 6600 ; -- <0083> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    048a : 6ba0 ; -- <0083> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 348
    048b : 015c ; -- <0083> "
    048c : 5e0a ; -- <0083> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- memorize state.
    048d : 6600 ; -- <0086> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_hi = 0
    048e : 6a88 ; -- <0086> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_lo = 136
    048f : 5fa0 ; -- <0086> ram $ram_plan_name = :plan_name_learn_stoich -- av_write_data = :plan_name_learn_stoich
    0490 : 0487 ; -- <0086> "
    0491 : 6600 ; -- <0087> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_hi = 0
    0492 : 6a8a ; -- <0087> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_lo = 138
    0493 : 5fa0 ; -- <0087> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_write_data = :puff_len_learn_stoich
    0494 : 04a3 ; -- <0087> "
    0495 : 6600 ; -- <0088> ram $ram_transition_func = :leave_learn_stoich -- av_ad_hi = 0
    0496 : 6a8c ; -- <0088> ram $ram_transition_func = :leave_learn_stoich -- av_ad_lo = 140
    0497 : 5fa0 ; -- <0088> ram $ram_transition_func = :leave_learn_stoich -- av_write_data = :leave_learn_stoich
    0498 : 05ad ; -- <0088> "
    0499 : 6600 ; -- <0089> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_hi = 0
    049a : 6a8e ; -- <0089> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_lo = 142
    049b : 5fa0 ; -- <0089> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_write_data = :destroy_plan_learn_stoich
    049c : 049e ; -- <0089> "

    049d : fc00 ; -- <0091> swapra = nop

-- ######## func destroy_plan_learn_stoich -- = 0x049e


    049e : fc00 ; -- <0094> swapra = nop

-- :lrns_trim_up_msg -- = 0x049f
-- "trR\x0"
    049f : 7274 ; -- <0096> rt
    04a0 : 0052 ; -- <0096>  R
-- :lrns_trim_down_msg -- = 0x04a1
-- "trL\x0"
    04a1 : 7274 ; -- <0098> rt
    04a2 : 004c ; -- <0098>  L

-- ######## func puff_len_learn_stoich -- = 0x04a3
    04a3 : 3002 ; -- <0133> push i -- func puff_len_learn_stoich
    04a4 : 3003 ; -- <0133> push j -- "
    04a5 : 3006 ; -- <0133> push g6 -- "
    04a6 : 3007 ; -- <0133> push g7 -- "
    04a7 : 303e ; -- <0133> push rtna -- "

    04a8 : 6600 ; -- <0101> ram i = $ram_lrns_ticks_remain -- av_ad_hi = 0
    04a9 : 6ba0 ; -- <0101> ram i = $ram_lrns_ticks_remain -- av_ad_lo = 348
    04aa : 015c ; -- <0101> "
    04ab : 0817 ; -- <0101> ram i = $ram_lrns_ticks_remain -- i = av_write_data -- start read cycle
    04ac : 0818 ; -- <0101> ram i = $ram_lrns_ticks_remain -- i = av_read_data -- finish read cycle

    04ad : 0002 ; -- <0132> a = i
    04ae : 0600 ; -- <0132> b = 0

    04af : e406 ; -- <0102> bn gt :else_1199
    04b0 : 04b9 ; -- <0102> "

    04b1 : 0f60 ; -- <0103> j = -1
    04b2 : 6600 ; -- <0104> ram $ram_lrns_ticks_remain = i+j -- av_ad_hi = 0
    04b3 : 6ba0 ; -- <0104> ram $ram_lrns_ticks_remain = i+j -- av_ad_lo = 348
    04b4 : 015c ; -- <0104> "
    04b5 : c800 ; -- <0104> ram $ram_lrns_ticks_remain = i+j -- av_write_data = i+j
    04b6 : 5f10 ; -- <0104> "

    04b7 : e00f ; -- <0106> jmp :end_1199
    04b8 : 04f8 ; -- <0106> "

    04b9 : 6600 ; -- <0107> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    04ba : 6ba0 ; -- <0107> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 348
    04bb : 015c ; -- <0107> "
    04bc : 5e0a ; -- <0107> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    04bd : 6600 ; -- <0110> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    04be : 6a90 ; -- <0110> ram i = $ram_next_puff_len_us -- av_ad_lo = 144
    04bf : 0817 ; -- <0110> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    04c0 : 0818 ; -- <0110> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    04c1 : 0e00 ; -- <0111> j = 0
    04c2 : 6600 ; -- <0112> ram g6 = $ram_o2_state -- av_ad_hi = 0
    04c3 : 6ba0 ; -- <0112> ram g6 = $ram_o2_state -- av_ad_lo = 350
    04c4 : 015e ; -- <0112> "
    04c5 : 1817 ; -- <0112> ram g6 = $ram_o2_state -- g6 = av_write_data -- start read cycle
    04c6 : 1818 ; -- <0112> ram g6 = $ram_o2_state -- g6 = av_read_data -- finish read cycle
    04c7 : fba0 ; -- <0113> callx  interpret_o2
    04c8 : 0568 ; -- <0113> "
    04c9 : fc00 ; -- <0113> "
    04ca : 6600 ; -- <0114> ram g7 = $ram_o2_state -- av_ad_hi = 0
    04cb : 6ba0 ; -- <0114> ram g7 = $ram_o2_state -- av_ad_lo = 350
    04cc : 015e ; -- <0114> "
    04cd : 1c17 ; -- <0114> ram g7 = $ram_o2_state -- g7 = av_write_data -- start read cycle
    04ce : 1c18 ; -- <0114> ram g7 = $ram_o2_state -- g7 = av_read_data -- finish read cycle

    04cf : 0007 ; -- <0131> a = g7
    04d0 : 0601 ; -- <0131> b = 1

    04d1 : e407 ; -- <0115> bn eq :else_1233
    04d2 : 04e8 ; -- <0115> "

-- sensing a lean condition.  trim up to enrich.

    04d3 : 0002 ; -- <0119> a = i
    04d4 : 07a0 ; -- <0119> b = 10000
    04d5 : 2710 ; -- <0119> "

    04d6 : e405 ; -- <0117> bn lt :else_1238
    04d7 : 04da ; -- <0117> "

    04d8 : 0fa0 ; -- <0118> j = $lrns_puff_step_up_us
    04d9 : 0258 ; -- <0118> "

    04da : 23a0 ; -- <0120> pa = :lrns_trim_up_msg
    04db : 049f ; -- <0120> "
    04dc : fba0 ; -- <0120> callx  set_text_flag  :lrns_trim_up_msg
    04dd : 0bf3 ; -- <0120> "
    04de : fc00 ; -- <0120> "

    04df : 0006 ; -- <0124> a = g6
    04e0 : 0602 ; -- <0124> b = 2

    04e1 : e407 ; -- <0121> bn eq :else_1249
    04e2 : 04e6 ; -- <0121> "

-- o2 state just switched to lean.  adjust map.
    04e3 : fba0 ; -- <0123> callx  learn_smap
    04e4 : 0504 ; -- <0123> "
    04e5 : fc00 ; -- <0123> "


    04e6 : e00f ; -- <0126> jmp :end_1233
    04e7 : 04f4 ; -- <0126> "

-- sensing a rich condition.  trim down to lean it out.

    04e8 : 0002 ; -- <0130> a = i
    04e9 : 07a0 ; -- <0130> b = 2000
    04ea : 07d0 ; -- <0130> "

    04eb : e406 ; -- <0128> bn gt :else_1259
    04ec : 04ef ; -- <0128> "

    04ed : 0fa0 ; -- <0129> j = $lrns_puff_step_down_us
    04ee : ffdf ; -- <0129> "

    04ef : 23a0 ; -- <0131> pa = :lrns_trim_down_msg
    04f0 : 04a1 ; -- <0131> "
    04f1 : fba0 ; -- <0131> callx  set_text_flag  :lrns_trim_down_msg
    04f2 : 0bf3 ; -- <0131> "
    04f3 : fc00 ; -- <0131> "

    04f4 : 6600 ; -- <0132> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    04f5 : 6a90 ; -- <0132> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 144
    04f6 : c800 ; -- <0132> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    04f7 : 5f10 ; -- <0132> "


    04f8 : f80c ; -- <0134> pop rtna -- func puff_len_learn_stoich
    04f9 : 1c0c ; -- <0134> pop g7 -- "
    04fa : 180c ; -- <0134> pop g6 -- "
    04fb : 0c0c ; -- <0134> pop j -- "
    04fc : 080c ; -- <0134> pop i -- "
    04fd : fc00 ; -- <0134> swapra = nop

-- :lrns_enrich_msg -- = 0x04fe
-- "lrnR\x0"
    04fe : 726c ; -- <0136> rl
    04ff : 526e ; -- <0136> Rn
    0500 : 0000 ; -- <0136>   
-- :lrns_lean_msg -- = 0x0501
-- "lrnL\x0"
    0501 : 726c ; -- <0138> rl
    0502 : 4c6e ; -- <0138> Ln
    0503 : 0000 ; -- <0138>   

-- ######## func learn_smap -- = 0x0504
    0504 : 3002 ; -- <0175> push i -- func learn_smap
    0505 : 3004 ; -- <0175> push x -- "
    0506 : 3005 ; -- <0175> push y -- "
    0507 : 303e ; -- <0175> push rtna -- "

    0508 : 6600 ; -- <0141> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0509 : 6a7e ; -- <0141> ram a = $ram_rpm_valid -- av_ad_lo = 126
    050a : 0017 ; -- <0141> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    050b : 0018 ; -- <0141> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    050c : 0000 ; -- <0174> a = a
    050d : 0601 ; -- <0174> b = 1

    050e : e407 ; -- <0142> bn eq :else_1294
    050f : 055f ; -- <0142> "

-- let g6 = map cell num.  x = map puff len.  i = observed stoich puff len.
    0510 : 6600 ; -- <0144> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    0511 : 6a7c ; -- <0144> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    0512 : 2017 ; -- <0144> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    0513 : 2018 ; -- <0144> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    0514 : fba0 ; -- <0145> callx  find_rpm_cell  pa  g6
    0515 : 05b3 ; -- <0145> "
    0516 : fc00 ; -- <0145> "
    0517 : 1808 ; -- <0145> g6 = pa
    0518 : 0006 ; -- <0146> a = g6

    0519 : 0351 ; -- <0147> a = a<<1
    051a : 0698 ; -- <0147> b = 152
    051b : 6600 ; -- <0147> av_ad_hi = 0
    051c : 6b00 ; -- <0147> av_ad_lo = ad0
    051d : 0417 ; -- <0147> b = av_write_data
    051e : 0418 ; -- <0147> b = av_read_data

    051f : 1001 ; -- <0148> x = b
    0520 : 6600 ; -- <0149> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    0521 : 6a90 ; -- <0149> ram i = $ram_next_puff_len_us -- av_ad_lo = 144
    0522 : 0817 ; -- <0149> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    0523 : 0818 ; -- <0149> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    0524 : 17a0 ; -- <0150> y = (0xffff - $lrns_map_step + 1)
    0525 : ff38 ; -- <0150> "

    0526 : c800 ; -- <0157> a = x+y
    0527 : 0320 ; -- <0157> "
    0528 : 0402 ; -- <0157> b = i

    0529 : e406 ; -- <0151> bn gt :else_1321
    052a : 0539 ; -- <0151> "

-- map is richer than observed stoich.  lean the map 1 step.
    052b : 0006 ; -- <0153> a = g6
    052c : c800 ; -- <0154> b = x+y
    052d : 0720 ; -- <0154> "

    052e : 0351 ; -- <0155> a = a<<1
    052f : 3001 ; -- <0155> push b -- push b
    0530 : 0698 ; -- <0155> b = 152
    0531 : 6600 ; -- <0155> av_ad_hi = 0
    0532 : 6b00 ; -- <0155> av_ad_lo = ad0
    0533 : 5c0c ; -- <0155> pop av_write_data -- pop av_write_data

    0534 : 23a0 ; -- <0156> pa = :lrns_lean_msg
    0535 : 0501 ; -- <0156> "
    0536 : fba0 ; -- <0156> callx  set_text_flag  :lrns_lean_msg
    0537 : 0bf3 ; -- <0156> "
    0538 : fc00 ; -- <0156> "

    0539 : 16c8 ; -- <0158> y = $lrns_map_step

    053a : c800 ; -- <0165> a = x+y
    053b : 0320 ; -- <0165> "
    053c : 0402 ; -- <0165> b = i

    053d : e405 ; -- <0159> bn lt :else_1341
    053e : 054d ; -- <0159> "

-- map is leaner than observed stoich.  rich the map 1 step.
    053f : 0006 ; -- <0161> a = g6
    0540 : c800 ; -- <0162> b = x+y
    0541 : 0720 ; -- <0162> "

    0542 : 0351 ; -- <0163> a = a<<1
    0543 : 3001 ; -- <0163> push b -- push b
    0544 : 0698 ; -- <0163> b = 152
    0545 : 6600 ; -- <0163> av_ad_hi = 0
    0546 : 6b00 ; -- <0163> av_ad_lo = ad0
    0547 : 5c0c ; -- <0163> pop av_write_data -- pop av_write_data

    0548 : 23a0 ; -- <0164> pa = :lrns_enrich_msg
    0549 : 04fe ; -- <0164> "
    054a : fba0 ; -- <0164> callx  set_text_flag  :lrns_enrich_msg
    054b : 0bf3 ; -- <0164> "
    054c : fc00 ; -- <0164> "


-- dump smap if we haven't done so lately.
    054d : 6600 ; -- <0168> ram a = $ram_last_learn_second -- av_ad_hi = 0
    054e : 6ab2 ; -- <0168> ram a = $ram_last_learn_second -- av_ad_lo = 178
    054f : 0017 ; -- <0168> ram a = $ram_last_learn_second -- a = av_write_data -- start read cycle
    0550 : 0018 ; -- <0168> ram a = $ram_last_learn_second -- a = av_read_data -- finish read cycle
    0551 : 6600 ; -- <0169> ram b = $ram_seconds_cnt -- av_ad_hi = 0
    0552 : 6a42 ; -- <0169> ram b = $ram_seconds_cnt -- av_ad_lo = 66
    0553 : 0417 ; -- <0169> ram b = $ram_seconds_cnt -- b = av_write_data -- start read cycle
    0554 : 0418 ; -- <0169> ram b = $ram_seconds_cnt -- b = av_read_data -- finish read cycle

    0555 : 0000 ; -- <0173> a = a
    0556 : 0401 ; -- <0173> b = b

    0557 : e007 ; -- <0170> br eq :else_1367
    0558 : 055f ; -- <0170> "

    0559 : 6600 ; -- <0171> ram $ram_last_learn_second = b -- av_ad_hi = 0
    055a : 6ab2 ; -- <0171> ram $ram_last_learn_second = b -- av_ad_lo = 178
    055b : 5c01 ; -- <0171> ram $ram_last_learn_second = b -- av_write_data = b
    055c : fba0 ; -- <0172> callx  dump_smap_cmd
    055d : 05d0 ; -- <0172> "
    055e : fc00 ; -- <0172> "



    055f : f80c ; -- <0176> pop rtna -- func learn_smap
    0560 : 140c ; -- <0176> pop y -- "
    0561 : 100c ; -- <0176> pop x -- "
    0562 : 080c ; -- <0176> pop i -- "
    0563 : fc00 ; -- <0176> swapra = nop

-- :o2_rich_msg -- = 0x0564
-- "o2R\x0"
    0564 : 326f ; -- <0178> 2o
    0565 : 0052 ; -- <0178>  R
-- :o2_lean_msg -- = 0x0566
-- "o2L\x0"
    0566 : 326f ; -- <0180> 2o
    0567 : 004c ; -- <0180>  L

-- ######## func interpret_o2 -- = 0x0568

    0568 : 6600 ; -- <0183> ram a = $ram_o2_state -- av_ad_hi = 0
    0569 : 6ba0 ; -- <0183> ram a = $ram_o2_state -- av_ad_lo = 350
    056a : 015e ; -- <0183> "
    056b : 0017 ; -- <0183> ram a = $ram_o2_state -- a = av_write_data -- start read cycle
    056c : 0018 ; -- <0183> ram a = $ram_o2_state -- a = av_read_data -- finish read cycle

    056d : 0000 ; -- <0194> a = a
    056e : 0601 ; -- <0194> b = 1

    056f : e007 ; -- <0184> br eq :else_1391
    0570 : 0586 ; -- <0184> "

-- check sensor for lean state.
    0571 : 0205 ; -- <0186> a = $o2_adc_channel

    0572 : 0351 ; -- <0187> a = a<<1
    0573 : 0626 ; -- <0187> b = 38
    0574 : 6600 ; -- <0187> av_ad_hi = 0
    0575 : 6b00 ; -- <0187> av_ad_lo = ad0
    0576 : 0417 ; -- <0187> b = av_write_data
    0577 : 0418 ; -- <0187> b = av_read_data

    0578 : 03a0 ; -- <0188> a = $o2_lean_thresh_adc
    0579 : 01c2 ; -- <0188> "

    057a : 0000 ; -- <0193> a = a
    057b : 0401 ; -- <0193> b = b

    057c : e406 ; -- <0189> bn gt :else_1404
    057d : 0586 ; -- <0189> "

    057e : 6600 ; -- <0190> ram $ram_o2_state = $o2_state_lean -- av_ad_hi = 0
    057f : 6ba0 ; -- <0190> ram $ram_o2_state = $o2_state_lean -- av_ad_lo = 350
    0580 : 015e ; -- <0190> "
    0581 : 5e01 ; -- <0190> ram $ram_o2_state = $o2_state_lean -- av_write_data = 1
    0582 : 6600 ; -- <0191> ram $ram_o2_been_lean = 1 -- av_ad_hi = 0
    0583 : 6ba0 ; -- <0191> ram $ram_o2_been_lean = 1 -- av_ad_lo = 354
    0584 : 0162 ; -- <0191> "
    0585 : 5e01 ; -- <0191> ram $ram_o2_been_lean = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_lean_msg



    0586 : 0000 ; -- <0205> a = a
    0587 : 0602 ; -- <0205> b = 2

    0588 : e007 ; -- <0195> br eq :else_1416
    0589 : 059f ; -- <0195> "

-- check sensor for rich state.
    058a : 0205 ; -- <0197> a = $o2_adc_channel

    058b : 0351 ; -- <0198> a = a<<1
    058c : 0626 ; -- <0198> b = 38
    058d : 6600 ; -- <0198> av_ad_hi = 0
    058e : 6b00 ; -- <0198> av_ad_lo = ad0
    058f : 0417 ; -- <0198> b = av_write_data
    0590 : 0418 ; -- <0198> b = av_read_data

    0591 : 03a0 ; -- <0199> a = $o2_rich_thresh_adc
    0592 : 02bc ; -- <0199> "

    0593 : 0000 ; -- <0204> a = a
    0594 : 0401 ; -- <0204> b = b

    0595 : e405 ; -- <0200> bn lt :else_1429
    0596 : 059f ; -- <0200> "

    0597 : 6600 ; -- <0201> ram $ram_o2_state = $o2_state_rich -- av_ad_hi = 0
    0598 : 6ba0 ; -- <0201> ram $ram_o2_state = $o2_state_rich -- av_ad_lo = 350
    0599 : 015e ; -- <0201> "
    059a : 5e02 ; -- <0201> ram $ram_o2_state = $o2_state_rich -- av_write_data = 2
    059b : 6600 ; -- <0202> ram $ram_o2_been_rich = 1 -- av_ad_hi = 0
    059c : 6ba0 ; -- <0202> ram $ram_o2_been_rich = 1 -- av_ad_lo = 352
    059d : 0160 ; -- <0202> "
    059e : 5e01 ; -- <0202> ram $ram_o2_been_rich = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_rich_msg



    059f : fc00 ; -- <0207> swapra = nop

-- ######## func init_o2_state -- = 0x05a0

    05a0 : 6600 ; -- <0209> ram $ram_o2_state = $o2_state_init -- av_ad_hi = 0
    05a1 : 6ba0 ; -- <0209> ram $ram_o2_state = $o2_state_init -- av_ad_lo = 350
    05a2 : 015e ; -- <0209> "
    05a3 : 5e00 ; -- <0209> ram $ram_o2_state = $o2_state_init -- av_write_data = 0
    05a4 : 6600 ; -- <0210> ram $ram_o2_been_lean = 0 -- av_ad_hi = 0
    05a5 : 6ba0 ; -- <0210> ram $ram_o2_been_lean = 0 -- av_ad_lo = 354
    05a6 : 0162 ; -- <0210> "
    05a7 : 5e00 ; -- <0210> ram $ram_o2_been_lean = 0 -- av_write_data = 0
    05a8 : 6600 ; -- <0211> ram $ram_o2_been_rich = 0 -- av_ad_hi = 0
    05a9 : 6ba0 ; -- <0211> ram $ram_o2_been_rich = 0 -- av_ad_lo = 352
    05aa : 0160 ; -- <0211> "
    05ab : 5e00 ; -- <0211> ram $ram_o2_been_rich = 0 -- av_write_data = 0

    05ac : fc00 ; -- <0213> swapra = nop

-- ######## func leave_learn_stoich -- = 0x05ad
    05ad : 303e ; -- <0216> push rtna -- func leave_learn_stoich

    05ae : fba0 ; -- <0215> callx  check_engine_stop  pa
    05af : 0d71 ; -- <0215> "
    05b0 : fc00 ; -- <0215> "

    05b1 : f80c ; -- <0217> pop rtna -- func leave_learn_stoich
    05b2 : fc00 ; -- <0217> swapra = nop

-- ######## func find_rpm_cell -- = 0x05b3
    05b3 : 3002 ; -- <0234> push i -- func find_rpm_cell
    05b4 : 3003 ; -- <0234> push j -- "

    05b5 : 0a01 ; -- <0219> i = 1
    05b6 : 0008 ; -- <0220> a = rpm
    05b7 : 0760 ; -- <0221> b = 0xffff
    05b8 : e007 ; -- <0222> br eq :found
    05b9 : 05c7 ; -- <0222> "
-- :next_cell -- = 0x05ba
    05ba : 0fa0 ; -- <0224> j = :rpm_cells
    05bb : 046c ; -- <0224> "
    05bc : c800 ; -- <0225> fetch a from i+j
    05bd : d310 ; -- <0225> "
    05be : 03b0 ; -- <0225> "
    05bf : 0408 ; -- <0226> b = rpm
    05c0 : e006 ; -- <0227> br gt :found
    05c1 : 05c7 ; -- <0227> "
    05c2 : 0e01 ; -- <0228> j = 1
    05c3 : c800 ; -- <0229> i = i+j
    05c4 : 0b10 ; -- <0229> "
    05c5 : e00f ; -- <0230> jmp :next_cell
    05c6 : 05ba ; -- <0230> "
-- :found -- = 0x05c7
    05c7 : 0f60 ; -- <0232> j = -1
    05c8 : c800 ; -- <0233> cell = i+j
    05c9 : 2310 ; -- <0233> "
    05ca : 0c0c ; -- <0233> pop j -- rtn i+j
    05cb : 080c ; -- <0233> pop i -- "
    05cc : fc00 ; -- <0232> swapra = nop

    05cd : 0c0c ; -- <0235> pop j -- func find_rpm_cell
    05ce : 080c ; -- <0235> pop i -- "
    05cf : fc00 ; -- <0235> swapra = nop

-- ######## func dump_smap_cmd -- = 0x05d0
    05d0 : 3004 ; -- <0274> push x -- func dump_smap_cmd
    05d1 : 303e ; -- <0274> push rtna -- "

    05d2 : 020d ; -- <0237> a = 13 -- puteol
    05d3 : fba0 ; -- <0237> puteol
    05d4 : 00ab ; -- <0237> "
    05d5 : fc00 ; -- <0237> "
    05d6 : 020a ; -- <0237> a = 10 -- puteol
    05d7 : fba0 ; -- <0237> puteol
    05d8 : 00ab ; -- <0237> "
    05d9 : fc00 ; -- <0237> "
    05da : 6600 ; -- <0238> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    05db : 6a7c ; -- <0238> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    05dc : 2017 ; -- <0238> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    05dd : 2018 ; -- <0238> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    05de : fba0 ; -- <0239> callx  find_rpm_cell  pa  pa
    05df : 05b3 ; -- <0239> "
    05e0 : fc00 ; -- <0239> "
    05e1 : 1200 ; -- <0249> x = 0
-- :loop_1505 -- = 0x05e2

    05e2 : 0004 ; -- <0240> a = x

    05e3 : 0351 ; -- <0241> a = a<<1
    05e4 : 0698 ; -- <0241> b = 152
    05e5 : 6600 ; -- <0241> av_ad_hi = 0
    05e6 : 6b00 ; -- <0241> av_ad_lo = ad0
    05e7 : 0417 ; -- <0241> b = av_write_data
    05e8 : 0418 ; -- <0241> b = av_read_data

    05e9 : 0001 ; -- <0242> a = b
    05ea : fba0 ; -- <0243> call put4x
    05eb : 00d3 ; -- <0243> "
    05ec : fc00 ; -- <0243> "

    05ed : 0004 ; -- <0246> a = x
    05ee : 0408 ; -- <0246> b = pa

    05ef : e407 ; -- <0244> bn eq :else_1519
    05f0 : 05f5 ; -- <0244> "

    05f1 : 023c ; -- <0245> a = 60 -- putasc "<"
    05f2 : fba0 ; -- <0245> putasc "<"
    05f3 : 00ab ; -- <0245> "
    05f4 : fc00 ; -- <0245> "

    05f5 : 0220 ; -- <0247> a = 32 -- putasc " "
    05f6 : fba0 ; -- <0247> putasc " "
    05f7 : 00ab ; -- <0247> "
    05f8 : fc00 ; -- <0247> "


    05f9 : 0004 ; -- <0249> a = x
    05fa : 0601 ; -- <0249> b = 1
    05fb : c800 ; -- <0249> x = a+b
    05fc : 1300 ; -- <0249> "


    05fd : 0004 ; -- <0249> a = x
    05fe : 060d ; -- <0249> b = $num_rpm_cells
    05ff : e005 ; -- <0249> br lt :loop_1505
    0600 : 05e2 ; -- <0249> "

-- :end_1505 -- = 0x0601
    0601 : 020d ; -- <0250> a = 13 -- puteol
    0602 : fba0 ; -- <0250> puteol
    0603 : 00ab ; -- <0250> "
    0604 : fc00 ; -- <0250> "
    0605 : 020a ; -- <0250> a = 10 -- puteol
    0606 : fba0 ; -- <0250> puteol
    0607 : 00ab ; -- <0250> "
    0608 : fc00 ; -- <0250> "
    0609 : 1200 ; -- <0260> x = 0
-- :loop_1545 -- = 0x060a

    060a : 0004 ; -- <0251> a = x

    060b : 0351 ; -- <0252> a = a<<1
    060c : 06b4 ; -- <0252> b = 180
    060d : 6600 ; -- <0252> av_ad_hi = 0
    060e : 6b00 ; -- <0252> av_ad_lo = ad0
    060f : 0417 ; -- <0252> b = av_write_data
    0610 : 0418 ; -- <0252> b = av_read_data

    0611 : 0001 ; -- <0253> a = b
    0612 : fba0 ; -- <0254> call put4x
    0613 : 00d3 ; -- <0254> "
    0614 : fc00 ; -- <0254> "

    0615 : 0004 ; -- <0257> a = x
    0616 : 0408 ; -- <0257> b = pa

    0617 : e407 ; -- <0255> bn eq :else_1559
    0618 : 061d ; -- <0255> "

    0619 : 023c ; -- <0256> a = 60 -- putasc "<"
    061a : fba0 ; -- <0256> putasc "<"
    061b : 00ab ; -- <0256> "
    061c : fc00 ; -- <0256> "

    061d : 0220 ; -- <0258> a = 32 -- putasc " "
    061e : fba0 ; -- <0258> putasc " "
    061f : 00ab ; -- <0258> "
    0620 : fc00 ; -- <0258> "


    0621 : 0004 ; -- <0260> a = x
    0622 : 0601 ; -- <0260> b = 1
    0623 : c800 ; -- <0260> x = a+b
    0624 : 1300 ; -- <0260> "


    0625 : 0004 ; -- <0260> a = x
    0626 : 060d ; -- <0260> b = $num_tps_cells
    0627 : e005 ; -- <0260> br lt :loop_1545
    0628 : 060a ; -- <0260> "

-- :end_1545 -- = 0x0629
    0629 : 020d ; -- <0261> a = 13 -- puteol
    062a : fba0 ; -- <0261> puteol
    062b : 00ab ; -- <0261> "
    062c : fc00 ; -- <0261> "
    062d : 020a ; -- <0261> a = 10 -- puteol
    062e : fba0 ; -- <0261> puteol
    062f : 00ab ; -- <0261> "
    0630 : fc00 ; -- <0261> "
-- ram pa = $ram_tps_state
-- for {x = 0} {x lt $num_tps_states} step y = 1 {
-- a = x
-- struct_read $ram_tps_enrich_thou
-- a = b
-- call put4x
-- if x eq pa {
-- putasc "<"
-- }
-- putasc " "
-- }
-- puteol

    0631 : f80c ; -- <0275> pop rtna -- func dump_smap_cmd
    0632 : 100c ; -- <0275> pop x -- "
    0633 : fc00 ; -- <0275> swapra = nop

-- ######## func load_tps_enrich_cmd -- = 0x0634

-- for {i = 0} {i lt $num_tps_states} step j = 1 {
-- call  get4x
-- b = a
-- a = i
-- struct_write $ram_tps_enrich_thou
-- getchar
-- }

    0634 : fc00 ; -- <0285> swapra = nop

-- ######## func load_smap_cmd -- = 0x0635
    0635 : 3002 ; -- <0294> push i -- func load_smap_cmd
    0636 : 303e ; -- <0294> push rtna -- "

    0637 : 0a00 ; -- <0293> i = 0
-- :loop_1591 -- = 0x0638

    0638 : fba0 ; -- <0287> call  get4x
    0639 : 010c ; -- <0287> "
    063a : fc00 ; -- <0287> "
    063b : 0400 ; -- <0288> b = a
    063c : 0002 ; -- <0289> a = i

    063d : 0351 ; -- <0290> a = a<<1
    063e : 3001 ; -- <0290> push b -- push b
    063f : 0698 ; -- <0290> b = 152
    0640 : 6600 ; -- <0290> av_ad_hi = 0
    0641 : 6b00 ; -- <0290> av_ad_lo = ad0
    0642 : 5c0c ; -- <0290> pop av_write_data -- pop av_write_data

    0643 : fba0 ; -- <0291> getchar
    0644 : 00b4 ; -- <0291> "
    0645 : fc00 ; -- <0291> "


    0646 : 0002 ; -- <0293> a = i
    0647 : 0601 ; -- <0293> b = 1
    0648 : c800 ; -- <0293> i = a+b
    0649 : 0b00 ; -- <0293> "


    064a : 0002 ; -- <0293> a = i
    064b : 060d ; -- <0293> b = $num_rpm_cells
    064c : e005 ; -- <0293> br lt :loop_1591
    064d : 0638 ; -- <0293> "

-- :end_1591 -- = 0x064e

    064e : f80c ; -- <0295> pop rtna -- func load_smap_cmd
    064f : 080c ; -- <0295> pop i -- "
    0650 : fc00 ; -- <0295> swapra = nop

-- ######## func clear_smap_cmd -- = 0x0651
    0651 : 3002 ; -- <0302> push i -- func clear_smap_cmd

    0652 : 0a00 ; -- <0301> i = 0
-- :loop_1618 -- = 0x0653

    0653 : 0002 ; -- <0297> a = i
    0654 : 07a0 ; -- <0298> b = 3000
    0655 : 0bb8 ; -- <0298> "

    0656 : 0351 ; -- <0299> a = a<<1
    0657 : 3001 ; -- <0299> push b -- push b
    0658 : 0698 ; -- <0299> b = 152
    0659 : 6600 ; -- <0299> av_ad_hi = 0
    065a : 6b00 ; -- <0299> av_ad_lo = ad0
    065b : 5c0c ; -- <0299> pop av_write_data -- pop av_write_data



    065c : 0002 ; -- <0301> a = i
    065d : 0601 ; -- <0301> b = 1
    065e : c800 ; -- <0301> i = a+b
    065f : 0b00 ; -- <0301> "


    0660 : 0002 ; -- <0301> a = i
    0661 : 060d ; -- <0301> b = $num_rpm_cells
    0662 : e005 ; -- <0301> br lt :loop_1618
    0663 : 0653 ; -- <0301> "

-- :end_1618 -- = 0x0664

    0664 : 080c ; -- <0303> pop i -- func clear_smap_cmd
    0665 : fc00 ; -- <0303> swapra = nop

-- ######## func load_tps_ref_cmd -- = 0x0666
    0666 : 3002 ; -- <0315> push i -- func load_tps_ref_cmd
    0667 : 3006 ; -- <0315> push ga -- "
    0668 : 303e ; -- <0315> push rtna -- "

    0669 : 0a00 ; -- <0314> i = 0
-- :loop_1641 -- = 0x066a

    066a : fba0 ; -- <0305> call  get4x
    066b : 010c ; -- <0305> "
    066c : fc00 ; -- <0305> "
    066d : 1800 ; -- <0306> ga = a
    066e : 0400 ; -- <0307> b = a
    066f : 0002 ; -- <0308> a = i

    0670 : 0351 ; -- <0309> a = a<<1
    0671 : 3001 ; -- <0309> push b -- push b
    0672 : 06b4 ; -- <0309> b = 180
    0673 : 6600 ; -- <0309> av_ad_hi = 0
    0674 : 6b00 ; -- <0309> av_ad_lo = ad0
    0675 : 5c0c ; -- <0309> pop av_write_data -- pop av_write_data

    0676 : 0006 ; -- <0310> a = ga
    0677 : fba0 ; -- <0311> call put4x
    0678 : 00d3 ; -- <0311> "
    0679 : fc00 ; -- <0311> "
    067a : fba0 ; -- <0312> getchar
    067b : 00b4 ; -- <0312> "
    067c : fc00 ; -- <0312> "


    067d : 0002 ; -- <0314> a = i
    067e : 0601 ; -- <0314> b = 1
    067f : c800 ; -- <0314> i = a+b
    0680 : 0b00 ; -- <0314> "


    0681 : 0002 ; -- <0314> a = i
    0682 : 060d ; -- <0314> b = $num_tps_cells
    0683 : e005 ; -- <0314> br lt :loop_1641
    0684 : 066a ; -- <0314> "

-- :end_1641 -- = 0x0685

    0685 : f80c ; -- <0316> pop rtna -- func load_tps_ref_cmd
    0686 : 180c ; -- <0316> pop ga -- "
    0687 : 080c ; -- <0316> pop i -- "
    0688 : fc00 ; -- <0316> swapra = nop

-- ######## func learn_tps_ref_cmd -- = 0x0689
    0689 : 303e ; -- <0322> push rtna -- func learn_tps_ref_cmd

    068a : 6600 ; -- <0318> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    068b : 6a7c ; -- <0318> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    068c : 2017 ; -- <0318> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    068d : 2018 ; -- <0318> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    068e : fba0 ; -- <0319> callx  find_rpm_cell  pa  a
    068f : 05b3 ; -- <0319> "
    0690 : fc00 ; -- <0319> "
    0691 : 0008 ; -- <0319> a = pa
    0692 : 6600 ; -- <0320> ram b = $ram_tps_avg -- av_ad_hi = 0
    0693 : 6ba0 ; -- <0320> ram b = $ram_tps_avg -- av_ad_lo = 338
    0694 : 0152 ; -- <0320> "
    0695 : 0417 ; -- <0320> ram b = $ram_tps_avg -- b = av_write_data -- start read cycle
    0696 : 0418 ; -- <0320> ram b = $ram_tps_avg -- b = av_read_data -- finish read cycle

    0697 : 0351 ; -- <0321> a = a<<1
    0698 : 3001 ; -- <0321> push b -- push b
    0699 : 06b4 ; -- <0321> b = 180
    069a : 6600 ; -- <0321> av_ad_hi = 0
    069b : 6b00 ; -- <0321> av_ad_lo = ad0
    069c : 5c0c ; -- <0321> pop av_write_data -- pop av_write_data


    069d : f80c ; -- <0323> pop rtna -- func learn_tps_ref_cmd
    069e : fc00 ; -- <0323> swapra = nop


-- :plan_name_run -- = 0x069f
-- "RN\x0"
    069f : 4e52 ; -- <0002> NR
    06a0 : 0000 ; -- <0002>   


-- 0.5 to 2.0 trim factor equivalent.


-- ######## func trim_lean_cmd -- = 0x06a1

    06a1 : 6600 ; -- <0027> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    06a2 : 6ba0 ; -- <0027> ram a = $ram_run_manual_trim -- av_ad_lo = 376
    06a3 : 0178 ; -- <0027> "
    06a4 : 0017 ; -- <0027> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    06a5 : 0018 ; -- <0027> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    06a6 : 0000 ; -- <0032> a = a
    06a7 : 0600 ; -- <0032> b = 0

    06a8 : e407 ; -- <0028> bn eq :else_1704
    06a9 : 06ac ; -- <0028> "


    06aa : e00f ; -- <0030> jmp :end_1704
    06ab : 06b3 ; -- <0030> "

    06ac : 07a0 ; -- <0031> b = ([negate $run_manual_trim_step])
    06ad : ff40 ; -- <0031> "
    06ae : 6600 ; -- <0032> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    06af : 6ba0 ; -- <0032> ram $ram_run_manual_trim = a+b -- av_ad_lo = 376
    06b0 : 0178 ; -- <0032> "
    06b1 : c800 ; -- <0032> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    06b2 : 5f00 ; -- <0032> "


    06b3 : fc00 ; -- <0034> swapra = nop

-- ######## func trim_rich_cmd -- = 0x06b4

    06b4 : 6600 ; -- <0036> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    06b5 : 6ba0 ; -- <0036> ram a = $ram_run_manual_trim -- av_ad_lo = 376
    06b6 : 0178 ; -- <0036> "
    06b7 : 0017 ; -- <0036> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    06b8 : 0018 ; -- <0036> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    06b9 : 0000 ; -- <0041> a = a
    06ba : 07a0 ; -- <0041> b = 800
    06bb : 0320 ; -- <0041> "

    06bc : e406 ; -- <0037> bn gt :else_1724
    06bd : 06c0 ; -- <0037> "


    06be : e00f ; -- <0039> jmp :end_1724
    06bf : 06c6 ; -- <0039> "

    06c0 : 06c0 ; -- <0040> b = $run_manual_trim_step
    06c1 : 6600 ; -- <0041> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    06c2 : 6ba0 ; -- <0041> ram $ram_run_manual_trim = a+b -- av_ad_lo = 376
    06c3 : 0178 ; -- <0041> "
    06c4 : c800 ; -- <0041> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    06c5 : 5f00 ; -- <0041> "


    06c6 : fc00 ; -- <0043> swapra = nop

-- ######## func trim_2lean_cmd -- = 0x06c7

    06c7 : 6600 ; -- <0045> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    06c8 : 6ba0 ; -- <0045> ram a = $ram_run_manual_trim -- av_ad_lo = 376
    06c9 : 0178 ; -- <0045> "
    06ca : 0017 ; -- <0045> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    06cb : 0018 ; -- <0045> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    06cc : 0000 ; -- <0050> a = a
    06cd : 0600 ; -- <0050> b = 0

    06ce : e407 ; -- <0046> bn eq :else_1742
    06cf : 06d2 ; -- <0046> "


    06d0 : e00f ; -- <0048> jmp :end_1742
    06d1 : 06d9 ; -- <0048> "

    06d2 : 07a0 ; -- <0049> b = ([negate [expr $run_manual_trim_step * 8]])
    06d3 : fa00 ; -- <0049> "
    06d4 : 6600 ; -- <0050> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    06d5 : 6ba0 ; -- <0050> ram $ram_run_manual_trim = a+b -- av_ad_lo = 376
    06d6 : 0178 ; -- <0050> "
    06d7 : c800 ; -- <0050> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    06d8 : 5f00 ; -- <0050> "


    06d9 : fc00 ; -- <0052> swapra = nop

-- ######## func trim_2rich_cmd -- = 0x06da

    06da : 6600 ; -- <0054> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    06db : 6ba0 ; -- <0054> ram a = $ram_run_manual_trim -- av_ad_lo = 376
    06dc : 0178 ; -- <0054> "
    06dd : 0017 ; -- <0054> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    06de : 0018 ; -- <0054> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    06df : 0000 ; -- <0059> a = a
    06e0 : 07a0 ; -- <0059> b = 800
    06e1 : 0320 ; -- <0059> "

    06e2 : e406 ; -- <0055> bn gt :else_1762
    06e3 : 06e6 ; -- <0055> "


    06e4 : e00f ; -- <0057> jmp :end_1762
    06e5 : 06ed ; -- <0057> "

    06e6 : 07a0 ; -- <0058> b = ($run_manual_trim_step * 8)
    06e7 : 0600 ; -- <0058> "
    06e8 : 6600 ; -- <0059> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    06e9 : 6ba0 ; -- <0059> ram $ram_run_manual_trim = a+b -- av_ad_lo = 376
    06ea : 0178 ; -- <0059> "
    06eb : c800 ; -- <0059> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    06ec : 5f00 ; -- <0059> "


    06ed : fc00 ; -- <0061> swapra = nop

-- ######## func init_plan_run -- = 0x06ee

-- set up the run plan.
    06ee : 6600 ; -- <0064> ram $ram_run_manual_trim = $trim_unity -- av_ad_hi = 0
    06ef : 6ba0 ; -- <0064> ram $ram_run_manual_trim = $trim_unity -- av_ad_lo = 376
    06f0 : 0178 ; -- <0064> "
    06f1 : 5fa0 ; -- <0064> ram $ram_run_manual_trim = $trim_unity -- av_write_data = 8192
    06f2 : 2000 ; -- <0064> "
    06f3 : 6600 ; -- <0065> ram $ram_stoich_learn_trim = $trim_unity -- av_ad_hi = 0
    06f4 : 6ba0 ; -- <0065> ram $ram_stoich_learn_trim = $trim_unity -- av_ad_lo = 374
    06f5 : 0176 ; -- <0065> "
    06f6 : 5fa0 ; -- <0065> ram $ram_stoich_learn_trim = $trim_unity -- av_write_data = 8192
    06f7 : 2000 ; -- <0065> "

-- memorize state.
    06f8 : 6600 ; -- <0068> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    06f9 : 6a88 ; -- <0068> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 136
    06fa : 5fa0 ; -- <0068> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    06fb : 069f ; -- <0068> "
    06fc : 6600 ; -- <0069> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    06fd : 6a8a ; -- <0069> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 138
    06fe : 5fa0 ; -- <0069> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    06ff : 0741 ; -- <0069> "
    0700 : 6600 ; -- <0070> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    0701 : 6a8c ; -- <0070> ram $ram_transition_func = :leave_run -- av_ad_lo = 140
    0702 : 5fa0 ; -- <0070> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    0703 : 07cd ; -- <0070> "
    0704 : 6600 ; -- <0071> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    0705 : 6a8e ; -- <0071> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 142
    0706 : 5fa0 ; -- <0071> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    0707 : 0709 ; -- <0071> "

    0708 : fc00 ; -- <0073> swapra = nop

-- ######## func destroy_plan_run -- = 0x0709


    0709 : fc00 ; -- <0076> swapra = nop

-- ######## func combine_trim -- = 0x070a
    070a : 3002 ; -- <0117> push i -- func combine_trim
    070b : 3003 ; -- <0117> push j -- "
    070c : 3004 ; -- <0117> push x -- "

-- combine the given increment with the given total trim factor, returning
-- the new total trim.  this process is complicated by the decision to keep the
-- 0.5 offset in the integer representation scheme.  that's done in case i ever
-- have to calculate puff without the aid of a hardware multiplier.
-- the process is to add the offset to each argument, multiply them,
-- undo the offsets, and saturate to prevent excess accumulation.
    070d : 0008 ; -- <0084> a = total
    070e : 07a0 ; -- <0085> b = $trim_unity
    070f : 2000 ; -- <0085> "
    0710 : c800 ; -- <0086> a = a+b
    0711 : 0300 ; -- <0086> "
    0712 : 0809 ; -- <0087> i = increment
    0713 : 0fa0 ; -- <0088> j = $trim_unity
    0714 : 2000 ; -- <0088> "
    0715 : c800 ; -- <0089> b = i+j
    0716 : 0710 ; -- <0089> "
    0717 : c800 ; -- <0090> nop
    0718 : c800 ; -- <0091> nop
    0719 : c800 ; -- <0092> nop
    071a : c800 ; -- <0093> nop
-- total = product / 16384 = product >> 14
-- this cancels the two offsets that were added prior to the mult.
    071b : 1011 ; -- <0096> x = product_hi
    071c : 0010 ; -- <0097> a = product_lo
    071d : 0353 ; -- <0098> a = a>>4
    071e : 0353 ; -- <0099> a = a>>4
    071f : 0353 ; -- <0100> a = a>>4
    0720 : 0350 ; -- <0101> a = a>>1
    0721 : 2350 ; -- <0102> out_total = a>>1
    0722 : 0004 ; -- <0103> a = x
    0723 : 07a0 ; -- <0104> b = 0x3fff
    0724 : 3fff ; -- <0104> "
    0725 : c800 ; -- <0105> a = and
    0726 : 0330 ; -- <0105> "
    0727 : 0351 ; -- <0106> a = a<<1
    0728 : 0351 ; -- <0107> a = a<<1
    0729 : 0408 ; -- <0108> b = out_total
    072a : c800 ; -- <0109> a = or
    072b : 0334 ; -- <0109> "
-- subtract the unity offset to get back to the correct integer representation.
    072c : 07a0 ; -- <0111> b = ([negate $trim_unity])
    072d : e000 ; -- <0111> "
    072e : c800 ; -- <0112> out_total = a+b
    072f : 2300 ; -- <0112> "
-- clamp.

    0730 : 0008 ; -- <0116> a = out_total
    0731 : 07a0 ; -- <0116> b = 24576
    0732 : 6000 ; -- <0116> "

    0733 : e406 ; -- <0114> bn gt :else_1843
    0734 : 0737 ; -- <0114> "

    0735 : 23a0 ; -- <0115> out_total = $trim_double
    0736 : 6000 ; -- <0115> "


    0737 : 100c ; -- <0118> pop x -- func combine_trim
    0738 : 0c0c ; -- <0118> pop j -- "
    0739 : 080c ; -- <0118> pop i -- "
    073a : fc00 ; -- <0118> swapra = nop

-- :tps_accel2_msg -- = 0x073b
-- "tpsa2\x0"
    073b : 7074 ; -- <0120> pt
    073c : 6173 ; -- <0120> as
    073d : 0032 ; -- <0120>  2
-- :tps_open_msg -- = 0x073e
-- "tpsop\x0"
    073e : 7074 ; -- <0122> pt
    073f : 6f73 ; -- <0122> os
    0740 : 0070 ; -- <0122>  p

-- ######## func puff_len_run -- = 0x0741
    0741 : 3004 ; -- <0215> push x -- func puff_len_run
    0742 : 3006 ; -- <0215> push ga -- "
    0743 : 3007 ; -- <0215> push gb -- "
    0744 : 303e ; -- <0215> push rtna -- "

    0745 : 6600 ; -- <0125> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0746 : 6a7e ; -- <0125> ram a = $ram_rpm_valid -- av_ad_lo = 126
    0747 : 0017 ; -- <0125> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0748 : 0018 ; -- <0125> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0749 : 0000 ; -- <0128> a = a
    074a : 0601 ; -- <0128> b = 1

    074b : e007 ; -- <0126> br eq :else_1867
    074c : 074f ; -- <0126> "

    074d : e00f ; -- <0127> jmp :abort
    074e : 07c8 ; -- <0127> "


-- look up Air/Fuel Ratio Correction in AFRC map.
-- index rows by MAF.
    074f : 6600 ; -- <0132> ram a = $ram_afrc_maf_row_idx -- av_ad_hi = 0
    0750 : 6ba0 ; -- <0132> ram a = $ram_afrc_maf_row_idx -- av_ad_lo = 362
    0751 : 016a ; -- <0132> "
    0752 : 0017 ; -- <0132> ram a = $ram_afrc_maf_row_idx -- a = av_write_data -- start read cycle
    0753 : 0018 ; -- <0132> ram a = $ram_afrc_maf_row_idx -- a = av_read_data -- finish read cycle
    0754 : 0610 ; -- <0133> b = $afrc_rpm_cols
    0755 : c800 ; -- <0134> nop
    0756 : c800 ; -- <0135> nop
    0757 : c800 ; -- <0136> nop
    0758 : c800 ; -- <0137> nop
    0759 : 0410 ; -- <0138> b = product_lo
-- index columns by RPM.
    075a : 6600 ; -- <0140> ram a = $ram_afrc_rpm_col_idx -- av_ad_hi = 0
    075b : 6ba0 ; -- <0140> ram a = $ram_afrc_rpm_col_idx -- av_ad_lo = 364
    075c : 016c ; -- <0140> "
    075d : 0017 ; -- <0140> ram a = $ram_afrc_rpm_col_idx -- a = av_write_data -- start read cycle
    075e : 0018 ; -- <0140> ram a = $ram_afrc_rpm_col_idx -- a = av_read_data -- finish read cycle
    075f : c800 ; -- <0141> a = a+b
    0760 : 0300 ; -- <0141> "

    0761 : 0351 ; -- <0142> a = a<<1
    0762 : 0600 ; -- <0142> b = 0
    0763 : 67a0 ; -- <0142> av_ad_hi = 256
    0764 : 0100 ; -- <0142> "
    0765 : 6b00 ; -- <0142> av_ad_lo = ad0
    0766 : 0417 ; -- <0142> b = av_write_data
    0767 : 0418 ; -- <0142> b = av_read_data

    0768 : 1801 ; -- <0143> ga = b
-- now ga = total trim factor as integer.

-- apply block temperature trim factor.
    0769 : 6600 ; -- <0147> ram b = $ram_block_temp_trim -- av_ad_hi = 0
    076a : 6ba0 ; -- <0147> ram b = $ram_block_temp_trim -- av_ad_lo = 368
    076b : 0170 ; -- <0147> "
    076c : 0417 ; -- <0147> ram b = $ram_block_temp_trim -- b = av_write_data -- start read cycle
    076d : 0418 ; -- <0147> ram b = $ram_block_temp_trim -- b = av_read_data -- finish read cycle
    076e : 2006 ; -- <0148> pa = ga
    076f : 2401 ; -- <0148> pb = b
    0770 : fba0 ; -- <0148> callx combine_trim ga b ga
    0771 : 070a ; -- <0148> "
    0772 : fc00 ; -- <0148> "
    0773 : 1808 ; -- <0148> ga = pa

-- apply afterstart trim factor.
    0774 : 6600 ; -- <0151> ram b = $ram_afterstart_trim -- av_ad_hi = 0
    0775 : 6ba0 ; -- <0151> ram b = $ram_afterstart_trim -- av_ad_lo = 372
    0776 : 0174 ; -- <0151> "
    0777 : 0417 ; -- <0151> ram b = $ram_afterstart_trim -- b = av_write_data -- start read cycle
    0778 : 0418 ; -- <0151> ram b = $ram_afterstart_trim -- b = av_read_data -- finish read cycle
    0779 : 2006 ; -- <0152> pa = ga
    077a : 2401 ; -- <0152> pb = b
    077b : fba0 ; -- <0152> callx combine_trim ga b ga
    077c : 070a ; -- <0152> "
    077d : fc00 ; -- <0152> "
    077e : 1808 ; -- <0152> ga = pa

-- apply stoich learning trim factor.
    077f : 6600 ; -- <0155> ram b = $ram_stoich_learn_trim -- av_ad_hi = 0
    0780 : 6ba0 ; -- <0155> ram b = $ram_stoich_learn_trim -- av_ad_lo = 374
    0781 : 0176 ; -- <0155> "
    0782 : 0417 ; -- <0155> ram b = $ram_stoich_learn_trim -- b = av_write_data -- start read cycle
    0783 : 0418 ; -- <0155> ram b = $ram_stoich_learn_trim -- b = av_read_data -- finish read cycle
    0784 : 2006 ; -- <0156> pa = ga
    0785 : 2401 ; -- <0156> pb = b
    0786 : fba0 ; -- <0156> callx combine_trim ga b ga
    0787 : 070a ; -- <0156> "
    0788 : fc00 ; -- <0156> "
    0789 : 1808 ; -- <0156> ga = pa

-- apply manual trim factor.
    078a : 6600 ; -- <0159> ram b = $ram_run_manual_trim -- av_ad_hi = 0
    078b : 6ba0 ; -- <0159> ram b = $ram_run_manual_trim -- av_ad_lo = 376
    078c : 0178 ; -- <0159> "
    078d : 0417 ; -- <0159> ram b = $ram_run_manual_trim -- b = av_write_data -- start read cycle
    078e : 0418 ; -- <0159> ram b = $ram_run_manual_trim -- b = av_read_data -- finish read cycle
    078f : 2006 ; -- <0160> pa = ga
    0790 : 2401 ; -- <0160> pb = b
    0791 : fba0 ; -- <0160> callx combine_trim ga b ga
    0792 : 070a ; -- <0160> "
    0793 : fc00 ; -- <0160> "
    0794 : 1808 ; -- <0160> ga = pa

-- final multiplication for puff length.
-- (MAF linear flow) * (stoich ratio constant) * (total trim as floating point) = (puff length jf).
-- here the total trim float will have to be represented as a fraction (num/denom).
-- stoich ratio constant (8) (really the conversion factor from linear
-- flow to nominal jf)  is folded into that denominator (16384) at compile time.
-- that makes denom = 2048 = 11 bits.  so:
-- gb = (puff len jf) = (MAF linear flow) * [(total trim) + trim_unity] >> 11
    0795 : 0006 ; -- <0169> a = ga
    0796 : 07a0 ; -- <0170> b = $trim_unity
    0797 : 2000 ; -- <0170> "
    0798 : c800 ; -- <0171> a = a+b
    0799 : 0300 ; -- <0171> "
    079a : 6600 ; -- <0172> ram b = $ram_maf_flow_hi_res -- av_ad_hi = 0
    079b : 6ba0 ; -- <0172> ram b = $ram_maf_flow_hi_res -- av_ad_lo = 360
    079c : 0168 ; -- <0172> "
    079d : 0417 ; -- <0172> ram b = $ram_maf_flow_hi_res -- b = av_write_data -- start read cycle
    079e : 0418 ; -- <0172> ram b = $ram_maf_flow_hi_res -- b = av_read_data -- finish read cycle
    079f : c800 ; -- <0173> nop
    07a0 : c800 ; -- <0174> nop
    07a1 : c800 ; -- <0175> nop
    07a2 : c800 ; -- <0176> nop
-- gb = 32-bit product shifted >> 11.  lower 11 bits of product_hi are
-- explicitly moved to upper 11 bits of gb.
    07a3 : 0010 ; -- <0179> a = product_lo
    07a4 : 0411 ; -- <0180> b = product_hi
    07a5 : 0353 ; -- <0181> a = a>>4
    07a6 : 0353 ; -- <0182> a = a>>4
    07a7 : 0350 ; -- <0183> a = a>>1
    07a8 : 0350 ; -- <0184> a = a>>1
    07a9 : 1f50 ; -- <0185> gb = a>>1
    07aa : 0001 ; -- <0186> a = b
    07ab : 0352 ; -- <0187> a = a<<4
    07ac : 0351 ; -- <0188> a = a<<1
    07ad : 0407 ; -- <0189> b = gb
    07ae : c800 ; -- <0190> gb = or
    07af : 1f34 ; -- <0190> "

-- clamp the (puff length jf) to sane range.
-- max is the floating duty cycle.  7/8 of puff cycle, or 87.5%.
    07b0 : 6600 ; -- <0194> ram a = $ram_ign_avg_jf -- av_ad_hi = 0
    07b1 : 6a7a ; -- <0194> ram a = $ram_ign_avg_jf -- av_ad_lo = 122
    07b2 : 0017 ; -- <0194> ram a = $ram_ign_avg_jf -- a = av_write_data -- start read cycle
    07b3 : 0018 ; -- <0194> ram a = $ram_ign_avg_jf -- a = av_read_data -- finish read cycle
    07b4 : 0350 ; -- <0195> a = a>>1
    07b5 : 0350 ; -- <0196> a = a>>1
    07b6 : 0350 ; -- <0197> a = a>>1
    07b7 : 0760 ; -- <0198> b = 0xffff
    07b8 : c800 ; -- <0199> a = xor
    07b9 : 0338 ; -- <0199> "
    07ba : 6600 ; -- <0200> ram b = $ram_ign_avg_jf -- av_ad_hi = 0
    07bb : 6a7a ; -- <0200> ram b = $ram_ign_avg_jf -- av_ad_lo = 122
    07bc : 0417 ; -- <0200> ram b = $ram_ign_avg_jf -- b = av_write_data -- start read cycle
    07bd : 0418 ; -- <0200> ram b = $ram_ign_avg_jf -- b = av_read_data -- finish read cycle
    07be : c800 ; -- <0201> x = a+b
    07bf : 1300 ; -- <0201> "

    07c0 : 0007 ; -- <0204> a = gb
    07c1 : 0404 ; -- <0204> b = x

    07c2 : e406 ; -- <0202> bn gt :else_1986
    07c3 : 07c5 ; -- <0202> "

    07c4 : 1c04 ; -- <0203> gb = x

-- min is the safety amount to keep motor running and maybe prevent leaning damage.
--patch: don't know a proper minimum.

-- shut off puff during closed throttle engine braking.
--patch: not implemented.

-- memorize total puff.
    07c5 : 6600 ; -- <0212> ram $ram_next_puff_len_us = ga -- av_ad_hi = 0
    07c6 : 6a90 ; -- <0212> ram $ram_next_puff_len_us = ga -- av_ad_lo = 144
    07c7 : 5c06 ; -- <0212> ram $ram_next_puff_len_us = ga -- av_write_data = ga

-- :abort -- = 0x07c8

    07c8 : f80c ; -- <0216> pop rtna -- func puff_len_run
    07c9 : 1c0c ; -- <0216> pop gb -- "
    07ca : 180c ; -- <0216> pop ga -- "
    07cb : 100c ; -- <0216> pop x -- "
    07cc : fc00 ; -- <0216> swapra = nop

-- ######## func leave_run -- = 0x07cd
    07cd : 303e ; -- <0219> push rtna -- func leave_run

    07ce : fba0 ; -- <0218> callx  check_engine_stop  pa
    07cf : 0d71 ; -- <0218> "
    07d0 : fc00 ; -- <0218> "

    07d1 : f80c ; -- <0220> pop rtna -- func leave_run
    07d2 : fc00 ; -- <0220> swapra = nop

-- ######## func interpret_block_temp -- = 0x07d3
    07d3 : 3002 ; -- <0238> push i -- func interpret_block_temp
    07d4 : 3007 ; -- <0238> push gb -- "

-- look up block temperature map trim factor.
    07d5 : 0202 ; -- <0223> a = $anmux_engine_block_temp

    07d6 : 0351 ; -- <0224> a = a<<1
    07d7 : 0616 ; -- <0224> b = 22
    07d8 : 6600 ; -- <0224> av_ad_hi = 0
    07d9 : 6b00 ; -- <0224> av_ad_lo = ad0
    07da : 0417 ; -- <0224> b = av_write_data
    07db : 0418 ; -- <0224> b = av_read_data

    07dc : 1c01 ; -- <0225> gb = b
    07dd : 0a00 ; -- <0236> i = 0
-- :loop_2013 -- = 0x07de

    07de : 0002 ; -- <0226> a = i

    07df : 0351 ; -- <0227> a = a<<1
    07e0 : 07a0 ; -- <0227> b = 2592
    07e1 : 0a20 ; -- <0227> "
    07e2 : 67a0 ; -- <0227> av_ad_hi = 256
    07e3 : 0100 ; -- <0227> "
    07e4 : 6b00 ; -- <0227> av_ad_lo = ad0
    07e5 : 0417 ; -- <0227> b = av_write_data
    07e6 : 0418 ; -- <0227> b = av_read_data


    07e7 : 0001 ; -- <0234> a = b
    07e8 : 0407 ; -- <0234> b = gb

    07e9 : e406 ; -- <0228> bn gt :else_2025
    07ea : 07fe ; -- <0228> "

    07eb : 6600 ; -- <0229> ram $ram_block_temp_map_idx = i -- av_ad_hi = 0
    07ec : 6ba0 ; -- <0229> ram $ram_block_temp_map_idx = i -- av_ad_lo = 366
    07ed : 016e ; -- <0229> "
    07ee : 5c02 ; -- <0229> ram $ram_block_temp_map_idx = i -- av_write_data = i
    07ef : 0002 ; -- <0230> a = i

    07f0 : 0351 ; -- <0231> a = a<<1
    07f1 : 07a0 ; -- <0231> b = 2720
    07f2 : 0aa0 ; -- <0231> "
    07f3 : 67a0 ; -- <0231> av_ad_hi = 256
    07f4 : 0100 ; -- <0231> "
    07f5 : 6b00 ; -- <0231> av_ad_lo = ad0
    07f6 : 0417 ; -- <0231> b = av_write_data
    07f7 : 0418 ; -- <0231> b = av_read_data

    07f8 : 6600 ; -- <0232> ram $ram_block_temp_trim = b -- av_ad_hi = 0
    07f9 : 6ba0 ; -- <0232> ram $ram_block_temp_trim = b -- av_ad_lo = 368
    07fa : 0170 ; -- <0232> "
    07fb : 5c01 ; -- <0232> ram $ram_block_temp_trim = b -- av_write_data = b
    07fc : e00f ; -- <0233> jmp :temp_done
    07fd : 0806 ; -- <0233> "



    07fe : 0002 ; -- <0236> a = i
    07ff : 0601 ; -- <0236> b = 1
    0800 : c800 ; -- <0236> i = a+b
    0801 : 0b00 ; -- <0236> "


    0802 : 0002 ; -- <0236> a = i
    0803 : 0640 ; -- <0236> b = $block_temp_num_cells
    0804 : e005 ; -- <0236> br lt :loop_2013
    0805 : 07de ; -- <0236> "

-- :end_2013 -- = 0x0806
-- :temp_done -- = 0x0806

    0806 : 1c0c ; -- <0239> pop gb -- func interpret_block_temp
    0807 : 080c ; -- <0239> pop i -- "
    0808 : fc00 ; -- <0239> swapra = nop


-- #########################################################################
-- :main -- = 0x0809
    0809 : 03a0 ; -- <0222> a = :boot_msg
    080a : 009b ; -- <0222> "
    080b : fba0 ; -- <0223> call :print_nt
    080c : 015f ; -- <0223> "
    080d : fc00 ; -- <0223> "

-- clear the first 64k of RAM.
    080e : 6600 ; -- <0226> av_ad_hi = 0
    080f : fba0 ; -- <0226> callx  clear_ram_page  0
    0810 : 0beb ; -- <0226> "
    0811 : fc00 ; -- <0226> "

    0812 : fba0 ; -- <0228> callx  init_data_rom
    0813 : 022d ; -- <0228> "
    0814 : fc00 ; -- <0228> "

-- init fuel injection.
    0815 : fba0 ; -- <0231> callx  init_plan_stop
    0816 : 0344 ; -- <0231> "
    0817 : fc00 ; -- <0231> "
    0818 : 0a00 ; -- <0236> i = 0
-- :loop_2072 -- = 0x0819

    0819 : 0002 ; -- <0232> a = i
    081a : 07a0 ; -- <0233> b = 0x1194
    081b : 1194 ; -- <0233> "

    081c : 0351 ; -- <0234> a = a<<1
    081d : 3001 ; -- <0234> push b -- push b
    081e : 0698 ; -- <0234> b = 152
    081f : 6600 ; -- <0234> av_ad_hi = 0
    0820 : 6b00 ; -- <0234> av_ad_lo = ad0
    0821 : 5c0c ; -- <0234> pop av_write_data -- pop av_write_data



    0822 : 0002 ; -- <0236> a = i
    0823 : 0601 ; -- <0236> b = 1
    0824 : c800 ; -- <0236> i = a+b
    0825 : 0b00 ; -- <0236> "


    0826 : 0002 ; -- <0236> a = i
    0827 : 060d ; -- <0236> b = $num_rpm_cells
    0828 : e005 ; -- <0236> br lt :loop_2072
    0829 : 0819 ; -- <0236> "

-- :end_2072 -- = 0x082a
    082a : 0a00 ; -- <0252> i = 0
-- :loop_2090 -- = 0x082b

    082b : 0002 ; -- <0237> a = i
    082c : 07a0 ; -- <0238> b = :default_tps_reference
    082d : 047a ; -- <0238> "
    082e : c800 ; -- <0239> fetch b from a+b
    082f : d300 ; -- <0239> "
    0830 : 07b0 ; -- <0239> "
    0831 : 0002 ; -- <0240> a = i

    0832 : 0351 ; -- <0241> a = a<<1
    0833 : 3001 ; -- <0241> push b -- push b
    0834 : 06b4 ; -- <0241> b = 180
    0835 : 6600 ; -- <0241> av_ad_hi = 0
    0836 : 6b00 ; -- <0241> av_ad_lo = ad0
    0837 : 5c0c ; -- <0241> pop av_write_data -- pop av_write_data

    0838 : 0002 ; -- <0242> a = i
    0839 : 07a0 ; -- <0243> b = 0x2000
    083a : 2000 ; -- <0243> "

    083b : 0351 ; -- <0244> a = a<<1
    083c : 3001 ; -- <0244> push b -- push b
    083d : 07a0 ; -- <0244> b = 260
    083e : 0104 ; -- <0244> "
    083f : 6600 ; -- <0244> av_ad_hi = 0
    0840 : 6b00 ; -- <0244> av_ad_lo = ad0
    0841 : 5c0c ; -- <0244> pop av_write_data -- pop av_write_data

    0842 : 0002 ; -- <0245> a = i
    0843 : 07a0 ; -- <0246> b = 0x4000
    0844 : 4000 ; -- <0246> "

    0845 : 0351 ; -- <0247> a = a<<1
    0846 : 3001 ; -- <0247> push b -- push b
    0847 : 07a0 ; -- <0247> b = 286
    0848 : 011e ; -- <0247> "
    0849 : 6600 ; -- <0247> av_ad_hi = 0
    084a : 6b00 ; -- <0247> av_ad_lo = ad0
    084b : 5c0c ; -- <0247> pop av_write_data -- pop av_write_data

    084c : 0002 ; -- <0248> a = i
    084d : 07a0 ; -- <0249> b = 0x8000
    084e : 8000 ; -- <0249> "

    084f : 0351 ; -- <0250> a = a<<1
    0850 : 3001 ; -- <0250> push b -- push b
    0851 : 07a0 ; -- <0250> b = 312
    0852 : 0138 ; -- <0250> "
    0853 : 6600 ; -- <0250> av_ad_hi = 0
    0854 : 6b00 ; -- <0250> av_ad_lo = ad0
    0855 : 5c0c ; -- <0250> pop av_write_data -- pop av_write_data



    0856 : 0002 ; -- <0252> a = i
    0857 : 0601 ; -- <0252> b = 1
    0858 : c800 ; -- <0252> i = a+b
    0859 : 0b00 ; -- <0252> "


    085a : 0002 ; -- <0252> a = i
    085b : 060d ; -- <0252> b = $num_tps_cells
    085c : e005 ; -- <0252> br lt :loop_2090
    085d : 082b ; -- <0252> "

-- :end_2090 -- = 0x085e

-- power up FTDI USB board, and init any other special board control functions.
    085e : 8280 ; -- <0255> board_ctrl = $ftdi_power_mask
    085f : fba0 ; -- <0256> callx postpone_comm_restart
    0860 : 0bc2 ; -- <0256> "
    0861 : fc00 ; -- <0256> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    0862 : 8a00 ; -- <0263> power_duty = $power_duty_closing

    0863 : 0022 ; -- <0267> a = power_duty
    0864 : 06c0 ; -- <0267> b = ( $power_lost_mask | $ign_switch_off_mask )

    0865 : e003 ; -- <0264> br and0z :else_2149
    0866 : 086c ; -- <0264> "

    0867 : 8a32 ; -- <0265> power_duty = $power_duty_opening
    0868 : 7fa0 ; -- <0266> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    0869 : fffb ; -- <0266> "
    086a : e00f ; -- <0266> error_halt_code $err_power_lost_at_boot
    086b : 086a ; -- <0266> "

    086c : 6600 ; -- <0268> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    086d : 6a3c ; -- <0268> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 60
    086e : 5f60 ; -- <0268> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    086f : 6600 ; -- <0269> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    0870 : 6a3e ; -- <0269> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 62
    0871 : 5e02 ; -- <0269> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    0872 : 3ba0 ; -- <0272> soft_event = $event_controller_reset_mask
    0873 : 8000 ; -- <0272> "
    0874 : 3a00 ; -- <0273> soft_event = 0
    0875 : 4fa0 ; -- <0274> mstimer0 = 1000
    0876 : 03e8 ; -- <0274> "
    0877 : 5614 ; -- <0275> mstimer2 = $plan_tick_ms
    0878 : e00f ; -- <0276> jmp :poll_events
    0879 : 009e ; -- <0276> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x087a
    087a : 009e ; -- <0281> ([label :poll_events])
    087b : 0b1d ; -- <0282> ([label :power_lost_handler])
    087c : 088f ; -- <0283> ([label :ign_capture_handler])
    087d : 0932 ; -- <0284> ([label :ign_capture_timeout_handler])
    087e : 0b51 ; -- <0285> ([label :puff1_done_handler])
    087f : 0937 ; -- <0286> ([label :ustimer0_handler])
    0880 : 0a98 ; -- <0287> ([label :spi_done_handler])
    0881 : 0939 ; -- <0288> ([label :mstimer0_handler])
    0882 : 0a64 ; -- <0289> ([label :mstimer1_handler])
    0883 : 0968 ; -- <0290> ([label :mstimer2_handler])
    0884 : 0994 ; -- <0291> ([label :uart_rx_handler])
    0885 : 09ad ; -- <0292> ([label :uart_rx_overflow_handler])
    0886 : 09b5 ; -- <0293> ([label :uart_tx_overflow_handler])
    0887 : 09bc ; -- <0294> ([label :key0_handler])
    0888 : 09c6 ; -- <0295> ([label :key1_handler])
    0889 : 0b34 ; -- <0296> ([label :ign_switch_off_handler])
    088a : 0b47 ; -- <0297> ([label :ign_switch_on_handler])
    088b : 09d0 ; -- <0298> ([label :softevent3_handler])
    088c : 09d2 ; -- <0299> ([label :softevent2_handler])
    088d : 09d4 ; -- <0300> ([label :softevent1_handler])
    088e : 09d6 ; -- <0301> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x088f
-- discard outlier time.
    088f : 1823 ; -- <0307> g6 = ign_capture_jf
    0890 : 6600 ; -- <0308> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    0891 : 6a82 ; -- <0308> ram b = $ram_ign_fastest_jf -- av_ad_lo = 130
    0892 : 0417 ; -- <0308> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    0893 : 0418 ; -- <0308> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle

    0894 : 0006 ; -- <0311> a = g6
    0895 : 0401 ; -- <0311> b = b

    0896 : e405 ; -- <0309> bn lt :else_2198
    0897 : 0899 ; -- <0309> "

    0898 : 1a00 ; -- <0310> g6 = 0

    0899 : 6600 ; -- <0312> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    089a : 6a84 ; -- <0312> ram b = $ram_ign_slowest_jf -- av_ad_lo = 132
    089b : 0417 ; -- <0312> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    089c : 0418 ; -- <0312> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle

    089d : 0006 ; -- <0315> a = g6
    089e : 0401 ; -- <0315> b = b

    089f : e406 ; -- <0313> bn gt :else_2207
    08a0 : 08a2 ; -- <0313> "

    08a1 : 1a00 ; -- <0314> g6 = 0


-- increment buffer index and memorize time.
    08a2 : 6600 ; -- <0318> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    08a3 : 6a58 ; -- <0318> ram a = $ram_ign_history_idx -- av_ad_lo = 88
    08a4 : 0017 ; -- <0318> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    08a5 : 0018 ; -- <0318> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    08a6 : 0601 ; -- <0319> b = 1
    08a7 : c800 ; -- <0320> a = a+b
    08a8 : 0300 ; -- <0320> "
    08a9 : 060f ; -- <0321> b = $ign_history_idx_mask
    08aa : c800 ; -- <0322> a = and
    08ab : 0330 ; -- <0322> "
    08ac : 6600 ; -- <0323> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    08ad : 6a58 ; -- <0323> ram $ram_ign_history_idx = a -- av_ad_lo = 88
    08ae : 5c00 ; -- <0323> ram $ram_ign_history_idx = a -- av_write_data = a
    08af : 0406 ; -- <0324> b = g6

    08b0 : 0351 ; -- <0325> a = a<<1
    08b1 : 3001 ; -- <0325> push b -- push b
    08b2 : 065a ; -- <0325> b = 90
    08b3 : 6600 ; -- <0325> av_ad_hi = 0
    08b4 : 6b00 ; -- <0325> av_ad_lo = ad0
    08b5 : 5c0c ; -- <0325> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, y = sample, i = index = loop count, g6 = count of invalid samples.
    08b6 : 1200 ; -- <0330> x = 0
    08b7 : 1a00 ; -- <0331> g6 = 0
    08b8 : 0a00 ; -- <0347> i = 0
-- :loop_2232 -- = 0x08b9

    08b9 : 0002 ; -- <0332> a = i

    08ba : 0351 ; -- <0333> a = a<<1
    08bb : 065a ; -- <0333> b = 90
    08bc : 6600 ; -- <0333> av_ad_hi = 0
    08bd : 6b00 ; -- <0333> av_ad_lo = ad0
    08be : 0417 ; -- <0333> b = av_write_data
    08bf : 0418 ; -- <0333> b = av_read_data

    08c0 : 1401 ; -- <0334> y = b

    08c1 : 0005 ; -- <0345> a = y
    08c2 : 0600 ; -- <0345> b = 0

    08c3 : e407 ; -- <0335> bn eq :else_2243
    08c4 : 08cb ; -- <0335> "

    08c5 : 0006 ; -- <0336> a = g6
    08c6 : 0601 ; -- <0337> b = 1
    08c7 : c800 ; -- <0338> g6 = a+b
    08c8 : 1b00 ; -- <0338> "

    08c9 : e00f ; -- <0340> jmp :end_2243
    08ca : 08d2 ; -- <0340> "

    08cb : 0208 ; -- <0341> a = ($ign_history_len / 2)
    08cc : 0405 ; -- <0342> b = y
    08cd : c800 ; -- <0343> a = a+b
    08ce : 0300 ; -- <0343> "
    08cf : 1753 ; -- <0344> y = a>>$ign_history_idx_bits
    08d0 : c800 ; -- <0345> x = x+y
    08d1 : 1320 ; -- <0345> "



    08d2 : 0002 ; -- <0347> a = i
    08d3 : 0601 ; -- <0347> b = 1
    08d4 : c800 ; -- <0347> i = a+b
    08d5 : 0b00 ; -- <0347> "


    08d6 : 0002 ; -- <0347> a = i
    08d7 : 0610 ; -- <0347> b = $ign_history_len
    08d8 : e005 ; -- <0347> br lt :loop_2232
    08d9 : 08b9 ; -- <0347> "

-- :end_2232 -- = 0x08da
    08da : 6600 ; -- <0348> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    08db : 6a7a ; -- <0348> ram $ram_ign_avg_jf = x -- av_ad_lo = 122
    08dc : 5c04 ; -- <0348> ram $ram_ign_avg_jf = x -- av_write_data = x
    08dd : 6600 ; -- <0349> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    08de : 6a80 ; -- <0349> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 128
    08df : 5c06 ; -- <0349> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.


    08e0 : 0006 ; -- <0378> a = g6
    08e1 : 0604 ; -- <0378> b = ( $ign_history_len / 4 )

    08e2 : e406 ; -- <0358> bn gt :else_2274
    08e3 : 08e9 ; -- <0358> "

    08e4 : 6600 ; -- <0359> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    08e5 : 6a7e ; -- <0359> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    08e6 : 5e00 ; -- <0359> ram $ram_rpm_valid = 0 -- av_write_data = 0

    08e7 : e00f ; -- <0361> jmp :end_2274
    08e8 : 0916 ; -- <0361> "

-- convert jiffies b to new RPM estimate.
    08e9 : 2004 ; -- <0363> pa = x
    08ea : fba0 ; -- <0363> callx  jf_to_rpm  x  pa
    08eb : 0d65 ; -- <0363> "
    08ec : fc00 ; -- <0363> "
    08ed : 6600 ; -- <0364> ram $ram_avg_rpm = pa -- av_ad_hi = 0
    08ee : 6a7c ; -- <0364> ram $ram_avg_rpm = pa -- av_ad_lo = 124
    08ef : 5c08 ; -- <0364> ram $ram_avg_rpm = pa -- av_write_data = pa
    08f0 : 6600 ; -- <0365> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    08f1 : 6a7e ; -- <0365> ram $ram_rpm_valid = 1 -- av_ad_lo = 126
    08f2 : 5e01 ; -- <0365> ram $ram_rpm_valid = 1 -- av_write_data = 1

-- find RPM column in AFRC map.
    08f3 : 6600 ; -- <0368> ram gb = $ram_avg_rpm -- av_ad_hi = 0
    08f4 : 6a7c ; -- <0368> ram gb = $ram_avg_rpm -- av_ad_lo = 124
    08f5 : 1c17 ; -- <0368> ram gb = $ram_avg_rpm -- gb = av_write_data -- start read cycle
    08f6 : 1c18 ; -- <0368> ram gb = $ram_avg_rpm -- gb = av_read_data -- finish read cycle
    08f7 : 0a00 ; -- <0376> i = 0
-- :loop_2295 -- = 0x08f8

    08f8 : 0002 ; -- <0369> a = i

    08f9 : 0351 ; -- <0370> a = a<<1
    08fa : 07a0 ; -- <0370> b = 2560
    08fb : 0a00 ; -- <0370> "
    08fc : 67a0 ; -- <0370> av_ad_hi = 256
    08fd : 0100 ; -- <0370> "
    08fe : 6b00 ; -- <0370> av_ad_lo = ad0
    08ff : 0417 ; -- <0370> b = av_write_data
    0900 : 0418 ; -- <0370> b = av_read_data


    0901 : 0001 ; -- <0374> a = b
    0902 : 0407 ; -- <0374> b = gb

    0903 : e406 ; -- <0371> bn gt :else_2307
    0904 : 090b ; -- <0371> "

    0905 : 6600 ; -- <0372> ram $ram_afrc_rpm_col_idx = i -- av_ad_hi = 0
    0906 : 6ba0 ; -- <0372> ram $ram_afrc_rpm_col_idx = i -- av_ad_lo = 364
    0907 : 016c ; -- <0372> "
    0908 : 5c02 ; -- <0372> ram $ram_afrc_rpm_col_idx = i -- av_write_data = i
    0909 : e00f ; -- <0373> jmp :rpm_found
    090a : 0916 ; -- <0373> "



    090b : 0002 ; -- <0376> a = i
    090c : 0601 ; -- <0376> b = 1
    090d : c800 ; -- <0376> i = a+b
    090e : 0b00 ; -- <0376> "


    090f : 0002 ; -- <0376> a = i
    0910 : 0610 ; -- <0376> b = $rpm_map_num_cells
    0911 : e005 ; -- <0376> br lt :loop_2295
    0912 : 08f8 ; -- <0376> "

-- :end_2295 -- = 0x0913
    0913 : 6600 ; -- <0377> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    0914 : 6a7e ; -- <0377> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    0915 : 5e00 ; -- <0377> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- :rpm_found -- = 0x0916

    0916 : e00f ; -- <0379> end_event
    0917 : 009e ; -- <0379> "

-- ######## func clear_ign_history -- = 0x0918
    0918 : 3002 ; -- <0392> push i -- func clear_ign_history

-- invalidate the RPM estimate.
    0919 : 6600 ; -- <0383> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    091a : 6a7e ; -- <0383> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    091b : 5e00 ; -- <0383> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    091c : 6600 ; -- <0386> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    091d : 6a80 ; -- <0386> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 128
    091e : 5e10 ; -- <0386> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    091f : 0a00 ; -- <0391> i = 0
-- :loop_2335 -- = 0x0920

    0920 : 0002 ; -- <0387> a = i
    0921 : 0600 ; -- <0388> b = 0

    0922 : 0351 ; -- <0389> a = a<<1
    0923 : 3001 ; -- <0389> push b -- push b
    0924 : 065a ; -- <0389> b = 90
    0925 : 6600 ; -- <0389> av_ad_hi = 0
    0926 : 6b00 ; -- <0389> av_ad_lo = ad0
    0927 : 5c0c ; -- <0389> pop av_write_data -- pop av_write_data



    0928 : 0002 ; -- <0391> a = i
    0929 : 0601 ; -- <0391> b = 1
    092a : c800 ; -- <0391> i = a+b
    092b : 0b00 ; -- <0391> "


    092c : 0002 ; -- <0391> a = i
    092d : 0610 ; -- <0391> b = $ign_history_len
    092e : e005 ; -- <0391> br lt :loop_2335
    092f : 0920 ; -- <0391> "

-- :end_2335 -- = 0x0930

    0930 : 080c ; -- <0393> pop i -- func clear_ign_history
    0931 : fc00 ; -- <0393> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x0932
-- it's been too long since the last ignition pulse detect.
    0932 : fba0 ; -- <0396> callx clear_ign_history
    0933 : 0918 ; -- <0396> "
    0934 : fc00 ; -- <0396> "
    0935 : e00f ; -- <0397> end_event
    0936 : 009e ; -- <0397> "

-- ######## event ustimer0_handler -- = 0x0937
    0937 : e00f ; -- <0400> end_event
    0938 : 009e ; -- <0400> "

-- ######## event mstimer0_handler -- = 0x0939
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    0939 : 4fa0 ; -- <0406> mstimer0 = 1000
    093a : 03e8 ; -- <0406> "

-- realtime counters in RAM.
    093b : 6600 ; -- <0409> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    093c : 6a42 ; -- <0409> ram a = $ram_seconds_cnt -- av_ad_lo = 66
    093d : 0017 ; -- <0409> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    093e : 0018 ; -- <0409> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    093f : 0601 ; -- <0410> b = 1
    0940 : c800 ; -- <0411> a = a+b
    0941 : 0300 ; -- <0411> "

    0942 : 0000 ; -- <0420> a = a
    0943 : 063c ; -- <0420> b = 60

    0944 : e407 ; -- <0412> bn eq :else_2372
    0945 : 0957 ; -- <0412> "

    0946 : 6600 ; -- <0413> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    0947 : 6a42 ; -- <0413> ram $ram_seconds_cnt = 0 -- av_ad_lo = 66
    0948 : 5e00 ; -- <0413> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    0949 : 6600 ; -- <0414> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    094a : 6a40 ; -- <0414> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    094b : 0017 ; -- <0414> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    094c : 0018 ; -- <0414> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    094d : 0601 ; -- <0415> b = 1
    094e : 6600 ; -- <0416> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    094f : 6a40 ; -- <0416> ram $ram_minutes_cnt = a+b -- av_ad_lo = 64
    0950 : c800 ; -- <0416> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    0951 : 5f00 ; -- <0416> "
    0952 : fba0 ; -- <0417> callx minute_events
    0953 : 0b60 ; -- <0417> "
    0954 : fc00 ; -- <0417> "

    0955 : e00f ; -- <0419> jmp :end_2372
    0956 : 095a ; -- <0419> "

    0957 : 6600 ; -- <0420> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    0958 : 6a42 ; -- <0420> ram $ram_seconds_cnt = a -- av_ad_lo = 66
    0959 : 5c00 ; -- <0420> ram $ram_seconds_cnt = a -- av_write_data = a


-- all 1-second functions here.
    095a : fba0 ; -- <0423> callx check_power_relay
    095b : 0b68 ; -- <0423> "
    095c : fc00 ; -- <0423> "
    095d : fba0 ; -- <0424> callx check_communication
    095e : 0b95 ; -- <0424> "
    095f : fc00 ; -- <0424> "
    0960 : fba0 ; -- <0425> callx start_daq_pass
    0961 : 09e5 ; -- <0425> "
    0962 : fc00 ; -- <0425> "
    0963 : e00f ; -- <0426> end_event
    0964 : 009e ; -- <0426> "

-- :plan_transition_msg -- = 0x0965
-- "PLAN\x0"
    0965 : 4c50 ; -- <0429> LP
    0966 : 4e41 ; -- <0429> NA
    0967 : 0000 ; -- <0429>   

-- ######## event mstimer2_handler -- = 0x0968
-- engine management plan tick timer.

-- restart timer.
    0968 : 5614 ; -- <0435> mstimer2 = $plan_tick_ms

-- start another TPS reading prior to every plan tick.
-- this will also invoke a o2 reading.  that's done last of all prior to plan_tick,
-- so there's minimal latency between that and the plan_tick utilizing it.
    0969 : 6600 ; -- <0440> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    096a : 6a36 ; -- <0440> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    096b : 0017 ; -- <0440> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    096c : 0018 ; -- <0440> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    096d : 0000 ; -- <0443> a = a
    096e : 0600 ; -- <0443> b = 0

    096f : e407 ; -- <0441> bn eq :else_2415
    0970 : 0975 ; -- <0441> "

    0971 : 2206 ; -- <0442> pa = 6
    0972 : fba0 ; -- <0442> callx  begin_adc_conversion  $tps_adc_channel
    0973 : 0a8a ; -- <0442> "
    0974 : fc00 ; -- <0442> "

    0975 : e00f ; -- <0444> end_event
    0976 : 009e ; -- <0444> "

-- ######## func plan_tick -- = 0x0977
    0977 : 3004 ; -- <0461> push x -- func plan_tick
    0978 : 303e ; -- <0461> push rtna -- "

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    0979 : 6600 ; -- <0450> ram rtna = $ram_transition_func -- av_ad_hi = 0
    097a : 6a8c ; -- <0450> ram rtna = $ram_transition_func -- av_ad_lo = 140
    097b : f817 ; -- <0450> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    097c : f818 ; -- <0450> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    097d : 103e ; -- <0451> x = rtna
    097e : fc00 ; -- <0452> swapra = nop
    097f : 6600 ; -- <0454> ram b = $ram_transition_func -- av_ad_hi = 0
    0980 : 6a8c ; -- <0454> ram b = $ram_transition_func -- av_ad_lo = 140
    0981 : 0417 ; -- <0454> ram b = $ram_transition_func -- b = av_write_data -- start read cycle
    0982 : 0418 ; -- <0454> ram b = $ram_transition_func -- b = av_read_data -- finish read cycle

    0983 : 0004 ; -- <0457> a = x
    0984 : 0401 ; -- <0457> b = b

    0985 : e007 ; -- <0455> br eq :else_2437
    0986 : 098c ; -- <0455> "

    0987 : 23a0 ; -- <0456> pa = :plan_transition_msg
    0988 : 0965 ; -- <0456> "
    0989 : fba0 ; -- <0456> callx  set_text_flag  :plan_transition_msg
    098a : 0bf3 ; -- <0456> "
    098b : fc00 ; -- <0456> "

-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    098c : 6600 ; -- <0460> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    098d : 6a8a ; -- <0460> ram rtna = $ram_puff_len_func -- av_ad_lo = 138
    098e : f817 ; -- <0460> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    098f : f818 ; -- <0460> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    0990 : fc00 ; -- <0461> swapra = nop

    0991 : f80c ; -- <0464> pop rtna -- func plan_tick
    0992 : 100c ; -- <0464> pop x -- "
    0993 : fc00 ; -- <0464> swapra = nop

-- ######## event uart_rx_handler -- = 0x0994
-- :again -- = 0x0994
    0994 : fba0 ; -- <0467> pollchar
    0995 : 00ba ; -- <0467> "
    0996 : fc00 ; -- <0467> "
    0997 : 1000 ; -- <0468> x = a

    0998 : 0004 ; -- <0471> a = x
    0999 : 0760 ; -- <0471> b = -1

    099a : e407 ; -- <0469> bn eq :else_2458
    099b : 099e ; -- <0469> "

    099c : e00f ; -- <0470> event_return
    099d : 009e ; -- <0470> "


    099e : 0004 ; -- <0474> a = x
    099f : 060a ; -- <0474> b = 10

    09a0 : e407 ; -- <0472> bn eq :else_2464
    09a1 : 09a5 ; -- <0472> "

    09a2 : fba0 ; -- <0473> callx  postpone_comm_restart
    09a3 : 0bc2 ; -- <0473> "
    09a4 : fc00 ; -- <0473> "

    09a5 : 2004 ; -- <0475> pa = x
    09a6 : fba0 ; -- <0475> callx  parse_key  x
    09a7 : 0290 ; -- <0475> "
    09a8 : fc00 ; -- <0475> "
    09a9 : e00f ; -- <0476> jmp :again
    09aa : 0994 ; -- <0476> "
    09ab : e00f ; -- <0477> end_event
    09ac : 009e ; -- <0477> "

-- ######## event uart_rx_overflow_handler -- = 0x09ad
    09ad : 7fa0 ; -- <0480> error_halt_code $err_rx_overflow -- leds = 0xfffe
    09ae : fffe ; -- <0480> "
    09af : e00f ; -- <0480> error_halt_code $err_rx_overflow
    09b0 : 09af ; -- <0480> "
    09b1 : e00f ; -- <0481> end_event
    09b2 : 009e ; -- <0481> "

-- :tx_overflow_msg -- = 0x09b3
-- "TXO\x0"
    09b3 : 5854 ; -- <0484> XT
    09b4 : 004f ; -- <0484>  O

-- ######## event uart_tx_overflow_handler -- = 0x09b5
-- error_halt_code $err_tx_overflow
    09b5 : 23a0 ; -- <0488> pa = :tx_overflow_msg
    09b6 : 09b3 ; -- <0488> "
    09b7 : fba0 ; -- <0488> callx  set_text_flag  :tx_overflow_msg
    09b8 : 0bf3 ; -- <0488> "
    09b9 : fc00 ; -- <0488> "
    09ba : e00f ; -- <0489> end_event
    09bb : 009e ; -- <0489> "

-- ######## event key0_handler -- = 0x09bc
    09bc : 026b ; -- <0492> a = 107 -- putasc "k"
    09bd : fba0 ; -- <0492> putasc "k"
    09be : 00ab ; -- <0492> "
    09bf : fc00 ; -- <0492> "
    09c0 : 0230 ; -- <0493> a = 48 -- putasc "0"
    09c1 : fba0 ; -- <0493> putasc "0"
    09c2 : 00ab ; -- <0493> "
    09c3 : fc00 ; -- <0493> "
    09c4 : e00f ; -- <0494> end_event
    09c5 : 009e ; -- <0494> "

-- ######## event key1_handler -- = 0x09c6
    09c6 : 026b ; -- <0497> a = 107 -- putasc "k"
    09c7 : fba0 ; -- <0497> putasc "k"
    09c8 : 00ab ; -- <0497> "
    09c9 : fc00 ; -- <0497> "
    09ca : 0231 ; -- <0498> a = 49 -- putasc "1"
    09cb : fba0 ; -- <0498> putasc "1"
    09cc : 00ab ; -- <0498> "
    09cd : fc00 ; -- <0498> "
    09ce : e00f ; -- <0499> end_event
    09cf : 009e ; -- <0499> "

-- ######## event softevent3_handler -- = 0x09d0
    09d0 : e00f ; -- <0502> end_event
    09d1 : 009e ; -- <0502> "

-- ######## event softevent2_handler -- = 0x09d2
    09d2 : e00f ; -- <0505> end_event
    09d3 : 009e ; -- <0505> "

-- ######## event softevent1_handler -- = 0x09d4
    09d4 : e00f ; -- <0508> end_event
    09d5 : 009e ; -- <0508> "

-- ######## event softevent0_handler -- = 0x09d6
    09d6 : e00f ; -- <0511> end_event
    09d7 : 009e ; -- <0511> "

-- :rpm_msg -- = 0x09d8
-- ": rpm=\x0"
    09d8 : 203a ; -- <0514>  :
    09d9 : 7072 ; -- <0514> pr
    09da : 3d6d ; -- <0514> =m
    09db : 0000 ; -- <0514>   

-- :puff_len_msg -- = 0x09dc
-- " pfl=\x0"
    09dc : 7020 ; -- <0517> p 
    09dd : 6c66 ; -- <0517> lf
    09de : 003d ; -- <0517>  =

-- :o2_msg -- = 0x09df
-- " o2=\x0"
    09df : 6f20 ; -- <0520> o 
    09e0 : 3d32 ; -- <0520> =2
    09e1 : 0000 ; -- <0520>   

-- :tps_msg -- = 0x09e2
-- " tp=\x0"
    09e2 : 7420 ; -- <0523> t 
    09e3 : 3d70 ; -- <0523> =p
    09e4 : 0000 ; -- <0523>   

-- ######## func start_daq_pass -- = 0x09e5
    09e5 : 3004 ; -- <0580> push x -- func start_daq_pass
    09e6 : 303e ; -- <0580> push rtna -- "

-- daq pass counter in RAM.
    09e7 : 6600 ; -- <0527> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    09e8 : 6a14 ; -- <0527> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    09e9 : 0017 ; -- <0527> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    09ea : 0018 ; -- <0527> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    09eb : 0601 ; -- <0528> b = 1
    09ec : c800 ; -- <0529> a = a+b
    09ed : 0300 ; -- <0529> "
    09ee : 7c00 ; -- <0530> leds = a
    09ef : 6600 ; -- <0531> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    09f0 : 6a14 ; -- <0531> ram $ram_daq_pass_cnt = a -- av_ad_lo = 20
    09f1 : 5c00 ; -- <0531> ram $ram_daq_pass_cnt = a -- av_write_data = a
    09f2 : fba0 ; -- <0532> call :put4x
    09f3 : 00d3 ; -- <0532> "
    09f4 : fc00 ; -- <0532> "

    09f5 : 03a0 ; -- <0534> a = :rpm_msg
    09f6 : 09d8 ; -- <0534> "
    09f7 : fba0 ; -- <0535> call :print_nt
    09f8 : 015f ; -- <0535> "
    09f9 : fc00 ; -- <0535> "
    09fa : 0200 ; -- <0536> a = 0
    09fb : 6600 ; -- <0537> ram x = $ram_rpm_valid -- av_ad_hi = 0
    09fc : 6a7e ; -- <0537> ram x = $ram_rpm_valid -- av_ad_lo = 126
    09fd : 1017 ; -- <0537> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    09fe : 1018 ; -- <0537> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle

    09ff : 0004 ; -- <0540> a = x
    0a00 : 0600 ; -- <0540> b = 0

    0a01 : e007 ; -- <0538> br eq :else_2561
    0a02 : 0a07 ; -- <0538> "

    0a03 : 6600 ; -- <0539> ram a = $ram_avg_rpm -- av_ad_hi = 0
    0a04 : 6a7c ; -- <0539> ram a = $ram_avg_rpm -- av_ad_lo = 124
    0a05 : 0017 ; -- <0539> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    0a06 : 0018 ; -- <0539> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle

    0a07 : fba0 ; -- <0541> call :put4x
    0a08 : 00d3 ; -- <0541> "
    0a09 : fc00 ; -- <0541> "

    0a0a : 03a0 ; -- <0543> a = :puff_len_msg
    0a0b : 09dc ; -- <0543> "
    0a0c : fba0 ; -- <0544> call :print_nt
    0a0d : 015f ; -- <0544> "
    0a0e : fc00 ; -- <0544> "
    0a0f : 0025 ; -- <0545> a = puff_len_us
    0a10 : fba0 ; -- <0546> call :put4x
    0a11 : 00d3 ; -- <0546> "
    0a12 : fc00 ; -- <0546> "
    0a13 : 022c ; -- <0547> a = 44 -- putasc ","
    0a14 : fba0 ; -- <0547> putasc ","
    0a15 : 00ab ; -- <0547> "
    0a16 : fc00 ; -- <0547> "
    0a17 : 6600 ; -- <0548> ram a = $ram_puff_count -- av_ad_hi = 0
    0a18 : 6a92 ; -- <0548> ram a = $ram_puff_count -- av_ad_lo = 146
    0a19 : 0017 ; -- <0548> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0a1a : 0018 ; -- <0548> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0a1b : fba0 ; -- <0549> call :put4x
    0a1c : 00d3 ; -- <0549> "
    0a1d : fc00 ; -- <0549> "

    0a1e : 03a0 ; -- <0551> a = :o2_msg
    0a1f : 09df ; -- <0551> "
    0a20 : fba0 ; -- <0552> call :print_nt
    0a21 : 015f ; -- <0552> "
    0a22 : fc00 ; -- <0552> "
    0a23 : 0205 ; -- <0553> a = $o2_adc_channel

    0a24 : 0351 ; -- <0554> a = a<<1
    0a25 : 0626 ; -- <0554> b = 38
    0a26 : 6600 ; -- <0554> av_ad_hi = 0
    0a27 : 6b00 ; -- <0554> av_ad_lo = ad0
    0a28 : 0417 ; -- <0554> b = av_write_data
    0a29 : 0418 ; -- <0554> b = av_read_data

    0a2a : 0001 ; -- <0555> a = b
    0a2b : fba0 ; -- <0556> call :put4x
    0a2c : 00d3 ; -- <0556> "
    0a2d : fc00 ; -- <0556> "

    0a2e : 03a0 ; -- <0558> a = :tps_msg
    0a2f : 09e2 ; -- <0558> "
    0a30 : fba0 ; -- <0559> call :print_nt
    0a31 : 015f ; -- <0559> "
    0a32 : fc00 ; -- <0559> "
    0a33 : 0206 ; -- <0560> a = $tps_adc_channel

    0a34 : 0351 ; -- <0561> a = a<<1
    0a35 : 0626 ; -- <0561> b = 38
    0a36 : 6600 ; -- <0561> av_ad_hi = 0
    0a37 : 6b00 ; -- <0561> av_ad_lo = ad0
    0a38 : 0417 ; -- <0561> b = av_write_data
    0a39 : 0418 ; -- <0561> b = av_read_data

    0a3a : 0001 ; -- <0562> a = b
    0a3b : fba0 ; -- <0563> call :put4x
    0a3c : 00d3 ; -- <0563> "
    0a3d : fc00 ; -- <0563> "
    0a3e : 022c ; -- <0564> a = 44 -- putasc ","
    0a3f : fba0 ; -- <0564> putasc ","
    0a40 : 00ab ; -- <0564> "
    0a41 : fc00 ; -- <0564> "
    0a42 : 6600 ; -- <0565> ram a = $ram_tps_avg -- av_ad_hi = 0
    0a43 : 6ba0 ; -- <0565> ram a = $ram_tps_avg -- av_ad_lo = 338
    0a44 : 0152 ; -- <0565> "
    0a45 : 0017 ; -- <0565> ram a = $ram_tps_avg -- a = av_write_data -- start read cycle
    0a46 : 0018 ; -- <0565> ram a = $ram_tps_avg -- a = av_read_data -- finish read cycle
    0a47 : fba0 ; -- <0566> call :put4x
    0a48 : 00d3 ; -- <0566> "
    0a49 : fc00 ; -- <0566> "
    0a4a : 022c ; -- <0567> a = 44 -- putasc ","
    0a4b : fba0 ; -- <0567> putasc ","
    0a4c : 00ab ; -- <0567> "
    0a4d : fc00 ; -- <0567> "
    0a4e : 6600 ; -- <0568> ram a = $ram_tps_state -- av_ad_hi = 0
    0a4f : 6ace ; -- <0568> ram a = $ram_tps_state -- av_ad_lo = 206
    0a50 : 0017 ; -- <0568> ram a = $ram_tps_state -- a = av_write_data -- start read cycle
    0a51 : 0018 ; -- <0568> ram a = $ram_tps_state -- a = av_read_data -- finish read cycle
    0a52 : 0630 ; -- <0569> b = 48 -- asc b = "0"
    0a53 : c800 ; -- <0570> a = a+b -- putchar a+b
    0a54 : 0300 ; -- <0570> "
    0a55 : fba0 ; -- <0570> putchar a+b
    0a56 : 00ab ; -- <0570> "
    0a57 : fc00 ; -- <0570> "

-- start to acquire & report all anmux channels.
    0a58 : 0207 ; -- <0573> a = ($anmux_num_channels - 1)
    0a59 : fba0 ; -- <0574> call :anmux_set_chn
    0a5a : 00c2 ; -- <0574> "
    0a5b : fc00 ; -- <0574> "
    0a5c : 5205 ; -- <0575> mstimer1 = $anmux_settle_ms

-- observe MCU utilization.  this RAM variable can be seen by the debugger.
    0a5d : 6600 ; -- <0578> ram $ram_mcu_usage_cnt = usage_count -- av_ad_hi = 0
    0a5e : 6a44 ; -- <0578> ram $ram_mcu_usage_cnt = usage_count -- av_ad_lo = 68
    0a5f : 5c0f ; -- <0578> ram $ram_mcu_usage_cnt = usage_count -- av_write_data = usage_count
    0a60 : 3e00 ; -- <0579> usage_count = 0

    0a61 : f80c ; -- <0581> pop rtna -- func start_daq_pass
    0a62 : 100c ; -- <0581> pop x -- "
    0a63 : fc00 ; -- <0581> swapra = nop

-- ######## event mstimer1_handler -- = 0x0a64
-- anmux signal has settled.

    0a64 : 6600 ; -- <0585> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0a65 : 6a36 ; -- <0585> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    0a66 : 0017 ; -- <0585> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0a67 : 0018 ; -- <0585> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    0a68 : 0000 ; -- <0590> a = a
    0a69 : 0600 ; -- <0590> b = 0

    0a6a : e007 ; -- <0586> br eq :else_2666
    0a6b : 0a6f ; -- <0586> "

-- ADC is busy right now.  wait a while & try again.
    0a6c : 5202 ; -- <0588> mstimer1 = $anmux_retry_ms
    0a6d : e00f ; -- <0589> event_return
    0a6e : 009e ; -- <0589> "


-- start a reading from the current anmux channel.
    0a6f : 0220 ; -- <0593> a = 32 -- putasc " "
    0a70 : fba0 ; -- <0593> putasc " "
    0a71 : 00ab ; -- <0593> "
    0a72 : fc00 ; -- <0593> "
    0a73 : 0273 ; -- <0594> a = 115 -- putasc "s"
    0a74 : fba0 ; -- <0594> putasc "s"
    0a75 : 00ab ; -- <0594> "
    0a76 : fc00 ; -- <0594> "
    0a77 : fba0 ; -- <0595> call :anmux_get_chn
    0a78 : 00c6 ; -- <0595> "
    0a79 : fc00 ; -- <0595> "
    0a7a : 0630 ; -- <0596> b = 48 -- asc b = "0"
    0a7b : c800 ; -- <0597> a = a+b -- putchar a+b
    0a7c : 0300 ; -- <0597> "
    0a7d : fba0 ; -- <0597> putchar a+b
    0a7e : 00ab ; -- <0597> "
    0a7f : fc00 ; -- <0597> "
    0a80 : 023d ; -- <0598> a = 61 -- putasc "="
    0a81 : fba0 ; -- <0598> putasc "="
    0a82 : 00ab ; -- <0598> "
    0a83 : fc00 ; -- <0598> "
    0a84 : 2207 ; -- <0599> pa = 7
    0a85 : fba0 ; -- <0599> callx  begin_adc_conversion  $anmux_adc_channel
    0a86 : 0a8a ; -- <0599> "
    0a87 : fc00 ; -- <0599> "
    0a88 : e00f ; -- <0600> end_event
    0a89 : 009e ; -- <0600> "

-- ######## func begin_adc_conversion -- = 0x0a8a

-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.

    0a8a : 6600 ; -- <0606> ram $ram_adc_chn_pending = next_channel -- av_ad_hi = 0
    0a8b : 6a36 ; -- <0606> ram $ram_adc_chn_pending = next_channel -- av_ad_lo = 54
    0a8c : 5c08 ; -- <0606> ram $ram_adc_chn_pending = next_channel -- av_write_data = next_channel
    0a8d : 0008 ; -- <0607> a = next_channel
    0a8e : 0352 ; -- <0608> a = a<<4
    0a8f : 0352 ; -- <0609> a = a<<4
    0a90 : 0351 ; -- <0610> a = a<<1
    0a91 : 0351 ; -- <0611> a = a<<1
    0a92 : 0351 ; -- <0612> a = a<<1
    0a93 : 5800 ; -- <0613> spi_data = a
    0a94 : 6600 ; -- <0614> ram $ram_adc_junk = 1 -- av_ad_hi = 0
    0a95 : 6a38 ; -- <0614> ram $ram_adc_junk = 1 -- av_ad_lo = 56
    0a96 : 5e01 ; -- <0614> ram $ram_adc_junk = 1 -- av_write_data = 1

    0a97 : fc00 ; -- <0616> swapra = nop

-- ######## event spi_done_handler -- = 0x0a98
-- discard the results of the first SPI exchange with the ADC.  that's only for writing the channel num out to the ADC.
    0a98 : 6600 ; -- <0619> ram a = $ram_adc_junk -- av_ad_hi = 0
    0a99 : 6a38 ; -- <0619> ram a = $ram_adc_junk -- av_ad_lo = 56
    0a9a : 0017 ; -- <0619> ram a = $ram_adc_junk -- a = av_write_data -- start read cycle
    0a9b : 0018 ; -- <0619> ram a = $ram_adc_junk -- a = av_read_data -- finish read cycle

    0a9c : 0000 ; -- <0631> a = a
    0a9d : 0600 ; -- <0631> b = 0

    0a9e : e007 ; -- <0620> br eq :else_2718
    0a9f : 0aaf ; -- <0620> "

-- start another SPI exchange to retrieve the actual reading.
    0aa0 : 6600 ; -- <0622> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0aa1 : 6a36 ; -- <0622> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    0aa2 : 0017 ; -- <0622> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0aa3 : 0018 ; -- <0622> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle
    0aa4 : 0352 ; -- <0623> a = a<<4
    0aa5 : 0352 ; -- <0624> a = a<<4
    0aa6 : 0351 ; -- <0625> a = a<<1
    0aa7 : 0351 ; -- <0626> a = a<<1
    0aa8 : 0351 ; -- <0627> a = a<<1
    0aa9 : 5800 ; -- <0628> spi_data = a
    0aaa : 6600 ; -- <0629> ram $ram_adc_junk = 0 -- av_ad_hi = 0
    0aab : 6a38 ; -- <0629> ram $ram_adc_junk = 0 -- av_ad_lo = 56
    0aac : 5e00 ; -- <0629> ram $ram_adc_junk = 0 -- av_write_data = 0
    0aad : e00f ; -- <0630> event_return
    0aae : 009e ; -- <0630> "


-- memorize an actual ADC reading.
    0aaf : 6600 ; -- <0634> ram i = $ram_adc_chn_pending -- av_ad_hi = 0
    0ab0 : 6a36 ; -- <0634> ram i = $ram_adc_chn_pending -- av_ad_lo = 54
    0ab1 : 0817 ; -- <0634> ram i = $ram_adc_chn_pending -- i = av_write_data -- start read cycle
    0ab2 : 0818 ; -- <0634> ram i = $ram_adc_chn_pending -- i = av_read_data -- finish read cycle
    0ab3 : 6600 ; -- <0635> ram $ram_adc_chn_pending = 0 -- av_ad_hi = 0
    0ab4 : 6a36 ; -- <0635> ram $ram_adc_chn_pending = 0 -- av_ad_lo = 54
    0ab5 : 5e00 ; -- <0635> ram $ram_adc_chn_pending = 0 -- av_write_data = 0
    0ab6 : 0002 ; -- <0636> a = i
    0ab7 : 0416 ; -- <0637> b = spi_data

    0ab8 : 0351 ; -- <0638> a = a<<1
    0ab9 : 3001 ; -- <0638> push b -- push b
    0aba : 0626 ; -- <0638> b = 38
    0abb : 6600 ; -- <0638> av_ad_hi = 0
    0abc : 6b00 ; -- <0638> av_ad_lo = ad0
    0abd : 5c0c ; -- <0638> pop av_write_data -- pop av_write_data


-- react to ADC reading.

    0abe : 0002 ; -- <0645> a = i
    0abf : 0606 ; -- <0645> b = 6

    0ac0 : e407 ; -- <0641> bn eq :else_2752
    0ac1 : 0acb ; -- <0641> "

    0ac2 : 2205 ; -- <0642> pa = 5
    0ac3 : fba0 ; -- <0642> callx  begin_adc_conversion  $o2_adc_channel
    0ac4 : 0a8a ; -- <0642> "
    0ac5 : fc00 ; -- <0642> "
    0ac6 : fba0 ; -- <0643> callx  interpret_tps
    0ac7 : 0cbf ; -- <0643> "
    0ac8 : fc00 ; -- <0643> "
    0ac9 : e00f ; -- <0644> event_return
    0aca : 009e ; -- <0644> "


    0acb : 0002 ; -- <0649> a = i
    0acc : 0605 ; -- <0649> b = 5

    0acd : e407 ; -- <0646> bn eq :else_2765
    0ace : 0ad5 ; -- <0646> "

    0acf : 2204 ; -- <0647> pa = 4
    0ad0 : fba0 ; -- <0647> callx  begin_adc_conversion  $maf_adc_channel
    0ad1 : 0a8a ; -- <0647> "
    0ad2 : fc00 ; -- <0647> "
    0ad3 : e00f ; -- <0648> event_return
    0ad4 : 009e ; -- <0648> "


    0ad5 : 0002 ; -- <0654> a = i
    0ad6 : 0604 ; -- <0654> b = 4

    0ad7 : e407 ; -- <0650> bn eq :else_2775
    0ad8 : 0ae1 ; -- <0650> "

    0ad9 : fba0 ; -- <0651> callx  interpret_maf
    0ada : 0c79 ; -- <0651> "
    0adb : fc00 ; -- <0651> "
    0adc : fba0 ; -- <0652> callx  plan_tick
    0add : 0977 ; -- <0652> "
    0ade : fc00 ; -- <0652> "
    0adf : e00f ; -- <0653> event_return
    0ae0 : 009e ; -- <0653> "


    0ae1 : 0002 ; -- <0682> a = i
    0ae2 : 0607 ; -- <0682> b = 7

    0ae3 : e407 ; -- <0655> bn eq :else_2787
    0ae4 : 0b19 ; -- <0655> "

-- report anmux reading.
    0ae5 : 0016 ; -- <0657> a = spi_data
    0ae6 : fba0 ; -- <0658> call :put4x
    0ae7 : 00d3 ; -- <0658> "
    0ae8 : fc00 ; -- <0658> "

-- memorize anmux reading.
    0ae9 : fba0 ; -- <0661> call :anmux_get_chn
    0aea : 00c6 ; -- <0661> "
    0aeb : fc00 ; -- <0661> "
    0aec : 0416 ; -- <0662> b = spi_data

    0aed : 0351 ; -- <0663> a = a<<1
    0aee : 3001 ; -- <0663> push b -- push b
    0aef : 0616 ; -- <0663> b = 22
    0af0 : 6600 ; -- <0663> av_ad_hi = 0
    0af1 : 6b00 ; -- <0663> av_ad_lo = ad0
    0af2 : 5c0c ; -- <0663> pop av_write_data -- pop av_write_data


-- decrement anmux channel & start waiting again.
    0af3 : fba0 ; -- <0666> call :anmux_get_chn
    0af4 : 00c6 ; -- <0666> "
    0af5 : fc00 ; -- <0666> "

    0af6 : 0000 ; -- <0673> a = a
    0af7 : 0600 ; -- <0673> b = 0

    0af8 : e007 ; -- <0667> br eq :else_2808
    0af9 : 0b03 ; -- <0667> "

    0afa : 0760 ; -- <0668> b = -1
    0afb : c800 ; -- <0669> a = a+b
    0afc : 0300 ; -- <0669> "
    0afd : fba0 ; -- <0670> call :anmux_set_chn
    0afe : 00c2 ; -- <0670> "
    0aff : fc00 ; -- <0670> "
    0b00 : 5205 ; -- <0671> mstimer1 = $anmux_settle_ms
    0b01 : e00f ; -- <0672> event_return
    0b02 : 009e ; -- <0672> "


-- end of temperature daq pass.
    0b03 : fba0 ; -- <0676> callx  interpret_block_temp
    0b04 : 07d3 ; -- <0676> "
    0b05 : fc00 ; -- <0676> "
    0b06 : fba0 ; -- <0677> callx  report_plan
    0b07 : 0c5d ; -- <0677> "
    0b08 : fc00 ; -- <0677> "
    0b09 : fba0 ; -- <0678> callx  report_text_flags
    0b0a : 0c2a ; -- <0678> "
    0b0b : fc00 ; -- <0678> "
    0b0c : 020d ; -- <0679> a = 13 -- puteol
    0b0d : fba0 ; -- <0679> puteol
    0b0e : 00ab ; -- <0679> "
    0b0f : fc00 ; -- <0679> "
    0b10 : 020a ; -- <0679> a = 10 -- puteol
    0b11 : fba0 ; -- <0679> puteol
    0b12 : 00ab ; -- <0679> "
    0b13 : fc00 ; -- <0679> "
    0b14 : 6600 ; -- <0680> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    0b15 : 6a3a ; -- <0680> ram $ram_dial_setting = spi_data -- av_ad_lo = 58
    0b16 : 5c16 ; -- <0680> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    0b17 : e00f ; -- <0681> event_return
    0b18 : 009e ; -- <0681> "

    0b19 : e00f ; -- <0683> end_event
    0b1a : 009e ; -- <0683> "

-- :power_lost_msg -- = 0x0b1b
-- "PWL\x0"
    0b1b : 5750 ; -- <0686> WP
    0b1c : 004c ; -- <0686>  L

-- ######## event power_lost_handler -- = 0x0b1d
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    0b1d : 8a00 ; -- <0695> power_duty = $power_duty_closing
    0b1e : 6600 ; -- <0696> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0b1f : 6a14 ; -- <0696> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0b20 : 0017 ; -- <0696> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0b21 : 0018 ; -- <0696> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0b22 : 0602 ; -- <0697> b = $relay_hold_passes
    0b23 : 6600 ; -- <0698> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    0b24 : 6a3e ; -- <0698> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 62
    0b25 : c800 ; -- <0698> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    0b26 : 5f00 ; -- <0698> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    0b27 : fba0 ; -- <0703> callx  save_persistent_data
    0b28 : 0b94 ; -- <0703> "
    0b29 : fc00 ; -- <0703> "

    0b2a : 23a0 ; -- <0705> pa = :power_lost_msg
    0b2b : 0b1b ; -- <0705> "
    0b2c : fba0 ; -- <0705> callx  set_text_flag  :power_lost_msg
    0b2d : 0bf3 ; -- <0705> "
    0b2e : fc00 ; -- <0705> "
    0b2f : e00f ; -- <0706> end_event
    0b30 : 009e ; -- <0706> "

-- :ign_off_msg -- = 0x0b31
-- "IGOF\x0"
    0b31 : 4749 ; -- <0709> GI
    0b32 : 464f ; -- <0709> FO
    0b33 : 0000 ; -- <0709>   

-- ######## event ign_switch_off_handler -- = 0x0b34
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    0b34 : 6600 ; -- <0713> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0b35 : 6a40 ; -- <0713> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0b36 : 0017 ; -- <0713> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0b37 : 0018 ; -- <0713> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0b38 : 060a ; -- <0714> b = $power_extend_minutes
    0b39 : 6600 ; -- <0715> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    0b3a : 6a3c ; -- <0715> ram $ram_power_down_at_min = a+b -- av_ad_lo = 60
    0b3b : c800 ; -- <0715> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    0b3c : 5f00 ; -- <0715> "
    0b3d : 23a0 ; -- <0716> pa = :ign_off_msg
    0b3e : 0b31 ; -- <0716> "
    0b3f : fba0 ; -- <0716> callx  set_text_flag   :ign_off_msg
    0b40 : 0bf3 ; -- <0716> "
    0b41 : fc00 ; -- <0716> "
    0b42 : e00f ; -- <0717> end_event
    0b43 : 009e ; -- <0717> "

-- :ign_on_msg -- = 0x0b44
-- "IGON\x0"
    0b44 : 4749 ; -- <0720> GI
    0b45 : 4e4f ; -- <0720> NO
    0b46 : 0000 ; -- <0720>   

-- ######## event ign_switch_on_handler -- = 0x0b47
    0b47 : 6600 ; -- <0723> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0b48 : 6a3c ; -- <0723> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 60
    0b49 : 5f60 ; -- <0723> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0b4a : 23a0 ; -- <0724> pa = :ign_on_msg
    0b4b : 0b44 ; -- <0724> "
    0b4c : fba0 ; -- <0724> callx  set_text_flag   :ign_on_msg
    0b4d : 0bf3 ; -- <0724> "
    0b4e : fc00 ; -- <0724> "
    0b4f : e00f ; -- <0725> end_event
    0b50 : 009e ; -- <0725> "

-- ######## event puff1_done_handler -- = 0x0b51
-- puff just finished.  set length of next puff.
    0b51 : 6600 ; -- <0729> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    0b52 : 6a90 ; -- <0729> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 144
    0b53 : 9417 ; -- <0729> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    0b54 : 9418 ; -- <0729> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    0b55 : 6600 ; -- <0732> ram a = $ram_puff_count -- av_ad_hi = 0
    0b56 : 6a92 ; -- <0732> ram a = $ram_puff_count -- av_ad_lo = 146
    0b57 : 0017 ; -- <0732> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0b58 : 0018 ; -- <0732> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0b59 : 0601 ; -- <0733> b = 1
    0b5a : 6600 ; -- <0734> ram $ram_puff_count = a+b -- av_ad_hi = 0
    0b5b : 6a92 ; -- <0734> ram $ram_puff_count = a+b -- av_ad_lo = 146
    0b5c : c800 ; -- <0734> ram $ram_puff_count = a+b -- av_write_data = a+b
    0b5d : 5f00 ; -- <0734> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    0b5e : e00f ; -- <0745> end_event
    0b5f : 009e ; -- <0745> "

-- ######## func minute_events -- = 0x0b60
    0b60 : 303e ; -- <0749> push rtna -- func minute_events

    0b61 : fba0 ; -- <0748> callx  check_power_down
    0b62 : 0b7d ; -- <0748> "
    0b63 : fc00 ; -- <0748> "

    0b64 : f80c ; -- <0750> pop rtna -- func minute_events
    0b65 : fc00 ; -- <0750> swapra = nop

-- :power_hold_msg -- = 0x0b66
-- "PWH\x0"
    0b66 : 5750 ; -- <0752> WP
    0b67 : 0048 ; -- <0752>  H

-- ######## func check_power_relay -- = 0x0b68
    0b68 : 303e ; -- <0762> push rtna -- func check_power_relay

    0b69 : 6600 ; -- <0755> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0b6a : 6a14 ; -- <0755> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0b6b : 0017 ; -- <0755> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0b6c : 0018 ; -- <0755> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0b6d : 6600 ; -- <0756> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    0b6e : 6a3e ; -- <0756> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 62
    0b6f : 0417 ; -- <0756> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    0b70 : 0418 ; -- <0756> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle

    0b71 : 0000 ; -- <0761> a = a
    0b72 : 0401 ; -- <0761> b = b

    0b73 : e407 ; -- <0757> bn eq :else_2931
    0b74 : 0b7b ; -- <0757> "

-- time to begin "solenoid saver" coil power reduction by PWM.
    0b75 : 8a19 ; -- <0759> power_duty = $power_duty_holding
    0b76 : 23a0 ; -- <0760> pa = :power_hold_msg
    0b77 : 0b66 ; -- <0760> "
    0b78 : fba0 ; -- <0760> callx  set_text_flag  :power_hold_msg
    0b79 : 0bf3 ; -- <0760> "
    0b7a : fc00 ; -- <0760> "


    0b7b : f80c ; -- <0763> pop rtna -- func check_power_relay
    0b7c : fc00 ; -- <0763> swapra = nop

-- ######## func check_power_down -- = 0x0b7d

-- check power-down deadline in RAM.
    0b7d : 6600 ; -- <0766> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0b7e : 6a40 ; -- <0766> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0b7f : 0017 ; -- <0766> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0b80 : 0018 ; -- <0766> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0b81 : 6600 ; -- <0767> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    0b82 : 6a3c ; -- <0767> ram b = $ram_power_down_at_min -- av_ad_lo = 60
    0b83 : 0417 ; -- <0767> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    0b84 : 0418 ; -- <0767> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle

    0b85 : 0000 ; -- <0770> a = a
    0b86 : 0401 ; -- <0770> b = b

    0b87 : e407 ; -- <0768> bn eq :else_2951
    0b88 : 0b8b ; -- <0768> "

    0b89 : e00f ; -- <0769> jmp :power_down
    0b8a : 0b8c ; -- <0769> "


    0b8b : fc00 ; -- <0772> swapra = nop

-- :power_down -- = 0x0b8c
-- this code never returns.
    0b8c : fba0 ; -- <0775> callx  save_persistent_data
    0b8d : 0b94 ; -- <0775> "
    0b8e : fc00 ; -- <0775> "
    0b8f : 8a32 ; -- <0776> power_duty = $power_duty_opening
    0b90 : 7fa0 ; -- <0777> error_halt_code $err_power_down -- leds = 0xfffc
    0b91 : fffc ; -- <0777> "
    0b92 : e00f ; -- <0777> error_halt_code $err_power_down
    0b93 : 0b92 ; -- <0777> "

-- ######## func save_persistent_data -- = 0x0b94


    0b94 : fc00 ; -- <0781> swapra = nop

-- ######## func check_communication -- = 0x0b95
    0b95 : 303e ; -- <0801> push rtna -- func check_communication

    0b96 : 6600 ; -- <0783> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    0b97 : 6a12 ; -- <0783> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 18
    0b98 : 0017 ; -- <0783> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    0b99 : 0018 ; -- <0783> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle

    0b9a : 0000 ; -- <0791> a = a
    0b9b : 0600 ; -- <0791> b = 0

    0b9c : e007 ; -- <0784> br eq :else_2972
    0b9d : 0bab ; -- <0784> "

    0b9e : 0760 ; -- <0785> b = -1
    0b9f : c800 ; -- <0786> a = a+b
    0ba0 : 0300 ; -- <0786> "
    0ba1 : 6600 ; -- <0787> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0ba2 : 6a12 ; -- <0787> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 18
    0ba3 : 5c00 ; -- <0787> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a

    0ba4 : 0000 ; -- <0790> a = a
    0ba5 : 0600 ; -- <0790> b = 0

    0ba6 : e407 ; -- <0788> bn eq :else_2982
    0ba7 : 0bab ; -- <0788> "

    0ba8 : fba0 ; -- <0789> callx  ftdi_power_on
    0ba9 : 0bdf ; -- <0789> "
    0baa : fc00 ; -- <0789> "



    0bab : 6600 ; -- <0793> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0bac : 6a40 ; -- <0793> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0bad : 0017 ; -- <0793> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0bae : 0018 ; -- <0793> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0baf : 6600 ; -- <0794> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0bb0 : 6a10 ; -- <0794> ram b = $ram_comm_restart_at_min -- av_ad_lo = 16
    0bb1 : 0417 ; -- <0794> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0bb2 : 0418 ; -- <0794> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle

    0bb3 : 0000 ; -- <0800> a = a
    0bb4 : 0401 ; -- <0800> b = b

    0bb5 : e407 ; -- <0795> bn eq :else_2997
    0bb6 : 0bc0 ; -- <0795> "

-- comm restart is required.
    0bb7 : fba0 ; -- <0797> callx  postpone_comm_restart
    0bb8 : 0bc2 ; -- <0797> "
    0bb9 : fc00 ; -- <0797> "
    0bba : 6600 ; -- <0798> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    0bbb : 6a12 ; -- <0798> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 18
    0bbc : 5e05 ; -- <0798> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    0bbd : fba0 ; -- <0799> callx  ftdi_power_off
    0bbe : 0bcf ; -- <0799> "
    0bbf : fc00 ; -- <0799> "


    0bc0 : f80c ; -- <0802> pop rtna -- func check_communication
    0bc1 : fc00 ; -- <0802> swapra = nop

-- ######## func postpone_comm_restart -- = 0x0bc2

    0bc2 : 6600 ; -- <0804> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0bc3 : 6a40 ; -- <0804> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0bc4 : 0017 ; -- <0804> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0bc5 : 0018 ; -- <0804> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0bc6 : 0602 ; -- <0805> b = $comm_grace_period_min
    0bc7 : 6600 ; -- <0806> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    0bc8 : 6a10 ; -- <0806> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 16
    0bc9 : c800 ; -- <0806> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    0bca : 5f00 ; -- <0806> "

    0bcb : fc00 ; -- <0808> swapra = nop

-- :ftdi_off_msg -- = 0x0bcc
-- "FTOF\x0"
    0bcc : 5446 ; -- <0810> TF
    0bcd : 464f ; -- <0810> FO
    0bce : 0000 ; -- <0810>   

-- ######## func ftdi_power_off -- = 0x0bcf
    0bcf : 303e ; -- <0817> push rtna -- func ftdi_power_off

    0bd0 : 0020 ; -- <0813> a = board_ctrl
    0bd1 : 07a0 ; -- <0814> b = $not_ftdi_power_mask
    0bd2 : ff7f ; -- <0814> "
    0bd3 : c800 ; -- <0815> board_ctrl = and
    0bd4 : 8330 ; -- <0815> "
    0bd5 : 23a0 ; -- <0816> pa = :ftdi_off_msg
    0bd6 : 0bcc ; -- <0816> "
    0bd7 : fba0 ; -- <0816> callx  set_text_flag  :ftdi_off_msg
    0bd8 : 0bf3 ; -- <0816> "
    0bd9 : fc00 ; -- <0816> "

    0bda : f80c ; -- <0818> pop rtna -- func ftdi_power_off
    0bdb : fc00 ; -- <0818> swapra = nop

-- :ftdi_on_msg -- = 0x0bdc
-- "FTON\x0"
    0bdc : 5446 ; -- <0820> TF
    0bdd : 4e4f ; -- <0820> NO
    0bde : 0000 ; -- <0820>   

-- ######## func ftdi_power_on -- = 0x0bdf
    0bdf : 303e ; -- <0827> push rtna -- func ftdi_power_on

    0be0 : 0020 ; -- <0823> a = board_ctrl
    0be1 : 0680 ; -- <0824> b = $ftdi_power_mask
    0be2 : c800 ; -- <0825> board_ctrl = or
    0be3 : 8334 ; -- <0825> "
    0be4 : 23a0 ; -- <0826> pa = :ftdi_on_msg
    0be5 : 0bdc ; -- <0826> "
    0be6 : fba0 ; -- <0826> callx  set_text_flag  :ftdi_on_msg
    0be7 : 0bf3 ; -- <0826> "
    0be8 : fc00 ; -- <0826> "

    0be9 : f80c ; -- <0828> pop rtna -- func ftdi_power_on
    0bea : fc00 ; -- <0828> swapra = nop

-- ######## func clear_ram_page -- = 0x0beb

    0beb : 0200 ; -- <0830> a = 0
    0bec : 0602 ; -- <0831> b = 2
-- :clear_next_word -- = 0x0bed
    0bed : 6800 ; -- <0833> av_ad_lo = a
    0bee : 5e00 ; -- <0834> av_write_data = 0
    0bef : 0300 ; -- <0835> a = ad0
    0bf0 : e400 ; -- <0836> bn az :clear_next_word
    0bf1 : 0bed ; -- <0836> "

    0bf2 : fc00 ; -- <0838> swapra = nop

-- ######## func set_text_flag -- = 0x0bf3

    0bf3 : 0408 ; -- <0840> b = flag_addr
    0bf4 : 6600 ; -- <0841> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    0bf5 : 6a56 ; -- <0841> ram a = $ram_next_tfp_idx -- av_ad_lo = 86
    0bf6 : 0017 ; -- <0841> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    0bf7 : 0018 ; -- <0841> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle

    0bf8 : 0351 ; -- <0842> a = a<<1
    0bf9 : 3001 ; -- <0842> push b -- push b
    0bfa : 0646 ; -- <0842> b = 70
    0bfb : 6600 ; -- <0842> av_ad_hi = 0
    0bfc : 6b00 ; -- <0842> av_ad_lo = ad0
    0bfd : 5c0c ; -- <0842> pop av_write_data -- pop av_write_data

    0bfe : 0008 ; -- <0843> a = flag_addr
    0bff : 0760 ; -- <0844> b = -1
    0c00 : c800 ; -- <0845> a = a+b
    0c01 : 0300 ; -- <0845> "
    0c02 : 0607 ; -- <0846> b = $tfp_mask
    0c03 : 6600 ; -- <0847> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    0c04 : 6a56 ; -- <0847> ram $ram_next_tfp_idx = and -- av_ad_lo = 86
    0c05 : c800 ; -- <0847> ram $ram_next_tfp_idx = and -- av_write_data = and
    0c06 : 5f30 ; -- <0847> "

    0c07 : fc00 ; -- <0849> swapra = nop

-- ######## func unique_text_flag -- = 0x0c08
    0c08 : 3002 ; -- <0860> push i -- func unique_text_flag
    0c09 : 303e ; -- <0860> push rtna -- "

    0c0a : 0a00 ; -- <0857> i = 0
-- :loop_3082 -- = 0x0c0b

    0c0b : 0002 ; -- <0851> a = i

    0c0c : 0351 ; -- <0852> a = a<<1
    0c0d : 0646 ; -- <0852> b = 70
    0c0e : 6600 ; -- <0852> av_ad_hi = 0
    0c0f : 6b00 ; -- <0852> av_ad_lo = ad0
    0c10 : 0417 ; -- <0852> b = av_write_data
    0c11 : 0418 ; -- <0852> b = av_read_data


    0c12 : 0001 ; -- <0855> a = b
    0c13 : 0408 ; -- <0855> b = flag_addr

    0c14 : e407 ; -- <0853> bn eq :else_3092
    0c15 : 0c18 ; -- <0853> "

    0c16 : e00f ; -- <0854> jmp :skip
    0c17 : 0c24 ; -- <0854> "



    0c18 : 0002 ; -- <0857> a = i
    0c19 : 0601 ; -- <0857> b = 1
    0c1a : c800 ; -- <0857> i = a+b
    0c1b : 0b00 ; -- <0857> "


    0c1c : 0002 ; -- <0857> a = i
    0c1d : 0608 ; -- <0857> b = $num_text_flag_pointers
    0c1e : e005 ; -- <0857> br lt :loop_3082
    0c1f : 0c0b ; -- <0857> "

-- :end_3082 -- = 0x0c20
    0c20 : 2008 ; -- <0858> pa = flag_addr
    0c21 : fba0 ; -- <0858> callx  set_text_flag  flag_addr
    0c22 : 0bf3 ; -- <0858> "
    0c23 : fc00 ; -- <0858> "
-- :skip -- = 0x0c24

    0c24 : f80c ; -- <0861> pop rtna -- func unique_text_flag
    0c25 : 080c ; -- <0861> pop i -- "
    0c26 : fc00 ; -- <0861> swapra = nop

-- :text_flags_msg -- = 0x0c27
-- " tf=\x0"
    0c27 : 7420 ; -- <0863> t 
    0c28 : 3d66 ; -- <0863> =f
    0c29 : 0000 ; -- <0863>   

-- ######## func report_text_flags -- = 0x0c2a
    0c2a : 3002 ; -- <0879> push i -- func report_text_flags
    0c2b : 303e ; -- <0879> push rtna -- "

    0c2c : 03a0 ; -- <0866> a = :text_flags_msg
    0c2d : 0c27 ; -- <0866> "
    0c2e : fba0 ; -- <0867> call :print_nt
    0c2f : 015f ; -- <0867> "
    0c30 : fc00 ; -- <0867> "
    0c31 : 0a00 ; -- <0878> i = 0
-- :loop_3121 -- = 0x0c32

    0c32 : 0002 ; -- <0868> a = i

    0c33 : 0351 ; -- <0869> a = a<<1
    0c34 : 0646 ; -- <0869> b = 70
    0c35 : 6600 ; -- <0869> av_ad_hi = 0
    0c36 : 6b00 ; -- <0869> av_ad_lo = ad0
    0c37 : 0417 ; -- <0869> b = av_write_data
    0c38 : 0418 ; -- <0869> b = av_read_data


    0c39 : 0001 ; -- <0876> a = b
    0c3a : 0600 ; -- <0876> b = 0

    0c3b : e007 ; -- <0870> br eq :else_3131
    0c3c : 0c4c ; -- <0870> "

    0c3d : fba0 ; -- <0871> call :print_nt
    0c3e : 015f ; -- <0871> "
    0c3f : fc00 ; -- <0871> "
    0c40 : 022c ; -- <0872> a = 44 -- putasc ","
    0c41 : fba0 ; -- <0872> putasc ","
    0c42 : 00ab ; -- <0872> "
    0c43 : fc00 ; -- <0872> "
    0c44 : 0002 ; -- <0873> a = i
    0c45 : 0600 ; -- <0874> b = 0

    0c46 : 0351 ; -- <0875> a = a<<1
    0c47 : 3001 ; -- <0875> push b -- push b
    0c48 : 0646 ; -- <0875> b = 70
    0c49 : 6600 ; -- <0875> av_ad_hi = 0
    0c4a : 6b00 ; -- <0875> av_ad_lo = ad0
    0c4b : 5c0c ; -- <0875> pop av_write_data -- pop av_write_data




    0c4c : 0002 ; -- <0878> a = i
    0c4d : 0601 ; -- <0878> b = 1
    0c4e : c800 ; -- <0878> i = a+b
    0c4f : 0b00 ; -- <0878> "


    0c50 : 0002 ; -- <0878> a = i
    0c51 : 0608 ; -- <0878> b = $num_text_flag_pointers
    0c52 : e005 ; -- <0878> br lt :loop_3121
    0c53 : 0c32 ; -- <0878> "

-- :end_3121 -- = 0x0c54

    0c54 : f80c ; -- <0880> pop rtna -- func report_text_flags
    0c55 : 080c ; -- <0880> pop i -- "
    0c56 : fc00 ; -- <0880> swapra = nop

-- :plan_msg -- = 0x0c57
-- " pl=\x0"
    0c57 : 7020 ; -- <0882> p 
    0c58 : 3d6c ; -- <0882> =l
    0c59 : 0000 ; -- <0882>   
-- :manual_trim_msg -- = 0x0c5a
-- " mt=\x0"
    0c5a : 6d20 ; -- <0884> m 
    0c5b : 3d74 ; -- <0884> =t
    0c5c : 0000 ; -- <0884>   

-- ######## func report_plan -- = 0x0c5d
    0c5d : 303e ; -- <0896> push rtna -- func report_plan

    0c5e : 03a0 ; -- <0887> a = :plan_msg
    0c5f : 0c57 ; -- <0887> "
    0c60 : fba0 ; -- <0888> call :print_nt
    0c61 : 015f ; -- <0888> "
    0c62 : fc00 ; -- <0888> "
    0c63 : 6600 ; -- <0889> ram a = $ram_plan_name -- av_ad_hi = 0
    0c64 : 6a88 ; -- <0889> ram a = $ram_plan_name -- av_ad_lo = 136
    0c65 : 0017 ; -- <0889> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    0c66 : 0018 ; -- <0889> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    0c67 : fba0 ; -- <0890> call :print_nt
    0c68 : 015f ; -- <0890> "
    0c69 : fc00 ; -- <0890> "

    0c6a : 03a0 ; -- <0892> a = :manual_trim_msg
    0c6b : 0c5a ; -- <0892> "
    0c6c : fba0 ; -- <0893> call :print_nt
    0c6d : 015f ; -- <0893> "
    0c6e : fc00 ; -- <0893> "
    0c6f : 6600 ; -- <0894> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    0c70 : 6ba0 ; -- <0894> ram a = $ram_run_manual_trim -- av_ad_lo = 376
    0c71 : 0178 ; -- <0894> "
    0c72 : 0017 ; -- <0894> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    0c73 : 0018 ; -- <0894> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle
    0c74 : fba0 ; -- <0895> call :put4x
    0c75 : 00d3 ; -- <0895> "
    0c76 : fc00 ; -- <0895> "

    0c77 : f80c ; -- <0897> pop rtna -- func report_plan
    0c78 : fc00 ; -- <0897> swapra = nop

-- ######## func interpret_maf -- = 0x0c79
    0c79 : 3002 ; -- <0930> push i -- func interpret_maf
    0c7a : 3004 ; -- <0930> push x -- "

-- offset and clamp the MAF ADC count to 0..511.
    0c7b : 0204 ; -- <0900> a = $maf_adc_channel

    0c7c : 0351 ; -- <0901> a = a<<1
    0c7d : 0626 ; -- <0901> b = 38
    0c7e : 6600 ; -- <0901> av_ad_hi = 0
    0c7f : 6b00 ; -- <0901> av_ad_lo = ad0
    0c80 : 0417 ; -- <0901> b = av_write_data
    0c81 : 0418 ; -- <0901> b = av_read_data

    0c82 : 0001 ; -- <0902> a = b
    0c83 : 0350 ; -- <0903> a = a>>1
    0c84 : 07a0 ; -- <0904> b = 0x01ff
    0c85 : 01ff ; -- <0904> "
--patch: do some averaging here, like interpret_tps.
    0c86 : c800 ; -- <0906> x = and
    0c87 : 1330 ; -- <0906> "
    0c88 : 6600 ; -- <0907> ram $ram_maf_adc_filtered = and -- av_ad_hi = 0
    0c89 : 6ba0 ; -- <0907> ram $ram_maf_adc_filtered = and -- av_ad_lo = 358
    0c8a : 0166 ; -- <0907> "
    0c8b : c800 ; -- <0907> ram $ram_maf_adc_filtered = and -- av_write_data = and
    0c8c : 5f30 ; -- <0907> "

-- recover linear flow from MAF ADC count using hi-res method,
-- for actual flow feeding into final puff multiply later.
-- 256 cell Brute-force lookup might take e.g. 80us to run.  That's 4 jf,
-- or 5% of ignition cycle at max RPM.
    0c8d : 6600 ; -- <0913> ram $ram_maf_valid = 0 -- av_ad_hi = 0
    0c8e : 6ba0 ; -- <0913> ram $ram_maf_valid = 0 -- av_ad_lo = 356
    0c8f : 0164 ; -- <0913> "
    0c90 : 5e00 ; -- <0913> ram $ram_maf_valid = 0 -- av_write_data = 0
    0c91 : 0a00 ; -- <0922> i = 0
-- :loop_3217 -- = 0x0c92

    0c92 : 0002 ; -- <0914> a = i

    0c93 : 0351 ; -- <0915> a = a<<1
    0c94 : 07a0 ; -- <0915> b = 2048
    0c95 : 0800 ; -- <0915> "
    0c96 : 67a0 ; -- <0915> av_ad_hi = 256
    0c97 : 0100 ; -- <0915> "
    0c98 : 6b00 ; -- <0915> av_ad_lo = ad0
    0c99 : 0417 ; -- <0915> b = av_write_data
    0c9a : 0418 ; -- <0915> b = av_read_data


    0c9b : 0001 ; -- <0920> a = b
    0c9c : 0404 ; -- <0920> b = x

    0c9d : e406 ; -- <0916> bn gt :else_3229
    0c9e : 0ca9 ; -- <0916> "

    0c9f : 6600 ; -- <0917> ram $ram_maf_flow_hi_res = i -- av_ad_hi = 0
    0ca0 : 6ba0 ; -- <0917> ram $ram_maf_flow_hi_res = i -- av_ad_lo = 360
    0ca1 : 0168 ; -- <0917> "
    0ca2 : 5c02 ; -- <0917> ram $ram_maf_flow_hi_res = i -- av_write_data = i
    0ca3 : 6600 ; -- <0918> ram $ram_maf_valid = 1 -- av_ad_hi = 0
    0ca4 : 6ba0 ; -- <0918> ram $ram_maf_valid = 1 -- av_ad_lo = 356
    0ca5 : 0164 ; -- <0918> "
    0ca6 : 5e01 ; -- <0918> ram $ram_maf_valid = 1 -- av_write_data = 1
    0ca7 : e00f ; -- <0919> jmp :maf_done
    0ca8 : 0cb2 ; -- <0919> "



    0ca9 : 0002 ; -- <0922> a = i
    0caa : 0601 ; -- <0922> b = 1
    0cab : c800 ; -- <0922> i = a+b
    0cac : 0b00 ; -- <0922> "


    0cad : 0002 ; -- <0922> a = i
    0cae : 07a0 ; -- <0922> b = $maf_map_num_cells
    0caf : 0100 ; -- <0922> "
    0cb0 : e005 ; -- <0922> br lt :loop_3217
    0cb1 : 0c92 ; -- <0922> "

-- :end_3217 -- = 0x0cb2
-- :maf_done -- = 0x0cb2

-- quantize linear flow from hi-res to lo-res for indexing into AFRC map rows.
-- Lo-res = hi-res >> 2.
    0cb2 : 6600 ; -- <0927> ram a = $ram_maf_flow_hi_res -- av_ad_hi = 0
    0cb3 : 6ba0 ; -- <0927> ram a = $ram_maf_flow_hi_res -- av_ad_lo = 360
    0cb4 : 0168 ; -- <0927> "
    0cb5 : 0017 ; -- <0927> ram a = $ram_maf_flow_hi_res -- a = av_write_data -- start read cycle
    0cb6 : 0018 ; -- <0927> ram a = $ram_maf_flow_hi_res -- a = av_read_data -- finish read cycle
    0cb7 : 0350 ; -- <0928> a = a>>1
    0cb8 : 6600 ; -- <0929> ram $ram_afrc_maf_row_idx = a>>1 -- av_ad_hi = 0
    0cb9 : 6ba0 ; -- <0929> ram $ram_afrc_maf_row_idx = a>>1 -- av_ad_lo = 362
    0cba : 016a ; -- <0929> "
    0cbb : 5f50 ; -- <0929> ram $ram_afrc_maf_row_idx = a>>1 -- av_write_data = a>>1

    0cbc : 100c ; -- <0931> pop x -- func interpret_maf
    0cbd : 080c ; -- <0931> pop i -- "
    0cbe : fc00 ; -- <0931> swapra = nop

-- ######## func interpret_tps -- = 0x0cbf
    0cbf : 3002 ; -- <1019> push i -- func interpret_tps
    0cc0 : 3004 ; -- <1019> push x -- "
    0cc1 : 3005 ; -- <1019> push y -- "
    0cc2 : 3006 ; -- <1019> push ga -- "
    0cc3 : 3007 ; -- <1019> push gb -- "
    0cc4 : 303e ; -- <1019> push rtna -- "

    0cc5 : 0206 ; -- <0933> a = $tps_adc_channel

    0cc6 : 0351 ; -- <0934> a = a<<1
    0cc7 : 0626 ; -- <0934> b = 38
    0cc8 : 6600 ; -- <0934> av_ad_hi = 0
    0cc9 : 6b00 ; -- <0934> av_ad_lo = ad0
    0cca : 0417 ; -- <0934> b = av_write_data
    0ccb : 0418 ; -- <0934> b = av_read_data

-- reverse the scale.
    0ccc : 03a0 ; -- <0936> a = 0x0fff
    0ccd : 0fff ; -- <0936> "
    0cce : c800 ; -- <0937> b = xor
    0ccf : 0738 ; -- <0937> "
-- memorize reading into slot 0 and shift history up 1 slot.  total up as we go.
    0cd0 : 1801 ; -- <0939> ga = b
    0cd1 : 1200 ; -- <0940> x = 0
    0cd2 : 0a00 ; -- <0951> i = 0
-- :loop_3282 -- = 0x0cd3

    0cd3 : 0002 ; -- <0941> a = i

    0cd4 : 0351 ; -- <0942> a = a<<1
    0cd5 : 07a0 ; -- <0942> b = 340
    0cd6 : 0154 ; -- <0942> "
    0cd7 : 6600 ; -- <0942> av_ad_hi = 0
    0cd8 : 6b00 ; -- <0942> av_ad_lo = ad0
    0cd9 : 0417 ; -- <0942> b = av_write_data
    0cda : 0418 ; -- <0942> b = av_read_data

    0cdb : 1c01 ; -- <0943> gb = b
    0cdc : 1401 ; -- <0944> y = b
    0cdd : c800 ; -- <0945> x = x+y
    0cde : 1320 ; -- <0945> "
    0cdf : 0002 ; -- <0946> a = i
    0ce0 : 0406 ; -- <0947> b = ga

    0ce1 : 0351 ; -- <0948> a = a<<1
    0ce2 : 3001 ; -- <0948> push b -- push b
    0ce3 : 07a0 ; -- <0948> b = 340
    0ce4 : 0154 ; -- <0948> "
    0ce5 : 6600 ; -- <0948> av_ad_hi = 0
    0ce6 : 6b00 ; -- <0948> av_ad_lo = ad0
    0ce7 : 5c0c ; -- <0948> pop av_write_data -- pop av_write_data

    0ce8 : 1807 ; -- <0949> ga = gb


    0ce9 : 0002 ; -- <0951> a = i
    0cea : 0601 ; -- <0951> b = 1
    0ceb : c800 ; -- <0951> i = a+b
    0cec : 0b00 ; -- <0951> "


    0ced : 0002 ; -- <0951> a = i
    0cee : 0604 ; -- <0951> b = $tps_history_len
    0cef : e005 ; -- <0951> br lt :loop_3282
    0cf0 : 0cd3 ; -- <0951> "

-- :end_3282 -- = 0x0cf1
-- memorize average.
    0cf1 : 0004 ; -- <0953> a = x
    0cf2 : 0350 ; -- <0954> a = a>>1
    0cf3 : 1b50 ; -- <0955> ga = a>>1
    0cf4 : 6600 ; -- <0956> ram $ram_tps_avg = ga -- av_ad_hi = 0
    0cf5 : 6ba0 ; -- <0956> ram $ram_tps_avg = ga -- av_ad_lo = 338
    0cf6 : 0152 ; -- <0956> "
    0cf7 : 5c06 ; -- <0956> ram $ram_tps_avg = ga -- av_write_data = ga
-- interpret state by comparing vs. reference table.
-- compare to idle reference.
    0cf8 : 0200 ; -- <0959> a = 0

    0cf9 : 0351 ; -- <0960> a = a<<1
    0cfa : 06b4 ; -- <0960> b = 180
    0cfb : 6600 ; -- <0960> av_ad_hi = 0
    0cfc : 6b00 ; -- <0960> av_ad_lo = ad0
    0cfd : 0417 ; -- <0960> b = av_write_data
    0cfe : 0418 ; -- <0960> b = av_read_data

    0cff : 0001 ; -- <0961> a = b
    0d00 : 0353 ; -- <0962> a = a>>4
    0d01 : c800 ; -- <0963> b = a+b
    0d02 : 0700 ; -- <0963> "

    0d03 : 0006 ; -- <0967> a = ga
    0d04 : 0401 ; -- <0967> b = b

    0d05 : e405 ; -- <0964> bn lt :else_3333
    0d06 : 0d0c ; -- <0964> "

    0d07 : 6600 ; -- <0965> ram $ram_tps_state = $tps_state_closed -- av_ad_hi = 0
    0d08 : 6ace ; -- <0965> ram $ram_tps_state = $tps_state_closed -- av_ad_lo = 206
    0d09 : 5e00 ; -- <0965> ram $ram_tps_state = $tps_state_closed -- av_write_data = 0
    0d0a : e00f ; -- <0966> jmp :end
    0d0b : 0d5e ; -- <0966> "

-- compare to wide open reference.
    0d0c : 020c ; -- <0969> a = ($num_tps_cells - 1)

    0d0d : 0351 ; -- <0970> a = a<<1
    0d0e : 06b4 ; -- <0970> b = 180
    0d0f : 6600 ; -- <0970> av_ad_hi = 0
    0d10 : 6b00 ; -- <0970> av_ad_lo = ad0
    0d11 : 0417 ; -- <0970> b = av_write_data
    0d12 : 0418 ; -- <0970> b = av_read_data

    0d13 : 1001 ; -- <0971> x = b
    0d14 : 0001 ; -- <0972> a = b
    0d15 : 0350 ; -- <0973> a = a>>1
    0d16 : 0350 ; -- <0974> a = a>>1
    0d17 : 0760 ; -- <0975> b = 0xffff
    0d18 : c800 ; -- <0976> y = xor
    0d19 : 1738 ; -- <0976> "

    0d1a : 0006 ; -- <0980> a = ga
    0d1b : c800 ; -- <0980> b = x+y
    0d1c : 0720 ; -- <0980> "

    0d1d : e406 ; -- <0977> bn gt :else_3357
    0d1e : 0d24 ; -- <0977> "

    0d1f : 6600 ; -- <0978> ram $ram_tps_state = $tps_state_open -- av_ad_hi = 0
    0d20 : 6ace ; -- <0978> ram $ram_tps_state = $tps_state_open -- av_ad_lo = 206
    0d21 : 5e04 ; -- <0978> ram $ram_tps_state = $tps_state_open -- av_write_data = 4
    0d22 : e00f ; -- <0979> jmp :end
    0d23 : 0d5e ; -- <0979> "

-- compare to current RPM's reference position.
--patch: rework this to compare to the next 2 tps reference cells instead of a fixed margin.
-- that way always prevents it from enriching while the tps is still within same ref cell.
    0d24 : 6600 ; -- <0984> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    0d25 : 6a7c ; -- <0984> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    0d26 : 2017 ; -- <0984> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    0d27 : 2018 ; -- <0984> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    0d28 : fba0 ; -- <0985> callx  find_rpm_cell  pa  a
    0d29 : 05b3 ; -- <0985> "
    0d2a : fc00 ; -- <0985> "
    0d2b : 0008 ; -- <0985> a = pa

    0d2c : 0351 ; -- <0986> a = a<<1
    0d2d : 06b4 ; -- <0986> b = 180
    0d2e : 6600 ; -- <0986> av_ad_hi = 0
    0d2f : 6b00 ; -- <0986> av_ad_lo = ad0
    0d30 : 0417 ; -- <0986> b = av_write_data
    0d31 : 0418 ; -- <0986> b = av_read_data

    0d32 : 1001 ; -- <0987> x = b
-- test if it's within 1/16 of reference.
    0d33 : 0004 ; -- <0989> a = x
    0d34 : 0353 ; -- <0990> a = a>>4
    0d35 : c800 ; -- <0991> a = a+b
    0d36 : 0300 ; -- <0991> "

    0d37 : 0000 ; -- <0995> a = a
    0d38 : 0406 ; -- <0995> b = ga

    0d39 : e406 ; -- <0992> bn gt :else_3385
    0d3a : 0d40 ; -- <0992> "

    0d3b : 6600 ; -- <0993> ram $ram_tps_state = $tps_state_cruise -- av_ad_hi = 0
    0d3c : 6ace ; -- <0993> ram $ram_tps_state = $tps_state_cruise -- av_ad_lo = 206
    0d3d : 5e01 ; -- <0993> ram $ram_tps_state = $tps_state_cruise -- av_write_data = 1
    0d3e : e00f ; -- <0994> jmp :end
    0d3f : 0d5e ; -- <0994> "

-- test if it's within 1/8 of reference.
    0d40 : 0004 ; -- <0997> a = x
    0d41 : 0350 ; -- <0998> a = a>>1
    0d42 : 0350 ; -- <0999> a = a>>1
    0d43 : 0350 ; -- <1000> a = a>>1
    0d44 : 0404 ; -- <1001> b = x
    0d45 : c800 ; -- <1002> a = a+b
    0d46 : 0300 ; -- <1002> "

    0d47 : 0000 ; -- <1006> a = a
    0d48 : 0406 ; -- <1006> b = ga

    0d49 : e406 ; -- <1003> bn gt :else_3401
    0d4a : 0d50 ; -- <1003> "

    0d4b : 6600 ; -- <1004> ram $ram_tps_state = $tps_state_accel1 -- av_ad_hi = 0
    0d4c : 6ace ; -- <1004> ram $ram_tps_state = $tps_state_accel1 -- av_ad_lo = 206
    0d4d : 5e02 ; -- <1004> ram $ram_tps_state = $tps_state_accel1 -- av_write_data = 2
    0d4e : e00f ; -- <1005> jmp :end
    0d4f : 0d5e ; -- <1005> "

-- test if it's within 1/2 of reference.
    0d50 : 0004 ; -- <1008> a = x
    0d51 : 0350 ; -- <1009> a = a>>1
    0d52 : 0404 ; -- <1010> b = x
    0d53 : c800 ; -- <1011> a = a+b
    0d54 : 0300 ; -- <1011> "

    0d55 : 0000 ; -- <1015> a = a
    0d56 : 0406 ; -- <1015> b = ga

    0d57 : e406 ; -- <1012> bn gt :else_3415
    0d58 : 0d5e ; -- <1012> "

    0d59 : 6600 ; -- <1013> ram $ram_tps_state = $tps_state_accel2 -- av_ad_hi = 0
    0d5a : 6ace ; -- <1013> ram $ram_tps_state = $tps_state_accel2 -- av_ad_lo = 206
    0d5b : 5e03 ; -- <1013> ram $ram_tps_state = $tps_state_accel2 -- av_write_data = 3
    0d5c : e00f ; -- <1014> jmp :end
    0d5d : 0d5e ; -- <1014> "

-- in this case leave ram_tps_state as-is.

-- :end -- = 0x0d5e

    0d5e : f80c ; -- <1020> pop rtna -- func interpret_tps
    0d5f : 1c0c ; -- <1020> pop gb -- "
    0d60 : 180c ; -- <1020> pop ga -- "
    0d61 : 140c ; -- <1020> pop y -- "
    0d62 : 100c ; -- <1020> pop x -- "
    0d63 : 080c ; -- <1020> pop i -- "
    0d64 : fc00 ; -- <1020> swapra = nop

-- ######## func jf_to_rpm -- = 0x0d65
    0d65 : 303e ; -- <1030> push rtna -- func jf_to_rpm

-- resolution = 32 rpm.
    0d66 : 0408 ; -- <1023> b = jiffies
    0d67 : 03a0 ; -- <1024> a = 0x5573
    0d68 : 5573 ; -- <1024> "
-- = 700000 >> 5
    0d69 : fba0 ; -- <1026> call :divide
    0d6a : 019c ; -- <1026> "
    0d6b : fc00 ; -- <1026> "
    0d6c : 0001 ; -- <1027> a = b
    0d6d : 0352 ; -- <1028> a = a<<4
    0d6e : 2351 ; -- <1029> rpm = a<<1

    0d6f : f80c ; -- <1031> pop rtna -- func jf_to_rpm
    0d70 : fc00 ; -- <1031> swapra = nop

-- ######## func check_engine_stop -- = 0x0d71
    0d71 : 303e ; -- <1047> push rtna -- func check_engine_stop

-- returns 1 if transitioned to stop, else 0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.

    0d72 : 0022 ; -- <1045> a = power_duty
    0d73 : 0680 ; -- <1045> b = ( 0x0080 )

    0d74 : e003 ; -- <1037> br and0z :else_3444
    0d75 : 0d89 ; -- <1037> "

    0d76 : 6600 ; -- <1038> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0d77 : 6a7e ; -- <1038> ram a = $ram_rpm_valid -- av_ad_lo = 126
    0d78 : 0017 ; -- <1038> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0d79 : 0018 ; -- <1038> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0d7a : 0000 ; -- <1044> a = a
    0d7b : 0600 ; -- <1044> b = 0

    0d7c : e407 ; -- <1039> bn eq :else_3452
    0d7d : 0d89 ; -- <1039> "

    0d7e : 6600 ; -- <1040> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0d7f : 6a8e ; -- <1040> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0d80 : f817 ; -- <1040> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0d81 : f818 ; -- <1040> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0d82 : fc00 ; -- <1041> swapra = nop
    0d83 : fba0 ; -- <1043> callx  init_plan_stop
    0d84 : 0344 ; -- <1043> "
    0d85 : fc00 ; -- <1043> "
    0d86 : 2201 ; -- <1044> did_stop = 1
    0d87 : f80c ; -- <1044> pop rtna -- rtn 1
    0d88 : fc00 ; -- <1043> swapra = nop


    0d89 : 2200 ; -- <1046> did_stop = 0
    0d8a : f80c ; -- <1046> pop rtna -- rtn 0
    0d8b : fc00 ; -- <1045> swapra = nop

    0d8c : f80c ; -- <1048> pop rtna -- func check_engine_stop
    0d8d : fc00 ; -- <1048> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d event_priority
-- src reg 000e soft_event
-- src reg 000f usage_count
-- src reg 0010 product_lo
-- src reg 0011 product_hi
-- src reg 0012 ustimer0
-- src reg 0013 mstimer0
-- src reg 0014 mstimer1
-- src reg 0015 mstimer2
-- src reg 0016 spi_data
-- src reg 0017 av_write_data
-- src reg 0018 av_read_data
-- src reg 0019 av_ad_hi
-- src reg 001a av_ad_lo
-- src reg 001c data_rom_data
-- src reg 001d fduart_data
-- src reg 001e fduart_status
-- src reg 001f leds
-- src reg 0020 board_ctrl
-- src reg 0021 anmux_ctrl
-- src reg 0022 power_duty
-- src reg 0023 ign_capture_jf
-- src reg 0024 ign_timeout_len_jf
-- src reg 0025 puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d event_priority
-- dest reg 000e soft_event
-- dest reg 000f usage_count
-- dest reg 0012 ustimer0
-- dest reg 0013 mstimer0
-- dest reg 0014 mstimer1
-- dest reg 0015 mstimer2
-- dest reg 0016 spi_data
-- dest reg 0017 av_write_data
-- dest reg 0019 av_ad_hi
-- dest reg 001a av_ad_lo
-- dest reg 001b data_rom_ad
-- dest reg 001d fduart_data
-- dest reg 001e fduart_status
-- dest reg 001f leds
-- dest reg 0020 board_ctrl
-- dest reg 0021 anmux_ctrl
-- dest reg 0022 power_duty
-- dest reg 0024 ign_timeout_len_jf
-- dest reg 0025 puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_last_anmux_data
-- ram 00000026 ram_last_adc_data
-- ram 00000036 ram_adc_chn_pending
-- ram 00000038 ram_adc_junk
-- ram 0000003a ram_dial_setting
-- ram 0000003c ram_power_down_at_min
-- ram 0000003e ram_relay_hold_at_pass
-- ram 00000040 ram_minutes_cnt
-- ram 00000042 ram_seconds_cnt
-- ram 00000044 ram_mcu_usage_cnt
-- ram 00000046 ram_text_flag_pointers
-- ram 00000056 ram_next_tfp_idx
-- ram 00000058 ram_ign_history_idx
-- ram 0000005a ram_ign_history_jf
-- ram 0000007a ram_ign_avg_jf
-- ram 0000007c ram_avg_rpm
-- ram 0000007e ram_rpm_valid
-- ram 00000080 ram_ign_bad_samples
-- ram 00000082 ram_ign_fastest_jf
-- ram 00000084 ram_ign_slowest_jf
-- ram 00000086 ram_next_puff_len_us
-- ram 00000088 ram_plan_name
-- ram 0000008a ram_puff_len_func
-- ram 0000008c ram_transition_func
-- ram 0000008e ram_destroy_plan_func
-- ram 00000090 ram_next_puff_len_us
-- ram 00000092 ram_puff_count
-- ram 00000094 ram_terminal_connected
-- ram 00000096 ram_warmup_timeout_at_pass
-- ram 00000098 ram_smap
-- ram 000000b2 ram_last_learn_second
-- ram 000000b4 ram_tps_reference
-- ram 000000ce ram_tps_state
-- ram 000000d0 ram_tps_closed_enrich_us
-- ram 000000ea ram_tps_cruise_enrich_us
-- ram 00000104 ram_tps_accel1_enrich_us
-- ram 0000011e ram_tps_accel2_enrich_us
-- ram 00000138 ram_tps_open_enrich_us
-- ram 00000152 ram_tps_avg
-- ram 00000154 ram_tps_history
-- ram 0000015c ram_lrns_ticks_remain
-- ram 0000015e ram_o2_state
-- ram 00000160 ram_o2_been_rich
-- ram 00000162 ram_o2_been_lean
-- ram 00000164 ram_maf_valid
-- ram 00000166 ram_maf_adc_filtered
-- ram 00000168 ram_maf_flow_hi_res
-- ram 0000016a ram_afrc_maf_row_idx
-- ram 0000016c ram_afrc_rpm_col_idx
-- ram 0000016e ram_block_temp_map_idx
-- ram 00000170 ram_block_temp_trim
-- ram 00000172 ram_afterstart_map_idx
-- ram 00000174 ram_afterstart_trim
-- ram 00000176 ram_stoich_learn_trim
-- ram 00000178 ram_run_manual_trim
-- ram 0000017a ram_total_trim
        
        END;
    
