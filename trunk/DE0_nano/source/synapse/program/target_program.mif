
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 0607 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.





-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 8750 RPM = about 80 jf between rising edges on chevy ignition white wire.  ignition counter noise blanking begins here in rev 627.
-- 5000 RPM = about 140 jf
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 0022 ; -- <0189> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0189>   
    0004 : 2020 ; -- <0189>   
    0005 : 2020 ; -- <0189>   
    0006 : 6120 ; -- <0189> a 
-- "       b"
    0007 : 2020 ; -- <0189>   
    0008 : 2020 ; -- <0189>   
    0009 : 2020 ; -- <0189>   
    000a : 6220 ; -- <0189> b 
-- "       i"
    000b : 2020 ; -- <0189>   
    000c : 2020 ; -- <0189>   
    000d : 2020 ; -- <0189>   
    000e : 6920 ; -- <0189> i 
-- "       j"
    000f : 2020 ; -- <0189>   
    0010 : 2020 ; -- <0189>   
    0011 : 2020 ; -- <0189>   
    0012 : 6a20 ; -- <0189> j 
-- "       x"
    0013 : 2020 ; -- <0189>   
    0014 : 2020 ; -- <0189>   
    0015 : 2020 ; -- <0189>   
    0016 : 7820 ; -- <0189> x 
-- "       y"
    0017 : 2020 ; -- <0189>   
    0018 : 2020 ; -- <0189>   
    0019 : 2020 ; -- <0189>   
    001a : 7920 ; -- <0189> y 
-- "      ga"
    001b : 2020 ; -- <0189>   
    001c : 2020 ; -- <0189>   
    001d : 2020 ; -- <0189>   
    001e : 6167 ; -- <0189> ag
-- "      gb"
    001f : 2020 ; -- <0189>   
    0020 : 2020 ; -- <0189>   
    0021 : 2020 ; -- <0189>   
    0022 : 6267 ; -- <0189> bg
-- "      pa"
    0023 : 2020 ; -- <0189>   
    0024 : 2020 ; -- <0189>   
    0025 : 2020 ; -- <0189>   
    0026 : 6170 ; -- <0189> ap
-- "      pb"
    0027 : 2020 ; -- <0189>   
    0028 : 2020 ; -- <0189>   
    0029 : 2020 ; -- <0189>   
    002a : 6270 ; -- <0189> bp
-- "      pc"
    002b : 2020 ; -- <0189>   
    002c : 2020 ; -- <0189>   
    002d : 2020 ; -- <0189>   
    002e : 6370 ; -- <0189> cp
-- "      pd"
    002f : 2020 ; -- <0189>   
    0030 : 2020 ; -- <0189>   
    0031 : 2020 ; -- <0189>   
    0032 : 6470 ; -- <0189> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0189> --
    0034 : 7372 ; -- <0189> sr
    0035 : 6b74 ; -- <0189> kt
    0036 : 2020 ; -- <0189>   
-- "  ev_pri"
    0037 : 2020 ; -- <0189>   
    0038 : 7665 ; -- <0189> ve
    0039 : 705f ; -- <0189> p_
    003a : 6972 ; -- <0189> ir
-- "softevnt"
    003b : 6f73 ; -- <0189> os
    003c : 7466 ; -- <0189> tf
    003d : 7665 ; -- <0189> ve
    003e : 746e ; -- <0189> tn
-- "   usage"
    003f : 2020 ; -- <0189>   
    0040 : 7520 ; -- <0189> u 
    0041 : 6173 ; -- <0189> as
    0042 : 6567 ; -- <0189> eg
-- "ustimer0"
    0043 : 7375 ; -- <0189> su
    0044 : 6974 ; -- <0189> it
    0045 : 656d ; -- <0189> em
    0046 : 3072 ; -- <0189> 0r
-- "mstimer0"
    0047 : 736d ; -- <0189> sm
    0048 : 6974 ; -- <0189> it
    0049 : 656d ; -- <0189> em
    004a : 3072 ; -- <0189> 0r
-- "mstimer1"
    004b : 736d ; -- <0189> sm
    004c : 6974 ; -- <0189> it
    004d : 656d ; -- <0189> em
    004e : 3172 ; -- <0189> 1r
-- "mstimer2"
    004f : 736d ; -- <0189> sm
    0050 : 6974 ; -- <0189> it
    0051 : 656d ; -- <0189> em
    0052 : 3272 ; -- <0189> 2r
-- "spi_data"
    0053 : 7073 ; -- <0189> ps
    0054 : 5f69 ; -- <0189> _i
    0055 : 6164 ; -- <0189> ad
    0056 : 6174 ; -- <0189> at
-- "--avwrdt"
    0057 : 2f2f ; -- <0189> --
    0058 : 7661 ; -- <0189> va
    0059 : 7277 ; -- <0189> rw
    005a : 7464 ; -- <0189> td
-- "av_rd_dt"
    005b : 7661 ; -- <0189> va
    005c : 725f ; -- <0189> r_
    005d : 5f64 ; -- <0189> _d
    005e : 7464 ; -- <0189> td
-- "av_ad_hi"
    005f : 7661 ; -- <0189> va
    0060 : 615f ; -- <0189> a_
    0061 : 5f64 ; -- <0189> _d
    0062 : 6968 ; -- <0189> ih
-- "av_ad_lo"
    0063 : 7661 ; -- <0189> va
    0064 : 615f ; -- <0189> a_
    0065 : 5f64 ; -- <0189> _d
    0066 : 6f6c ; -- <0189> ol
-- "--uartdt"
    0067 : 2f2f ; -- <0189> --
    0068 : 6175 ; -- <0189> au
    0069 : 7472 ; -- <0189> tr
    006a : 7464 ; -- <0189> td
-- "uartstat"
    006b : 6175 ; -- <0189> au
    006c : 7472 ; -- <0189> tr
    006d : 7473 ; -- <0189> ts
    006e : 7461 ; -- <0189> ta
-- "    leds"
    006f : 2020 ; -- <0189>   
    0070 : 2020 ; -- <0189>   
    0071 : 656c ; -- <0189> el
    0072 : 7364 ; -- <0189> sd
-- "brd_ctrl"
    0073 : 7262 ; -- <0189> rb
    0074 : 5f64 ; -- <0189> _d
    0075 : 7463 ; -- <0189> tc
    0076 : 6c72 ; -- <0189> lr
-- "   anmux"
    0077 : 2020 ; -- <0189>   
    0078 : 6120 ; -- <0189> a 
    0079 : 6d6e ; -- <0189> mn
    007a : 7875 ; -- <0189> xu
-- "pwr_duty"
    007b : 7770 ; -- <0189> wp
    007c : 5f72 ; -- <0189> _r
    007d : 7564 ; -- <0189> ud
    007e : 7974 ; -- <0189> yt
-- "igntmcap"
    007f : 6769 ; -- <0189> gi
    0080 : 746e ; -- <0189> tn
    0081 : 636d ; -- <0189> cm
    0082 : 7061 ; -- <0189> pa
-- "igntmout"
    0083 : 6769 ; -- <0189> gi
    0084 : 746e ; -- <0189> tn
    0085 : 6f6d ; -- <0189> om
    0086 : 7475 ; -- <0189> tu
-- "puflenus"
    0087 : 7570 ; -- <0189> up
    0088 : 6c66 ; -- <0189> lf
    0089 : 6e65 ; -- <0189> ne
    008a : 7375 ; -- <0189> su

-- string resources
-- :boot_msg -- = 0x008b
-- "TGT\r\n\x0"
    008b : 4754 ; -- <0193> GT
    008c : 0d54 ; -- <0193>  T
    008d : 000a ; -- <0193>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x008e
-- initialize prior to polling loop, for minimum latency.
    008e : 07a0 ; -- <0006> b = :event_table
    008f : 062f ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0090
    0090 : 000d ; -- <0009> a = event_priority
    0091 : e000 ; -- <0010> br 0z :poll_events_again
    0092 : 0090 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0093 : 3400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0094 : d300 ; -- <0015> fetch rtna from ad0
    0095 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0096 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0097 : 6fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0098 : ffc0 ; -- <0021> "
    0099 : e00f ; -- <0021> error_halt_code 0xffc0
    009a : 0099 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x009b
    009b : 3004 ; -- <0046> push x -- func putchar_fduart

    009c : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    009d : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x009e
    009e : 041a ; -- <0053> b = fduart_status
    009f : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    00a0 : 009e ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    00a1 : 6404 ; -- <0057> fduart_data = x
    00a2 : 100c ; -- <0058> pop x -- end_func
    00a3 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x00a4
-- wait until FIFO is populated.
    00a4 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x00a5
    00a5 : 041a ; -- <0066> b = fduart_status
    00a6 : e403 ; -- <0067> bn and0z :wait_for_busy
    00a7 : 00a5 ; -- <0067> "
    00a8 : 0019 ; -- <0068> a = fduart_data
    00a9 : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x00aa
-- check for FIFO is populated.
    00aa : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    00ab : 041a ; -- <0075> b = fduart_status
    00ac : e403 ; -- <0076> bn and0z :none
    00ad : 00b0 ; -- <0076> "
    00ae : 0019 ; -- <0077> a = fduart_data
    00af : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x00b0
    00b0 : 0360 ; -- <0080> a = -1
    00b1 : fc00 ; -- <0080> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00b2
-- set & enable analog muxer
    00b2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00b3 : c800 ; -- <0008> anmux_ctrl = or
    00b4 : 7734 ; -- <0008> "
    00b5 : fc00 ; -- <0008> swapra = nop

-- ######## func anmux_get_chn -- = 0x00b6
    00b6 : 001d ; -- <0012> a = anmux_ctrl
    00b7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00b8 : c800 ; -- <0014> a = and
    00b9 : 0330 ; -- <0014> "
    00ba : fc00 ; -- <0014> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00bb
-- "0123456789abcdef"
    00bb : 3130 ; -- <0050> 10
    00bc : 3332 ; -- <0050> 32
    00bd : 3534 ; -- <0050> 54
    00be : 3736 ; -- <0050> 76
    00bf : 3938 ; -- <0050> 98
    00c0 : 6261 ; -- <0050> ba
    00c1 : 6463 ; -- <0050> dc
    00c2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00c3
    00c3 : 3004 ; -- <0054> push x -- func put4x
    00c4 : 3006 ; -- <0054> push g6 -- "
    00c5 : 303e ; -- <0054> push rtna -- "
    00c6 : 13a0 ; -- <0055> x = :hexdigits
    00c7 : 00bb ; -- <0055> "

    00c8 : 1800 ; -- <0057> g6 = a
    00c9 : 07a0 ; -- <0058> b = 0xF000
    00ca : f000 ; -- <0058> "
    00cb : c800 ; -- <0059> a = and
    00cc : 0330 ; -- <0059> "
    00cd : 0353 ; -- <0060> a = a>>4
    00ce : 0353 ; -- <0061> a = a>>4
    00cf : 0353 ; -- <0062> a = a>>4
    00d0 : fba0 ; -- <0063> call fetch_byte
    00d1 : 01dc ; -- <0063> "
    00d2 : fc00 ; -- <0063> "
    00d3 : fba0 ; -- <0064> putchar a
    00d4 : 009b ; -- <0064> "
    00d5 : fc00 ; -- <0064> "

    00d6 : 0006 ; -- <0066> a = g6
    00d7 : 07a0 ; -- <0067> b = 0x0F00
    00d8 : 0f00 ; -- <0067> "
    00d9 : c800 ; -- <0068> a = and
    00da : 0330 ; -- <0068> "
    00db : 0353 ; -- <0069> a = a>>4
    00dc : 0353 ; -- <0070> a = a>>4
    00dd : fba0 ; -- <0071> call fetch_byte
    00de : 01dc ; -- <0071> "
    00df : fc00 ; -- <0071> "
    00e0 : fba0 ; -- <0072> putchar a
    00e1 : 009b ; -- <0072> "
    00e2 : fc00 ; -- <0072> "

    00e3 : 0006 ; -- <0074> a = g6
    00e4 : 06f0 ; -- <0075> b = 0x00F0
    00e5 : c800 ; -- <0076> a = and
    00e6 : 0330 ; -- <0076> "
    00e7 : 0353 ; -- <0077> a = a>>4
    00e8 : fba0 ; -- <0078> call fetch_byte
    00e9 : 01dc ; -- <0078> "
    00ea : fc00 ; -- <0078> "
    00eb : fba0 ; -- <0079> putchar a
    00ec : 009b ; -- <0079> "
    00ed : fc00 ; -- <0079> "

    00ee : 0006 ; -- <0081> a = g6
    00ef : 060f ; -- <0082> b = 0x000F
    00f0 : c800 ; -- <0083> a = and
    00f1 : 0330 ; -- <0083> "
    00f2 : fba0 ; -- <0084> call fetch_byte
    00f3 : 01dc ; -- <0084> "
    00f4 : fc00 ; -- <0084> "
    00f5 : fba0 ; -- <0085> putchar a
    00f6 : 009b ; -- <0085> "
    00f7 : fc00 ; -- <0085> "

    00f8 : f80c ; -- <0087> pop rtna -- end_func
    00f9 : 180c ; -- <0087> pop g6 -- "
    00fa : 100c ; -- <0087> pop x -- "
    00fb : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00fc
    00fc : 3002 ; -- <0091> push i -- func get4x
    00fd : 3003 ; -- <0091> push j -- "
    00fe : 3004 ; -- <0091> push x -- "
    00ff : 3005 ; -- <0091> push y -- "
    0100 : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    0101 : 1604 ; -- <0094> y = 4
-- :again -- = 0x0102
    0102 : fba0 ; -- <0096> getchar
    0103 : 00a4 ; -- <0096> "
    0104 : fc00 ; -- <0096> "
    0105 : 13a0 ; -- <0097> x = :hexdigits
    0106 : 00bb ; -- <0097> "
    0107 : 0a10 ; -- <0098> i = 16
    0108 : fba0 ; -- <0099> call :find_in_fetch
    0109 : 01f0 ; -- <0099> "
    010a : fc00 ; -- <0099> "
    010b : 0760 ; -- <0100> b = -1
    010c : e007 ; -- <0101> br eq :fail
    010d : 0121 ; -- <0101> "
    010e : 0400 ; -- <0102> b = a
    010f : 0003 ; -- <0103> a = j
    0110 : 0352 ; -- <0104> a = a<<4
    0111 : c800 ; -- <0105> j = or
    0112 : 0f34 ; -- <0105> "
    0113 : 1360 ; -- <0106> x = -1
    0114 : c800 ; -- <0107> y = x+y
    0115 : 1720 ; -- <0107> "
    0116 : 0005 ; -- <0108> a = y
    0117 : e400 ; -- <0109> bn az :again
    0118 : 0102 ; -- <0109> "
    0119 : 0003 ; -- <0110> a = j
    011a : 0600 ; -- <0111> b = 0
    011b : f80c ; -- <0112> pop rtna -- rtn
    011c : 140c ; -- <0112> pop y -- "
    011d : 100c ; -- <0112> pop x -- "
    011e : 0c0c ; -- <0112> pop j -- "
    011f : 080c ; -- <0112> pop i -- "
    0120 : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x0121
    0121 : 0760 ; -- <0114> b = -1
    0122 : f80c ; -- <0115> pop rtna -- end_func
    0123 : 140c ; -- <0115> pop y -- "
    0124 : 100c ; -- <0115> pop x -- "
    0125 : 0c0c ; -- <0115> pop j -- "
    0126 : 080c ; -- <0115> pop i -- "
    0127 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0128
    0128 : 3002 ; -- <0121> push i -- func print_fixed
    0129 : 3003 ; -- <0121> push j -- "
    012a : 3004 ; -- <0121> push x -- "
    012b : 3005 ; -- <0121> push y -- "
    012c : 3006 ; -- <0121> push g6 -- "
    012d : 303e ; -- <0121> push rtna -- "
    012e : 0800 ; -- <0122> i = a
    012f : 0e01 ; -- <0123> j = 1
    0130 : 1001 ; -- <0124> x = b
    0131 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0132
    0132 : e002 ; -- <0127> br xz :done
    0133 : 0148 ; -- <0127> "
    0134 : 1320 ; -- <0128> x = ad2
    0135 : d002 ; -- <0129> fetch g6 from i
    0136 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0137 : 0006 ; -- <0131> a = g6 -- putchar g6
    0138 : fba0 ; -- <0131> putchar g6
    0139 : 009b ; -- <0131> "
    013a : fc00 ; -- <0131> "
    013b : e002 ; -- <0132> br xz :done
    013c : 0148 ; -- <0132> "
    013d : 1320 ; -- <0133> x = ad2
    013e : 0006 ; -- <0134> a = g6
    013f : 0353 ; -- <0135> a = a>>4
    0140 : 0353 ; -- <0136> a = a>>4
    0141 : fba0 ; -- <0137> putchar a
    0142 : 009b ; -- <0137> "
    0143 : fc00 ; -- <0137> "
    0144 : c800 ; -- <0138> i = i+j
    0145 : 0b10 ; -- <0138> "
    0146 : e00f ; -- <0139> jmp :next_word
    0147 : 0132 ; -- <0139> "
-- :done -- = 0x0148
    0148 : f80c ; -- <0141> pop rtna -- end_func
    0149 : 180c ; -- <0141> pop g6 -- "
    014a : 140c ; -- <0141> pop y -- "
    014b : 100c ; -- <0141> pop x -- "
    014c : 0c0c ; -- <0141> pop j -- "
    014d : 080c ; -- <0141> pop i -- "
    014e : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x014f
    014f : 3002 ; -- <0147> push i -- func print_nt
    0150 : 3003 ; -- <0147> push j -- "
    0151 : 3004 ; -- <0147> push x -- "
    0152 : 303e ; -- <0147> push rtna -- "
    0153 : 0800 ; -- <0148> i = a
    0154 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0155
    0155 : d002 ; -- <0151> fetch x from i
    0156 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0157 : 0004 ; -- <0153> a = x
    0158 : 06ff ; -- <0154> b = 0xff
    0159 : e003 ; -- <0155> br and0z :done
    015a : 016b ; -- <0155> "
    015b : fba0 ; -- <0156> putchar a
    015c : 009b ; -- <0156> "
    015d : fc00 ; -- <0156> "
    015e : 0004 ; -- <0157> a = x
    015f : 0353 ; -- <0158> a = a>>4
    0160 : 0353 ; -- <0159> a = a>>4
    0161 : 06ff ; -- <0160> b = 0xff
    0162 : e003 ; -- <0161> br and0z :done
    0163 : 016b ; -- <0161> "
    0164 : fba0 ; -- <0162> putchar a
    0165 : 009b ; -- <0162> "
    0166 : fc00 ; -- <0162> "
    0167 : c800 ; -- <0163> i = i+j
    0168 : 0b10 ; -- <0163> "
    0169 : e00f ; -- <0164> jmp :next_word
    016a : 0155 ; -- <0164> "
-- :done -- = 0x016b
    016b : f80c ; -- <0166> pop rtna -- end_func
    016c : 100c ; -- <0166> pop x -- "
    016d : 0c0c ; -- <0166> pop j -- "
    016e : 080c ; -- <0166> pop i -- "
    016f : fc00 ; -- <0165> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0170
    0170 : 3002 ; -- <0004> push i -- func multiply
    0171 : 3003 ; -- <0004> push j -- "
    0172 : 3004 ; -- <0004> push x -- "
    0173 : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0174 : 1000 ; -- <0009> x = a
    0175 : 1401 ; -- <0010> y = b
    0176 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0177
    0177 : e002 ; -- <0013> br xz :done
    0178 : 0186 ; -- <0013> "
    0179 : 0004 ; -- <0014> a = x
    017a : 0601 ; -- <0015> b = 1
    017b : e003 ; -- <0016> br and0z :skip_add
    017c : 0180 ; -- <0016> "
    017d : 0c05 ; -- <0017> j = y
    017e : c800 ; -- <0018> i = i+j
    017f : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0180
    0180 : 0004 ; -- <0020> a = x
    0181 : 1350 ; -- <0021> x = a>>1
    0182 : 0005 ; -- <0022> a = y
    0183 : 1751 ; -- <0023> y = a<<1
    0184 : e00f ; -- <0024> jmp :again
    0185 : 0177 ; -- <0024> "
-- :done -- = 0x0186
    0186 : 0002 ; -- <0026> a = i
    0187 : 140c ; -- <0027> pop y -- end_func
    0188 : 100c ; -- <0027> pop x -- "
    0189 : 0c0c ; -- <0027> pop j -- "
    018a : 080c ; -- <0027> pop i -- "
    018b : fc00 ; -- <0026> swapra = nop

-- ######## func divide -- = 0x018c
    018c : 3002 ; -- <0029> push i -- func divide
    018d : 3003 ; -- <0029> push j -- "
    018e : 3004 ; -- <0029> push x -- "
    018f : 3005 ; -- <0029> push y -- "
    0190 : 3006 ; -- <0029> push g6 -- "
    0191 : 3007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0192 : e005 ; -- <0037> br lt :zero
    0193 : 01cd ; -- <0037> "
    0194 : e000 ; -- <0038> br az :zero
    0195 : 01cd ; -- <0038> "
    0196 : 1000 ; -- <0039> x = a
--    g7 = x
    0197 : 0001 ; -- <0041> a = b
    0198 : e000 ; -- <0042> br az :zero
    0199 : 01cd ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    019a : 0404 ; -- <0058> b = x
    019b : 0a00 ; -- <0059> i = 0
    019c : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x019d
    019d : e006 ; -- <0062> br gt :shift_done
    019e : 01a3 ; -- <0062> "
    019f : 0351 ; -- <0063> a = a<<1
    01a0 : 0b10 ; -- <0064> i = ad1
    01a1 : e00f ; -- <0065> jmp :shift_again
    01a2 : 019d ; -- <0065> "
-- :shift_done -- = 0x01a3
    01a3 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    01a4 : 1e00 ; -- <0078> g7 = 0
    01a5 : 0f60 ; -- <0079> j = -1
-- :again -- = 0x01a6
    01a6 : e001 ; -- <0081> br iz :done
    01a7 : 01c4 ; -- <0081> "
    01a8 : 0006 ; -- <0082> a = g6
    01a9 : 0404 ; -- <0083> b = x
    01aa : e006 ; -- <0084> br gt :result0
    01ab : 01bc ; -- <0084> "
-- temp does fit; output a 1.
    01ac : 0007 ; -- <0086> a = g7
    01ad : 0351 ; -- <0087> a = a<<1
    01ae : 0601 ; -- <0088> b = 1
    01af : c800 ; -- <0089> g7 = or
    01b0 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    01b1 : 0006 ; -- <0091> a = g6
    01b2 : 0760 ; -- <0092> b = -1
    01b3 : c800 ; -- <0093> a = xor
    01b4 : 0338 ; -- <0093> "
    01b5 : 0601 ; -- <0094> b = 1
    01b6 : c800 ; -- <0095> y = a+b
    01b7 : 1700 ; -- <0095> "
    01b8 : c800 ; -- <0096> x = x+y
    01b9 : 1320 ; -- <0096> "
    01ba : e00f ; -- <0097> jmp :next
    01bb : 01be ; -- <0097> "
-- :result0 -- = 0x01bc
-- temp does not fit; output a 0.
    01bc : 0007 ; -- <0100> a = g7
    01bd : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01be
    01be : 0006 ; -- <0104> a = g6
    01bf : 1b50 ; -- <0105> g6 = a>>1
    01c0 : c800 ; -- <0106> i = i+j
    01c1 : 0b10 ; -- <0106> "
    01c2 : e00f ; -- <0107> jmp :again
    01c3 : 01a6 ; -- <0107> "

-- :done -- = 0x01c4
    01c4 : 0407 ; -- <0110> b = g7
    01c5 : 0004 ; -- <0111> a = x
    01c6 : 1c0c ; -- <0112> pop g7 -- rtn
    01c7 : 180c ; -- <0112> pop g6 -- "
    01c8 : 140c ; -- <0112> pop y -- "
    01c9 : 100c ; -- <0112> pop x -- "
    01ca : 0c0c ; -- <0112> pop j -- "
    01cb : 080c ; -- <0112> pop i -- "
    01cc : fc00 ; -- <0111> swapra = nop

-- :zero -- = 0x01cd
    01cd : 0600 ; -- <0115> b = 0
    01ce : 1c0c ; -- <0116> pop g7 -- rtn
    01cf : 180c ; -- <0116> pop g6 -- "
    01d0 : 140c ; -- <0116> pop y -- "
    01d1 : 100c ; -- <0116> pop x -- "
    01d2 : 0c0c ; -- <0116> pop j -- "
    01d3 : 080c ; -- <0116> pop i -- "
    01d4 : fc00 ; -- <0115> swapra = nop
    01d5 : 1c0c ; -- <0117> pop g7 -- end_func
    01d6 : 180c ; -- <0117> pop g6 -- "
    01d7 : 140c ; -- <0117> pop y -- "
    01d8 : 100c ; -- <0117> pop x -- "
    01d9 : 0c0c ; -- <0117> pop j -- "
    01da : 080c ; -- <0117> pop i -- "
    01db : fc00 ; -- <0116> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01dc
    01dc : 0601 ; -- <0005> b = 1
    01dd : e003 ; -- <0006> br and0z :pick_byte_even
    01de : 01e7 ; -- <0006> "
    01df : 0350 ; -- <0007> a = a>>1
    01e0 : 0404 ; -- <0008> b = x
    01e1 : c800 ; -- <0009> fetch a from a+b
    01e2 : d300 ; -- <0009> "
    01e3 : 03b0 ; -- <0009> "
    01e4 : 0353 ; -- <0010> a = a>>4
    01e5 : 0353 ; -- <0011> a = a>>4
    01e6 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x01e7
    01e7 : 0350 ; -- <0014> a = a>>1
    01e8 : 0404 ; -- <0015> b = x
    01e9 : c800 ; -- <0016> fetch a from a+b
    01ea : d300 ; -- <0016> "
    01eb : 03b0 ; -- <0016> "
    01ec : 06ff ; -- <0017> b = 0xff
    01ed : c800 ; -- <0018> a = and
    01ee : 0330 ; -- <0018> "
    01ef : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01f0
    01f0 : 3002 ; -- <0027> push i -- func find_in_fetch
    01f1 : 3003 ; -- <0027> push j -- "
    01f2 : 3005 ; -- <0027> push y -- "
    01f3 : 303e ; -- <0027> push rtna -- "
    01f4 : 1400 ; -- <0028> y = a
    01f5 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01f6
    01f6 : e001 ; -- <0031> br iz :fail
    01f7 : 0206 ; -- <0031> "
    01f8 : 0b10 ; -- <0032> i = ad1
    01f9 : 0002 ; -- <0033> a = i
    01fa : fba0 ; -- <0034> call :fetch_byte
    01fb : 01dc ; -- <0034> "
    01fc : fc00 ; -- <0034> "
    01fd : 0405 ; -- <0035> b = y
    01fe : e407 ; -- <0036> bn eq :again
    01ff : 01f6 ; -- <0036> "
-- :found -- = 0x0200
    0200 : 0002 ; -- <0038> a = i
    0201 : f80c ; -- <0039> pop rtna -- rtn
    0202 : 140c ; -- <0039> pop y -- "
    0203 : 0c0c ; -- <0039> pop j -- "
    0204 : 080c ; -- <0039> pop i -- "
    0205 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0206
    0206 : 0360 ; -- <0041> a = -1
    0207 : f80c ; -- <0042> pop rtna -- end_func
    0208 : 140c ; -- <0042> pop y -- "
    0209 : 0c0c ; -- <0042> pop j -- "
    020a : 080c ; -- <0042> pop i -- "
    020b : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x020c
    020c : 3004 ; -- <0002> push x -- func spinwait
    020d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    020e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x020f
    020f : 13a0 ; -- <0007> x = 16666
    0210 : 411a ; -- <0007> "
    0211 : 1760 ; -- <0008> y = -1
    0212 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0213
-- use of the ad2 name overrides auto-nop here.
    0213 : 1320 ; -- <0012> x = ad2
    0214 : e402 ; -- <0013> bn xz :spinwait_inner
    0215 : 0213 ; -- <0013> "
    0216 : c800 ; -- <0014> a = a+b
    0217 : 0300 ; -- <0014> "
    0218 : e400 ; -- <0015> bn az :spinwait_outer
    0219 : 020f ; -- <0015> "
    021a : 140c ; -- <0016> pop y -- end_func
    021b : 100c ; -- <0016> pop x -- "
    021c : fc00 ; -- <0015> swapra = nop




-- :cmd_table -- = 0x021d
-- "  hello"
    021d : 2020 ; -- <0005>   
    021e : 6568 ; -- <0005> eh
    021f : 6c6c ; -- <0005> ll
    0220 : 006f ; -- <0005>  o
    0221 : 02bd ; -- <0006> ([label hello_cmd])
-- "  plstp"
    0222 : 2020 ; -- <0007>   
    0223 : 6c70 ; -- <0007> lp
    0224 : 7473 ; -- <0007> ts
    0225 : 0070 ; -- <0007>  p
    0226 : 02c1 ; -- <0008> ([label set_plan_stop_cmd])
-- "   plcr"
    0227 : 2020 ; -- <0009>   
    0228 : 7020 ; -- <0009> p 
    0229 : 636c ; -- <0009> cl
    022a : 0072 ; -- <0009>  r
    022b : 02cc ; -- <0010> ([label set_plan_crank_cmd])
-- "   plwm"
    022c : 2020 ; -- <0011>   
    022d : 7020 ; -- <0011> p 
    022e : 776c ; -- <0011> wl
    022f : 006d ; -- <0011>  m
    0230 : 02d7 ; -- <0012> ([label set_plan_warmup_cmd])
-- "   plrn"
    0231 : 2020 ; -- <0013>   
    0232 : 7020 ; -- <0013> p 
    0233 : 726c ; -- <0013> rl
    0234 : 006e ; -- <0013>  n
    0235 : 02e2 ; -- <0014> ([label set_plan_run_cmd])
-- "   plln"
    0236 : 2020 ; -- <0015>   
    0237 : 7020 ; -- <0015> p 
    0238 : 6c6c ; -- <0015> ll
    0239 : 006e ; -- <0015>  n
    023a : 02ed ; -- <0016> ([label set_plan_learn_cmd])
-- " clsmap"
    023b : 6320 ; -- <0017> c 
    023c : 736c ; -- <0017> sl
    023d : 616d ; -- <0017> am
    023e : 0070 ; -- <0017>  p
    023f : 05f2 ; -- <0018> ([label clear_smap_cmd])
-- "   smap"
    0240 : 2020 ; -- <0019>   
    0241 : 7320 ; -- <0019> s 
    0242 : 616d ; -- <0019> am
    0243 : 0070 ; -- <0019>  p
    0244 : 05bd ; -- <0020> ([label dump_smap_cmd])
-- "\x0\x0"
    0245 : 0000 ; -- <0021>   


-- ######## func parse_key -- = 0x0246
    0246 : 3002 ; -- <0039> push i -- func parse_key
    0247 : 3004 ; -- <0039> push x -- "
    0248 : 3005 ; -- <0039> push y -- "
    0249 : 303e ; -- <0039> push rtna -- "

-- memorize into ram_key_buf, pushing down existing content.
    024a : 1008 ; -- <0026> x = key
    024b : 0a07 ; -- <0035> i = $key_buf_max
-- :loop_587 -- = 0x024c

    024c : 0002 ; -- <0027> a = i

    024d : 0351 ; -- <0028> a = a<<1
    024e : 0600 ; -- <0028> b = 0
    024f : 5e00 ; -- <0028> av_ad_hi = 0
    0250 : 6300 ; -- <0028> av_ad_lo = ad0
    0251 : 0415 ; -- <0028> b = av_write_data
    0252 : 0416 ; -- <0028> b = av_read_data

    0253 : 1401 ; -- <0029> y = b
    0254 : 0002 ; -- <0030> a = i
    0255 : 0404 ; -- <0031> b = x

    0256 : 0351 ; -- <0032> a = a<<1
    0257 : 3001 ; -- <0032> push b -- push b
    0258 : 0600 ; -- <0032> b = 0
    0259 : 5e00 ; -- <0032> av_ad_hi = 0
    025a : 6300 ; -- <0032> av_ad_lo = ad0
    025b : 540c ; -- <0032> pop av_write_data -- pop av_write_data

    025c : 1005 ; -- <0033> x = y


    025d : 0002 ; -- <0035> a = i
    025e : 0600 ; -- <0035> b = 0
    025f : e007 ; -- <0035> br eq :end_587
    0260 : 0269 ; -- <0035> "


    0261 : 0002 ; -- <0035> a = i
    0262 : 0760 ; -- <0035> b = -1
    0263 : c800 ; -- <0035> i = a+b
    0264 : 0b00 ; -- <0035> "


    0265 : 0002 ; -- <0035> a = i
    0266 : 0600 ; -- <0035> b = 0
    0267 : e405 ; -- <0035> bn lt :loop_587
    0268 : 024c ; -- <0035> "

-- :end_587 -- = 0x0269

    0269 : 0008 ; -- <0038> a = key
    026a : 060d ; -- <0038> b = 13

    026b : e407 ; -- <0036> bn eq :else_619
    026c : 0270 ; -- <0036> "

    026d : fba0 ; -- <0037> callx  parse_command
    026e : 0277 ; -- <0037> "
    026f : fc00 ; -- <0037> "


    0270 : f80c ; -- <0040> pop rtna -- func parse_key
    0271 : 140c ; -- <0040> pop y -- "
    0272 : 100c ; -- <0040> pop x -- "
    0273 : 080c ; -- <0040> pop i -- "
    0274 : fc00 ; -- <0040> swapra = nop

-- :cmd_ack_msg -- = 0x0275
-- "OK\x0"
    0275 : 4b4f ; -- <0042> KO
    0276 : 0000 ; -- <0042>   

-- ######## func parse_command -- = 0x0277
    0277 : 3002 ; -- <0083> push i -- func parse_command
    0278 : 3004 ; -- <0083> push x -- "
    0279 : 3005 ; -- <0083> push y -- "
    027a : 303e ; -- <0083> push rtna -- "

    027b : 13a0 ; -- <0045> x = :cmd_table
    027c : 021d ; -- <0045> "
-- :next_cmd -- = 0x027d
    027d : d004 ; -- <0047> fetch a from x
    027e : 03b0 ; -- <0047> "
    027f : e000 ; -- <0048> br az :done
    0280 : 02b8 ; -- <0048> "

    0281 : 0a00 ; -- <0064> i = 0
-- :loop_641 -- = 0x0282

    0282 : 0002 ; -- <0050> a = i
    0283 : fba0 ; -- <0051> call :fetch_byte
    0284 : 01dc ; -- <0051> "
    0285 : fc00 ; -- <0051> "
    0286 : 1400 ; -- <0052> y = a
    0287 : 0620 ; -- <0053> b = 32 -- asc b = " "

    0288 : 0000 ; -- <0062> a = a
    0289 : 0401 ; -- <0062> b = b

    028a : e007 ; -- <0054> br eq :else_650
    028b : 0299 ; -- <0054> "

    028c : 062a ; -- <0055> b = 42 -- asc b = "*"
    028d : e007 ; -- <0056> br eq :matched
    028e : 02a1 ; -- <0056> "
-- parameter character.  succeed early.
    028f : 0002 ; -- <0058> a = i

    0290 : 0351 ; -- <0059> a = a<<1
    0291 : 0600 ; -- <0059> b = 0
    0292 : 5e00 ; -- <0059> av_ad_hi = 0
    0293 : 6300 ; -- <0059> av_ad_lo = ad0
    0294 : 0415 ; -- <0059> b = av_write_data
    0295 : 0416 ; -- <0059> b = av_read_data

    0296 : 0005 ; -- <0060> a = y
    0297 : e407 ; -- <0061> bn eq :no_match
    0298 : 02ad ; -- <0061> "



    0299 : 0002 ; -- <0064> a = i
    029a : 0601 ; -- <0064> b = 1
    029b : c800 ; -- <0064> i = a+b
    029c : 0b00 ; -- <0064> "


    029d : 0002 ; -- <0064> a = i
    029e : 0607 ; -- <0064> b = $key_buf_max
    029f : e005 ; -- <0064> br lt :loop_641
    02a0 : 0282 ; -- <0064> "

-- :end_641 -- = 0x02a1

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x02a1
    02a1 : 23a0 ; -- <0068> pa = :cmd_ack_msg
    02a2 : 0275 ; -- <0068> "
    02a3 : fba0 ; -- <0068> callx  set_text_flag  :cmd_ack_msg
    02a4 : 0930 ; -- <0068> "
    02a5 : fc00 ; -- <0068> "
    02a6 : 1604 ; -- <0069> y = ($key_buf_len / 2)
    02a7 : c800 ; -- <0070> fetch rtna from x+y
    02a8 : d320 ; -- <0070> "
    02a9 : fbb0 ; -- <0070> "
    02aa : fc00 ; -- <0071> swapra = nop
    02ab : e00f ; -- <0073> jmp :done
    02ac : 02b8 ; -- <0073> "

-- :no_match -- = 0x02ad
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    02ad : 5e00 ; -- <0077> ram a = $ram_terminal_connected -- av_ad_hi = 0
    02ae : 6296 ; -- <0077> ram a = $ram_terminal_connected -- av_ad_lo = 150
    02af : 0015 ; -- <0077> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    02b0 : 0016 ; -- <0077> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    02b1 : e000 ; -- <0078> br az :done
    02b2 : 02b8 ; -- <0078> "

    02b3 : 1605 ; -- <0080> y = (($key_buf_len / 2) + 1)
    02b4 : c800 ; -- <0081> x = x+y
    02b5 : 1320 ; -- <0081> "
    02b6 : e00f ; -- <0082> jmp :next_cmd
    02b7 : 027d ; -- <0082> "
-- :done -- = 0x02b8

    02b8 : f80c ; -- <0085> pop rtna -- func parse_command
    02b9 : 140c ; -- <0085> pop y -- "
    02ba : 100c ; -- <0085> pop x -- "
    02bb : 080c ; -- <0085> pop i -- "
    02bc : fc00 ; -- <0085> swapra = nop

-- ######## func hello_cmd -- = 0x02bd

    02bd : 5e00 ; -- <0087> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    02be : 6296 ; -- <0087> ram $ram_terminal_connected = 1 -- av_ad_lo = 150
    02bf : 5601 ; -- <0087> ram $ram_terminal_connected = 1 -- av_write_data = 1

    02c0 : fc00 ; -- <0089> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x02c1
    02c1 : 303e ; -- <0094> push rtna -- func set_plan_stop_cmd

    02c2 : 5e00 ; -- <0091> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02c3 : 6290 ; -- <0091> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02c4 : f815 ; -- <0091> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02c5 : f816 ; -- <0091> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02c6 : fc00 ; -- <0092> swapra = nop
    02c7 : fba0 ; -- <0094> callx  init_plan_stop
    02c8 : 02fa ; -- <0094> "
    02c9 : fc00 ; -- <0094> "

    02ca : f80c ; -- <0096> pop rtna -- func set_plan_stop_cmd
    02cb : fc00 ; -- <0096> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x02cc
    02cc : 303e ; -- <0101> push rtna -- func set_plan_crank_cmd

    02cd : 5e00 ; -- <0098> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02ce : 6290 ; -- <0098> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02cf : f815 ; -- <0098> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02d0 : f816 ; -- <0098> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02d1 : fc00 ; -- <0099> swapra = nop
    02d2 : fba0 ; -- <0101> callx  init_plan_crank
    02d3 : 0339 ; -- <0101> "
    02d4 : fc00 ; -- <0101> "

    02d5 : f80c ; -- <0103> pop rtna -- func set_plan_crank_cmd
    02d6 : fc00 ; -- <0103> swapra = nop

-- ######## func set_plan_warmup_cmd -- = 0x02d7
    02d7 : 303e ; -- <0108> push rtna -- func set_plan_warmup_cmd

    02d8 : 5e00 ; -- <0105> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02d9 : 6290 ; -- <0105> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02da : f815 ; -- <0105> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02db : f816 ; -- <0105> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02dc : fc00 ; -- <0106> swapra = nop
    02dd : fba0 ; -- <0108> callx  init_plan_warmup
    02de : 039f ; -- <0108> "
    02df : fc00 ; -- <0108> "

    02e0 : f80c ; -- <0110> pop rtna -- func set_plan_warmup_cmd
    02e1 : fc00 ; -- <0110> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x02e2
    02e2 : 303e ; -- <0115> push rtna -- func set_plan_run_cmd

    02e3 : 5e00 ; -- <0112> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02e4 : 6290 ; -- <0112> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02e5 : f815 ; -- <0112> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02e6 : f816 ; -- <0112> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02e7 : fc00 ; -- <0113> swapra = nop
    02e8 : fba0 ; -- <0115> callx  init_plan_run
    02e9 : 0424 ; -- <0115> "
    02ea : fc00 ; -- <0115> "

    02eb : f80c ; -- <0117> pop rtna -- func set_plan_run_cmd
    02ec : fc00 ; -- <0117> swapra = nop

-- ######## func set_plan_learn_cmd -- = 0x02ed
    02ed : 303e ; -- <0122> push rtna -- func set_plan_learn_cmd

    02ee : 5e00 ; -- <0119> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02ef : 6290 ; -- <0119> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02f0 : f815 ; -- <0119> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02f1 : f816 ; -- <0119> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02f2 : fc00 ; -- <0120> swapra = nop
    02f3 : fba0 ; -- <0122> callx  init_plan_learn_stoich
    02f4 : 0487 ; -- <0122> "
    02f5 : fc00 ; -- <0122> "

    02f6 : f80c ; -- <0124> pop rtna -- func set_plan_learn_cmd
    02f7 : fc00 ; -- <0124> swapra = nop


-- :plan_name_stop -- = 0x02f8
-- "STP\x0"
    02f8 : 5453 ; -- <0002> TS
    02f9 : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x02fa
    02fa : 303e ; -- <0023> push rtna -- func init_plan_stop

-- set up the stop plan.
    02fb : fba0 ; -- <0006> callx  clear_ign_history
    02fc : 06aa ; -- <0006> "
    02fd : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    02fe : 5e00 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    02ff : 6284 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 132
    0300 : 57a0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    0301 : 025b ; -- <0008> "
    0302 : 5e00 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0303 : 6286 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    0304 : 57a0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    0305 : 36b0 ; -- <0009> "
    0306 : 83a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    0307 : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    0308 : 5e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0309 : 6292 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    030a : 5600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    030b : 8600 ; -- <0016> puff_len_us = 0

-- memorize state.
    030c : 5e00 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    030d : 628a ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 138
    030e : 57a0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    030f : 02f8 ; -- <0019> "
    0310 : 5e00 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    0311 : 628c ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 140
    0312 : 57a0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    0313 : 031f ; -- <0020> "
    0314 : 5e00 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    0315 : 628e ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 142
    0316 : 57a0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    0317 : 0323 ; -- <0021> "
    0318 : 5e00 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0319 : 6290 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 144
    031a : 57a0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    031b : 031e ; -- <0022> "

    031c : f80c ; -- <0024> pop rtna -- func init_plan_stop
    031d : fc00 ; -- <0024> swapra = nop

-- ######## func destroy_plan_stop -- = 0x031e


    031e : fc00 ; -- <0027> swapra = nop

-- ######## func puff_len_stop -- = 0x031f

    031f : 5e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0320 : 6292 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    0321 : 5600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0

    0322 : fc00 ; -- <0031> swapra = nop

-- ######## func leave_stop -- = 0x0323
    0323 : 303e ; -- <0044> push rtna -- func leave_stop

-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    0324 : 001e ; -- <0035> a = power_duty
    0325 : 0680 ; -- <0036> b = $ign_switch_off_mask
    0326 : e403 ; -- <0037> bn and0z :stay
    0327 : 0335 ; -- <0037> "
    0328 : 5e00 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    0329 : 6282 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 130
    032a : 0015 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    032b : 0016 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    032c : 0608 ; -- <0039> b = ($ign_history_len / 2)
    032d : e006 ; -- <0040> br gt :stay
    032e : 0335 ; -- <0040> "
    032f : fba0 ; -- <0041> callx  destroy_plan_stop
    0330 : 031e ; -- <0041> "
    0331 : fc00 ; -- <0041> "
    0332 : fba0 ; -- <0042> callx  init_plan_crank
    0333 : 0339 ; -- <0042> "
    0334 : fc00 ; -- <0042> "
-- :stay -- = 0x0335

    0335 : f80c ; -- <0045> pop rtna -- func leave_stop
    0336 : fc00 ; -- <0045> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 5000 to 20000 us length in about 7 seconds.

-- :plan_name_crank -- = 0x0337
-- "CR\x0"
    0337 : 5243 ; -- <0011> RC
    0338 : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x0339
    0339 : 303e ; -- <0033> push rtna -- func init_plan_crank

-- set up the crank plan.
    033a : 5e00 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    033b : 6294 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 148
    033c : 5600 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    033d : 5e00 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    033e : 6284 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 132
    033f : 5657 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    0340 : 5e00 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0341 : 6286 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    0342 : 57a0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    0343 : 36b0 ; -- <0018> "
    0344 : 83a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    0345 : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    0346 : 5e00 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    0347 : 6292 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 146
    0348 : 57a0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 5000
    0349 : 1388 ; -- <0023> "
    034a : 87a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    034b : 1388 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    034c : fba0 ; -- <0026> callx  clear_ign_history
    034d : 06aa ; -- <0026> "
    034e : fc00 ; -- <0026> "

-- memorize state.
    034f : 5e00 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    0350 : 628a ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 138
    0351 : 57a0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    0352 : 0337 ; -- <0029> "
    0353 : 5e00 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    0354 : 628c ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 140
    0355 : 57a0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    0356 : 0362 ; -- <0030> "
    0357 : 5e00 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    0358 : 628e ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 142
    0359 : 57a0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    035a : 0380 ; -- <0031> "
    035b : 5e00 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    035c : 6290 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 144
    035d : 57a0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    035e : 0361 ; -- <0032> "

    035f : f80c ; -- <0034> pop rtna -- func init_plan_crank
    0360 : fc00 ; -- <0034> swapra = nop

-- ######## func destroy_plan_crank -- = 0x0361


    0361 : fc00 ; -- <0037> swapra = nop

-- ######## func puff_len_crank -- = 0x0362
    0362 : 303e ; -- <0054> push rtna -- func puff_len_crank

    0363 : 5e00 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    0364 : 6294 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 148
    0365 : 0015 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0366 : 0016 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0367 : 060a ; -- <0040> b = $crank_max_puffs
    0368 : e006 ; -- <0041> br gt :puff_limit
    0369 : 0377 ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    036a : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    036b : 05dc ; -- <0043> "
    036c : fba0 ; -- <0044> call :multiply
    036d : 0170 ; -- <0044> "
    036e : fc00 ; -- <0044> "
    036f : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    0370 : 1388 ; -- <0045> "
    0371 : 5e00 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    0372 : 6292 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    0373 : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    0374 : 5700 ; -- <0046> "
    0375 : e00f ; -- <0047> jmp :done
    0376 : 037e ; -- <0047> "
-- :puff_limit -- = 0x0377
-- prevent the puff counter from going higher & eventually rolling over.
    0377 : 5e00 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    0378 : 6294 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 148
    0379 : 560a ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 10
-- accept max puff len.
    037a : 5e00 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    037b : 6292 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 146
    037c : 57a0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    037d : 4e20 ; -- <0052> "
-- :done -- = 0x037e

    037e : f80c ; -- <0055> pop rtna -- func puff_len_crank
    037f : fc00 ; -- <0055> swapra = nop

-- ######## func leave_crank -- = 0x0380
    0380 : 303e ; -- <0071> push rtna -- func leave_crank

    0381 : fba0 ; -- <0057> callx  check_engine_stop  a
    0382 : 0993 ; -- <0057> "
    0383 : fc00 ; -- <0057> "
    0384 : 0008 ; -- <0057> a = pa
    0385 : e400 ; -- <0058> bn az :done
    0386 : 039b ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    0387 : 5e00 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0388 : 6280 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 128
    0389 : 0015 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    038a : 0016 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    038b : e000 ; -- <0062> br az :stay
    038c : 039b ; -- <0062> "
    038d : 5e00 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    038e : 627e ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 126
    038f : 0015 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    0390 : 0016 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    0391 : 07a0 ; -- <0064> b = $crank_success_rpm
    0392 : 0320 ; -- <0064> "
    0393 : e005 ; -- <0065> br lt :stay
    0394 : 039b ; -- <0065> "
    0395 : fba0 ; -- <0066> callx  destroy_plan_crank
    0396 : 0361 ; -- <0066> "
    0397 : fc00 ; -- <0066> "
    0398 : fba0 ; -- <0067> callx  init_plan_warmup
    0399 : 039f ; -- <0067> "
    039a : fc00 ; -- <0067> "
-- :stay -- = 0x039b

-- :done -- = 0x039b

    039b : f80c ; -- <0072> pop rtna -- func leave_crank
    039c : fc00 ; -- <0072> swapra = nop



-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.
-- 750 = 0 degF.
-- max 6000 & min 4500 over a temp range 750 to 0x4c0 gives 6900 us puff at 74 deg F.  program rev 594.
-- this is used if the engine temp is unavailable.

-- :plan_name_warmup -- = 0x039d
-- "WM\x0"
    039d : 4d57 ; -- <0016> MW
    039e : 0000 ; -- <0016>   

-- ######## func init_plan_warmup -- = 0x039f

-- set up the warmup plan.
    039f : 5e00 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03a0 : 6214 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03a1 : 0015 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03a2 : 0016 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03a3 : 063c ; -- <0021> b = $warmup_timeout_sec
    03a4 : 5e00 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_hi = 0
    03a5 : 6298 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_lo = 152
    03a6 : c800 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_write_data = a+b
    03a7 : 5700 ; -- <0022> "

-- memorize state.
    03a8 : 5e00 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    03a9 : 628a ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 138
    03aa : 57a0 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    03ab : 039d ; -- <0025> "
    03ac : 5e00 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    03ad : 628c ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 140
    03ae : 57a0 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    03af : 03ba ; -- <0026> "
    03b0 : 5e00 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    03b1 : 628e ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 142
    03b2 : 57a0 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    03b3 : 03ec ; -- <0027> "
    03b4 : 5e00 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    03b5 : 6290 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 144
    03b6 : 57a0 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    03b7 : 03b9 ; -- <0028> "

    03b8 : fc00 ; -- <0030> swapra = nop

-- ######## func destroy_plan_warmup -- = 0x03b9


    03b9 : fc00 ; -- <0033> swapra = nop

-- ######## func puff_len_warmup -- = 0x03ba
    03ba : 3004 ; -- <0070> push x -- func puff_len_warmup
    03bb : 303e ; -- <0070> push rtna -- "

-- x = enrichment us.
    03bc : 13a0 ; -- <0036> x = $warmup_limping_enrichment_us
    03bd : 07d0 ; -- <0036> "

-- check engine block temp sensor.  if valid, enrich by a linear function:
-- {warmup_min_temp_adc...warmup_success_temp_adc} -> {$warmup_max_enrichment_us...0}
    03be : 0202 ; -- <0040> a = $anmux_engine_block_temp

    03bf : 0351 ; -- <0041> a = a<<1
    03c0 : 0618 ; -- <0041> b = 24
    03c1 : 5e00 ; -- <0041> av_ad_hi = 0
    03c2 : 6300 ; -- <0041> av_ad_lo = ad0
    03c3 : 0415 ; -- <0041> b = av_write_data
    03c4 : 0416 ; -- <0041> b = av_read_data

-- b = sensor reading in adc counts.
    03c5 : 03a0 ; -- <0043> a = $temp_ceiling_adc
    03c6 : 0ff0 ; -- <0043> "
    03c7 : e005 ; -- <0044> br lt :temp_invalid
    03c8 : 03e2 ; -- <0044> "
    03c9 : 03a0 ; -- <0045> a = $warmup_success_temp_adc
    03ca : 04c0 ; -- <0045> "
    03cb : e005 ; -- <0046> br lt :too_warm
    03cc : 03e2 ; -- <0046> "
    03cd : 03a0 ; -- <0047> a = $warmup_min_temp_adc
    03ce : 02ee ; -- <0047> "
    03cf : e005 ; -- <0048> br lt :in_range
    03d0 : 03d3 ; -- <0048> "
    03d1 : 07a0 ; -- <0049> b = $warmup_min_temp_adc
    03d2 : 02ee ; -- <0049> "
-- :in_range -- = 0x03d3
-- negate the sensor reading so as to subtract it from warmup_success_temp_adc.
    03d3 : 0360 ; -- <0052> a = 0xffff
    03d4 : c800 ; -- <0053> b = xor
    03d5 : 0738 ; -- <0053> "
    03d6 : 0201 ; -- <0054> a = 1
    03d7 : c800 ; -- <0055> b = a+b
    03d8 : 0700 ; -- <0055> "
    03d9 : 03a0 ; -- <0056> a = $warmup_success_temp_adc
    03da : 04c0 ; -- <0056> "
    03db : c800 ; -- <0057> b = a+b
    03dc : 0700 ; -- <0057> "
-- b = how many counts "cold" we are.  multiply that by the slope warmup_us_per_cold_adc.
    03dd : 020c ; -- <0059> a = $warmup_us_per_cold_adc
    03de : fba0 ; -- <0060> call :multiply
    03df : 0170 ; -- <0060> "
    03e0 : fc00 ; -- <0060> "
    03e1 : 1000 ; -- <0061> x = a
-- :too_warm -- = 0x03e2
-- :temp_invalid -- = 0x03e2

-- apply total of base amount and enrichment.
-- $warmup_min_puff_len_us <= total <= ($warmup_min_puff_len_us + $warmup_max_enrichment_us)
    03e2 : 03a0 ; -- <0067> a = $warmup_min_puff_len_us
    03e3 : 09c4 ; -- <0067> "
    03e4 : 0404 ; -- <0068> b = x
    03e5 : 5e00 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    03e6 : 6292 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    03e7 : c800 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    03e8 : 5700 ; -- <0069> "

    03e9 : f80c ; -- <0071> pop rtna -- func puff_len_warmup
    03ea : 100c ; -- <0071> pop x -- "
    03eb : fc00 ; -- <0071> swapra = nop

-- ######## func leave_warmup -- = 0x03ec
    03ec : 303e ; -- <0099> push rtna -- func leave_warmup

    03ed : fba0 ; -- <0073> callx  check_engine_stop  a
    03ee : 0993 ; -- <0073> "
    03ef : fc00 ; -- <0073> "
    03f0 : 0008 ; -- <0073> a = pa
    03f1 : e400 ; -- <0074> bn az :done
    03f2 : 0420 ; -- <0074> "

-- transition to plan_run if warmup has expired.
    03f3 : 5e00 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03f4 : 6214 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03f5 : 0015 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03f6 : 0016 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03f7 : 5e00 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_hi = 0
    03f8 : 6298 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_lo = 152
    03f9 : 0415 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_write_data -- start read cycle
    03fa : 0416 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_read_data -- finish read cycle

    03fb : 0000 ; -- <0083> a = a
    03fc : 0401 ; -- <0083> b = b

    03fd : e406 ; -- <0079> bn gt :else_1021
    03fe : 0407 ; -- <0079> "

    03ff : fba0 ; -- <0080> callx  destroy_plan_warmup
    0400 : 03b9 ; -- <0080> "
    0401 : fc00 ; -- <0080> "
    0402 : fba0 ; -- <0081> callx  init_plan_run
    0403 : 0424 ; -- <0081> "
    0404 : fc00 ; -- <0081> "
    0405 : e00f ; -- <0082> jmp :done
    0406 : 0420 ; -- <0082> "


-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    0407 : 0202 ; -- <0087> a = $anmux_engine_block_temp

    0408 : 0351 ; -- <0088> a = a<<1
    0409 : 0618 ; -- <0088> b = 24
    040a : 5e00 ; -- <0088> av_ad_hi = 0
    040b : 6300 ; -- <0088> av_ad_lo = ad0
    040c : 0415 ; -- <0088> b = av_write_data
    040d : 0416 ; -- <0088> b = av_read_data

    040e : 03a0 ; -- <0089> a = $temp_ceiling_adc
    040f : 0ff0 ; -- <0089> "

    0410 : 0000 ; -- <0096> a = a
    0411 : 0401 ; -- <0096> b = b

    0412 : e406 ; -- <0090> bn gt :else_1042
    0413 : 0420 ; -- <0090> "

    0414 : 03a0 ; -- <0091> a = $warmup_success_temp_adc
    0415 : 04c0 ; -- <0091> "

    0416 : 0000 ; -- <0095> a = a
    0417 : 0401 ; -- <0095> b = b

    0418 : e405 ; -- <0092> bn lt :else_1048
    0419 : 0420 ; -- <0092> "

    041a : fba0 ; -- <0093> callx  destroy_plan_warmup
    041b : 03b9 ; -- <0093> "
    041c : fc00 ; -- <0093> "
    041d : fba0 ; -- <0094> callx  init_plan_run
    041e : 0424 ; -- <0094> "
    041f : fc00 ; -- <0094> "



-- :done -- = 0x0420

    0420 : f80c ; -- <0100> pop rtna -- func leave_warmup
    0421 : fc00 ; -- <0100> swapra = nop


-- :plan_name_run -- = 0x0422
-- "RN\x0"
    0422 : 4e52 ; -- <0002> NR
    0423 : 0000 ; -- <0002>   

-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed, by about 1000 us per second.



-- ######## func init_plan_run -- = 0x0424

-- set up the run plan.

-- memorize state.
    0424 : 5e00 ; -- <0021> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    0425 : 628a ; -- <0021> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 138
    0426 : 57a0 ; -- <0021> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    0427 : 0422 ; -- <0021> "
    0428 : 5e00 ; -- <0022> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    0429 : 628c ; -- <0022> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 140
    042a : 57a0 ; -- <0022> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    042b : 0436 ; -- <0022> "
    042c : 5e00 ; -- <0023> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    042d : 628e ; -- <0023> ram $ram_transition_func = :leave_run -- av_ad_lo = 142
    042e : 57a0 ; -- <0023> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    042f : 0471 ; -- <0023> "
    0430 : 5e00 ; -- <0024> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    0431 : 6290 ; -- <0024> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 144
    0432 : 57a0 ; -- <0024> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    0433 : 0435 ; -- <0024> "

    0434 : fc00 ; -- <0026> swapra = nop

-- ######## func destroy_plan_run -- = 0x0435


    0435 : fc00 ; -- <0029> swapra = nop

-- ######## func puff_len_run -- = 0x0436
    0436 : 3002 ; -- <0056> push i -- func puff_len_run
    0437 : 3003 ; -- <0056> push j -- "

    0438 : 5e00 ; -- <0031> ram i = $ram_run_ticks_remain -- av_ad_hi = 0
    0439 : 629a ; -- <0031> ram i = $ram_run_ticks_remain -- av_ad_lo = 154
    043a : 0815 ; -- <0031> ram i = $ram_run_ticks_remain -- i = av_write_data -- start read cycle
    043b : 0816 ; -- <0031> ram i = $ram_run_ticks_remain -- i = av_read_data -- finish read cycle

    043c : 0002 ; -- <0055> a = i
    043d : 0600 ; -- <0055> b = 0

    043e : e406 ; -- <0032> bn gt :else_1086
    043f : 0447 ; -- <0032> "

    0440 : 0f60 ; -- <0033> j = -1
    0441 : 5e00 ; -- <0034> ram $ram_run_ticks_remain = i+j -- av_ad_hi = 0
    0442 : 629a ; -- <0034> ram $ram_run_ticks_remain = i+j -- av_ad_lo = 154
    0443 : c800 ; -- <0034> ram $ram_run_ticks_remain = i+j -- av_write_data = i+j
    0444 : 5710 ; -- <0034> "

    0445 : e00f ; -- <0036> jmp :end_1086
    0446 : 046e ; -- <0036> "

    0447 : 5e00 ; -- <0037> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_ad_hi = 0
    0448 : 629a ; -- <0037> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_ad_lo = 154
    0449 : 560a ; -- <0037> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    044a : 5e00 ; -- <0040> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    044b : 6292 ; -- <0040> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    044c : 0815 ; -- <0040> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    044d : 0816 ; -- <0040> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    044e : 0e00 ; -- <0041> j = 0
    044f : 0205 ; -- <0042> a = $o2_adc_channel

    0450 : 0351 ; -- <0043> a = a<<1
    0451 : 0628 ; -- <0043> b = 40
    0452 : 5e00 ; -- <0043> av_ad_hi = 0
    0453 : 6300 ; -- <0043> av_ad_lo = ad0
    0454 : 0415 ; -- <0043> b = av_write_data
    0455 : 0416 ; -- <0043> b = av_read_data


    0456 : 0001 ; -- <0054> a = b
    0457 : 07a0 ; -- <0054> b = 588
    0458 : 024c ; -- <0054> "

    0459 : e405 ; -- <0044> bn lt :else_1113
    045a : 0463 ; -- <0044> "

-- sensing a lean condition.  trim up to enrich.

    045b : 0002 ; -- <0048> a = i
    045c : 07a0 ; -- <0048> b = 10000
    045d : 2710 ; -- <0048> "

    045e : e405 ; -- <0046> bn lt :else_1118
    045f : 0461 ; -- <0046> "

    0460 : 0ec8 ; -- <0047> j = $run_puff_step_up_us


    0461 : e00f ; -- <0050> jmp :end_1113
    0462 : 046a ; -- <0050> "

-- sensing a rich condition.  trim down to lean it out.

    0463 : 0002 ; -- <0054> a = i
    0464 : 07a0 ; -- <0054> b = 2000
    0465 : 07d0 ; -- <0054> "

    0466 : e406 ; -- <0052> bn gt :else_1126
    0467 : 046a ; -- <0052> "

    0468 : 0fa0 ; -- <0053> j = $run_puff_step_down_us
    0469 : ff9b ; -- <0053> "


    046a : 5e00 ; -- <0055> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    046b : 6292 ; -- <0055> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 146
    046c : c800 ; -- <0055> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    046d : 5710 ; -- <0055> "


    046e : 0c0c ; -- <0057> pop j -- func puff_len_run
    046f : 080c ; -- <0057> pop i -- "
    0470 : fc00 ; -- <0057> swapra = nop

-- ######## func leave_run -- = 0x0471
    0471 : 303e ; -- <0060> push rtna -- func leave_run

    0472 : fba0 ; -- <0059> callx  check_engine_stop  pa
    0473 : 0993 ; -- <0059> "
    0474 : fc00 ; -- <0059> "

    0475 : f80c ; -- <0061> pop rtna -- func leave_run
    0476 : fc00 ; -- <0061> swapra = nop



-- :rpm_cells -- = 0x0477
    0477 : 01f4 ; -- <0004> 500
    0478 : 0271 ; -- <0005> 625
    0479 : 030d ; -- <0006> 781
    047a : 03d1 ; -- <0007> 977
    047b : 04c5 ; -- <0008> 1221
    047c : 05f6 ; -- <0009> 1526
    047d : 0773 ; -- <0010> 1907
    047e : 0950 ; -- <0011> 2384
    047f : 0ba4 ; -- <0012> 2980
    0480 : 0e8d ; -- <0013> 3725
    0481 : 1231 ; -- <0014> 4657
    0482 : 16bd ; -- <0015> 5821
    0483 : 1c6c ; -- <0016> 7276
    0484 : ffff ; -- <0017> 0xffff



-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed.

-- o2 sensor interpetation & state machine.

-- :plan_name_learn_stoich -- = 0x0485
-- "LN\x0"
    0485 : 4e4c ; -- <0045> NL
    0486 : 0000 ; -- <0045>   

-- ######## func init_plan_learn_stoich -- = 0x0487

-- set up the learn_stoich plan.
    0487 : 5e00 ; -- <0049> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    0488 : 62b8 ; -- <0049> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 184
    0489 : 560a ; -- <0049> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- memorize state.
    048a : 5e00 ; -- <0052> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_hi = 0
    048b : 628a ; -- <0052> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_lo = 138
    048c : 57a0 ; -- <0052> ram $ram_plan_name = :plan_name_learn_stoich -- av_write_data = :plan_name_learn_stoich
    048d : 0485 ; -- <0052> "
    048e : 5e00 ; -- <0053> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_hi = 0
    048f : 628c ; -- <0053> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_lo = 140
    0490 : 57a0 ; -- <0053> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_write_data = :puff_len_learn_stoich
    0491 : 04a0 ; -- <0053> "
    0492 : 5e00 ; -- <0054> ram $ram_transition_func = :leave_learn_stoich -- av_ad_hi = 0
    0493 : 628e ; -- <0054> ram $ram_transition_func = :leave_learn_stoich -- av_ad_lo = 142
    0494 : 57a0 ; -- <0054> ram $ram_transition_func = :leave_learn_stoich -- av_write_data = :leave_learn_stoich
    0495 : 059a ; -- <0054> "
    0496 : 5e00 ; -- <0055> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_hi = 0
    0497 : 6290 ; -- <0055> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_lo = 144
    0498 : 57a0 ; -- <0055> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_write_data = :destroy_plan_learn_stoich
    0499 : 049b ; -- <0055> "

    049a : fc00 ; -- <0057> swapra = nop

-- ######## func destroy_plan_learn_stoich -- = 0x049b


    049b : fc00 ; -- <0060> swapra = nop

-- :lrns_trim_up_msg -- = 0x049c
-- "trR\x0"
    049c : 7274 ; -- <0062> rt
    049d : 0052 ; -- <0062>  R
-- :lrns_trim_down_msg -- = 0x049e
-- "trL\x0"
    049e : 7274 ; -- <0064> rt
    049f : 004c ; -- <0064>  L

-- ######## func puff_len_learn_stoich -- = 0x04a0
    04a0 : 3002 ; -- <0099> push i -- func puff_len_learn_stoich
    04a1 : 3003 ; -- <0099> push j -- "
    04a2 : 3006 ; -- <0099> push g6 -- "
    04a3 : 3007 ; -- <0099> push g7 -- "
    04a4 : 303e ; -- <0099> push rtna -- "

    04a5 : 5e00 ; -- <0067> ram i = $ram_lrns_ticks_remain -- av_ad_hi = 0
    04a6 : 62b8 ; -- <0067> ram i = $ram_lrns_ticks_remain -- av_ad_lo = 184
    04a7 : 0815 ; -- <0067> ram i = $ram_lrns_ticks_remain -- i = av_write_data -- start read cycle
    04a8 : 0816 ; -- <0067> ram i = $ram_lrns_ticks_remain -- i = av_read_data -- finish read cycle

    04a9 : 0002 ; -- <0098> a = i
    04aa : 0600 ; -- <0098> b = 0

    04ab : e406 ; -- <0068> bn gt :else_1195
    04ac : 04b4 ; -- <0068> "

    04ad : 0f60 ; -- <0069> j = -1
    04ae : 5e00 ; -- <0070> ram $ram_lrns_ticks_remain = i+j -- av_ad_hi = 0
    04af : 62b8 ; -- <0070> ram $ram_lrns_ticks_remain = i+j -- av_ad_lo = 184
    04b0 : c800 ; -- <0070> ram $ram_lrns_ticks_remain = i+j -- av_write_data = i+j
    04b1 : 5710 ; -- <0070> "

    04b2 : e00f ; -- <0072> jmp :end_1195
    04b3 : 04f0 ; -- <0072> "

    04b4 : 5e00 ; -- <0073> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    04b5 : 62b8 ; -- <0073> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 184
    04b6 : 560a ; -- <0073> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    04b7 : 5e00 ; -- <0076> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    04b8 : 6292 ; -- <0076> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    04b9 : 0815 ; -- <0076> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    04ba : 0816 ; -- <0076> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    04bb : 0e00 ; -- <0077> j = 0
    04bc : 5e00 ; -- <0078> ram g6 = $ram_o2_state -- av_ad_hi = 0
    04bd : 62ba ; -- <0078> ram g6 = $ram_o2_state -- av_ad_lo = 186
    04be : 1815 ; -- <0078> ram g6 = $ram_o2_state -- g6 = av_write_data -- start read cycle
    04bf : 1816 ; -- <0078> ram g6 = $ram_o2_state -- g6 = av_read_data -- finish read cycle
    04c0 : fba0 ; -- <0079> callx  interpret_o2
    04c1 : 055d ; -- <0079> "
    04c2 : fc00 ; -- <0079> "
    04c3 : 5e00 ; -- <0080> ram g7 = $ram_o2_state -- av_ad_hi = 0
    04c4 : 62ba ; -- <0080> ram g7 = $ram_o2_state -- av_ad_lo = 186
    04c5 : 1c15 ; -- <0080> ram g7 = $ram_o2_state -- g7 = av_write_data -- start read cycle
    04c6 : 1c16 ; -- <0080> ram g7 = $ram_o2_state -- g7 = av_read_data -- finish read cycle

    04c7 : 0007 ; -- <0097> a = g7
    04c8 : 0601 ; -- <0097> b = 1

    04c9 : e407 ; -- <0081> bn eq :else_1225
    04ca : 04e0 ; -- <0081> "

-- sensing a lean condition.  trim up to enrich.

    04cb : 0002 ; -- <0085> a = i
    04cc : 07a0 ; -- <0085> b = 10000
    04cd : 2710 ; -- <0085> "

    04ce : e405 ; -- <0083> bn lt :else_1230
    04cf : 04d2 ; -- <0083> "

    04d0 : 0fa0 ; -- <0084> j = $lrns_puff_step_up_us
    04d1 : 03e8 ; -- <0084> "

    04d2 : 23a0 ; -- <0086> pa = :lrns_trim_up_msg
    04d3 : 049c ; -- <0086> "
    04d4 : fba0 ; -- <0086> callx  set_text_flag  :lrns_trim_up_msg
    04d5 : 0930 ; -- <0086> "
    04d6 : fc00 ; -- <0086> "

    04d7 : 0006 ; -- <0090> a = g6
    04d8 : 0602 ; -- <0090> b = 2

    04d9 : e407 ; -- <0087> bn eq :else_1241
    04da : 04de ; -- <0087> "

-- o2 state just switched to lean.  adjust map.
    04db : fba0 ; -- <0089> callx  learn_smap
    04dc : 04fc ; -- <0089> "
    04dd : fc00 ; -- <0089> "


    04de : e00f ; -- <0092> jmp :end_1225
    04df : 04ec ; -- <0092> "

-- sensing a rich condition.  trim down to lean it out.

    04e0 : 0002 ; -- <0096> a = i
    04e1 : 07a0 ; -- <0096> b = 2000
    04e2 : 07d0 ; -- <0096> "

    04e3 : e406 ; -- <0094> bn gt :else_1251
    04e4 : 04e7 ; -- <0094> "

    04e5 : 0fa0 ; -- <0095> j = $lrns_puff_step_down_us
    04e6 : ff9b ; -- <0095> "

    04e7 : 23a0 ; -- <0097> pa = :lrns_trim_down_msg
    04e8 : 049e ; -- <0097> "
    04e9 : fba0 ; -- <0097> callx  set_text_flag  :lrns_trim_down_msg
    04ea : 0930 ; -- <0097> "
    04eb : fc00 ; -- <0097> "

    04ec : 5e00 ; -- <0098> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    04ed : 6292 ; -- <0098> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 146
    04ee : c800 ; -- <0098> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    04ef : 5710 ; -- <0098> "


    04f0 : f80c ; -- <0100> pop rtna -- func puff_len_learn_stoich
    04f1 : 1c0c ; -- <0100> pop g7 -- "
    04f2 : 180c ; -- <0100> pop g6 -- "
    04f3 : 0c0c ; -- <0100> pop j -- "
    04f4 : 080c ; -- <0100> pop i -- "
    04f5 : fc00 ; -- <0100> swapra = nop

-- :lrns_enrich_msg -- = 0x04f6
-- "lrnR\x0"
    04f6 : 726c ; -- <0102> rl
    04f7 : 526e ; -- <0102> Rn
    04f8 : 0000 ; -- <0102>   
-- :lrns_lean_msg -- = 0x04f9
-- "lrnL\x0"
    04f9 : 726c ; -- <0104> rl
    04fa : 4c6e ; -- <0104> Ln
    04fb : 0000 ; -- <0104>   

-- ######## func learn_smap -- = 0x04fc
    04fc : 3002 ; -- <0140> push i -- func learn_smap
    04fd : 3004 ; -- <0140> push x -- "
    04fe : 3005 ; -- <0140> push y -- "
    04ff : 303e ; -- <0140> push rtna -- "

    0500 : 5e00 ; -- <0107> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0501 : 6280 ; -- <0107> ram a = $ram_rpm_valid -- av_ad_lo = 128
    0502 : 0015 ; -- <0107> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0503 : 0016 ; -- <0107> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0504 : 0000 ; -- <0139> a = a
    0505 : 0601 ; -- <0139> b = 1

    0506 : e407 ; -- <0108> bn eq :else_1286
    0507 : 0554 ; -- <0108> "

-- let g6 = map cell num.  x = map puff len.  i = observed stoich puff len.
    0508 : 5e00 ; -- <0110> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    0509 : 627e ; -- <0110> ram pa = $ram_avg_rpm -- av_ad_lo = 126
    050a : 2015 ; -- <0110> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    050b : 2016 ; -- <0110> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    050c : fba0 ; -- <0111> callx  find_rpm_cell  pa  g6
    050d : 05a0 ; -- <0111> "
    050e : fc00 ; -- <0111> "
    050f : 1808 ; -- <0111> g6 = pa
    0510 : 0006 ; -- <0112> a = g6

    0511 : 0351 ; -- <0113> a = a<<1
    0512 : 069c ; -- <0113> b = 156
    0513 : 5e00 ; -- <0113> av_ad_hi = 0
    0514 : 6300 ; -- <0113> av_ad_lo = ad0
    0515 : 0415 ; -- <0113> b = av_write_data
    0516 : 0416 ; -- <0113> b = av_read_data

    0517 : 1001 ; -- <0114> x = b
    0518 : 5e00 ; -- <0115> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    0519 : 6292 ; -- <0115> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    051a : 0815 ; -- <0115> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    051b : 0816 ; -- <0115> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    051c : 17a0 ; -- <0116> y = (0xffff - $lrns_map_step + 1)
    051d : ff38 ; -- <0116> "

    051e : c800 ; -- <0123> a = x+y
    051f : 0320 ; -- <0123> "
    0520 : 0402 ; -- <0123> b = i

    0521 : e406 ; -- <0117> bn gt :else_1313
    0522 : 0531 ; -- <0117> "

-- map is richer than observed stoich.  lean the map 1 step.
    0523 : 0006 ; -- <0119> a = g6
    0524 : c800 ; -- <0120> b = x+y
    0525 : 0720 ; -- <0120> "

    0526 : 0351 ; -- <0121> a = a<<1
    0527 : 3001 ; -- <0121> push b -- push b
    0528 : 069c ; -- <0121> b = 156
    0529 : 5e00 ; -- <0121> av_ad_hi = 0
    052a : 6300 ; -- <0121> av_ad_lo = ad0
    052b : 540c ; -- <0121> pop av_write_data -- pop av_write_data

    052c : 23a0 ; -- <0122> pa = :lrns_lean_msg
    052d : 04f9 ; -- <0122> "
    052e : fba0 ; -- <0122> callx  set_text_flag  :lrns_lean_msg
    052f : 0930 ; -- <0122> "
    0530 : fc00 ; -- <0122> "

    0531 : 16c8 ; -- <0124> y = $lrns_map_step

    0532 : c800 ; -- <0131> a = x+y
    0533 : 0320 ; -- <0131> "
    0534 : 0402 ; -- <0131> b = i

    0535 : e405 ; -- <0125> bn lt :else_1333
    0536 : 0545 ; -- <0125> "

-- map is leaner than observed stoich.  rich the map 1 step.
    0537 : 0006 ; -- <0127> a = g6
    0538 : c800 ; -- <0128> b = x+y
    0539 : 0720 ; -- <0128> "

    053a : 0351 ; -- <0129> a = a<<1
    053b : 3001 ; -- <0129> push b -- push b
    053c : 069c ; -- <0129> b = 156
    053d : 5e00 ; -- <0129> av_ad_hi = 0
    053e : 6300 ; -- <0129> av_ad_lo = ad0
    053f : 540c ; -- <0129> pop av_write_data -- pop av_write_data

    0540 : 23a0 ; -- <0130> pa = :lrns_enrich_msg
    0541 : 04f6 ; -- <0130> "
    0542 : fba0 ; -- <0130> callx  set_text_flag  :lrns_enrich_msg
    0543 : 0930 ; -- <0130> "
    0544 : fc00 ; -- <0130> "


-- dump smap if we haven't done so lately.
    0545 : 5e00 ; -- <0134> ram a = $ram_last_learn_second -- av_ad_hi = 0
    0546 : 62b6 ; -- <0134> ram a = $ram_last_learn_second -- av_ad_lo = 182
    0547 : 0015 ; -- <0134> ram a = $ram_last_learn_second -- a = av_write_data -- start read cycle
    0548 : 0016 ; -- <0134> ram a = $ram_last_learn_second -- a = av_read_data -- finish read cycle
    0549 : 5e00 ; -- <0135> ram b = $ram_seconds_cnt -- av_ad_hi = 0
    054a : 6244 ; -- <0135> ram b = $ram_seconds_cnt -- av_ad_lo = 68
    054b : 0415 ; -- <0135> ram b = $ram_seconds_cnt -- b = av_write_data -- start read cycle
    054c : 0416 ; -- <0135> ram b = $ram_seconds_cnt -- b = av_read_data -- finish read cycle

    054d : 0000 ; -- <0138> a = a
    054e : 0401 ; -- <0138> b = b

    054f : e007 ; -- <0136> br eq :else_1359
    0550 : 0554 ; -- <0136> "

    0551 : fba0 ; -- <0137> callx  dump_smap_cmd
    0552 : 05bd ; -- <0137> "
    0553 : fc00 ; -- <0137> "



    0554 : f80c ; -- <0141> pop rtna -- func learn_smap
    0555 : 140c ; -- <0141> pop y -- "
    0556 : 100c ; -- <0141> pop x -- "
    0557 : 080c ; -- <0141> pop i -- "
    0558 : fc00 ; -- <0141> swapra = nop

-- :o2_rich_msg -- = 0x0559
-- "o2R\x0"
    0559 : 326f ; -- <0143> 2o
    055a : 0052 ; -- <0143>  R
-- :o2_lean_msg -- = 0x055b
-- "o2L\x0"
    055b : 326f ; -- <0145> 2o
    055c : 004c ; -- <0145>  L

-- ######## func interpret_o2 -- = 0x055d

    055d : 5e00 ; -- <0148> ram a = $ram_o2_state -- av_ad_hi = 0
    055e : 62ba ; -- <0148> ram a = $ram_o2_state -- av_ad_lo = 186
    055f : 0015 ; -- <0148> ram a = $ram_o2_state -- a = av_write_data -- start read cycle
    0560 : 0016 ; -- <0148> ram a = $ram_o2_state -- a = av_read_data -- finish read cycle

    0561 : 0000 ; -- <0159> a = a
    0562 : 0601 ; -- <0159> b = 1

    0563 : e007 ; -- <0149> br eq :else_1379
    0564 : 0578 ; -- <0149> "

-- check sensor for lean state.
    0565 : 0205 ; -- <0151> a = $o2_adc_channel

    0566 : 0351 ; -- <0152> a = a<<1
    0567 : 0628 ; -- <0152> b = 40
    0568 : 5e00 ; -- <0152> av_ad_hi = 0
    0569 : 6300 ; -- <0152> av_ad_lo = ad0
    056a : 0415 ; -- <0152> b = av_write_data
    056b : 0416 ; -- <0152> b = av_read_data

    056c : 03a0 ; -- <0153> a = $o2_lean_thresh_adc
    056d : 01c2 ; -- <0153> "

    056e : 0000 ; -- <0158> a = a
    056f : 0401 ; -- <0158> b = b

    0570 : e406 ; -- <0154> bn gt :else_1392
    0571 : 0578 ; -- <0154> "

    0572 : 5e00 ; -- <0155> ram $ram_o2_state = $o2_state_lean -- av_ad_hi = 0
    0573 : 62ba ; -- <0155> ram $ram_o2_state = $o2_state_lean -- av_ad_lo = 186
    0574 : 5601 ; -- <0155> ram $ram_o2_state = $o2_state_lean -- av_write_data = 1
    0575 : 5e00 ; -- <0156> ram $ram_o2_been_lean = 1 -- av_ad_hi = 0
    0576 : 62be ; -- <0156> ram $ram_o2_been_lean = 1 -- av_ad_lo = 190
    0577 : 5601 ; -- <0156> ram $ram_o2_been_lean = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_lean_msg



    0578 : 0000 ; -- <0170> a = a
    0579 : 0602 ; -- <0170> b = 2

    057a : e007 ; -- <0160> br eq :else_1402
    057b : 058f ; -- <0160> "

-- check sensor for rich state.
    057c : 0205 ; -- <0162> a = $o2_adc_channel

    057d : 0351 ; -- <0163> a = a<<1
    057e : 0628 ; -- <0163> b = 40
    057f : 5e00 ; -- <0163> av_ad_hi = 0
    0580 : 6300 ; -- <0163> av_ad_lo = ad0
    0581 : 0415 ; -- <0163> b = av_write_data
    0582 : 0416 ; -- <0163> b = av_read_data

    0583 : 03a0 ; -- <0164> a = $o2_rich_thresh_adc
    0584 : 02bc ; -- <0164> "

    0585 : 0000 ; -- <0169> a = a
    0586 : 0401 ; -- <0169> b = b

    0587 : e405 ; -- <0165> bn lt :else_1415
    0588 : 058f ; -- <0165> "

    0589 : 5e00 ; -- <0166> ram $ram_o2_state = $o2_state_rich -- av_ad_hi = 0
    058a : 62ba ; -- <0166> ram $ram_o2_state = $o2_state_rich -- av_ad_lo = 186
    058b : 5602 ; -- <0166> ram $ram_o2_state = $o2_state_rich -- av_write_data = 2
    058c : 5e00 ; -- <0167> ram $ram_o2_been_rich = 1 -- av_ad_hi = 0
    058d : 62bc ; -- <0167> ram $ram_o2_been_rich = 1 -- av_ad_lo = 188
    058e : 5601 ; -- <0167> ram $ram_o2_been_rich = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_rich_msg



    058f : fc00 ; -- <0172> swapra = nop

-- ######## func init_o2_state -- = 0x0590

    0590 : 5e00 ; -- <0174> ram $ram_o2_state = $o2_state_init -- av_ad_hi = 0
    0591 : 62ba ; -- <0174> ram $ram_o2_state = $o2_state_init -- av_ad_lo = 186
    0592 : 5600 ; -- <0174> ram $ram_o2_state = $o2_state_init -- av_write_data = 0
    0593 : 5e00 ; -- <0175> ram $ram_o2_been_lean = 0 -- av_ad_hi = 0
    0594 : 62be ; -- <0175> ram $ram_o2_been_lean = 0 -- av_ad_lo = 190
    0595 : 5600 ; -- <0175> ram $ram_o2_been_lean = 0 -- av_write_data = 0
    0596 : 5e00 ; -- <0176> ram $ram_o2_been_rich = 0 -- av_ad_hi = 0
    0597 : 62bc ; -- <0176> ram $ram_o2_been_rich = 0 -- av_ad_lo = 188
    0598 : 5600 ; -- <0176> ram $ram_o2_been_rich = 0 -- av_write_data = 0

    0599 : fc00 ; -- <0178> swapra = nop

-- ######## func leave_learn_stoich -- = 0x059a
    059a : 303e ; -- <0181> push rtna -- func leave_learn_stoich

    059b : fba0 ; -- <0180> callx  check_engine_stop  pa
    059c : 0993 ; -- <0180> "
    059d : fc00 ; -- <0180> "

    059e : f80c ; -- <0182> pop rtna -- func leave_learn_stoich
    059f : fc00 ; -- <0182> swapra = nop

-- ######## func find_rpm_cell -- = 0x05a0
    05a0 : 3002 ; -- <0199> push i -- func find_rpm_cell
    05a1 : 3003 ; -- <0199> push j -- "

    05a2 : 0a01 ; -- <0184> i = 1
    05a3 : 0008 ; -- <0185> a = rpm
    05a4 : 0760 ; -- <0186> b = 0xffff
    05a5 : e007 ; -- <0187> br eq :found
    05a6 : 05b4 ; -- <0187> "
-- :next_cell -- = 0x05a7
    05a7 : 0fa0 ; -- <0189> j = :rpm_cells
    05a8 : 0477 ; -- <0189> "
    05a9 : c800 ; -- <0190> fetch a from i+j
    05aa : d310 ; -- <0190> "
    05ab : 03b0 ; -- <0190> "
    05ac : 0408 ; -- <0191> b = rpm
    05ad : e006 ; -- <0192> br gt :found
    05ae : 05b4 ; -- <0192> "
    05af : 0e01 ; -- <0193> j = 1
    05b0 : c800 ; -- <0194> i = i+j
    05b1 : 0b10 ; -- <0194> "
    05b2 : e00f ; -- <0195> jmp :next_cell
    05b3 : 05a7 ; -- <0195> "
-- :found -- = 0x05b4
    05b4 : 0f60 ; -- <0197> j = -1
    05b5 : c800 ; -- <0198> cell = i+j
    05b6 : 2310 ; -- <0198> "
    05b7 : 0c0c ; -- <0198> pop j -- rtn i+j
    05b8 : 080c ; -- <0198> pop i -- "
    05b9 : fc00 ; -- <0197> swapra = nop

    05ba : 0c0c ; -- <0200> pop j -- func find_rpm_cell
    05bb : 080c ; -- <0200> pop i -- "
    05bc : fc00 ; -- <0200> swapra = nop

-- ######## func dump_smap_cmd -- = 0x05bd
    05bd : 3004 ; -- <0215> push x -- func dump_smap_cmd
    05be : 303e ; -- <0215> push rtna -- "

    05bf : 5e00 ; -- <0202> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    05c0 : 627e ; -- <0202> ram pa = $ram_avg_rpm -- av_ad_lo = 126
    05c1 : 2015 ; -- <0202> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    05c2 : 2016 ; -- <0202> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    05c3 : fba0 ; -- <0203> callx  find_rpm_cell  pa  y
    05c4 : 05a0 ; -- <0203> "
    05c5 : fc00 ; -- <0203> "
    05c6 : 1408 ; -- <0203> y = pa
    05c7 : 1200 ; -- <0213> x = 0
-- :loop_1479 -- = 0x05c8

    05c8 : 0004 ; -- <0204> a = x

    05c9 : 0351 ; -- <0205> a = a<<1
    05ca : 069c ; -- <0205> b = 156
    05cb : 5e00 ; -- <0205> av_ad_hi = 0
    05cc : 6300 ; -- <0205> av_ad_lo = ad0
    05cd : 0415 ; -- <0205> b = av_write_data
    05ce : 0416 ; -- <0205> b = av_read_data

    05cf : 0001 ; -- <0206> a = b
    05d0 : fba0 ; -- <0207> call put4x
    05d1 : 00c3 ; -- <0207> "
    05d2 : fc00 ; -- <0207> "

    05d3 : 0004 ; -- <0210> a = x
    05d4 : 0405 ; -- <0210> b = y

    05d5 : e407 ; -- <0208> bn eq :else_1493
    05d6 : 05db ; -- <0208> "

    05d7 : 023c ; -- <0209> a = 60 -- putasc "<"
    05d8 : fba0 ; -- <0209> putasc "<"
    05d9 : 009b ; -- <0209> "
    05da : fc00 ; -- <0209> "

    05db : 0220 ; -- <0211> a = 32 -- putasc " "
    05dc : fba0 ; -- <0211> putasc " "
    05dd : 009b ; -- <0211> "
    05de : fc00 ; -- <0211> "


    05df : 0004 ; -- <0213> a = x
    05e0 : 0601 ; -- <0213> b = 1
    05e1 : c800 ; -- <0213> x = a+b
    05e2 : 1300 ; -- <0213> "


    05e3 : 0004 ; -- <0213> a = x
    05e4 : 060d ; -- <0213> b = $num_rpm_cells
    05e5 : e005 ; -- <0213> br lt :loop_1479
    05e6 : 05c8 ; -- <0213> "

-- :end_1479 -- = 0x05e7
    05e7 : 020d ; -- <0214> a = 13 -- puteol
    05e8 : fba0 ; -- <0214> puteol
    05e9 : 009b ; -- <0214> "
    05ea : fc00 ; -- <0214> "
    05eb : 020a ; -- <0214> a = 10 -- puteol
    05ec : fba0 ; -- <0214> puteol
    05ed : 009b ; -- <0214> "
    05ee : fc00 ; -- <0214> "

    05ef : f80c ; -- <0216> pop rtna -- func dump_smap_cmd
    05f0 : 100c ; -- <0216> pop x -- "
    05f1 : fc00 ; -- <0216> swapra = nop

-- ######## func clear_smap_cmd -- = 0x05f2
    05f2 : 3002 ; -- <0223> push i -- func clear_smap_cmd

    05f3 : 0a00 ; -- <0222> i = 0
-- :loop_1523 -- = 0x05f4

    05f4 : 0002 ; -- <0218> a = i
    05f5 : 07a0 ; -- <0219> b = 3000
    05f6 : 0bb8 ; -- <0219> "

    05f7 : 0351 ; -- <0220> a = a<<1
    05f8 : 3001 ; -- <0220> push b -- push b
    05f9 : 069c ; -- <0220> b = 156
    05fa : 5e00 ; -- <0220> av_ad_hi = 0
    05fb : 6300 ; -- <0220> av_ad_lo = ad0
    05fc : 540c ; -- <0220> pop av_write_data -- pop av_write_data



    05fd : 0002 ; -- <0222> a = i
    05fe : 0601 ; -- <0222> b = 1
    05ff : c800 ; -- <0222> i = a+b
    0600 : 0b00 ; -- <0222> "


    0601 : 0002 ; -- <0222> a = i
    0602 : 060d ; -- <0222> b = $num_rpm_cells
    0603 : e005 ; -- <0222> br lt :loop_1523
    0604 : 05f4 ; -- <0222> "

-- :end_1523 -- = 0x0605

    0605 : 080c ; -- <0224> pop i -- func clear_smap_cmd
    0606 : fc00 ; -- <0224> swapra = nop


-- #########################################################################
-- :main -- = 0x0607
    0607 : 03a0 ; -- <0214> a = :boot_msg
    0608 : 008b ; -- <0214> "
    0609 : fba0 ; -- <0215> call :print_nt
    060a : 014f ; -- <0215> "
    060b : fc00 ; -- <0215> "

-- clear the first 64k of RAM.
    060c : 5e00 ; -- <0218> av_ad_hi = 0
    060d : fba0 ; -- <0218> callx  clear_ram_page  0
    060e : 0928 ; -- <0218> "
    060f : fc00 ; -- <0218> "

-- init fuel injection.
    0610 : fba0 ; -- <0221> callx  init_plan_stop
    0611 : 02fa ; -- <0221> "
    0612 : fc00 ; -- <0221> "

-- power up FTDI USB board, and init any other special board control functions.
    0613 : 7280 ; -- <0224> board_ctrl = $ftdi_power_mask
    0614 : fba0 ; -- <0225> callx postpone_comm_restart
    0615 : 08ff ; -- <0225> "
    0616 : fc00 ; -- <0225> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    0617 : 7a00 ; -- <0232> power_duty = $power_duty_closing

    0618 : 001e ; -- <0236> a = power_duty
    0619 : 06c0 ; -- <0236> b = ( $power_lost_mask | $ign_switch_off_mask )

    061a : e003 ; -- <0233> br and0z :else_1562
    061b : 0621 ; -- <0233> "

    061c : 7a32 ; -- <0234> power_duty = $power_duty_opening
    061d : 6fa0 ; -- <0235> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    061e : fffb ; -- <0235> "
    061f : e00f ; -- <0235> error_halt_code $err_power_lost_at_boot
    0620 : 061f ; -- <0235> "

    0621 : 5e00 ; -- <0237> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0622 : 623e ; -- <0237> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    0623 : 5760 ; -- <0237> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0624 : 5e00 ; -- <0238> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    0625 : 6240 ; -- <0238> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 64
    0626 : 5602 ; -- <0238> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    0627 : 3ba0 ; -- <0241> soft_event = $event_controller_reset_mask
    0628 : 8000 ; -- <0241> "
    0629 : 3a00 ; -- <0242> soft_event = 0
    062a : 47a0 ; -- <0243> mstimer0 = 1000
    062b : 03e8 ; -- <0243> "
    062c : 4e14 ; -- <0244> mstimer2 = $plan_tick_ms
    062d : e00f ; -- <0245> jmp :poll_events
    062e : 008e ; -- <0245> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x062f
    062f : 008e ; -- <0250> ([label :poll_events])
    0630 : 085a ; -- <0251> ([label :power_lost_handler])
    0631 : 0644 ; -- <0252> ([label :ign_capture_handler])
    0632 : 06c4 ; -- <0253> ([label :ign_capture_timeout_handler])
    0633 : 088e ; -- <0254> ([label :puff1_done_handler])
    0634 : 06c9 ; -- <0255> ([label :ustimer0_handler])
    0635 : 07f5 ; -- <0256> ([label :spi_done_handler])
    0636 : 06cb ; -- <0257> ([label :mstimer0_handler])
    0637 : 07c1 ; -- <0258> ([label :mstimer1_handler])
    0638 : 06fa ; -- <0259> ([label :mstimer2_handler])
    0639 : 0721 ; -- <0260> ([label :uart_rx_handler])
    063a : 073a ; -- <0261> ([label :uart_rx_overflow_handler])
    063b : 0740 ; -- <0262> ([label :uart_tx_overflow_handler])
    063c : 0746 ; -- <0263> ([label :key0_handler])
    063d : 0750 ; -- <0264> ([label :key1_handler])
    063e : 0871 ; -- <0265> ([label :ign_switch_off_handler])
    063f : 0884 ; -- <0266> ([label :ign_switch_on_handler])
    0640 : 075a ; -- <0267> ([label :softevent3_handler])
    0641 : 075c ; -- <0268> ([label :softevent2_handler])
    0642 : 075e ; -- <0269> ([label :softevent1_handler])
    0643 : 0760 ; -- <0270> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x0644
-- discard outlier time.
    0644 : 181f ; -- <0276> g6 = ign_capture_jf
    0645 : 5e00 ; -- <0277> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    0646 : 6284 ; -- <0277> ram b = $ram_ign_fastest_jf -- av_ad_lo = 132
    0647 : 0415 ; -- <0277> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    0648 : 0416 ; -- <0277> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle

    0649 : 0006 ; -- <0280> a = g6
    064a : 0401 ; -- <0280> b = b

    064b : e405 ; -- <0278> bn lt :else_1611
    064c : 064e ; -- <0278> "

    064d : 1a00 ; -- <0279> g6 = 0

    064e : 5e00 ; -- <0281> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    064f : 6286 ; -- <0281> ram b = $ram_ign_slowest_jf -- av_ad_lo = 134
    0650 : 0415 ; -- <0281> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    0651 : 0416 ; -- <0281> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle

    0652 : 0006 ; -- <0284> a = g6
    0653 : 0401 ; -- <0284> b = b

    0654 : e406 ; -- <0282> bn gt :else_1620
    0655 : 0657 ; -- <0282> "

    0656 : 1a00 ; -- <0283> g6 = 0


-- increment buffer index and memorize time.
    0657 : 5e00 ; -- <0287> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    0658 : 625a ; -- <0287> ram a = $ram_ign_history_idx -- av_ad_lo = 90
    0659 : 0015 ; -- <0287> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    065a : 0016 ; -- <0287> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    065b : 0601 ; -- <0288> b = 1
    065c : c800 ; -- <0289> a = a+b
    065d : 0300 ; -- <0289> "
    065e : 060f ; -- <0290> b = $ign_history_idx_mask
    065f : c800 ; -- <0291> a = and
    0660 : 0330 ; -- <0291> "
    0661 : 5e00 ; -- <0292> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    0662 : 625a ; -- <0292> ram $ram_ign_history_idx = a -- av_ad_lo = 90
    0663 : 5400 ; -- <0292> ram $ram_ign_history_idx = a -- av_write_data = a
    0664 : 0406 ; -- <0293> b = g6

    0665 : 0351 ; -- <0294> a = a<<1
    0666 : 3001 ; -- <0294> push b -- push b
    0667 : 065c ; -- <0294> b = 92
    0668 : 5e00 ; -- <0294> av_ad_hi = 0
    0669 : 6300 ; -- <0294> av_ad_lo = ad0
    066a : 540c ; -- <0294> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, y = sample, i = index = loop count, g6 = count of invalid samples.
    066b : 1200 ; -- <0299> x = 0
    066c : 1a00 ; -- <0300> g6 = 0
    066d : 0a00 ; -- <0316> i = 0
-- :loop_1645 -- = 0x066e

    066e : 0002 ; -- <0301> a = i

    066f : 0351 ; -- <0302> a = a<<1
    0670 : 065c ; -- <0302> b = 92
    0671 : 5e00 ; -- <0302> av_ad_hi = 0
    0672 : 6300 ; -- <0302> av_ad_lo = ad0
    0673 : 0415 ; -- <0302> b = av_write_data
    0674 : 0416 ; -- <0302> b = av_read_data

    0675 : 1401 ; -- <0303> y = b

    0676 : 0005 ; -- <0314> a = y
    0677 : 0600 ; -- <0314> b = 0

    0678 : e407 ; -- <0304> bn eq :else_1656
    0679 : 0680 ; -- <0304> "

    067a : 0006 ; -- <0305> a = g6
    067b : 0601 ; -- <0306> b = 1
    067c : c800 ; -- <0307> g6 = a+b
    067d : 1b00 ; -- <0307> "

    067e : e00f ; -- <0309> jmp :end_1656
    067f : 0687 ; -- <0309> "

    0680 : 0208 ; -- <0310> a = ($ign_history_len / 2)
    0681 : 0405 ; -- <0311> b = y
    0682 : c800 ; -- <0312> a = a+b
    0683 : 0300 ; -- <0312> "
    0684 : 1753 ; -- <0313> y = a>>$ign_history_idx_bits
    0685 : c800 ; -- <0314> x = x+y
    0686 : 1320 ; -- <0314> "



    0687 : 0002 ; -- <0316> a = i
    0688 : 0601 ; -- <0316> b = 1
    0689 : c800 ; -- <0316> i = a+b
    068a : 0b00 ; -- <0316> "


    068b : 0002 ; -- <0316> a = i
    068c : 0610 ; -- <0316> b = $ign_history_len
    068d : e005 ; -- <0316> br lt :loop_1645
    068e : 066e ; -- <0316> "

-- :end_1645 -- = 0x068f
    068f : 5e00 ; -- <0317> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    0690 : 627c ; -- <0317> ram $ram_ign_avg_jf = x -- av_ad_lo = 124
    0691 : 5404 ; -- <0317> ram $ram_ign_avg_jf = x -- av_write_data = x
    0692 : 5e00 ; -- <0318> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    0693 : 6282 ; -- <0318> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 130
    0694 : 5406 ; -- <0318> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.


    0695 : 0006 ; -- <0334> a = g6
    0696 : 0604 ; -- <0334> b = ( $ign_history_len / 4 )

    0697 : e406 ; -- <0327> bn gt :else_1687
    0698 : 069e ; -- <0327> "

    0699 : 5e00 ; -- <0328> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    069a : 6280 ; -- <0328> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    069b : 5600 ; -- <0328> ram $ram_rpm_valid = 0 -- av_write_data = 0

    069c : e00f ; -- <0330> jmp :end_1687
    069d : 06a8 ; -- <0330> "

-- convert jiffies b to new RPM estimate.
    069e : 2004 ; -- <0332> pa = x
    069f : fba0 ; -- <0332> callx  jf_to_rpm  x  pa
    06a0 : 0987 ; -- <0332> "
    06a1 : fc00 ; -- <0332> "
    06a2 : 5e00 ; -- <0333> ram $ram_avg_rpm = pa -- av_ad_hi = 0
    06a3 : 627e ; -- <0333> ram $ram_avg_rpm = pa -- av_ad_lo = 126
    06a4 : 5408 ; -- <0333> ram $ram_avg_rpm = pa -- av_write_data = pa
    06a5 : 5e00 ; -- <0334> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    06a6 : 6280 ; -- <0334> ram $ram_rpm_valid = 1 -- av_ad_lo = 128
    06a7 : 5601 ; -- <0334> ram $ram_rpm_valid = 1 -- av_write_data = 1

    06a8 : e00f ; -- <0335> end_event
    06a9 : 008e ; -- <0335> "

-- ######## func clear_ign_history -- = 0x06aa
    06aa : 3002 ; -- <0348> push i -- func clear_ign_history

-- invalidate the RPM estimate.
    06ab : 5e00 ; -- <0339> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    06ac : 6280 ; -- <0339> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    06ad : 5600 ; -- <0339> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    06ae : 5e00 ; -- <0342> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    06af : 6282 ; -- <0342> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 130
    06b0 : 5610 ; -- <0342> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    06b1 : 0a00 ; -- <0347> i = 0
-- :loop_1713 -- = 0x06b2

    06b2 : 0002 ; -- <0343> a = i
    06b3 : 0600 ; -- <0344> b = 0

    06b4 : 0351 ; -- <0345> a = a<<1
    06b5 : 3001 ; -- <0345> push b -- push b
    06b6 : 065c ; -- <0345> b = 92
    06b7 : 5e00 ; -- <0345> av_ad_hi = 0
    06b8 : 6300 ; -- <0345> av_ad_lo = ad0
    06b9 : 540c ; -- <0345> pop av_write_data -- pop av_write_data



    06ba : 0002 ; -- <0347> a = i
    06bb : 0601 ; -- <0347> b = 1
    06bc : c800 ; -- <0347> i = a+b
    06bd : 0b00 ; -- <0347> "


    06be : 0002 ; -- <0347> a = i
    06bf : 0610 ; -- <0347> b = $ign_history_len
    06c0 : e005 ; -- <0347> br lt :loop_1713
    06c1 : 06b2 ; -- <0347> "

-- :end_1713 -- = 0x06c2

    06c2 : 080c ; -- <0349> pop i -- func clear_ign_history
    06c3 : fc00 ; -- <0349> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x06c4
-- it's been too long since the last ignition pulse detect.
    06c4 : fba0 ; -- <0352> callx clear_ign_history
    06c5 : 06aa ; -- <0352> "
    06c6 : fc00 ; -- <0352> "
    06c7 : e00f ; -- <0353> end_event
    06c8 : 008e ; -- <0353> "

-- ######## event ustimer0_handler -- = 0x06c9
    06c9 : e00f ; -- <0356> end_event
    06ca : 008e ; -- <0356> "

-- ######## event mstimer0_handler -- = 0x06cb
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    06cb : 47a0 ; -- <0362> mstimer0 = 1000
    06cc : 03e8 ; -- <0362> "

-- realtime counters in RAM.
    06cd : 5e00 ; -- <0365> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    06ce : 6244 ; -- <0365> ram a = $ram_seconds_cnt -- av_ad_lo = 68
    06cf : 0015 ; -- <0365> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    06d0 : 0016 ; -- <0365> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    06d1 : 0601 ; -- <0366> b = 1
    06d2 : c800 ; -- <0367> a = a+b
    06d3 : 0300 ; -- <0367> "

    06d4 : 0000 ; -- <0376> a = a
    06d5 : 063c ; -- <0376> b = 60

    06d6 : e407 ; -- <0368> bn eq :else_1750
    06d7 : 06e9 ; -- <0368> "

    06d8 : 5e00 ; -- <0369> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    06d9 : 6244 ; -- <0369> ram $ram_seconds_cnt = 0 -- av_ad_lo = 68
    06da : 5600 ; -- <0369> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    06db : 5e00 ; -- <0370> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    06dc : 6242 ; -- <0370> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    06dd : 0015 ; -- <0370> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    06de : 0016 ; -- <0370> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    06df : 0601 ; -- <0371> b = 1
    06e0 : 5e00 ; -- <0372> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    06e1 : 6242 ; -- <0372> ram $ram_minutes_cnt = a+b -- av_ad_lo = 66
    06e2 : c800 ; -- <0372> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    06e3 : 5700 ; -- <0372> "
    06e4 : fba0 ; -- <0373> callx minute_events
    06e5 : 089d ; -- <0373> "
    06e6 : fc00 ; -- <0373> "

    06e7 : e00f ; -- <0375> jmp :end_1750
    06e8 : 06ec ; -- <0375> "

    06e9 : 5e00 ; -- <0376> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    06ea : 6244 ; -- <0376> ram $ram_seconds_cnt = a -- av_ad_lo = 68
    06eb : 5400 ; -- <0376> ram $ram_seconds_cnt = a -- av_write_data = a


-- all 1-second functions here.
    06ec : fba0 ; -- <0379> callx check_power_relay
    06ed : 08a5 ; -- <0379> "
    06ee : fc00 ; -- <0379> "
    06ef : fba0 ; -- <0380> callx check_communication
    06f0 : 08d2 ; -- <0380> "
    06f1 : fc00 ; -- <0380> "
    06f2 : fba0 ; -- <0381> callx start_daq_pass
    06f3 : 076c ; -- <0381> "
    06f4 : fc00 ; -- <0381> "
    06f5 : e00f ; -- <0382> end_event
    06f6 : 008e ; -- <0382> "

-- :plan_transition_msg -- = 0x06f7
-- "PLAN\x0"
    06f7 : 4c50 ; -- <0385> LP
    06f8 : 4e41 ; -- <0385> NA
    06f9 : 0000 ; -- <0385>   

-- ######## event mstimer2_handler -- = 0x06fa
-- engine management plan tick timer.

-- restart timer.
    06fa : 4e14 ; -- <0391> mstimer2 = $plan_tick_ms

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    06fb : 5e00 ; -- <0396> ram rtna = $ram_transition_func -- av_ad_hi = 0
    06fc : 628e ; -- <0396> ram rtna = $ram_transition_func -- av_ad_lo = 142
    06fd : f815 ; -- <0396> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    06fe : f816 ; -- <0396> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    06ff : 103e ; -- <0397> x = rtna
    0700 : fc00 ; -- <0398> swapra = nop
    0701 : 5e00 ; -- <0400> ram b = $ram_transition_func -- av_ad_hi = 0
    0702 : 628e ; -- <0400> ram b = $ram_transition_func -- av_ad_lo = 142
    0703 : 0415 ; -- <0400> ram b = $ram_transition_func -- b = av_write_data -- start read cycle
    0704 : 0416 ; -- <0400> ram b = $ram_transition_func -- b = av_read_data -- finish read cycle

    0705 : 0004 ; -- <0403> a = x
    0706 : 0401 ; -- <0403> b = b

    0707 : e007 ; -- <0401> br eq :else_1799
    0708 : 070e ; -- <0401> "

    0709 : 23a0 ; -- <0402> pa = :plan_transition_msg
    070a : 06f7 ; -- <0402> "
    070b : fba0 ; -- <0402> callx  set_text_flag  :plan_transition_msg
    070c : 0930 ; -- <0402> "
    070d : fc00 ; -- <0402> "

-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    070e : 5e00 ; -- <0406> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    070f : 628c ; -- <0406> ram rtna = $ram_puff_len_func -- av_ad_lo = 140
    0710 : f815 ; -- <0406> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    0711 : f816 ; -- <0406> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    0712 : fc00 ; -- <0407> swapra = nop

-- start another o2 reading every plan tick.
    0713 : 5e00 ; -- <0411> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0714 : 6238 ; -- <0411> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    0715 : 0015 ; -- <0411> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0716 : 0016 ; -- <0411> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    0717 : 0000 ; -- <0414> a = a
    0718 : 0600 ; -- <0414> b = 0

    0719 : e407 ; -- <0412> bn eq :else_1817
    071a : 071f ; -- <0412> "

    071b : 2205 ; -- <0413> pa = 5
    071c : fba0 ; -- <0413> callx  begin_adc_conversion  $o2_adc_channel
    071d : 07e7 ; -- <0413> "
    071e : fc00 ; -- <0413> "

    071f : e00f ; -- <0415> end_event
    0720 : 008e ; -- <0415> "

-- ######## event uart_rx_handler -- = 0x0721
-- :again -- = 0x0721
    0721 : fba0 ; -- <0419> pollchar
    0722 : 00aa ; -- <0419> "
    0723 : fc00 ; -- <0419> "
    0724 : 1000 ; -- <0420> x = a

    0725 : 0004 ; -- <0423> a = x
    0726 : 0760 ; -- <0423> b = -1

    0727 : e407 ; -- <0421> bn eq :else_1831
    0728 : 072b ; -- <0421> "

    0729 : e00f ; -- <0422> event_return
    072a : 008e ; -- <0422> "


    072b : 0004 ; -- <0426> a = x
    072c : 060a ; -- <0426> b = 10

    072d : e407 ; -- <0424> bn eq :else_1837
    072e : 0732 ; -- <0424> "

    072f : fba0 ; -- <0425> callx  postpone_comm_restart
    0730 : 08ff ; -- <0425> "
    0731 : fc00 ; -- <0425> "

    0732 : 2004 ; -- <0427> pa = x
    0733 : fba0 ; -- <0427> callx  parse_key  x
    0734 : 0246 ; -- <0427> "
    0735 : fc00 ; -- <0427> "
    0736 : e00f ; -- <0428> jmp :again
    0737 : 0721 ; -- <0428> "
    0738 : e00f ; -- <0429> end_event
    0739 : 008e ; -- <0429> "

-- ######## event uart_rx_overflow_handler -- = 0x073a
    073a : 6fa0 ; -- <0432> error_halt_code $err_rx_overflow -- leds = 0xfffe
    073b : fffe ; -- <0432> "
    073c : e00f ; -- <0432> error_halt_code $err_rx_overflow
    073d : 073c ; -- <0432> "
    073e : e00f ; -- <0433> end_event
    073f : 008e ; -- <0433> "

-- ######## event uart_tx_overflow_handler -- = 0x0740
    0740 : 6fa0 ; -- <0436> error_halt_code $err_tx_overflow -- leds = 0xfffd
    0741 : fffd ; -- <0436> "
    0742 : e00f ; -- <0436> error_halt_code $err_tx_overflow
    0743 : 0742 ; -- <0436> "
    0744 : e00f ; -- <0437> end_event
    0745 : 008e ; -- <0437> "

-- ######## event key0_handler -- = 0x0746
    0746 : 026b ; -- <0440> a = 107 -- putasc "k"
    0747 : fba0 ; -- <0440> putasc "k"
    0748 : 009b ; -- <0440> "
    0749 : fc00 ; -- <0440> "
    074a : 0230 ; -- <0441> a = 48 -- putasc "0"
    074b : fba0 ; -- <0441> putasc "0"
    074c : 009b ; -- <0441> "
    074d : fc00 ; -- <0441> "
    074e : e00f ; -- <0442> end_event
    074f : 008e ; -- <0442> "

-- ######## event key1_handler -- = 0x0750
    0750 : 026b ; -- <0445> a = 107 -- putasc "k"
    0751 : fba0 ; -- <0445> putasc "k"
    0752 : 009b ; -- <0445> "
    0753 : fc00 ; -- <0445> "
    0754 : 0231 ; -- <0446> a = 49 -- putasc "1"
    0755 : fba0 ; -- <0446> putasc "1"
    0756 : 009b ; -- <0446> "
    0757 : fc00 ; -- <0446> "
    0758 : e00f ; -- <0447> end_event
    0759 : 008e ; -- <0447> "

-- ######## event softevent3_handler -- = 0x075a
    075a : e00f ; -- <0450> end_event
    075b : 008e ; -- <0450> "

-- ######## event softevent2_handler -- = 0x075c
    075c : e00f ; -- <0453> end_event
    075d : 008e ; -- <0453> "

-- ######## event softevent1_handler -- = 0x075e
    075e : e00f ; -- <0456> end_event
    075f : 008e ; -- <0456> "

-- ######## event softevent0_handler -- = 0x0760
    0760 : e00f ; -- <0459> end_event
    0761 : 008e ; -- <0459> "

-- :rpm_msg -- = 0x0762
-- ": rpm=\x0"
    0762 : 203a ; -- <0462>  :
    0763 : 7072 ; -- <0462> pr
    0764 : 3d6d ; -- <0462> =m
    0765 : 0000 ; -- <0462>   

-- :puff_len_msg -- = 0x0766
-- " pfl=\x0"
    0766 : 7020 ; -- <0465> p 
    0767 : 6c66 ; -- <0465> lf
    0768 : 003d ; -- <0465>  =

-- :o2_msg -- = 0x0769
-- " o2=\x0"
    0769 : 6f20 ; -- <0468> o 
    076a : 3d32 ; -- <0468> =2
    076b : 0000 ; -- <0468>   

-- ######## func start_daq_pass -- = 0x076c
    076c : 3004 ; -- <0511> push x -- func start_daq_pass
    076d : 303e ; -- <0511> push rtna -- "

-- daq pass counter in RAM.
    076e : 5e00 ; -- <0472> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    076f : 6214 ; -- <0472> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0770 : 0015 ; -- <0472> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0771 : 0016 ; -- <0472> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0772 : 0601 ; -- <0473> b = 1
    0773 : c800 ; -- <0474> a = a+b
    0774 : 0300 ; -- <0474> "
    0775 : 6c00 ; -- <0475> leds = a
    0776 : 5e00 ; -- <0476> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    0777 : 6214 ; -- <0476> ram $ram_daq_pass_cnt = a -- av_ad_lo = 20
    0778 : 5400 ; -- <0476> ram $ram_daq_pass_cnt = a -- av_write_data = a
    0779 : fba0 ; -- <0477> call :put4x
    077a : 00c3 ; -- <0477> "
    077b : fc00 ; -- <0477> "

    077c : 03a0 ; -- <0479> a = :rpm_msg
    077d : 0762 ; -- <0479> "
    077e : fba0 ; -- <0480> call :print_nt
    077f : 014f ; -- <0480> "
    0780 : fc00 ; -- <0480> "
    0781 : 0200 ; -- <0481> a = 0
    0782 : 5e00 ; -- <0482> ram x = $ram_rpm_valid -- av_ad_hi = 0
    0783 : 6280 ; -- <0482> ram x = $ram_rpm_valid -- av_ad_lo = 128
    0784 : 1015 ; -- <0482> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    0785 : 1016 ; -- <0482> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle

    0786 : 0004 ; -- <0485> a = x
    0787 : 0600 ; -- <0485> b = 0

    0788 : e007 ; -- <0483> br eq :else_1928
    0789 : 078e ; -- <0483> "

    078a : 5e00 ; -- <0484> ram a = $ram_avg_rpm -- av_ad_hi = 0
    078b : 627e ; -- <0484> ram a = $ram_avg_rpm -- av_ad_lo = 126
    078c : 0015 ; -- <0484> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    078d : 0016 ; -- <0484> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle

    078e : fba0 ; -- <0486> call :put4x
    078f : 00c3 ; -- <0486> "
    0790 : fc00 ; -- <0486> "

    0791 : 03a0 ; -- <0488> a = :puff_len_msg
    0792 : 0766 ; -- <0488> "
    0793 : fba0 ; -- <0489> call :print_nt
    0794 : 014f ; -- <0489> "
    0795 : fc00 ; -- <0489> "
    0796 : 0021 ; -- <0490> a = puff_len_us
    0797 : fba0 ; -- <0491> call :put4x
    0798 : 00c3 ; -- <0491> "
    0799 : fc00 ; -- <0491> "
    079a : 022c ; -- <0492> a = 44 -- putasc ","
    079b : fba0 ; -- <0492> putasc ","
    079c : 009b ; -- <0492> "
    079d : fc00 ; -- <0492> "
    079e : 5e00 ; -- <0493> ram a = $ram_puff_count -- av_ad_hi = 0
    079f : 6294 ; -- <0493> ram a = $ram_puff_count -- av_ad_lo = 148
    07a0 : 0015 ; -- <0493> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    07a1 : 0016 ; -- <0493> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    07a2 : fba0 ; -- <0494> call :put4x
    07a3 : 00c3 ; -- <0494> "
    07a4 : fc00 ; -- <0494> "

    07a5 : 03a0 ; -- <0496> a = :o2_msg
    07a6 : 0769 ; -- <0496> "
    07a7 : fba0 ; -- <0497> call :print_nt
    07a8 : 014f ; -- <0497> "
    07a9 : fc00 ; -- <0497> "
    07aa : 0205 ; -- <0498> a = $o2_adc_channel

    07ab : 0351 ; -- <0499> a = a<<1
    07ac : 0628 ; -- <0499> b = 40
    07ad : 5e00 ; -- <0499> av_ad_hi = 0
    07ae : 6300 ; -- <0499> av_ad_lo = ad0
    07af : 0415 ; -- <0499> b = av_write_data
    07b0 : 0416 ; -- <0499> b = av_read_data

    07b1 : 0001 ; -- <0500> a = b
    07b2 : fba0 ; -- <0501> call :put4x
    07b3 : 00c3 ; -- <0501> "
    07b4 : fc00 ; -- <0501> "

-- start to acquire & report all anmux channels.
    07b5 : 0207 ; -- <0504> a = ($anmux_num_channels - 1)
    07b6 : fba0 ; -- <0505> call :anmux_set_chn
    07b7 : 00b2 ; -- <0505> "
    07b8 : fc00 ; -- <0505> "
    07b9 : 4a05 ; -- <0506> mstimer1 = $anmux_settle_ms

-- -- observe MCU utilization.  this RAM variable can be seen by the debugger.
    07ba : 5e00 ; -- <0509> ram $ram_mcu_usage_cnt = usage_count -- av_ad_hi = 0
    07bb : 6246 ; -- <0509> ram $ram_mcu_usage_cnt = usage_count -- av_ad_lo = 70
    07bc : 540f ; -- <0509> ram $ram_mcu_usage_cnt = usage_count -- av_write_data = usage_count
    07bd : 3e00 ; -- <0510> usage_count = 0

    07be : f80c ; -- <0512> pop rtna -- func start_daq_pass
    07bf : 100c ; -- <0512> pop x -- "
    07c0 : fc00 ; -- <0512> swapra = nop

-- ######## event mstimer1_handler -- = 0x07c1
-- anmux signal has settled.

    07c1 : 5e00 ; -- <0516> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    07c2 : 6238 ; -- <0516> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    07c3 : 0015 ; -- <0516> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    07c4 : 0016 ; -- <0516> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    07c5 : 0000 ; -- <0521> a = a
    07c6 : 0600 ; -- <0521> b = 0

    07c7 : e007 ; -- <0517> br eq :else_1991
    07c8 : 07cc ; -- <0517> "

-- ADC is busy right now.  wait a while & try again.
    07c9 : 4a02 ; -- <0519> mstimer1 = $anmux_retry_ms
    07ca : e00f ; -- <0520> event_return
    07cb : 008e ; -- <0520> "


-- start a reading from the current anmux channel.
    07cc : 0220 ; -- <0524> a = 32 -- putasc " "
    07cd : fba0 ; -- <0524> putasc " "
    07ce : 009b ; -- <0524> "
    07cf : fc00 ; -- <0524> "
    07d0 : 0273 ; -- <0525> a = 115 -- putasc "s"
    07d1 : fba0 ; -- <0525> putasc "s"
    07d2 : 009b ; -- <0525> "
    07d3 : fc00 ; -- <0525> "
    07d4 : fba0 ; -- <0526> call :anmux_get_chn
    07d5 : 00b6 ; -- <0526> "
    07d6 : fc00 ; -- <0526> "
    07d7 : 0630 ; -- <0527> b = 48 -- asc b = "0"
    07d8 : c800 ; -- <0528> a = a+b -- putchar a+b
    07d9 : 0300 ; -- <0528> "
    07da : fba0 ; -- <0528> putchar a+b
    07db : 009b ; -- <0528> "
    07dc : fc00 ; -- <0528> "
    07dd : 023d ; -- <0529> a = 61 -- putasc "="
    07de : fba0 ; -- <0529> putasc "="
    07df : 009b ; -- <0529> "
    07e0 : fc00 ; -- <0529> "
    07e1 : 2207 ; -- <0530> pa = 7
    07e2 : fba0 ; -- <0530> callx  begin_adc_conversion  $anmux_adc_channel
    07e3 : 07e7 ; -- <0530> "
    07e4 : fc00 ; -- <0530> "
    07e5 : e00f ; -- <0531> end_event
    07e6 : 008e ; -- <0531> "

-- ######## func begin_adc_conversion -- = 0x07e7

-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.

    07e7 : 5e00 ; -- <0537> ram $ram_adc_chn_pending = next_channel -- av_ad_hi = 0
    07e8 : 6238 ; -- <0537> ram $ram_adc_chn_pending = next_channel -- av_ad_lo = 56
    07e9 : 5408 ; -- <0537> ram $ram_adc_chn_pending = next_channel -- av_write_data = next_channel
    07ea : 0008 ; -- <0538> a = next_channel
    07eb : 0352 ; -- <0539> a = a<<4
    07ec : 0352 ; -- <0540> a = a<<4
    07ed : 0351 ; -- <0541> a = a<<1
    07ee : 0351 ; -- <0542> a = a<<1
    07ef : 0351 ; -- <0543> a = a<<1
    07f0 : 5000 ; -- <0544> spi_data = a
    07f1 : 5e00 ; -- <0545> ram $ram_adc_junk = 1 -- av_ad_hi = 0
    07f2 : 623a ; -- <0545> ram $ram_adc_junk = 1 -- av_ad_lo = 58
    07f3 : 5601 ; -- <0545> ram $ram_adc_junk = 1 -- av_write_data = 1

    07f4 : fc00 ; -- <0547> swapra = nop

-- ######## event spi_done_handler -- = 0x07f5
-- discard the results of the first SPI exchange with the ADC.  that's only for writing the channel num out to the ADC.
    07f5 : 5e00 ; -- <0550> ram a = $ram_adc_junk -- av_ad_hi = 0
    07f6 : 623a ; -- <0550> ram a = $ram_adc_junk -- av_ad_lo = 58
    07f7 : 0015 ; -- <0550> ram a = $ram_adc_junk -- a = av_write_data -- start read cycle
    07f8 : 0016 ; -- <0550> ram a = $ram_adc_junk -- a = av_read_data -- finish read cycle

    07f9 : 0000 ; -- <0562> a = a
    07fa : 0600 ; -- <0562> b = 0

    07fb : e007 ; -- <0551> br eq :else_2043
    07fc : 080c ; -- <0551> "

-- start another SPI exchange to retrieve the actual reading.
    07fd : 5e00 ; -- <0553> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    07fe : 6238 ; -- <0553> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    07ff : 0015 ; -- <0553> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0800 : 0016 ; -- <0553> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle
    0801 : 0352 ; -- <0554> a = a<<4
    0802 : 0352 ; -- <0555> a = a<<4
    0803 : 0351 ; -- <0556> a = a<<1
    0804 : 0351 ; -- <0557> a = a<<1
    0805 : 0351 ; -- <0558> a = a<<1
    0806 : 5000 ; -- <0559> spi_data = a
    0807 : 5e00 ; -- <0560> ram $ram_adc_junk = 0 -- av_ad_hi = 0
    0808 : 623a ; -- <0560> ram $ram_adc_junk = 0 -- av_ad_lo = 58
    0809 : 5600 ; -- <0560> ram $ram_adc_junk = 0 -- av_write_data = 0
    080a : e00f ; -- <0561> event_return
    080b : 008e ; -- <0561> "


-- memorize an actual ADC reading.
    080c : 5e00 ; -- <0565> ram i = $ram_adc_chn_pending -- av_ad_hi = 0
    080d : 6238 ; -- <0565> ram i = $ram_adc_chn_pending -- av_ad_lo = 56
    080e : 0815 ; -- <0565> ram i = $ram_adc_chn_pending -- i = av_write_data -- start read cycle
    080f : 0816 ; -- <0565> ram i = $ram_adc_chn_pending -- i = av_read_data -- finish read cycle
    0810 : 5e00 ; -- <0566> ram $ram_adc_chn_pending = 0 -- av_ad_hi = 0
    0811 : 6238 ; -- <0566> ram $ram_adc_chn_pending = 0 -- av_ad_lo = 56
    0812 : 5600 ; -- <0566> ram $ram_adc_chn_pending = 0 -- av_write_data = 0
    0813 : 0002 ; -- <0567> a = i
    0814 : 0414 ; -- <0568> b = spi_data

    0815 : 0351 ; -- <0569> a = a<<1
    0816 : 3001 ; -- <0569> push b -- push b
    0817 : 0628 ; -- <0569> b = 40
    0818 : 5e00 ; -- <0569> av_ad_hi = 0
    0819 : 6300 ; -- <0569> av_ad_lo = ad0
    081a : 540c ; -- <0569> pop av_write_data -- pop av_write_data


    081b : 0002 ; -- <0572> a = i
    081c : 0605 ; -- <0572> b = 5

    081d : e407 ; -- <0570> bn eq :else_2077
    081e : 0821 ; -- <0570> "

    081f : e00f ; -- <0571> event_return
    0820 : 008e ; -- <0571> "


    0821 : 0002 ; -- <0599> a = i
    0822 : 0607 ; -- <0599> b = 7

    0823 : e407 ; -- <0573> bn eq :else_2083
    0824 : 0856 ; -- <0573> "

-- report anmux reading.
    0825 : 0014 ; -- <0575> a = spi_data
    0826 : fba0 ; -- <0576> call :put4x
    0827 : 00c3 ; -- <0576> "
    0828 : fc00 ; -- <0576> "

-- memorize anmux reading.
    0829 : fba0 ; -- <0579> call :anmux_get_chn
    082a : 00b6 ; -- <0579> "
    082b : fc00 ; -- <0579> "
    082c : 0414 ; -- <0580> b = spi_data

    082d : 0351 ; -- <0581> a = a<<1
    082e : 3001 ; -- <0581> push b -- push b
    082f : 0618 ; -- <0581> b = 24
    0830 : 5e00 ; -- <0581> av_ad_hi = 0
    0831 : 6300 ; -- <0581> av_ad_lo = ad0
    0832 : 540c ; -- <0581> pop av_write_data -- pop av_write_data


-- decrement anmux channel & start waiting again.
    0833 : fba0 ; -- <0584> call :anmux_get_chn
    0834 : 00b6 ; -- <0584> "
    0835 : fc00 ; -- <0584> "

    0836 : 0000 ; -- <0591> a = a
    0837 : 0600 ; -- <0591> b = 0

    0838 : e007 ; -- <0585> br eq :else_2104
    0839 : 0843 ; -- <0585> "

    083a : 0760 ; -- <0586> b = -1
    083b : c800 ; -- <0587> a = a+b
    083c : 0300 ; -- <0587> "
    083d : fba0 ; -- <0588> call :anmux_set_chn
    083e : 00b2 ; -- <0588> "
    083f : fc00 ; -- <0588> "
    0840 : 4a05 ; -- <0589> mstimer1 = $anmux_settle_ms
    0841 : e00f ; -- <0590> event_return
    0842 : 008e ; -- <0590> "


-- end of temperature daq pass.
    0843 : fba0 ; -- <0594> callx  report_plan
    0844 : 0978 ; -- <0594> "
    0845 : fc00 ; -- <0594> "
    0846 : fba0 ; -- <0595> callx  report_text_flags
    0847 : 0948 ; -- <0595> "
    0848 : fc00 ; -- <0595> "
    0849 : 020d ; -- <0596> a = 13 -- puteol
    084a : fba0 ; -- <0596> puteol
    084b : 009b ; -- <0596> "
    084c : fc00 ; -- <0596> "
    084d : 020a ; -- <0596> a = 10 -- puteol
    084e : fba0 ; -- <0596> puteol
    084f : 009b ; -- <0596> "
    0850 : fc00 ; -- <0596> "
    0851 : 5e00 ; -- <0597> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    0852 : 623c ; -- <0597> ram $ram_dial_setting = spi_data -- av_ad_lo = 60
    0853 : 5414 ; -- <0597> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    0854 : e00f ; -- <0598> event_return
    0855 : 008e ; -- <0598> "

    0856 : e00f ; -- <0600> end_event
    0857 : 008e ; -- <0600> "

-- :power_lost_msg -- = 0x0858
-- "PWL\x0"
    0858 : 5750 ; -- <0603> WP
    0859 : 004c ; -- <0603>  L

-- ######## event power_lost_handler -- = 0x085a
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    085a : 7a00 ; -- <0612> power_duty = $power_duty_closing
    085b : 5e00 ; -- <0613> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    085c : 6214 ; -- <0613> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    085d : 0015 ; -- <0613> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    085e : 0016 ; -- <0613> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    085f : 0602 ; -- <0614> b = $relay_hold_passes
    0860 : 5e00 ; -- <0615> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    0861 : 6240 ; -- <0615> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 64
    0862 : c800 ; -- <0615> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    0863 : 5700 ; -- <0615> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    0864 : fba0 ; -- <0620> callx  save_persistent_data
    0865 : 08d1 ; -- <0620> "
    0866 : fc00 ; -- <0620> "

    0867 : 23a0 ; -- <0622> pa = :power_lost_msg
    0868 : 0858 ; -- <0622> "
    0869 : fba0 ; -- <0622> callx  set_text_flag  :power_lost_msg
    086a : 0930 ; -- <0622> "
    086b : fc00 ; -- <0622> "
    086c : e00f ; -- <0623> end_event
    086d : 008e ; -- <0623> "

-- :ign_off_msg -- = 0x086e
-- "IGOF\x0"
    086e : 4749 ; -- <0626> GI
    086f : 464f ; -- <0626> FO
    0870 : 0000 ; -- <0626>   

-- ######## event ign_switch_off_handler -- = 0x0871
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    0871 : 5e00 ; -- <0630> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0872 : 6242 ; -- <0630> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0873 : 0015 ; -- <0630> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0874 : 0016 ; -- <0630> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0875 : 060a ; -- <0631> b = $power_extend_minutes
    0876 : 5e00 ; -- <0632> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    0877 : 623e ; -- <0632> ram $ram_power_down_at_min = a+b -- av_ad_lo = 62
    0878 : c800 ; -- <0632> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    0879 : 5700 ; -- <0632> "
    087a : 23a0 ; -- <0633> pa = :ign_off_msg
    087b : 086e ; -- <0633> "
    087c : fba0 ; -- <0633> callx  set_text_flag   :ign_off_msg
    087d : 0930 ; -- <0633> "
    087e : fc00 ; -- <0633> "
    087f : e00f ; -- <0634> end_event
    0880 : 008e ; -- <0634> "

-- :ign_on_msg -- = 0x0881
-- "IGON\x0"
    0881 : 4749 ; -- <0637> GI
    0882 : 4e4f ; -- <0637> NO
    0883 : 0000 ; -- <0637>   

-- ######## event ign_switch_on_handler -- = 0x0884
    0884 : 5e00 ; -- <0640> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0885 : 623e ; -- <0640> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    0886 : 5760 ; -- <0640> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0887 : 23a0 ; -- <0641> pa = :ign_on_msg
    0888 : 0881 ; -- <0641> "
    0889 : fba0 ; -- <0641> callx  set_text_flag   :ign_on_msg
    088a : 0930 ; -- <0641> "
    088b : fc00 ; -- <0641> "
    088c : e00f ; -- <0642> end_event
    088d : 008e ; -- <0642> "

-- ######## event puff1_done_handler -- = 0x088e
-- puff just finished.  set length of next puff.
    088e : 5e00 ; -- <0646> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    088f : 6292 ; -- <0646> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 146
    0890 : 8415 ; -- <0646> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    0891 : 8416 ; -- <0646> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    0892 : 5e00 ; -- <0649> ram a = $ram_puff_count -- av_ad_hi = 0
    0893 : 6294 ; -- <0649> ram a = $ram_puff_count -- av_ad_lo = 148
    0894 : 0015 ; -- <0649> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0895 : 0016 ; -- <0649> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0896 : 0601 ; -- <0650> b = 1
    0897 : 5e00 ; -- <0651> ram $ram_puff_count = a+b -- av_ad_hi = 0
    0898 : 6294 ; -- <0651> ram $ram_puff_count = a+b -- av_ad_lo = 148
    0899 : c800 ; -- <0651> ram $ram_puff_count = a+b -- av_write_data = a+b
    089a : 5700 ; -- <0651> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    089b : e00f ; -- <0662> end_event
    089c : 008e ; -- <0662> "

-- ######## func minute_events -- = 0x089d
    089d : 303e ; -- <0666> push rtna -- func minute_events

    089e : fba0 ; -- <0665> callx  check_power_down
    089f : 08ba ; -- <0665> "
    08a0 : fc00 ; -- <0665> "

    08a1 : f80c ; -- <0667> pop rtna -- func minute_events
    08a2 : fc00 ; -- <0667> swapra = nop

-- :power_hold_msg -- = 0x08a3
-- "PWH\x0"
    08a3 : 5750 ; -- <0669> WP
    08a4 : 0048 ; -- <0669>  H

-- ######## func check_power_relay -- = 0x08a5
    08a5 : 303e ; -- <0679> push rtna -- func check_power_relay

    08a6 : 5e00 ; -- <0672> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    08a7 : 6214 ; -- <0672> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    08a8 : 0015 ; -- <0672> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    08a9 : 0016 ; -- <0672> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    08aa : 5e00 ; -- <0673> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    08ab : 6240 ; -- <0673> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 64
    08ac : 0415 ; -- <0673> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    08ad : 0416 ; -- <0673> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle

    08ae : 0000 ; -- <0678> a = a
    08af : 0401 ; -- <0678> b = b

    08b0 : e407 ; -- <0674> bn eq :else_2224
    08b1 : 08b8 ; -- <0674> "

-- time to begin "solenoid saver" coil power reduction by PWM.
    08b2 : 7a19 ; -- <0676> power_duty = $power_duty_holding
    08b3 : 23a0 ; -- <0677> pa = :power_hold_msg
    08b4 : 08a3 ; -- <0677> "
    08b5 : fba0 ; -- <0677> callx  set_text_flag  :power_hold_msg
    08b6 : 0930 ; -- <0677> "
    08b7 : fc00 ; -- <0677> "


    08b8 : f80c ; -- <0680> pop rtna -- func check_power_relay
    08b9 : fc00 ; -- <0680> swapra = nop

-- ######## func check_power_down -- = 0x08ba

-- check power-down deadline in RAM.
    08ba : 5e00 ; -- <0683> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    08bb : 6242 ; -- <0683> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    08bc : 0015 ; -- <0683> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    08bd : 0016 ; -- <0683> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    08be : 5e00 ; -- <0684> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    08bf : 623e ; -- <0684> ram b = $ram_power_down_at_min -- av_ad_lo = 62
    08c0 : 0415 ; -- <0684> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    08c1 : 0416 ; -- <0684> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle

    08c2 : 0000 ; -- <0687> a = a
    08c3 : 0401 ; -- <0687> b = b

    08c4 : e407 ; -- <0685> bn eq :else_2244
    08c5 : 08c8 ; -- <0685> "

    08c6 : e00f ; -- <0686> jmp :power_down
    08c7 : 08c9 ; -- <0686> "


    08c8 : fc00 ; -- <0689> swapra = nop

-- :power_down -- = 0x08c9
-- this code never returns.
    08c9 : fba0 ; -- <0692> callx  save_persistent_data
    08ca : 08d1 ; -- <0692> "
    08cb : fc00 ; -- <0692> "
    08cc : 7a32 ; -- <0693> power_duty = $power_duty_opening
    08cd : 6fa0 ; -- <0694> error_halt_code $err_power_down -- leds = 0xfffc
    08ce : fffc ; -- <0694> "
    08cf : e00f ; -- <0694> error_halt_code $err_power_down
    08d0 : 08cf ; -- <0694> "

-- ######## func save_persistent_data -- = 0x08d1


    08d1 : fc00 ; -- <0698> swapra = nop

-- ######## func check_communication -- = 0x08d2
    08d2 : 303e ; -- <0718> push rtna -- func check_communication

    08d3 : 5e00 ; -- <0700> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    08d4 : 6212 ; -- <0700> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 18
    08d5 : 0015 ; -- <0700> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    08d6 : 0016 ; -- <0700> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle

    08d7 : 0000 ; -- <0708> a = a
    08d8 : 0600 ; -- <0708> b = 0

    08d9 : e007 ; -- <0701> br eq :else_2265
    08da : 08e8 ; -- <0701> "

    08db : 0760 ; -- <0702> b = -1
    08dc : c800 ; -- <0703> a = a+b
    08dd : 0300 ; -- <0703> "
    08de : 5e00 ; -- <0704> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    08df : 6212 ; -- <0704> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 18
    08e0 : 5400 ; -- <0704> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a

    08e1 : 0000 ; -- <0707> a = a
    08e2 : 0600 ; -- <0707> b = 0

    08e3 : e407 ; -- <0705> bn eq :else_2275
    08e4 : 08e8 ; -- <0705> "

    08e5 : fba0 ; -- <0706> callx  ftdi_power_on
    08e6 : 091c ; -- <0706> "
    08e7 : fc00 ; -- <0706> "



    08e8 : 5e00 ; -- <0710> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    08e9 : 6242 ; -- <0710> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    08ea : 0015 ; -- <0710> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    08eb : 0016 ; -- <0710> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    08ec : 5e00 ; -- <0711> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    08ed : 6210 ; -- <0711> ram b = $ram_comm_restart_at_min -- av_ad_lo = 16
    08ee : 0415 ; -- <0711> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    08ef : 0416 ; -- <0711> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle

    08f0 : 0000 ; -- <0717> a = a
    08f1 : 0401 ; -- <0717> b = b

    08f2 : e407 ; -- <0712> bn eq :else_2290
    08f3 : 08fd ; -- <0712> "

-- comm restart is required.
    08f4 : fba0 ; -- <0714> callx  postpone_comm_restart
    08f5 : 08ff ; -- <0714> "
    08f6 : fc00 ; -- <0714> "
    08f7 : 5e00 ; -- <0715> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    08f8 : 6212 ; -- <0715> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 18
    08f9 : 5605 ; -- <0715> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    08fa : fba0 ; -- <0716> callx  ftdi_power_off
    08fb : 090c ; -- <0716> "
    08fc : fc00 ; -- <0716> "


    08fd : f80c ; -- <0719> pop rtna -- func check_communication
    08fe : fc00 ; -- <0719> swapra = nop

-- ######## func postpone_comm_restart -- = 0x08ff

    08ff : 5e00 ; -- <0721> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0900 : 6242 ; -- <0721> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0901 : 0015 ; -- <0721> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0902 : 0016 ; -- <0721> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0903 : 0602 ; -- <0722> b = $comm_grace_period_min
    0904 : 5e00 ; -- <0723> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    0905 : 6210 ; -- <0723> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 16
    0906 : c800 ; -- <0723> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    0907 : 5700 ; -- <0723> "

    0908 : fc00 ; -- <0725> swapra = nop

-- :ftdi_off_msg -- = 0x0909
-- "FTOF\x0"
    0909 : 5446 ; -- <0727> TF
    090a : 464f ; -- <0727> FO
    090b : 0000 ; -- <0727>   

-- ######## func ftdi_power_off -- = 0x090c
    090c : 303e ; -- <0734> push rtna -- func ftdi_power_off

    090d : 001c ; -- <0730> a = board_ctrl
    090e : 07a0 ; -- <0731> b = $not_ftdi_power_mask
    090f : ff7f ; -- <0731> "
    0910 : c800 ; -- <0732> board_ctrl = and
    0911 : 7330 ; -- <0732> "
    0912 : 23a0 ; -- <0733> pa = :ftdi_off_msg
    0913 : 0909 ; -- <0733> "
    0914 : fba0 ; -- <0733> callx  set_text_flag  :ftdi_off_msg
    0915 : 0930 ; -- <0733> "
    0916 : fc00 ; -- <0733> "

    0917 : f80c ; -- <0735> pop rtna -- func ftdi_power_off
    0918 : fc00 ; -- <0735> swapra = nop

-- :ftdi_on_msg -- = 0x0919
-- "FTON\x0"
    0919 : 5446 ; -- <0737> TF
    091a : 4e4f ; -- <0737> NO
    091b : 0000 ; -- <0737>   

-- ######## func ftdi_power_on -- = 0x091c
    091c : 303e ; -- <0744> push rtna -- func ftdi_power_on

    091d : 001c ; -- <0740> a = board_ctrl
    091e : 0680 ; -- <0741> b = $ftdi_power_mask
    091f : c800 ; -- <0742> board_ctrl = or
    0920 : 7334 ; -- <0742> "
    0921 : 23a0 ; -- <0743> pa = :ftdi_on_msg
    0922 : 0919 ; -- <0743> "
    0923 : fba0 ; -- <0743> callx  set_text_flag  :ftdi_on_msg
    0924 : 0930 ; -- <0743> "
    0925 : fc00 ; -- <0743> "

    0926 : f80c ; -- <0745> pop rtna -- func ftdi_power_on
    0927 : fc00 ; -- <0745> swapra = nop

-- ######## func clear_ram_page -- = 0x0928

    0928 : 0200 ; -- <0747> a = 0
    0929 : 0602 ; -- <0748> b = 2
-- :clear_next_word -- = 0x092a
    092a : 6000 ; -- <0750> av_ad_lo = a
    092b : 5600 ; -- <0751> av_write_data = 0
    092c : 0300 ; -- <0752> a = ad0
    092d : e400 ; -- <0753> bn az :clear_next_word
    092e : 092a ; -- <0753> "

    092f : fc00 ; -- <0755> swapra = nop

-- ######## func set_text_flag -- = 0x0930

    0930 : 0408 ; -- <0757> b = flag_addr
    0931 : 5e00 ; -- <0758> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    0932 : 6258 ; -- <0758> ram a = $ram_next_tfp_idx -- av_ad_lo = 88
    0933 : 0015 ; -- <0758> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    0934 : 0016 ; -- <0758> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle

    0935 : 0351 ; -- <0759> a = a<<1
    0936 : 3001 ; -- <0759> push b -- push b
    0937 : 0648 ; -- <0759> b = 72
    0938 : 5e00 ; -- <0759> av_ad_hi = 0
    0939 : 6300 ; -- <0759> av_ad_lo = ad0
    093a : 540c ; -- <0759> pop av_write_data -- pop av_write_data

    093b : 0008 ; -- <0760> a = flag_addr
    093c : 0760 ; -- <0761> b = -1
    093d : c800 ; -- <0762> a = a+b
    093e : 0300 ; -- <0762> "
    093f : 0607 ; -- <0763> b = $tfp_mask
    0940 : 5e00 ; -- <0764> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    0941 : 6258 ; -- <0764> ram $ram_next_tfp_idx = and -- av_ad_lo = 88
    0942 : c800 ; -- <0764> ram $ram_next_tfp_idx = and -- av_write_data = and
    0943 : 5730 ; -- <0764> "

    0944 : fc00 ; -- <0766> swapra = nop

-- :text_flags_msg -- = 0x0945
-- " tf=\x0"
    0945 : 7420 ; -- <0768> t 
    0946 : 3d66 ; -- <0768> =f
    0947 : 0000 ; -- <0768>   

-- ######## func report_text_flags -- = 0x0948
    0948 : 3002 ; -- <0784> push i -- func report_text_flags
    0949 : 303e ; -- <0784> push rtna -- "

    094a : 03a0 ; -- <0771> a = :text_flags_msg
    094b : 0945 ; -- <0771> "
    094c : fba0 ; -- <0772> call :print_nt
    094d : 014f ; -- <0772> "
    094e : fc00 ; -- <0772> "
    094f : 0a00 ; -- <0783> i = 0
-- :loop_2383 -- = 0x0950

    0950 : 0002 ; -- <0773> a = i

    0951 : 0351 ; -- <0774> a = a<<1
    0952 : 0648 ; -- <0774> b = 72
    0953 : 5e00 ; -- <0774> av_ad_hi = 0
    0954 : 6300 ; -- <0774> av_ad_lo = ad0
    0955 : 0415 ; -- <0774> b = av_write_data
    0956 : 0416 ; -- <0774> b = av_read_data


    0957 : 0001 ; -- <0781> a = b
    0958 : 0600 ; -- <0781> b = 0

    0959 : e007 ; -- <0775> br eq :else_2393
    095a : 096a ; -- <0775> "

    095b : fba0 ; -- <0776> call :print_nt
    095c : 014f ; -- <0776> "
    095d : fc00 ; -- <0776> "
    095e : 022c ; -- <0777> a = 44 -- putasc ","
    095f : fba0 ; -- <0777> putasc ","
    0960 : 009b ; -- <0777> "
    0961 : fc00 ; -- <0777> "
    0962 : 0002 ; -- <0778> a = i
    0963 : 0600 ; -- <0779> b = 0

    0964 : 0351 ; -- <0780> a = a<<1
    0965 : 3001 ; -- <0780> push b -- push b
    0966 : 0648 ; -- <0780> b = 72
    0967 : 5e00 ; -- <0780> av_ad_hi = 0
    0968 : 6300 ; -- <0780> av_ad_lo = ad0
    0969 : 540c ; -- <0780> pop av_write_data -- pop av_write_data




    096a : 0002 ; -- <0783> a = i
    096b : 0601 ; -- <0783> b = 1
    096c : c800 ; -- <0783> i = a+b
    096d : 0b00 ; -- <0783> "


    096e : 0002 ; -- <0783> a = i
    096f : 0608 ; -- <0783> b = $num_text_flag_pointers
    0970 : e005 ; -- <0783> br lt :loop_2383
    0971 : 0950 ; -- <0783> "

-- :end_2383 -- = 0x0972

    0972 : f80c ; -- <0785> pop rtna -- func report_text_flags
    0973 : 080c ; -- <0785> pop i -- "
    0974 : fc00 ; -- <0785> swapra = nop

-- :plan_msg -- = 0x0975
-- " pl=\x0"
    0975 : 7020 ; -- <0787> p 
    0976 : 3d6c ; -- <0787> =l
    0977 : 0000 ; -- <0787>   

-- ######## func report_plan -- = 0x0978
    0978 : 303e ; -- <0794> push rtna -- func report_plan

    0979 : 03a0 ; -- <0790> a = :plan_msg
    097a : 0975 ; -- <0790> "
    097b : fba0 ; -- <0791> call :print_nt
    097c : 014f ; -- <0791> "
    097d : fc00 ; -- <0791> "
    097e : 5e00 ; -- <0792> ram a = $ram_plan_name -- av_ad_hi = 0
    097f : 628a ; -- <0792> ram a = $ram_plan_name -- av_ad_lo = 138
    0980 : 0015 ; -- <0792> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    0981 : 0016 ; -- <0792> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    0982 : fba0 ; -- <0793> call :print_nt
    0983 : 014f ; -- <0793> "
    0984 : fc00 ; -- <0793> "

    0985 : f80c ; -- <0795> pop rtna -- func report_plan
    0986 : fc00 ; -- <0795> swapra = nop

-- ######## func jf_to_rpm -- = 0x0987
    0987 : 303e ; -- <0805> push rtna -- func jf_to_rpm

-- resolution = 32 rpm.
    0988 : 0408 ; -- <0798> b = jiffies
    0989 : 03a0 ; -- <0799> a = 0x5573
    098a : 5573 ; -- <0799> "
-- = 700000 >> 5
    098b : fba0 ; -- <0801> call :divide
    098c : 018c ; -- <0801> "
    098d : fc00 ; -- <0801> "
    098e : 0001 ; -- <0802> a = b
    098f : 0352 ; -- <0803> a = a<<4
    0990 : 2351 ; -- <0804> rpm = a<<1

    0991 : f80c ; -- <0806> pop rtna -- func jf_to_rpm
    0992 : fc00 ; -- <0806> swapra = nop

-- ######## func check_engine_stop -- = 0x0993
    0993 : 303e ; -- <0822> push rtna -- func check_engine_stop

-- returns 1 if transitioned to stop, else 0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.

    0994 : 001e ; -- <0820> a = power_duty
    0995 : 0680 ; -- <0820> b = ( 0x0080 )

    0996 : e003 ; -- <0812> br and0z :else_2454
    0997 : 09ab ; -- <0812> "

    0998 : 5e00 ; -- <0813> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0999 : 6280 ; -- <0813> ram a = $ram_rpm_valid -- av_ad_lo = 128
    099a : 0015 ; -- <0813> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    099b : 0016 ; -- <0813> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    099c : 0000 ; -- <0819> a = a
    099d : 0600 ; -- <0819> b = 0

    099e : e407 ; -- <0814> bn eq :else_2462
    099f : 09ab ; -- <0814> "

    09a0 : 5e00 ; -- <0815> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    09a1 : 6290 ; -- <0815> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    09a2 : f815 ; -- <0815> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    09a3 : f816 ; -- <0815> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    09a4 : fc00 ; -- <0816> swapra = nop
    09a5 : fba0 ; -- <0818> callx  init_plan_stop
    09a6 : 02fa ; -- <0818> "
    09a7 : fc00 ; -- <0818> "
    09a8 : 2201 ; -- <0819> did_stop = 1
    09a9 : f80c ; -- <0819> pop rtna -- rtn 1
    09aa : fc00 ; -- <0818> swapra = nop


    09ab : 2200 ; -- <0821> did_stop = 0
    09ac : f80c ; -- <0821> pop rtna -- rtn 0
    09ad : fc00 ; -- <0820> swapra = nop

    09ae : f80c ; -- <0823> pop rtna -- func check_engine_stop
    09af : fc00 ; -- <0823> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d event_priority
-- src reg 000e soft_event
-- src reg 000f usage_count
-- src reg 0010 ustimer0
-- src reg 0011 mstimer0
-- src reg 0012 mstimer1
-- src reg 0013 mstimer2
-- src reg 0014 spi_data
-- src reg 0015 av_write_data
-- src reg 0016 av_read_data
-- src reg 0017 av_ad_hi
-- src reg 0018 av_ad_lo
-- src reg 0019 fduart_data
-- src reg 001a fduart_status
-- src reg 001b leds
-- src reg 001c board_ctrl
-- src reg 001d anmux_ctrl
-- src reg 001e power_duty
-- src reg 001f ign_capture_jf
-- src reg 0020 ign_timeout_len_jf
-- src reg 0021 puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d event_priority
-- dest reg 000e soft_event
-- dest reg 000f usage_count
-- dest reg 0010 ustimer0
-- dest reg 0011 mstimer0
-- dest reg 0012 mstimer1
-- dest reg 0013 mstimer2
-- dest reg 0014 spi_data
-- dest reg 0015 av_write_data
-- dest reg 0017 av_ad_hi
-- dest reg 0018 av_ad_lo
-- dest reg 0019 fduart_data
-- dest reg 001a fduart_status
-- dest reg 001b leds
-- dest reg 001c board_ctrl
-- dest reg 001d anmux_ctrl
-- dest reg 001e power_duty
-- dest reg 0020 ign_timeout_len_jf
-- dest reg 0021 puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_daq_discard_cnt
-- ram 00000018 ram_last_anmux_data
-- ram 00000028 ram_last_adc_data
-- ram 00000038 ram_adc_chn_pending
-- ram 0000003a ram_adc_junk
-- ram 0000003c ram_dial_setting
-- ram 0000003e ram_power_down_at_min
-- ram 00000040 ram_relay_hold_at_pass
-- ram 00000042 ram_minutes_cnt
-- ram 00000044 ram_seconds_cnt
-- ram 00000046 ram_mcu_usage_cnt
-- ram 00000048 ram_text_flag_pointers
-- ram 00000058 ram_next_tfp_idx
-- ram 0000005a ram_ign_history_idx
-- ram 0000005c ram_ign_history_jf
-- ram 0000007c ram_ign_avg_jf
-- ram 0000007e ram_avg_rpm
-- ram 00000080 ram_rpm_valid
-- ram 00000082 ram_ign_bad_samples
-- ram 00000084 ram_ign_fastest_jf
-- ram 00000086 ram_ign_slowest_jf
-- ram 00000088 ram_next_puff_len_us
-- ram 0000008a ram_plan_name
-- ram 0000008c ram_puff_len_func
-- ram 0000008e ram_transition_func
-- ram 00000090 ram_destroy_plan_func
-- ram 00000092 ram_next_puff_len_us
-- ram 00000094 ram_puff_count
-- ram 00000096 ram_terminal_connected
-- ram 00000098 ram_warmup_timeout_at_pass
-- ram 0000009a ram_run_ticks_remain
-- ram 0000009c ram_smap
-- ram 000000b6 ram_last_learn_second
-- ram 000000b8 ram_lrns_ticks_remain
-- ram 000000ba ram_o2_state
-- ram 000000bc ram_o2_been_rich
-- ram 000000be ram_o2_been_lean
        
        END;
    
