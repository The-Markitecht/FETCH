
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 050d ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.





-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in jf "jiffies" or "jf".
-- 5000 RPM = about 140 jf between rising edges on chevy ignition white wire.
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 0022 ; -- <0188> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0188>   
    0004 : 2020 ; -- <0188>   
    0005 : 2020 ; -- <0188>   
    0006 : 6120 ; -- <0188> a 
-- "       b"
    0007 : 2020 ; -- <0188>   
    0008 : 2020 ; -- <0188>   
    0009 : 2020 ; -- <0188>   
    000a : 6220 ; -- <0188> b 
-- "       i"
    000b : 2020 ; -- <0188>   
    000c : 2020 ; -- <0188>   
    000d : 2020 ; -- <0188>   
    000e : 6920 ; -- <0188> i 
-- "       j"
    000f : 2020 ; -- <0188>   
    0010 : 2020 ; -- <0188>   
    0011 : 2020 ; -- <0188>   
    0012 : 6a20 ; -- <0188> j 
-- "       x"
    0013 : 2020 ; -- <0188>   
    0014 : 2020 ; -- <0188>   
    0015 : 2020 ; -- <0188>   
    0016 : 7820 ; -- <0188> x 
-- "       y"
    0017 : 2020 ; -- <0188>   
    0018 : 2020 ; -- <0188>   
    0019 : 2020 ; -- <0188>   
    001a : 7920 ; -- <0188> y 
-- "      ga"
    001b : 2020 ; -- <0188>   
    001c : 2020 ; -- <0188>   
    001d : 2020 ; -- <0188>   
    001e : 6167 ; -- <0188> ag
-- "      gb"
    001f : 2020 ; -- <0188>   
    0020 : 2020 ; -- <0188>   
    0021 : 2020 ; -- <0188>   
    0022 : 6267 ; -- <0188> bg
-- "      pa"
    0023 : 2020 ; -- <0188>   
    0024 : 2020 ; -- <0188>   
    0025 : 2020 ; -- <0188>   
    0026 : 6170 ; -- <0188> ap
-- "      pb"
    0027 : 2020 ; -- <0188>   
    0028 : 2020 ; -- <0188>   
    0029 : 2020 ; -- <0188>   
    002a : 6270 ; -- <0188> bp
-- "      pc"
    002b : 2020 ; -- <0188>   
    002c : 2020 ; -- <0188>   
    002d : 2020 ; -- <0188>   
    002e : 6370 ; -- <0188> cp
-- "      pd"
    002f : 2020 ; -- <0188>   
    0030 : 2020 ; -- <0188>   
    0031 : 2020 ; -- <0188>   
    0032 : 6470 ; -- <0188> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0188> --
    0034 : 7372 ; -- <0188> sr
    0035 : 6b74 ; -- <0188> kt
    0036 : 2020 ; -- <0188>   
-- "  ev_pri"
    0037 : 2020 ; -- <0188>   
    0038 : 7665 ; -- <0188> ve
    0039 : 705f ; -- <0188> p_
    003a : 6972 ; -- <0188> ir
-- "softevnt"
    003b : 6f73 ; -- <0188> os
    003c : 7466 ; -- <0188> tf
    003d : 7665 ; -- <0188> ve
    003e : 746e ; -- <0188> tn
-- "   usage"
    003f : 2020 ; -- <0188>   
    0040 : 7520 ; -- <0188> u 
    0041 : 6173 ; -- <0188> as
    0042 : 6567 ; -- <0188> eg
-- "ustimer0"
    0043 : 7375 ; -- <0188> su
    0044 : 6974 ; -- <0188> it
    0045 : 656d ; -- <0188> em
    0046 : 3072 ; -- <0188> 0r
-- "mstimer0"
    0047 : 736d ; -- <0188> sm
    0048 : 6974 ; -- <0188> it
    0049 : 656d ; -- <0188> em
    004a : 3072 ; -- <0188> 0r
-- "mstimer1"
    004b : 736d ; -- <0188> sm
    004c : 6974 ; -- <0188> it
    004d : 656d ; -- <0188> em
    004e : 3172 ; -- <0188> 1r
-- "mstimer2"
    004f : 736d ; -- <0188> sm
    0050 : 6974 ; -- <0188> it
    0051 : 656d ; -- <0188> em
    0052 : 3272 ; -- <0188> 2r
-- "spi_data"
    0053 : 7073 ; -- <0188> ps
    0054 : 5f69 ; -- <0188> _i
    0055 : 6164 ; -- <0188> ad
    0056 : 6174 ; -- <0188> at
-- "--avwrdt"
    0057 : 2f2f ; -- <0188> --
    0058 : 7661 ; -- <0188> va
    0059 : 7277 ; -- <0188> rw
    005a : 7464 ; -- <0188> td
-- "av_rd_dt"
    005b : 7661 ; -- <0188> va
    005c : 725f ; -- <0188> r_
    005d : 5f64 ; -- <0188> _d
    005e : 7464 ; -- <0188> td
-- "av_ad_hi"
    005f : 7661 ; -- <0188> va
    0060 : 615f ; -- <0188> a_
    0061 : 5f64 ; -- <0188> _d
    0062 : 6968 ; -- <0188> ih
-- "av_ad_lo"
    0063 : 7661 ; -- <0188> va
    0064 : 615f ; -- <0188> a_
    0065 : 5f64 ; -- <0188> _d
    0066 : 6f6c ; -- <0188> ol
-- "--uartdt"
    0067 : 2f2f ; -- <0188> --
    0068 : 6175 ; -- <0188> au
    0069 : 7472 ; -- <0188> tr
    006a : 7464 ; -- <0188> td
-- "uartstat"
    006b : 6175 ; -- <0188> au
    006c : 7472 ; -- <0188> tr
    006d : 7473 ; -- <0188> ts
    006e : 7461 ; -- <0188> ta
-- "    leds"
    006f : 2020 ; -- <0188>   
    0070 : 2020 ; -- <0188>   
    0071 : 656c ; -- <0188> el
    0072 : 7364 ; -- <0188> sd
-- "brd_ctrl"
    0073 : 7262 ; -- <0188> rb
    0074 : 5f64 ; -- <0188> _d
    0075 : 7463 ; -- <0188> tc
    0076 : 6c72 ; -- <0188> lr
-- "   anmux"
    0077 : 2020 ; -- <0188>   
    0078 : 6120 ; -- <0188> a 
    0079 : 6d6e ; -- <0188> mn
    007a : 7875 ; -- <0188> xu
-- "pwr_duty"
    007b : 7770 ; -- <0188> wp
    007c : 5f72 ; -- <0188> _r
    007d : 7564 ; -- <0188> ud
    007e : 7974 ; -- <0188> yt
-- "igntmcap"
    007f : 6769 ; -- <0188> gi
    0080 : 746e ; -- <0188> tn
    0081 : 636d ; -- <0188> cm
    0082 : 7061 ; -- <0188> pa
-- "igntmout"
    0083 : 6769 ; -- <0188> gi
    0084 : 746e ; -- <0188> tn
    0085 : 6f6d ; -- <0188> om
    0086 : 7475 ; -- <0188> tu
-- "puflenus"
    0087 : 7570 ; -- <0188> up
    0088 : 6c66 ; -- <0188> lf
    0089 : 6e65 ; -- <0188> ne
    008a : 7375 ; -- <0188> su

-- string resources
-- :boot_msg -- = 0x008b
-- "TGT\r\n\x0"
    008b : 4754 ; -- <0192> GT
    008c : 0d54 ; -- <0192>  T
    008d : 000a ; -- <0192>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x008e
-- initialize prior to polling loop, for minimum latency.
    008e : 07a0 ; -- <0006> b = :event_table
    008f : 054c ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0090
    0090 : 000d ; -- <0009> a = event_priority
    0091 : e000 ; -- <0010> br 0z :poll_events_again
    0092 : 0090 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0093 : 3400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0094 : d300 ; -- <0015> fetch rtna from ad0
    0095 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0096 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0097 : 6fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0098 : ffc0 ; -- <0021> "
    0099 : e00f ; -- <0021> error_halt_code 0xffc0
    009a : 0099 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x009b
    009b : 3004 ; -- <0046> push x -- func putchar_fduart

    009c : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    009d : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x009e
    009e : 041a ; -- <0053> b = fduart_status
    009f : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    00a0 : 009e ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    00a1 : 6404 ; -- <0057> fduart_data = x
    00a2 : 100c ; -- <0058> pop x -- end_func
    00a3 : fc00 ; -- <0058> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x00a4
-- wait until FIFO is populated.
    00a4 : 0208 ; -- <0065> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x00a5
    00a5 : 041a ; -- <0067> b = fduart_status
    00a6 : e403 ; -- <0068> bn and0z :wait_for_busy
    00a7 : 00a5 ; -- <0068> "
    00a8 : 0019 ; -- <0069> a = fduart_data
    00a9 : fc00 ; -- <0070> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x00aa
-- check for FIFO is populated.
    00aa : 0208 ; -- <0076> a = $arx_fifo_empty_mask
    00ab : 041a ; -- <0077> b = fduart_status
    00ac : e403 ; -- <0078> bn and0z :none
    00ad : 00b0 ; -- <0078> "
    00ae : 0019 ; -- <0079> a = fduart_data
    00af : fc00 ; -- <0080> swapra = nop
-- :none -- = 0x00b0
    00b0 : 0360 ; -- <0083> a = -1
    00b1 : fc00 ; -- <0084> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00b2
-- set & enable analog muxer
    00b2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00b3 : c800 ; -- <0008> anmux_ctrl = or
    00b4 : 7734 ; -- <0008> "
    00b5 : fc00 ; -- <0009> swapra = nop

-- ######## func anmux_get_chn -- = 0x00b6
    00b6 : 001d ; -- <0013> a = anmux_ctrl
    00b7 : 0607 ; -- <0014> b = $anmux_channel_mask
    00b8 : c800 ; -- <0015> a = and
    00b9 : 0330 ; -- <0015> "
    00ba : fc00 ; -- <0016> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00bb
-- "0123456789abcdef"
    00bb : 3130 ; -- <0050> 10
    00bc : 3332 ; -- <0050> 32
    00bd : 3534 ; -- <0050> 54
    00be : 3736 ; -- <0050> 76
    00bf : 3938 ; -- <0050> 98
    00c0 : 6261 ; -- <0050> ba
    00c1 : 6463 ; -- <0050> dc
    00c2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00c3
    00c3 : 3004 ; -- <0054> push x -- func put4x
    00c4 : 3006 ; -- <0054> push g6 -- "
    00c5 : 303e ; -- <0054> push rtna -- "
    00c6 : 13a0 ; -- <0055> x = :hexdigits
    00c7 : 00bb ; -- <0055> "

    00c8 : 1800 ; -- <0057> g6 = a
    00c9 : 07a0 ; -- <0058> b = 0xF000
    00ca : f000 ; -- <0058> "
    00cb : c800 ; -- <0059> a = and
    00cc : 0330 ; -- <0059> "
    00cd : 0353 ; -- <0060> a = a>>4
    00ce : 0353 ; -- <0061> a = a>>4
    00cf : 0353 ; -- <0062> a = a>>4
    00d0 : fba0 ; -- <0063> call fetch_byte
    00d1 : 01dc ; -- <0063> "
    00d2 : fc00 ; -- <0063> "
    00d3 : fba0 ; -- <0064> putchar a
    00d4 : 009b ; -- <0064> "
    00d5 : fc00 ; -- <0064> "

    00d6 : 0006 ; -- <0066> a = g6
    00d7 : 07a0 ; -- <0067> b = 0x0F00
    00d8 : 0f00 ; -- <0067> "
    00d9 : c800 ; -- <0068> a = and
    00da : 0330 ; -- <0068> "
    00db : 0353 ; -- <0069> a = a>>4
    00dc : 0353 ; -- <0070> a = a>>4
    00dd : fba0 ; -- <0071> call fetch_byte
    00de : 01dc ; -- <0071> "
    00df : fc00 ; -- <0071> "
    00e0 : fba0 ; -- <0072> putchar a
    00e1 : 009b ; -- <0072> "
    00e2 : fc00 ; -- <0072> "

    00e3 : 0006 ; -- <0074> a = g6
    00e4 : 06f0 ; -- <0075> b = 0x00F0
    00e5 : c800 ; -- <0076> a = and
    00e6 : 0330 ; -- <0076> "
    00e7 : 0353 ; -- <0077> a = a>>4
    00e8 : fba0 ; -- <0078> call fetch_byte
    00e9 : 01dc ; -- <0078> "
    00ea : fc00 ; -- <0078> "
    00eb : fba0 ; -- <0079> putchar a
    00ec : 009b ; -- <0079> "
    00ed : fc00 ; -- <0079> "

    00ee : 0006 ; -- <0081> a = g6
    00ef : 060f ; -- <0082> b = 0x000F
    00f0 : c800 ; -- <0083> a = and
    00f1 : 0330 ; -- <0083> "
    00f2 : fba0 ; -- <0084> call fetch_byte
    00f3 : 01dc ; -- <0084> "
    00f4 : fc00 ; -- <0084> "
    00f5 : fba0 ; -- <0085> putchar a
    00f6 : 009b ; -- <0085> "
    00f7 : fc00 ; -- <0085> "

    00f8 : f80c ; -- <0087> pop rtna -- end_func
    00f9 : 180c ; -- <0087> pop g6 -- "
    00fa : 100c ; -- <0087> pop x -- "
    00fb : fc00 ; -- <0087> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00fc
    00fc : 3002 ; -- <0092> push i -- func get4x
    00fd : 3003 ; -- <0092> push j -- "
    00fe : 3004 ; -- <0092> push x -- "
    00ff : 3005 ; -- <0092> push y -- "
    0100 : 303e ; -- <0092> push rtna -- "
-- y = digit counter
-- j = sum
    0101 : 1604 ; -- <0095> y = 4
-- :again -- = 0x0102
    0102 : fba0 ; -- <0097> getchar
    0103 : 00a4 ; -- <0097> "
    0104 : fc00 ; -- <0097> "
    0105 : 13a0 ; -- <0098> x = :hexdigits
    0106 : 00bb ; -- <0098> "
    0107 : 0a10 ; -- <0099> i = 16
    0108 : fba0 ; -- <0100> call :find_in_fetch
    0109 : 01f0 ; -- <0100> "
    010a : fc00 ; -- <0100> "
    010b : 0760 ; -- <0101> b = -1
    010c : e007 ; -- <0102> br eq :fail
    010d : 0121 ; -- <0102> "
    010e : 0400 ; -- <0103> b = a
    010f : 0003 ; -- <0104> a = j
    0110 : 0352 ; -- <0105> a = a<<4
    0111 : c800 ; -- <0106> j = or
    0112 : 0f34 ; -- <0106> "
    0113 : 1360 ; -- <0107> x = -1
    0114 : c800 ; -- <0108> y = x+y
    0115 : 1720 ; -- <0108> "
    0116 : 0005 ; -- <0109> a = y
    0117 : e400 ; -- <0110> bn az :again
    0118 : 0102 ; -- <0110> "
    0119 : 0003 ; -- <0111> a = j
    011a : 0600 ; -- <0112> b = 0
    011b : f80c ; -- <0113> pop rtna -- rtn
    011c : 140c ; -- <0113> pop y -- "
    011d : 100c ; -- <0113> pop x -- "
    011e : 0c0c ; -- <0113> pop j -- "
    011f : 080c ; -- <0113> pop i -- "
    0120 : fc00 ; -- <0113> swapra = nop
-- :fail -- = 0x0121
    0121 : 0760 ; -- <0116> b = -1
    0122 : f80c ; -- <0117> pop rtna -- end_func
    0123 : 140c ; -- <0117> pop y -- "
    0124 : 100c ; -- <0117> pop x -- "
    0125 : 0c0c ; -- <0117> pop j -- "
    0126 : 080c ; -- <0117> pop i -- "
    0127 : fc00 ; -- <0117> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0128
    0128 : 3002 ; -- <0124> push i -- func print_fixed
    0129 : 3003 ; -- <0124> push j -- "
    012a : 3004 ; -- <0124> push x -- "
    012b : 3005 ; -- <0124> push y -- "
    012c : 3006 ; -- <0124> push g6 -- "
    012d : 303e ; -- <0124> push rtna -- "
    012e : 0800 ; -- <0125> i = a
    012f : 0e01 ; -- <0126> j = 1
    0130 : 1001 ; -- <0127> x = b
    0131 : 1760 ; -- <0128> y = -1
-- :next_word -- = 0x0132
    0132 : e002 ; -- <0130> br xz :done
    0133 : 0148 ; -- <0130> "
    0134 : 1320 ; -- <0131> x = ad2
    0135 : d002 ; -- <0132> fetch g6 from i
    0136 : 1bb0 ; -- <0132> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0137 : 0006 ; -- <0134> a = g6 -- putchar g6
    0138 : fba0 ; -- <0134> putchar g6
    0139 : 009b ; -- <0134> "
    013a : fc00 ; -- <0134> "
    013b : e002 ; -- <0135> br xz :done
    013c : 0148 ; -- <0135> "
    013d : 1320 ; -- <0136> x = ad2
    013e : 0006 ; -- <0137> a = g6
    013f : 0353 ; -- <0138> a = a>>4
    0140 : 0353 ; -- <0139> a = a>>4
    0141 : fba0 ; -- <0140> putchar a
    0142 : 009b ; -- <0140> "
    0143 : fc00 ; -- <0140> "
    0144 : c800 ; -- <0141> i = i+j
    0145 : 0b10 ; -- <0141> "
    0146 : e00f ; -- <0142> jmp :next_word
    0147 : 0132 ; -- <0142> "
-- :done -- = 0x0148
    0148 : f80c ; -- <0144> pop rtna -- end_func
    0149 : 180c ; -- <0144> pop g6 -- "
    014a : 140c ; -- <0144> pop y -- "
    014b : 100c ; -- <0144> pop x -- "
    014c : 0c0c ; -- <0144> pop j -- "
    014d : 080c ; -- <0144> pop i -- "
    014e : fc00 ; -- <0144> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x014f
    014f : 3002 ; -- <0151> push i -- func print_nt
    0150 : 3003 ; -- <0151> push j -- "
    0151 : 3004 ; -- <0151> push x -- "
    0152 : 303e ; -- <0151> push rtna -- "
    0153 : 0800 ; -- <0152> i = a
    0154 : 0e01 ; -- <0153> j = 1
-- :next_word -- = 0x0155
    0155 : d002 ; -- <0155> fetch x from i
    0156 : 13b0 ; -- <0155> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0157 : 0004 ; -- <0157> a = x
    0158 : 06ff ; -- <0158> b = 0xff
    0159 : e003 ; -- <0159> br and0z :done
    015a : 016b ; -- <0159> "
    015b : fba0 ; -- <0160> putchar a
    015c : 009b ; -- <0160> "
    015d : fc00 ; -- <0160> "
    015e : 0004 ; -- <0161> a = x
    015f : 0353 ; -- <0162> a = a>>4
    0160 : 0353 ; -- <0163> a = a>>4
    0161 : 06ff ; -- <0164> b = 0xff
    0162 : e003 ; -- <0165> br and0z :done
    0163 : 016b ; -- <0165> "
    0164 : fba0 ; -- <0166> putchar a
    0165 : 009b ; -- <0166> "
    0166 : fc00 ; -- <0166> "
    0167 : c800 ; -- <0167> i = i+j
    0168 : 0b10 ; -- <0167> "
    0169 : e00f ; -- <0168> jmp :next_word
    016a : 0155 ; -- <0168> "
-- :done -- = 0x016b
    016b : f80c ; -- <0170> pop rtna -- end_func
    016c : 100c ; -- <0170> pop x -- "
    016d : 0c0c ; -- <0170> pop j -- "
    016e : 080c ; -- <0170> pop i -- "
    016f : fc00 ; -- <0170> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0170
    0170 : 3002 ; -- <0004> push i -- func multiply
    0171 : 3003 ; -- <0004> push j -- "
    0172 : 3004 ; -- <0004> push x -- "
    0173 : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0174 : 1000 ; -- <0009> x = a
    0175 : 1401 ; -- <0010> y = b
    0176 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0177
    0177 : e002 ; -- <0013> br xz :done
    0178 : 0186 ; -- <0013> "
    0179 : 0004 ; -- <0014> a = x
    017a : 0601 ; -- <0015> b = 1
    017b : e003 ; -- <0016> br and0z :skip_add
    017c : 0180 ; -- <0016> "
    017d : 0c05 ; -- <0017> j = y
    017e : c800 ; -- <0018> i = i+j
    017f : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0180
    0180 : 0004 ; -- <0020> a = x
    0181 : 1350 ; -- <0021> x = a>>1
    0182 : 0005 ; -- <0022> a = y
    0183 : 1751 ; -- <0023> y = a<<1
    0184 : e00f ; -- <0024> jmp :again
    0185 : 0177 ; -- <0024> "
-- :done -- = 0x0186
    0186 : 0002 ; -- <0026> a = i
    0187 : 140c ; -- <0027> pop y -- end_func
    0188 : 100c ; -- <0027> pop x -- "
    0189 : 0c0c ; -- <0027> pop j -- "
    018a : 080c ; -- <0027> pop i -- "
    018b : fc00 ; -- <0027> swapra = nop

-- ######## func divide -- = 0x018c
    018c : 3002 ; -- <0030> push i -- func divide
    018d : 3003 ; -- <0030> push j -- "
    018e : 3004 ; -- <0030> push x -- "
    018f : 3005 ; -- <0030> push y -- "
    0190 : 3006 ; -- <0030> push g6 -- "
    0191 : 3007 ; -- <0030> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0192 : e005 ; -- <0038> br lt :zero
    0193 : 01cd ; -- <0038> "
    0194 : e000 ; -- <0039> br az :zero
    0195 : 01cd ; -- <0039> "
    0196 : 1000 ; -- <0040> x = a
--    g7 = x
    0197 : 0001 ; -- <0042> a = b
    0198 : e000 ; -- <0043> br az :zero
    0199 : 01cd ; -- <0043> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    019a : 0404 ; -- <0059> b = x
    019b : 0a00 ; -- <0060> i = 0
    019c : 0e01 ; -- <0061> j = 1
-- :shift_again -- = 0x019d
    019d : e006 ; -- <0063> br gt :shift_done
    019e : 01a3 ; -- <0063> "
    019f : 0351 ; -- <0064> a = a<<1
    01a0 : 0b10 ; -- <0065> i = ad1
    01a1 : e00f ; -- <0066> jmp :shift_again
    01a2 : 019d ; -- <0066> "
-- :shift_done -- = 0x01a3
    01a3 : 1b50 ; -- <0068> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    01a4 : 1e00 ; -- <0079> g7 = 0
    01a5 : 0f60 ; -- <0080> j = -1
-- :again -- = 0x01a6
    01a6 : e001 ; -- <0082> br iz :done
    01a7 : 01c4 ; -- <0082> "
    01a8 : 0006 ; -- <0083> a = g6
    01a9 : 0404 ; -- <0084> b = x
    01aa : e006 ; -- <0085> br gt :result0
    01ab : 01bc ; -- <0085> "
-- temp does fit; output a 1.
    01ac : 0007 ; -- <0087> a = g7
    01ad : 0351 ; -- <0088> a = a<<1
    01ae : 0601 ; -- <0089> b = 1
    01af : c800 ; -- <0090> g7 = or
    01b0 : 1f34 ; -- <0090> "
-- dividend = dividend - temp
    01b1 : 0006 ; -- <0092> a = g6
    01b2 : 0760 ; -- <0093> b = -1
    01b3 : c800 ; -- <0094> a = xor
    01b4 : 0338 ; -- <0094> "
    01b5 : 0601 ; -- <0095> b = 1
    01b6 : c800 ; -- <0096> y = a+b
    01b7 : 1700 ; -- <0096> "
    01b8 : c800 ; -- <0097> x = x+y
    01b9 : 1320 ; -- <0097> "
    01ba : e00f ; -- <0098> jmp :next
    01bb : 01be ; -- <0098> "
-- :result0 -- = 0x01bc
-- temp does not fit; output a 0.
    01bc : 0007 ; -- <0101> a = g7
    01bd : 1f51 ; -- <0102> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01be
    01be : 0006 ; -- <0105> a = g6
    01bf : 1b50 ; -- <0106> g6 = a>>1
    01c0 : c800 ; -- <0107> i = i+j
    01c1 : 0b10 ; -- <0107> "
    01c2 : e00f ; -- <0108> jmp :again
    01c3 : 01a6 ; -- <0108> "

-- :done -- = 0x01c4
    01c4 : 0407 ; -- <0111> b = g7
    01c5 : 0004 ; -- <0112> a = x
    01c6 : 1c0c ; -- <0113> pop g7 -- rtn
    01c7 : 180c ; -- <0113> pop g6 -- "
    01c8 : 140c ; -- <0113> pop y -- "
    01c9 : 100c ; -- <0113> pop x -- "
    01ca : 0c0c ; -- <0113> pop j -- "
    01cb : 080c ; -- <0113> pop i -- "
    01cc : fc00 ; -- <0113> swapra = nop

-- :zero -- = 0x01cd
    01cd : 0600 ; -- <0117> b = 0
    01ce : 1c0c ; -- <0118> pop g7 -- rtn
    01cf : 180c ; -- <0118> pop g6 -- "
    01d0 : 140c ; -- <0118> pop y -- "
    01d1 : 100c ; -- <0118> pop x -- "
    01d2 : 0c0c ; -- <0118> pop j -- "
    01d3 : 080c ; -- <0118> pop i -- "
    01d4 : fc00 ; -- <0118> swapra = nop
    01d5 : 1c0c ; -- <0120> pop g7 -- end_func
    01d6 : 180c ; -- <0120> pop g6 -- "
    01d7 : 140c ; -- <0120> pop y -- "
    01d8 : 100c ; -- <0120> pop x -- "
    01d9 : 0c0c ; -- <0120> pop j -- "
    01da : 080c ; -- <0120> pop i -- "
    01db : fc00 ; -- <0120> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01dc
    01dc : 0601 ; -- <0005> b = 1
    01dd : e003 ; -- <0006> br and0z :pick_byte_even
    01de : 01e7 ; -- <0006> "
    01df : 0350 ; -- <0007> a = a>>1
    01e0 : 0404 ; -- <0008> b = x
    01e1 : c800 ; -- <0009> fetch a from a+b
    01e2 : d300 ; -- <0009> "
    01e3 : 03b0 ; -- <0009> "
    01e4 : 0353 ; -- <0010> a = a>>4
    01e5 : 0353 ; -- <0011> a = a>>4
    01e6 : fc00 ; -- <0012> swapra = nop
-- :pick_byte_even -- = 0x01e7
    01e7 : 0350 ; -- <0015> a = a>>1
    01e8 : 0404 ; -- <0016> b = x
    01e9 : c800 ; -- <0017> fetch a from a+b
    01ea : d300 ; -- <0017> "
    01eb : 03b0 ; -- <0017> "
    01ec : 06ff ; -- <0018> b = 0xff
    01ed : c800 ; -- <0019> a = and
    01ee : 0330 ; -- <0019> "
    01ef : fc00 ; -- <0020> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01f0
    01f0 : 3002 ; -- <0029> push i -- func find_in_fetch
    01f1 : 3003 ; -- <0029> push j -- "
    01f2 : 3005 ; -- <0029> push y -- "
    01f3 : 303e ; -- <0029> push rtna -- "
    01f4 : 1400 ; -- <0030> y = a
    01f5 : 0f60 ; -- <0031> j = -1
-- :again -- = 0x01f6
    01f6 : e001 ; -- <0033> br iz :fail
    01f7 : 0206 ; -- <0033> "
    01f8 : 0b10 ; -- <0034> i = ad1
    01f9 : 0002 ; -- <0035> a = i
    01fa : fba0 ; -- <0036> call :fetch_byte
    01fb : 01dc ; -- <0036> "
    01fc : fc00 ; -- <0036> "
    01fd : 0405 ; -- <0037> b = y
    01fe : e407 ; -- <0038> bn eq :again
    01ff : 01f6 ; -- <0038> "
-- :found -- = 0x0200
    0200 : 0002 ; -- <0040> a = i
    0201 : f80c ; -- <0041> pop rtna -- rtn
    0202 : 140c ; -- <0041> pop y -- "
    0203 : 0c0c ; -- <0041> pop j -- "
    0204 : 080c ; -- <0041> pop i -- "
    0205 : fc00 ; -- <0041> swapra = nop
-- :fail -- = 0x0206
    0206 : 0360 ; -- <0044> a = -1
    0207 : f80c ; -- <0045> pop rtna -- end_func
    0208 : 140c ; -- <0045> pop y -- "
    0209 : 0c0c ; -- <0045> pop j -- "
    020a : 080c ; -- <0045> pop i -- "
    020b : fc00 ; -- <0045> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x020c
    020c : 3004 ; -- <0002> push x -- func spinwait
    020d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    020e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x020f
    020f : 13a0 ; -- <0007> x = 16666
    0210 : 411a ; -- <0007> "
    0211 : 1760 ; -- <0008> y = -1
    0212 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0213
-- use of the ad2 name overrides auto-nop here.
    0213 : 1320 ; -- <0012> x = ad2
    0214 : e402 ; -- <0013> bn xz :spinwait_inner
    0215 : 0213 ; -- <0013> "
    0216 : c800 ; -- <0014> a = a+b
    0217 : 0300 ; -- <0014> "
    0218 : e400 ; -- <0015> bn az :spinwait_outer
    0219 : 020f ; -- <0015> "
    021a : 140c ; -- <0016> pop y -- end_func
    021b : 100c ; -- <0016> pop x -- "
    021c : fc00 ; -- <0016> swapra = nop




-- :cmd_table -- = 0x021d
-- "  hello"
    021d : 2020 ; -- <0005>   
    021e : 6568 ; -- <0005> eh
    021f : 6c6c ; -- <0005> ll
    0220 : 006f ; -- <0005>  o
    0221 : 02b6 ; -- <0006> ([label hello_cmd])
-- "  plstp"
    0222 : 2020 ; -- <0007>   
    0223 : 6c70 ; -- <0007> lp
    0224 : 7473 ; -- <0007> ts
    0225 : 0070 ; -- <0007>  p
    0226 : 02ba ; -- <0008> ([label set_plan_stop_cmd])
-- "   plcr"
    0227 : 2020 ; -- <0009>   
    0228 : 7020 ; -- <0009> p 
    0229 : 636c ; -- <0009> cl
    022a : 0072 ; -- <0009>  r
    022b : 02c5 ; -- <0010> ([label set_plan_crank_cmd])
-- "   plwm"
    022c : 2020 ; -- <0011>   
    022d : 7020 ; -- <0011> p 
    022e : 776c ; -- <0011> wl
    022f : 006d ; -- <0011>  m
    0230 : 02d0 ; -- <0012> ([label set_plan_warmup_cmd])
-- "   plrn"
    0231 : 2020 ; -- <0013>   
    0232 : 7020 ; -- <0013> p 
    0233 : 726c ; -- <0013> rl
    0234 : 006e ; -- <0013>  n
    0235 : 02db ; -- <0014> ([label set_plan_run_cmd])
-- "   plln"
    0236 : 2020 ; -- <0015>   
    0237 : 7020 ; -- <0015> p 
    0238 : 6c6c ; -- <0015> ll
    0239 : 006e ; -- <0015>  n
    023a : 02e6 ; -- <0016> ([label set_plan_learn_cmd])
-- "clstmap"
    023b : 6c63 ; -- <0017> lc
    023c : 7473 ; -- <0017> ts
    023d : 616d ; -- <0017> am
    023e : 0070 ; -- <0017>  p
    023f : 04f9 ; -- <0018> ([label clear_smap_cmd])
-- "\x0\x0"
    0240 : 0000 ; -- <0019>   


-- ########  -- = 0x0241
    0241 : 3002 ; -- <0037> push i -- 
    0242 : 3004 ; -- <0037> push x -- "
    0243 : 3005 ; -- <0037> push y -- "

-- memorize into ram_key_buf, pushing down existing content.
    0244 : 1008 ; -- <0039> x = key
    0245 : 0a07 ; -- <0048> i = $key_buf_max
-- :loop_581 -- = 0x0246

    0246 : 0002 ; -- <0049> a = i

    0247 : 0351 ; -- <0050> a = a<<1
    0248 : 0600 ; -- <0050> b = 0
    0249 : 5e00 ; -- <0050> av_ad_hi = 0
    024a : 6300 ; -- <0050> av_ad_lo = ad0
    024b : 0415 ; -- <0050> b = av_write_data
    024c : 0416 ; -- <0050> b = av_read_data

    024d : 1401 ; -- <0051> y = b
    024e : 0002 ; -- <0052> a = i
    024f : 0404 ; -- <0053> b = x

    0250 : 0351 ; -- <0054> a = a<<1
    0251 : 3001 ; -- <0054> push b -- push b
    0252 : 0600 ; -- <0054> b = 0
    0253 : 5e00 ; -- <0054> av_ad_hi = 0
    0254 : 6300 ; -- <0054> av_ad_lo = ad0
    0255 : 540c ; -- <0054> pop av_write_data -- pop av_write_data

    0256 : 1005 ; -- <0055> x = y


    0257 : 0002 ; -- <0057> a = i
    0258 : 0600 ; -- <0057> b = 0
    0259 : e007 ; -- <0057> br eq :end_581
    025a : 0263 ; -- <0057> "


    025b : 0002 ; -- <0057> a = i
    025c : 0760 ; -- <0057> b = -1
    025d : c800 ; -- <0057> i = a+b
    025e : 0b00 ; -- <0057> "


    025f : 0002 ; -- <0057> a = i
    0260 : 0600 ; -- <0057> b = 0
    0261 : e405 ; -- <0057> bn lt :loop_581
    0262 : 0246 ; -- <0057> "

-- :end_581 -- = 0x0263

    0263 : 0008 ; -- <0060> a = key
    0264 : 060d ; -- <0060> b = 13

    0265 : e407 ; -- <0060> bn eq :else_613
    0266 : 026a ; -- <0060> "

    0267 : fba0 ; -- <0062> callx  parse_command
    0268 : 0270 ; -- <0062> "
    0269 : fc00 ; -- <0062> "


    026a : 140c ; -- <0066> pop y -- 
    026b : 100c ; -- <0066> pop x -- "
    026c : 080c ; -- <0066> pop i -- "
    026d : fc00 ; -- <0066> swapra = nop

-- :cmd_ack_msg -- = 0x026e
-- "OK\x0"
    026e : 4b4f ; -- <0070> KO
    026f : 0000 ; -- <0070>   

-- ########  -- = 0x0270
    0270 : 3002 ; -- <0111> push i -- 
    0271 : 3004 ; -- <0111> push x -- "
    0272 : 3005 ; -- <0111> push y -- "
    0273 : 303e ; -- <0111> push rtna -- "

    0274 : 13a0 ; -- <0112> x = :cmd_table
    0275 : 021d ; -- <0112> "
-- :next_cmd -- = 0x0276
    0276 : d004 ; -- <0114> fetch a from x
    0277 : 03b0 ; -- <0114> "
    0278 : e000 ; -- <0115> br az :done
    0279 : 02b1 ; -- <0115> "

    027a : 0a00 ; -- <0131> i = 0
-- :loop_634 -- = 0x027b

    027b : 0002 ; -- <0132> a = i
    027c : fba0 ; -- <0133> call :fetch_byte
    027d : 01dc ; -- <0133> "
    027e : fc00 ; -- <0133> "
    027f : 1400 ; -- <0134> y = a
    0280 : 0620 ; -- <0135> b = 32 -- asc b = " "

    0281 : 0000 ; -- <0144> a = a
    0282 : 0401 ; -- <0144> b = b

    0283 : e007 ; -- <0144> br eq :else_643
    0284 : 0292 ; -- <0144> "

    0285 : 062a ; -- <0146> b = 42 -- asc b = "*"
    0286 : e007 ; -- <0147> br eq :matched
    0287 : 029a ; -- <0147> "
-- parameter character.  succeed early.
    0288 : 0002 ; -- <0149> a = i

    0289 : 0351 ; -- <0150> a = a<<1
    028a : 0600 ; -- <0150> b = 0
    028b : 5e00 ; -- <0150> av_ad_hi = 0
    028c : 6300 ; -- <0150> av_ad_lo = ad0
    028d : 0415 ; -- <0150> b = av_write_data
    028e : 0416 ; -- <0150> b = av_read_data

    028f : 0005 ; -- <0151> a = y
    0290 : e407 ; -- <0152> bn eq :no_match
    0291 : 02a6 ; -- <0152> "



    0292 : 0002 ; -- <0156> a = i
    0293 : 0601 ; -- <0156> b = 1
    0294 : c800 ; -- <0156> i = a+b
    0295 : 0b00 ; -- <0156> "


    0296 : 0002 ; -- <0156> a = i
    0297 : 0607 ; -- <0156> b = $key_buf_max
    0298 : e005 ; -- <0156> br lt :loop_634
    0299 : 027b ; -- <0156> "

-- :end_634 -- = 0x029a

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x029a
    029a : 23a0 ; -- <0160> pa = :cmd_ack_msg
    029b : 026e ; -- <0160> "
    029c : fba0 ; -- <0160> callx  set_text_flag  :cmd_ack_msg
    029d : 07f9 ; -- <0160> "
    029e : fc00 ; -- <0160> "
    029f : 1604 ; -- <0161> y = ($key_buf_len / 2)
    02a0 : c800 ; -- <0162> fetch rtna from x+y
    02a1 : d320 ; -- <0162> "
    02a2 : fbb0 ; -- <0162> "
    02a3 : fc00 ; -- <0163> swapra = nop
    02a4 : e00f ; -- <0165> jmp :done
    02a5 : 02b1 ; -- <0165> "

-- :no_match -- = 0x02a6
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    02a6 : 5e00 ; -- <0169> ram a = $ram_terminal_connected -- av_ad_hi = 0
    02a7 : 6296 ; -- <0169> ram a = $ram_terminal_connected -- av_ad_lo = 150
    02a8 : 0015 ; -- <0169> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    02a9 : 0016 ; -- <0169> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    02aa : e000 ; -- <0170> br az :done
    02ab : 02b1 ; -- <0170> "

    02ac : 1605 ; -- <0172> y = (($key_buf_len / 2) + 1)
    02ad : c800 ; -- <0173> x = x+y
    02ae : 1320 ; -- <0173> "
    02af : e00f ; -- <0174> jmp :next_cmd
    02b0 : 0276 ; -- <0174> "
-- :done -- = 0x02b1

    02b1 : f80c ; -- <0177> pop rtna -- 
    02b2 : 140c ; -- <0177> pop y -- "
    02b3 : 100c ; -- <0177> pop x -- "
    02b4 : 080c ; -- <0177> pop i -- "
    02b5 : fc00 ; -- <0177> swapra = nop

-- ########  -- = 0x02b6

    02b6 : 5e00 ; -- <0183> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    02b7 : 6296 ; -- <0183> ram $ram_terminal_connected = 1 -- av_ad_lo = 150
    02b8 : 5601 ; -- <0183> ram $ram_terminal_connected = 1 -- av_write_data = 1

    02b9 : fc00 ; -- <0185> swapra = nop

-- ########  -- = 0x02ba
    02ba : 303e ; -- <0192> push rtna -- 

    02bb : 5e00 ; -- <0193> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02bc : 6290 ; -- <0193> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02bd : f815 ; -- <0193> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02be : f816 ; -- <0193> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02bf : fc00 ; -- <0194> swapra = nop
    02c0 : fba0 ; -- <0196> callx  init_plan_stop
    02c1 : 02f3 ; -- <0196> "
    02c2 : fc00 ; -- <0196> "

    02c3 : f80c ; -- <0198> pop rtna -- 
    02c4 : fc00 ; -- <0198> swapra = nop

-- ########  -- = 0x02c5
    02c5 : 303e ; -- <0205> push rtna -- 

    02c6 : 5e00 ; -- <0206> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02c7 : 6290 ; -- <0206> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02c8 : f815 ; -- <0206> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02c9 : f816 ; -- <0206> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02ca : fc00 ; -- <0207> swapra = nop
    02cb : fba0 ; -- <0209> callx  init_plan_crank
    02cc : 032e ; -- <0209> "
    02cd : fc00 ; -- <0209> "

    02ce : f80c ; -- <0211> pop rtna -- 
    02cf : fc00 ; -- <0211> swapra = nop

-- ########  -- = 0x02d0
    02d0 : 303e ; -- <0218> push rtna -- 

    02d1 : 5e00 ; -- <0219> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02d2 : 6290 ; -- <0219> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02d3 : f815 ; -- <0219> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02d4 : f816 ; -- <0219> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02d5 : fc00 ; -- <0220> swapra = nop
    02d6 : fba0 ; -- <0222> callx  init_plan_warmup
    02d7 : 0390 ; -- <0222> "
    02d8 : fc00 ; -- <0222> "

    02d9 : f80c ; -- <0224> pop rtna -- 
    02da : fc00 ; -- <0224> swapra = nop

-- ########  -- = 0x02db
    02db : 303e ; -- <0231> push rtna -- 

    02dc : 5e00 ; -- <0232> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02dd : 6290 ; -- <0232> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02de : f815 ; -- <0232> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02df : f816 ; -- <0232> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02e0 : fc00 ; -- <0233> swapra = nop
    02e1 : fba0 ; -- <0235> callx  init_plan_run
    02e2 : 0413 ; -- <0235> "
    02e3 : fc00 ; -- <0235> "

    02e4 : f80c ; -- <0237> pop rtna -- 
    02e5 : fc00 ; -- <0237> swapra = nop

-- ########  -- = 0x02e6
    02e6 : 303e ; -- <0244> push rtna -- 

    02e7 : 5e00 ; -- <0245> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02e8 : 6290 ; -- <0245> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02e9 : f815 ; -- <0245> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02ea : f816 ; -- <0245> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02eb : fc00 ; -- <0246> swapra = nop
    02ec : fba0 ; -- <0248> callx  init_plan_learn_stoich
    02ed : 041a ; -- <0248> "
    02ee : fc00 ; -- <0248> "

    02ef : f80c ; -- <0250> pop rtna -- 
    02f0 : fc00 ; -- <0250> swapra = nop


-- :plan_name_stop -- = 0x02f1
-- "STP\x0"
    02f1 : 5453 ; -- <0002> TS
    02f2 : 0050 ; -- <0002>  P

-- ########  -- = 0x02f3

-- set up the stop plan.
    02f3 : fba0 ; -- <0025> callx  clear_ign_history
    02f4 : 05c3 ; -- <0025> "
    02f5 : fc00 ; -- <0025> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    02f6 : 5e00 ; -- <0027> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    02f7 : 6284 ; -- <0027> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 132
    02f8 : 57a0 ; -- <0027> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    02f9 : 025b ; -- <0027> "
    02fa : 5e00 ; -- <0028> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    02fb : 6286 ; -- <0028> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    02fc : 57a0 ; -- <0028> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    02fd : 36b0 ; -- <0028> "
    02fe : 83a0 ; -- <0029> ign_timeout_len_jf = ([rpm_to_jf 50])
    02ff : 36b0 ; -- <0029> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    0300 : 5e00 ; -- <0034> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0301 : 6292 ; -- <0034> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    0302 : 5600 ; -- <0034> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    0303 : 8600 ; -- <0035> puff_len_us = 0

-- memorize state.
    0304 : 5e00 ; -- <0038> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    0305 : 628a ; -- <0038> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 138
    0306 : 57a0 ; -- <0038> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    0307 : 02f1 ; -- <0038> "
    0308 : 5e00 ; -- <0039> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    0309 : 628c ; -- <0039> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 140
    030a : 57a0 ; -- <0039> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    030b : 0316 ; -- <0039> "
    030c : 5e00 ; -- <0040> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    030d : 628e ; -- <0040> ram $ram_transition_func = :leave_stop -- av_ad_lo = 142
    030e : 57a0 ; -- <0040> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    030f : 031a ; -- <0040> "
    0310 : 5e00 ; -- <0041> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0311 : 6290 ; -- <0041> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 144
    0312 : 57a0 ; -- <0041> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0313 : 0315 ; -- <0041> "

    0314 : fc00 ; -- <0043> swapra = nop

-- ########  -- = 0x0315


    0315 : fc00 ; -- <0049> swapra = nop

-- ########  -- = 0x0316

    0316 : 5e00 ; -- <0055> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0317 : 6292 ; -- <0055> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    0318 : 5600 ; -- <0055> ram $ram_next_puff_len_us = 0 -- av_write_data = 0

    0319 : fc00 ; -- <0057> swapra = nop

-- ########  -- = 0x031a

-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    031a : 001e ; -- <0075> a = power_duty
    031b : 0680 ; -- <0076> b = $ign_switch_off_mask
    031c : e403 ; -- <0077> bn and0z :stay
    031d : 032b ; -- <0077> "
    031e : 5e00 ; -- <0078> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    031f : 6282 ; -- <0078> ram a = $ram_ign_bad_samples -- av_ad_lo = 130
    0320 : 0015 ; -- <0078> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0321 : 0016 ; -- <0078> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0322 : 0608 ; -- <0079> b = ($ign_history_len / 2)
    0323 : e006 ; -- <0080> br gt :stay
    0324 : 032b ; -- <0080> "
    0325 : fba0 ; -- <0081> callx  destroy_plan_stop
    0326 : 0315 ; -- <0081> "
    0327 : fc00 ; -- <0081> "
    0328 : fba0 ; -- <0082> callx  init_plan_crank
    0329 : 032e ; -- <0082> "
    032a : fc00 ; -- <0082> "
-- :stay -- = 0x032b

    032b : fc00 ; -- <0085> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 5000 to 20000 us length in about 7 seconds.

-- :plan_name_crank -- = 0x032c
-- "CR\x0"
    032c : 5243 ; -- <0011> RC
    032d : 0000 ; -- <0011>   

-- ########  -- = 0x032e

-- set up the crank plan.
    032e : 5e00 ; -- <0035> ram $ram_puff_count = 0 -- av_ad_hi = 0
    032f : 6294 ; -- <0035> ram $ram_puff_count = 0 -- av_ad_lo = 148
    0330 : 5600 ; -- <0035> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0331 : 5e00 ; -- <0037> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    0332 : 6284 ; -- <0037> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 132
    0333 : 5657 ; -- <0037> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    0334 : 5e00 ; -- <0038> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0335 : 6286 ; -- <0038> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    0336 : 57a0 ; -- <0038> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    0337 : 36b0 ; -- <0038> "
    0338 : 83a0 ; -- <0039> ign_timeout_len_jf = ([rpm_to_jf 50])
    0339 : 36b0 ; -- <0039> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    033a : 5e00 ; -- <0043> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    033b : 6292 ; -- <0043> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 146
    033c : 57a0 ; -- <0043> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 5000
    033d : 1388 ; -- <0043> "
    033e : 87a0 ; -- <0044> puff_len_us = $crank_min_puff_len_us
    033f : 1388 ; -- <0044> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    0340 : fba0 ; -- <0046> callx  clear_ign_history
    0341 : 05c3 ; -- <0046> "
    0342 : fc00 ; -- <0046> "

-- memorize state.
    0343 : 5e00 ; -- <0049> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    0344 : 628a ; -- <0049> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 138
    0345 : 57a0 ; -- <0049> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    0346 : 032c ; -- <0049> "
    0347 : 5e00 ; -- <0050> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    0348 : 628c ; -- <0050> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 140
    0349 : 57a0 ; -- <0050> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    034a : 0355 ; -- <0050> "
    034b : 5e00 ; -- <0051> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    034c : 628e ; -- <0051> ram $ram_transition_func = :leave_crank -- av_ad_lo = 142
    034d : 57a0 ; -- <0051> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    034e : 0373 ; -- <0051> "
    034f : 5e00 ; -- <0052> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    0350 : 6290 ; -- <0052> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 144
    0351 : 57a0 ; -- <0052> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    0352 : 0354 ; -- <0052> "

    0353 : fc00 ; -- <0054> swapra = nop

-- ########  -- = 0x0354


    0354 : fc00 ; -- <0060> swapra = nop

-- ########  -- = 0x0355
    0355 : 303e ; -- <0079> push rtna -- 

    0356 : 5e00 ; -- <0080> ram a = $ram_puff_count -- av_ad_hi = 0
    0357 : 6294 ; -- <0080> ram a = $ram_puff_count -- av_ad_lo = 148
    0358 : 0015 ; -- <0080> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0359 : 0016 ; -- <0080> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    035a : 060a ; -- <0081> b = $crank_max_puffs
    035b : e006 ; -- <0082> br gt :puff_limit
    035c : 036a ; -- <0082> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    035d : 07a0 ; -- <0084> b = $crank_incr_us_per_puff
    035e : 05dc ; -- <0084> "
    035f : fba0 ; -- <0085> call :multiply
    0360 : 0170 ; -- <0085> "
    0361 : fc00 ; -- <0085> "
    0362 : 07a0 ; -- <0086> b = $crank_min_puff_len_us
    0363 : 1388 ; -- <0086> "
    0364 : 5e00 ; -- <0087> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    0365 : 6292 ; -- <0087> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    0366 : c800 ; -- <0087> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    0367 : 5700 ; -- <0087> "
    0368 : e00f ; -- <0088> jmp :done
    0369 : 0371 ; -- <0088> "
-- :puff_limit -- = 0x036a
-- prevent the puff counter from going higher & eventually rolling over.
    036a : 5e00 ; -- <0091> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    036b : 6294 ; -- <0091> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 148
    036c : 560a ; -- <0091> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 10
-- accept max puff len.
    036d : 5e00 ; -- <0093> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    036e : 6292 ; -- <0093> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 146
    036f : 57a0 ; -- <0093> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    0370 : 4e20 ; -- <0093> "
-- :done -- = 0x0371

    0371 : f80c ; -- <0096> pop rtna -- 
    0372 : fc00 ; -- <0096> swapra = nop

-- ########  -- = 0x0373

    0373 : fba0 ; -- <0115> callx  check_engine_stop  a
    0374 : 0858 ; -- <0115> "
    0375 : fc00 ; -- <0115> "
    0376 : 0008 ; -- <0115> a = pa
    0377 : e400 ; -- <0116> bn az :done
    0378 : 038d ; -- <0116> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    0379 : 5e00 ; -- <0119> ram a = $ram_rpm_valid -- av_ad_hi = 0
    037a : 6280 ; -- <0119> ram a = $ram_rpm_valid -- av_ad_lo = 128
    037b : 0015 ; -- <0119> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    037c : 0016 ; -- <0119> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    037d : e000 ; -- <0120> br az :stay
    037e : 038d ; -- <0120> "
    037f : 5e00 ; -- <0121> ram a = $ram_avg_rpm -- av_ad_hi = 0
    0380 : 627e ; -- <0121> ram a = $ram_avg_rpm -- av_ad_lo = 126
    0381 : 0015 ; -- <0121> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    0382 : 0016 ; -- <0121> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    0383 : 07a0 ; -- <0122> b = $crank_success_rpm
    0384 : 0320 ; -- <0122> "
    0385 : e005 ; -- <0123> br lt :stay
    0386 : 038d ; -- <0123> "
    0387 : fba0 ; -- <0124> callx  destroy_plan_crank
    0388 : 0354 ; -- <0124> "
    0389 : fc00 ; -- <0124> "
    038a : fba0 ; -- <0125> callx  init_plan_warmup
    038b : 0390 ; -- <0125> "
    038c : fc00 ; -- <0125> "
-- :stay -- = 0x038d

-- :done -- = 0x038d

    038d : fc00 ; -- <0130> swapra = nop



-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.
-- 750 = 0 degF.
-- max 6000 & min 4500 over a temp range 750 to 0x4c0 gives 6900 us puff at 74 deg F.  program rev 594.
-- this is used if the engine temp is unavailable.

-- :plan_name_warmup -- = 0x038e
-- "WM\x0"
    038e : 4d57 ; -- <0016> MW
    038f : 0000 ; -- <0016>   

-- ########  -- = 0x0390

-- set up the warmup plan.
    0390 : 5e00 ; -- <0031> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0391 : 6214 ; -- <0031> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0392 : 0015 ; -- <0031> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0393 : 0016 ; -- <0031> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0394 : 063c ; -- <0032> b = $warmup_timeout_sec
    0395 : 5e00 ; -- <0033> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_hi = 0
    0396 : 6298 ; -- <0033> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_lo = 152
    0397 : c800 ; -- <0033> ram $ram_warmup_timeout_at_pass = a+b -- av_write_data = a+b
    0398 : 5700 ; -- <0033> "

-- memorize state.
    0399 : 5e00 ; -- <0036> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    039a : 628a ; -- <0036> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 138
    039b : 57a0 ; -- <0036> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    039c : 038e ; -- <0036> "
    039d : 5e00 ; -- <0037> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    039e : 628c ; -- <0037> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 140
    039f : 57a0 ; -- <0037> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    03a0 : 03ab ; -- <0037> "
    03a1 : 5e00 ; -- <0038> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    03a2 : 628e ; -- <0038> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 142
    03a3 : 57a0 ; -- <0038> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    03a4 : 03dd ; -- <0038> "
    03a5 : 5e00 ; -- <0039> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    03a6 : 6290 ; -- <0039> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 144
    03a7 : 57a0 ; -- <0039> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    03a8 : 03aa ; -- <0039> "

    03a9 : fc00 ; -- <0041> swapra = nop

-- ########  -- = 0x03aa


    03aa : fc00 ; -- <0047> swapra = nop

-- ########  -- = 0x03ab
    03ab : 3004 ; -- <0086> push x -- 
    03ac : 303e ; -- <0086> push rtna -- "

-- x = enrichment us.
    03ad : 13a0 ; -- <0088> x = $warmup_limping_enrichment_us
    03ae : 07d0 ; -- <0088> "

-- check engine block temp sensor.  if valid, enrich by a linear function:
-- {warmup_min_temp_adc...warmup_success_temp_adc} -> {$warmup_max_enrichment_us...0}
    03af : 0202 ; -- <0092> a = $anmux_engine_block_temp

    03b0 : 0351 ; -- <0093> a = a<<1
    03b1 : 0618 ; -- <0093> b = 24
    03b2 : 5e00 ; -- <0093> av_ad_hi = 0
    03b3 : 6300 ; -- <0093> av_ad_lo = ad0
    03b4 : 0415 ; -- <0093> b = av_write_data
    03b5 : 0416 ; -- <0093> b = av_read_data

-- b = sensor reading in adc counts.
    03b6 : 03a0 ; -- <0095> a = $temp_ceiling_adc
    03b7 : 0ff0 ; -- <0095> "
    03b8 : e005 ; -- <0096> br lt :temp_invalid
    03b9 : 03d3 ; -- <0096> "
    03ba : 03a0 ; -- <0097> a = $warmup_success_temp_adc
    03bb : 04c0 ; -- <0097> "
    03bc : e005 ; -- <0098> br lt :too_warm
    03bd : 03d3 ; -- <0098> "
    03be : 03a0 ; -- <0099> a = $warmup_min_temp_adc
    03bf : 02ee ; -- <0099> "
    03c0 : e005 ; -- <0100> br lt :in_range
    03c1 : 03c4 ; -- <0100> "
    03c2 : 07a0 ; -- <0101> b = $warmup_min_temp_adc
    03c3 : 02ee ; -- <0101> "
-- :in_range -- = 0x03c4
-- negate the sensor reading so as to subtract it from warmup_success_temp_adc.
    03c4 : 0360 ; -- <0104> a = 0xffff
    03c5 : c800 ; -- <0105> b = xor
    03c6 : 0738 ; -- <0105> "
    03c7 : 0201 ; -- <0106> a = 1
    03c8 : c800 ; -- <0107> b = a+b
    03c9 : 0700 ; -- <0107> "
    03ca : 03a0 ; -- <0108> a = $warmup_success_temp_adc
    03cb : 04c0 ; -- <0108> "
    03cc : c800 ; -- <0109> b = a+b
    03cd : 0700 ; -- <0109> "
-- b = how many counts "cold" we are.  multiply that by the slope warmup_us_per_cold_adc.
    03ce : 020c ; -- <0111> a = $warmup_us_per_cold_adc
    03cf : fba0 ; -- <0112> call :multiply
    03d0 : 0170 ; -- <0112> "
    03d1 : fc00 ; -- <0112> "
    03d2 : 1000 ; -- <0113> x = a
-- :too_warm -- = 0x03d3
-- :temp_invalid -- = 0x03d3

-- apply total of base amount and enrichment.
-- $warmup_min_puff_len_us <= total <= ($warmup_min_puff_len_us + $warmup_max_enrichment_us)
    03d3 : 03a0 ; -- <0119> a = $warmup_min_puff_len_us
    03d4 : 09c4 ; -- <0119> "
    03d5 : 0404 ; -- <0120> b = x
    03d6 : 5e00 ; -- <0121> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    03d7 : 6292 ; -- <0121> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    03d8 : c800 ; -- <0121> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    03d9 : 5700 ; -- <0121> "

    03da : f80c ; -- <0123> pop rtna -- 
    03db : 100c ; -- <0123> pop x -- "
    03dc : fc00 ; -- <0123> swapra = nop

-- ########  -- = 0x03dd

    03dd : fba0 ; -- <0154> callx  check_engine_stop  a
    03de : 0858 ; -- <0154> "
    03df : fc00 ; -- <0154> "
    03e0 : 0008 ; -- <0154> a = pa
    03e1 : e400 ; -- <0155> bn az :done
    03e2 : 0410 ; -- <0155> "

-- transition to plan_run if warmup has expired.
    03e3 : 5e00 ; -- <0158> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03e4 : 6214 ; -- <0158> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03e5 : 0015 ; -- <0158> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03e6 : 0016 ; -- <0158> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03e7 : 5e00 ; -- <0159> ram b = $ram_warmup_timeout_at_pass -- av_ad_hi = 0
    03e8 : 6298 ; -- <0159> ram b = $ram_warmup_timeout_at_pass -- av_ad_lo = 152
    03e9 : 0415 ; -- <0159> ram b = $ram_warmup_timeout_at_pass -- b = av_write_data -- start read cycle
    03ea : 0416 ; -- <0159> ram b = $ram_warmup_timeout_at_pass -- b = av_read_data -- finish read cycle

    03eb : 0000 ; -- <0164> a = a
    03ec : 0401 ; -- <0164> b = b

    03ed : e406 ; -- <0164> bn gt :else_1005
    03ee : 03f7 ; -- <0164> "

    03ef : fba0 ; -- <0166> callx  destroy_plan_warmup
    03f0 : 03aa ; -- <0166> "
    03f1 : fc00 ; -- <0166> "
    03f2 : fba0 ; -- <0167> callx  init_plan_run
    03f3 : 0413 ; -- <0167> "
    03f4 : fc00 ; -- <0167> "
    03f5 : e00f ; -- <0168> jmp :done
    03f6 : 0410 ; -- <0168> "


-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    03f7 : 0202 ; -- <0174> a = $anmux_engine_block_temp

    03f8 : 0351 ; -- <0175> a = a<<1
    03f9 : 0618 ; -- <0175> b = 24
    03fa : 5e00 ; -- <0175> av_ad_hi = 0
    03fb : 6300 ; -- <0175> av_ad_lo = ad0
    03fc : 0415 ; -- <0175> b = av_write_data
    03fd : 0416 ; -- <0175> b = av_read_data

    03fe : 03a0 ; -- <0176> a = $temp_ceiling_adc
    03ff : 0ff0 ; -- <0176> "

    0400 : 0000 ; -- <0183> a = a
    0401 : 0401 ; -- <0183> b = b

    0402 : e406 ; -- <0183> bn gt :else_1026
    0403 : 0410 ; -- <0183> "

    0404 : 03a0 ; -- <0185> a = $warmup_success_temp_adc
    0405 : 04c0 ; -- <0185> "

    0406 : 0000 ; -- <0189> a = a
    0407 : 0401 ; -- <0189> b = b

    0408 : e405 ; -- <0189> bn lt :else_1032
    0409 : 0410 ; -- <0189> "

    040a : fba0 ; -- <0191> callx  destroy_plan_warmup
    040b : 03aa ; -- <0191> "
    040c : fc00 ; -- <0191> "
    040d : fba0 ; -- <0192> callx  init_plan_run
    040e : 0413 ; -- <0192> "
    040f : fc00 ; -- <0192> "



-- :done -- = 0x0410

    0410 : fc00 ; -- <0200> swapra = nop


-- :plan_name_run -- = 0x0411
-- "RN\x0"
    0411 : 4e52 ; -- <0002> NR
    0412 : 0000 ; -- <0002>   

-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed, by about 1000 us per second.



-- ########  -- = 0x0413

-- set up the run plan.

-- memorize state.
    0413 : 5e00 ; -- <0029> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    0414 : 628a ; -- <0029> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 138
    0415 : 57a0 ; -- <0029> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    0416 : 0411 ; -- <0029> "
    0417 : 5e00 ; -- <0030> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    0418 : 628c ; -- <0030> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 140
    0419 : 57a0 ; -- <0030> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    041a : 0425 ; -- <0030> "
    041b : 5e00 ; -- <0031> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    041c : 628e ; -- <0031> ram $ram_transition_func = :leave_run -- av_ad_lo = 142
    041d : 57a0 ; -- <0031> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    041e : 0460 ; -- <0031> "
    041f : 5e00 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    0420 : 6290 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 144
    0421 : 57a0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    0422 : 0424 ; -- <0032> "

    0423 : fc00 ; -- <0034> swapra = nop

-- ########  -- = 0x0424


    0424 : fc00 ; -- <0040> swapra = nop

-- ########  -- = 0x0425
    0425 : 3002 ; -- <0069> push i -- 
    0426 : 3003 ; -- <0069> push j -- "

    0427 : 5e00 ; -- <0070> ram i = $ram_run_ticks_remain -- av_ad_hi = 0
    0428 : 629a ; -- <0070> ram i = $ram_run_ticks_remain -- av_ad_lo = 154
    0429 : 0815 ; -- <0070> ram i = $ram_run_ticks_remain -- i = av_write_data -- start read cycle
    042a : 0816 ; -- <0070> ram i = $ram_run_ticks_remain -- i = av_read_data -- finish read cycle

    042b : 0002 ; -- <0094> a = i
    042c : 0600 ; -- <0094> b = 0

    042d : e406 ; -- <0094> bn gt :else_1069
    042e : 0436 ; -- <0094> "

    042f : 0f60 ; -- <0096> j = -1
    0430 : 5e00 ; -- <0097> ram $ram_run_ticks_remain = i+j -- av_ad_hi = 0
    0431 : 629a ; -- <0097> ram $ram_run_ticks_remain = i+j -- av_ad_lo = 154
    0432 : c800 ; -- <0097> ram $ram_run_ticks_remain = i+j -- av_write_data = i+j
    0433 : 5710 ; -- <0097> "

    0434 : e00f ; -- <0099> jmp :end_1069
    0435 : 045d ; -- <0099> "

    0436 : 5e00 ; -- <0100> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_ad_hi = 0
    0437 : 629a ; -- <0100> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_ad_lo = 154
    0438 : 560a ; -- <0100> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    0439 : 5e00 ; -- <0103> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    043a : 6292 ; -- <0103> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    043b : 0815 ; -- <0103> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    043c : 0816 ; -- <0103> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    043d : 0e00 ; -- <0104> j = 0
    043e : 0205 ; -- <0105> a = $o2_adc_channel

    043f : 0351 ; -- <0106> a = a<<1
    0440 : 0628 ; -- <0106> b = 40
    0441 : 5e00 ; -- <0106> av_ad_hi = 0
    0442 : 6300 ; -- <0106> av_ad_lo = ad0
    0443 : 0415 ; -- <0106> b = av_write_data
    0444 : 0416 ; -- <0106> b = av_read_data


    0445 : 0001 ; -- <0117> a = b
    0446 : 07a0 ; -- <0117> b = 588
    0447 : 024c ; -- <0117> "

    0448 : e405 ; -- <0117> bn lt :else_1096
    0449 : 0452 ; -- <0117> "

-- sensing a lean condition.  trim up to enrich.

    044a : 0002 ; -- <0122> a = i
    044b : 07a0 ; -- <0122> b = 10000
    044c : 2710 ; -- <0122> "

    044d : e405 ; -- <0122> bn lt :else_1101
    044e : 0450 ; -- <0122> "

    044f : 0ec8 ; -- <0124> j = $run_puff_step_up_us


    0450 : e00f ; -- <0128> jmp :end_1096
    0451 : 0459 ; -- <0128> "

-- sensing a rich condition.  trim down to lean it out.

    0452 : 0002 ; -- <0132> a = i
    0453 : 07a0 ; -- <0132> b = 2000
    0454 : 07d0 ; -- <0132> "

    0455 : e406 ; -- <0132> bn gt :else_1109
    0456 : 0459 ; -- <0132> "

    0457 : 0fa0 ; -- <0134> j = $run_puff_step_down_us
    0458 : ff9b ; -- <0134> "


    0459 : 5e00 ; -- <0139> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    045a : 6292 ; -- <0139> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 146
    045b : c800 ; -- <0139> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    045c : 5710 ; -- <0139> "


    045d : 0c0c ; -- <0143> pop j -- 
    045e : 080c ; -- <0143> pop i -- "
    045f : fc00 ; -- <0143> swapra = nop

-- ########  -- = 0x0460

-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d event_priority
-- src reg 000e soft_event
-- src reg 000f usage_count
-- src reg 0010 ustimer0
-- src reg 0011 mstimer0
-- src reg 0012 mstimer1
-- src reg 0013 mstimer2
-- src reg 0014 spi_data
-- src reg 0015 av_write_data
-- src reg 0016 av_read_data
-- src reg 0017 av_ad_hi
-- src reg 0018 av_ad_lo
-- src reg 0019 fduart_data
-- src reg 001a fduart_status
-- src reg 001b leds
-- src reg 001c board_ctrl
-- src reg 001d anmux_ctrl
-- src reg 001e power_duty
-- src reg 001f ign_capture_jf
-- src reg 0020 ign_timeout_len_jf
-- src reg 0021 puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d event_priority
-- dest reg 000e soft_event
-- dest reg 000f usage_count
-- dest reg 0010 ustimer0
-- dest reg 0011 mstimer0
-- dest reg 0012 mstimer1
-- dest reg 0013 mstimer2
-- dest reg 0014 spi_data
-- dest reg 0015 av_write_data
-- dest reg 0017 av_ad_hi
-- dest reg 0018 av_ad_lo
-- dest reg 0019 fduart_data
-- dest reg 001a fduart_status
-- dest reg 001b leds
-- dest reg 001c board_ctrl
-- dest reg 001d anmux_ctrl
-- dest reg 001e power_duty
-- dest reg 0020 ign_timeout_len_jf
-- dest reg 0021 puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_daq_discard_cnt
-- ram 00000018 ram_last_anmux_data
-- ram 00000028 ram_last_adc_data
-- ram 00000038 ram_adc_chn_pending
-- ram 0000003a ram_adc_junk
-- ram 0000003c ram_dial_setting
-- ram 0000003e ram_power_down_at_min
-- ram 00000040 ram_relay_hold_at_pass
-- ram 00000042 ram_minutes_cnt
-- ram 00000044 ram_seconds_cnt
-- ram 00000046 ram_mcu_usage_cnt
-- ram 00000048 ram_text_flag_pointers
-- ram 00000058 ram_next_tfp_idx
-- ram 0000005a ram_ign_history_idx
-- ram 0000005c ram_ign_history_jf
-- ram 0000007c ram_ign_avg_jf
-- ram 0000007e ram_avg_rpm
-- ram 00000080 ram_rpm_valid
-- ram 00000082 ram_ign_bad_samples
-- ram 00000084 ram_ign_fastest_jf
-- ram 00000086 ram_ign_slowest_jf
-- ram 00000088 ram_next_puff_len_us
-- ram 0000008a ram_plan_name
-- ram 0000008c ram_puff_len_func
-- ram 0000008e ram_transition_func
-- ram 00000090 ram_destroy_plan_func
-- ram 00000092 ram_next_puff_len_us
-- ram 00000094 ram_puff_count
-- ram 00000096 ram_terminal_connected
-- ram 00000098 ram_warmup_timeout_at_pass
-- ram 0000009a ram_run_ticks_remain
-- ram 0000009c smap
-- ram 000000b6 ram_lrns_ticks_remain
-- ram 000000b8 ram_o2_state
-- ram 000000ba ram_o2_been_rich
-- ram 000000bc ram_o2_been_lean
        
        END;
    
