
        DEPTH = 1024 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

-- program code dimensions.

-- register file configuration.

-- application-specific register aliases.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.


-- -- I/O expansion bus.
-- alias_both exp                  [incr counter]
-- alias_both exp_addr             [incr counter]
-- vdefine exp_num_regs 32
-- vdefine exp_top_reg ($exp_num_regs - 1)
-- setvar exp_counter -1

-- alias_src  keys                 [incr exp_counter]@exp
-- alias_both leds                 [incr exp_counter]@exp

-- alias_both anmux_ctrl           [incr exp_counter]@exp
-- vdefine     anmux_enable_mask       0x0008
-- vdefine     anmux_channel_mask      0x0007




-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- SETTING efi_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_20us NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 5000 RPM = about 140 jf between rising edges on chevy ignition white wire.
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.
-- setvar ign_history_quarter      ($ign_history_len / 4)
-- setvar ign_quarter_avg_shift    ($ign_history_idx_bits - 2)
-- ram_define ram_ign_oldest_avg_jf
-- ram_define ram_ign_newest_avg_jf

-- realtime counting.


    0000 : e00f ; -- <0164> jmp :main
    0001 : 020d ; -- <0164> "

    0002 : 001d ; -- <0166> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0166>   
    0004 : 2020 ; -- <0166>   
    0005 : 2020 ; -- <0166>   
    0006 : 6120 ; -- <0166> a 
-- "       b"
    0007 : 2020 ; -- <0166>   
    0008 : 2020 ; -- <0166>   
    0009 : 2020 ; -- <0166>   
    000a : 6220 ; -- <0166> b 
-- "       i"
    000b : 2020 ; -- <0166>   
    000c : 2020 ; -- <0166>   
    000d : 2020 ; -- <0166>   
    000e : 6920 ; -- <0166> i 
-- "       j"
    000f : 2020 ; -- <0166>   
    0010 : 2020 ; -- <0166>   
    0011 : 2020 ; -- <0166>   
    0012 : 6a20 ; -- <0166> j 
-- "       x"
    0013 : 2020 ; -- <0166>   
    0014 : 2020 ; -- <0166>   
    0015 : 2020 ; -- <0166>   
    0016 : 7820 ; -- <0166> x 
-- "       y"
    0017 : 2020 ; -- <0166>   
    0018 : 2020 ; -- <0166>   
    0019 : 2020 ; -- <0166>   
    001a : 7920 ; -- <0166> y 
-- "      g6"
    001b : 2020 ; -- <0166>   
    001c : 2020 ; -- <0166>   
    001d : 2020 ; -- <0166>   
    001e : 3667 ; -- <0166> 6g
-- "      g7"
    001f : 2020 ; -- <0166>   
    0020 : 2020 ; -- <0166>   
    0021 : 2020 ; -- <0166>   
    0022 : 3767 ; -- <0166> 7g
-- "--rstk  "
    0023 : 2f2f ; -- <0166> --
    0024 : 7372 ; -- <0166> sr
    0025 : 6b74 ; -- <0166> kt
    0026 : 2020 ; -- <0166>   
-- "  ev_pri"
    0027 : 2020 ; -- <0166>   
    0028 : 7665 ; -- <0166> ve
    0029 : 705f ; -- <0166> p_
    002a : 6972 ; -- <0166> ir
-- "softevnt"
    002b : 6f73 ; -- <0166> os
    002c : 7466 ; -- <0166> tf
    002d : 7665 ; -- <0166> ve
    002e : 746e ; -- <0166> tn
-- "   usage"
    002f : 2020 ; -- <0166>   
    0030 : 7520 ; -- <0166> u 
    0031 : 6173 ; -- <0166> as
    0032 : 6567 ; -- <0166> eg
-- "ustimer0"
    0033 : 7375 ; -- <0166> su
    0034 : 6974 ; -- <0166> it
    0035 : 656d ; -- <0166> em
    0036 : 3072 ; -- <0166> 0r
-- "mstimer0"
    0037 : 736d ; -- <0166> sm
    0038 : 6974 ; -- <0166> it
    0039 : 656d ; -- <0166> em
    003a : 3072 ; -- <0166> 0r
-- "mstimer1"
    003b : 736d ; -- <0166> sm
    003c : 6974 ; -- <0166> it
    003d : 656d ; -- <0166> em
    003e : 3172 ; -- <0166> 1r
-- "spi_data"
    003f : 7073 ; -- <0166> ps
    0040 : 5f69 ; -- <0166> _i
    0041 : 6164 ; -- <0166> ad
    0042 : 6174 ; -- <0166> at
-- "--avwrdt"
    0043 : 2f2f ; -- <0166> --
    0044 : 7661 ; -- <0166> va
    0045 : 7277 ; -- <0166> rw
    0046 : 7464 ; -- <0166> td
-- "av_rd_dt"
    0047 : 7661 ; -- <0166> va
    0048 : 725f ; -- <0166> r_
    0049 : 5f64 ; -- <0166> _d
    004a : 7464 ; -- <0166> td
-- "av_ad_hi"
    004b : 7661 ; -- <0166> va
    004c : 615f ; -- <0166> a_
    004d : 5f64 ; -- <0166> _d
    004e : 6968 ; -- <0166> ih
-- "av_ad_lo"
    004f : 7661 ; -- <0166> va
    0050 : 615f ; -- <0166> a_
    0051 : 5f64 ; -- <0166> _d
    0052 : 6f6c ; -- <0166> ol
-- "--uartdt"
    0053 : 2f2f ; -- <0166> --
    0054 : 6175 ; -- <0166> au
    0055 : 7472 ; -- <0166> tr
    0056 : 7464 ; -- <0166> td
-- "uartstat"
    0057 : 6175 ; -- <0166> au
    0058 : 7472 ; -- <0166> tr
    0059 : 7473 ; -- <0166> ts
    005a : 7461 ; -- <0166> ta
-- "    leds"
    005b : 2020 ; -- <0166>   
    005c : 2020 ; -- <0166>   
    005d : 656c ; -- <0166> el
    005e : 7364 ; -- <0166> sd
-- "brd_ctrl"
    005f : 7262 ; -- <0166> rb
    0060 : 5f64 ; -- <0166> _d
    0061 : 7463 ; -- <0166> tc
    0062 : 6c72 ; -- <0166> lr
-- "   anmux"
    0063 : 2020 ; -- <0166>   
    0064 : 6120 ; -- <0166> a 
    0065 : 6d6e ; -- <0166> mn
    0066 : 7875 ; -- <0166> xu
-- "pwr_duty"
    0067 : 7770 ; -- <0166> wp
    0068 : 5f72 ; -- <0166> _r
    0069 : 7564 ; -- <0166> ud
    006a : 7974 ; -- <0166> yt
-- "efilenus"
    006b : 6665 ; -- <0166> fe
    006c : 6c69 ; -- <0166> li
    006d : 6e65 ; -- <0166> ne
    006e : 7375 ; -- <0166> su
-- "igntmout"
    006f : 6769 ; -- <0166> gi
    0070 : 746e ; -- <0166> tn
    0071 : 6f6d ; -- <0166> om
    0072 : 7475 ; -- <0166> tu
-- "igntmcap"
    0073 : 6769 ; -- <0166> gi
    0074 : 746e ; -- <0166> tn
    0075 : 636d ; -- <0166> cm
    0076 : 7061 ; -- <0166> pa

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x0077
-- initialize prior to polling loop, for minimum latency.
    0077 : 07a0 ; -- <0006> b = :event_table
    0078 : 0228 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0079
    0079 : 0009 ; -- <0009> a = event_priority
    007a : e000 ; -- <0010> br 0z :poll_events_again
    007b : 0079 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    007c : 2400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    007d : d300 ; -- <0015> fetch rtna from ad0
    007e : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    007f : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0080 : 5ba0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0081 : ffc0 ; -- <0021> "
    0082 : e00f ; -- <0021> error_halt_code 0xffc0
    0083 : 0082 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x0084
    0084 : 2004 ; -- <0044> push x -- func putchar_fduart

    0085 : 1000 ; -- <0046> x = a

-- wait for FIFO to be available.
    0086 : 0202 ; -- <0049> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x0087
    0087 : 0415 ; -- <0051> b = fduart_status
    0088 : e403 ; -- <0052> bn and0z :pcfduart_wait_for_idle
    0089 : 0087 ; -- <0052> "

-- push word to the UART.  its low byte is a character.
    008a : 5004 ; -- <0055> fduart_data = x
    008b : 1008 ; -- <0056> pop x -- end_func
    008c : fc00 ; -- <0056> end_func

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x008d
-- wait until FIFO is populated.
    008d : 0208 ; -- <0062> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x008e
    008e : 0415 ; -- <0064> b = fduart_status
    008f : e403 ; -- <0065> bn and0z :wait_for_busy
    0090 : 008e ; -- <0065> "
    0091 : 0014 ; -- <0066> a = fduart_data
    0092 : fc00 ; -- <0067> end_func

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x0093
-- check for FIFO is populated.
    0093 : 0208 ; -- <0072> a = $arx_fifo_empty_mask
    0094 : 0415 ; -- <0073> b = fduart_status
    0095 : e403 ; -- <0074> bn and0z :none
    0096 : 0099 ; -- <0074> "
    0097 : 0014 ; -- <0075> a = fduart_data
    0098 : fc00 ; -- <0076> rtn
-- :none -- = 0x0099
    0099 : 0360 ; -- <0078> a = -1
    009a : fc00 ; -- <0079> end_func


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x009b
-- set & enable analog muxer
    009b : 0608 ; -- <0007> b = $anmux_enable_mask
    009c : c800 ; -- <0008> anmux_ctrl = or
    009d : 6334 ; -- <0008> "
    009e : fc00 ; -- <0009> end_func

-- ######## func anmux_get_chn -- = 0x009f
    009f : 0018 ; -- <0012> a = anmux_ctrl
    00a0 : 0607 ; -- <0013> b = $anmux_channel_mask
    00a1 : c800 ; -- <0014> a = and
    00a2 : 0330 ; -- <0014> "
    00a3 : fc00 ; -- <0015> end_func


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00a4
-- "0123456789abcdef"
    00a4 : 3130 ; -- <0050> 10
    00a5 : 3332 ; -- <0050> 32
    00a6 : 3534 ; -- <0050> 54
    00a7 : 3736 ; -- <0050> 76
    00a8 : 3938 ; -- <0050> 98
    00a9 : 6261 ; -- <0050> ba
    00aa : 6463 ; -- <0050> dc
    00ab : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00ac
    00ac : 2004 ; -- <0054> push x -- func put4x
    00ad : 2006 ; -- <0054> push g6 -- "
    00ae : 203e ; -- <0054> push rtna -- "
    00af : 13a0 ; -- <0055> x = :hexdigits
    00b0 : 00a4 ; -- <0055> "

    00b1 : 1800 ; -- <0057> g6 = a
    00b2 : 07a0 ; -- <0058> b = 0xF000
    00b3 : f000 ; -- <0058> "
    00b4 : c800 ; -- <0059> a = and
    00b5 : 0330 ; -- <0059> "
    00b6 : 0353 ; -- <0060> a = a>>4
    00b7 : 0353 ; -- <0061> a = a>>4
    00b8 : 0353 ; -- <0062> a = a>>4
    00b9 : fba0 ; -- <0063> call fetch_byte
    00ba : 01cc ; -- <0063> "
    00bb : fc00 ; -- <0063> "
    00bc : 0000 ; -- <0064> a = a -- putchar a
    00bd : fba0 ; -- <0064> putchar a
    00be : 0084 ; -- <0064> "
    00bf : fc00 ; -- <0064> "

    00c0 : 0006 ; -- <0066> a = g6
    00c1 : 07a0 ; -- <0067> b = 0x0F00
    00c2 : 0f00 ; -- <0067> "
    00c3 : c800 ; -- <0068> a = and
    00c4 : 0330 ; -- <0068> "
    00c5 : 0353 ; -- <0069> a = a>>4
    00c6 : 0353 ; -- <0070> a = a>>4
    00c7 : fba0 ; -- <0071> call fetch_byte
    00c8 : 01cc ; -- <0071> "
    00c9 : fc00 ; -- <0071> "
    00ca : 0000 ; -- <0072> a = a -- putchar a
    00cb : fba0 ; -- <0072> putchar a
    00cc : 0084 ; -- <0072> "
    00cd : fc00 ; -- <0072> "

    00ce : 0006 ; -- <0074> a = g6
    00cf : 06f0 ; -- <0075> b = 0x00F0
    00d0 : c800 ; -- <0076> a = and
    00d1 : 0330 ; -- <0076> "
    00d2 : 0353 ; -- <0077> a = a>>4
    00d3 : fba0 ; -- <0078> call fetch_byte
    00d4 : 01cc ; -- <0078> "
    00d5 : fc00 ; -- <0078> "
    00d6 : 0000 ; -- <0079> a = a -- putchar a
    00d7 : fba0 ; -- <0079> putchar a
    00d8 : 0084 ; -- <0079> "
    00d9 : fc00 ; -- <0079> "

    00da : 0006 ; -- <0081> a = g6
    00db : 060f ; -- <0082> b = 0x000F
    00dc : c800 ; -- <0083> a = and
    00dd : 0330 ; -- <0083> "
    00de : fba0 ; -- <0084> call fetch_byte
    00df : 01cc ; -- <0084> "
    00e0 : fc00 ; -- <0084> "
    00e1 : 0000 ; -- <0085> a = a -- putchar a
    00e2 : fba0 ; -- <0085> putchar a
    00e3 : 0084 ; -- <0085> "
    00e4 : fc00 ; -- <0085> "

    00e5 : f808 ; -- <0087> pop rtna -- end_func
    00e6 : 1808 ; -- <0087> pop g6 -- "
    00e7 : 1008 ; -- <0087> pop x -- "
    00e8 : fc00 ; -- <0087> end_func

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00e9
    00e9 : 2002 ; -- <0091> push i -- func get4x
    00ea : 2003 ; -- <0091> push j -- "
    00eb : 2004 ; -- <0091> push x -- "
    00ec : 2005 ; -- <0091> push y -- "
    00ed : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    00ee : 1604 ; -- <0094> y = 4
-- :again -- = 0x00ef
    00ef : fba0 ; -- <0096> getchar
    00f0 : 008d ; -- <0096> "
    00f1 : fc00 ; -- <0096> "
    00f2 : 13a0 ; -- <0097> x = :hexdigits
    00f3 : 00a4 ; -- <0097> "
    00f4 : 0a10 ; -- <0098> i = 16
    00f5 : fba0 ; -- <0099> call :find_in_fetch
    00f6 : 01e0 ; -- <0099> "
    00f7 : fc00 ; -- <0099> "
    00f8 : 0760 ; -- <0100> b = -1
    00f9 : e007 ; -- <0101> br eq :fail
    00fa : 010e ; -- <0101> "
    00fb : 0400 ; -- <0102> b = a
    00fc : 0003 ; -- <0103> a = j
    00fd : 0352 ; -- <0104> a = a<<4
    00fe : c800 ; -- <0105> j = or
    00ff : 0f34 ; -- <0105> "
    0100 : 1360 ; -- <0106> x = -1
    0101 : c800 ; -- <0107> y = x+y
    0102 : 1720 ; -- <0107> "
    0103 : 0005 ; -- <0108> a = y
    0104 : e400 ; -- <0109> bn az :again
    0105 : 00ef ; -- <0109> "
    0106 : 0003 ; -- <0110> a = j
    0107 : 0600 ; -- <0111> b = 0
    0108 : f808 ; -- <0112> pop rtna -- rtn
    0109 : 1408 ; -- <0112> pop y -- "
    010a : 1008 ; -- <0112> pop x -- "
    010b : 0c08 ; -- <0112> pop j -- "
    010c : 0808 ; -- <0112> pop i -- "
    010d : fc00 ; -- <0112> rtn
-- :fail -- = 0x010e
    010e : 0760 ; -- <0114> b = -1
    010f : f808 ; -- <0115> pop rtna -- end_func
    0110 : 1408 ; -- <0115> pop y -- "
    0111 : 1008 ; -- <0115> pop x -- "
    0112 : 0c08 ; -- <0115> pop j -- "
    0113 : 0808 ; -- <0115> pop i -- "
    0114 : fc00 ; -- <0115> end_func


-- function library for simple integer math.

-- ######## func multiply -- = 0x0115
    0115 : 2002 ; -- <0004> push i -- func multiply
    0116 : 2003 ; -- <0004> push j -- "
    0117 : 2004 ; -- <0004> push x -- "
    0118 : 2005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0119 : 1000 ; -- <0009> x = a
    011a : 1401 ; -- <0010> y = b
    011b : 0a00 ; -- <0011> i = 0
-- :again -- = 0x011c
    011c : e002 ; -- <0013> br xz :done
    011d : 012b ; -- <0013> "
    011e : 0004 ; -- <0014> a = x
    011f : 0601 ; -- <0015> b = 1
    0120 : e003 ; -- <0016> br and0z :skip_add
    0121 : 0125 ; -- <0016> "
    0122 : 0c05 ; -- <0017> j = y
    0123 : c800 ; -- <0018> i = i+j
    0124 : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0125
    0125 : 0004 ; -- <0020> a = x
    0126 : 1350 ; -- <0021> x = a>>1
    0127 : 0005 ; -- <0022> a = y
    0128 : 1751 ; -- <0023> y = a<<1
    0129 : e00f ; -- <0024> jmp :again
    012a : 011c ; -- <0024> "
-- :done -- = 0x012b
    012b : 0002 ; -- <0026> a = i
    012c : 1408 ; -- <0027> pop y -- end_func
    012d : 1008 ; -- <0027> pop x -- "
    012e : 0c08 ; -- <0027> pop j -- "
    012f : 0808 ; -- <0027> pop i -- "
    0130 : fc00 ; -- <0027> end_func

-- ######## func divide -- = 0x0131
    0131 : 2002 ; -- <0029> push i -- func divide
    0132 : 2003 ; -- <0029> push j -- "
    0133 : 2004 ; -- <0029> push x -- "
    0134 : 2005 ; -- <0029> push y -- "
    0135 : 2006 ; -- <0029> push g6 -- "
    0136 : 2007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0137 : e005 ; -- <0037> br lt :zero
    0138 : 0172 ; -- <0037> "
    0139 : e000 ; -- <0038> br az :zero
    013a : 0172 ; -- <0038> "
    013b : 1000 ; -- <0039> x = a
--    g7 = x
    013c : 0001 ; -- <0041> a = b
    013d : e000 ; -- <0042> br az :zero
    013e : 0172 ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    013f : 0404 ; -- <0058> b = x
    0140 : 0a00 ; -- <0059> i = 0
    0141 : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x0142
    0142 : e006 ; -- <0062> br gt :shift_done
    0143 : 0148 ; -- <0062> "
    0144 : 0351 ; -- <0063> a = a<<1
    0145 : 0b10 ; -- <0064> i = ad1
    0146 : e00f ; -- <0065> jmp :shift_again
    0147 : 0142 ; -- <0065> "
-- :shift_done -- = 0x0148
    0148 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    0149 : 1e00 ; -- <0078> g7 = 0
    014a : 0f60 ; -- <0079> j = -1
-- :again -- = 0x014b
    014b : e001 ; -- <0081> br iz :done
    014c : 0169 ; -- <0081> "
    014d : 0006 ; -- <0082> a = g6
    014e : 0404 ; -- <0083> b = x
    014f : e006 ; -- <0084> br gt :result0
    0150 : 0161 ; -- <0084> "
-- temp does fit; output a 1.
    0151 : 0007 ; -- <0086> a = g7
    0152 : 0351 ; -- <0087> a = a<<1
    0153 : 0601 ; -- <0088> b = 1
    0154 : c800 ; -- <0089> g7 = or
    0155 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    0156 : 0006 ; -- <0091> a = g6
    0157 : 0760 ; -- <0092> b = -1
    0158 : c800 ; -- <0093> a = xor
    0159 : 0338 ; -- <0093> "
    015a : 0601 ; -- <0094> b = 1
    015b : c800 ; -- <0095> y = a+b
    015c : 1700 ; -- <0095> "
    015d : c800 ; -- <0096> x = x+y
    015e : 1320 ; -- <0096> "
    015f : e00f ; -- <0097> jmp :next
    0160 : 0163 ; -- <0097> "
-- :result0 -- = 0x0161
-- temp does not fit; output a 0.
    0161 : 0007 ; -- <0100> a = g7
    0162 : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x0163
    0163 : 0006 ; -- <0104> a = g6
    0164 : 1b50 ; -- <0105> g6 = a>>1
    0165 : c800 ; -- <0106> i = i+j
    0166 : 0b10 ; -- <0106> "
    0167 : e00f ; -- <0107> jmp :again
    0168 : 014b ; -- <0107> "

-- :done -- = 0x0169
    0169 : 0407 ; -- <0110> b = g7
    016a : 0004 ; -- <0111> a = x
    016b : 1c08 ; -- <0112> pop g7 -- rtn
    016c : 1808 ; -- <0112> pop g6 -- "
    016d : 1408 ; -- <0112> pop y -- "
    016e : 1008 ; -- <0112> pop x -- "
    016f : 0c08 ; -- <0112> pop j -- "
    0170 : 0808 ; -- <0112> pop i -- "
    0171 : fc00 ; -- <0112> rtn

-- :zero -- = 0x0172
    0172 : 0600 ; -- <0115> b = 0
    0173 : 1c08 ; -- <0116> pop g7 -- rtn
    0174 : 1808 ; -- <0116> pop g6 -- "
    0175 : 1408 ; -- <0116> pop y -- "
    0176 : 1008 ; -- <0116> pop x -- "
    0177 : 0c08 ; -- <0116> pop j -- "
    0178 : 0808 ; -- <0116> pop i -- "
    0179 : fc00 ; -- <0116> rtn
    017a : 1c08 ; -- <0117> pop g7 -- end_func
    017b : 1808 ; -- <0117> pop g6 -- "
    017c : 1408 ; -- <0117> pop y -- "
    017d : 1008 ; -- <0117> pop x -- "
    017e : 0c08 ; -- <0117> pop j -- "
    017f : 0808 ; -- <0117> pop i -- "
    0180 : fc00 ; -- <0117> end_func

-- ######## func testmath -- = 0x0181
    0181 : 2002 ; -- <0119> push i -- func testmath
    0182 : 2004 ; -- <0119> push x -- "
    0183 : 2005 ; -- <0119> push y -- "
    0184 : 203e ; -- <0119> push rtna -- "
    0185 : 1000 ; -- <0120> x = a
    0186 : 1401 ; -- <0121> y = b
    0187 : 0220 ; -- <0122> a = 32 -- putasc " "
    0188 : 0000 ; -- <0122> a = a -- putasc " "
    0189 : fba0 ; -- <0122> putasc " "
    018a : 0084 ; -- <0122> "
    018b : fc00 ; -- <0122> "
    018c : 0004 ; -- <0123> a = x
    018d : fba0 ; -- <0124> call :put4x
    018e : 00ac ; -- <0124> "
    018f : fc00 ; -- <0124> "
    0190 : 022c ; -- <0125> a = 44 -- putasc ","
    0191 : 0000 ; -- <0125> a = a -- putasc ","
    0192 : fba0 ; -- <0125> putasc ","
    0193 : 0084 ; -- <0125> "
    0194 : fc00 ; -- <0125> "
    0195 : 0005 ; -- <0126> a = y
    0196 : fba0 ; -- <0127> call :put4x
    0197 : 00ac ; -- <0127> "
    0198 : fc00 ; -- <0127> "
    0199 : 023d ; -- <0128> a = 61 -- putasc "="
    019a : 0000 ; -- <0128> a = a -- putasc "="
    019b : fba0 ; -- <0128> putasc "="
    019c : 0084 ; -- <0128> "
    019d : fc00 ; -- <0128> "
    019e : 0004 ; -- <0129> a = x
    019f : 0405 ; -- <0130> b = y
    01a0 : fba0 ; -- <0131> call :multiply
    01a1 : 0115 ; -- <0131> "
    01a2 : fc00 ; -- <0131> "
    01a3 : fba0 ; -- <0132> call :put4x
    01a4 : 00ac ; -- <0132> "
    01a5 : fc00 ; -- <0132> "
    01a6 : 0272 ; -- <0133> a = 114 -- putasc "r"
    01a7 : 0000 ; -- <0133> a = a -- putasc "r"
    01a8 : fba0 ; -- <0133> putasc "r"
    01a9 : 0084 ; -- <0133> "
    01aa : fc00 ; -- <0133> "
    01ab : 0004 ; -- <0134> a = x
    01ac : 0405 ; -- <0135> b = y
    01ad : fba0 ; -- <0136> call :divide
    01ae : 0131 ; -- <0136> "
    01af : fc00 ; -- <0136> "
    01b0 : 0801 ; -- <0137> i = b
    01b1 : fba0 ; -- <0138> call :put4x
    01b2 : 00ac ; -- <0138> "
    01b3 : fc00 ; -- <0138> "
    01b4 : 0271 ; -- <0139> a = 113 -- putasc "q"
    01b5 : 0000 ; -- <0139> a = a -- putasc "q"
    01b6 : fba0 ; -- <0139> putasc "q"
    01b7 : 0084 ; -- <0139> "
    01b8 : fc00 ; -- <0139> "
    01b9 : 0002 ; -- <0140> a = i
    01ba : fba0 ; -- <0141> call :put4x
    01bb : 00ac ; -- <0141> "
    01bc : fc00 ; -- <0141> "
    01bd : 020d ; -- <0142> a = 13 -- puteol
    01be : 0000 ; -- <0142> a = a -- puteol
    01bf : fba0 ; -- <0142> puteol
    01c0 : 0084 ; -- <0142> "
    01c1 : fc00 ; -- <0142> "
    01c2 : 020a ; -- <0142> a = 10 -- puteol
    01c3 : 0000 ; -- <0142> a = a -- puteol
    01c4 : fba0 ; -- <0142> puteol
    01c5 : 0084 ; -- <0142> "
    01c6 : fc00 ; -- <0142> "
    01c7 : f808 ; -- <0143> pop rtna -- end_func
    01c8 : 1408 ; -- <0143> pop y -- "
    01c9 : 1008 ; -- <0143> pop x -- "
    01ca : 0808 ; -- <0143> pop i -- "
    01cb : fc00 ; -- <0143> end_func

-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01cc
    01cc : 0601 ; -- <0005> b = 1
    01cd : e003 ; -- <0006> br and0z :pick_byte_even
    01ce : 01d7 ; -- <0006> "
    01cf : 0350 ; -- <0007> a = a>>1
    01d0 : 0404 ; -- <0008> b = x
    01d1 : c800 ; -- <0009> fetch a from a+b
    01d2 : d300 ; -- <0009> "
    01d3 : 03b0 ; -- <0009> "
    01d4 : 0353 ; -- <0010> a = a>>4
    01d5 : 0353 ; -- <0011> a = a>>4
    01d6 : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x01d7
    01d7 : 0350 ; -- <0014> a = a>>1
    01d8 : 0404 ; -- <0015> b = x
    01d9 : c800 ; -- <0016> fetch a from a+b
    01da : d300 ; -- <0016> "
    01db : 03b0 ; -- <0016> "
    01dc : 06ff ; -- <0017> b = 0xff
    01dd : c800 ; -- <0018> a = and
    01de : 0330 ; -- <0018> "
    01df : fc00 ; -- <0019> end_func

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01e0
    01e0 : 2002 ; -- <0027> push i -- func find_in_fetch
    01e1 : 2003 ; -- <0027> push j -- "
    01e2 : 2005 ; -- <0027> push y -- "
    01e3 : 203e ; -- <0027> push rtna -- "
    01e4 : 1400 ; -- <0028> y = a
    01e5 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01e6
    01e6 : e001 ; -- <0031> br iz :fail
    01e7 : 01f6 ; -- <0031> "
    01e8 : 0b10 ; -- <0032> i = ad1
    01e9 : 0002 ; -- <0033> a = i
    01ea : fba0 ; -- <0034> call :fetch_byte
    01eb : 01cc ; -- <0034> "
    01ec : fc00 ; -- <0034> "
    01ed : 0405 ; -- <0035> b = y
    01ee : e407 ; -- <0036> bn eq :again
    01ef : 01e6 ; -- <0036> "
-- :found -- = 0x01f0
    01f0 : 0002 ; -- <0038> a = i
    01f1 : f808 ; -- <0039> pop rtna -- rtn
    01f2 : 1408 ; -- <0039> pop y -- "
    01f3 : 0c08 ; -- <0039> pop j -- "
    01f4 : 0808 ; -- <0039> pop i -- "
    01f5 : fc00 ; -- <0039> rtn
-- :fail -- = 0x01f6
    01f6 : 0360 ; -- <0041> a = -1
    01f7 : f808 ; -- <0042> pop rtna -- end_func
    01f8 : 1408 ; -- <0042> pop y -- "
    01f9 : 0c08 ; -- <0042> pop j -- "
    01fa : 0808 ; -- <0042> pop i -- "
    01fb : fc00 ; -- <0042> end_func


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x01fc
    01fc : 2004 ; -- <0002> push x -- func spinwait
    01fd : 2005 ; -- <0002> push y -- "
--patch
--rtn
    01fe : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x01ff
    01ff : 13a0 ; -- <0007> x = 16666
    0200 : 411a ; -- <0007> "
    0201 : 1760 ; -- <0008> y = -1
    0202 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0203
-- use of the ad2 name overrides auto-nop here.
    0203 : 1320 ; -- <0012> x = ad2
    0204 : e402 ; -- <0013> bn xz :spinwait_inner
    0205 : 0203 ; -- <0013> "
    0206 : c800 ; -- <0014> a = a+b
    0207 : 0300 ; -- <0014> "
    0208 : e400 ; -- <0015> bn az :spinwait_outer
    0209 : 01ff ; -- <0015> "
    020a : 1408 ; -- <0016> pop y -- end_func
    020b : 1008 ; -- <0016> pop x -- "
    020c : fc00 ; -- <0016> end_func



-- #########################################################################
-- :main -- = 0x020d

    020d : 0254 ; -- <0181> a = 84 -- putasc "T"
    020e : 0000 ; -- <0181> a = a -- putasc "T"
    020f : fba0 ; -- <0181> putasc "T"
    0210 : 0084 ; -- <0181> "
    0211 : fc00 ; -- <0181> "
    0212 : 0247 ; -- <0182> a = 71 -- putasc "G"
    0213 : 0000 ; -- <0182> a = a -- putasc "G"
    0214 : fba0 ; -- <0182> putasc "G"
    0215 : 0084 ; -- <0182> "
    0216 : fc00 ; -- <0182> "
    0217 : 0254 ; -- <0183> a = 84 -- putasc "T"
    0218 : 0000 ; -- <0183> a = a -- putasc "T"
    0219 : fba0 ; -- <0183> putasc "T"
    021a : 0084 ; -- <0183> "
    021b : fc00 ; -- <0183> "
    021c : 020d ; -- <0184> a = 13 -- puteol
    021d : 0000 ; -- <0184> a = a -- puteol
    021e : fba0 ; -- <0184> puteol
    021f : 0084 ; -- <0184> "
    0220 : fc00 ; -- <0184> "
    0221 : 020a ; -- <0184> a = 10 -- puteol
    0222 : 0000 ; -- <0184> a = a -- puteol
    0223 : fba0 ; -- <0184> puteol
    0224 : 0084 ; -- <0184> "
    0225 : fc00 ; -- <0184> "

    0226 : e00f ; -- <0186> jmp :main
    0227 : 020d ; -- <0186> "
-- :event_table -- = 0x0228

-- -- clear the first 64k of RAM.
-- av_ad_hi = 0
-- a = 0
-- b = 2
-- :clear_next_word
-- av_ad_lo = a
-- av_write_data = 0
-- a = ad0
-- bn az :clear_next_word

-- -- init RAM variables.
-- ram $ram_power_down_at_min = $power_down_never
-- ram $ram_relay_hold_at_pass = $relay_hold_passes

-- -- init fuel injection.
-- ign_timeout_len_20us = 0xfffc
-- efi_len_us = 3000
-- call :set_engine_stopped

-- -- power up FTDI USB board, and init any other special board control functions.
-- board_ctrl = $ftdi_power_mask
-- call :postpone_comm_restart

-- -- check initial state of power management circuits.
-- -- if power is lost or ignition switch is off already, open relay & abort run.
-- -- that's important because then the event controller booted up too late to
-- -- see edges on those 2 signals.  regular system would never shut itself down.
-- -- this setup is the last thing done prior to the event handler loop.
-- power_duty = $power_duty_closing
-- a = power_duty
-- b = ($power_lost_mask | $ign_switch_off_mask)
-- br and0z :skip_power_lost
-- power_duty = $power_duty_opening
-- error_halt_code $err_power_lost_at_boot
-- :skip_power_lost

-- -- start handling events.
-- soft_event = $event_controller_reset_mask
-- soft_event = 0
-- mstimer0 = 1000
-- jmp :poll_events

-- -- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- -- event 0 not used in this app anyway.
-- :event_table
-- ([label :poll_events])
-- ([label :power_lost_handler])
-- ([label :ign_captured_handler])
-- ([label :puff1_done_handler])
-- ([label :ustimer0_handler])
-- ([label :spi_done_handler])
-- ([label :mstimer0_handler])
-- ([label :mstimer1_handler])
-- ([label :uart_rx_handler])
-- ([label :uart_rx_overflow_handler])
-- ([label :uart_tx_overflow_handler])
-- ([label :key0_handler])
-- ([label :key1_handler])
-- ([label :ign_switch_off_handler])
-- ([label :ign_switch_on_handler])
-- ([label :softevent3_handler])
-- ([label :softevent2_handler])
-- ([label :softevent1_handler])
-- ([label :softevent0_handler])

-- -- #########################################################################

-- func set_engine_stopped
-- ram $ram_rpm_valid = 0
-- ram $ram_ign_history_idx = 0
-- -- for startup, look for RPM between 50 and 1160
-- ram $ram_ign_fastest_jf = ([rpm_to_jf 1160])
-- ram $ram_ign_slowest_jf = ([rpm_to_jf 50])
-- end_func

-- -- func wrap_history_idx
-- -- :again
-- -- b = $ign_history_len
-- -- br lt :done
-- -- b = ([negate $ign_history_len])
-- -- a = a+b
-- -- jmp :again
-- -- :done
-- -- end_func

-- event ign_captured_handler
-- -- discard outlier time.
-- a = ign_capture_jf
-- ram b = $ram_ign_fastest_jf
-- br lt :done
-- ram b = $ram_ign_slowest_jf
-- br gt :done

-- -- increment buffer index and memorize time.
-- ram a = $ram_ign_history_idx
-- b = 1
-- a = a+b
-- b = $ign_history_idx_mask
-- a = and
-- bn az :no_wrap
-- -- history buffer is full now.  average will be valid.
-- ram $ram_rpm_valid = 1
-- :no_wrap
-- ram $ram_ign_history_idx = a
-- struct_write $ram_ign_history_jf a = ign_capture_jf

-- -- ---------- compute new jiffy estimate.

-- -- -- first, total up the oldest 25% of the history
-- -- -- this doesn't work above 2^14 jf.  that's below 44 RPM.
-- -- -- reg a must be already loaded with the history index most recently written.
-- -- -- a=index, i=total, x=loop count.
-- -- i = 0
-- -- x = $ign_history_quarter
-- -- y = -1
-- -- :next_oldest
-- -- b = 1
-- -- a = a+b
-- -- b = $ign_history_idx_mask
-- -- a = and
-- -- struct_read j = $ram_ign_history_jf a
-- -- i = i+j
-- -- x = x+y
-- -- bn xz :next_oldest
-- -- -- memorize average.
-- -- a = i
-- -- << for {set n 0} {$n < $ign_avg_shift} {incr n} {parse3 a = a>>1 {}} >>
-- -- ram $ram_ign_oldest_avg_jf = a

-- -- average entire history.
-- -- b = total, i = index = loop count
-- b = 0
-- i = $ign_history_len
-- j = -1
-- :next_avg
-- struct_read a = $ram_ign_history_jf i
-- a = a>>$ign_history_idx_bits
-- b = a+b
-- i = i+j
-- bn iz :next_avg
-- ram $ram_ign_avg_jf = b

-- -- convert jiffies b to new RPM estimate.
-- a = b
-- call :jf_to_rpm
-- ram $ram_avg_rpm = a

-- :done
-- end_event

-- event ustimer0_handler
-- end_event

-- event spi_done_handler
-- -- discard-counter in RAM.
-- ram a = $ram_daq_discard_cnt
-- br az :report
-- b = -1
-- a = a+b
-- ram $ram_daq_discard_cnt = a
-- a = $anmux_adc_channel
-- call :begin_adc_conversion
-- event_return

-- -- report ADC reading.
-- :report
-- a = spi_data
-- call :put4x

-- -- decrement anmux channel & start waiting again.
-- call :anmux_get_chn
-- br az :all_done
-- b = -1
-- a = a+b
-- call :anmux_set_chn
-- mstimer1 = $anmux_settle_ms
-- event_return

-- -- end of daq pass.
-- :all_done
-- puteol
-- ram $ram_dial_setting = spi_data
-- end_event

-- event mstimer0_handler
-- -- unified 1-second periodic timer for all low-resolution tasks.

-- -- start timer again.
-- mstimer0 = 1000

-- -- realtime counters in RAM.
-- ram a = $ram_seconds_cnt
-- b = 1
-- a = a+b
-- b = 60
-- bn eq :same_minute
-- ram $ram_seconds_cnt = 0
-- ram a = $ram_minutes_cnt
-- b = 1
-- ram $ram_minutes_cnt = a+b
-- call :minute_events
-- jmp :minutes_done
-- :same_minute
-- ram $ram_seconds_cnt = a
-- :minutes_done

-- call :check_power_relay
-- call :check_communication
-- call :start_daq_pass
-- end_event

-- event mstimer1_handler
-- -- start a reading from the current anmux channel.
-- ram $ram_daq_discard_cnt = $anmux_num_discards
-- putasc " "
-- putasc "s"
-- call :anmux_get_chn
-- asc b = "0"
-- putchar a+b
-- putasc "="
-- a = $anmux_adc_channel
-- call :begin_adc_conversion
-- end_event

-- event uart_rx_handler
-- :again
-- pollchar
-- b = -1
-- br eq :done
-- b = 10
-- bn eq :skip_lf
-- call :postpone_comm_restart
-- :skip_lf
-- jmp :again
-- :done
-- end_event

-- event uart_rx_overflow_handler
-- error_halt_code $err_rx_overflow
-- end_event

-- event uart_tx_overflow_handler
-- error_halt_code $err_tx_overflow
-- end_event

-- event key0_handler
-- putasc "k"
-- putasc "0"
-- end_event

-- event key1_handler
-- putasc "k"
-- putasc "1"
-- end_event

-- event softevent3_handler
-- end_event

-- event softevent2_handler
-- end_event

-- event softevent1_handler
-- end_event

-- event softevent0_handler
-- end_event

-- func start_daq_pass
-- -- daq pass counter in RAM.
-- ram a = $ram_daq_pass_cnt
-- b = 1
-- a = a+b
-- leds = a
-- ram $ram_daq_pass_cnt = a
-- call :put4x
-- putasc ":"

-- putasc " "
-- putasc "r"
-- putasc "p"
-- putasc "m"
-- putasc "="
-- ram a = $ram_avg_rpm
-- call :put4x

-- -- start to acquire & report all anmux channels.
-- a = 7
-- call :anmux_set_chn
-- mstimer1 = $anmux_settle_ms

-- -- -- observe MCU utilization.
-- -- a = usage_count
-- -- call :put4x
-- -- usage_count = 0
-- end_func

-- func begin_adc_conversion
-- -- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- -- conversion after this one.  pass that in a.

-- a = a<<4
-- a = a<<4
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- spi_data = a
-- end_func

-- event power_lost_handler
-- -- at this time we have less than 2 ms of usable run time left.

-- -- this must be an uncommanded loss of main power, because if it was commanded,
-- -- no more events would be handled; this event handler wouldn't have a chance to run.
-- -- immediately set the power relay PWM to full power for a few seconds,
-- -- in case the power relay opened accidentally e.g. due to a hard pothole.
-- power_duty = $power_duty_closing
-- ram a = $ram_daq_pass_cnt
-- b = $relay_hold_passes
-- ram $ram_relay_hold_at_pass = a+b

-- -- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- -- save persistent data in case the power remains down e.g. due to battery disconnect.
-- call :save_persistent_data
-- end_event

-- event ign_switch_off_handler
-- -- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
-- ram a = $ram_minutes_cnt
-- b = $power_extend_minutes
-- ram $ram_power_down_at_min = a+b
-- end_event

-- event ign_switch_on_handler
-- ram $ram_power_down_at_min = $power_down_never
-- end_event

-- event puff1_done_handler
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- efi_len_us = a
-- end_event

-- func minute_events
-- call :check_power_down
-- end_func

-- func check_power_relay
-- ram a = $ram_daq_pass_cnt
-- ram b = $ram_relay_hold_at_pass
-- bn eq :done
-- -- time to begin "solenoid saver" coil power reduction by PWM.
-- power_duty = $power_duty_holding
-- :done
-- end_func

-- func check_power_down
-- -- check power-down deadline in RAM.
-- ram a = $ram_minutes_cnt
-- ram b = $ram_power_down_at_min
-- bn eq :done
-- call :power_down
-- :done
-- end_func

-- func power_down
-- -- this function never returns.
-- call :save_persistent_data
-- power_duty = $power_duty_opening
-- error_halt_code $err_power_down
-- end_func

-- func save_persistent_data
-- end_func

-- func check_communication
-- ram a = $ram_ftdi_downtime_remain_sec
-- br az :skip_ftdi_powerup
-- b = -1
-- a = a+b
-- ram $ram_ftdi_downtime_remain_sec = a
-- br az :do_power_on
-- rtn
-- :do_power_on
-- call :ftdi_power_on
-- rtn
-- :skip_ftdi_powerup

-- ram a = $ram_minutes_cnt
-- ram b = $ram_comm_restart_at_min
-- bn eq :done
-- -- comm restart is required.
-- call :postpone_comm_restart
-- ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec
-- call :ftdi_power_off
-- :done
-- end_func

-- func postpone_comm_restart
-- ram a = $ram_minutes_cnt
-- b = $comm_grace_period_min
-- ram $ram_comm_restart_at_min = a+b
-- end_func

-- func ftdi_power_off
-- a = board_ctrl
-- b = $not_ftdi_power_mask
-- board_ctrl = and
-- end_func

-- func ftdi_power_on
-- a = board_ctrl
-- b = $ftdi_power_mask
-- board_ctrl = or
-- end_func

-- func jf_to_rpm
-- -- pass jiffies in a.  return rpm in a.
-- -- resolution = 32 rpm.
-- b = a
-- a = 0x5573
-- -- = 700000 >> 5
-- call :divide
-- a = b
-- a = a<<4
-- a = a<<1
-- end_func

        
        END;
    
