
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.




-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.


-- I/O expansion bus.




    0000 : e00f ; -- <0059> jmp :main
    0001 : 0182 ; -- <0059> "

-- register names for use by debugger.
    0002 : 0015 ; -- <0062> ($counter + 1)
-- "       a"
    0003 : 2020 ; -- <0063>   
    0004 : 2020 ; -- <0063>   
    0005 : 2020 ; -- <0063>   
    0006 : 6120 ; -- <0063> a 
-- "       b"
    0007 : 2020 ; -- <0064>   
    0008 : 2020 ; -- <0064>   
    0009 : 2020 ; -- <0064>   
    000a : 6220 ; -- <0064> b 
-- "       i"
    000b : 2020 ; -- <0065>   
    000c : 2020 ; -- <0065>   
    000d : 2020 ; -- <0065>   
    000e : 6920 ; -- <0065> i 
-- "       j"
    000f : 2020 ; -- <0066>   
    0010 : 2020 ; -- <0066>   
    0011 : 2020 ; -- <0066>   
    0012 : 6a20 ; -- <0066> j 
-- "       x"
    0013 : 2020 ; -- <0067>   
    0014 : 2020 ; -- <0067>   
    0015 : 2020 ; -- <0067>   
    0016 : 7820 ; -- <0067> x 
-- "       y"
    0017 : 2020 ; -- <0068>   
    0018 : 2020 ; -- <0068>   
    0019 : 2020 ; -- <0068>   
    001a : 7920 ; -- <0068> y 
-- "      g6"
    001b : 2020 ; -- <0069>   
    001c : 2020 ; -- <0069>   
    001d : 2020 ; -- <0069>   
    001e : 3667 ; -- <0069> 6g
-- "      g7"
    001f : 2020 ; -- <0070>   
    0020 : 2020 ; -- <0070>   
    0021 : 2020 ; -- <0070>   
    0022 : 3767 ; -- <0070> 7g
-- "--  rstk"
    0023 : 2f2f ; -- <0071> --
    0024 : 2020 ; -- <0071>   
    0025 : 7372 ; -- <0071> sr
    0026 : 6b74 ; -- <0071> kt
-- "  ev_pri"
    0027 : 2020 ; -- <0072>   
    0028 : 7665 ; -- <0072> ve
    0029 : 705f ; -- <0072> p_
    002a : 6972 ; -- <0072> ir
-- "softevnt"
    002b : 6f73 ; -- <0073> os
    002c : 7466 ; -- <0073> tf
    002d : 7665 ; -- <0073> ve
    002e : 746e ; -- <0073> tn
-- " timer_0"
    002f : 7420 ; -- <0074> t 
    0030 : 6d69 ; -- <0074> mi
    0031 : 7265 ; -- <0074> re
    0032 : 305f ; -- <0074> 0_
-- "--adcctl"
    0033 : 2f2f ; -- <0075> --
    0034 : 6461 ; -- <0075> da
    0035 : 6363 ; -- <0075> cc
    0036 : 6c74 ; -- <0075> lt
-- "av_wr_dt"
    0037 : 7661 ; -- <0076> va
    0038 : 775f ; -- <0076> w_
    0039 : 5f72 ; -- <0076> _r
    003a : 7464 ; -- <0076> td
-- "--avrddt"
    003b : 2f2f ; -- <0077> --
    003c : 7661 ; -- <0077> va
    003d : 6472 ; -- <0077> dr
    003e : 7464 ; -- <0077> td
-- "av_ad_hi"
    003f : 7661 ; -- <0078> va
    0040 : 615f ; -- <0078> a_
    0041 : 5f64 ; -- <0078> _d
    0042 : 6968 ; -- <0078> ih
-- "av_ad_lo"
    0043 : 7661 ; -- <0079> va
    0044 : 615f ; -- <0079> a_
    0045 : 5f64 ; -- <0079> _d
    0046 : 6f6c ; -- <0079> ol
-- "--uartdt"
    0047 : 2f2f ; -- <0080> --
    0048 : 6175 ; -- <0080> au
    0049 : 7472 ; -- <0080> tr
    004a : 7464 ; -- <0080> td
-- "uartstat"
    004b : 6175 ; -- <0081> au
    004c : 7472 ; -- <0081> tr
    004d : 7473 ; -- <0081> ts
    004e : 7461 ; -- <0081> ta
-- "exp_data"
    004f : 7865 ; -- <0082> xe
    0050 : 5f70 ; -- <0082> _p
    0051 : 6164 ; -- <0082> ad
    0052 : 6174 ; -- <0082> at
-- "exp_addr"
    0053 : 7865 ; -- <0083> xe
    0054 : 5f70 ; -- <0083> _p
    0055 : 6461 ; -- <0083> da
    0056 : 7264 ; -- <0083> rd

-- libraries

-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
    0057 : 2004 ; -- <0044> push x -- func putchar_fduart

    0058 : 1000 ; -- <0046> x = a

-- wait for FIFO to be available.
    0059 : 0202 ; -- <0049> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x005a
    005a : 0412 ; -- <0051> b = fduart_status
    005b : e403 ; -- <0052> bn and0z :pcfduart_wait_for_idle
    005c : 005a ; -- <0052> "

-- push word to the UART.  its low byte is a character.
    005d : 4404 ; -- <0055> fduart_data = x
    005e : 1008 ; -- <0056> pop x -- rtn
    005f : fc00 ; -- <0056> rtn

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- wait until FIFO is populated.
    0060 : 0208 ; -- <0062> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x0061
    0061 : 0412 ; -- <0064> b = fduart_status
    0062 : e403 ; -- <0065> bn and0z :wait_for_busy
    0063 : 0061 ; -- <0065> "
    0064 : 0011 ; -- <0066> a = fduart_data
    0065 : fc00 ; -- <0067> rtn

-- returns a character in a, or -1 if none.
-- check for FIFO is populated.
    0066 : 0208 ; -- <0072> a = $arx_fifo_empty_mask
    0067 : 0412 ; -- <0073> b = fduart_status
    0068 : e403 ; -- <0074> bn and0z :none
    0069 : 006c ; -- <0074> "
    006a : 0011 ; -- <0075> a = fduart_data
    006b : fc00 ; -- <0076> rtn
-- :none -- = 0x006c
    006c : 0360 ; -- <0078> a = -1
    006d : fc00 ; -- <0079> rtn



-- bit-bang a complete SPI transaction.
-- pass mo data in a, transaction width (# of bits) in b.
-- returns mi data in a
    006e : 2002 ; -- <0005> push i -- func spi_exchange
    006f : 2003 ; -- <0005> push j -- "
    0070 : 2004 ; -- <0005> push x -- "
    0071 : 2005 ; -- <0005> push y -- "
    0072 : 2006 ; -- <0005> push g6 -- "
    0073 : 2007 ; -- <0005> push g7 -- "
-- keeping mo data in g6, mi data in g7.
    0074 : 1800 ; -- <0007> g6 = a
    0075 : 1e00 ; -- <0008> g7 = 0
-- keeping bit counter in i.
    0076 : 0801 ; -- <0010> i = b
    0077 : 0f60 ; -- <0011> j = -1
    0078 : 1760 ; -- <0012> y = -1
-- :next_bit -- = 0x0079
-- output the msb of mo, along with a low clock phase and low csn.
    0079 : 0006 ; -- <0015> a = g6
    007a : 0350 ; -- <0016> a = a>>1
    007b : 0350 ; -- <0017> a = a>>1
    007c : 0350 ; -- <0018> a = a>>1
    007d : 0353 ; -- <0019> a = a>>4
    007e : 0353 ; -- <0020> a = a>>4
    007f : 0353 ; -- <0021> a = a>>4
    0080 : 3000 ; -- <0022> de0nano_adc_ctrl = a
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    0081 : 1206 ; -- <0024> x = 6
-- :wait1 -- = 0x0082
    0082 : c800 ; -- <0026> x = x+y
    0083 : 1320 ; -- <0026> "
    0084 : e402 ; -- <0027> bn xz :wait1
    0085 : 0082 ; -- <0027> "
-- output a high clock phase.
    0086 : 0602 ; -- <0029> b = $de0nano_adc_sck_mask
    0087 : c800 ; -- <0030> de0nano_adc_ctrl = or
    0088 : 3334 ; -- <0030> "
-- sample mi.
    0089 : 0007 ; -- <0032> a = g7
    008a : 0351 ; -- <0033> a = a<<1
    008b : 040c ; -- <0034> b = de0nano_adc_ctrl
    008c : c800 ; -- <0035> g7 = or
    008d : 1f34 ; -- <0035> "
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    008e : 1206 ; -- <0037> x = 6
-- :wait2 -- = 0x008f
    008f : c800 ; -- <0039> x = x+y
    0090 : 1320 ; -- <0039> "
    0091 : e402 ; -- <0040> bn xz :wait2
    0092 : 008f ; -- <0040> "
-- shift mo bits.
    0093 : 0006 ; -- <0042> a = g6
    0094 : 0351 ; -- <0043> a = a<<1
    0095 : 1800 ; -- <0044> g6 = a
-- count bits
    0096 : c800 ; -- <0046> i = i+j
    0097 : 0b10 ; -- <0046> "
    0098 : e401 ; -- <0047> bn iz :next_bit
    0099 : 0079 ; -- <0047> "
-- idle the SPI bus with a high clock phase and high csn.
    009a : 3206 ; -- <0049> de0nano_adc_ctrl = ($de0nano_adc_csn_mask | $de0nano_adc_sck_mask)
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    009b : 1206 ; -- <0051> x = 6
-- :wait3 -- = 0x009c
    009c : c800 ; -- <0053> x = x+y
    009d : 1320 ; -- <0053> "
    009e : e402 ; -- <0054> bn xz :wait3
    009f : 009c ; -- <0054> "
    00a0 : 0007 ; -- <0055> a = g7
    00a1 : 1c08 ; -- <0056> pop g7 -- rtn
    00a2 : 1808 ; -- <0056> pop g6 -- "
    00a3 : 1408 ; -- <0056> pop y -- "
    00a4 : 1008 ; -- <0056> pop x -- "
    00a5 : 0c08 ; -- <0056> pop j -- "
    00a6 : 0808 ; -- <0056> pop i -- "
    00a7 : fc00 ; -- <0056> rtn

-- pass desired ADC channel in a.
-- returns ADC reading in a.
    00a8 : 203e ; -- <0060> push rtna -- func de0nano_adc_read
    00a9 : 0352 ; -- <0061> a = a<<4
    00aa : 0352 ; -- <0062> a = a<<4
    00ab : 0351 ; -- <0063> a = a<<1
    00ac : 0351 ; -- <0064> a = a<<1
    00ad : 0351 ; -- <0065> a = a<<1
    00ae : 0610 ; -- <0066> b = 16
    00af : fba0 ; -- <0067> call :spi_exchange
    00b0 : 006e ; -- <0067> "
    00b1 : fc00 ; -- <0067> "
    00b2 : f808 ; -- <0068> pop rtna -- rtn
    00b3 : fc00 ; -- <0068> rtn

-- pass desired anmux channel in a.
-- return ADC reading in a.
    00b4 : 203e ; -- <0072> push rtna -- func anmux_read_chn
-- set & enable analog muxer
    00b5 : 0608 ; -- <0074> b = $anmux_enable_mask
    00b6 : 5202 ; -- <0075> anmux_ctrl = or
    00b7 : 4f34 ; -- <0075> "
-- wait for muxer & current driver to settle down.  some delay here is absolutely required (per testing).
    00b8 : 0205 ; -- <0077> a = 5
    00b9 : fba0 ; -- <0078> call :spinwait
    00ba : 0171 ; -- <0078> "
    00bb : fc00 ; -- <0078> "

-- read ADC channel 7.  12 bits resolution.
-- must do this 3 times to get the ADC's input path to settle down, probably because
-- i'm driving it with high impedance & no buffer.
    00bc : 0207 ; -- <0083> a = 7
    00bd : fba0 ; -- <0084> call :de0nano_adc_read
    00be : 00a8 ; -- <0084> "
    00bf : fc00 ; -- <0084> "
    00c0 : 0207 ; -- <0085> a = 7
    00c1 : fba0 ; -- <0086> call :de0nano_adc_read
    00c2 : 00a8 ; -- <0086> "
    00c3 : fc00 ; -- <0086> "
    00c4 : 0207 ; -- <0087> a = 7
    00c5 : fba0 ; -- <0088> call :de0nano_adc_read
    00c6 : 00a8 ; -- <0088> "
    00c7 : fc00 ; -- <0088> "
    00c8 : f808 ; -- <0089> pop rtna -- rtn
    00c9 : fc00 ; -- <0089> rtn

-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    00ca : 0601 ; -- <0005> b = 1
    00cb : e003 ; -- <0006> br and0z :pick_byte_even
    00cc : 00d5 ; -- <0006> "
    00cd : 0350 ; -- <0007> a = a>>1
    00ce : 0404 ; -- <0008> b = x
    00cf : c800 ; -- <0009> fetch a from a+b
    00d0 : d300 ; -- <0009> "
    00d1 : 03b0 ; -- <0009> "
    00d2 : 0353 ; -- <0010> a = a>>4
    00d3 : 0353 ; -- <0011> a = a>>4
    00d4 : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x00d5
    00d5 : 0350 ; -- <0014> a = a>>1
    00d6 : 0404 ; -- <0015> b = x
    00d7 : c800 ; -- <0016> fetch a from a+b
    00d8 : d300 ; -- <0016> "
    00d9 : 03b0 ; -- <0016> "
    00da : 06ff ; -- <0017> b = 0xff
    00db : c800 ; -- <0018> a = and
    00dc : 0330 ; -- <0018> "
    00dd : fc00 ; -- <0019> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    00de : 2002 ; -- <0027> push i -- func find_in_fetch
    00df : 2003 ; -- <0027> push j -- "
    00e0 : 2005 ; -- <0027> push y -- "
    00e1 : 203e ; -- <0027> push rtna -- "
    00e2 : 1400 ; -- <0028> y = a
    00e3 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x00e4
    00e4 : e001 ; -- <0031> br iz :fail
    00e5 : 00f4 ; -- <0031> "
    00e6 : 0b10 ; -- <0032> i = ad1
    00e7 : 0002 ; -- <0033> a = i
    00e8 : fba0 ; -- <0034> call :fetch_byte
    00e9 : 00ca ; -- <0034> "
    00ea : fc00 ; -- <0034> "
    00eb : 0405 ; -- <0035> b = y
    00ec : e407 ; -- <0036> bn eq :again
    00ed : 00e4 ; -- <0036> "
-- :found -- = 0x00ee
    00ee : 0002 ; -- <0038> a = i
    00ef : f808 ; -- <0039> pop rtna -- rtn
    00f0 : 1408 ; -- <0039> pop y -- "
    00f1 : 0c08 ; -- <0039> pop j -- "
    00f2 : 0808 ; -- <0039> pop i -- "
    00f3 : fc00 ; -- <0039> rtn
-- :fail -- = 0x00f4
    00f4 : 0360 ; -- <0041> a = -1
    00f5 : f808 ; -- <0042> pop rtna -- rtn
    00f6 : 1408 ; -- <0042> pop y -- "
    00f7 : 0c08 ; -- <0042> pop j -- "
    00f8 : 0808 ; -- <0042> pop i -- "
    00f9 : fc00 ; -- <0042> rtn



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00fa
-- "0123456789abcdef"
    00fa : 3130 ; -- <0054> 10
    00fb : 3332 ; -- <0054> 32
    00fc : 3534 ; -- <0054> 54
    00fd : 3736 ; -- <0054> 76
    00fe : 3938 ; -- <0054> 98
    00ff : 6261 ; -- <0054> ba
    0100 : 6463 ; -- <0054> dc
    0101 : 6665 ; -- <0054> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0102 : 2004 ; -- <0058> push x -- func put4x
    0103 : 2006 ; -- <0058> push g6 -- "
    0104 : 203e ; -- <0058> push rtna -- "
    0105 : 13a0 ; -- <0059> x = :hexdigits
    0106 : 00fa ; -- <0059> "

    0107 : 1800 ; -- <0061> g6 = a
    0108 : 07a0 ; -- <0062> b = 0xF000
    0109 : f000 ; -- <0062> "
    010a : c800 ; -- <0063> a = and
    010b : 0330 ; -- <0063> "
    010c : 0353 ; -- <0064> a = a>>4
    010d : 0353 ; -- <0065> a = a>>4
    010e : 0353 ; -- <0066> a = a>>4
    010f : fba0 ; -- <0067> call fetch_byte
    0110 : 00ca ; -- <0067> "
    0111 : fc00 ; -- <0067> "
    0112 : 0000 ; -- <0068> a = a -- putchar a
    0113 : fba0 ; -- <0068> putchar a
    0114 : 0057 ; -- <0068> "
    0115 : fc00 ; -- <0068> "

    0116 : 0006 ; -- <0070> a = g6
    0117 : 07a0 ; -- <0071> b = 0x0F00
    0118 : 0f00 ; -- <0071> "
    0119 : c800 ; -- <0072> a = and
    011a : 0330 ; -- <0072> "
    011b : 0353 ; -- <0073> a = a>>4
    011c : 0353 ; -- <0074> a = a>>4
    011d : fba0 ; -- <0075> call fetch_byte
    011e : 00ca ; -- <0075> "
    011f : fc00 ; -- <0075> "
    0120 : 0000 ; -- <0076> a = a -- putchar a
    0121 : fba0 ; -- <0076> putchar a
    0122 : 0057 ; -- <0076> "
    0123 : fc00 ; -- <0076> "

    0124 : 0006 ; -- <0078> a = g6
    0125 : 06f0 ; -- <0079> b = 0x00F0
    0126 : c800 ; -- <0080> a = and
    0127 : 0330 ; -- <0080> "
    0128 : 0353 ; -- <0081> a = a>>4
    0129 : fba0 ; -- <0082> call fetch_byte
    012a : 00ca ; -- <0082> "
    012b : fc00 ; -- <0082> "
    012c : 0000 ; -- <0083> a = a -- putchar a
    012d : fba0 ; -- <0083> putchar a
    012e : 0057 ; -- <0083> "
    012f : fc00 ; -- <0083> "

    0130 : 0006 ; -- <0085> a = g6
    0131 : 060f ; -- <0086> b = 0x000F
    0132 : c800 ; -- <0087> a = and
    0133 : 0330 ; -- <0087> "
    0134 : fba0 ; -- <0088> call fetch_byte
    0135 : 00ca ; -- <0088> "
    0136 : fc00 ; -- <0088> "
    0137 : 0000 ; -- <0089> a = a -- putchar a
    0138 : fba0 ; -- <0089> putchar a
    0139 : 0057 ; -- <0089> "
    013a : fc00 ; -- <0089> "

    013b : f808 ; -- <0091> pop rtna -- rtn
    013c : 1808 ; -- <0091> pop g6 -- "
    013d : 1008 ; -- <0091> pop x -- "
    013e : fc00 ; -- <0091> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    013f : 2002 ; -- <0095> push i -- func get4x
    0140 : 2003 ; -- <0095> push j -- "
    0141 : 2004 ; -- <0095> push x -- "
    0142 : 2005 ; -- <0095> push y -- "
    0143 : 203e ; -- <0095> push rtna -- "
-- y = digit counter
-- j = sum
    0144 : 1604 ; -- <0098> y = 4
-- :again -- = 0x0145
    0145 : fba0 ; -- <0100> getchar
    0146 : 0060 ; -- <0100> "
    0147 : fc00 ; -- <0100> "
    0148 : 2000 ; -- <0100> push a -- "
    0149 : 0000 ; -- <0100> a = a -- "
    014a : fba0 ; -- <0100> "
    014b : 0057 ; -- <0100> "
    014c : fc00 ; -- <0100> "
    014d : 0008 ; -- <0100> pop a -- "
    014e : 13a0 ; -- <0101> x = :hexdigits
    014f : 00fa ; -- <0101> "
    0150 : 0a10 ; -- <0102> i = 16
    0151 : fba0 ; -- <0103> call :find_in_fetch
    0152 : 00de ; -- <0103> "
    0153 : fc00 ; -- <0103> "
    0154 : 0760 ; -- <0104> b = -1
    0155 : e007 ; -- <0105> br eq :fail
    0156 : 016a ; -- <0105> "
    0157 : 0400 ; -- <0106> b = a
    0158 : 0003 ; -- <0107> a = j
    0159 : 0352 ; -- <0108> a = a<<4
    015a : c800 ; -- <0109> j = or
    015b : 0f34 ; -- <0109> "
    015c : 1360 ; -- <0110> x = -1
    015d : c800 ; -- <0111> y = x+y
    015e : 1720 ; -- <0111> "
    015f : 0005 ; -- <0112> a = y
    0160 : e400 ; -- <0113> bn az :again
    0161 : 0145 ; -- <0113> "
    0162 : 0003 ; -- <0114> a = j
    0163 : 0600 ; -- <0115> b = 0
    0164 : f808 ; -- <0116> pop rtna -- rtn
    0165 : 1408 ; -- <0116> pop y -- "
    0166 : 1008 ; -- <0116> pop x -- "
    0167 : 0c08 ; -- <0116> pop j -- "
    0168 : 0808 ; -- <0116> pop i -- "
    0169 : fc00 ; -- <0116> rtn
-- :fail -- = 0x016a
    016a : 0760 ; -- <0118> b = -1
    016b : f808 ; -- <0119> pop rtna -- rtn
    016c : 1408 ; -- <0119> pop y -- "
    016d : 1008 ; -- <0119> pop x -- "
    016e : 0c08 ; -- <0119> pop j -- "
    016f : 0808 ; -- <0119> pop i -- "
    0170 : fc00 ; -- <0119> rtn

-- routine waits a number of milliseconds given in a.
    0171 : 2004 ; -- <0002> push x -- func spinwait
    0172 : 2005 ; -- <0002> push y -- "
--patch
--rtn
    0173 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x0174
    0174 : 13a0 ; -- <0007> x = 16666
    0175 : 411a ; -- <0007> "
    0176 : 1760 ; -- <0008> y = -1
    0177 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0178
-- use of the ad2 name overrides auto-nop here.
    0178 : 1320 ; -- <0012> x = ad2
    0179 : e402 ; -- <0013> bn xz :spinwait_inner
    017a : 0178 ; -- <0013> "
    017b : c800 ; -- <0014> a = a+b
    017c : 0300 ; -- <0014> "
    017d : e400 ; -- <0015> bn az :spinwait_outer
    017e : 0174 ; -- <0015> "
    017f : 1408 ; -- <0016> pop y -- rtn
    0180 : 1008 ; -- <0016> pop x -- "
    0181 : fc00 ; -- <0016> rtn



-- --------------------------------------------
-- :main -- = 0x0182

-- -- pass counter in x.  anmux channel number in i.
-- x = 0
-- y = 1

-- :next_pass
-- leds = x
-- a = x
-- call :put4x
-- putasc ":"
-- i = 8
-- j = -1

-- :next_anmux
-- i = i+j
-- putasc " "
-- putasc "s"
-- b = i
-- asc a = "0"
-- putchar a+b
-- putasc "="
-- a = i
-- call :anmux_read_chn
-- call :put4x
-- bn iz :next_anmux

-- puteol
-- a = 900
-- call :spinwait

-- x = x+y
-- jmp :next_pass

-- ----------------------------------------------------------

-- a = 0xf1
-- b = 0xf2
-- i = 0xf3
-- j = 0xf4
-- x = 0xf5
-- y = 0xf6
-- g6 = 0xf7
-- g7 = 0xf8
-- rtna = :test1
-- swapra = nop
-- g6 = g6
-- g6 = g6
-- g6 = g6
-- :test1
-- g6 = g6
-- g6 = g6
-- g6 = g6
-- jmp :test2
-- g6 = g6
-- g6 = g6
-- g6 = g6
-- :test2
-- g6 = g6
-- g6 = g6
-- g6 = g6

-- a = 0xf1
-- b = 0xf2
-- i = 0xf3
-- j = 0xf4
-- x = 0xf5
-- y = 0xf6
-- g6 = 0xf7
-- g7 = 0xf8
-- rtna = :test3
-- swapra = nop
-- g6 = g6
-- g6 = g6
-- g6 = g6
-- :test3
-- jmp :test4
-- g6 = g6
-- g6 = g6
-- g6 = g6
-- :test4
-- g6 = g6
-- g6 = g6
-- g6 = g6

-- a = 0xf1
-- b = 0xf2
-- i = 0xf3
-- j = 0xf4
-- x = 0xf5
-- y = 0xf6
-- g6 = 0xf7
-- g7 = 0xf8
-- rtna = :test5
-- swapra = b
-- g6 = g6
-- g6 = g6
-- g6 = g6
-- :test5
-- jmp :test6
-- g6 = g6
-- g6 = g6
-- g6 = g6
-- :test6
-- g6 = g6
-- g6 = g6
-- g6 = g6


    0182 : 2fa0 ; -- <0203> timer0 = $TICKS_PER_SEC
    0183 : 02fb ; -- <0203> "

    0184 : 2600 ; -- <0205> event_priority = 0
    0185 : 2601 ; -- <0206> event_priority = 1
    0186 : 2602 ; -- <0207> event_priority = 2
    0187 : 2603 ; -- <0208> event_priority = 3
    0188 : 2604 ; -- <0209> event_priority = 4
    0189 : 2605 ; -- <0210> event_priority = 5
    018a : 2606 ; -- <0211> event_priority = 6
    018b : 2607 ; -- <0212> event_priority = 7
    018c : 2608 ; -- <0213> event_priority = 8
    018d : 2609 ; -- <0214> event_priority = 9
    018e : 260a ; -- <0215> event_priority = 10
    018f : 260b ; -- <0216> event_priority = 11
    0190 : 260c ; -- <0217> event_priority = 12
    0191 : 260d ; -- <0218> event_priority = 13
    0192 : 260e ; -- <0219> event_priority = 14
    0193 : 260f ; -- <0220> event_priority = 15
    0194 : 2a00 ; -- <0221> soft_event = 0
    0195 : 2a01 ; -- <0222> soft_event = 0x0001

-- event loop prototype.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller.
-- :poll_events -- = 0x0196
-- initialize prior to polling loop, for minimum latency.
    0196 : 07a0 ; -- <0228> b = :event_table
    0197 : 01a1 ; -- <0228> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0198
    0198 : 0009 ; -- <0231> a = event_priority
    0199 : e000 ; -- <0232> br 0z :poll_events_again
    019a : 0198 ; -- <0232> "
-- acknowledge the event to clear its register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    019b : 2400 ; -- <0235> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    019c : d300 ; -- <0237> fetch rtna from ad0
    019d : fbb0 ; -- <0237> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    019e : fc00 ; -- <0241> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
-- :events_error_halt -- = 0x019f
    019f : e00f ; -- <0244> jmp :events_error_halt
    01a0 : 019f ; -- <0244> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x01a1

    01a1 : 01bd ; -- <0250> ([label :test_handler])
    01a2 : 01bd ; -- <0251> ([label :test_handler])
    01a3 : 01bd ; -- <0252> ([label :test_handler])
    01a4 : 01bd ; -- <0253> ([label :test_handler])

    01a5 : 01bd ; -- <0255> ([label :test_handler])
    01a6 : 01bd ; -- <0256> ([label :test_handler])
    01a7 : 01bd ; -- <0257> ([label :test_handler])
    01a8 : 01bd ; -- <0258> ([label :test_handler])

    01a9 : 01bd ; -- <0260> ([label :test_handler])
    01aa : 01bd ; -- <0261> ([label :test_handler])
    01ab : 01bd ; -- <0262> ([label :test_handler])
    01ac : 01bd ; -- <0263> ([label :test_handler])

    01ad : 01bd ; -- <0265> ([label :test_handler])
    01ae : 01bd ; -- <0266> ([label :test_handler])
    01af : 01bd ; -- <0267> ([label :test_handler])
    01b0 : 01bd ; -- <0268> ([label :test_handler])

-- this is now the OBSOLETE format.
    01b1 : e00f ; -- <0271> jmp :poll_events
    01b2 : 0196 ; -- <0271> "
    01b3 : e00f ; -- <0272> jmp :uart_rx_char_handler
    01b4 : 01d9 ; -- <0272> "
    01b5 : e00f ; -- <0273> jmp :uart_tx_char_handler
    01b6 : 01db ; -- <0273> "
    01b7 : e00f ; -- <0274> jmp :key0_handler
    01b8 : 01dd ; -- <0274> "
    01b9 : e00f ; -- <0275> jmp :key1_handler
    01ba : 01df ; -- <0275> "
    01bb : e00f ; -- <0276> jmp :timer0_handler
    01bc : 01e1 ; -- <0276> "

-- patch: call event loop as if it were a func, but don't declare it func.
-- instead let it jmp to a handler, which does an unmatched rtn?
-- no, don't allow handlers to call back to event loop.

-- output is the event priority found, then the soft_event value that caused it.
    01bd : fba0 ; -- <0284> call :put4x
    01be : 0102 ; -- <0284> "
    01bf : fc00 ; -- <0284> "
    01c0 : 0220 ; -- <0285> a = 32 -- putasc " "
    01c1 : 0000 ; -- <0285> a = a -- putasc " "
    01c2 : fba0 ; -- <0285> putasc " "
    01c3 : 0057 ; -- <0285> "
    01c4 : fc00 ; -- <0285> "
    01c5 : 000a ; -- <0286> a = soft_event
    01c6 : 0751 ; -- <0287> b = a<<1
    01c7 : 2a00 ; -- <0288> soft_event = 0
    01c8 : c800 ; -- <0289> soft_event = or
    01c9 : 2b34 ; -- <0289> "
    01ca : fba0 ; -- <0290> call :put4x
    01cb : 0102 ; -- <0290> "
    01cc : fc00 ; -- <0290> "
    01cd : 020d ; -- <0291> a = 13 -- puteol
    01ce : 0000 ; -- <0291> a = a -- puteol
    01cf : fba0 ; -- <0291> puteol
    01d0 : 0057 ; -- <0291> "
    01d1 : fc00 ; -- <0291> "
    01d2 : 020a ; -- <0291> a = 10 -- puteol
    01d3 : 0000 ; -- <0291> a = a -- puteol
    01d4 : fba0 ; -- <0291> puteol
    01d5 : 0057 ; -- <0291> "
    01d6 : fc00 ; -- <0291> "
    01d7 : e00f ; -- <0292> end_event
    01d8 : 0196 ; -- <0292> "

-- handle data here
    01d9 : e00f ; -- <0296> end_event
    01da : 0196 ; -- <0296> "

-- handle data here
    01db : e00f ; -- <0300> end_event
    01dc : 0196 ; -- <0300> "

-- handle data here
    01dd : e00f ; -- <0304> end_event
    01de : 0196 ; -- <0304> "

-- handle data here
    01df : e00f ; -- <0308> end_event
    01e0 : 0196 ; -- <0308> "

    01e1 : 2fa0 ; -- <0311> timer0 = $TICKS_PER_SEC
    01e2 : 02fb ; -- <0311> "
    01e3 : 5201 ; -- <0312> a = leds
    01e4 : 0013 ; -- <0312> "
    01e5 : 0601 ; -- <0313> b = 1
    01e6 : 5201 ; -- <0314> leds = a+b
    01e7 : 4f00 ; -- <0314> "
    01e8 : e00f ; -- <0315> end_event
    01e9 : 0196 ; -- <0315> "


        
        END;
    
