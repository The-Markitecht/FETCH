
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.


-- -- I/O expansion bus.
-- alias_both exp                  [incr counter]
-- alias_both exp_addr             [incr counter]
-- vdefine exp_num_regs 32
-- vdefine exp_top_reg ($exp_num_regs - 1)
-- setvar exp_counter -1

-- alias_src  keys                 [incr exp_counter]@exp
-- alias_both leds                 [incr exp_counter]@exp

-- alias_both anmux_ctrl           [incr exp_counter]@exp
-- vdefine     anmux_enable_mask       0x0008
-- vdefine     anmux_channel_mask      0x0007




-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- SETTING efi_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_20us NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 5000 RPM = about 140 jf between rising edges on chevy ignition white wire.
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.
-- setvar ign_history_quarter      ($ign_history_len / 4)
-- setvar ign_quarter_avg_shift    ($ign_history_idx_bits - 2)
-- ram_define ram_ign_oldest_avg_jf
-- ram_define ram_ign_newest_avg_jf

-- realtime counting.

-- text flag reporting.

-- error code constants.

    0000 : e00f ; -- <0167> jmp :main
    0001 : 01e2 ; -- <0167> "

    0002 : 001d ; -- <0169> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0169>   
    0004 : 2020 ; -- <0169>   
    0005 : 2020 ; -- <0169>   
    0006 : 6120 ; -- <0169> a 
-- "       b"
    0007 : 2020 ; -- <0169>   
    0008 : 2020 ; -- <0169>   
    0009 : 2020 ; -- <0169>   
    000a : 6220 ; -- <0169> b 
-- "       i"
    000b : 2020 ; -- <0169>   
    000c : 2020 ; -- <0169>   
    000d : 2020 ; -- <0169>   
    000e : 6920 ; -- <0169> i 
-- "       j"
    000f : 2020 ; -- <0169>   
    0010 : 2020 ; -- <0169>   
    0011 : 2020 ; -- <0169>   
    0012 : 6a20 ; -- <0169> j 
-- "       x"
    0013 : 2020 ; -- <0169>   
    0014 : 2020 ; -- <0169>   
    0015 : 2020 ; -- <0169>   
    0016 : 7820 ; -- <0169> x 
-- "       y"
    0017 : 2020 ; -- <0169>   
    0018 : 2020 ; -- <0169>   
    0019 : 2020 ; -- <0169>   
    001a : 7920 ; -- <0169> y 
-- "      g6"
    001b : 2020 ; -- <0169>   
    001c : 2020 ; -- <0169>   
    001d : 2020 ; -- <0169>   
    001e : 3667 ; -- <0169> 6g
-- "      g7"
    001f : 2020 ; -- <0169>   
    0020 : 2020 ; -- <0169>   
    0021 : 2020 ; -- <0169>   
    0022 : 3767 ; -- <0169> 7g
-- "--rstk  "
    0023 : 2f2f ; -- <0169> --
    0024 : 7372 ; -- <0169> sr
    0025 : 6b74 ; -- <0169> kt
    0026 : 2020 ; -- <0169>   
-- "  ev_pri"
    0027 : 2020 ; -- <0169>   
    0028 : 7665 ; -- <0169> ve
    0029 : 705f ; -- <0169> p_
    002a : 6972 ; -- <0169> ir
-- "softevnt"
    002b : 6f73 ; -- <0169> os
    002c : 7466 ; -- <0169> tf
    002d : 7665 ; -- <0169> ve
    002e : 746e ; -- <0169> tn
-- "   usage"
    002f : 2020 ; -- <0169>   
    0030 : 7520 ; -- <0169> u 
    0031 : 6173 ; -- <0169> as
    0032 : 6567 ; -- <0169> eg
-- "ustimer0"
    0033 : 7375 ; -- <0169> su
    0034 : 6974 ; -- <0169> it
    0035 : 656d ; -- <0169> em
    0036 : 3072 ; -- <0169> 0r
-- "mstimer0"
    0037 : 736d ; -- <0169> sm
    0038 : 6974 ; -- <0169> it
    0039 : 656d ; -- <0169> em
    003a : 3072 ; -- <0169> 0r
-- "mstimer1"
    003b : 736d ; -- <0169> sm
    003c : 6974 ; -- <0169> it
    003d : 656d ; -- <0169> em
    003e : 3172 ; -- <0169> 1r
-- "spi_data"
    003f : 7073 ; -- <0169> ps
    0040 : 5f69 ; -- <0169> _i
    0041 : 6164 ; -- <0169> ad
    0042 : 6174 ; -- <0169> at
-- "--avwrdt"
    0043 : 2f2f ; -- <0169> --
    0044 : 7661 ; -- <0169> va
    0045 : 7277 ; -- <0169> rw
    0046 : 7464 ; -- <0169> td
-- "av_rd_dt"
    0047 : 7661 ; -- <0169> va
    0048 : 725f ; -- <0169> r_
    0049 : 5f64 ; -- <0169> _d
    004a : 7464 ; -- <0169> td
-- "av_ad_hi"
    004b : 7661 ; -- <0169> va
    004c : 615f ; -- <0169> a_
    004d : 5f64 ; -- <0169> _d
    004e : 6968 ; -- <0169> ih
-- "av_ad_lo"
    004f : 7661 ; -- <0169> va
    0050 : 615f ; -- <0169> a_
    0051 : 5f64 ; -- <0169> _d
    0052 : 6f6c ; -- <0169> ol
-- "--uartdt"
    0053 : 2f2f ; -- <0169> --
    0054 : 6175 ; -- <0169> au
    0055 : 7472 ; -- <0169> tr
    0056 : 7464 ; -- <0169> td
-- "uartstat"
    0057 : 6175 ; -- <0169> au
    0058 : 7472 ; -- <0169> tr
    0059 : 7473 ; -- <0169> ts
    005a : 7461 ; -- <0169> ta
-- "    leds"
    005b : 2020 ; -- <0169>   
    005c : 2020 ; -- <0169>   
    005d : 656c ; -- <0169> el
    005e : 7364 ; -- <0169> sd
-- "brd_ctrl"
    005f : 7262 ; -- <0169> rb
    0060 : 5f64 ; -- <0169> _d
    0061 : 7463 ; -- <0169> tc
    0062 : 6c72 ; -- <0169> lr
-- "   anmux"
    0063 : 2020 ; -- <0169>   
    0064 : 6120 ; -- <0169> a 
    0065 : 6d6e ; -- <0169> mn
    0066 : 7875 ; -- <0169> xu
-- "pwr_duty"
    0067 : 7770 ; -- <0169> wp
    0068 : 5f72 ; -- <0169> _r
    0069 : 7564 ; -- <0169> ud
    006a : 7974 ; -- <0169> yt
-- "efilenus"
    006b : 6665 ; -- <0169> fe
    006c : 6c69 ; -- <0169> li
    006d : 6e65 ; -- <0169> ne
    006e : 7375 ; -- <0169> su
-- "igntmout"
    006f : 6769 ; -- <0169> gi
    0070 : 746e ; -- <0169> tn
    0071 : 6f6d ; -- <0169> om
    0072 : 7475 ; -- <0169> tu
-- "igntmcap"
    0073 : 6769 ; -- <0169> gi
    0074 : 746e ; -- <0169> tn
    0075 : 636d ; -- <0169> cm
    0076 : 7061 ; -- <0169> pa

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x0077
-- initialize prior to polling loop, for minimum latency.
    0077 : 07a0 ; -- <0006> b = :event_table
    0078 : 0211 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0079
    0079 : 0009 ; -- <0009> a = event_priority
    007a : e000 ; -- <0010> br 0z :poll_events_again
    007b : 0079 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    007c : 2400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    007d : d300 ; -- <0015> fetch rtna from ad0
    007e : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    007f : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0080 : 5ba0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0081 : ffc0 ; -- <0021> "
    0082 : e00f ; -- <0021> error_halt_code 0xffc0
    0083 : 0082 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x0084
    0084 : 2004 ; -- <0046> push x -- func putchar_fduart

    0085 : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    0086 : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x0087
    0087 : 0415 ; -- <0053> b = fduart_status
    0088 : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    0089 : 0087 ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    008a : 5004 ; -- <0057> fduart_data = x
    008b : 1008 ; -- <0058> pop x -- end_func
    008c : fc00 ; -- <0058> end_func

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x008d
-- wait until FIFO is populated.
    008d : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x008e
    008e : 0415 ; -- <0066> b = fduart_status
    008f : e403 ; -- <0067> bn and0z :wait_for_busy
    0090 : 008e ; -- <0067> "
    0091 : 0014 ; -- <0068> a = fduart_data
    0092 : fc00 ; -- <0069> end_func

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x0093
-- check for FIFO is populated.
    0093 : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    0094 : 0415 ; -- <0075> b = fduart_status
    0095 : e403 ; -- <0076> bn and0z :none
    0096 : 0099 ; -- <0076> "
    0097 : 0014 ; -- <0077> a = fduart_data
    0098 : fc00 ; -- <0078> rtn
-- :none -- = 0x0099
    0099 : 0360 ; -- <0080> a = -1
    009a : fc00 ; -- <0081> end_func


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x009b
-- set & enable analog muxer
    009b : 0608 ; -- <0007> b = $anmux_enable_mask
    009c : c800 ; -- <0008> anmux_ctrl = or
    009d : 6334 ; -- <0008> "
    009e : fc00 ; -- <0009> end_func

-- ######## func anmux_get_chn -- = 0x009f
    009f : 0018 ; -- <0012> a = anmux_ctrl
    00a0 : 0607 ; -- <0013> b = $anmux_channel_mask
    00a1 : c800 ; -- <0014> a = and
    00a2 : 0330 ; -- <0014> "
    00a3 : fc00 ; -- <0015> end_func


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00a4
-- "0123456789abcdef"
    00a4 : 3130 ; -- <0050> 10
    00a5 : 3332 ; -- <0050> 32
    00a6 : 3534 ; -- <0050> 54
    00a7 : 3736 ; -- <0050> 76
    00a8 : 3938 ; -- <0050> 98
    00a9 : 6261 ; -- <0050> ba
    00aa : 6463 ; -- <0050> dc
    00ab : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00ac
    00ac : 2004 ; -- <0054> push x -- func put4x
    00ad : 2006 ; -- <0054> push g6 -- "
    00ae : 203e ; -- <0054> push rtna -- "
    00af : 13a0 ; -- <0055> x = :hexdigits
    00b0 : 00a4 ; -- <0055> "

    00b1 : 1800 ; -- <0057> g6 = a
    00b2 : 07a0 ; -- <0058> b = 0xF000
    00b3 : f000 ; -- <0058> "
    00b4 : c800 ; -- <0059> a = and
    00b5 : 0330 ; -- <0059> "
    00b6 : 0353 ; -- <0060> a = a>>4
    00b7 : 0353 ; -- <0061> a = a>>4
    00b8 : 0353 ; -- <0062> a = a>>4
    00b9 : fba0 ; -- <0063> call fetch_byte
    00ba : 019e ; -- <0063> "
    00bb : fc00 ; -- <0063> "
    00bc : fba0 ; -- <0064> putchar a
    00bd : 0084 ; -- <0064> "
    00be : fc00 ; -- <0064> "

    00bf : 0006 ; -- <0066> a = g6
    00c0 : 07a0 ; -- <0067> b = 0x0F00
    00c1 : 0f00 ; -- <0067> "
    00c2 : c800 ; -- <0068> a = and
    00c3 : 0330 ; -- <0068> "
    00c4 : 0353 ; -- <0069> a = a>>4
    00c5 : 0353 ; -- <0070> a = a>>4
    00c6 : fba0 ; -- <0071> call fetch_byte
    00c7 : 019e ; -- <0071> "
    00c8 : fc00 ; -- <0071> "
    00c9 : fba0 ; -- <0072> putchar a
    00ca : 0084 ; -- <0072> "
    00cb : fc00 ; -- <0072> "

    00cc : 0006 ; -- <0074> a = g6
    00cd : 06f0 ; -- <0075> b = 0x00F0
    00ce : c800 ; -- <0076> a = and
    00cf : 0330 ; -- <0076> "
    00d0 : 0353 ; -- <0077> a = a>>4
    00d1 : fba0 ; -- <0078> call fetch_byte
    00d2 : 019e ; -- <0078> "
    00d3 : fc00 ; -- <0078> "
    00d4 : fba0 ; -- <0079> putchar a
    00d5 : 0084 ; -- <0079> "
    00d6 : fc00 ; -- <0079> "

    00d7 : 0006 ; -- <0081> a = g6
    00d8 : 060f ; -- <0082> b = 0x000F
    00d9 : c800 ; -- <0083> a = and
    00da : 0330 ; -- <0083> "
    00db : fba0 ; -- <0084> call fetch_byte
    00dc : 019e ; -- <0084> "
    00dd : fc00 ; -- <0084> "
    00de : fba0 ; -- <0085> putchar a
    00df : 0084 ; -- <0085> "
    00e0 : fc00 ; -- <0085> "

    00e1 : f808 ; -- <0087> pop rtna -- end_func
    00e2 : 1808 ; -- <0087> pop g6 -- "
    00e3 : 1008 ; -- <0087> pop x -- "
    00e4 : fc00 ; -- <0087> end_func

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00e5
    00e5 : 2002 ; -- <0091> push i -- func get4x
    00e6 : 2003 ; -- <0091> push j -- "
    00e7 : 2004 ; -- <0091> push x -- "
    00e8 : 2005 ; -- <0091> push y -- "
    00e9 : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    00ea : 1604 ; -- <0094> y = 4
-- :again -- = 0x00eb
    00eb : fba0 ; -- <0096> getchar
    00ec : 008d ; -- <0096> "
    00ed : fc00 ; -- <0096> "
    00ee : 13a0 ; -- <0097> x = :hexdigits
    00ef : 00a4 ; -- <0097> "
    00f0 : 0a10 ; -- <0098> i = 16
    00f1 : fba0 ; -- <0099> call :find_in_fetch
    00f2 : 01b2 ; -- <0099> "
    00f3 : fc00 ; -- <0099> "
    00f4 : 0760 ; -- <0100> b = -1
    00f5 : e007 ; -- <0101> br eq :fail
    00f6 : 010a ; -- <0101> "
    00f7 : 0400 ; -- <0102> b = a
    00f8 : 0003 ; -- <0103> a = j
    00f9 : 0352 ; -- <0104> a = a<<4
    00fa : c800 ; -- <0105> j = or
    00fb : 0f34 ; -- <0105> "
    00fc : 1360 ; -- <0106> x = -1
    00fd : c800 ; -- <0107> y = x+y
    00fe : 1720 ; -- <0107> "
    00ff : 0005 ; -- <0108> a = y
    0100 : e400 ; -- <0109> bn az :again
    0101 : 00eb ; -- <0109> "
    0102 : 0003 ; -- <0110> a = j
    0103 : 0600 ; -- <0111> b = 0
    0104 : f808 ; -- <0112> pop rtna -- rtn
    0105 : 1408 ; -- <0112> pop y -- "
    0106 : 1008 ; -- <0112> pop x -- "
    0107 : 0c08 ; -- <0112> pop j -- "
    0108 : 0808 ; -- <0112> pop i -- "
    0109 : fc00 ; -- <0112> rtn
-- :fail -- = 0x010a
    010a : 0760 ; -- <0114> b = -1
    010b : f808 ; -- <0115> pop rtna -- end_func
    010c : 1408 ; -- <0115> pop y -- "
    010d : 1008 ; -- <0115> pop x -- "
    010e : 0c08 ; -- <0115> pop j -- "
    010f : 0808 ; -- <0115> pop i -- "
    0110 : fc00 ; -- <0115> end_func

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x0111
    0111 : 2002 ; -- <0121> push i -- func print_nt
    0112 : 2003 ; -- <0121> push j -- "
    0113 : 2004 ; -- <0121> push x -- "
    0114 : 203e ; -- <0121> push rtna -- "
    0115 : 0800 ; -- <0122> i = a
    0116 : 0e01 ; -- <0123> j = 1
-- :next_word -- = 0x0117
    0117 : d002 ; -- <0125> fetch x from i
    0118 : 13b0 ; -- <0125> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0119 : 0004 ; -- <0127> a = x
    011a : 06ff ; -- <0128> b = 0xff
    011b : e003 ; -- <0129> br and0z :done
    011c : 012d ; -- <0129> "
    011d : fba0 ; -- <0130> putchar a
    011e : 0084 ; -- <0130> "
    011f : fc00 ; -- <0130> "
    0120 : 0004 ; -- <0131> a = x
    0121 : 0353 ; -- <0132> a = a>>4
    0122 : 0353 ; -- <0133> a = a>>4
    0123 : 06ff ; -- <0134> b = 0xff
    0124 : e003 ; -- <0135> br and0z :done
    0125 : 012d ; -- <0135> "
    0126 : fba0 ; -- <0136> putchar a
    0127 : 0084 ; -- <0136> "
    0128 : fc00 ; -- <0136> "
    0129 : c800 ; -- <0137> i = i+j
    012a : 0b10 ; -- <0137> "
    012b : e00f ; -- <0138> jmp :next_word
    012c : 0117 ; -- <0138> "
-- :done -- = 0x012d
    012d : f808 ; -- <0140> pop rtna -- end_func
    012e : 1008 ; -- <0140> pop x -- "
    012f : 0c08 ; -- <0140> pop j -- "
    0130 : 0808 ; -- <0140> pop i -- "
    0131 : fc00 ; -- <0140> end_func

-- function library for simple integer math.

-- ######## func multiply -- = 0x0132
    0132 : 2002 ; -- <0004> push i -- func multiply
    0133 : 2003 ; -- <0004> push j -- "
    0134 : 2004 ; -- <0004> push x -- "
    0135 : 2005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0136 : 1000 ; -- <0009> x = a
    0137 : 1401 ; -- <0010> y = b
    0138 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0139
    0139 : e002 ; -- <0013> br xz :done
    013a : 0148 ; -- <0013> "
    013b : 0004 ; -- <0014> a = x
    013c : 0601 ; -- <0015> b = 1
    013d : e003 ; -- <0016> br and0z :skip_add
    013e : 0142 ; -- <0016> "
    013f : 0c05 ; -- <0017> j = y
    0140 : c800 ; -- <0018> i = i+j
    0141 : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0142
    0142 : 0004 ; -- <0020> a = x
    0143 : 1350 ; -- <0021> x = a>>1
    0144 : 0005 ; -- <0022> a = y
    0145 : 1751 ; -- <0023> y = a<<1
    0146 : e00f ; -- <0024> jmp :again
    0147 : 0139 ; -- <0024> "
-- :done -- = 0x0148
    0148 : 0002 ; -- <0026> a = i
    0149 : 1408 ; -- <0027> pop y -- end_func
    014a : 1008 ; -- <0027> pop x -- "
    014b : 0c08 ; -- <0027> pop j -- "
    014c : 0808 ; -- <0027> pop i -- "
    014d : fc00 ; -- <0027> end_func

-- ######## func divide -- = 0x014e
    014e : 2002 ; -- <0029> push i -- func divide
    014f : 2003 ; -- <0029> push j -- "
    0150 : 2004 ; -- <0029> push x -- "
    0151 : 2005 ; -- <0029> push y -- "
    0152 : 2006 ; -- <0029> push g6 -- "
    0153 : 2007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0154 : e005 ; -- <0037> br lt :zero
    0155 : 018f ; -- <0037> "
    0156 : e000 ; -- <0038> br az :zero
    0157 : 018f ; -- <0038> "
    0158 : 1000 ; -- <0039> x = a
--    g7 = x
    0159 : 0001 ; -- <0041> a = b
    015a : e000 ; -- <0042> br az :zero
    015b : 018f ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    015c : 0404 ; -- <0058> b = x
    015d : 0a00 ; -- <0059> i = 0
    015e : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x015f
    015f : e006 ; -- <0062> br gt :shift_done
    0160 : 0165 ; -- <0062> "
    0161 : 0351 ; -- <0063> a = a<<1
    0162 : 0b10 ; -- <0064> i = ad1
    0163 : e00f ; -- <0065> jmp :shift_again
    0164 : 015f ; -- <0065> "
-- :shift_done -- = 0x0165
    0165 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    0166 : 1e00 ; -- <0078> g7 = 0
    0167 : 0f60 ; -- <0079> j = -1
-- :again -- = 0x0168
    0168 : e001 ; -- <0081> br iz :done
    0169 : 0186 ; -- <0081> "
    016a : 0006 ; -- <0082> a = g6
    016b : 0404 ; -- <0083> b = x
    016c : e006 ; -- <0084> br gt :result0
    016d : 017e ; -- <0084> "
-- temp does fit; output a 1.
    016e : 0007 ; -- <0086> a = g7
    016f : 0351 ; -- <0087> a = a<<1
    0170 : 0601 ; -- <0088> b = 1
    0171 : c800 ; -- <0089> g7 = or
    0172 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    0173 : 0006 ; -- <0091> a = g6
    0174 : 0760 ; -- <0092> b = -1
    0175 : c800 ; -- <0093> a = xor
    0176 : 0338 ; -- <0093> "
    0177 : 0601 ; -- <0094> b = 1
    0178 : c800 ; -- <0095> y = a+b
    0179 : 1700 ; -- <0095> "
    017a : c800 ; -- <0096> x = x+y
    017b : 1320 ; -- <0096> "
    017c : e00f ; -- <0097> jmp :next
    017d : 0180 ; -- <0097> "
-- :result0 -- = 0x017e
-- temp does not fit; output a 0.
    017e : 0007 ; -- <0100> a = g7
    017f : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x0180
    0180 : 0006 ; -- <0104> a = g6
    0181 : 1b50 ; -- <0105> g6 = a>>1
    0182 : c800 ; -- <0106> i = i+j
    0183 : 0b10 ; -- <0106> "
    0184 : e00f ; -- <0107> jmp :again
    0185 : 0168 ; -- <0107> "

-- :done -- = 0x0186
    0186 : 0407 ; -- <0110> b = g7
    0187 : 0004 ; -- <0111> a = x
    0188 : 1c08 ; -- <0112> pop g7 -- rtn
    0189 : 1808 ; -- <0112> pop g6 -- "
    018a : 1408 ; -- <0112> pop y -- "
    018b : 1008 ; -- <0112> pop x -- "
    018c : 0c08 ; -- <0112> pop j -- "
    018d : 0808 ; -- <0112> pop i -- "
    018e : fc00 ; -- <0112> rtn

-- :zero -- = 0x018f
    018f : 0600 ; -- <0115> b = 0
    0190 : 1c08 ; -- <0116> pop g7 -- rtn
    0191 : 1808 ; -- <0116> pop g6 -- "
    0192 : 1408 ; -- <0116> pop y -- "
    0193 : 1008 ; -- <0116> pop x -- "
    0194 : 0c08 ; -- <0116> pop j -- "
    0195 : 0808 ; -- <0116> pop i -- "
    0196 : fc00 ; -- <0116> rtn
    0197 : 1c08 ; -- <0117> pop g7 -- end_func
    0198 : 1808 ; -- <0117> pop g6 -- "
    0199 : 1408 ; -- <0117> pop y -- "
    019a : 1008 ; -- <0117> pop x -- "
    019b : 0c08 ; -- <0117> pop j -- "
    019c : 0808 ; -- <0117> pop i -- "
    019d : fc00 ; -- <0117> end_func


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x019e
    019e : 0601 ; -- <0005> b = 1
    019f : e003 ; -- <0006> br and0z :pick_byte_even
    01a0 : 01a9 ; -- <0006> "
    01a1 : 0350 ; -- <0007> a = a>>1
    01a2 : 0404 ; -- <0008> b = x
    01a3 : c800 ; -- <0009> fetch a from a+b
    01a4 : d300 ; -- <0009> "
    01a5 : 03b0 ; -- <0009> "
    01a6 : 0353 ; -- <0010> a = a>>4
    01a7 : 0353 ; -- <0011> a = a>>4
    01a8 : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x01a9
    01a9 : 0350 ; -- <0014> a = a>>1
    01aa : 0404 ; -- <0015> b = x
    01ab : c800 ; -- <0016> fetch a from a+b
    01ac : d300 ; -- <0016> "
    01ad : 03b0 ; -- <0016> "
    01ae : 06ff ; -- <0017> b = 0xff
    01af : c800 ; -- <0018> a = and
    01b0 : 0330 ; -- <0018> "
    01b1 : fc00 ; -- <0019> end_func

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01b2
    01b2 : 2002 ; -- <0027> push i -- func find_in_fetch
    01b3 : 2003 ; -- <0027> push j -- "
    01b4 : 2005 ; -- <0027> push y -- "
    01b5 : 203e ; -- <0027> push rtna -- "
    01b6 : 1400 ; -- <0028> y = a
    01b7 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01b8
    01b8 : e001 ; -- <0031> br iz :fail
    01b9 : 01c8 ; -- <0031> "
    01ba : 0b10 ; -- <0032> i = ad1
    01bb : 0002 ; -- <0033> a = i
    01bc : fba0 ; -- <0034> call :fetch_byte
    01bd : 019e ; -- <0034> "
    01be : fc00 ; -- <0034> "
    01bf : 0405 ; -- <0035> b = y
    01c0 : e407 ; -- <0036> bn eq :again
    01c1 : 01b8 ; -- <0036> "
-- :found -- = 0x01c2
    01c2 : 0002 ; -- <0038> a = i
    01c3 : f808 ; -- <0039> pop rtna -- rtn
    01c4 : 1408 ; -- <0039> pop y -- "
    01c5 : 0c08 ; -- <0039> pop j -- "
    01c6 : 0808 ; -- <0039> pop i -- "
    01c7 : fc00 ; -- <0039> rtn
-- :fail -- = 0x01c8
    01c8 : 0360 ; -- <0041> a = -1
    01c9 : f808 ; -- <0042> pop rtna -- end_func
    01ca : 1408 ; -- <0042> pop y -- "
    01cb : 0c08 ; -- <0042> pop j -- "
    01cc : 0808 ; -- <0042> pop i -- "
    01cd : fc00 ; -- <0042> end_func


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x01ce
    01ce : 2004 ; -- <0002> push x -- func spinwait
    01cf : 2005 ; -- <0002> push y -- "
--patch
--rtn
    01d0 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x01d1
    01d1 : 13a0 ; -- <0007> x = 16666
    01d2 : 411a ; -- <0007> "
    01d3 : 1760 ; -- <0008> y = -1
    01d4 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x01d5
-- use of the ad2 name overrides auto-nop here.
    01d5 : 1320 ; -- <0012> x = ad2
    01d6 : e402 ; -- <0013> bn xz :spinwait_inner
    01d7 : 01d5 ; -- <0013> "
    01d8 : c800 ; -- <0014> a = a+b
    01d9 : 0300 ; -- <0014> "
    01da : e400 ; -- <0015> bn az :spinwait_outer
    01db : 01d1 ; -- <0015> "
    01dc : 1408 ; -- <0016> pop y -- end_func
    01dd : 1008 ; -- <0016> pop x -- "
    01de : fc00 ; -- <0016> end_func



-- string resources
-- :boot_msg -- = 0x01df
-- "TGT\r\n\x0"
    01df : 4754 ; -- <0183> GT
    01e0 : 0d54 ; -- <0183>  T
    01e1 : 000a ; -- <0183>   

-- #########################################################################
-- :main -- = 0x01e2
    01e2 : 03a0 ; -- <0187> a = :boot_msg
    01e3 : 01df ; -- <0187> "
    01e4 : fba0 ; -- <0188> call :print_nt
    01e5 : 0111 ; -- <0188> "
    01e6 : fc00 ; -- <0188> "

-- clear the first 64k of RAM.
    01e7 : 4a00 ; -- <0191> av_ad_hi = 0
    01e8 : 0200 ; -- <0192> a = 0
    01e9 : 0602 ; -- <0193> b = 2
-- :clear_next_word -- = 0x01ea
    01ea : 4c00 ; -- <0195> av_ad_lo = a
    01eb : 4200 ; -- <0196> av_write_data = 0
    01ec : 0300 ; -- <0197> a = ad0
    01ed : e400 ; -- <0198> bn az :clear_next_word
    01ee : 01ea ; -- <0198> "

-- init RAM variables.
    01ef : 4a00 ; -- <0201> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    01f0 : 4e08 ; -- <0201> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 8
    01f1 : 4360 ; -- <0201> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    01f2 : 4a00 ; -- <0202> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    01f3 : 4e0a ; -- <0202> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 10
    01f4 : 4202 ; -- <0202> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- init fuel injection.
    01f5 : 6fa0 ; -- <0205> ign_timeout_len_20us = 0xfffc
    01f6 : fffc ; -- <0205> "
    01f7 : 6ba0 ; -- <0206> efi_len_us = 3000
    01f8 : 0bb8 ; -- <0206> "
    01f9 : fba0 ; -- <0207> call :set_engine_stopped
    01fa : 0227 ; -- <0207> "
    01fb : fc00 ; -- <0207> "

-- power up FTDI USB board, and init any other special board control functions.
    01fc : 5e80 ; -- <0210> board_ctrl = $ftdi_power_mask
    01fd : fba0 ; -- <0211> call :postpone_comm_restart
    01fe : 0411 ; -- <0211> "
    01ff : fc00 ; -- <0211> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    0200 : 6600 ; -- <0218> power_duty = $power_duty_closing
    0201 : 0019 ; -- <0219> a = power_duty
    0202 : 06c0 ; -- <0220> b = ($power_lost_mask | $ign_switch_off_mask)
    0203 : e003 ; -- <0221> br and0z :skip_power_lost
    0204 : 020a ; -- <0221> "
    0205 : 6632 ; -- <0222> power_duty = $power_duty_opening
    0206 : 5ba0 ; -- <0223> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    0207 : fffb ; -- <0223> "
    0208 : e00f ; -- <0223> error_halt_code $err_power_lost_at_boot
    0209 : 0208 ; -- <0223> "
-- :skip_power_lost -- = 0x020a

-- start handling events.
    020a : 2ba0 ; -- <0227> soft_event = $event_controller_reset_mask
    020b : 8000 ; -- <0227> "
    020c : 2a00 ; -- <0228> soft_event = 0
    020d : 37a0 ; -- <0229> mstimer0 = 1000
    020e : 03e8 ; -- <0229> "
    020f : e00f ; -- <0230> jmp :poll_events
    0210 : 0077 ; -- <0230> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x0211
    0211 : 0077 ; -- <0235> ([label :poll_events])
    0212 : 0373 ; -- <0236> ([label :power_lost_handler])
    0213 : 023d ; -- <0237> ([label :ign_captured_handler])
    0214 : 03a2 ; -- <0238> ([label :puff1_done_handler])
    0215 : 0283 ; -- <0239> ([label :ustimer0_handler])
    0216 : 0285 ; -- <0240> ([label :spi_done_handler])
    0217 : 02b9 ; -- <0241> ([label :mstimer0_handler])
    0218 : 02e4 ; -- <0242> ([label :mstimer1_handler])
    0219 : 0302 ; -- <0243> ([label :uart_rx_handler])
    021a : 0312 ; -- <0244> ([label :uart_rx_overflow_handler])
    021b : 0318 ; -- <0245> ([label :uart_tx_overflow_handler])
    021c : 031e ; -- <0246> ([label :key0_handler])
    021d : 0328 ; -- <0247> ([label :key1_handler])
    021e : 0385 ; -- <0248> ([label :ign_switch_off_handler])
    021f : 0398 ; -- <0249> ([label :ign_switch_on_handler])
    0220 : 0332 ; -- <0250> ([label :softevent3_handler])
    0221 : 0334 ; -- <0251> ([label :softevent2_handler])
    0222 : 0336 ; -- <0252> ([label :softevent1_handler])
    0223 : 0338 ; -- <0253> ([label :softevent0_handler])

-- #########################################################################

-- :engine_stopped_msg -- = 0x0224
-- "ESTP\x0"
    0224 : 5345 ; -- <0258> SE
    0225 : 5054 ; -- <0258> PT
    0226 : 0000 ; -- <0258>   

-- ######## func set_engine_stopped -- = 0x0227
    0227 : 203e ; -- <0260> push rtna -- func set_engine_stopped
    0228 : 4a00 ; -- <0261> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    0229 : 4e32 ; -- <0261> ram $ram_rpm_valid = 0 -- av_ad_lo = 50
    022a : 4200 ; -- <0261> ram $ram_rpm_valid = 0 -- av_write_data = 0
    022b : 4a00 ; -- <0262> ram $ram_ign_history_idx = 0 -- av_ad_hi = 0
    022c : 4e0c ; -- <0262> ram $ram_ign_history_idx = 0 -- av_ad_lo = 12
    022d : 4200 ; -- <0262> ram $ram_ign_history_idx = 0 -- av_write_data = 0
-- for startup, look for RPM between 50 and 1160
    022e : 4a00 ; -- <0264> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    022f : 4e34 ; -- <0264> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 52
    0230 : 43a0 ; -- <0264> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    0231 : 025b ; -- <0264> "
    0232 : 4a00 ; -- <0265> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0233 : 4e36 ; -- <0265> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 54
    0234 : 43a0 ; -- <0265> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    0235 : 36b0 ; -- <0265> "

    0236 : 03a0 ; -- <0267> a = :engine_stopped_msg
    0237 : 0224 ; -- <0267> "
    0238 : fba0 ; -- <0268> call :set_text_flag
    0239 : 043a ; -- <0268> "
    023a : fc00 ; -- <0268> "
    023b : f808 ; -- <0269> pop rtna -- end_func
    023c : fc00 ; -- <0269> end_func

-- func wrap_history_idx
-- :again
-- b = $ign_history_len
-- br lt :done
-- b = ([negate $ign_history_len])
-- a = a+b
-- jmp :again
-- :done
-- end_func

-- ######## event ign_captured_handler -- = 0x023d
-- discard outlier time.
    023d : 001c ; -- <0283> a = ign_capture_jf
    023e : 4a00 ; -- <0284> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    023f : 4e34 ; -- <0284> ram b = $ram_ign_fastest_jf -- av_ad_lo = 52
    0240 : 0410 ; -- <0284> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    0241 : 0411 ; -- <0284> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle
    0242 : e005 ; -- <0285> br lt :done
    0243 : 0310 ; -- <0285> "
    0244 : 4a00 ; -- <0286> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    0245 : 4e36 ; -- <0286> ram b = $ram_ign_slowest_jf -- av_ad_lo = 54
    0246 : 0410 ; -- <0286> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    0247 : 0411 ; -- <0286> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle
    0248 : e006 ; -- <0287> br gt :done
    0249 : 0310 ; -- <0287> "

-- increment buffer index and memorize time.
    024a : 4a00 ; -- <0290> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    024b : 4e0c ; -- <0290> ram a = $ram_ign_history_idx -- av_ad_lo = 12
    024c : 0010 ; -- <0290> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    024d : 0011 ; -- <0290> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    024e : 0601 ; -- <0291> b = 1
    024f : c800 ; -- <0292> a = a+b
    0250 : 0300 ; -- <0292> "
    0251 : 060f ; -- <0293> b = $ign_history_idx_mask
    0252 : c800 ; -- <0294> a = and
    0253 : 0330 ; -- <0294> "
    0254 : e400 ; -- <0295> bn az :no_wrap
    0255 : 0259 ; -- <0295> "
-- history buffer is full now.  average will be valid.
    0256 : 4a00 ; -- <0297> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    0257 : 4e32 ; -- <0297> ram $ram_rpm_valid = 1 -- av_ad_lo = 50
    0258 : 4201 ; -- <0297> ram $ram_rpm_valid = 1 -- av_write_data = 1
-- :no_wrap -- = 0x0259
    0259 : 4a00 ; -- <0299> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    025a : 4e0c ; -- <0299> ram $ram_ign_history_idx = a -- av_ad_lo = 12
    025b : 4000 ; -- <0299> ram $ram_ign_history_idx = a -- av_write_data = a
    025c : 2000 ; -- <0300> push a -- struct_write $ram_ign_history_jf a = ign_capture_jf
    025d : 2001 ; -- <0300> push b -- struct_write $ram_ign_history_jf a = ign_capture_jf
    025e : 0400 ; -- <0300> struct_write $ram_ign_history_jf a = ign_capture_jf
    025f : 020e ; -- <0300> struct_write $ram_ign_history_jf a = ign_capture_jf
    0260 : 4a00 ; -- <0300> struct_write $ram_ign_history_jf a = ign_capture_jf -- av_ad_hi = 0
    0261 : 4f00 ; -- <0300> struct_write $ram_ign_history_jf a = ign_capture_jf -- av_ad_lo = 14 + a
    0262 : 401c ; -- <0300> struct_write $ram_ign_history_jf a = ign_capture_jf -- av_write_data = ign_capture_jf
    0263 : 0408 ; -- <0300> pop b -- struct_write $ram_ign_history_jf a = ign_capture_jf
    0264 : 0008 ; -- <0300> pop a -- struct_write $ram_ign_history_jf a = ign_capture_jf

-- ---------- compute new jiffy estimate.

-- -- first, total up the oldest 25% of the history
-- -- this doesn't work above 2^14 jf.  that's below 44 RPM.
-- -- reg a must be already loaded with the history index most recently written.
-- -- a=index, i=total, x=loop count.
-- i = 0
-- x = $ign_history_quarter
-- y = -1
-- :next_oldest
-- b = 1
-- a = a+b
-- b = $ign_history_idx_mask
-- a = and
-- struct_read j = $ram_ign_history_jf a
-- i = i+j
-- x = x+y
-- bn xz :next_oldest
-- -- memorize average.
-- a = i
-- << for {set n 0} {$n < $ign_avg_shift} {incr n} {parse3 a = a>>1 {}} >>
-- ram $ram_ign_oldest_avg_jf = a

-- average entire history.
-- b = total, i = index = loop count
    0265 : 0600 ; -- <0327> b = 0
    0266 : 0a10 ; -- <0328> i = $ign_history_len
    0267 : 0f60 ; -- <0329> j = -1
-- :next_avg -- = 0x0268
    0268 : 2001 ; -- <0331> push b -- struct_read a = $ram_ign_history_jf i
    0269 : 0402 ; -- <0331> struct_read a = $ram_ign_history_jf i
    026a : 020e ; -- <0331> struct_read a = $ram_ign_history_jf i
    026b : 4a00 ; -- <0331> struct_read a = $ram_ign_history_jf i -- av_ad_hi = 0
    026c : 4f00 ; -- <0331> struct_read a = $ram_ign_history_jf i -- av_ad_lo = 14 + i
    026d : 0010 ; -- <0331> struct_read a = $ram_ign_history_jf i -- a = av_write_data
    026e : 0011 ; -- <0331> struct_read a = $ram_ign_history_jf i -- a = av_read_data
    026f : 0408 ; -- <0331> pop b -- struct_read a = $ram_ign_history_jf i
    0270 : 0353 ; -- <0332> a = a>>$ign_history_idx_bits
    0271 : c800 ; -- <0333> b = a+b
    0272 : 0700 ; -- <0333> "
    0273 : c800 ; -- <0334> i = i+j
    0274 : 0b10 ; -- <0334> "
    0275 : e401 ; -- <0335> bn iz :next_avg
    0276 : 0268 ; -- <0335> "
    0277 : 4a00 ; -- <0336> ram $ram_ign_avg_jf = b -- av_ad_hi = 0
    0278 : 4e2e ; -- <0336> ram $ram_ign_avg_jf = b -- av_ad_lo = 46
    0279 : 4001 ; -- <0336> ram $ram_ign_avg_jf = b -- av_write_data = b

-- convert jiffies b to new RPM estimate.
    027a : 0001 ; -- <0339> a = b
    027b : fba0 ; -- <0340> call :jf_to_rpm
    027c : 0477 ; -- <0340> "
    027d : fc00 ; -- <0340> "
    027e : 4a00 ; -- <0341> ram $ram_avg_rpm = a -- av_ad_hi = 0
    027f : 4e30 ; -- <0341> ram $ram_avg_rpm = a -- av_ad_lo = 48
    0280 : 4000 ; -- <0341> ram $ram_avg_rpm = a -- av_write_data = a

-- :done -- = 0x0281
    0281 : e00f ; -- <0344> end_event
    0282 : 0077 ; -- <0344> "

-- ######## event ustimer0_handler -- = 0x0283
    0283 : e00f ; -- <0347> end_event
    0284 : 0077 ; -- <0347> "

-- ######## event spi_done_handler -- = 0x0285
-- discard-counter in RAM.
    0285 : 4a00 ; -- <0351> ram a = $ram_daq_discard_cnt -- av_ad_hi = 0
    0286 : 4e06 ; -- <0351> ram a = $ram_daq_discard_cnt -- av_ad_lo = 6
    0287 : 0010 ; -- <0351> ram a = $ram_daq_discard_cnt -- a = av_write_data -- start read cycle
    0288 : 0011 ; -- <0351> ram a = $ram_daq_discard_cnt -- a = av_read_data -- finish read cycle
    0289 : e000 ; -- <0352> br az :report
    028a : 0297 ; -- <0352> "
    028b : 0760 ; -- <0353> b = -1
    028c : c800 ; -- <0354> a = a+b
    028d : 0300 ; -- <0354> "
    028e : 4a00 ; -- <0355> ram $ram_daq_discard_cnt = a -- av_ad_hi = 0
    028f : 4e06 ; -- <0355> ram $ram_daq_discard_cnt = a -- av_ad_lo = 6
    0290 : 4000 ; -- <0355> ram $ram_daq_discard_cnt = a -- av_write_data = a
    0291 : 0207 ; -- <0356> a = $anmux_adc_channel
    0292 : fba0 ; -- <0357> call :begin_adc_conversion
    0293 : 036c ; -- <0357> "
    0294 : fc00 ; -- <0357> "
    0295 : e00f ; -- <0358> event_return
    0296 : 0077 ; -- <0358> "

-- report ADC reading.
-- :report -- = 0x0297
    0297 : 000f ; -- <0362> a = spi_data
    0298 : fba0 ; -- <0363> call :put4x
    0299 : 00ac ; -- <0363> "
    029a : fc00 ; -- <0363> "

-- decrement anmux channel & start waiting again.
    029b : fba0 ; -- <0366> call :anmux_get_chn
    029c : 009f ; -- <0366> "
    029d : fc00 ; -- <0366> "
    029e : e000 ; -- <0367> br az :all_done
    029f : 02a9 ; -- <0367> "
    02a0 : 0760 ; -- <0368> b = -1
    02a1 : c800 ; -- <0369> a = a+b
    02a2 : 0300 ; -- <0369> "
    02a3 : fba0 ; -- <0370> call :anmux_set_chn
    02a4 : 009b ; -- <0370> "
    02a5 : fc00 ; -- <0370> "
    02a6 : 3a05 ; -- <0371> mstimer1 = $anmux_settle_ms
    02a7 : e00f ; -- <0372> event_return
    02a8 : 0077 ; -- <0372> "

-- end of daq pass.
-- :all_done -- = 0x02a9
    02a9 : fba0 ; -- <0376> call :report_text_flags
    02aa : 0450 ; -- <0376> "
    02ab : fc00 ; -- <0376> "
    02ac : 020d ; -- <0377> a = 13 -- puteol
    02ad : fba0 ; -- <0377> puteol
    02ae : 0084 ; -- <0377> "
    02af : fc00 ; -- <0377> "
    02b0 : 020a ; -- <0377> a = 10 -- puteol
    02b1 : fba0 ; -- <0377> puteol
    02b2 : 0084 ; -- <0377> "
    02b3 : fc00 ; -- <0377> "
    02b4 : 4a00 ; -- <0378> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    02b5 : 4e3e ; -- <0378> ram $ram_dial_setting = spi_data -- av_ad_lo = 62
    02b6 : 400f ; -- <0378> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    02b7 : e00f ; -- <0379> end_event
    02b8 : 0077 ; -- <0379> "

-- ######## event mstimer0_handler -- = 0x02b9
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    02b9 : 37a0 ; -- <0385> mstimer0 = 1000
    02ba : 03e8 ; -- <0385> "

-- realtime counters in RAM.
    02bb : 4a00 ; -- <0388> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    02bc : 4e3a ; -- <0388> ram a = $ram_seconds_cnt -- av_ad_lo = 58
    02bd : 0010 ; -- <0388> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    02be : 0011 ; -- <0388> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    02bf : 0601 ; -- <0389> b = 1
    02c0 : c800 ; -- <0390> a = a+b
    02c1 : 0300 ; -- <0390> "
    02c2 : 063c ; -- <0391> b = 60
    02c3 : e407 ; -- <0392> bn eq :same_minute
    02c4 : 02d6 ; -- <0392> "
    02c5 : 4a00 ; -- <0393> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    02c6 : 4e3a ; -- <0393> ram $ram_seconds_cnt = 0 -- av_ad_lo = 58
    02c7 : 4200 ; -- <0393> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    02c8 : 4a00 ; -- <0394> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    02c9 : 4e38 ; -- <0394> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    02ca : 0010 ; -- <0394> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    02cb : 0011 ; -- <0394> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    02cc : 0601 ; -- <0395> b = 1
    02cd : 4a00 ; -- <0396> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    02ce : 4e38 ; -- <0396> ram $ram_minutes_cnt = a+b -- av_ad_lo = 56
    02cf : c800 ; -- <0396> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    02d0 : 4300 ; -- <0396> "
    02d1 : fba0 ; -- <0397> call :minute_events
    02d2 : 03af ; -- <0397> "
    02d3 : fc00 ; -- <0397> "
    02d4 : e00f ; -- <0398> jmp :minutes_done
    02d5 : 02d9 ; -- <0398> "
-- :same_minute -- = 0x02d6
    02d6 : 4a00 ; -- <0400> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    02d7 : 4e3a ; -- <0400> ram $ram_seconds_cnt = a -- av_ad_lo = 58
    02d8 : 4000 ; -- <0400> ram $ram_seconds_cnt = a -- av_write_data = a
-- :minutes_done -- = 0x02d9

    02d9 : fba0 ; -- <0403> call :check_power_relay
    02da : 03b7 ; -- <0403> "
    02db : fc00 ; -- <0403> "
    02dc : fba0 ; -- <0404> call :check_communication
    02dd : 03e6 ; -- <0404> "
    02de : fc00 ; -- <0404> "
    02df : fba0 ; -- <0405> call :start_daq_pass
    02e0 : 0341 ; -- <0405> "
    02e1 : fc00 ; -- <0405> "
    02e2 : e00f ; -- <0406> end_event
    02e3 : 0077 ; -- <0406> "

-- ######## event mstimer1_handler -- = 0x02e4
-- start a reading from the current anmux channel.
    02e4 : 4a00 ; -- <0410> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_hi = 0
    02e5 : 4e06 ; -- <0410> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_lo = 6
    02e6 : 4202 ; -- <0410> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_write_data = 2
    02e7 : 0220 ; -- <0411> a = 32 -- putasc " "
    02e8 : fba0 ; -- <0411> putasc " "
    02e9 : 0084 ; -- <0411> "
    02ea : fc00 ; -- <0411> "
    02eb : 0273 ; -- <0412> a = 115 -- putasc "s"
    02ec : fba0 ; -- <0412> putasc "s"
    02ed : 0084 ; -- <0412> "
    02ee : fc00 ; -- <0412> "
    02ef : fba0 ; -- <0413> call :anmux_get_chn
    02f0 : 009f ; -- <0413> "
    02f1 : fc00 ; -- <0413> "
    02f2 : 0630 ; -- <0414> b = 48 -- asc b = "0"
    02f3 : c800 ; -- <0415> a = a+b -- putchar a+b
    02f4 : 0300 ; -- <0415> "
    02f5 : fba0 ; -- <0415> putchar a+b
    02f6 : 0084 ; -- <0415> "
    02f7 : fc00 ; -- <0415> "
    02f8 : 023d ; -- <0416> a = 61 -- putasc "="
    02f9 : fba0 ; -- <0416> putasc "="
    02fa : 0084 ; -- <0416> "
    02fb : fc00 ; -- <0416> "
    02fc : 0207 ; -- <0417> a = $anmux_adc_channel
    02fd : fba0 ; -- <0418> call :begin_adc_conversion
    02fe : 036c ; -- <0418> "
    02ff : fc00 ; -- <0418> "
    0300 : e00f ; -- <0419> end_event
    0301 : 0077 ; -- <0419> "

-- ######## event uart_rx_handler -- = 0x0302
-- :again -- = 0x0302
    0302 : fba0 ; -- <0423> pollchar
    0303 : 0093 ; -- <0423> "
    0304 : fc00 ; -- <0423> "
    0305 : 0760 ; -- <0424> b = -1
    0306 : e007 ; -- <0425> br eq :done
    0307 : 0281 ; -- <0425> "
    0308 : 060a ; -- <0426> b = 10
    0309 : e407 ; -- <0427> bn eq :skip_lf
    030a : 030e ; -- <0427> "
    030b : fba0 ; -- <0428> call :postpone_comm_restart
    030c : 0411 ; -- <0428> "
    030d : fc00 ; -- <0428> "
-- :skip_lf -- = 0x030e
    030e : e00f ; -- <0430> jmp :again
    030f : 0302 ; -- <0430> "
-- :done -- = 0x0310
    0310 : e00f ; -- <0432> end_event
    0311 : 0077 ; -- <0432> "

-- ######## event uart_rx_overflow_handler -- = 0x0312
    0312 : 5ba0 ; -- <0435> error_halt_code $err_rx_overflow -- leds = 0xfffe
    0313 : fffe ; -- <0435> "
    0314 : e00f ; -- <0435> error_halt_code $err_rx_overflow
    0315 : 0314 ; -- <0435> "
    0316 : e00f ; -- <0436> end_event
    0317 : 0077 ; -- <0436> "

-- ######## event uart_tx_overflow_handler -- = 0x0318
    0318 : 5ba0 ; -- <0439> error_halt_code $err_tx_overflow -- leds = 0xfffd
    0319 : fffd ; -- <0439> "
    031a : e00f ; -- <0439> error_halt_code $err_tx_overflow
    031b : 031a ; -- <0439> "
    031c : e00f ; -- <0440> end_event
    031d : 0077 ; -- <0440> "

-- ######## event key0_handler -- = 0x031e
    031e : 026b ; -- <0443> a = 107 -- putasc "k"
    031f : fba0 ; -- <0443> putasc "k"
    0320 : 0084 ; -- <0443> "
    0321 : fc00 ; -- <0443> "
    0322 : 0230 ; -- <0444> a = 48 -- putasc "0"
    0323 : fba0 ; -- <0444> putasc "0"
    0324 : 0084 ; -- <0444> "
    0325 : fc00 ; -- <0444> "
    0326 : e00f ; -- <0445> end_event
    0327 : 0077 ; -- <0445> "

-- ######## event key1_handler -- = 0x0328
    0328 : 026b ; -- <0448> a = 107 -- putasc "k"
    0329 : fba0 ; -- <0448> putasc "k"
    032a : 0084 ; -- <0448> "
    032b : fc00 ; -- <0448> "
    032c : 0231 ; -- <0449> a = 49 -- putasc "1"
    032d : fba0 ; -- <0449> putasc "1"
    032e : 0084 ; -- <0449> "
    032f : fc00 ; -- <0449> "
    0330 : e00f ; -- <0450> end_event
    0331 : 0077 ; -- <0450> "

-- ######## event softevent3_handler -- = 0x0332
    0332 : e00f ; -- <0453> end_event
    0333 : 0077 ; -- <0453> "

-- ######## event softevent2_handler -- = 0x0334
    0334 : e00f ; -- <0456> end_event
    0335 : 0077 ; -- <0456> "

-- ######## event softevent1_handler -- = 0x0336
    0336 : e00f ; -- <0459> end_event
    0337 : 0077 ; -- <0459> "

-- ######## event softevent0_handler -- = 0x0338
    0338 : e00f ; -- <0462> end_event
    0339 : 0077 ; -- <0462> "

-- :rpm_msg -- = 0x033a
-- ": rpm=\x0"
    033a : 203a ; -- <0465>  :
    033b : 7072 ; -- <0465> pr
    033c : 3d6d ; -- <0465> =m
    033d : 0000 ; -- <0465>   

-- :efi_len_msg -- = 0x033e
-- " efi=\x0"
    033e : 6520 ; -- <0468> e 
    033f : 6966 ; -- <0468> if
    0340 : 003d ; -- <0468>  =

-- ######## func start_daq_pass -- = 0x0341
    0341 : 203e ; -- <0470> push rtna -- func start_daq_pass
-- daq pass counter in RAM.
    0342 : 4a00 ; -- <0472> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0343 : 4e04 ; -- <0472> ram a = $ram_daq_pass_cnt -- av_ad_lo = 4
    0344 : 0010 ; -- <0472> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0345 : 0011 ; -- <0472> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0346 : 0601 ; -- <0473> b = 1
    0347 : c800 ; -- <0474> a = a+b
    0348 : 0300 ; -- <0474> "
    0349 : 5800 ; -- <0475> leds = a
    034a : 4a00 ; -- <0476> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    034b : 4e04 ; -- <0476> ram $ram_daq_pass_cnt = a -- av_ad_lo = 4
    034c : 4000 ; -- <0476> ram $ram_daq_pass_cnt = a -- av_write_data = a
    034d : fba0 ; -- <0477> call :put4x
    034e : 00ac ; -- <0477> "
    034f : fc00 ; -- <0477> "

    0350 : 03a0 ; -- <0479> a = :rpm_msg
    0351 : 033a ; -- <0479> "
    0352 : fba0 ; -- <0480> call :print_nt
    0353 : 0111 ; -- <0480> "
    0354 : fc00 ; -- <0480> "
    0355 : 4a00 ; -- <0481> ram a = $ram_avg_rpm -- av_ad_hi = 0
    0356 : 4e30 ; -- <0481> ram a = $ram_avg_rpm -- av_ad_lo = 48
    0357 : 0010 ; -- <0481> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    0358 : 0011 ; -- <0481> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    0359 : fba0 ; -- <0482> call :put4x
    035a : 00ac ; -- <0482> "
    035b : fc00 ; -- <0482> "

    035c : 03a0 ; -- <0484> a = :efi_len_msg
    035d : 033e ; -- <0484> "
    035e : fba0 ; -- <0485> call :print_nt
    035f : 0111 ; -- <0485> "
    0360 : fc00 ; -- <0485> "
    0361 : 001a ; -- <0486> a = efi_len_us
    0362 : fba0 ; -- <0487> call :put4x
    0363 : 00ac ; -- <0487> "
    0364 : fc00 ; -- <0487> "

-- start to acquire & report all anmux channels.
    0365 : 0207 ; -- <0490> a = 7
    0366 : fba0 ; -- <0491> call :anmux_set_chn
    0367 : 009b ; -- <0491> "
    0368 : fc00 ; -- <0491> "
    0369 : 3a05 ; -- <0492> mstimer1 = $anmux_settle_ms

-- -- observe MCU utilization.
-- a = usage_count
-- call :put4x
-- usage_count = 0
    036a : f808 ; -- <0498> pop rtna -- end_func
    036b : fc00 ; -- <0498> end_func

-- ######## func begin_adc_conversion -- = 0x036c
-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.  pass that in a.

    036c : 0352 ; -- <0504> a = a<<4
    036d : 0352 ; -- <0505> a = a<<4
    036e : 0351 ; -- <0506> a = a<<1
    036f : 0351 ; -- <0507> a = a<<1
    0370 : 0351 ; -- <0508> a = a<<1
    0371 : 3c00 ; -- <0509> spi_data = a
    0372 : fc00 ; -- <0510> end_func

-- ######## event power_lost_handler -- = 0x0373
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    0373 : 6600 ; -- <0519> power_duty = $power_duty_closing
    0374 : 4a00 ; -- <0520> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0375 : 4e04 ; -- <0520> ram a = $ram_daq_pass_cnt -- av_ad_lo = 4
    0376 : 0010 ; -- <0520> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0377 : 0011 ; -- <0520> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0378 : 0602 ; -- <0521> b = $relay_hold_passes
    0379 : 4a00 ; -- <0522> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    037a : 4e0a ; -- <0522> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 10
    037b : c800 ; -- <0522> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    037c : 4300 ; -- <0522> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    037d : fba0 ; -- <0527> call :save_persistent_data
    037e : 03e5 ; -- <0527> "
    037f : fc00 ; -- <0527> "
    0380 : e00f ; -- <0528> end_event
    0381 : 0077 ; -- <0528> "

-- :ign_off_msg -- = 0x0382
-- "IGOF\x0"
    0382 : 4749 ; -- <0531> GI
    0383 : 464f ; -- <0531> FO
    0384 : 0000 ; -- <0531>   

-- ######## event ign_switch_off_handler -- = 0x0385
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    0385 : 4a00 ; -- <0535> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0386 : 4e38 ; -- <0535> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    0387 : 0010 ; -- <0535> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0388 : 0011 ; -- <0535> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0389 : 060a ; -- <0536> b = $power_extend_minutes
    038a : 4a00 ; -- <0537> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    038b : 4e08 ; -- <0537> ram $ram_power_down_at_min = a+b -- av_ad_lo = 8
    038c : c800 ; -- <0537> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    038d : 4300 ; -- <0537> "
    038e : 03a0 ; -- <0538> a = :ign_off_msg
    038f : 0382 ; -- <0538> "
    0390 : fba0 ; -- <0539> call :set_text_flag
    0391 : 043a ; -- <0539> "
    0392 : fc00 ; -- <0539> "
    0393 : e00f ; -- <0540> end_event
    0394 : 0077 ; -- <0540> "

-- :ign_on_msg -- = 0x0395
-- "IGON\x0"
    0395 : 4749 ; -- <0543> GI
    0396 : 4e4f ; -- <0543> NO
    0397 : 0000 ; -- <0543>   

-- ######## event ign_switch_on_handler -- = 0x0398
    0398 : 4a00 ; -- <0546> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0399 : 4e08 ; -- <0546> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 8
    039a : 4360 ; -- <0546> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    039b : 03a0 ; -- <0547> a = :ign_on_msg
    039c : 0395 ; -- <0547> "
    039d : fba0 ; -- <0548> call :set_text_flag
    039e : 043a ; -- <0548> "
    039f : fc00 ; -- <0548> "
    03a0 : e00f ; -- <0549> end_event
    03a1 : 0077 ; -- <0549> "

-- ######## event puff1_done_handler -- = 0x03a2
    03a2 : 4a00 ; -- <0552> ram a = $ram_dial_setting -- av_ad_hi = 0
    03a3 : 4e3e ; -- <0552> ram a = $ram_dial_setting -- av_ad_lo = 62
    03a4 : 0010 ; -- <0552> ram a = $ram_dial_setting -- a = av_write_data -- start read cycle
    03a5 : 0011 ; -- <0552> ram a = $ram_dial_setting -- a = av_read_data -- finish read cycle
    03a6 : 0351 ; -- <0553> a = a<<1
    03a7 : 0351 ; -- <0554> a = a<<1
    03a8 : 0351 ; -- <0555> a = a<<1
    03a9 : e400 ; -- <0556> bn az :nonzero
    03aa : 03ac ; -- <0556> "
    03ab : 0201 ; -- <0557> a = 1
-- :nonzero -- = 0x03ac
    03ac : 6800 ; -- <0559> efi_len_us = a
    03ad : e00f ; -- <0560> end_event
    03ae : 0077 ; -- <0560> "

-- ######## func minute_events -- = 0x03af
    03af : 203e ; -- <0562> push rtna -- func minute_events
    03b0 : fba0 ; -- <0563> call :check_power_down
    03b1 : 03ca ; -- <0563> "
    03b2 : fc00 ; -- <0563> "
    03b3 : f808 ; -- <0564> pop rtna -- end_func
    03b4 : fc00 ; -- <0564> end_func

-- :power_hold_msg -- = 0x03b5
-- "PWH\x0"
    03b5 : 5750 ; -- <0567> WP
    03b6 : 0048 ; -- <0567>  H

-- ######## func check_power_relay -- = 0x03b7
    03b7 : 203e ; -- <0569> push rtna -- func check_power_relay
    03b8 : 4a00 ; -- <0570> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03b9 : 4e04 ; -- <0570> ram a = $ram_daq_pass_cnt -- av_ad_lo = 4
    03ba : 0010 ; -- <0570> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03bb : 0011 ; -- <0570> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03bc : 4a00 ; -- <0571> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    03bd : 4e0a ; -- <0571> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 10
    03be : 0410 ; -- <0571> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    03bf : 0411 ; -- <0571> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle
    03c0 : e407 ; -- <0572> bn eq :done
    03c1 : 03c8 ; -- <0572> "
-- time to begin "solenoid saver" coil power reduction by PWM.
    03c2 : 6619 ; -- <0574> power_duty = $power_duty_holding
    03c3 : 03a0 ; -- <0575> a = :power_hold_msg
    03c4 : 03b5 ; -- <0575> "
    03c5 : fba0 ; -- <0576> call :set_text_flag
    03c6 : 043a ; -- <0576> "
    03c7 : fc00 ; -- <0576> "
-- :done -- = 0x03c8
    03c8 : f808 ; -- <0578> pop rtna -- end_func
    03c9 : fc00 ; -- <0578> end_func

-- ######## func check_power_down -- = 0x03ca
    03ca : 203e ; -- <0580> push rtna -- func check_power_down
-- check power-down deadline in RAM.
    03cb : 4a00 ; -- <0582> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    03cc : 4e38 ; -- <0582> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    03cd : 0010 ; -- <0582> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    03ce : 0011 ; -- <0582> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    03cf : 4a00 ; -- <0583> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    03d0 : 4e08 ; -- <0583> ram b = $ram_power_down_at_min -- av_ad_lo = 8
    03d1 : 0410 ; -- <0583> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    03d2 : 0411 ; -- <0583> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle
    03d3 : e407 ; -- <0584> bn eq :done
    03d4 : 03d8 ; -- <0584> "
    03d5 : fba0 ; -- <0585> call :power_down
    03d6 : 03da ; -- <0585> "
    03d7 : fc00 ; -- <0585> "
-- :done -- = 0x03d8
    03d8 : f808 ; -- <0587> pop rtna -- end_func
    03d9 : fc00 ; -- <0587> end_func

-- ######## func power_down -- = 0x03da
    03da : 203e ; -- <0589> push rtna -- func power_down
-- this function never returns.
    03db : fba0 ; -- <0591> call :save_persistent_data
    03dc : 03e5 ; -- <0591> "
    03dd : fc00 ; -- <0591> "
    03de : 6632 ; -- <0592> power_duty = $power_duty_opening
    03df : 5ba0 ; -- <0593> error_halt_code $err_power_down -- leds = 0xfffc
    03e0 : fffc ; -- <0593> "
    03e1 : e00f ; -- <0593> error_halt_code $err_power_down
    03e2 : 03e1 ; -- <0593> "
    03e3 : f808 ; -- <0594> pop rtna -- end_func
    03e4 : fc00 ; -- <0594> end_func

-- ######## func save_persistent_data -- = 0x03e5
    03e5 : fc00 ; -- <0597> end_func

-- ######## func check_communication -- = 0x03e6
    03e6 : 203e ; -- <0599> push rtna -- func check_communication
    03e7 : 4a00 ; -- <0600> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    03e8 : 4e02 ; -- <0600> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 2
    03e9 : 0010 ; -- <0600> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    03ea : 0011 ; -- <0600> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle
    03eb : e000 ; -- <0601> br az :skip_ftdi_powerup
    03ec : 03fc ; -- <0601> "
    03ed : 0760 ; -- <0602> b = -1
    03ee : c800 ; -- <0603> a = a+b
    03ef : 0300 ; -- <0603> "
    03f0 : 4a00 ; -- <0604> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    03f1 : 4e02 ; -- <0604> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 2
    03f2 : 4000 ; -- <0604> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a
    03f3 : e000 ; -- <0605> br az :do_power_on
    03f4 : 03f7 ; -- <0605> "
    03f5 : f808 ; -- <0606> pop rtna -- rtn
    03f6 : fc00 ; -- <0606> rtn
-- :do_power_on -- = 0x03f7
    03f7 : fba0 ; -- <0608> call :ftdi_power_on
    03f8 : 042e ; -- <0608> "
    03f9 : fc00 ; -- <0608> "
    03fa : f808 ; -- <0609> pop rtna -- rtn
    03fb : fc00 ; -- <0609> rtn
-- :skip_ftdi_powerup -- = 0x03fc

    03fc : 4a00 ; -- <0612> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    03fd : 4e38 ; -- <0612> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    03fe : 0010 ; -- <0612> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    03ff : 0011 ; -- <0612> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0400 : 4a00 ; -- <0613> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0401 : 4e00 ; -- <0613> ram b = $ram_comm_restart_at_min -- av_ad_lo = 0
    0402 : 0410 ; -- <0613> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0403 : 0411 ; -- <0613> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle
    0404 : e407 ; -- <0614> bn eq :done
    0405 : 040f ; -- <0614> "
-- comm restart is required.
    0406 : fba0 ; -- <0616> call :postpone_comm_restart
    0407 : 0411 ; -- <0616> "
    0408 : fc00 ; -- <0616> "
    0409 : 4a00 ; -- <0617> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    040a : 4e02 ; -- <0617> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 2
    040b : 4205 ; -- <0617> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    040c : fba0 ; -- <0618> call :ftdi_power_off
    040d : 041e ; -- <0618> "
    040e : fc00 ; -- <0618> "
-- :done -- = 0x040f
    040f : f808 ; -- <0620> pop rtna -- end_func
    0410 : fc00 ; -- <0620> end_func

-- ######## func postpone_comm_restart -- = 0x0411
    0411 : 4a00 ; -- <0623> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0412 : 4e38 ; -- <0623> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    0413 : 0010 ; -- <0623> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0414 : 0011 ; -- <0623> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0415 : 0602 ; -- <0624> b = $comm_grace_period_min
    0416 : 4a00 ; -- <0625> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    0417 : 4e00 ; -- <0625> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 0
    0418 : c800 ; -- <0625> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    0419 : 4300 ; -- <0625> "
    041a : fc00 ; -- <0626> end_func

-- :ftdi_off_msg -- = 0x041b
-- "FTOF\x0"
    041b : 5446 ; -- <0629> TF
    041c : 464f ; -- <0629> FO
    041d : 0000 ; -- <0629>   

-- ######## func ftdi_power_off -- = 0x041e
    041e : 203e ; -- <0631> push rtna -- func ftdi_power_off
    041f : 0017 ; -- <0632> a = board_ctrl
    0420 : 07a0 ; -- <0633> b = $not_ftdi_power_mask
    0421 : ff7f ; -- <0633> "
    0422 : c800 ; -- <0634> board_ctrl = and
    0423 : 5f30 ; -- <0634> "
    0424 : 03a0 ; -- <0635> a = :ftdi_off_msg
    0425 : 041b ; -- <0635> "
    0426 : fba0 ; -- <0636> call :set_text_flag
    0427 : 043a ; -- <0636> "
    0428 : fc00 ; -- <0636> "
    0429 : f808 ; -- <0637> pop rtna -- end_func
    042a : fc00 ; -- <0637> end_func

-- :ftdi_on_msg -- = 0x042b
-- "FTON\x0"
    042b : 5446 ; -- <0640> TF
    042c : 4e4f ; -- <0640> NO
    042d : 0000 ; -- <0640>   

-- ######## func ftdi_power_on -- = 0x042e
    042e : 203e ; -- <0642> push rtna -- func ftdi_power_on
    042f : 0017 ; -- <0643> a = board_ctrl
    0430 : 0680 ; -- <0644> b = $ftdi_power_mask
    0431 : c800 ; -- <0645> board_ctrl = or
    0432 : 5f34 ; -- <0645> "
    0433 : 03a0 ; -- <0646> a = :ftdi_on_msg
    0434 : 042b ; -- <0646> "
    0435 : fba0 ; -- <0647> call :set_text_flag
    0436 : 043a ; -- <0647> "
    0437 : fc00 ; -- <0647> "
    0438 : f808 ; -- <0648> pop rtna -- end_func
    0439 : fc00 ; -- <0648> end_func

-- ######## func set_text_flag -- = 0x043a
    043a : 4a00 ; -- <0651> ram b = $ram_next_tfp -- av_ad_hi = 0
    043b : 4e50 ; -- <0651> ram b = $ram_next_tfp -- av_ad_lo = 80
    043c : 0410 ; -- <0651> ram b = $ram_next_tfp -- b = av_write_data -- start read cycle
    043d : 0411 ; -- <0651> ram b = $ram_next_tfp -- b = av_read_data -- finish read cycle
    043e : 2000 ; -- <0652> push a -- struct_write $ram_text_flag_pointers  b  =  a
    043f : 2001 ; -- <0652> push b -- struct_write $ram_text_flag_pointers  b  =  a
    0440 : 0401 ; -- <0652> struct_write $ram_text_flag_pointers  b  =  a
    0441 : 0240 ; -- <0652> struct_write $ram_text_flag_pointers  b  =  a
    0442 : 4a00 ; -- <0652> struct_write $ram_text_flag_pointers  b  =  a -- av_ad_hi = 0
    0443 : 4f00 ; -- <0652> struct_write $ram_text_flag_pointers  b  =  a -- av_ad_lo = 64 + b
    0444 : 4000 ; -- <0652> struct_write $ram_text_flag_pointers  b  =  a -- av_write_data = a
    0445 : 0408 ; -- <0652> pop b -- struct_write $ram_text_flag_pointers  b  =  a
    0446 : 0008 ; -- <0652> pop a -- struct_write $ram_text_flag_pointers  b  =  a
    0447 : 0360 ; -- <0653> a = -1
    0448 : c800 ; -- <0654> b = a+b
    0449 : 0700 ; -- <0654> "
    044a : 0207 ; -- <0655> a = $tfp_mask
    044b : 4a00 ; -- <0656> ram $ram_next_tfp = and -- av_ad_hi = 0
    044c : 4e50 ; -- <0656> ram $ram_next_tfp = and -- av_ad_lo = 80
    044d : c800 ; -- <0656> ram $ram_next_tfp = and -- av_write_data = and
    044e : 4330 ; -- <0656> "
    044f : fc00 ; -- <0657> end_func

-- ######## func report_text_flags -- = 0x0450
    0450 : 2002 ; -- <0659> push i -- func report_text_flags
    0451 : 2003 ; -- <0659> push j -- "
    0452 : 203e ; -- <0659> push rtna -- "
    0453 : 0a08 ; -- <0660> i = $num_text_flag_pointers
    0454 : 0f60 ; -- <0661> j = -1
-- :next_ptr -- = 0x0455
    0455 : c800 ; -- <0663> i = i+j
    0456 : 0b10 ; -- <0663> "
    0457 : 2001 ; -- <0664> push b -- struct_read a = $ram_text_flag_pointers  i
    0458 : 0402 ; -- <0664> struct_read a = $ram_text_flag_pointers  i
    0459 : 0240 ; -- <0664> struct_read a = $ram_text_flag_pointers  i
    045a : 4a00 ; -- <0664> struct_read a = $ram_text_flag_pointers  i -- av_ad_hi = 0
    045b : 4f00 ; -- <0664> struct_read a = $ram_text_flag_pointers  i -- av_ad_lo = 64 + i
    045c : 0010 ; -- <0664> struct_read a = $ram_text_flag_pointers  i -- a = av_write_data
    045d : 0011 ; -- <0664> struct_read a = $ram_text_flag_pointers  i -- a = av_read_data
    045e : 0408 ; -- <0664> pop b -- struct_read a = $ram_text_flag_pointers  i
    045f : e000 ; -- <0665> br az :skip
    0460 : 0471 ; -- <0665> "
    0461 : fba0 ; -- <0666> call :print_nt
    0462 : 0111 ; -- <0666> "
    0463 : fc00 ; -- <0666> "
    0464 : 022c ; -- <0667> a = 44 -- putasc ","
    0465 : fba0 ; -- <0667> putasc ","
    0466 : 0084 ; -- <0667> "
    0467 : fc00 ; -- <0667> "
    0468 : 2000 ; -- <0668> push a -- struct_write $ram_text_flag_pointers  i  =  0
    0469 : 2001 ; -- <0668> push b -- struct_write $ram_text_flag_pointers  i  =  0
    046a : 0402 ; -- <0668> struct_write $ram_text_flag_pointers  i  =  0
    046b : 0240 ; -- <0668> struct_write $ram_text_flag_pointers  i  =  0
    046c : 4a00 ; -- <0668> struct_write $ram_text_flag_pointers  i  =  0 -- av_ad_hi = 0
    046d : 4f00 ; -- <0668> struct_write $ram_text_flag_pointers  i  =  0 -- av_ad_lo = 64 + i
    046e : 4200 ; -- <0668> struct_write $ram_text_flag_pointers  i  =  0 -- av_write_data = 0
    046f : 0408 ; -- <0668> pop b -- struct_write $ram_text_flag_pointers  i  =  0
    0470 : 0008 ; -- <0668> pop a -- struct_write $ram_text_flag_pointers  i  =  0
-- :skip -- = 0x0471
    0471 : e401 ; -- <0670> bn iz :next_ptr
    0472 : 0455 ; -- <0670> "
    0473 : f808 ; -- <0671> pop rtna -- end_func
    0474 : 0c08 ; -- <0671> pop j -- "
    0475 : 0808 ; -- <0671> pop i -- "
    0476 : fc00 ; -- <0671> end_func

-- ######## func jf_to_rpm -- = 0x0477
    0477 : 203e ; -- <0673> push rtna -- func jf_to_rpm
-- pass jiffies in a.  return rpm in a.
-- resolution = 32 rpm.
    0478 : 0400 ; -- <0676> b = a
    0479 : 03a0 ; -- <0677> a = 0x5573
    047a : 5573 ; -- <0677> "
-- = 700000 >> 5
    047b : fba0 ; -- <0679> call :divide
    047c : 014e ; -- <0679> "
    047d : fc00 ; -- <0679> "
    047e : 0001 ; -- <0680> a = b
    047f : 0352 ; -- <0681> a = a<<4
    0480 : 0351 ; -- <0682> a = a<<1
    0481 : f808 ; -- <0683> pop rtna -- end_func
    0482 : fc00 ; -- <0683> end_func

        
        END;
    
