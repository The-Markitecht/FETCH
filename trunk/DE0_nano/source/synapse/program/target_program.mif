
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.


-- -- I/O expansion bus.
-- alias_both exp                  [incr counter]
-- alias_both exp_addr             [incr counter]
-- vdefine exp_num_regs 32
-- vdefine exp_top_reg ($exp_num_regs - 1)
-- setvar exp_counter -1

-- alias_src  keys                 [incr exp_counter]@exp
-- alias_both leds                 [incr exp_counter]@exp

-- alias_both anmux_ctrl           [incr exp_counter]@exp
-- vdefine     anmux_enable_mask       0x0008
-- vdefine     anmux_channel_mask      0x0007




-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- SETTING efi_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_20us NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 5000 RPM = about 140 jf between rising edges on chevy ignition white wire.
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.
-- setvar ign_history_quarter      ($ign_history_len / 4)
-- setvar ign_quarter_avg_shift    ($ign_history_idx_bits - 2)
-- ram_define ram_ign_oldest_avg_jf
-- ram_define ram_ign_newest_avg_jf

-- realtime counting.

-- text flag reporting.

-- error code constants.

    0000 : e00f ; -- <0167> jmp :main
    0001 : 0209 ; -- <0167> "

    0002 : 001d ; -- <0169> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0169>   
    0004 : 2020 ; -- <0169>   
    0005 : 2020 ; -- <0169>   
    0006 : 6120 ; -- <0169> a 
-- "       b"
    0007 : 2020 ; -- <0169>   
    0008 : 2020 ; -- <0169>   
    0009 : 2020 ; -- <0169>   
    000a : 6220 ; -- <0169> b 
-- "       i"
    000b : 2020 ; -- <0169>   
    000c : 2020 ; -- <0169>   
    000d : 2020 ; -- <0169>   
    000e : 6920 ; -- <0169> i 
-- "       j"
    000f : 2020 ; -- <0169>   
    0010 : 2020 ; -- <0169>   
    0011 : 2020 ; -- <0169>   
    0012 : 6a20 ; -- <0169> j 
-- "       x"
    0013 : 2020 ; -- <0169>   
    0014 : 2020 ; -- <0169>   
    0015 : 2020 ; -- <0169>   
    0016 : 7820 ; -- <0169> x 
-- "       y"
    0017 : 2020 ; -- <0169>   
    0018 : 2020 ; -- <0169>   
    0019 : 2020 ; -- <0169>   
    001a : 7920 ; -- <0169> y 
-- "      g6"
    001b : 2020 ; -- <0169>   
    001c : 2020 ; -- <0169>   
    001d : 2020 ; -- <0169>   
    001e : 3667 ; -- <0169> 6g
-- "      g7"
    001f : 2020 ; -- <0169>   
    0020 : 2020 ; -- <0169>   
    0021 : 2020 ; -- <0169>   
    0022 : 3767 ; -- <0169> 7g
-- "--rstk  "
    0023 : 2f2f ; -- <0169> --
    0024 : 7372 ; -- <0169> sr
    0025 : 6b74 ; -- <0169> kt
    0026 : 2020 ; -- <0169>   
-- "  ev_pri"
    0027 : 2020 ; -- <0169>   
    0028 : 7665 ; -- <0169> ve
    0029 : 705f ; -- <0169> p_
    002a : 6972 ; -- <0169> ir
-- "softevnt"
    002b : 6f73 ; -- <0169> os
    002c : 7466 ; -- <0169> tf
    002d : 7665 ; -- <0169> ve
    002e : 746e ; -- <0169> tn
-- "   usage"
    002f : 2020 ; -- <0169>   
    0030 : 7520 ; -- <0169> u 
    0031 : 6173 ; -- <0169> as
    0032 : 6567 ; -- <0169> eg
-- "ustimer0"
    0033 : 7375 ; -- <0169> su
    0034 : 6974 ; -- <0169> it
    0035 : 656d ; -- <0169> em
    0036 : 3072 ; -- <0169> 0r
-- "mstimer0"
    0037 : 736d ; -- <0169> sm
    0038 : 6974 ; -- <0169> it
    0039 : 656d ; -- <0169> em
    003a : 3072 ; -- <0169> 0r
-- "mstimer1"
    003b : 736d ; -- <0169> sm
    003c : 6974 ; -- <0169> it
    003d : 656d ; -- <0169> em
    003e : 3172 ; -- <0169> 1r
-- "spi_data"
    003f : 7073 ; -- <0169> ps
    0040 : 5f69 ; -- <0169> _i
    0041 : 6164 ; -- <0169> ad
    0042 : 6174 ; -- <0169> at
-- "--avwrdt"
    0043 : 2f2f ; -- <0169> --
    0044 : 7661 ; -- <0169> va
    0045 : 7277 ; -- <0169> rw
    0046 : 7464 ; -- <0169> td
-- "av_rd_dt"
    0047 : 7661 ; -- <0169> va
    0048 : 725f ; -- <0169> r_
    0049 : 5f64 ; -- <0169> _d
    004a : 7464 ; -- <0169> td
-- "av_ad_hi"
    004b : 7661 ; -- <0169> va
    004c : 615f ; -- <0169> a_
    004d : 5f64 ; -- <0169> _d
    004e : 6968 ; -- <0169> ih
-- "av_ad_lo"
    004f : 7661 ; -- <0169> va
    0050 : 615f ; -- <0169> a_
    0051 : 5f64 ; -- <0169> _d
    0052 : 6f6c ; -- <0169> ol
-- "--uartdt"
    0053 : 2f2f ; -- <0169> --
    0054 : 6175 ; -- <0169> au
    0055 : 7472 ; -- <0169> tr
    0056 : 7464 ; -- <0169> td
-- "uartstat"
    0057 : 6175 ; -- <0169> au
    0058 : 7472 ; -- <0169> tr
    0059 : 7473 ; -- <0169> ts
    005a : 7461 ; -- <0169> ta
-- "    leds"
    005b : 2020 ; -- <0169>   
    005c : 2020 ; -- <0169>   
    005d : 656c ; -- <0169> el
    005e : 7364 ; -- <0169> sd
-- "brd_ctrl"
    005f : 7262 ; -- <0169> rb
    0060 : 5f64 ; -- <0169> _d
    0061 : 7463 ; -- <0169> tc
    0062 : 6c72 ; -- <0169> lr
-- "   anmux"
    0063 : 2020 ; -- <0169>   
    0064 : 6120 ; -- <0169> a 
    0065 : 6d6e ; -- <0169> mn
    0066 : 7875 ; -- <0169> xu
-- "pwr_duty"
    0067 : 7770 ; -- <0169> wp
    0068 : 5f72 ; -- <0169> _r
    0069 : 7564 ; -- <0169> ud
    006a : 7974 ; -- <0169> yt
-- "efilenus"
    006b : 6665 ; -- <0169> fe
    006c : 6c69 ; -- <0169> li
    006d : 6e65 ; -- <0169> ne
    006e : 7375 ; -- <0169> su
-- "igntmout"
    006f : 6769 ; -- <0169> gi
    0070 : 746e ; -- <0169> tn
    0071 : 6f6d ; -- <0169> om
    0072 : 7475 ; -- <0169> tu
-- "igntmcap"
    0073 : 6769 ; -- <0169> gi
    0074 : 746e ; -- <0169> tn
    0075 : 636d ; -- <0169> cm
    0076 : 7061 ; -- <0169> pa

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x0077
-- initialize prior to polling loop, for minimum latency.
    0077 : 07a0 ; -- <0006> b = :event_table
    0078 : 0238 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0079
    0079 : 0009 ; -- <0009> a = event_priority
    007a : e000 ; -- <0010> br 0z :poll_events_again
    007b : 0079 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    007c : 2400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    007d : d300 ; -- <0015> fetch rtna from ad0
    007e : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    007f : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0080 : 5ba0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0081 : ffc0 ; -- <0021> "
    0082 : e00f ; -- <0021> error_halt_code 0xffc0
    0083 : 0082 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x0084
    0084 : 2004 ; -- <0046> push x -- func putchar_fduart

    0085 : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    0086 : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x0087
    0087 : 0415 ; -- <0053> b = fduart_status
    0088 : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    0089 : 0087 ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    008a : 5004 ; -- <0057> fduart_data = x
    008b : 1008 ; -- <0058> pop x -- end_func
    008c : fc00 ; -- <0058> end_func

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x008d
-- wait until FIFO is populated.
    008d : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x008e
    008e : 0415 ; -- <0066> b = fduart_status
    008f : e403 ; -- <0067> bn and0z :wait_for_busy
    0090 : 008e ; -- <0067> "
    0091 : 0014 ; -- <0068> a = fduart_data
    0092 : fc00 ; -- <0069> end_func

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x0093
-- check for FIFO is populated.
    0093 : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    0094 : 0415 ; -- <0075> b = fduart_status
    0095 : e403 ; -- <0076> bn and0z :none
    0096 : 0099 ; -- <0076> "
    0097 : 0014 ; -- <0077> a = fduart_data
    0098 : fc00 ; -- <0078> rtn
-- :none -- = 0x0099
    0099 : 0360 ; -- <0080> a = -1
    009a : fc00 ; -- <0081> end_func


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x009b
-- set & enable analog muxer
    009b : 0608 ; -- <0007> b = $anmux_enable_mask
    009c : c800 ; -- <0008> anmux_ctrl = or
    009d : 6334 ; -- <0008> "
    009e : fc00 ; -- <0009> end_func

-- ######## func anmux_get_chn -- = 0x009f
    009f : 0018 ; -- <0012> a = anmux_ctrl
    00a0 : 0607 ; -- <0013> b = $anmux_channel_mask
    00a1 : c800 ; -- <0014> a = and
    00a2 : 0330 ; -- <0014> "
    00a3 : fc00 ; -- <0015> end_func


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00a4
-- "0123456789abcdef"
    00a4 : 3130 ; -- <0050> 10
    00a5 : 3332 ; -- <0050> 32
    00a6 : 3534 ; -- <0050> 54
    00a7 : 3736 ; -- <0050> 76
    00a8 : 3938 ; -- <0050> 98
    00a9 : 6261 ; -- <0050> ba
    00aa : 6463 ; -- <0050> dc
    00ab : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00ac
    00ac : 2004 ; -- <0054> push x -- func put4x
    00ad : 2006 ; -- <0054> push g6 -- "
    00ae : 203e ; -- <0054> push rtna -- "
    00af : 13a0 ; -- <0055> x = :hexdigits
    00b0 : 00a4 ; -- <0055> "

    00b1 : 1800 ; -- <0057> g6 = a
    00b2 : 07a0 ; -- <0058> b = 0xF000
    00b3 : f000 ; -- <0058> "
    00b4 : c800 ; -- <0059> a = and
    00b5 : 0330 ; -- <0059> "
    00b6 : 0353 ; -- <0060> a = a>>4
    00b7 : 0353 ; -- <0061> a = a>>4
    00b8 : 0353 ; -- <0062> a = a>>4
    00b9 : fba0 ; -- <0063> call fetch_byte
    00ba : 01c5 ; -- <0063> "
    00bb : fc00 ; -- <0063> "
    00bc : fba0 ; -- <0064> putchar a
    00bd : 0084 ; -- <0064> "
    00be : fc00 ; -- <0064> "

    00bf : 0006 ; -- <0066> a = g6
    00c0 : 07a0 ; -- <0067> b = 0x0F00
    00c1 : 0f00 ; -- <0067> "
    00c2 : c800 ; -- <0068> a = and
    00c3 : 0330 ; -- <0068> "
    00c4 : 0353 ; -- <0069> a = a>>4
    00c5 : 0353 ; -- <0070> a = a>>4
    00c6 : fba0 ; -- <0071> call fetch_byte
    00c7 : 01c5 ; -- <0071> "
    00c8 : fc00 ; -- <0071> "
    00c9 : fba0 ; -- <0072> putchar a
    00ca : 0084 ; -- <0072> "
    00cb : fc00 ; -- <0072> "

    00cc : 0006 ; -- <0074> a = g6
    00cd : 06f0 ; -- <0075> b = 0x00F0
    00ce : c800 ; -- <0076> a = and
    00cf : 0330 ; -- <0076> "
    00d0 : 0353 ; -- <0077> a = a>>4
    00d1 : fba0 ; -- <0078> call fetch_byte
    00d2 : 01c5 ; -- <0078> "
    00d3 : fc00 ; -- <0078> "
    00d4 : fba0 ; -- <0079> putchar a
    00d5 : 0084 ; -- <0079> "
    00d6 : fc00 ; -- <0079> "

    00d7 : 0006 ; -- <0081> a = g6
    00d8 : 060f ; -- <0082> b = 0x000F
    00d9 : c800 ; -- <0083> a = and
    00da : 0330 ; -- <0083> "
    00db : fba0 ; -- <0084> call fetch_byte
    00dc : 01c5 ; -- <0084> "
    00dd : fc00 ; -- <0084> "
    00de : fba0 ; -- <0085> putchar a
    00df : 0084 ; -- <0085> "
    00e0 : fc00 ; -- <0085> "

    00e1 : f808 ; -- <0087> pop rtna -- end_func
    00e2 : 1808 ; -- <0087> pop g6 -- "
    00e3 : 1008 ; -- <0087> pop x -- "
    00e4 : fc00 ; -- <0087> end_func

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00e5
    00e5 : 2002 ; -- <0091> push i -- func get4x
    00e6 : 2003 ; -- <0091> push j -- "
    00e7 : 2004 ; -- <0091> push x -- "
    00e8 : 2005 ; -- <0091> push y -- "
    00e9 : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    00ea : 1604 ; -- <0094> y = 4
-- :again -- = 0x00eb
    00eb : fba0 ; -- <0096> getchar
    00ec : 008d ; -- <0096> "
    00ed : fc00 ; -- <0096> "
    00ee : 13a0 ; -- <0097> x = :hexdigits
    00ef : 00a4 ; -- <0097> "
    00f0 : 0a10 ; -- <0098> i = 16
    00f1 : fba0 ; -- <0099> call :find_in_fetch
    00f2 : 01d9 ; -- <0099> "
    00f3 : fc00 ; -- <0099> "
    00f4 : 0760 ; -- <0100> b = -1
    00f5 : e007 ; -- <0101> br eq :fail
    00f6 : 010a ; -- <0101> "
    00f7 : 0400 ; -- <0102> b = a
    00f8 : 0003 ; -- <0103> a = j
    00f9 : 0352 ; -- <0104> a = a<<4
    00fa : c800 ; -- <0105> j = or
    00fb : 0f34 ; -- <0105> "
    00fc : 1360 ; -- <0106> x = -1
    00fd : c800 ; -- <0107> y = x+y
    00fe : 1720 ; -- <0107> "
    00ff : 0005 ; -- <0108> a = y
    0100 : e400 ; -- <0109> bn az :again
    0101 : 00eb ; -- <0109> "
    0102 : 0003 ; -- <0110> a = j
    0103 : 0600 ; -- <0111> b = 0
    0104 : f808 ; -- <0112> pop rtna -- rtn
    0105 : 1408 ; -- <0112> pop y -- "
    0106 : 1008 ; -- <0112> pop x -- "
    0107 : 0c08 ; -- <0112> pop j -- "
    0108 : 0808 ; -- <0112> pop i -- "
    0109 : fc00 ; -- <0112> rtn
-- :fail -- = 0x010a
    010a : 0760 ; -- <0114> b = -1
    010b : f808 ; -- <0115> pop rtna -- end_func
    010c : 1408 ; -- <0115> pop y -- "
    010d : 1008 ; -- <0115> pop x -- "
    010e : 0c08 ; -- <0115> pop j -- "
    010f : 0808 ; -- <0115> pop i -- "
    0110 : fc00 ; -- <0115> end_func

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0111
    0111 : 2002 ; -- <0121> push i -- func print_fixed
    0112 : 2003 ; -- <0121> push j -- "
    0113 : 2004 ; -- <0121> push x -- "
    0114 : 2005 ; -- <0121> push y -- "
    0115 : 2006 ; -- <0121> push g6 -- "
    0116 : 203e ; -- <0121> push rtna -- "
    0117 : 0800 ; -- <0122> i = a
    0118 : 0e01 ; -- <0123> j = 1
    0119 : 1001 ; -- <0124> x = b
    011a : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x011b
    011b : e002 ; -- <0127> br xz :done
    011c : 0131 ; -- <0127> "
    011d : 1320 ; -- <0128> x = ad2
    011e : d002 ; -- <0129> fetch g6 from i
    011f : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0120 : 0006 ; -- <0131> a = g6 -- putchar g6
    0121 : fba0 ; -- <0131> putchar g6
    0122 : 0084 ; -- <0131> "
    0123 : fc00 ; -- <0131> "
    0124 : e002 ; -- <0132> br xz :done
    0125 : 0131 ; -- <0132> "
    0126 : 1320 ; -- <0133> x = ad2
    0127 : 0006 ; -- <0134> a = g6
    0128 : 0353 ; -- <0135> a = a>>4
    0129 : 0353 ; -- <0136> a = a>>4
    012a : fba0 ; -- <0137> putchar a
    012b : 0084 ; -- <0137> "
    012c : fc00 ; -- <0137> "
    012d : c800 ; -- <0138> i = i+j
    012e : 0b10 ; -- <0138> "
    012f : e00f ; -- <0139> jmp :next_word
    0130 : 011b ; -- <0139> "
-- :done -- = 0x0131
    0131 : f808 ; -- <0141> pop rtna -- end_func
    0132 : 1808 ; -- <0141> pop g6 -- "
    0133 : 1408 ; -- <0141> pop y -- "
    0134 : 1008 ; -- <0141> pop x -- "
    0135 : 0c08 ; -- <0141> pop j -- "
    0136 : 0808 ; -- <0141> pop i -- "
    0137 : fc00 ; -- <0141> end_func

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x0138
    0138 : 2002 ; -- <0147> push i -- func print_nt
    0139 : 2003 ; -- <0147> push j -- "
    013a : 2004 ; -- <0147> push x -- "
    013b : 203e ; -- <0147> push rtna -- "
    013c : 0800 ; -- <0148> i = a
    013d : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x013e
    013e : d002 ; -- <0151> fetch x from i
    013f : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0140 : 0004 ; -- <0153> a = x
    0141 : 06ff ; -- <0154> b = 0xff
    0142 : e003 ; -- <0155> br and0z :done
    0143 : 0154 ; -- <0155> "
    0144 : fba0 ; -- <0156> putchar a
    0145 : 0084 ; -- <0156> "
    0146 : fc00 ; -- <0156> "
    0147 : 0004 ; -- <0157> a = x
    0148 : 0353 ; -- <0158> a = a>>4
    0149 : 0353 ; -- <0159> a = a>>4
    014a : 06ff ; -- <0160> b = 0xff
    014b : e003 ; -- <0161> br and0z :done
    014c : 0154 ; -- <0161> "
    014d : fba0 ; -- <0162> putchar a
    014e : 0084 ; -- <0162> "
    014f : fc00 ; -- <0162> "
    0150 : c800 ; -- <0163> i = i+j
    0151 : 0b10 ; -- <0163> "
    0152 : e00f ; -- <0164> jmp :next_word
    0153 : 013e ; -- <0164> "
-- :done -- = 0x0154
    0154 : f808 ; -- <0166> pop rtna -- end_func
    0155 : 1008 ; -- <0166> pop x -- "
    0156 : 0c08 ; -- <0166> pop j -- "
    0157 : 0808 ; -- <0166> pop i -- "
    0158 : fc00 ; -- <0166> end_func


-- function library for simple integer math.

-- ######## func multiply -- = 0x0159
    0159 : 2002 ; -- <0004> push i -- func multiply
    015a : 2003 ; -- <0004> push j -- "
    015b : 2004 ; -- <0004> push x -- "
    015c : 2005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    015d : 1000 ; -- <0009> x = a
    015e : 1401 ; -- <0010> y = b
    015f : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0160
    0160 : e002 ; -- <0013> br xz :done
    0161 : 016f ; -- <0013> "
    0162 : 0004 ; -- <0014> a = x
    0163 : 0601 ; -- <0015> b = 1
    0164 : e003 ; -- <0016> br and0z :skip_add
    0165 : 0169 ; -- <0016> "
    0166 : 0c05 ; -- <0017> j = y
    0167 : c800 ; -- <0018> i = i+j
    0168 : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0169
    0169 : 0004 ; -- <0020> a = x
    016a : 1350 ; -- <0021> x = a>>1
    016b : 0005 ; -- <0022> a = y
    016c : 1751 ; -- <0023> y = a<<1
    016d : e00f ; -- <0024> jmp :again
    016e : 0160 ; -- <0024> "
-- :done -- = 0x016f
    016f : 0002 ; -- <0026> a = i
    0170 : 1408 ; -- <0027> pop y -- end_func
    0171 : 1008 ; -- <0027> pop x -- "
    0172 : 0c08 ; -- <0027> pop j -- "
    0173 : 0808 ; -- <0027> pop i -- "
    0174 : fc00 ; -- <0027> end_func

-- ######## func divide -- = 0x0175
    0175 : 2002 ; -- <0029> push i -- func divide
    0176 : 2003 ; -- <0029> push j -- "
    0177 : 2004 ; -- <0029> push x -- "
    0178 : 2005 ; -- <0029> push y -- "
    0179 : 2006 ; -- <0029> push g6 -- "
    017a : 2007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    017b : e005 ; -- <0037> br lt :zero
    017c : 01b6 ; -- <0037> "
    017d : e000 ; -- <0038> br az :zero
    017e : 01b6 ; -- <0038> "
    017f : 1000 ; -- <0039> x = a
--    g7 = x
    0180 : 0001 ; -- <0041> a = b
    0181 : e000 ; -- <0042> br az :zero
    0182 : 01b6 ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    0183 : 0404 ; -- <0058> b = x
    0184 : 0a00 ; -- <0059> i = 0
    0185 : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x0186
    0186 : e006 ; -- <0062> br gt :shift_done
    0187 : 018c ; -- <0062> "
    0188 : 0351 ; -- <0063> a = a<<1
    0189 : 0b10 ; -- <0064> i = ad1
    018a : e00f ; -- <0065> jmp :shift_again
    018b : 0186 ; -- <0065> "
-- :shift_done -- = 0x018c
    018c : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    018d : 1e00 ; -- <0078> g7 = 0
    018e : 0f60 ; -- <0079> j = -1
-- :again -- = 0x018f
    018f : e001 ; -- <0081> br iz :done
    0190 : 01ad ; -- <0081> "
    0191 : 0006 ; -- <0082> a = g6
    0192 : 0404 ; -- <0083> b = x
    0193 : e006 ; -- <0084> br gt :result0
    0194 : 01a5 ; -- <0084> "
-- temp does fit; output a 1.
    0195 : 0007 ; -- <0086> a = g7
    0196 : 0351 ; -- <0087> a = a<<1
    0197 : 0601 ; -- <0088> b = 1
    0198 : c800 ; -- <0089> g7 = or
    0199 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    019a : 0006 ; -- <0091> a = g6
    019b : 0760 ; -- <0092> b = -1
    019c : c800 ; -- <0093> a = xor
    019d : 0338 ; -- <0093> "
    019e : 0601 ; -- <0094> b = 1
    019f : c800 ; -- <0095> y = a+b
    01a0 : 1700 ; -- <0095> "
    01a1 : c800 ; -- <0096> x = x+y
    01a2 : 1320 ; -- <0096> "
    01a3 : e00f ; -- <0097> jmp :next
    01a4 : 01a7 ; -- <0097> "
-- :result0 -- = 0x01a5
-- temp does not fit; output a 0.
    01a5 : 0007 ; -- <0100> a = g7
    01a6 : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01a7
    01a7 : 0006 ; -- <0104> a = g6
    01a8 : 1b50 ; -- <0105> g6 = a>>1
    01a9 : c800 ; -- <0106> i = i+j
    01aa : 0b10 ; -- <0106> "
    01ab : e00f ; -- <0107> jmp :again
    01ac : 018f ; -- <0107> "

-- :done -- = 0x01ad
    01ad : 0407 ; -- <0110> b = g7
    01ae : 0004 ; -- <0111> a = x
    01af : 1c08 ; -- <0112> pop g7 -- rtn
    01b0 : 1808 ; -- <0112> pop g6 -- "
    01b1 : 1408 ; -- <0112> pop y -- "
    01b2 : 1008 ; -- <0112> pop x -- "
    01b3 : 0c08 ; -- <0112> pop j -- "
    01b4 : 0808 ; -- <0112> pop i -- "
    01b5 : fc00 ; -- <0112> rtn

-- :zero -- = 0x01b6
    01b6 : 0600 ; -- <0115> b = 0
    01b7 : 1c08 ; -- <0116> pop g7 -- rtn
    01b8 : 1808 ; -- <0116> pop g6 -- "
    01b9 : 1408 ; -- <0116> pop y -- "
    01ba : 1008 ; -- <0116> pop x -- "
    01bb : 0c08 ; -- <0116> pop j -- "
    01bc : 0808 ; -- <0116> pop i -- "
    01bd : fc00 ; -- <0116> rtn
    01be : 1c08 ; -- <0117> pop g7 -- end_func
    01bf : 1808 ; -- <0117> pop g6 -- "
    01c0 : 1408 ; -- <0117> pop y -- "
    01c1 : 1008 ; -- <0117> pop x -- "
    01c2 : 0c08 ; -- <0117> pop j -- "
    01c3 : 0808 ; -- <0117> pop i -- "
    01c4 : fc00 ; -- <0117> end_func


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01c5
    01c5 : 0601 ; -- <0005> b = 1
    01c6 : e003 ; -- <0006> br and0z :pick_byte_even
    01c7 : 01d0 ; -- <0006> "
    01c8 : 0350 ; -- <0007> a = a>>1
    01c9 : 0404 ; -- <0008> b = x
    01ca : c800 ; -- <0009> fetch a from a+b
    01cb : d300 ; -- <0009> "
    01cc : 03b0 ; -- <0009> "
    01cd : 0353 ; -- <0010> a = a>>4
    01ce : 0353 ; -- <0011> a = a>>4
    01cf : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x01d0
    01d0 : 0350 ; -- <0014> a = a>>1
    01d1 : 0404 ; -- <0015> b = x
    01d2 : c800 ; -- <0016> fetch a from a+b
    01d3 : d300 ; -- <0016> "
    01d4 : 03b0 ; -- <0016> "
    01d5 : 06ff ; -- <0017> b = 0xff
    01d6 : c800 ; -- <0018> a = and
    01d7 : 0330 ; -- <0018> "
    01d8 : fc00 ; -- <0019> end_func

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01d9
    01d9 : 2002 ; -- <0027> push i -- func find_in_fetch
    01da : 2003 ; -- <0027> push j -- "
    01db : 2005 ; -- <0027> push y -- "
    01dc : 203e ; -- <0027> push rtna -- "
    01dd : 1400 ; -- <0028> y = a
    01de : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01df
    01df : e001 ; -- <0031> br iz :fail
    01e0 : 01ef ; -- <0031> "
    01e1 : 0b10 ; -- <0032> i = ad1
    01e2 : 0002 ; -- <0033> a = i
    01e3 : fba0 ; -- <0034> call :fetch_byte
    01e4 : 01c5 ; -- <0034> "
    01e5 : fc00 ; -- <0034> "
    01e6 : 0405 ; -- <0035> b = y
    01e7 : e407 ; -- <0036> bn eq :again
    01e8 : 01df ; -- <0036> "
-- :found -- = 0x01e9
    01e9 : 0002 ; -- <0038> a = i
    01ea : f808 ; -- <0039> pop rtna -- rtn
    01eb : 1408 ; -- <0039> pop y -- "
    01ec : 0c08 ; -- <0039> pop j -- "
    01ed : 0808 ; -- <0039> pop i -- "
    01ee : fc00 ; -- <0039> rtn
-- :fail -- = 0x01ef
    01ef : 0360 ; -- <0041> a = -1
    01f0 : f808 ; -- <0042> pop rtna -- end_func
    01f1 : 1408 ; -- <0042> pop y -- "
    01f2 : 0c08 ; -- <0042> pop j -- "
    01f3 : 0808 ; -- <0042> pop i -- "
    01f4 : fc00 ; -- <0042> end_func


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x01f5
    01f5 : 2004 ; -- <0002> push x -- func spinwait
    01f6 : 2005 ; -- <0002> push y -- "
--patch
--rtn
    01f7 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x01f8
    01f8 : 13a0 ; -- <0007> x = 16666
    01f9 : 411a ; -- <0007> "
    01fa : 1760 ; -- <0008> y = -1
    01fb : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x01fc
-- use of the ad2 name overrides auto-nop here.
    01fc : 1320 ; -- <0012> x = ad2
    01fd : e402 ; -- <0013> bn xz :spinwait_inner
    01fe : 01fc ; -- <0013> "
    01ff : c800 ; -- <0014> a = a+b
    0200 : 0300 ; -- <0014> "
    0201 : e400 ; -- <0015> bn az :spinwait_outer
    0202 : 01f8 ; -- <0015> "
    0203 : 1408 ; -- <0016> pop y -- end_func
    0204 : 1008 ; -- <0016> pop x -- "
    0205 : fc00 ; -- <0016> end_func



-- string resources
-- :boot_msg -- = 0x0206
-- "TGT\r\n\x0"
    0206 : 4754 ; -- <0184> GT
    0207 : 0d54 ; -- <0184>  T
    0208 : 000a ; -- <0184>   

-- #########################################################################
-- :main -- = 0x0209
    0209 : 03a0 ; -- <0188> a = :boot_msg
    020a : 0206 ; -- <0188> "
    020b : fba0 ; -- <0189> call :print_nt
    020c : 0138 ; -- <0189> "
    020d : fc00 ; -- <0189> "

-- clear the first 64k of RAM.
    020e : 4a00 ; -- <0192> av_ad_hi = 0
    020f : 0200 ; -- <0193> a = 0
    0210 : 0602 ; -- <0194> b = 2
-- :clear_next_word -- = 0x0211
    0211 : 4c00 ; -- <0196> av_ad_lo = a
    0212 : 4200 ; -- <0197> av_write_data = 0
    0213 : 0300 ; -- <0198> a = ad0
    0214 : e400 ; -- <0199> bn az :clear_next_word
    0215 : 0211 ; -- <0199> "

-- init RAM variables.
    0216 : 4a00 ; -- <0202> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0217 : 4e08 ; -- <0202> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 8
    0218 : 4360 ; -- <0202> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0219 : 4a00 ; -- <0203> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    021a : 4e0a ; -- <0203> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 10
    021b : 4202 ; -- <0203> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- init fuel injection.
    021c : 6fa0 ; -- <0206> ign_timeout_len_20us = 0xfffc
    021d : fffc ; -- <0206> "
    021e : 6ba0 ; -- <0207> efi_len_us = 3000
    021f : 0bb8 ; -- <0207> "
    0220 : fba0 ; -- <0208> call :set_engine_stopped
    0221 : 024e ; -- <0208> "
    0222 : fc00 ; -- <0208> "

-- power up FTDI USB board, and init any other special board control functions.
    0223 : 5e80 ; -- <0211> board_ctrl = $ftdi_power_mask
    0224 : fba0 ; -- <0212> call :postpone_comm_restart
    0225 : 0436 ; -- <0212> "
    0226 : fc00 ; -- <0212> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    0227 : 6600 ; -- <0219> power_duty = $power_duty_closing
    0228 : 0019 ; -- <0220> a = power_duty
    0229 : 06c0 ; -- <0221> b = ($power_lost_mask | $ign_switch_off_mask)
    022a : e003 ; -- <0222> br and0z :skip_power_lost
    022b : 0231 ; -- <0222> "
    022c : 6632 ; -- <0223> power_duty = $power_duty_opening
    022d : 5ba0 ; -- <0224> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    022e : fffb ; -- <0224> "
    022f : e00f ; -- <0224> error_halt_code $err_power_lost_at_boot
    0230 : 022f ; -- <0224> "
-- :skip_power_lost -- = 0x0231

-- start handling events.
    0231 : 2ba0 ; -- <0228> soft_event = $event_controller_reset_mask
    0232 : 8000 ; -- <0228> "
    0233 : 2a00 ; -- <0229> soft_event = 0
    0234 : 37a0 ; -- <0230> mstimer0 = 1000
    0235 : 03e8 ; -- <0230> "
    0236 : e00f ; -- <0231> jmp :poll_events
    0237 : 0077 ; -- <0231> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x0238
    0238 : 0077 ; -- <0236> ([label :poll_events])
    0239 : 0398 ; -- <0237> ([label :power_lost_handler])
    023a : 0264 ; -- <0238> ([label :ign_captured_handler])
    023b : 03c7 ; -- <0239> ([label :puff1_done_handler])
    023c : 02a8 ; -- <0240> ([label :ustimer0_handler])
    023d : 02aa ; -- <0241> ([label :spi_done_handler])
    023e : 02de ; -- <0242> ([label :mstimer0_handler])
    023f : 0309 ; -- <0243> ([label :mstimer1_handler])
    0240 : 0327 ; -- <0244> ([label :uart_rx_handler])
    0241 : 0337 ; -- <0245> ([label :uart_rx_overflow_handler])
    0242 : 033d ; -- <0246> ([label :uart_tx_overflow_handler])
    0243 : 0343 ; -- <0247> ([label :key0_handler])
    0244 : 034d ; -- <0248> ([label :key1_handler])
    0245 : 03aa ; -- <0249> ([label :ign_switch_off_handler])
    0246 : 03bd ; -- <0250> ([label :ign_switch_on_handler])
    0247 : 0357 ; -- <0251> ([label :softevent3_handler])
    0248 : 0359 ; -- <0252> ([label :softevent2_handler])
    0249 : 035b ; -- <0253> ([label :softevent1_handler])
    024a : 035d ; -- <0254> ([label :softevent0_handler])

-- #########################################################################

-- :engine_stopped_msg -- = 0x024b
-- "ESTP\x0"
    024b : 5345 ; -- <0259> SE
    024c : 5054 ; -- <0259> PT
    024d : 0000 ; -- <0259>   

-- ######## func set_engine_stopped -- = 0x024e
    024e : 203e ; -- <0261> push rtna -- func set_engine_stopped
    024f : 4a00 ; -- <0262> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    0250 : 4e32 ; -- <0262> ram $ram_rpm_valid = 0 -- av_ad_lo = 50
    0251 : 4200 ; -- <0262> ram $ram_rpm_valid = 0 -- av_write_data = 0
    0252 : 4a00 ; -- <0263> ram $ram_ign_history_idx = 0 -- av_ad_hi = 0
    0253 : 4e0c ; -- <0263> ram $ram_ign_history_idx = 0 -- av_ad_lo = 12
    0254 : 4200 ; -- <0263> ram $ram_ign_history_idx = 0 -- av_write_data = 0
-- for startup, look for RPM between 50 and 1160
    0255 : 4a00 ; -- <0265> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    0256 : 4e34 ; -- <0265> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 52
    0257 : 43a0 ; -- <0265> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    0258 : 025b ; -- <0265> "
    0259 : 4a00 ; -- <0266> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    025a : 4e36 ; -- <0266> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 54
    025b : 43a0 ; -- <0266> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    025c : 36b0 ; -- <0266> "

    025d : 03a0 ; -- <0268> a = :engine_stopped_msg
    025e : 024b ; -- <0268> "
    025f : fba0 ; -- <0269> call :set_text_flag
    0260 : 045f ; -- <0269> "
    0261 : fc00 ; -- <0269> "
    0262 : f808 ; -- <0270> pop rtna -- end_func
    0263 : fc00 ; -- <0270> end_func

-- func wrap_history_idx
-- :again
-- b = $ign_history_len
-- br lt :done
-- b = ([negate $ign_history_len])
-- a = a+b
-- jmp :again
-- :done
-- end_func

-- ######## event ign_captured_handler -- = 0x0264
-- discard outlier time.
    0264 : 001c ; -- <0284> a = ign_capture_jf
    0265 : 4a00 ; -- <0285> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    0266 : 4e34 ; -- <0285> ram b = $ram_ign_fastest_jf -- av_ad_lo = 52
    0267 : 0410 ; -- <0285> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    0268 : 0411 ; -- <0285> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle
    0269 : e005 ; -- <0286> br lt :done
    026a : 0335 ; -- <0286> "
    026b : 4a00 ; -- <0287> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    026c : 4e36 ; -- <0287> ram b = $ram_ign_slowest_jf -- av_ad_lo = 54
    026d : 0410 ; -- <0287> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    026e : 0411 ; -- <0287> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle
    026f : e006 ; -- <0288> br gt :done
    0270 : 0335 ; -- <0288> "

-- increment buffer index and memorize time.
    0271 : 4a00 ; -- <0291> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    0272 : 4e0c ; -- <0291> ram a = $ram_ign_history_idx -- av_ad_lo = 12
    0273 : 0010 ; -- <0291> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    0274 : 0011 ; -- <0291> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    0275 : 0601 ; -- <0292> b = 1
    0276 : c800 ; -- <0293> a = a+b
    0277 : 0300 ; -- <0293> "
    0278 : 060f ; -- <0294> b = $ign_history_idx_mask
    0279 : c800 ; -- <0295> a = and
    027a : 0330 ; -- <0295> "
    027b : e400 ; -- <0296> bn az :no_wrap
    027c : 0280 ; -- <0296> "
-- history buffer is full now.  average will be valid.
    027d : 4a00 ; -- <0298> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    027e : 4e32 ; -- <0298> ram $ram_rpm_valid = 1 -- av_ad_lo = 50
    027f : 4201 ; -- <0298> ram $ram_rpm_valid = 1 -- av_write_data = 1
-- :no_wrap -- = 0x0280
    0280 : 4a00 ; -- <0300> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    0281 : 4e0c ; -- <0300> ram $ram_ign_history_idx = a -- av_ad_lo = 12
    0282 : 4000 ; -- <0300> ram $ram_ign_history_idx = a -- av_write_data = a
    0283 : 041c ; -- <0301> b = ign_capture_jf

    0284 : 0351 ; -- <0302> a = a<<1
    0285 : 2001 ; -- <0302> push b -- push b
    0286 : 060e ; -- <0302> b = 14
    0287 : 4a00 ; -- <0302> av_ad_hi = 0
    0288 : 4f00 ; -- <0302> av_ad_lo = ad0
    0289 : 4008 ; -- <0302> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.

-- -- first, total up the oldest 25% of the history
-- -- this doesn't work above 2^14 jf.  that's below 44 RPM.
-- -- reg a must be already loaded with the history index most recently written.
-- -- a=index, i=total, x=loop count.
-- i = 0
-- x = $ign_history_quarter
-- y = -1
-- :next_oldest
-- b = 1
-- a = a+b
-- b = $ign_history_idx_mask
-- a = and
-- struct_read j = $ram_ign_history_jf a
-- i = i+j
-- x = x+y
-- bn xz :next_oldest
-- -- memorize average.
-- a = i
-- << for {set n 0} {$n < $ign_avg_shift} {incr n} {parse3 a = a>>1 {}} >>
-- ram $ram_ign_oldest_avg_jf = a

-- average entire history.
-- x = total, i = index = loop count
    028a : 1200 ; -- <0329> x = 0
    028b : 0a10 ; -- <0330> i = $ign_history_len
    028c : 0f60 ; -- <0331> j = -1
-- :next_avg -- = 0x028d
    028d : 0002 ; -- <0333> a = i

    028e : 0351 ; -- <0334> a = a<<1
    028f : 060e ; -- <0334> b = 14
    0290 : 4a00 ; -- <0334> av_ad_hi = 0
    0291 : 4f00 ; -- <0334> av_ad_lo = ad0
    0292 : 0410 ; -- <0334> b = av_write_data
    0293 : 0411 ; -- <0334> b = av_read_data

    0294 : 0001 ; -- <0335> a = b
    0295 : 1753 ; -- <0336> y = a>>$ign_history_idx_bits
    0296 : c800 ; -- <0337> x = x+y
    0297 : 1320 ; -- <0337> "
    0298 : c800 ; -- <0338> i = i+j
    0299 : 0b10 ; -- <0338> "
    029a : e401 ; -- <0339> bn iz :next_avg
    029b : 028d ; -- <0339> "
    029c : 4a00 ; -- <0340> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    029d : 4e2e ; -- <0340> ram $ram_ign_avg_jf = x -- av_ad_lo = 46
    029e : 4004 ; -- <0340> ram $ram_ign_avg_jf = x -- av_write_data = x

-- convert jiffies b to new RPM estimate.
    029f : 0004 ; -- <0343> a = x
    02a0 : fba0 ; -- <0344> call :jf_to_rpm
    02a1 : 04a3 ; -- <0344> "
    02a2 : fc00 ; -- <0344> "
    02a3 : 4a00 ; -- <0345> ram $ram_avg_rpm = a -- av_ad_hi = 0
    02a4 : 4e30 ; -- <0345> ram $ram_avg_rpm = a -- av_ad_lo = 48
    02a5 : 4000 ; -- <0345> ram $ram_avg_rpm = a -- av_write_data = a

-- :done -- = 0x02a6
    02a6 : e00f ; -- <0348> end_event
    02a7 : 0077 ; -- <0348> "

-- ######## event ustimer0_handler -- = 0x02a8
    02a8 : e00f ; -- <0351> end_event
    02a9 : 0077 ; -- <0351> "

-- ######## event spi_done_handler -- = 0x02aa
-- discard-counter in RAM.
    02aa : 4a00 ; -- <0355> ram a = $ram_daq_discard_cnt -- av_ad_hi = 0
    02ab : 4e06 ; -- <0355> ram a = $ram_daq_discard_cnt -- av_ad_lo = 6
    02ac : 0010 ; -- <0355> ram a = $ram_daq_discard_cnt -- a = av_write_data -- start read cycle
    02ad : 0011 ; -- <0355> ram a = $ram_daq_discard_cnt -- a = av_read_data -- finish read cycle
    02ae : e000 ; -- <0356> br az :report
    02af : 02bc ; -- <0356> "
    02b0 : 0760 ; -- <0357> b = -1
    02b1 : c800 ; -- <0358> a = a+b
    02b2 : 0300 ; -- <0358> "
    02b3 : 4a00 ; -- <0359> ram $ram_daq_discard_cnt = a -- av_ad_hi = 0
    02b4 : 4e06 ; -- <0359> ram $ram_daq_discard_cnt = a -- av_ad_lo = 6
    02b5 : 4000 ; -- <0359> ram $ram_daq_discard_cnt = a -- av_write_data = a
    02b6 : 0207 ; -- <0360> a = $anmux_adc_channel
    02b7 : fba0 ; -- <0361> call :begin_adc_conversion
    02b8 : 0391 ; -- <0361> "
    02b9 : fc00 ; -- <0361> "
    02ba : e00f ; -- <0362> event_return
    02bb : 0077 ; -- <0362> "

-- report ADC reading.
-- :report -- = 0x02bc
    02bc : 000f ; -- <0366> a = spi_data
    02bd : fba0 ; -- <0367> call :put4x
    02be : 00ac ; -- <0367> "
    02bf : fc00 ; -- <0367> "

-- decrement anmux channel & start waiting again.
    02c0 : fba0 ; -- <0370> call :anmux_get_chn
    02c1 : 009f ; -- <0370> "
    02c2 : fc00 ; -- <0370> "
    02c3 : e000 ; -- <0371> br az :all_done
    02c4 : 02ce ; -- <0371> "
    02c5 : 0760 ; -- <0372> b = -1
    02c6 : c800 ; -- <0373> a = a+b
    02c7 : 0300 ; -- <0373> "
    02c8 : fba0 ; -- <0374> call :anmux_set_chn
    02c9 : 009b ; -- <0374> "
    02ca : fc00 ; -- <0374> "
    02cb : 3a05 ; -- <0375> mstimer1 = $anmux_settle_ms
    02cc : e00f ; -- <0376> event_return
    02cd : 0077 ; -- <0376> "

-- end of daq pass.
-- :all_done -- = 0x02ce
    02ce : fba0 ; -- <0380> call :report_text_flags
    02cf : 0478 ; -- <0380> "
    02d0 : fc00 ; -- <0380> "
    02d1 : 020d ; -- <0381> a = 13 -- puteol
    02d2 : fba0 ; -- <0381> puteol
    02d3 : 0084 ; -- <0381> "
    02d4 : fc00 ; -- <0381> "
    02d5 : 020a ; -- <0381> a = 10 -- puteol
    02d6 : fba0 ; -- <0381> puteol
    02d7 : 0084 ; -- <0381> "
    02d8 : fc00 ; -- <0381> "
    02d9 : 4a00 ; -- <0382> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    02da : 4e3e ; -- <0382> ram $ram_dial_setting = spi_data -- av_ad_lo = 62
    02db : 400f ; -- <0382> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    02dc : e00f ; -- <0383> end_event
    02dd : 0077 ; -- <0383> "

-- ######## event mstimer0_handler -- = 0x02de
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    02de : 37a0 ; -- <0389> mstimer0 = 1000
    02df : 03e8 ; -- <0389> "

-- realtime counters in RAM.
    02e0 : 4a00 ; -- <0392> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    02e1 : 4e3a ; -- <0392> ram a = $ram_seconds_cnt -- av_ad_lo = 58
    02e2 : 0010 ; -- <0392> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    02e3 : 0011 ; -- <0392> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    02e4 : 0601 ; -- <0393> b = 1
    02e5 : c800 ; -- <0394> a = a+b
    02e6 : 0300 ; -- <0394> "
    02e7 : 063c ; -- <0395> b = 60
    02e8 : e407 ; -- <0396> bn eq :same_minute
    02e9 : 02fb ; -- <0396> "
    02ea : 4a00 ; -- <0397> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    02eb : 4e3a ; -- <0397> ram $ram_seconds_cnt = 0 -- av_ad_lo = 58
    02ec : 4200 ; -- <0397> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    02ed : 4a00 ; -- <0398> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    02ee : 4e38 ; -- <0398> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    02ef : 0010 ; -- <0398> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    02f0 : 0011 ; -- <0398> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    02f1 : 0601 ; -- <0399> b = 1
    02f2 : 4a00 ; -- <0400> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    02f3 : 4e38 ; -- <0400> ram $ram_minutes_cnt = a+b -- av_ad_lo = 56
    02f4 : c800 ; -- <0400> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    02f5 : 4300 ; -- <0400> "
    02f6 : fba0 ; -- <0401> call :minute_events
    02f7 : 03d4 ; -- <0401> "
    02f8 : fc00 ; -- <0401> "
    02f9 : e00f ; -- <0402> jmp :minutes_done
    02fa : 02fe ; -- <0402> "
-- :same_minute -- = 0x02fb
    02fb : 4a00 ; -- <0404> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    02fc : 4e3a ; -- <0404> ram $ram_seconds_cnt = a -- av_ad_lo = 58
    02fd : 4000 ; -- <0404> ram $ram_seconds_cnt = a -- av_write_data = a
-- :minutes_done -- = 0x02fe

    02fe : fba0 ; -- <0407> call :check_power_relay
    02ff : 03dc ; -- <0407> "
    0300 : fc00 ; -- <0407> "
    0301 : fba0 ; -- <0408> call :check_communication
    0302 : 040b ; -- <0408> "
    0303 : fc00 ; -- <0408> "
    0304 : fba0 ; -- <0409> call :start_daq_pass
    0305 : 0366 ; -- <0409> "
    0306 : fc00 ; -- <0409> "
    0307 : e00f ; -- <0410> end_event
    0308 : 0077 ; -- <0410> "

-- ######## event mstimer1_handler -- = 0x0309
-- start a reading from the current anmux channel.
    0309 : 4a00 ; -- <0414> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_hi = 0
    030a : 4e06 ; -- <0414> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_lo = 6
    030b : 4202 ; -- <0414> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_write_data = 2
    030c : 0220 ; -- <0415> a = 32 -- putasc " "
    030d : fba0 ; -- <0415> putasc " "
    030e : 0084 ; -- <0415> "
    030f : fc00 ; -- <0415> "
    0310 : 0273 ; -- <0416> a = 115 -- putasc "s"
    0311 : fba0 ; -- <0416> putasc "s"
    0312 : 0084 ; -- <0416> "
    0313 : fc00 ; -- <0416> "
    0314 : fba0 ; -- <0417> call :anmux_get_chn
    0315 : 009f ; -- <0417> "
    0316 : fc00 ; -- <0417> "
    0317 : 0630 ; -- <0418> b = 48 -- asc b = "0"
    0318 : c800 ; -- <0419> a = a+b -- putchar a+b
    0319 : 0300 ; -- <0419> "
    031a : fba0 ; -- <0419> putchar a+b
    031b : 0084 ; -- <0419> "
    031c : fc00 ; -- <0419> "
    031d : 023d ; -- <0420> a = 61 -- putasc "="
    031e : fba0 ; -- <0420> putasc "="
    031f : 0084 ; -- <0420> "
    0320 : fc00 ; -- <0420> "
    0321 : 0207 ; -- <0421> a = $anmux_adc_channel
    0322 : fba0 ; -- <0422> call :begin_adc_conversion
    0323 : 0391 ; -- <0422> "
    0324 : fc00 ; -- <0422> "
    0325 : e00f ; -- <0423> end_event
    0326 : 0077 ; -- <0423> "

-- ######## event uart_rx_handler -- = 0x0327
-- :again -- = 0x0327
    0327 : fba0 ; -- <0427> pollchar
    0328 : 0093 ; -- <0427> "
    0329 : fc00 ; -- <0427> "
    032a : 0760 ; -- <0428> b = -1
    032b : e007 ; -- <0429> br eq :done
    032c : 02a6 ; -- <0429> "
    032d : 060a ; -- <0430> b = 10
    032e : e407 ; -- <0431> bn eq :skip_lf
    032f : 0333 ; -- <0431> "
    0330 : fba0 ; -- <0432> call :postpone_comm_restart
    0331 : 0436 ; -- <0432> "
    0332 : fc00 ; -- <0432> "
-- :skip_lf -- = 0x0333
    0333 : e00f ; -- <0434> jmp :again
    0334 : 0327 ; -- <0434> "
-- :done -- = 0x0335
    0335 : e00f ; -- <0436> end_event
    0336 : 0077 ; -- <0436> "

-- ######## event uart_rx_overflow_handler -- = 0x0337
    0337 : 5ba0 ; -- <0439> error_halt_code $err_rx_overflow -- leds = 0xfffe
    0338 : fffe ; -- <0439> "
    0339 : e00f ; -- <0439> error_halt_code $err_rx_overflow
    033a : 0339 ; -- <0439> "
    033b : e00f ; -- <0440> end_event
    033c : 0077 ; -- <0440> "

-- ######## event uart_tx_overflow_handler -- = 0x033d
    033d : 5ba0 ; -- <0443> error_halt_code $err_tx_overflow -- leds = 0xfffd
    033e : fffd ; -- <0443> "
    033f : e00f ; -- <0443> error_halt_code $err_tx_overflow
    0340 : 033f ; -- <0443> "
    0341 : e00f ; -- <0444> end_event
    0342 : 0077 ; -- <0444> "

-- ######## event key0_handler -- = 0x0343
    0343 : 026b ; -- <0447> a = 107 -- putasc "k"
    0344 : fba0 ; -- <0447> putasc "k"
    0345 : 0084 ; -- <0447> "
    0346 : fc00 ; -- <0447> "
    0347 : 0230 ; -- <0448> a = 48 -- putasc "0"
    0348 : fba0 ; -- <0448> putasc "0"
    0349 : 0084 ; -- <0448> "
    034a : fc00 ; -- <0448> "
    034b : e00f ; -- <0449> end_event
    034c : 0077 ; -- <0449> "

-- ######## event key1_handler -- = 0x034d
    034d : 026b ; -- <0452> a = 107 -- putasc "k"
    034e : fba0 ; -- <0452> putasc "k"
    034f : 0084 ; -- <0452> "
    0350 : fc00 ; -- <0452> "
    0351 : 0231 ; -- <0453> a = 49 -- putasc "1"
    0352 : fba0 ; -- <0453> putasc "1"
    0353 : 0084 ; -- <0453> "
    0354 : fc00 ; -- <0453> "
    0355 : e00f ; -- <0454> end_event
    0356 : 0077 ; -- <0454> "

-- ######## event softevent3_handler -- = 0x0357
    0357 : e00f ; -- <0457> end_event
    0358 : 0077 ; -- <0457> "

-- ######## event softevent2_handler -- = 0x0359
    0359 : e00f ; -- <0460> end_event
    035a : 0077 ; -- <0460> "

-- ######## event softevent1_handler -- = 0x035b
    035b : e00f ; -- <0463> end_event
    035c : 0077 ; -- <0463> "

-- ######## event softevent0_handler -- = 0x035d
    035d : e00f ; -- <0466> end_event
    035e : 0077 ; -- <0466> "

-- :rpm_msg -- = 0x035f
-- ": rpm=\x0"
    035f : 203a ; -- <0469>  :
    0360 : 7072 ; -- <0469> pr
    0361 : 3d6d ; -- <0469> =m
    0362 : 0000 ; -- <0469>   

-- :efi_len_msg -- = 0x0363
-- " efi=\x0"
    0363 : 6520 ; -- <0472> e 
    0364 : 6966 ; -- <0472> if
    0365 : 003d ; -- <0472>  =

-- ######## func start_daq_pass -- = 0x0366
    0366 : 203e ; -- <0474> push rtna -- func start_daq_pass
-- daq pass counter in RAM.
    0367 : 4a00 ; -- <0476> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0368 : 4e04 ; -- <0476> ram a = $ram_daq_pass_cnt -- av_ad_lo = 4
    0369 : 0010 ; -- <0476> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    036a : 0011 ; -- <0476> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    036b : 0601 ; -- <0477> b = 1
    036c : c800 ; -- <0478> a = a+b
    036d : 0300 ; -- <0478> "
    036e : 5800 ; -- <0479> leds = a
    036f : 4a00 ; -- <0480> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    0370 : 4e04 ; -- <0480> ram $ram_daq_pass_cnt = a -- av_ad_lo = 4
    0371 : 4000 ; -- <0480> ram $ram_daq_pass_cnt = a -- av_write_data = a
    0372 : fba0 ; -- <0481> call :put4x
    0373 : 00ac ; -- <0481> "
    0374 : fc00 ; -- <0481> "

    0375 : 03a0 ; -- <0483> a = :rpm_msg
    0376 : 035f ; -- <0483> "
    0377 : fba0 ; -- <0484> call :print_nt
    0378 : 0138 ; -- <0484> "
    0379 : fc00 ; -- <0484> "
    037a : 4a00 ; -- <0485> ram a = $ram_avg_rpm -- av_ad_hi = 0
    037b : 4e30 ; -- <0485> ram a = $ram_avg_rpm -- av_ad_lo = 48
    037c : 0010 ; -- <0485> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    037d : 0011 ; -- <0485> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    037e : fba0 ; -- <0486> call :put4x
    037f : 00ac ; -- <0486> "
    0380 : fc00 ; -- <0486> "

    0381 : 03a0 ; -- <0488> a = :efi_len_msg
    0382 : 0363 ; -- <0488> "
    0383 : fba0 ; -- <0489> call :print_nt
    0384 : 0138 ; -- <0489> "
    0385 : fc00 ; -- <0489> "
    0386 : 001a ; -- <0490> a = efi_len_us
    0387 : fba0 ; -- <0491> call :put4x
    0388 : 00ac ; -- <0491> "
    0389 : fc00 ; -- <0491> "

-- start to acquire & report all anmux channels.
    038a : 0207 ; -- <0494> a = 7
    038b : fba0 ; -- <0495> call :anmux_set_chn
    038c : 009b ; -- <0495> "
    038d : fc00 ; -- <0495> "
    038e : 3a05 ; -- <0496> mstimer1 = $anmux_settle_ms

-- -- observe MCU utilization.
-- a = usage_count
-- call :put4x
-- usage_count = 0
    038f : f808 ; -- <0502> pop rtna -- end_func
    0390 : fc00 ; -- <0502> end_func

-- ######## func begin_adc_conversion -- = 0x0391
-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.  pass that in a.

    0391 : 0352 ; -- <0508> a = a<<4
    0392 : 0352 ; -- <0509> a = a<<4
    0393 : 0351 ; -- <0510> a = a<<1
    0394 : 0351 ; -- <0511> a = a<<1
    0395 : 0351 ; -- <0512> a = a<<1
    0396 : 3c00 ; -- <0513> spi_data = a
    0397 : fc00 ; -- <0514> end_func

-- ######## event power_lost_handler -- = 0x0398
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    0398 : 6600 ; -- <0523> power_duty = $power_duty_closing
    0399 : 4a00 ; -- <0524> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    039a : 4e04 ; -- <0524> ram a = $ram_daq_pass_cnt -- av_ad_lo = 4
    039b : 0010 ; -- <0524> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    039c : 0011 ; -- <0524> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    039d : 0602 ; -- <0525> b = $relay_hold_passes
    039e : 4a00 ; -- <0526> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    039f : 4e0a ; -- <0526> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 10
    03a0 : c800 ; -- <0526> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    03a1 : 4300 ; -- <0526> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    03a2 : fba0 ; -- <0531> call :save_persistent_data
    03a3 : 040a ; -- <0531> "
    03a4 : fc00 ; -- <0531> "
    03a5 : e00f ; -- <0532> end_event
    03a6 : 0077 ; -- <0532> "

-- :ign_off_msg -- = 0x03a7
-- "IGOF\x0"
    03a7 : 4749 ; -- <0535> GI
    03a8 : 464f ; -- <0535> FO
    03a9 : 0000 ; -- <0535>   

-- ######## event ign_switch_off_handler -- = 0x03aa
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    03aa : 4a00 ; -- <0539> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    03ab : 4e38 ; -- <0539> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    03ac : 0010 ; -- <0539> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    03ad : 0011 ; -- <0539> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    03ae : 060a ; -- <0540> b = $power_extend_minutes
    03af : 4a00 ; -- <0541> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    03b0 : 4e08 ; -- <0541> ram $ram_power_down_at_min = a+b -- av_ad_lo = 8
    03b1 : c800 ; -- <0541> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    03b2 : 4300 ; -- <0541> "
    03b3 : 03a0 ; -- <0542> a = :ign_off_msg
    03b4 : 03a7 ; -- <0542> "
    03b5 : fba0 ; -- <0543> call :set_text_flag
    03b6 : 045f ; -- <0543> "
    03b7 : fc00 ; -- <0543> "
    03b8 : e00f ; -- <0544> end_event
    03b9 : 0077 ; -- <0544> "

-- :ign_on_msg -- = 0x03ba
-- "IGON\x0"
    03ba : 4749 ; -- <0547> GI
    03bb : 4e4f ; -- <0547> NO
    03bc : 0000 ; -- <0547>   

-- ######## event ign_switch_on_handler -- = 0x03bd
    03bd : 4a00 ; -- <0550> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    03be : 4e08 ; -- <0550> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 8
    03bf : 4360 ; -- <0550> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    03c0 : 03a0 ; -- <0551> a = :ign_on_msg
    03c1 : 03ba ; -- <0551> "
    03c2 : fba0 ; -- <0552> call :set_text_flag
    03c3 : 045f ; -- <0552> "
    03c4 : fc00 ; -- <0552> "
    03c5 : e00f ; -- <0553> end_event
    03c6 : 0077 ; -- <0553> "

-- ######## event puff1_done_handler -- = 0x03c7
    03c7 : 4a00 ; -- <0556> ram a = $ram_dial_setting -- av_ad_hi = 0
    03c8 : 4e3e ; -- <0556> ram a = $ram_dial_setting -- av_ad_lo = 62
    03c9 : 0010 ; -- <0556> ram a = $ram_dial_setting -- a = av_write_data -- start read cycle
    03ca : 0011 ; -- <0556> ram a = $ram_dial_setting -- a = av_read_data -- finish read cycle
    03cb : 0351 ; -- <0557> a = a<<1
    03cc : 0351 ; -- <0558> a = a<<1
    03cd : 0351 ; -- <0559> a = a<<1
    03ce : e400 ; -- <0560> bn az :nonzero
    03cf : 03d1 ; -- <0560> "
    03d0 : 0201 ; -- <0561> a = 1
-- :nonzero -- = 0x03d1
    03d1 : 6800 ; -- <0563> efi_len_us = a
    03d2 : e00f ; -- <0564> end_event
    03d3 : 0077 ; -- <0564> "

-- ######## func minute_events -- = 0x03d4
    03d4 : 203e ; -- <0566> push rtna -- func minute_events
    03d5 : fba0 ; -- <0567> call :check_power_down
    03d6 : 03ef ; -- <0567> "
    03d7 : fc00 ; -- <0567> "
    03d8 : f808 ; -- <0568> pop rtna -- end_func
    03d9 : fc00 ; -- <0568> end_func

-- :power_hold_msg -- = 0x03da
-- "PWH\x0"
    03da : 5750 ; -- <0571> WP
    03db : 0048 ; -- <0571>  H

-- ######## func check_power_relay -- = 0x03dc
    03dc : 203e ; -- <0573> push rtna -- func check_power_relay
    03dd : 4a00 ; -- <0574> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03de : 4e04 ; -- <0574> ram a = $ram_daq_pass_cnt -- av_ad_lo = 4
    03df : 0010 ; -- <0574> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03e0 : 0011 ; -- <0574> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03e1 : 4a00 ; -- <0575> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    03e2 : 4e0a ; -- <0575> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 10
    03e3 : 0410 ; -- <0575> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    03e4 : 0411 ; -- <0575> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle
    03e5 : e407 ; -- <0576> bn eq :done
    03e6 : 03ed ; -- <0576> "
-- time to begin "solenoid saver" coil power reduction by PWM.
    03e7 : 6619 ; -- <0578> power_duty = $power_duty_holding
    03e8 : 03a0 ; -- <0579> a = :power_hold_msg
    03e9 : 03da ; -- <0579> "
    03ea : fba0 ; -- <0580> call :set_text_flag
    03eb : 045f ; -- <0580> "
    03ec : fc00 ; -- <0580> "
-- :done -- = 0x03ed
    03ed : f808 ; -- <0582> pop rtna -- end_func
    03ee : fc00 ; -- <0582> end_func

-- ######## func check_power_down -- = 0x03ef
    03ef : 203e ; -- <0584> push rtna -- func check_power_down
-- check power-down deadline in RAM.
    03f0 : 4a00 ; -- <0586> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    03f1 : 4e38 ; -- <0586> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    03f2 : 0010 ; -- <0586> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    03f3 : 0011 ; -- <0586> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    03f4 : 4a00 ; -- <0587> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    03f5 : 4e08 ; -- <0587> ram b = $ram_power_down_at_min -- av_ad_lo = 8
    03f6 : 0410 ; -- <0587> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    03f7 : 0411 ; -- <0587> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle
    03f8 : e407 ; -- <0588> bn eq :done
    03f9 : 03fd ; -- <0588> "
    03fa : fba0 ; -- <0589> call :power_down
    03fb : 03ff ; -- <0589> "
    03fc : fc00 ; -- <0589> "
-- :done -- = 0x03fd
    03fd : f808 ; -- <0591> pop rtna -- end_func
    03fe : fc00 ; -- <0591> end_func

-- ######## func power_down -- = 0x03ff
    03ff : 203e ; -- <0593> push rtna -- func power_down
-- this function never returns.
    0400 : fba0 ; -- <0595> call :save_persistent_data
    0401 : 040a ; -- <0595> "
    0402 : fc00 ; -- <0595> "
    0403 : 6632 ; -- <0596> power_duty = $power_duty_opening
    0404 : 5ba0 ; -- <0597> error_halt_code $err_power_down -- leds = 0xfffc
    0405 : fffc ; -- <0597> "
    0406 : e00f ; -- <0597> error_halt_code $err_power_down
    0407 : 0406 ; -- <0597> "
    0408 : f808 ; -- <0598> pop rtna -- end_func
    0409 : fc00 ; -- <0598> end_func

-- ######## func save_persistent_data -- = 0x040a
    040a : fc00 ; -- <0601> end_func

-- ######## func check_communication -- = 0x040b
    040b : 203e ; -- <0603> push rtna -- func check_communication
    040c : 4a00 ; -- <0604> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    040d : 4e02 ; -- <0604> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 2
    040e : 0010 ; -- <0604> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    040f : 0011 ; -- <0604> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle
    0410 : e000 ; -- <0605> br az :skip_ftdi_powerup
    0411 : 0421 ; -- <0605> "
    0412 : 0760 ; -- <0606> b = -1
    0413 : c800 ; -- <0607> a = a+b
    0414 : 0300 ; -- <0607> "
    0415 : 4a00 ; -- <0608> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0416 : 4e02 ; -- <0608> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 2
    0417 : 4000 ; -- <0608> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a
    0418 : e000 ; -- <0609> br az :do_power_on
    0419 : 041c ; -- <0609> "
    041a : f808 ; -- <0610> pop rtna -- rtn
    041b : fc00 ; -- <0610> rtn
-- :do_power_on -- = 0x041c
    041c : fba0 ; -- <0612> call :ftdi_power_on
    041d : 0453 ; -- <0612> "
    041e : fc00 ; -- <0612> "
    041f : f808 ; -- <0613> pop rtna -- rtn
    0420 : fc00 ; -- <0613> rtn
-- :skip_ftdi_powerup -- = 0x0421

    0421 : 4a00 ; -- <0616> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0422 : 4e38 ; -- <0616> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    0423 : 0010 ; -- <0616> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0424 : 0011 ; -- <0616> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0425 : 4a00 ; -- <0617> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0426 : 4e00 ; -- <0617> ram b = $ram_comm_restart_at_min -- av_ad_lo = 0
    0427 : 0410 ; -- <0617> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0428 : 0411 ; -- <0617> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle
    0429 : e407 ; -- <0618> bn eq :done
    042a : 0434 ; -- <0618> "
-- comm restart is required.
    042b : fba0 ; -- <0620> call :postpone_comm_restart
    042c : 0436 ; -- <0620> "
    042d : fc00 ; -- <0620> "
    042e : 4a00 ; -- <0621> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    042f : 4e02 ; -- <0621> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 2
    0430 : 4205 ; -- <0621> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    0431 : fba0 ; -- <0622> call :ftdi_power_off
    0432 : 0443 ; -- <0622> "
    0433 : fc00 ; -- <0622> "
-- :done -- = 0x0434
    0434 : f808 ; -- <0624> pop rtna -- end_func
    0435 : fc00 ; -- <0624> end_func

-- ######## func postpone_comm_restart -- = 0x0436
    0436 : 4a00 ; -- <0627> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0437 : 4e38 ; -- <0627> ram a = $ram_minutes_cnt -- av_ad_lo = 56
    0438 : 0010 ; -- <0627> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0439 : 0011 ; -- <0627> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    043a : 0602 ; -- <0628> b = $comm_grace_period_min
    043b : 4a00 ; -- <0629> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    043c : 4e00 ; -- <0629> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 0
    043d : c800 ; -- <0629> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    043e : 4300 ; -- <0629> "
    043f : fc00 ; -- <0630> end_func

-- :ftdi_off_msg -- = 0x0440
-- "FTOF\x0"
    0440 : 5446 ; -- <0633> TF
    0441 : 464f ; -- <0633> FO
    0442 : 0000 ; -- <0633>   

-- ######## func ftdi_power_off -- = 0x0443
    0443 : 203e ; -- <0635> push rtna -- func ftdi_power_off
    0444 : 0017 ; -- <0636> a = board_ctrl
    0445 : 07a0 ; -- <0637> b = $not_ftdi_power_mask
    0446 : ff7f ; -- <0637> "
    0447 : c800 ; -- <0638> board_ctrl = and
    0448 : 5f30 ; -- <0638> "
    0449 : 03a0 ; -- <0639> a = :ftdi_off_msg
    044a : 0440 ; -- <0639> "
    044b : fba0 ; -- <0640> call :set_text_flag
    044c : 045f ; -- <0640> "
    044d : fc00 ; -- <0640> "
    044e : f808 ; -- <0641> pop rtna -- end_func
    044f : fc00 ; -- <0641> end_func

-- :ftdi_on_msg -- = 0x0450
-- "FTON\x0"
    0450 : 5446 ; -- <0644> TF
    0451 : 4e4f ; -- <0644> NO
    0452 : 0000 ; -- <0644>   

-- ######## func ftdi_power_on -- = 0x0453
    0453 : 203e ; -- <0646> push rtna -- func ftdi_power_on
    0454 : 0017 ; -- <0647> a = board_ctrl
    0455 : 0680 ; -- <0648> b = $ftdi_power_mask
    0456 : c800 ; -- <0649> board_ctrl = or
    0457 : 5f34 ; -- <0649> "
    0458 : 03a0 ; -- <0650> a = :ftdi_on_msg
    0459 : 0450 ; -- <0650> "
    045a : fba0 ; -- <0651> call :set_text_flag
    045b : 045f ; -- <0651> "
    045c : fc00 ; -- <0651> "
    045d : f808 ; -- <0652> pop rtna -- end_func
    045e : fc00 ; -- <0652> end_func

-- ######## func set_text_flag -- = 0x045f
    045f : 0400 ; -- <0655> b = a
    0460 : 4a00 ; -- <0656> ram a = $ram_next_tfp -- av_ad_hi = 0
    0461 : 4e50 ; -- <0656> ram a = $ram_next_tfp -- av_ad_lo = 80
    0462 : 0010 ; -- <0656> ram a = $ram_next_tfp -- a = av_write_data -- start read cycle
    0463 : 0011 ; -- <0656> ram a = $ram_next_tfp -- a = av_read_data -- finish read cycle
    0464 : 2000 ; -- <0657> push a -- push a

    0465 : 0351 ; -- <0658> a = a<<1
    0466 : 2001 ; -- <0658> push b -- push b
    0467 : 0640 ; -- <0658> b = 64
    0468 : 4a00 ; -- <0658> av_ad_hi = 0
    0469 : 4f00 ; -- <0658> av_ad_lo = ad0
    046a : 4008 ; -- <0658> pop av_write_data -- pop av_write_data

    046b : 0008 ; -- <0659> pop a -- pop a
    046c : 0760 ; -- <0660> b = -1
    046d : c800 ; -- <0661> a = a+b
    046e : 0300 ; -- <0661> "
    046f : 0607 ; -- <0662> b = $tfp_mask
    0470 : 4a00 ; -- <0663> ram $ram_next_tfp = and -- av_ad_hi = 0
    0471 : 4e50 ; -- <0663> ram $ram_next_tfp = and -- av_ad_lo = 80
    0472 : c800 ; -- <0663> ram $ram_next_tfp = and -- av_write_data = and
    0473 : 4330 ; -- <0663> "
    0474 : fc00 ; -- <0664> end_func

-- :text_flags_msg -- = 0x0475
-- " tf=\x0"
    0475 : 7420 ; -- <0667> t 
    0476 : 3d66 ; -- <0667> =f
    0477 : 0000 ; -- <0667>   

-- ######## func report_text_flags -- = 0x0478
    0478 : 2002 ; -- <0669> push i -- func report_text_flags
    0479 : 2003 ; -- <0669> push j -- "
    047a : 203e ; -- <0669> push rtna -- "
    047b : 03a0 ; -- <0670> a = :text_flags_msg
    047c : 0475 ; -- <0670> "
    047d : fba0 ; -- <0671> call :print_nt
    047e : 0138 ; -- <0671> "
    047f : fc00 ; -- <0671> "
    0480 : 0a08 ; -- <0672> i = $num_text_flag_pointers
    0481 : 0f60 ; -- <0673> j = -1
-- :next_ptr -- = 0x0482
    0482 : c800 ; -- <0675> i = i+j
    0483 : 0b10 ; -- <0675> "
    0484 : 0002 ; -- <0676> a = i

    0485 : 0351 ; -- <0677> a = a<<1
    0486 : 0640 ; -- <0677> b = 64
    0487 : 4a00 ; -- <0677> av_ad_hi = 0
    0488 : 4f00 ; -- <0677> av_ad_lo = ad0
    0489 : 0410 ; -- <0677> b = av_write_data
    048a : 0411 ; -- <0677> b = av_read_data

    048b : 0001 ; -- <0678> a = b
    048c : e000 ; -- <0679> br az :skip
    048d : 049d ; -- <0679> "
    048e : fba0 ; -- <0680> call :print_nt
    048f : 0138 ; -- <0680> "
    0490 : fc00 ; -- <0680> "
    0491 : 022c ; -- <0681> a = 44 -- putasc ","
    0492 : fba0 ; -- <0681> putasc ","
    0493 : 0084 ; -- <0681> "
    0494 : fc00 ; -- <0681> "
    0495 : 0002 ; -- <0682> a = i
    0496 : 0600 ; -- <0683> b = 0

    0497 : 0351 ; -- <0684> a = a<<1
    0498 : 2001 ; -- <0684> push b -- push b
    0499 : 0640 ; -- <0684> b = 64
    049a : 4a00 ; -- <0684> av_ad_hi = 0
    049b : 4f00 ; -- <0684> av_ad_lo = ad0
    049c : 4008 ; -- <0684> pop av_write_data -- pop av_write_data

-- :skip -- = 0x049d
    049d : e401 ; -- <0686> bn iz :next_ptr
    049e : 0482 ; -- <0686> "
    049f : f808 ; -- <0687> pop rtna -- end_func
    04a0 : 0c08 ; -- <0687> pop j -- "
    04a1 : 0808 ; -- <0687> pop i -- "
    04a2 : fc00 ; -- <0687> end_func

-- ######## func jf_to_rpm -- = 0x04a3
    04a3 : 203e ; -- <0689> push rtna -- func jf_to_rpm
-- pass jiffies in a.  return rpm in a.
-- resolution = 32 rpm.
    04a4 : 0400 ; -- <0692> b = a
    04a5 : 03a0 ; -- <0693> a = 0x5573
    04a6 : 5573 ; -- <0693> "
-- = 700000 >> 5
    04a7 : fba0 ; -- <0695> call :divide
    04a8 : 0175 ; -- <0695> "
    04a9 : fc00 ; -- <0695> "
    04aa : 0001 ; -- <0696> a = b
    04ab : 0352 ; -- <0697> a = a<<4
    04ac : 0351 ; -- <0698> a = a<<1
    04ad : f808 ; -- <0699> pop rtna -- end_func
    04ae : fc00 ; -- <0699> end_func

-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 g6
-- src reg 0007 g7
-- src reg 0008 rstk
-- src reg 0009 event_priority
-- src reg 000a soft_event
-- src reg 000b usage_count
-- src reg 000c ustimer0
-- src reg 000d mstimer0
-- src reg 000e mstimer1
-- src reg 000f spi_data
-- src reg 0010 av_write_data
-- src reg 0011 av_read_data
-- src reg 0012 av_ad_hi
-- src reg 0013 av_ad_lo
-- src reg 0014 fduart_data
-- src reg 0015 fduart_status
-- src reg 0016 leds
-- src reg 0017 board_ctrl
-- src reg 0018 anmux_ctrl
-- src reg 0019 power_duty
-- src reg 001a efi_len_us
-- src reg 001b ign_timeout_len_20us
-- src reg 001c ign_capture_jf
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 g6
-- dest reg 0007 g7
-- dest reg 0008 rstk
-- dest reg 0009 event_priority
-- dest reg 000a soft_event
-- dest reg 000b usage_count
-- dest reg 000c ustimer0
-- dest reg 000d mstimer0
-- dest reg 000e mstimer1
-- dest reg 000f spi_data
-- dest reg 0010 av_write_data
-- dest reg 0012 av_ad_hi
-- dest reg 0013 av_ad_lo
-- dest reg 0014 fduart_data
-- dest reg 0015 fduart_status
-- dest reg 0016 leds
-- dest reg 0017 board_ctrl
-- dest reg 0018 anmux_ctrl
-- dest reg 0019 power_duty
-- dest reg 001a efi_len_us
-- dest reg 001b ign_timeout_len_20us
-- dest reg 001c ign_capture_jf
-- ram 00000000 ram_comm_restart_at_min
-- ram 00000002 ram_ftdi_downtime_remain_sec
-- ram 00000004 ram_daq_pass_cnt
-- ram 00000006 ram_daq_discard_cnt
-- ram 00000008 ram_power_down_at_min
-- ram 0000000a ram_relay_hold_at_pass
-- ram 0000000c ram_ign_history_idx
-- ram 0000000e ram_ign_history_jf
-- ram 0000002e ram_ign_avg_jf
-- ram 00000030 ram_avg_rpm
-- ram 00000032 ram_rpm_valid
-- ram 00000034 ram_ign_fastest_jf
-- ram 00000036 ram_ign_slowest_jf
-- ram 00000038 ram_minutes_cnt
-- ram 0000003a ram_seconds_cnt
-- ram 0000003c ram_mcu_usage_cnt
-- ram 0000003e ram_dial_setting
-- ram 00000040 ram_text_flag_pointers
-- ram 00000050 ram_next_tfp
        
        END;
    
