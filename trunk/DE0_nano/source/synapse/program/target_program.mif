
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 077b ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.





-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 8750 RPM = about 80 jf between rising edges on chevy ignition white wire.  ignition counter noise blanking begins here in rev 627.
-- 5000 RPM = about 140 jf
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 0022 ; -- <0189> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0189>   
    0004 : 2020 ; -- <0189>   
    0005 : 2020 ; -- <0189>   
    0006 : 6120 ; -- <0189> a 
-- "       b"
    0007 : 2020 ; -- <0189>   
    0008 : 2020 ; -- <0189>   
    0009 : 2020 ; -- <0189>   
    000a : 6220 ; -- <0189> b 
-- "       i"
    000b : 2020 ; -- <0189>   
    000c : 2020 ; -- <0189>   
    000d : 2020 ; -- <0189>   
    000e : 6920 ; -- <0189> i 
-- "       j"
    000f : 2020 ; -- <0189>   
    0010 : 2020 ; -- <0189>   
    0011 : 2020 ; -- <0189>   
    0012 : 6a20 ; -- <0189> j 
-- "       x"
    0013 : 2020 ; -- <0189>   
    0014 : 2020 ; -- <0189>   
    0015 : 2020 ; -- <0189>   
    0016 : 7820 ; -- <0189> x 
-- "       y"
    0017 : 2020 ; -- <0189>   
    0018 : 2020 ; -- <0189>   
    0019 : 2020 ; -- <0189>   
    001a : 7920 ; -- <0189> y 
-- "      ga"
    001b : 2020 ; -- <0189>   
    001c : 2020 ; -- <0189>   
    001d : 2020 ; -- <0189>   
    001e : 6167 ; -- <0189> ag
-- "      gb"
    001f : 2020 ; -- <0189>   
    0020 : 2020 ; -- <0189>   
    0021 : 2020 ; -- <0189>   
    0022 : 6267 ; -- <0189> bg
-- "      pa"
    0023 : 2020 ; -- <0189>   
    0024 : 2020 ; -- <0189>   
    0025 : 2020 ; -- <0189>   
    0026 : 6170 ; -- <0189> ap
-- "      pb"
    0027 : 2020 ; -- <0189>   
    0028 : 2020 ; -- <0189>   
    0029 : 2020 ; -- <0189>   
    002a : 6270 ; -- <0189> bp
-- "      pc"
    002b : 2020 ; -- <0189>   
    002c : 2020 ; -- <0189>   
    002d : 2020 ; -- <0189>   
    002e : 6370 ; -- <0189> cp
-- "      pd"
    002f : 2020 ; -- <0189>   
    0030 : 2020 ; -- <0189>   
    0031 : 2020 ; -- <0189>   
    0032 : 6470 ; -- <0189> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0189> --
    0034 : 7372 ; -- <0189> sr
    0035 : 6b74 ; -- <0189> kt
    0036 : 2020 ; -- <0189>   
-- "  ev_pri"
    0037 : 2020 ; -- <0189>   
    0038 : 7665 ; -- <0189> ve
    0039 : 705f ; -- <0189> p_
    003a : 6972 ; -- <0189> ir
-- "softevnt"
    003b : 6f73 ; -- <0189> os
    003c : 7466 ; -- <0189> tf
    003d : 7665 ; -- <0189> ve
    003e : 746e ; -- <0189> tn
-- "   usage"
    003f : 2020 ; -- <0189>   
    0040 : 7520 ; -- <0189> u 
    0041 : 6173 ; -- <0189> as
    0042 : 6567 ; -- <0189> eg
-- "ustimer0"
    0043 : 7375 ; -- <0189> su
    0044 : 6974 ; -- <0189> it
    0045 : 656d ; -- <0189> em
    0046 : 3072 ; -- <0189> 0r
-- "mstimer0"
    0047 : 736d ; -- <0189> sm
    0048 : 6974 ; -- <0189> it
    0049 : 656d ; -- <0189> em
    004a : 3072 ; -- <0189> 0r
-- "mstimer1"
    004b : 736d ; -- <0189> sm
    004c : 6974 ; -- <0189> it
    004d : 656d ; -- <0189> em
    004e : 3172 ; -- <0189> 1r
-- "mstimer2"
    004f : 736d ; -- <0189> sm
    0050 : 6974 ; -- <0189> it
    0051 : 656d ; -- <0189> em
    0052 : 3272 ; -- <0189> 2r
-- "spi_data"
    0053 : 7073 ; -- <0189> ps
    0054 : 5f69 ; -- <0189> _i
    0055 : 6164 ; -- <0189> ad
    0056 : 6174 ; -- <0189> at
-- "--avwrdt"
    0057 : 2f2f ; -- <0189> --
    0058 : 7661 ; -- <0189> va
    0059 : 7277 ; -- <0189> rw
    005a : 7464 ; -- <0189> td
-- "av_rd_dt"
    005b : 7661 ; -- <0189> va
    005c : 725f ; -- <0189> r_
    005d : 5f64 ; -- <0189> _d
    005e : 7464 ; -- <0189> td
-- "av_ad_hi"
    005f : 7661 ; -- <0189> va
    0060 : 615f ; -- <0189> a_
    0061 : 5f64 ; -- <0189> _d
    0062 : 6968 ; -- <0189> ih
-- "av_ad_lo"
    0063 : 7661 ; -- <0189> va
    0064 : 615f ; -- <0189> a_
    0065 : 5f64 ; -- <0189> _d
    0066 : 6f6c ; -- <0189> ol
-- "--uartdt"
    0067 : 2f2f ; -- <0189> --
    0068 : 6175 ; -- <0189> au
    0069 : 7472 ; -- <0189> tr
    006a : 7464 ; -- <0189> td
-- "uartstat"
    006b : 6175 ; -- <0189> au
    006c : 7472 ; -- <0189> tr
    006d : 7473 ; -- <0189> ts
    006e : 7461 ; -- <0189> ta
-- "    leds"
    006f : 2020 ; -- <0189>   
    0070 : 2020 ; -- <0189>   
    0071 : 656c ; -- <0189> el
    0072 : 7364 ; -- <0189> sd
-- "brd_ctrl"
    0073 : 7262 ; -- <0189> rb
    0074 : 5f64 ; -- <0189> _d
    0075 : 7463 ; -- <0189> tc
    0076 : 6c72 ; -- <0189> lr
-- "   anmux"
    0077 : 2020 ; -- <0189>   
    0078 : 6120 ; -- <0189> a 
    0079 : 6d6e ; -- <0189> mn
    007a : 7875 ; -- <0189> xu
-- "pwr_duty"
    007b : 7770 ; -- <0189> wp
    007c : 5f72 ; -- <0189> _r
    007d : 7564 ; -- <0189> ud
    007e : 7974 ; -- <0189> yt
-- "igntmcap"
    007f : 6769 ; -- <0189> gi
    0080 : 746e ; -- <0189> tn
    0081 : 636d ; -- <0189> cm
    0082 : 7061 ; -- <0189> pa
-- "igntmout"
    0083 : 6769 ; -- <0189> gi
    0084 : 746e ; -- <0189> tn
    0085 : 6f6d ; -- <0189> om
    0086 : 7475 ; -- <0189> tu
-- "puflenus"
    0087 : 7570 ; -- <0189> up
    0088 : 6c66 ; -- <0189> lf
    0089 : 6e65 ; -- <0189> ne
    008a : 7375 ; -- <0189> su

-- string resources
-- :boot_msg -- = 0x008b
-- "TGT\r\n\x0"
    008b : 4754 ; -- <0193> GT
    008c : 0d54 ; -- <0193>  T
    008d : 000a ; -- <0193>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x008e
-- initialize prior to polling loop, for minimum latency.
    008e : 07a0 ; -- <0006> b = :event_table
    008f : 07e1 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0090
    0090 : 000d ; -- <0009> a = event_priority
    0091 : e000 ; -- <0010> br 0z :poll_events_again
    0092 : 0090 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0093 : 3400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0094 : d300 ; -- <0015> fetch rtna from ad0
    0095 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0096 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0097 : 6fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0098 : ffc0 ; -- <0021> "
    0099 : e00f ; -- <0021> error_halt_code 0xffc0
    009a : 0099 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x009b
    009b : 3004 ; -- <0046> push x -- func putchar_fduart

    009c : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    009d : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x009e
    009e : 041a ; -- <0053> b = fduart_status
    009f : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    00a0 : 009e ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    00a1 : 6404 ; -- <0057> fduart_data = x
    00a2 : 100c ; -- <0058> pop x -- end_func
    00a3 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x00a4
-- wait until FIFO is populated.
    00a4 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x00a5
    00a5 : 041a ; -- <0066> b = fduart_status
    00a6 : e403 ; -- <0067> bn and0z :wait_for_busy
    00a7 : 00a5 ; -- <0067> "
    00a8 : 0019 ; -- <0068> a = fduart_data
    00a9 : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x00aa
-- check for FIFO is populated.
    00aa : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    00ab : 041a ; -- <0075> b = fduart_status
    00ac : e403 ; -- <0076> bn and0z :none
    00ad : 00b0 ; -- <0076> "
    00ae : 0019 ; -- <0077> a = fduart_data
    00af : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x00b0
    00b0 : 0360 ; -- <0080> a = -1
    00b1 : fc00 ; -- <0080> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00b2
-- set & enable analog muxer
    00b2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00b3 : c800 ; -- <0008> anmux_ctrl = or
    00b4 : 7734 ; -- <0008> "
    00b5 : fc00 ; -- <0008> swapra = nop

-- ######## func anmux_get_chn -- = 0x00b6
    00b6 : 001d ; -- <0012> a = anmux_ctrl
    00b7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00b8 : c800 ; -- <0014> a = and
    00b9 : 0330 ; -- <0014> "
    00ba : fc00 ; -- <0014> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00bb
-- "0123456789abcdef"
    00bb : 3130 ; -- <0050> 10
    00bc : 3332 ; -- <0050> 32
    00bd : 3534 ; -- <0050> 54
    00be : 3736 ; -- <0050> 76
    00bf : 3938 ; -- <0050> 98
    00c0 : 6261 ; -- <0050> ba
    00c1 : 6463 ; -- <0050> dc
    00c2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00c3
    00c3 : 3004 ; -- <0054> push x -- func put4x
    00c4 : 3006 ; -- <0054> push g6 -- "
    00c5 : 303e ; -- <0054> push rtna -- "
    00c6 : 13a0 ; -- <0055> x = :hexdigits
    00c7 : 00bb ; -- <0055> "

    00c8 : 1800 ; -- <0057> g6 = a
    00c9 : 07a0 ; -- <0058> b = 0xF000
    00ca : f000 ; -- <0058> "
    00cb : c800 ; -- <0059> a = and
    00cc : 0330 ; -- <0059> "
    00cd : 0353 ; -- <0060> a = a>>4
    00ce : 0353 ; -- <0061> a = a>>4
    00cf : 0353 ; -- <0062> a = a>>4
    00d0 : fba0 ; -- <0063> call fetch_byte
    00d1 : 01dc ; -- <0063> "
    00d2 : fc00 ; -- <0063> "
    00d3 : fba0 ; -- <0064> putchar a
    00d4 : 009b ; -- <0064> "
    00d5 : fc00 ; -- <0064> "

    00d6 : 0006 ; -- <0066> a = g6
    00d7 : 07a0 ; -- <0067> b = 0x0F00
    00d8 : 0f00 ; -- <0067> "
    00d9 : c800 ; -- <0068> a = and
    00da : 0330 ; -- <0068> "
    00db : 0353 ; -- <0069> a = a>>4
    00dc : 0353 ; -- <0070> a = a>>4
    00dd : fba0 ; -- <0071> call fetch_byte
    00de : 01dc ; -- <0071> "
    00df : fc00 ; -- <0071> "
    00e0 : fba0 ; -- <0072> putchar a
    00e1 : 009b ; -- <0072> "
    00e2 : fc00 ; -- <0072> "

    00e3 : 0006 ; -- <0074> a = g6
    00e4 : 06f0 ; -- <0075> b = 0x00F0
    00e5 : c800 ; -- <0076> a = and
    00e6 : 0330 ; -- <0076> "
    00e7 : 0353 ; -- <0077> a = a>>4
    00e8 : fba0 ; -- <0078> call fetch_byte
    00e9 : 01dc ; -- <0078> "
    00ea : fc00 ; -- <0078> "
    00eb : fba0 ; -- <0079> putchar a
    00ec : 009b ; -- <0079> "
    00ed : fc00 ; -- <0079> "

    00ee : 0006 ; -- <0081> a = g6
    00ef : 060f ; -- <0082> b = 0x000F
    00f0 : c800 ; -- <0083> a = and
    00f1 : 0330 ; -- <0083> "
    00f2 : fba0 ; -- <0084> call fetch_byte
    00f3 : 01dc ; -- <0084> "
    00f4 : fc00 ; -- <0084> "
    00f5 : fba0 ; -- <0085> putchar a
    00f6 : 009b ; -- <0085> "
    00f7 : fc00 ; -- <0085> "

    00f8 : f80c ; -- <0087> pop rtna -- end_func
    00f9 : 180c ; -- <0087> pop g6 -- "
    00fa : 100c ; -- <0087> pop x -- "
    00fb : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00fc
    00fc : 3002 ; -- <0091> push i -- func get4x
    00fd : 3003 ; -- <0091> push j -- "
    00fe : 3004 ; -- <0091> push x -- "
    00ff : 3005 ; -- <0091> push y -- "
    0100 : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    0101 : 1604 ; -- <0094> y = 4
-- :again -- = 0x0102
    0102 : fba0 ; -- <0096> getchar
    0103 : 00a4 ; -- <0096> "
    0104 : fc00 ; -- <0096> "
    0105 : 13a0 ; -- <0097> x = :hexdigits
    0106 : 00bb ; -- <0097> "
    0107 : 0a10 ; -- <0098> i = 16
    0108 : fba0 ; -- <0099> call :find_in_fetch
    0109 : 01f0 ; -- <0099> "
    010a : fc00 ; -- <0099> "
    010b : 0760 ; -- <0100> b = -1
    010c : e007 ; -- <0101> br eq :fail
    010d : 0121 ; -- <0101> "
    010e : 0400 ; -- <0102> b = a
    010f : 0003 ; -- <0103> a = j
    0110 : 0352 ; -- <0104> a = a<<4
    0111 : c800 ; -- <0105> j = or
    0112 : 0f34 ; -- <0105> "
    0113 : 1360 ; -- <0106> x = -1
    0114 : c800 ; -- <0107> y = x+y
    0115 : 1720 ; -- <0107> "
    0116 : 0005 ; -- <0108> a = y
    0117 : e400 ; -- <0109> bn az :again
    0118 : 0102 ; -- <0109> "
    0119 : 0003 ; -- <0110> a = j
    011a : 0600 ; -- <0111> b = 0
    011b : f80c ; -- <0112> pop rtna -- rtn
    011c : 140c ; -- <0112> pop y -- "
    011d : 100c ; -- <0112> pop x -- "
    011e : 0c0c ; -- <0112> pop j -- "
    011f : 080c ; -- <0112> pop i -- "
    0120 : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x0121
    0121 : 0760 ; -- <0114> b = -1
    0122 : f80c ; -- <0115> pop rtna -- end_func
    0123 : 140c ; -- <0115> pop y -- "
    0124 : 100c ; -- <0115> pop x -- "
    0125 : 0c0c ; -- <0115> pop j -- "
    0126 : 080c ; -- <0115> pop i -- "
    0127 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0128
    0128 : 3002 ; -- <0121> push i -- func print_fixed
    0129 : 3003 ; -- <0121> push j -- "
    012a : 3004 ; -- <0121> push x -- "
    012b : 3005 ; -- <0121> push y -- "
    012c : 3006 ; -- <0121> push g6 -- "
    012d : 303e ; -- <0121> push rtna -- "
    012e : 0800 ; -- <0122> i = a
    012f : 0e01 ; -- <0123> j = 1
    0130 : 1001 ; -- <0124> x = b
    0131 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0132
    0132 : e002 ; -- <0127> br xz :done
    0133 : 0148 ; -- <0127> "
    0134 : 1320 ; -- <0128> x = ad2
    0135 : d002 ; -- <0129> fetch g6 from i
    0136 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0137 : 0006 ; -- <0131> a = g6 -- putchar g6
    0138 : fba0 ; -- <0131> putchar g6
    0139 : 009b ; -- <0131> "
    013a : fc00 ; -- <0131> "
    013b : e002 ; -- <0132> br xz :done
    013c : 0148 ; -- <0132> "
    013d : 1320 ; -- <0133> x = ad2
    013e : 0006 ; -- <0134> a = g6
    013f : 0353 ; -- <0135> a = a>>4
    0140 : 0353 ; -- <0136> a = a>>4
    0141 : fba0 ; -- <0137> putchar a
    0142 : 009b ; -- <0137> "
    0143 : fc00 ; -- <0137> "
    0144 : c800 ; -- <0138> i = i+j
    0145 : 0b10 ; -- <0138> "
    0146 : e00f ; -- <0139> jmp :next_word
    0147 : 0132 ; -- <0139> "
-- :done -- = 0x0148
    0148 : f80c ; -- <0141> pop rtna -- end_func
    0149 : 180c ; -- <0141> pop g6 -- "
    014a : 140c ; -- <0141> pop y -- "
    014b : 100c ; -- <0141> pop x -- "
    014c : 0c0c ; -- <0141> pop j -- "
    014d : 080c ; -- <0141> pop i -- "
    014e : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x014f
    014f : 3002 ; -- <0147> push i -- func print_nt
    0150 : 3003 ; -- <0147> push j -- "
    0151 : 3004 ; -- <0147> push x -- "
    0152 : 303e ; -- <0147> push rtna -- "
    0153 : 0800 ; -- <0148> i = a
    0154 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0155
    0155 : d002 ; -- <0151> fetch x from i
    0156 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0157 : 0004 ; -- <0153> a = x
    0158 : 06ff ; -- <0154> b = 0xff
    0159 : e003 ; -- <0155> br and0z :done
    015a : 016b ; -- <0155> "
    015b : fba0 ; -- <0156> putchar a
    015c : 009b ; -- <0156> "
    015d : fc00 ; -- <0156> "
    015e : 0004 ; -- <0157> a = x
    015f : 0353 ; -- <0158> a = a>>4
    0160 : 0353 ; -- <0159> a = a>>4
    0161 : 06ff ; -- <0160> b = 0xff
    0162 : e003 ; -- <0161> br and0z :done
    0163 : 016b ; -- <0161> "
    0164 : fba0 ; -- <0162> putchar a
    0165 : 009b ; -- <0162> "
    0166 : fc00 ; -- <0162> "
    0167 : c800 ; -- <0163> i = i+j
    0168 : 0b10 ; -- <0163> "
    0169 : e00f ; -- <0164> jmp :next_word
    016a : 0155 ; -- <0164> "
-- :done -- = 0x016b
    016b : f80c ; -- <0166> pop rtna -- end_func
    016c : 100c ; -- <0166> pop x -- "
    016d : 0c0c ; -- <0166> pop j -- "
    016e : 080c ; -- <0166> pop i -- "
    016f : fc00 ; -- <0165> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0170
    0170 : 3002 ; -- <0004> push i -- func multiply
    0171 : 3003 ; -- <0004> push j -- "
    0172 : 3004 ; -- <0004> push x -- "
    0173 : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0174 : 1000 ; -- <0009> x = a
    0175 : 1401 ; -- <0010> y = b
    0176 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0177
    0177 : e002 ; -- <0013> br xz :done
    0178 : 0186 ; -- <0013> "
    0179 : 0004 ; -- <0014> a = x
    017a : 0601 ; -- <0015> b = 1
    017b : e003 ; -- <0016> br and0z :skip_add
    017c : 0180 ; -- <0016> "
    017d : 0c05 ; -- <0017> j = y
    017e : c800 ; -- <0018> i = i+j
    017f : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0180
    0180 : 0004 ; -- <0020> a = x
    0181 : 1350 ; -- <0021> x = a>>1
    0182 : 0005 ; -- <0022> a = y
    0183 : 1751 ; -- <0023> y = a<<1
    0184 : e00f ; -- <0024> jmp :again
    0185 : 0177 ; -- <0024> "
-- :done -- = 0x0186
    0186 : 0002 ; -- <0026> a = i
    0187 : 140c ; -- <0027> pop y -- end_func
    0188 : 100c ; -- <0027> pop x -- "
    0189 : 0c0c ; -- <0027> pop j -- "
    018a : 080c ; -- <0027> pop i -- "
    018b : fc00 ; -- <0026> swapra = nop

-- ######## func divide -- = 0x018c
    018c : 3002 ; -- <0029> push i -- func divide
    018d : 3003 ; -- <0029> push j -- "
    018e : 3004 ; -- <0029> push x -- "
    018f : 3005 ; -- <0029> push y -- "
    0190 : 3006 ; -- <0029> push g6 -- "
    0191 : 3007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0192 : e005 ; -- <0037> br lt :zero
    0193 : 01cd ; -- <0037> "
    0194 : e000 ; -- <0038> br az :zero
    0195 : 01cd ; -- <0038> "
    0196 : 1000 ; -- <0039> x = a
--    g7 = x
    0197 : 0001 ; -- <0041> a = b
    0198 : e000 ; -- <0042> br az :zero
    0199 : 01cd ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    019a : 0404 ; -- <0058> b = x
    019b : 0a00 ; -- <0059> i = 0
    019c : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x019d
    019d : e006 ; -- <0062> br gt :shift_done
    019e : 01a3 ; -- <0062> "
    019f : 0351 ; -- <0063> a = a<<1
    01a0 : 0b10 ; -- <0064> i = ad1
    01a1 : e00f ; -- <0065> jmp :shift_again
    01a2 : 019d ; -- <0065> "
-- :shift_done -- = 0x01a3
    01a3 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    01a4 : 1e00 ; -- <0078> g7 = 0
    01a5 : 0f60 ; -- <0079> j = -1
-- :again -- = 0x01a6
    01a6 : e001 ; -- <0081> br iz :done
    01a7 : 01c4 ; -- <0081> "
    01a8 : 0006 ; -- <0082> a = g6
    01a9 : 0404 ; -- <0083> b = x
    01aa : e006 ; -- <0084> br gt :result0
    01ab : 01bc ; -- <0084> "
-- temp does fit; output a 1.
    01ac : 0007 ; -- <0086> a = g7
    01ad : 0351 ; -- <0087> a = a<<1
    01ae : 0601 ; -- <0088> b = 1
    01af : c800 ; -- <0089> g7 = or
    01b0 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    01b1 : 0006 ; -- <0091> a = g6
    01b2 : 0760 ; -- <0092> b = -1
    01b3 : c800 ; -- <0093> a = xor
    01b4 : 0338 ; -- <0093> "
    01b5 : 0601 ; -- <0094> b = 1
    01b6 : c800 ; -- <0095> y = a+b
    01b7 : 1700 ; -- <0095> "
    01b8 : c800 ; -- <0096> x = x+y
    01b9 : 1320 ; -- <0096> "
    01ba : e00f ; -- <0097> jmp :next
    01bb : 01be ; -- <0097> "
-- :result0 -- = 0x01bc
-- temp does not fit; output a 0.
    01bc : 0007 ; -- <0100> a = g7
    01bd : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01be
    01be : 0006 ; -- <0104> a = g6
    01bf : 1b50 ; -- <0105> g6 = a>>1
    01c0 : c800 ; -- <0106> i = i+j
    01c1 : 0b10 ; -- <0106> "
    01c2 : e00f ; -- <0107> jmp :again
    01c3 : 01a6 ; -- <0107> "

-- :done -- = 0x01c4
    01c4 : 0407 ; -- <0110> b = g7
    01c5 : 0004 ; -- <0111> a = x
    01c6 : 1c0c ; -- <0112> pop g7 -- rtn
    01c7 : 180c ; -- <0112> pop g6 -- "
    01c8 : 140c ; -- <0112> pop y -- "
    01c9 : 100c ; -- <0112> pop x -- "
    01ca : 0c0c ; -- <0112> pop j -- "
    01cb : 080c ; -- <0112> pop i -- "
    01cc : fc00 ; -- <0111> swapra = nop

-- :zero -- = 0x01cd
    01cd : 0600 ; -- <0115> b = 0
    01ce : 1c0c ; -- <0116> pop g7 -- rtn
    01cf : 180c ; -- <0116> pop g6 -- "
    01d0 : 140c ; -- <0116> pop y -- "
    01d1 : 100c ; -- <0116> pop x -- "
    01d2 : 0c0c ; -- <0116> pop j -- "
    01d3 : 080c ; -- <0116> pop i -- "
    01d4 : fc00 ; -- <0115> swapra = nop
    01d5 : 1c0c ; -- <0117> pop g7 -- end_func
    01d6 : 180c ; -- <0117> pop g6 -- "
    01d7 : 140c ; -- <0117> pop y -- "
    01d8 : 100c ; -- <0117> pop x -- "
    01d9 : 0c0c ; -- <0117> pop j -- "
    01da : 080c ; -- <0117> pop i -- "
    01db : fc00 ; -- <0116> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01dc
    01dc : 0601 ; -- <0005> b = 1
    01dd : e003 ; -- <0006> br and0z :pick_byte_even
    01de : 01e7 ; -- <0006> "
    01df : 0350 ; -- <0007> a = a>>1
    01e0 : 0404 ; -- <0008> b = x
    01e1 : c800 ; -- <0009> fetch a from a+b
    01e2 : d300 ; -- <0009> "
    01e3 : 03b0 ; -- <0009> "
    01e4 : 0353 ; -- <0010> a = a>>4
    01e5 : 0353 ; -- <0011> a = a>>4
    01e6 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x01e7
    01e7 : 0350 ; -- <0014> a = a>>1
    01e8 : 0404 ; -- <0015> b = x
    01e9 : c800 ; -- <0016> fetch a from a+b
    01ea : d300 ; -- <0016> "
    01eb : 03b0 ; -- <0016> "
    01ec : 06ff ; -- <0017> b = 0xff
    01ed : c800 ; -- <0018> a = and
    01ee : 0330 ; -- <0018> "
    01ef : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01f0
    01f0 : 3002 ; -- <0027> push i -- func find_in_fetch
    01f1 : 3003 ; -- <0027> push j -- "
    01f2 : 3005 ; -- <0027> push y -- "
    01f3 : 303e ; -- <0027> push rtna -- "
    01f4 : 1400 ; -- <0028> y = a
    01f5 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01f6
    01f6 : e001 ; -- <0031> br iz :fail
    01f7 : 0206 ; -- <0031> "
    01f8 : 0b10 ; -- <0032> i = ad1
    01f9 : 0002 ; -- <0033> a = i
    01fa : fba0 ; -- <0034> call :fetch_byte
    01fb : 01dc ; -- <0034> "
    01fc : fc00 ; -- <0034> "
    01fd : 0405 ; -- <0035> b = y
    01fe : e407 ; -- <0036> bn eq :again
    01ff : 01f6 ; -- <0036> "
-- :found -- = 0x0200
    0200 : 0002 ; -- <0038> a = i
    0201 : f80c ; -- <0039> pop rtna -- rtn
    0202 : 140c ; -- <0039> pop y -- "
    0203 : 0c0c ; -- <0039> pop j -- "
    0204 : 080c ; -- <0039> pop i -- "
    0205 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0206
    0206 : 0360 ; -- <0041> a = -1
    0207 : f80c ; -- <0042> pop rtna -- end_func
    0208 : 140c ; -- <0042> pop y -- "
    0209 : 0c0c ; -- <0042> pop j -- "
    020a : 080c ; -- <0042> pop i -- "
    020b : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x020c
    020c : 3004 ; -- <0002> push x -- func spinwait
    020d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    020e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x020f
    020f : 13a0 ; -- <0007> x = 16666
    0210 : 411a ; -- <0007> "
    0211 : 1760 ; -- <0008> y = -1
    0212 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0213
-- use of the ad2 name overrides auto-nop here.
    0213 : 1320 ; -- <0012> x = ad2
    0214 : e402 ; -- <0013> bn xz :spinwait_inner
    0215 : 0213 ; -- <0013> "
    0216 : c800 ; -- <0014> a = a+b
    0217 : 0300 ; -- <0014> "
    0218 : e400 ; -- <0015> bn az :spinwait_outer
    0219 : 020f ; -- <0015> "
    021a : 140c ; -- <0016> pop y -- end_func
    021b : 100c ; -- <0016> pop x -- "
    021c : fc00 ; -- <0015> swapra = nop




-- when commands share a common suffix, the longer command must come FIRST here.
-- :cmd_table -- = 0x021d
-- "  hello"
    021d : 2020 ; -- <0006>   
    021e : 6568 ; -- <0006> eh
    021f : 6c6c ; -- <0006> ll
    0220 : 006f ; -- <0006>  o
    0221 : 02e5 ; -- <0007> ([label hello_cmd])
-- "  plstp"
    0222 : 2020 ; -- <0008>   
    0223 : 6c70 ; -- <0008> lp
    0224 : 7473 ; -- <0008> ts
    0225 : 0070 ; -- <0008>  p
    0226 : 02e9 ; -- <0009> ([label set_plan_stop_cmd])
-- "   plcr"
    0227 : 2020 ; -- <0010>   
    0228 : 7020 ; -- <0010> p 
    0229 : 636c ; -- <0010> cl
    022a : 0072 ; -- <0010>  r
    022b : 02f4 ; -- <0011> ([label set_plan_crank_cmd])
-- "   plwm"
    022c : 2020 ; -- <0012>   
    022d : 7020 ; -- <0012> p 
    022e : 776c ; -- <0012> wl
    022f : 006d ; -- <0012>  m
    0230 : 02ff ; -- <0013> ([label set_plan_warmup_cmd])
-- "   plrn"
    0231 : 2020 ; -- <0014>   
    0232 : 7020 ; -- <0014> p 
    0233 : 726c ; -- <0014> rl
    0234 : 006e ; -- <0014>  n
    0235 : 030a ; -- <0015> ([label set_plan_run_cmd])
-- "   plln"
    0236 : 2020 ; -- <0016>   
    0237 : 7020 ; -- <0016> p 
    0238 : 6c6c ; -- <0016> ll
    0239 : 006e ; -- <0016>  n
    023a : 0315 ; -- <0017> ([label set_plan_learn_cmd])
-- " ldsmap"
    023b : 6c20 ; -- <0018> l 
    023c : 7364 ; -- <0018> sd
    023d : 616d ; -- <0018> am
    023e : 0070 ; -- <0018>  p
    023f : 064e ; -- <0019> ([label load_smap_cmd])
-- " clsmap"
    0240 : 6320 ; -- <0020> c 
    0241 : 736c ; -- <0020> sl
    0242 : 616d ; -- <0020> am
    0243 : 0070 ; -- <0020>  p
    0244 : 066a ; -- <0021> ([label clear_smap_cmd])
-- "   smap"
    0245 : 2020 ; -- <0022>   
    0246 : 7320 ; -- <0022> s 
    0247 : 616d ; -- <0022> am
    0248 : 0070 ; -- <0022>  p
    0249 : 05a2 ; -- <0023> ([label dump_smap_cmd])
-- "   ltps"
    024a : 2020 ; -- <0024>   
    024b : 6c20 ; -- <0024> l 
    024c : 7074 ; -- <0024> pt
    024d : 0073 ; -- <0024>  s
    024e : 06a2 ; -- <0025> ([label learn_tps_ref_cmd])
-- " ldtpsr"
    024f : 6c20 ; -- <0026> l 
    0250 : 7464 ; -- <0026> td
    0251 : 7370 ; -- <0026> sp
    0252 : 0072 ; -- <0026>  r
    0253 : 067f ; -- <0027> ([label load_tps_ref_cmd])
-- " ldtpse"
    0254 : 6c20 ; -- <0028> l 
    0255 : 7464 ; -- <0028> td
    0256 : 7370 ; -- <0028> sp
    0257 : 0065 ; -- <0028>  e
    0258 : 0632 ; -- <0029> ([label load_tps_enrich_cmd])
-- "      ,"
    0259 : 2020 ; -- <0030>   
    025a : 2020 ; -- <0030>   
    025b : 2020 ; -- <0030>   
    025c : 002c ; -- <0030>  ,
    025d : 06b9 ; -- <0031> ([label trim_lean_cmd])
-- "      ."
    025e : 2020 ; -- <0032>   
    025f : 2020 ; -- <0032>   
    0260 : 2020 ; -- <0032>   
    0261 : 002e ; -- <0032>  .
    0262 : 06ca ; -- <0033> ([label trim_rich_cmd])
-- "      \["
    0263 : 2020 ; -- <0034>   
    0264 : 2020 ; -- <0034>   
    0265 : 2020 ; -- <0034>   
    0266 : 005b ; -- <0034>  [
    0267 : 06db ; -- <0035> ([label trim_2lean_cmd])
-- "      \]"
    0268 : 2020 ; -- <0036>   
    0269 : 2020 ; -- <0036>   
    026a : 2020 ; -- <0036>   
    026b : 005d ; -- <0036>  ]
    026c : 06ec ; -- <0037> ([label trim_2rich_cmd])
-- "\x0\x0"
    026d : 0000 ; -- <0038>   


-- ######## func parse_key -- = 0x026e
    026e : 3002 ; -- <0056> push i -- func parse_key
    026f : 3004 ; -- <0056> push x -- "
    0270 : 3005 ; -- <0056> push y -- "
    0271 : 303e ; -- <0056> push rtna -- "

-- memorize into ram_key_buf, pushing down existing content.
    0272 : 1008 ; -- <0043> x = key
    0273 : 0a07 ; -- <0052> i = $key_buf_max
-- :loop_627 -- = 0x0274

    0274 : 0002 ; -- <0044> a = i

    0275 : 0351 ; -- <0045> a = a<<1
    0276 : 0600 ; -- <0045> b = 0
    0277 : 5e00 ; -- <0045> av_ad_hi = 0
    0278 : 6300 ; -- <0045> av_ad_lo = ad0
    0279 : 0415 ; -- <0045> b = av_write_data
    027a : 0416 ; -- <0045> b = av_read_data

    027b : 1401 ; -- <0046> y = b
    027c : 0002 ; -- <0047> a = i
    027d : 0404 ; -- <0048> b = x

    027e : 0351 ; -- <0049> a = a<<1
    027f : 3001 ; -- <0049> push b -- push b
    0280 : 0600 ; -- <0049> b = 0
    0281 : 5e00 ; -- <0049> av_ad_hi = 0
    0282 : 6300 ; -- <0049> av_ad_lo = ad0
    0283 : 540c ; -- <0049> pop av_write_data -- pop av_write_data

    0284 : 1005 ; -- <0050> x = y


    0285 : 0002 ; -- <0052> a = i
    0286 : 0600 ; -- <0052> b = 0
    0287 : e007 ; -- <0052> br eq :end_627
    0288 : 0291 ; -- <0052> "


    0289 : 0002 ; -- <0052> a = i
    028a : 0760 ; -- <0052> b = -1
    028b : c800 ; -- <0052> i = a+b
    028c : 0b00 ; -- <0052> "


    028d : 0002 ; -- <0052> a = i
    028e : 0600 ; -- <0052> b = 0
    028f : e405 ; -- <0052> bn lt :loop_627
    0290 : 0274 ; -- <0052> "

-- :end_627 -- = 0x0291

    0291 : 0008 ; -- <0055> a = key
    0292 : 060d ; -- <0055> b = 13

    0293 : e407 ; -- <0053> bn eq :else_659
    0294 : 0298 ; -- <0053> "

    0295 : fba0 ; -- <0054> callx  parse_command
    0296 : 029f ; -- <0054> "
    0297 : fc00 ; -- <0054> "


    0298 : f80c ; -- <0057> pop rtna -- func parse_key
    0299 : 140c ; -- <0057> pop y -- "
    029a : 100c ; -- <0057> pop x -- "
    029b : 080c ; -- <0057> pop i -- "
    029c : fc00 ; -- <0057> swapra = nop

-- :cmd_ack_msg -- = 0x029d
-- "OK\x0"
    029d : 4b4f ; -- <0059> KO
    029e : 0000 ; -- <0059>   

-- ######## func parse_command -- = 0x029f
    029f : 3002 ; -- <0100> push i -- func parse_command
    02a0 : 3004 ; -- <0100> push x -- "
    02a1 : 3005 ; -- <0100> push y -- "
    02a2 : 303e ; -- <0100> push rtna -- "

    02a3 : 13a0 ; -- <0062> x = :cmd_table
    02a4 : 021d ; -- <0062> "
-- :next_cmd -- = 0x02a5
    02a5 : d004 ; -- <0064> fetch a from x
    02a6 : 03b0 ; -- <0064> "
    02a7 : e000 ; -- <0065> br az :done
    02a8 : 02e0 ; -- <0065> "

    02a9 : 0a00 ; -- <0081> i = 0
-- :loop_681 -- = 0x02aa

    02aa : 0002 ; -- <0067> a = i
    02ab : fba0 ; -- <0068> call :fetch_byte
    02ac : 01dc ; -- <0068> "
    02ad : fc00 ; -- <0068> "
    02ae : 1400 ; -- <0069> y = a
    02af : 0620 ; -- <0070> b = 32 -- asc b = " "

    02b0 : 0000 ; -- <0079> a = a
    02b1 : 0401 ; -- <0079> b = b

    02b2 : e007 ; -- <0071> br eq :else_690
    02b3 : 02c1 ; -- <0071> "

    02b4 : 062a ; -- <0072> b = 42 -- asc b = "*"
    02b5 : e007 ; -- <0073> br eq :matched
    02b6 : 02c9 ; -- <0073> "
-- parameter character.  succeed early.
    02b7 : 0002 ; -- <0075> a = i

    02b8 : 0351 ; -- <0076> a = a<<1
    02b9 : 0600 ; -- <0076> b = 0
    02ba : 5e00 ; -- <0076> av_ad_hi = 0
    02bb : 6300 ; -- <0076> av_ad_lo = ad0
    02bc : 0415 ; -- <0076> b = av_write_data
    02bd : 0416 ; -- <0076> b = av_read_data

    02be : 0005 ; -- <0077> a = y
    02bf : e407 ; -- <0078> bn eq :no_match
    02c0 : 02d5 ; -- <0078> "



    02c1 : 0002 ; -- <0081> a = i
    02c2 : 0601 ; -- <0081> b = 1
    02c3 : c800 ; -- <0081> i = a+b
    02c4 : 0b00 ; -- <0081> "


    02c5 : 0002 ; -- <0081> a = i
    02c6 : 0607 ; -- <0081> b = $key_buf_max
    02c7 : e005 ; -- <0081> br lt :loop_681
    02c8 : 02aa ; -- <0081> "

-- :end_681 -- = 0x02c9

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x02c9
    02c9 : 23a0 ; -- <0085> pa = :cmd_ack_msg
    02ca : 029d ; -- <0085> "
    02cb : fba0 ; -- <0085> callx  set_text_flag  :cmd_ack_msg
    02cc : 0b26 ; -- <0085> "
    02cd : fc00 ; -- <0085> "
    02ce : 1604 ; -- <0086> y = ($key_buf_len / 2)
    02cf : c800 ; -- <0087> fetch rtna from x+y
    02d0 : d320 ; -- <0087> "
    02d1 : fbb0 ; -- <0087> "
    02d2 : fc00 ; -- <0088> swapra = nop
    02d3 : e00f ; -- <0090> jmp :done
    02d4 : 02e0 ; -- <0090> "

-- :no_match -- = 0x02d5
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    02d5 : 5e00 ; -- <0094> ram a = $ram_terminal_connected -- av_ad_hi = 0
    02d6 : 6294 ; -- <0094> ram a = $ram_terminal_connected -- av_ad_lo = 148
    02d7 : 0015 ; -- <0094> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    02d8 : 0016 ; -- <0094> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    02d9 : e000 ; -- <0095> br az :done
    02da : 02e0 ; -- <0095> "

    02db : 1605 ; -- <0097> y = (($key_buf_len / 2) + 1)
    02dc : c800 ; -- <0098> x = x+y
    02dd : 1320 ; -- <0098> "
    02de : e00f ; -- <0099> jmp :next_cmd
    02df : 02a5 ; -- <0099> "
-- :done -- = 0x02e0

    02e0 : f80c ; -- <0102> pop rtna -- func parse_command
    02e1 : 140c ; -- <0102> pop y -- "
    02e2 : 100c ; -- <0102> pop x -- "
    02e3 : 080c ; -- <0102> pop i -- "
    02e4 : fc00 ; -- <0102> swapra = nop

-- ######## func hello_cmd -- = 0x02e5

    02e5 : 5e00 ; -- <0104> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    02e6 : 6294 ; -- <0104> ram $ram_terminal_connected = 1 -- av_ad_lo = 148
    02e7 : 5601 ; -- <0104> ram $ram_terminal_connected = 1 -- av_write_data = 1

    02e8 : fc00 ; -- <0106> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x02e9
    02e9 : 303e ; -- <0111> push rtna -- func set_plan_stop_cmd

    02ea : 5e00 ; -- <0108> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02eb : 628e ; -- <0108> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    02ec : f815 ; -- <0108> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02ed : f816 ; -- <0108> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02ee : fc00 ; -- <0109> swapra = nop
    02ef : fba0 ; -- <0111> callx  init_plan_stop
    02f0 : 0322 ; -- <0111> "
    02f1 : fc00 ; -- <0111> "

    02f2 : f80c ; -- <0113> pop rtna -- func set_plan_stop_cmd
    02f3 : fc00 ; -- <0113> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x02f4
    02f4 : 303e ; -- <0118> push rtna -- func set_plan_crank_cmd

    02f5 : 5e00 ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02f6 : 628e ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    02f7 : f815 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02f8 : f816 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02f9 : fc00 ; -- <0116> swapra = nop
    02fa : fba0 ; -- <0118> callx  init_plan_crank
    02fb : 0361 ; -- <0118> "
    02fc : fc00 ; -- <0118> "

    02fd : f80c ; -- <0120> pop rtna -- func set_plan_crank_cmd
    02fe : fc00 ; -- <0120> swapra = nop

-- ######## func set_plan_warmup_cmd -- = 0x02ff
    02ff : 303e ; -- <0125> push rtna -- func set_plan_warmup_cmd

    0300 : 5e00 ; -- <0122> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0301 : 628e ; -- <0122> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0302 : f815 ; -- <0122> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0303 : f816 ; -- <0122> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0304 : fc00 ; -- <0123> swapra = nop
    0305 : fba0 ; -- <0125> callx  init_plan_warmup
    0306 : 03c7 ; -- <0125> "
    0307 : fc00 ; -- <0125> "

    0308 : f80c ; -- <0127> pop rtna -- func set_plan_warmup_cmd
    0309 : fc00 ; -- <0127> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x030a
    030a : 303e ; -- <0132> push rtna -- func set_plan_run_cmd

    030b : 5e00 ; -- <0129> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    030c : 628e ; -- <0129> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    030d : f815 ; -- <0129> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    030e : f816 ; -- <0129> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    030f : fc00 ; -- <0130> swapra = nop
    0310 : fba0 ; -- <0132> callx  init_plan_run
    0311 : 06fd ; -- <0132> "
    0312 : fc00 ; -- <0132> "

    0313 : f80c ; -- <0134> pop rtna -- func set_plan_run_cmd
    0314 : fc00 ; -- <0134> swapra = nop

-- ######## func set_plan_learn_cmd -- = 0x0315
    0315 : 303e ; -- <0139> push rtna -- func set_plan_learn_cmd

    0316 : 5e00 ; -- <0136> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0317 : 628e ; -- <0136> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0318 : f815 ; -- <0136> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0319 : f816 ; -- <0136> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    031a : fc00 ; -- <0137> swapra = nop
    031b : fba0 ; -- <0139> callx  init_plan_learn_stoich
    031c : 046c ; -- <0139> "
    031d : fc00 ; -- <0139> "

    031e : f80c ; -- <0141> pop rtna -- func set_plan_learn_cmd
    031f : fc00 ; -- <0141> swapra = nop


-- :plan_name_stop -- = 0x0320
-- "STP\x0"
    0320 : 5453 ; -- <0002> TS
    0321 : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x0322
    0322 : 303e ; -- <0023> push rtna -- func init_plan_stop

-- set up the stop plan.
    0323 : fba0 ; -- <0006> callx  clear_ign_history
    0324 : 085c ; -- <0006> "
    0325 : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    0326 : 5e00 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    0327 : 6282 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 130
    0328 : 57a0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    0329 : 025b ; -- <0008> "
    032a : 5e00 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    032b : 6284 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    032c : 57a0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    032d : 36b0 ; -- <0009> "
    032e : 83a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    032f : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    0330 : 5e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0331 : 6290 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    0332 : 5600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    0333 : 8600 ; -- <0016> puff_len_us = 0

-- memorize state.
    0334 : 5e00 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    0335 : 6288 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 136
    0336 : 57a0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    0337 : 0320 ; -- <0019> "
    0338 : 5e00 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    0339 : 628a ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 138
    033a : 57a0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    033b : 0347 ; -- <0020> "
    033c : 5e00 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    033d : 628c ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 140
    033e : 57a0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    033f : 034b ; -- <0021> "
    0340 : 5e00 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0341 : 628e ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 142
    0342 : 57a0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0343 : 0346 ; -- <0022> "

    0344 : f80c ; -- <0024> pop rtna -- func init_plan_stop
    0345 : fc00 ; -- <0024> swapra = nop

-- ######## func destroy_plan_stop -- = 0x0346


    0346 : fc00 ; -- <0027> swapra = nop

-- ######## func puff_len_stop -- = 0x0347

    0347 : 5e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0348 : 6290 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    0349 : 5600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0

    034a : fc00 ; -- <0031> swapra = nop

-- ######## func leave_stop -- = 0x034b
    034b : 303e ; -- <0044> push rtna -- func leave_stop

-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    034c : 001e ; -- <0035> a = power_duty
    034d : 0680 ; -- <0036> b = $ign_switch_off_mask
    034e : e403 ; -- <0037> bn and0z :stay
    034f : 035d ; -- <0037> "
    0350 : 5e00 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    0351 : 6280 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 128
    0352 : 0015 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0353 : 0016 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0354 : 0608 ; -- <0039> b = ($ign_history_len / 2)
    0355 : e006 ; -- <0040> br gt :stay
    0356 : 035d ; -- <0040> "
    0357 : fba0 ; -- <0041> callx  destroy_plan_stop
    0358 : 0346 ; -- <0041> "
    0359 : fc00 ; -- <0041> "
    035a : fba0 ; -- <0042> callx  init_plan_crank
    035b : 0361 ; -- <0042> "
    035c : fc00 ; -- <0042> "
-- :stay -- = 0x035d

    035d : f80c ; -- <0045> pop rtna -- func leave_stop
    035e : fc00 ; -- <0045> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 10000 to 20000 us length in about 5 seconds.

-- :plan_name_crank -- = 0x035f
-- "CR\x0"
    035f : 5243 ; -- <0011> RC
    0360 : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x0361
    0361 : 303e ; -- <0033> push rtna -- func init_plan_crank

-- set up the crank plan.
    0362 : 5e00 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    0363 : 6292 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 146
    0364 : 5600 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0365 : 5e00 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    0366 : 6282 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 130
    0367 : 5657 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    0368 : 5e00 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0369 : 6284 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    036a : 57a0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    036b : 36b0 ; -- <0018> "
    036c : 83a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    036d : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    036e : 5e00 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    036f : 6290 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 144
    0370 : 57a0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 10000
    0371 : 2710 ; -- <0023> "
    0372 : 87a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    0373 : 2710 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    0374 : fba0 ; -- <0026> callx  clear_ign_history
    0375 : 085c ; -- <0026> "
    0376 : fc00 ; -- <0026> "

-- memorize state.
    0377 : 5e00 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    0378 : 6288 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 136
    0379 : 57a0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    037a : 035f ; -- <0029> "
    037b : 5e00 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    037c : 628a ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 138
    037d : 57a0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    037e : 038a ; -- <0030> "
    037f : 5e00 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    0380 : 628c ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 140
    0381 : 57a0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    0382 : 03a8 ; -- <0031> "
    0383 : 5e00 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    0384 : 628e ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 142
    0385 : 57a0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    0386 : 0389 ; -- <0032> "

    0387 : f80c ; -- <0034> pop rtna -- func init_plan_crank
    0388 : fc00 ; -- <0034> swapra = nop

-- ######## func destroy_plan_crank -- = 0x0389


    0389 : fc00 ; -- <0037> swapra = nop

-- ######## func puff_len_crank -- = 0x038a
    038a : 303e ; -- <0054> push rtna -- func puff_len_crank

    038b : 5e00 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    038c : 6292 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 146
    038d : 0015 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    038e : 0016 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    038f : 0606 ; -- <0040> b = $crank_max_puffs
    0390 : e006 ; -- <0041> br gt :puff_limit
    0391 : 039f ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    0392 : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    0393 : 05dc ; -- <0043> "
    0394 : fba0 ; -- <0044> call :multiply
    0395 : 0170 ; -- <0044> "
    0396 : fc00 ; -- <0044> "
    0397 : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    0398 : 2710 ; -- <0045> "
    0399 : 5e00 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    039a : 6290 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 144
    039b : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    039c : 5700 ; -- <0046> "
    039d : e00f ; -- <0047> jmp :done
    039e : 03a6 ; -- <0047> "
-- :puff_limit -- = 0x039f
-- prevent the puff counter from going higher & eventually rolling over.
    039f : 5e00 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    03a0 : 6292 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 146
    03a1 : 5606 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 6
-- accept max puff len.
    03a2 : 5e00 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    03a3 : 6290 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 144
    03a4 : 57a0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    03a5 : 4e20 ; -- <0052> "
-- :done -- = 0x03a6

    03a6 : f80c ; -- <0055> pop rtna -- func puff_len_crank
    03a7 : fc00 ; -- <0055> swapra = nop

-- ######## func leave_crank -- = 0x03a8
    03a8 : 303e ; -- <0071> push rtna -- func leave_crank

    03a9 : fba0 ; -- <0057> callx  check_engine_stop  a
    03aa : 0c5a ; -- <0057> "
    03ab : fc00 ; -- <0057> "
    03ac : 0008 ; -- <0057> a = pa
    03ad : e400 ; -- <0058> bn az :done
    03ae : 03c3 ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    03af : 5e00 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    03b0 : 627e ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 126
    03b1 : 0015 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    03b2 : 0016 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    03b3 : e000 ; -- <0062> br az :stay
    03b4 : 03c3 ; -- <0062> "
    03b5 : 5e00 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    03b6 : 627c ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 124
    03b7 : 0015 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    03b8 : 0016 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    03b9 : 07a0 ; -- <0064> b = $crank_success_rpm
    03ba : 0320 ; -- <0064> "
    03bb : e005 ; -- <0065> br lt :stay
    03bc : 03c3 ; -- <0065> "
    03bd : fba0 ; -- <0066> callx  destroy_plan_crank
    03be : 0389 ; -- <0066> "
    03bf : fc00 ; -- <0066> "
    03c0 : fba0 ; -- <0067> callx  init_plan_warmup
    03c1 : 03c7 ; -- <0067> "
    03c2 : fc00 ; -- <0067> "
-- :stay -- = 0x03c3

-- :done -- = 0x03c3

    03c3 : f80c ; -- <0072> pop rtna -- func leave_crank
    03c4 : fc00 ; -- <0072> swapra = nop



-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.
-- 750 = 0 degF.
-- max 6000 & min 4500 over a temp range 750 to 0x4c0 gives 6900 us puff at 74 deg F.  program rev 594.
-- this is used if the engine temp is unavailable.

-- :plan_name_warmup -- = 0x03c5
-- "WM\x0"
    03c5 : 4d57 ; -- <0016> MW
    03c6 : 0000 ; -- <0016>   

-- ######## func init_plan_warmup -- = 0x03c7

-- set up the warmup plan.
    03c7 : 5e00 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03c8 : 6214 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03c9 : 0015 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03ca : 0016 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03cb : 063c ; -- <0021> b = $warmup_timeout_sec
    03cc : 5e00 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_hi = 0
    03cd : 6296 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_lo = 150
    03ce : c800 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_write_data = a+b
    03cf : 5700 ; -- <0022> "

-- memorize state.
    03d0 : 5e00 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    03d1 : 6288 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 136
    03d2 : 57a0 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    03d3 : 03c5 ; -- <0025> "
    03d4 : 5e00 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    03d5 : 628a ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 138
    03d6 : 57a0 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    03d7 : 03e2 ; -- <0026> "
    03d8 : 5e00 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    03d9 : 628c ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 140
    03da : 57a0 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    03db : 0414 ; -- <0027> "
    03dc : 5e00 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    03dd : 628e ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 142
    03de : 57a0 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    03df : 03e1 ; -- <0028> "

    03e0 : fc00 ; -- <0030> swapra = nop

-- ######## func destroy_plan_warmup -- = 0x03e1


    03e1 : fc00 ; -- <0033> swapra = nop

-- ######## func puff_len_warmup -- = 0x03e2
    03e2 : 3004 ; -- <0070> push x -- func puff_len_warmup
    03e3 : 303e ; -- <0070> push rtna -- "

-- x = enrichment us.
    03e4 : 13a0 ; -- <0036> x = $warmup_limping_enrichment_us
    03e5 : 07d0 ; -- <0036> "

-- check engine block temp sensor.  if valid, enrich by a linear function:
-- {warmup_min_temp_adc...warmup_success_temp_adc} -> {$warmup_max_enrichment_us...0}
    03e6 : 0202 ; -- <0040> a = $anmux_engine_block_temp

    03e7 : 0351 ; -- <0041> a = a<<1
    03e8 : 0616 ; -- <0041> b = 22
    03e9 : 5e00 ; -- <0041> av_ad_hi = 0
    03ea : 6300 ; -- <0041> av_ad_lo = ad0
    03eb : 0415 ; -- <0041> b = av_write_data
    03ec : 0416 ; -- <0041> b = av_read_data

-- b = sensor reading in adc counts.
    03ed : 03a0 ; -- <0043> a = $temp_ceiling_adc
    03ee : 0ff0 ; -- <0043> "
    03ef : e005 ; -- <0044> br lt :temp_invalid
    03f0 : 040a ; -- <0044> "
    03f1 : 03a0 ; -- <0045> a = $warmup_success_temp_adc
    03f2 : 04c0 ; -- <0045> "
    03f3 : e005 ; -- <0046> br lt :too_warm
    03f4 : 040a ; -- <0046> "
    03f5 : 03a0 ; -- <0047> a = $warmup_min_temp_adc
    03f6 : 02ee ; -- <0047> "
    03f7 : e005 ; -- <0048> br lt :in_range
    03f8 : 03fb ; -- <0048> "
    03f9 : 07a0 ; -- <0049> b = $warmup_min_temp_adc
    03fa : 02ee ; -- <0049> "
-- :in_range -- = 0x03fb
-- negate the sensor reading so as to subtract it from warmup_success_temp_adc.
    03fb : 0360 ; -- <0052> a = 0xffff
    03fc : c800 ; -- <0053> b = xor
    03fd : 0738 ; -- <0053> "
    03fe : 0201 ; -- <0054> a = 1
    03ff : c800 ; -- <0055> b = a+b
    0400 : 0700 ; -- <0055> "
    0401 : 03a0 ; -- <0056> a = $warmup_success_temp_adc
    0402 : 04c0 ; -- <0056> "
    0403 : c800 ; -- <0057> b = a+b
    0404 : 0700 ; -- <0057> "
-- b = how many counts "cold" we are.  multiply that by the slope warmup_us_per_cold_adc.
    0405 : 020c ; -- <0059> a = $warmup_us_per_cold_adc
    0406 : fba0 ; -- <0060> call :multiply
    0407 : 0170 ; -- <0060> "
    0408 : fc00 ; -- <0060> "
    0409 : 1000 ; -- <0061> x = a
-- :too_warm -- = 0x040a
-- :temp_invalid -- = 0x040a

-- apply total of base amount and enrichment.
-- $warmup_min_puff_len_us <= total <= ($warmup_min_puff_len_us + $warmup_max_enrichment_us)
    040a : 03a0 ; -- <0067> a = $warmup_min_puff_len_us
    040b : 09c4 ; -- <0067> "
    040c : 0404 ; -- <0068> b = x
    040d : 5e00 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    040e : 6290 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 144
    040f : c800 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    0410 : 5700 ; -- <0069> "

    0411 : f80c ; -- <0071> pop rtna -- func puff_len_warmup
    0412 : 100c ; -- <0071> pop x -- "
    0413 : fc00 ; -- <0071> swapra = nop

-- ######## func leave_warmup -- = 0x0414
    0414 : 303e ; -- <0099> push rtna -- func leave_warmup

    0415 : fba0 ; -- <0073> callx  check_engine_stop  a
    0416 : 0c5a ; -- <0073> "
    0417 : fc00 ; -- <0073> "
    0418 : 0008 ; -- <0073> a = pa
    0419 : e400 ; -- <0074> bn az :done
    041a : 0448 ; -- <0074> "

-- transition to plan_run if warmup has expired.
    041b : 5e00 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    041c : 6214 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    041d : 0015 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    041e : 0016 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    041f : 5e00 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_hi = 0
    0420 : 6296 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_lo = 150
    0421 : 0415 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_write_data -- start read cycle
    0422 : 0416 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_read_data -- finish read cycle

    0423 : 0000 ; -- <0083> a = a
    0424 : 0401 ; -- <0083> b = b

    0425 : e406 ; -- <0079> bn gt :else_1061
    0426 : 042f ; -- <0079> "

    0427 : fba0 ; -- <0080> callx  destroy_plan_warmup
    0428 : 03e1 ; -- <0080> "
    0429 : fc00 ; -- <0080> "
    042a : fba0 ; -- <0081> callx  init_plan_run
    042b : 06fd ; -- <0081> "
    042c : fc00 ; -- <0081> "
    042d : e00f ; -- <0082> jmp :done
    042e : 0448 ; -- <0082> "


-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    042f : 0202 ; -- <0087> a = $anmux_engine_block_temp

    0430 : 0351 ; -- <0088> a = a<<1
    0431 : 0616 ; -- <0088> b = 22
    0432 : 5e00 ; -- <0088> av_ad_hi = 0
    0433 : 6300 ; -- <0088> av_ad_lo = ad0
    0434 : 0415 ; -- <0088> b = av_write_data
    0435 : 0416 ; -- <0088> b = av_read_data

    0436 : 03a0 ; -- <0089> a = $temp_ceiling_adc
    0437 : 0ff0 ; -- <0089> "

    0438 : 0000 ; -- <0096> a = a
    0439 : 0401 ; -- <0096> b = b

    043a : e406 ; -- <0090> bn gt :else_1082
    043b : 0448 ; -- <0090> "

    043c : 03a0 ; -- <0091> a = $warmup_success_temp_adc
    043d : 04c0 ; -- <0091> "

    043e : 0000 ; -- <0095> a = a
    043f : 0401 ; -- <0095> b = b

    0440 : e405 ; -- <0092> bn lt :else_1088
    0441 : 0448 ; -- <0092> "

    0442 : fba0 ; -- <0093> callx  destroy_plan_warmup
    0443 : 03e1 ; -- <0093> "
    0444 : fc00 ; -- <0093> "
    0445 : fba0 ; -- <0094> callx  init_plan_run
    0446 : 06fd ; -- <0094> "
    0447 : fc00 ; -- <0094> "



-- :done -- = 0x0448

    0448 : f80c ; -- <0100> pop rtna -- func leave_warmup
    0449 : fc00 ; -- <0100> swapra = nop



-- :rpm_cells -- = 0x044a
    044a : 01f4 ; -- <0004> 500
    044b : 0271 ; -- <0005> 625
    044c : 030d ; -- <0006> 781
    044d : 03d1 ; -- <0007> 977
    044e : 04c5 ; -- <0008> 1221
    044f : 05f6 ; -- <0009> 1526
    0450 : 0773 ; -- <0010> 1907
    0451 : 0950 ; -- <0011> 2384
    0452 : 0ba4 ; -- <0012> 2980
    0453 : 0e8d ; -- <0013> 3725
    0454 : 1231 ; -- <0014> 4657
    0455 : 16bd ; -- <0015> 5821
    0456 : 1c6c ; -- <0016> 7276
    0457 : ffff ; -- <0017> 0xffff




-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed.

-- o2 sensor interpetation & state machine.

-- default maps
-- :default_tps_reference -- = 0x0458
    0458 : 05f0 ; -- <0060> 0x05f0
    0459 : 0680 ; -- <0061> 0x0680
    045a : 0680 ; -- <0062> 0x0680
    045b : 0680 ; -- <0063> 0x0680
    045c : 0680 ; -- <0064> 0x0680
    045d : 0680 ; -- <0065> 0x0680
    045e : 0700 ; -- <0066> 0x0700
    045f : 0780 ; -- <0067> 0x0780
    0460 : 0800 ; -- <0068> 0x0800
    0461 : 0880 ; -- <0069> 0x0880
    0462 : 0900 ; -- <0070> 0x0900
    0463 : 0980 ; -- <0071> 0x0980
    0464 : 0c80 ; -- <0072> 0x0c80
-- :default_tps_enrich_thou -- = 0x0465
    0465 : 0000 ; -- <0074> 0x0000
    0466 : 0000 ; -- <0075> 0x0000
    0467 : 0100 ; -- <0076> 0x0100
    0468 : 0200 ; -- <0077> 0x0200
    0469 : 1388 ; -- <0078> 0x1388


-- :plan_name_learn_stoich -- = 0x046a
-- "LN\x0"
    046a : 4e4c ; -- <0082> NL
    046b : 0000 ; -- <0082>   

-- ######## func init_plan_learn_stoich -- = 0x046c

-- set up the learn_stoich plan.
    046c : 5e00 ; -- <0086> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    046d : 62e4 ; -- <0086> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 228
    046e : 560a ; -- <0086> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- memorize state.
    046f : 5e00 ; -- <0089> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_hi = 0
    0470 : 6288 ; -- <0089> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_lo = 136
    0471 : 57a0 ; -- <0089> ram $ram_plan_name = :plan_name_learn_stoich -- av_write_data = :plan_name_learn_stoich
    0472 : 046a ; -- <0089> "
    0473 : 5e00 ; -- <0090> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_hi = 0
    0474 : 628a ; -- <0090> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_lo = 138
    0475 : 57a0 ; -- <0090> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_write_data = :puff_len_learn_stoich
    0476 : 0485 ; -- <0090> "
    0477 : 5e00 ; -- <0091> ram $ram_transition_func = :leave_learn_stoich -- av_ad_hi = 0
    0478 : 628c ; -- <0091> ram $ram_transition_func = :leave_learn_stoich -- av_ad_lo = 140
    0479 : 57a0 ; -- <0091> ram $ram_transition_func = :leave_learn_stoich -- av_write_data = :leave_learn_stoich
    047a : 057f ; -- <0091> "
    047b : 5e00 ; -- <0092> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_hi = 0
    047c : 628e ; -- <0092> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_lo = 142
    047d : 57a0 ; -- <0092> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_write_data = :destroy_plan_learn_stoich
    047e : 0480 ; -- <0092> "

    047f : fc00 ; -- <0094> swapra = nop

-- ######## func destroy_plan_learn_stoich -- = 0x0480


    0480 : fc00 ; -- <0097> swapra = nop

-- :lrns_trim_up_msg -- = 0x0481
-- "trR\x0"
    0481 : 7274 ; -- <0099> rt
    0482 : 0052 ; -- <0099>  R
-- :lrns_trim_down_msg -- = 0x0483
-- "trL\x0"
    0483 : 7274 ; -- <0101> rt
    0484 : 004c ; -- <0101>  L

-- ######## func puff_len_learn_stoich -- = 0x0485
    0485 : 3002 ; -- <0136> push i -- func puff_len_learn_stoich
    0486 : 3003 ; -- <0136> push j -- "
    0487 : 3006 ; -- <0136> push g6 -- "
    0488 : 3007 ; -- <0136> push g7 -- "
    0489 : 303e ; -- <0136> push rtna -- "

    048a : 5e00 ; -- <0104> ram i = $ram_lrns_ticks_remain -- av_ad_hi = 0
    048b : 62e4 ; -- <0104> ram i = $ram_lrns_ticks_remain -- av_ad_lo = 228
    048c : 0815 ; -- <0104> ram i = $ram_lrns_ticks_remain -- i = av_write_data -- start read cycle
    048d : 0816 ; -- <0104> ram i = $ram_lrns_ticks_remain -- i = av_read_data -- finish read cycle

    048e : 0002 ; -- <0135> a = i
    048f : 0600 ; -- <0135> b = 0

    0490 : e406 ; -- <0105> bn gt :else_1168
    0491 : 0499 ; -- <0105> "

    0492 : 0f60 ; -- <0106> j = -1
    0493 : 5e00 ; -- <0107> ram $ram_lrns_ticks_remain = i+j -- av_ad_hi = 0
    0494 : 62e4 ; -- <0107> ram $ram_lrns_ticks_remain = i+j -- av_ad_lo = 228
    0495 : c800 ; -- <0107> ram $ram_lrns_ticks_remain = i+j -- av_write_data = i+j
    0496 : 5710 ; -- <0107> "

    0497 : e00f ; -- <0109> jmp :end_1168
    0498 : 04d5 ; -- <0109> "

    0499 : 5e00 ; -- <0110> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    049a : 62e4 ; -- <0110> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 228
    049b : 560a ; -- <0110> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    049c : 5e00 ; -- <0113> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    049d : 6290 ; -- <0113> ram i = $ram_next_puff_len_us -- av_ad_lo = 144
    049e : 0815 ; -- <0113> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    049f : 0816 ; -- <0113> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    04a0 : 0e00 ; -- <0114> j = 0
    04a1 : 5e00 ; -- <0115> ram g6 = $ram_o2_state -- av_ad_hi = 0
    04a2 : 62e6 ; -- <0115> ram g6 = $ram_o2_state -- av_ad_lo = 230
    04a3 : 1815 ; -- <0115> ram g6 = $ram_o2_state -- g6 = av_write_data -- start read cycle
    04a4 : 1816 ; -- <0115> ram g6 = $ram_o2_state -- g6 = av_read_data -- finish read cycle
    04a5 : fba0 ; -- <0116> callx  interpret_o2
    04a6 : 0542 ; -- <0116> "
    04a7 : fc00 ; -- <0116> "
    04a8 : 5e00 ; -- <0117> ram g7 = $ram_o2_state -- av_ad_hi = 0
    04a9 : 62e6 ; -- <0117> ram g7 = $ram_o2_state -- av_ad_lo = 230
    04aa : 1c15 ; -- <0117> ram g7 = $ram_o2_state -- g7 = av_write_data -- start read cycle
    04ab : 1c16 ; -- <0117> ram g7 = $ram_o2_state -- g7 = av_read_data -- finish read cycle

    04ac : 0007 ; -- <0134> a = g7
    04ad : 0601 ; -- <0134> b = 1

    04ae : e407 ; -- <0118> bn eq :else_1198
    04af : 04c5 ; -- <0118> "

-- sensing a lean condition.  trim up to enrich.

    04b0 : 0002 ; -- <0122> a = i
    04b1 : 07a0 ; -- <0122> b = 10000
    04b2 : 2710 ; -- <0122> "

    04b3 : e405 ; -- <0120> bn lt :else_1203
    04b4 : 04b7 ; -- <0120> "

    04b5 : 0fa0 ; -- <0121> j = $lrns_puff_step_up_us
    04b6 : 0258 ; -- <0121> "

    04b7 : 23a0 ; -- <0123> pa = :lrns_trim_up_msg
    04b8 : 0481 ; -- <0123> "
    04b9 : fba0 ; -- <0123> callx  set_text_flag  :lrns_trim_up_msg
    04ba : 0b26 ; -- <0123> "
    04bb : fc00 ; -- <0123> "

    04bc : 0006 ; -- <0127> a = g6
    04bd : 0602 ; -- <0127> b = 2

    04be : e407 ; -- <0124> bn eq :else_1214
    04bf : 04c3 ; -- <0124> "

-- o2 state just switched to lean.  adjust map.
    04c0 : fba0 ; -- <0126> callx  learn_smap
    04c1 : 04e1 ; -- <0126> "
    04c2 : fc00 ; -- <0126> "


    04c3 : e00f ; -- <0129> jmp :end_1198
    04c4 : 04d1 ; -- <0129> "

-- sensing a rich condition.  trim down to lean it out.

    04c5 : 0002 ; -- <0133> a = i
    04c6 : 07a0 ; -- <0133> b = 2000
    04c7 : 07d0 ; -- <0133> "

    04c8 : e406 ; -- <0131> bn gt :else_1224
    04c9 : 04cc ; -- <0131> "

    04ca : 0fa0 ; -- <0132> j = $lrns_puff_step_down_us
    04cb : ffdf ; -- <0132> "

    04cc : 23a0 ; -- <0134> pa = :lrns_trim_down_msg
    04cd : 0483 ; -- <0134> "
    04ce : fba0 ; -- <0134> callx  set_text_flag  :lrns_trim_down_msg
    04cf : 0b26 ; -- <0134> "
    04d0 : fc00 ; -- <0134> "

    04d1 : 5e00 ; -- <0135> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    04d2 : 6290 ; -- <0135> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 144
    04d3 : c800 ; -- <0135> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    04d4 : 5710 ; -- <0135> "


    04d5 : f80c ; -- <0137> pop rtna -- func puff_len_learn_stoich
    04d6 : 1c0c ; -- <0137> pop g7 -- "
    04d7 : 180c ; -- <0137> pop g6 -- "
    04d8 : 0c0c ; -- <0137> pop j -- "
    04d9 : 080c ; -- <0137> pop i -- "
    04da : fc00 ; -- <0137> swapra = nop

-- :lrns_enrich_msg -- = 0x04db
-- "lrnR\x0"
    04db : 726c ; -- <0139> rl
    04dc : 526e ; -- <0139> Rn
    04dd : 0000 ; -- <0139>   
-- :lrns_lean_msg -- = 0x04de
-- "lrnL\x0"
    04de : 726c ; -- <0141> rl
    04df : 4c6e ; -- <0141> Ln
    04e0 : 0000 ; -- <0141>   

-- ######## func learn_smap -- = 0x04e1
    04e1 : 3002 ; -- <0177> push i -- func learn_smap
    04e2 : 3004 ; -- <0177> push x -- "
    04e3 : 3005 ; -- <0177> push y -- "
    04e4 : 303e ; -- <0177> push rtna -- "

    04e5 : 5e00 ; -- <0144> ram a = $ram_rpm_valid -- av_ad_hi = 0
    04e6 : 627e ; -- <0144> ram a = $ram_rpm_valid -- av_ad_lo = 126
    04e7 : 0015 ; -- <0144> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    04e8 : 0016 ; -- <0144> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    04e9 : 0000 ; -- <0176> a = a
    04ea : 0601 ; -- <0176> b = 1

    04eb : e407 ; -- <0145> bn eq :else_1259
    04ec : 0539 ; -- <0145> "

-- let g6 = map cell num.  x = map puff len.  i = observed stoich puff len.
    04ed : 5e00 ; -- <0147> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    04ee : 627c ; -- <0147> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    04ef : 2015 ; -- <0147> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    04f0 : 2016 ; -- <0147> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    04f1 : fba0 ; -- <0148> callx  find_rpm_cell  pa  g6
    04f2 : 0585 ; -- <0148> "
    04f3 : fc00 ; -- <0148> "
    04f4 : 1808 ; -- <0148> g6 = pa
    04f5 : 0006 ; -- <0149> a = g6

    04f6 : 0351 ; -- <0150> a = a<<1
    04f7 : 0698 ; -- <0150> b = 152
    04f8 : 5e00 ; -- <0150> av_ad_hi = 0
    04f9 : 6300 ; -- <0150> av_ad_lo = ad0
    04fa : 0415 ; -- <0150> b = av_write_data
    04fb : 0416 ; -- <0150> b = av_read_data

    04fc : 1001 ; -- <0151> x = b
    04fd : 5e00 ; -- <0152> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    04fe : 6290 ; -- <0152> ram i = $ram_next_puff_len_us -- av_ad_lo = 144
    04ff : 0815 ; -- <0152> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    0500 : 0816 ; -- <0152> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    0501 : 17a0 ; -- <0153> y = (0xffff - $lrns_map_step + 1)
    0502 : ff38 ; -- <0153> "

    0503 : c800 ; -- <0160> a = x+y
    0504 : 0320 ; -- <0160> "
    0505 : 0402 ; -- <0160> b = i

    0506 : e406 ; -- <0154> bn gt :else_1286
    0507 : 0516 ; -- <0154> "

-- map is richer than observed stoich.  lean the map 1 step.
    0508 : 0006 ; -- <0156> a = g6
    0509 : c800 ; -- <0157> b = x+y
    050a : 0720 ; -- <0157> "

    050b : 0351 ; -- <0158> a = a<<1
    050c : 3001 ; -- <0158> push b -- push b
    050d : 0698 ; -- <0158> b = 152
    050e : 5e00 ; -- <0158> av_ad_hi = 0
    050f : 6300 ; -- <0158> av_ad_lo = ad0
    0510 : 540c ; -- <0158> pop av_write_data -- pop av_write_data

    0511 : 23a0 ; -- <0159> pa = :lrns_lean_msg
    0512 : 04de ; -- <0159> "
    0513 : fba0 ; -- <0159> callx  set_text_flag  :lrns_lean_msg
    0514 : 0b26 ; -- <0159> "
    0515 : fc00 ; -- <0159> "

    0516 : 16c8 ; -- <0161> y = $lrns_map_step

    0517 : c800 ; -- <0168> a = x+y
    0518 : 0320 ; -- <0168> "
    0519 : 0402 ; -- <0168> b = i

    051a : e405 ; -- <0162> bn lt :else_1306
    051b : 052a ; -- <0162> "

-- map is leaner than observed stoich.  rich the map 1 step.
    051c : 0006 ; -- <0164> a = g6
    051d : c800 ; -- <0165> b = x+y
    051e : 0720 ; -- <0165> "

    051f : 0351 ; -- <0166> a = a<<1
    0520 : 3001 ; -- <0166> push b -- push b
    0521 : 0698 ; -- <0166> b = 152
    0522 : 5e00 ; -- <0166> av_ad_hi = 0
    0523 : 6300 ; -- <0166> av_ad_lo = ad0
    0524 : 540c ; -- <0166> pop av_write_data -- pop av_write_data

    0525 : 23a0 ; -- <0167> pa = :lrns_enrich_msg
    0526 : 04db ; -- <0167> "
    0527 : fba0 ; -- <0167> callx  set_text_flag  :lrns_enrich_msg
    0528 : 0b26 ; -- <0167> "
    0529 : fc00 ; -- <0167> "


-- dump smap if we haven't done so lately.
    052a : 5e00 ; -- <0171> ram a = $ram_last_learn_second -- av_ad_hi = 0
    052b : 62b2 ; -- <0171> ram a = $ram_last_learn_second -- av_ad_lo = 178
    052c : 0015 ; -- <0171> ram a = $ram_last_learn_second -- a = av_write_data -- start read cycle
    052d : 0016 ; -- <0171> ram a = $ram_last_learn_second -- a = av_read_data -- finish read cycle
    052e : 5e00 ; -- <0172> ram b = $ram_seconds_cnt -- av_ad_hi = 0
    052f : 6242 ; -- <0172> ram b = $ram_seconds_cnt -- av_ad_lo = 66
    0530 : 0415 ; -- <0172> ram b = $ram_seconds_cnt -- b = av_write_data -- start read cycle
    0531 : 0416 ; -- <0172> ram b = $ram_seconds_cnt -- b = av_read_data -- finish read cycle

    0532 : 0000 ; -- <0175> a = a
    0533 : 0401 ; -- <0175> b = b

    0534 : e007 ; -- <0173> br eq :else_1332
    0535 : 0539 ; -- <0173> "

    0536 : fba0 ; -- <0174> callx  dump_smap_cmd
    0537 : 05a2 ; -- <0174> "
    0538 : fc00 ; -- <0174> "



    0539 : f80c ; -- <0178> pop rtna -- func learn_smap
    053a : 140c ; -- <0178> pop y -- "
    053b : 100c ; -- <0178> pop x -- "
    053c : 080c ; -- <0178> pop i -- "
    053d : fc00 ; -- <0178> swapra = nop

-- :o2_rich_msg -- = 0x053e
-- "o2R\x0"
    053e : 326f ; -- <0180> 2o
    053f : 0052 ; -- <0180>  R
-- :o2_lean_msg -- = 0x0540
-- "o2L\x0"
    0540 : 326f ; -- <0182> 2o
    0541 : 004c ; -- <0182>  L

-- ######## func interpret_o2 -- = 0x0542

    0542 : 5e00 ; -- <0185> ram a = $ram_o2_state -- av_ad_hi = 0
    0543 : 62e6 ; -- <0185> ram a = $ram_o2_state -- av_ad_lo = 230
    0544 : 0015 ; -- <0185> ram a = $ram_o2_state -- a = av_write_data -- start read cycle
    0545 : 0016 ; -- <0185> ram a = $ram_o2_state -- a = av_read_data -- finish read cycle

    0546 : 0000 ; -- <0196> a = a
    0547 : 0601 ; -- <0196> b = 1

    0548 : e007 ; -- <0186> br eq :else_1352
    0549 : 055d ; -- <0186> "

-- check sensor for lean state.
    054a : 0205 ; -- <0188> a = $o2_adc_channel

    054b : 0351 ; -- <0189> a = a<<1
    054c : 0626 ; -- <0189> b = 38
    054d : 5e00 ; -- <0189> av_ad_hi = 0
    054e : 6300 ; -- <0189> av_ad_lo = ad0
    054f : 0415 ; -- <0189> b = av_write_data
    0550 : 0416 ; -- <0189> b = av_read_data

    0551 : 03a0 ; -- <0190> a = $o2_lean_thresh_adc
    0552 : 01c2 ; -- <0190> "

    0553 : 0000 ; -- <0195> a = a
    0554 : 0401 ; -- <0195> b = b

    0555 : e406 ; -- <0191> bn gt :else_1365
    0556 : 055d ; -- <0191> "

    0557 : 5e00 ; -- <0192> ram $ram_o2_state = $o2_state_lean -- av_ad_hi = 0
    0558 : 62e6 ; -- <0192> ram $ram_o2_state = $o2_state_lean -- av_ad_lo = 230
    0559 : 5601 ; -- <0192> ram $ram_o2_state = $o2_state_lean -- av_write_data = 1
    055a : 5e00 ; -- <0193> ram $ram_o2_been_lean = 1 -- av_ad_hi = 0
    055b : 62ea ; -- <0193> ram $ram_o2_been_lean = 1 -- av_ad_lo = 234
    055c : 5601 ; -- <0193> ram $ram_o2_been_lean = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_lean_msg



    055d : 0000 ; -- <0207> a = a
    055e : 0602 ; -- <0207> b = 2

    055f : e007 ; -- <0197> br eq :else_1375
    0560 : 0574 ; -- <0197> "

-- check sensor for rich state.
    0561 : 0205 ; -- <0199> a = $o2_adc_channel

    0562 : 0351 ; -- <0200> a = a<<1
    0563 : 0626 ; -- <0200> b = 38
    0564 : 5e00 ; -- <0200> av_ad_hi = 0
    0565 : 6300 ; -- <0200> av_ad_lo = ad0
    0566 : 0415 ; -- <0200> b = av_write_data
    0567 : 0416 ; -- <0200> b = av_read_data

    0568 : 03a0 ; -- <0201> a = $o2_rich_thresh_adc
    0569 : 02bc ; -- <0201> "

    056a : 0000 ; -- <0206> a = a
    056b : 0401 ; -- <0206> b = b

    056c : e405 ; -- <0202> bn lt :else_1388
    056d : 0574 ; -- <0202> "

    056e : 5e00 ; -- <0203> ram $ram_o2_state = $o2_state_rich -- av_ad_hi = 0
    056f : 62e6 ; -- <0203> ram $ram_o2_state = $o2_state_rich -- av_ad_lo = 230
    0570 : 5602 ; -- <0203> ram $ram_o2_state = $o2_state_rich -- av_write_data = 2
    0571 : 5e00 ; -- <0204> ram $ram_o2_been_rich = 1 -- av_ad_hi = 0
    0572 : 62e8 ; -- <0204> ram $ram_o2_been_rich = 1 -- av_ad_lo = 232
    0573 : 5601 ; -- <0204> ram $ram_o2_been_rich = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_rich_msg



    0574 : fc00 ; -- <0209> swapra = nop

-- ######## func init_o2_state -- = 0x0575

    0575 : 5e00 ; -- <0211> ram $ram_o2_state = $o2_state_init -- av_ad_hi = 0
    0576 : 62e6 ; -- <0211> ram $ram_o2_state = $o2_state_init -- av_ad_lo = 230
    0577 : 5600 ; -- <0211> ram $ram_o2_state = $o2_state_init -- av_write_data = 0
    0578 : 5e00 ; -- <0212> ram $ram_o2_been_lean = 0 -- av_ad_hi = 0
    0579 : 62ea ; -- <0212> ram $ram_o2_been_lean = 0 -- av_ad_lo = 234
    057a : 5600 ; -- <0212> ram $ram_o2_been_lean = 0 -- av_write_data = 0
    057b : 5e00 ; -- <0213> ram $ram_o2_been_rich = 0 -- av_ad_hi = 0
    057c : 62e8 ; -- <0213> ram $ram_o2_been_rich = 0 -- av_ad_lo = 232
    057d : 5600 ; -- <0213> ram $ram_o2_been_rich = 0 -- av_write_data = 0

    057e : fc00 ; -- <0215> swapra = nop

-- ######## func leave_learn_stoich -- = 0x057f
    057f : 303e ; -- <0218> push rtna -- func leave_learn_stoich

    0580 : fba0 ; -- <0217> callx  check_engine_stop  pa
    0581 : 0c5a ; -- <0217> "
    0582 : fc00 ; -- <0217> "

    0583 : f80c ; -- <0219> pop rtna -- func leave_learn_stoich
    0584 : fc00 ; -- <0219> swapra = nop

-- ######## func find_rpm_cell -- = 0x0585
    0585 : 3002 ; -- <0236> push i -- func find_rpm_cell
    0586 : 3003 ; -- <0236> push j -- "

    0587 : 0a01 ; -- <0221> i = 1
    0588 : 0008 ; -- <0222> a = rpm
    0589 : 0760 ; -- <0223> b = 0xffff
    058a : e007 ; -- <0224> br eq :found
    058b : 0599 ; -- <0224> "
-- :next_cell -- = 0x058c
    058c : 0fa0 ; -- <0226> j = :rpm_cells
    058d : 044a ; -- <0226> "
    058e : c800 ; -- <0227> fetch a from i+j
    058f : d310 ; -- <0227> "
    0590 : 03b0 ; -- <0227> "
    0591 : 0408 ; -- <0228> b = rpm
    0592 : e006 ; -- <0229> br gt :found
    0593 : 0599 ; -- <0229> "
    0594 : 0e01 ; -- <0230> j = 1
    0595 : c800 ; -- <0231> i = i+j
    0596 : 0b10 ; -- <0231> "
    0597 : e00f ; -- <0232> jmp :next_cell
    0598 : 058c ; -- <0232> "
-- :found -- = 0x0599
    0599 : 0f60 ; -- <0234> j = -1
    059a : c800 ; -- <0235> cell = i+j
    059b : 2310 ; -- <0235> "
    059c : 0c0c ; -- <0235> pop j -- rtn i+j
    059d : 080c ; -- <0235> pop i -- "
    059e : fc00 ; -- <0234> swapra = nop

    059f : 0c0c ; -- <0237> pop j -- func find_rpm_cell
    05a0 : 080c ; -- <0237> pop i -- "
    05a1 : fc00 ; -- <0237> swapra = nop

-- ######## func dump_smap_cmd -- = 0x05a2
    05a2 : 3004 ; -- <0276> push x -- func dump_smap_cmd
    05a3 : 303e ; -- <0276> push rtna -- "

    05a4 : 020d ; -- <0239> a = 13 -- puteol
    05a5 : fba0 ; -- <0239> puteol
    05a6 : 009b ; -- <0239> "
    05a7 : fc00 ; -- <0239> "
    05a8 : 020a ; -- <0239> a = 10 -- puteol
    05a9 : fba0 ; -- <0239> puteol
    05aa : 009b ; -- <0239> "
    05ab : fc00 ; -- <0239> "
    05ac : 5e00 ; -- <0240> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    05ad : 627c ; -- <0240> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    05ae : 2015 ; -- <0240> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    05af : 2016 ; -- <0240> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    05b0 : fba0 ; -- <0241> callx  find_rpm_cell  pa  pa
    05b1 : 0585 ; -- <0241> "
    05b2 : fc00 ; -- <0241> "
    05b3 : 1200 ; -- <0251> x = 0
-- :loop_1459 -- = 0x05b4

    05b4 : 0004 ; -- <0242> a = x

    05b5 : 0351 ; -- <0243> a = a<<1
    05b6 : 0698 ; -- <0243> b = 152
    05b7 : 5e00 ; -- <0243> av_ad_hi = 0
    05b8 : 6300 ; -- <0243> av_ad_lo = ad0
    05b9 : 0415 ; -- <0243> b = av_write_data
    05ba : 0416 ; -- <0243> b = av_read_data

    05bb : 0001 ; -- <0244> a = b
    05bc : fba0 ; -- <0245> call put4x
    05bd : 00c3 ; -- <0245> "
    05be : fc00 ; -- <0245> "

    05bf : 0004 ; -- <0248> a = x
    05c0 : 0408 ; -- <0248> b = pa

    05c1 : e407 ; -- <0246> bn eq :else_1473
    05c2 : 05c7 ; -- <0246> "

    05c3 : 023c ; -- <0247> a = 60 -- putasc "<"
    05c4 : fba0 ; -- <0247> putasc "<"
    05c5 : 009b ; -- <0247> "
    05c6 : fc00 ; -- <0247> "

    05c7 : 0220 ; -- <0249> a = 32 -- putasc " "
    05c8 : fba0 ; -- <0249> putasc " "
    05c9 : 009b ; -- <0249> "
    05ca : fc00 ; -- <0249> "


    05cb : 0004 ; -- <0251> a = x
    05cc : 0601 ; -- <0251> b = 1
    05cd : c800 ; -- <0251> x = a+b
    05ce : 1300 ; -- <0251> "


    05cf : 0004 ; -- <0251> a = x
    05d0 : 060d ; -- <0251> b = $num_rpm_cells
    05d1 : e005 ; -- <0251> br lt :loop_1459
    05d2 : 05b4 ; -- <0251> "

-- :end_1459 -- = 0x05d3
    05d3 : 020d ; -- <0252> a = 13 -- puteol
    05d4 : fba0 ; -- <0252> puteol
    05d5 : 009b ; -- <0252> "
    05d6 : fc00 ; -- <0252> "
    05d7 : 020a ; -- <0252> a = 10 -- puteol
    05d8 : fba0 ; -- <0252> puteol
    05d9 : 009b ; -- <0252> "
    05da : fc00 ; -- <0252> "
    05db : 1200 ; -- <0262> x = 0
-- :loop_1499 -- = 0x05dc

    05dc : 0004 ; -- <0253> a = x

    05dd : 0351 ; -- <0254> a = a<<1
    05de : 06b4 ; -- <0254> b = 180
    05df : 5e00 ; -- <0254> av_ad_hi = 0
    05e0 : 6300 ; -- <0254> av_ad_lo = ad0
    05e1 : 0415 ; -- <0254> b = av_write_data
    05e2 : 0416 ; -- <0254> b = av_read_data

    05e3 : 0001 ; -- <0255> a = b
    05e4 : fba0 ; -- <0256> call put4x
    05e5 : 00c3 ; -- <0256> "
    05e6 : fc00 ; -- <0256> "

    05e7 : 0004 ; -- <0259> a = x
    05e8 : 0408 ; -- <0259> b = pa

    05e9 : e407 ; -- <0257> bn eq :else_1513
    05ea : 05ef ; -- <0257> "

    05eb : 023c ; -- <0258> a = 60 -- putasc "<"
    05ec : fba0 ; -- <0258> putasc "<"
    05ed : 009b ; -- <0258> "
    05ee : fc00 ; -- <0258> "

    05ef : 0220 ; -- <0260> a = 32 -- putasc " "
    05f0 : fba0 ; -- <0260> putasc " "
    05f1 : 009b ; -- <0260> "
    05f2 : fc00 ; -- <0260> "


    05f3 : 0004 ; -- <0262> a = x
    05f4 : 0601 ; -- <0262> b = 1
    05f5 : c800 ; -- <0262> x = a+b
    05f6 : 1300 ; -- <0262> "


    05f7 : 0004 ; -- <0262> a = x
    05f8 : 060d ; -- <0262> b = $num_tps_cells
    05f9 : e005 ; -- <0262> br lt :loop_1499
    05fa : 05dc ; -- <0262> "

-- :end_1499 -- = 0x05fb
    05fb : 020d ; -- <0263> a = 13 -- puteol
    05fc : fba0 ; -- <0263> puteol
    05fd : 009b ; -- <0263> "
    05fe : fc00 ; -- <0263> "
    05ff : 020a ; -- <0263> a = 10 -- puteol
    0600 : fba0 ; -- <0263> puteol
    0601 : 009b ; -- <0263> "
    0602 : fc00 ; -- <0263> "
    0603 : 5e00 ; -- <0264> ram pa = $ram_tps_state -- av_ad_hi = 0
    0604 : 62ce ; -- <0264> ram pa = $ram_tps_state -- av_ad_lo = 206
    0605 : 2015 ; -- <0264> ram pa = $ram_tps_state -- pa = av_write_data -- start read cycle
    0606 : 2016 ; -- <0264> ram pa = $ram_tps_state -- pa = av_read_data -- finish read cycle
    0607 : 1200 ; -- <0274> x = 0
-- :loop_1543 -- = 0x0608

    0608 : 0004 ; -- <0265> a = x

    0609 : 0351 ; -- <0266> a = a<<1
    060a : 06d0 ; -- <0266> b = 208
    060b : 5e00 ; -- <0266> av_ad_hi = 0
    060c : 6300 ; -- <0266> av_ad_lo = ad0
    060d : 0415 ; -- <0266> b = av_write_data
    060e : 0416 ; -- <0266> b = av_read_data

    060f : 0001 ; -- <0267> a = b
    0610 : fba0 ; -- <0268> call put4x
    0611 : 00c3 ; -- <0268> "
    0612 : fc00 ; -- <0268> "

    0613 : 0004 ; -- <0271> a = x
    0614 : 0408 ; -- <0271> b = pa

    0615 : e407 ; -- <0269> bn eq :else_1557
    0616 : 061b ; -- <0269> "

    0617 : 023c ; -- <0270> a = 60 -- putasc "<"
    0618 : fba0 ; -- <0270> putasc "<"
    0619 : 009b ; -- <0270> "
    061a : fc00 ; -- <0270> "

    061b : 0220 ; -- <0272> a = 32 -- putasc " "
    061c : fba0 ; -- <0272> putasc " "
    061d : 009b ; -- <0272> "
    061e : fc00 ; -- <0272> "


    061f : 0004 ; -- <0274> a = x
    0620 : 0601 ; -- <0274> b = 1
    0621 : c800 ; -- <0274> x = a+b
    0622 : 1300 ; -- <0274> "


    0623 : 0004 ; -- <0274> a = x
    0624 : 0605 ; -- <0274> b = $num_tps_states
    0625 : e005 ; -- <0274> br lt :loop_1543
    0626 : 0608 ; -- <0274> "

-- :end_1543 -- = 0x0627
    0627 : 020d ; -- <0275> a = 13 -- puteol
    0628 : fba0 ; -- <0275> puteol
    0629 : 009b ; -- <0275> "
    062a : fc00 ; -- <0275> "
    062b : 020a ; -- <0275> a = 10 -- puteol
    062c : fba0 ; -- <0275> puteol
    062d : 009b ; -- <0275> "
    062e : fc00 ; -- <0275> "

    062f : f80c ; -- <0277> pop rtna -- func dump_smap_cmd
    0630 : 100c ; -- <0277> pop x -- "
    0631 : fc00 ; -- <0277> swapra = nop

-- ######## func load_tps_enrich_cmd -- = 0x0632
    0632 : 3002 ; -- <0286> push i -- func load_tps_enrich_cmd
    0633 : 303e ; -- <0286> push rtna -- "

    0634 : 0a00 ; -- <0285> i = 0
-- :loop_1588 -- = 0x0635

    0635 : fba0 ; -- <0279> call  get4x
    0636 : 00fc ; -- <0279> "
    0637 : fc00 ; -- <0279> "
    0638 : 0400 ; -- <0280> b = a
    0639 : 0002 ; -- <0281> a = i

    063a : 0351 ; -- <0282> a = a<<1
    063b : 3001 ; -- <0282> push b -- push b
    063c : 06d0 ; -- <0282> b = 208
    063d : 5e00 ; -- <0282> av_ad_hi = 0
    063e : 6300 ; -- <0282> av_ad_lo = ad0
    063f : 540c ; -- <0282> pop av_write_data -- pop av_write_data

    0640 : fba0 ; -- <0283> getchar
    0641 : 00a4 ; -- <0283> "
    0642 : fc00 ; -- <0283> "


    0643 : 0002 ; -- <0285> a = i
    0644 : 0601 ; -- <0285> b = 1
    0645 : c800 ; -- <0285> i = a+b
    0646 : 0b00 ; -- <0285> "


    0647 : 0002 ; -- <0285> a = i
    0648 : 0605 ; -- <0285> b = $num_tps_states
    0649 : e005 ; -- <0285> br lt :loop_1588
    064a : 0635 ; -- <0285> "

-- :end_1588 -- = 0x064b

    064b : f80c ; -- <0287> pop rtna -- func load_tps_enrich_cmd
    064c : 080c ; -- <0287> pop i -- "
    064d : fc00 ; -- <0287> swapra = nop

-- ######## func load_smap_cmd -- = 0x064e
    064e : 3002 ; -- <0296> push i -- func load_smap_cmd
    064f : 303e ; -- <0296> push rtna -- "

    0650 : 0a00 ; -- <0295> i = 0
-- :loop_1616 -- = 0x0651

    0651 : fba0 ; -- <0289> call  get4x
    0652 : 00fc ; -- <0289> "
    0653 : fc00 ; -- <0289> "
    0654 : 0400 ; -- <0290> b = a
    0655 : 0002 ; -- <0291> a = i

    0656 : 0351 ; -- <0292> a = a<<1
    0657 : 3001 ; -- <0292> push b -- push b
    0658 : 0698 ; -- <0292> b = 152
    0659 : 5e00 ; -- <0292> av_ad_hi = 0
    065a : 6300 ; -- <0292> av_ad_lo = ad0
    065b : 540c ; -- <0292> pop av_write_data -- pop av_write_data

    065c : fba0 ; -- <0293> getchar
    065d : 00a4 ; -- <0293> "
    065e : fc00 ; -- <0293> "


    065f : 0002 ; -- <0295> a = i
    0660 : 0601 ; -- <0295> b = 1
    0661 : c800 ; -- <0295> i = a+b
    0662 : 0b00 ; -- <0295> "


    0663 : 0002 ; -- <0295> a = i
    0664 : 060d ; -- <0295> b = $num_rpm_cells
    0665 : e005 ; -- <0295> br lt :loop_1616
    0666 : 0651 ; -- <0295> "

-- :end_1616 -- = 0x0667

    0667 : f80c ; -- <0297> pop rtna -- func load_smap_cmd
    0668 : 080c ; -- <0297> pop i -- "
    0669 : fc00 ; -- <0297> swapra = nop

-- ######## func clear_smap_cmd -- = 0x066a
    066a : 3002 ; -- <0304> push i -- func clear_smap_cmd

    066b : 0a00 ; -- <0303> i = 0
-- :loop_1643 -- = 0x066c

    066c : 0002 ; -- <0299> a = i
    066d : 07a0 ; -- <0300> b = 3000
    066e : 0bb8 ; -- <0300> "

    066f : 0351 ; -- <0301> a = a<<1
    0670 : 3001 ; -- <0301> push b -- push b
    0671 : 0698 ; -- <0301> b = 152
    0672 : 5e00 ; -- <0301> av_ad_hi = 0
    0673 : 6300 ; -- <0301> av_ad_lo = ad0
    0674 : 540c ; -- <0301> pop av_write_data -- pop av_write_data



    0675 : 0002 ; -- <0303> a = i
    0676 : 0601 ; -- <0303> b = 1
    0677 : c800 ; -- <0303> i = a+b
    0678 : 0b00 ; -- <0303> "


    0679 : 0002 ; -- <0303> a = i
    067a : 060d ; -- <0303> b = $num_rpm_cells
    067b : e005 ; -- <0303> br lt :loop_1643
    067c : 066c ; -- <0303> "

-- :end_1643 -- = 0x067d

    067d : 080c ; -- <0305> pop i -- func clear_smap_cmd
    067e : fc00 ; -- <0305> swapra = nop

-- ######## func load_tps_ref_cmd -- = 0x067f
    067f : 3002 ; -- <0317> push i -- func load_tps_ref_cmd
    0680 : 3006 ; -- <0317> push ga -- "
    0681 : 303e ; -- <0317> push rtna -- "

    0682 : 0a00 ; -- <0316> i = 0
-- :loop_1666 -- = 0x0683

    0683 : fba0 ; -- <0307> call  get4x
    0684 : 00fc ; -- <0307> "
    0685 : fc00 ; -- <0307> "
    0686 : 1800 ; -- <0308> ga = a
    0687 : 0400 ; -- <0309> b = a
    0688 : 0002 ; -- <0310> a = i

    0689 : 0351 ; -- <0311> a = a<<1
    068a : 3001 ; -- <0311> push b -- push b
    068b : 06b4 ; -- <0311> b = 180
    068c : 5e00 ; -- <0311> av_ad_hi = 0
    068d : 6300 ; -- <0311> av_ad_lo = ad0
    068e : 540c ; -- <0311> pop av_write_data -- pop av_write_data

    068f : 0006 ; -- <0312> a = ga
    0690 : fba0 ; -- <0313> call put4x
    0691 : 00c3 ; -- <0313> "
    0692 : fc00 ; -- <0313> "
    0693 : fba0 ; -- <0314> getchar
    0694 : 00a4 ; -- <0314> "
    0695 : fc00 ; -- <0314> "


    0696 : 0002 ; -- <0316> a = i
    0697 : 0601 ; -- <0316> b = 1
    0698 : c800 ; -- <0316> i = a+b
    0699 : 0b00 ; -- <0316> "


    069a : 0002 ; -- <0316> a = i
    069b : 060d ; -- <0316> b = $num_tps_cells
    069c : e005 ; -- <0316> br lt :loop_1666
    069d : 0683 ; -- <0316> "

-- :end_1666 -- = 0x069e

    069e : f80c ; -- <0318> pop rtna -- func load_tps_ref_cmd
    069f : 180c ; -- <0318> pop ga -- "
    06a0 : 080c ; -- <0318> pop i -- "
    06a1 : fc00 ; -- <0318> swapra = nop

-- ######## func learn_tps_ref_cmd -- = 0x06a2
    06a2 : 303e ; -- <0324> push rtna -- func learn_tps_ref_cmd

    06a3 : 5e00 ; -- <0320> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    06a4 : 627c ; -- <0320> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    06a5 : 2015 ; -- <0320> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    06a6 : 2016 ; -- <0320> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    06a7 : fba0 ; -- <0321> callx  find_rpm_cell  pa  a
    06a8 : 0585 ; -- <0321> "
    06a9 : fc00 ; -- <0321> "
    06aa : 0008 ; -- <0321> a = pa
    06ab : 5e00 ; -- <0322> ram b = $ram_tps_avg -- av_ad_hi = 0
    06ac : 62da ; -- <0322> ram b = $ram_tps_avg -- av_ad_lo = 218
    06ad : 0415 ; -- <0322> ram b = $ram_tps_avg -- b = av_write_data -- start read cycle
    06ae : 0416 ; -- <0322> ram b = $ram_tps_avg -- b = av_read_data -- finish read cycle

    06af : 0351 ; -- <0323> a = a<<1
    06b0 : 3001 ; -- <0323> push b -- push b
    06b1 : 06b4 ; -- <0323> b = 180
    06b2 : 5e00 ; -- <0323> av_ad_hi = 0
    06b3 : 6300 ; -- <0323> av_ad_lo = ad0
    06b4 : 540c ; -- <0323> pop av_write_data -- pop av_write_data


    06b5 : f80c ; -- <0325> pop rtna -- func learn_tps_ref_cmd
    06b6 : fc00 ; -- <0325> swapra = nop


-- :plan_name_run -- = 0x06b7
-- "RN\x0"
    06b7 : 4e52 ; -- <0002> NR
    06b8 : 0000 ; -- <0002>   


-- max trim is about 200 thou prior to multiplier overflow.
-- or more if the smap puff is below 8000.
-- trim resolution is 4 thou due to multiplier.
-- smap resolution for trimming is 16 us.
-- final trim enrichment us resolution is 16 us.

-- ######## func trim_lean_cmd -- = 0x06b9

    06b9 : 5e00 ; -- <0016> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    06ba : 62ec ; -- <0016> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    06bb : 0015 ; -- <0016> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    06bc : 0016 ; -- <0016> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    06bd : 0000 ; -- <0021> a = a
    06be : 0600 ; -- <0021> b = 0

    06bf : e7a0 ; -- <0017> bn = :else_1727
    06c0 : 06c3 ; -- <0017> "


    06c1 : e00f ; -- <0019> jmp :end_1727
    06c2 : 06c9 ; -- <0019> "

    06c3 : 07a0 ; -- <0020> b = (($run_manual_trim_step_thou ^ 0xffff) + 1)
    06c4 : fffc ; -- <0020> "
    06c5 : 5e00 ; -- <0021> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06c6 : 62ec ; -- <0021> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 236
    06c7 : c800 ; -- <0021> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06c8 : 5700 ; -- <0021> "


    06c9 : fc00 ; -- <0023> swapra = nop

-- ######## func trim_rich_cmd -- = 0x06ca

    06ca : 5e00 ; -- <0025> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    06cb : 62ec ; -- <0025> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    06cc : 0015 ; -- <0025> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    06cd : 0016 ; -- <0025> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    06ce : 0000 ; -- <0030> a = a
    06cf : 07a0 ; -- <0030> b = 800
    06d0 : 0320 ; -- <0030> "

    06d1 : e406 ; -- <0026> bn gt :else_1745
    06d2 : 06d5 ; -- <0026> "


    06d3 : e00f ; -- <0028> jmp :end_1745
    06d4 : 06da ; -- <0028> "

    06d5 : 0604 ; -- <0029> b = $run_manual_trim_step_thou
    06d6 : 5e00 ; -- <0030> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06d7 : 62ec ; -- <0030> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 236
    06d8 : c800 ; -- <0030> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06d9 : 5700 ; -- <0030> "


    06da : fc00 ; -- <0032> swapra = nop

-- ######## func trim_2lean_cmd -- = 0x06db

    06db : 5e00 ; -- <0034> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    06dc : 62ec ; -- <0034> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    06dd : 0015 ; -- <0034> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    06de : 0016 ; -- <0034> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    06df : 0000 ; -- <0039> a = a
    06e0 : 0600 ; -- <0039> b = 0

    06e1 : e7a0 ; -- <0035> bn = :else_1761
    06e2 : 06e5 ; -- <0035> "


    06e3 : e00f ; -- <0037> jmp :end_1761
    06e4 : 06eb ; -- <0037> "

    06e5 : 07a0 ; -- <0038> b = ((($run_manual_trim_step_thou << 3) ^ 0xffff) + 1)
    06e6 : ffe0 ; -- <0038> "
    06e7 : 5e00 ; -- <0039> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06e8 : 62ec ; -- <0039> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 236
    06e9 : c800 ; -- <0039> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06ea : 5700 ; -- <0039> "


    06eb : fc00 ; -- <0041> swapra = nop

-- ######## func trim_2rich_cmd -- = 0x06ec

    06ec : 5e00 ; -- <0043> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    06ed : 62ec ; -- <0043> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    06ee : 0015 ; -- <0043> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    06ef : 0016 ; -- <0043> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    06f0 : 0000 ; -- <0048> a = a
    06f1 : 07a0 ; -- <0048> b = 800
    06f2 : 0320 ; -- <0048> "

    06f3 : e406 ; -- <0044> bn gt :else_1779
    06f4 : 06f7 ; -- <0044> "


    06f5 : e00f ; -- <0046> jmp :end_1779
    06f6 : 06fc ; -- <0046> "

    06f7 : 0620 ; -- <0047> b = ($run_manual_trim_step_thou << 3)
    06f8 : 5e00 ; -- <0048> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06f9 : 62ec ; -- <0048> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 236
    06fa : c800 ; -- <0048> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06fb : 5700 ; -- <0048> "


    06fc : fc00 ; -- <0050> swapra = nop

-- ######## func init_plan_run -- = 0x06fd

-- set up the run plan.
    06fd : 5e00 ; -- <0053> ram $ram_run_manual_trim_thou = 0 -- av_ad_hi = 0
    06fe : 62ec ; -- <0053> ram $ram_run_manual_trim_thou = 0 -- av_ad_lo = 236
    06ff : 5600 ; -- <0053> ram $ram_run_manual_trim_thou = 0 -- av_write_data = 0

-- memorize state.
    0700 : 5e00 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    0701 : 6288 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 136
    0702 : 57a0 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    0703 : 06b7 ; -- <0056> "
    0704 : 5e00 ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    0705 : 628a ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 138
    0706 : 57a0 ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    0707 : 0718 ; -- <0057> "
    0708 : 5e00 ; -- <0058> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    0709 : 628c ; -- <0058> ram $ram_transition_func = :leave_run -- av_ad_lo = 140
    070a : 57a0 ; -- <0058> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    070b : 0775 ; -- <0058> "
    070c : 5e00 ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    070d : 628e ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 142
    070e : 57a0 ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    070f : 0711 ; -- <0059> "

    0710 : fc00 ; -- <0061> swapra = nop

-- ######## func destroy_plan_run -- = 0x0711


    0711 : fc00 ; -- <0064> swapra = nop

-- :tps_accel2_msg -- = 0x0712
-- "tpsa2\x0"
    0712 : 7074 ; -- <0066> pt
    0713 : 6173 ; -- <0066> as
    0714 : 0032 ; -- <0066>  2
-- :tps_open_msg -- = 0x0715
-- "tpsop\x0"
    0715 : 7074 ; -- <0068> pt
    0716 : 6f73 ; -- <0068> os
    0717 : 0070 ; -- <0068>  p

-- ######## func puff_len_run -- = 0x0718
    0718 : 3004 ; -- <0122> push x -- func puff_len_run
    0719 : 3006 ; -- <0122> push ga -- "
    071a : 303e ; -- <0122> push rtna -- "

    071b : 5e00 ; -- <0071> ram a = $ram_rpm_valid -- av_ad_hi = 0
    071c : 627e ; -- <0071> ram a = $ram_rpm_valid -- av_ad_lo = 126
    071d : 0015 ; -- <0071> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    071e : 0016 ; -- <0071> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    071f : 0000 ; -- <0121> a = a
    0720 : 0601 ; -- <0121> b = 1

    0721 : e407 ; -- <0072> bn eq :else_1825
    0722 : 0771 ; -- <0072> "

-- read smap puff into ga
    0723 : 5e00 ; -- <0074> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    0724 : 627c ; -- <0074> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    0725 : 2015 ; -- <0074> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    0726 : 2016 ; -- <0074> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    0727 : fba0 ; -- <0075> callx  find_rpm_cell  pa  a
    0728 : 0585 ; -- <0075> "
    0729 : fc00 ; -- <0075> "
    072a : 0008 ; -- <0075> a = pa

    072b : 0351 ; -- <0076> a = a<<1
    072c : 0698 ; -- <0076> b = 152
    072d : 5e00 ; -- <0076> av_ad_hi = 0
    072e : 6300 ; -- <0076> av_ad_lo = ad0
    072f : 0415 ; -- <0076> b = av_write_data
    0730 : 0416 ; -- <0076> b = av_read_data

    0731 : 1801 ; -- <0077> ga = b

-- calculate manual enrichment in us.  apply a total of 10 bits of right-shift to
-- implement division by 1024 (thou unit).  spread them out to prevent overflow.
    0732 : 5e00 ; -- <0081> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    0733 : 62ec ; -- <0081> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    0734 : 0015 ; -- <0081> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    0735 : 0016 ; -- <0081> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle
    0736 : 0350 ; -- <0082> a = a>>1
    0737 : 0750 ; -- <0083> b = a>>1
    0738 : 0006 ; -- <0084> a = ga
    0739 : 0353 ; -- <0085> a = a>>4
    073a : fba0 ; -- <0086> call  multiply
    073b : 0170 ; -- <0086> "
    073c : fc00 ; -- <0086> "
    073d : 0353 ; -- <0087> a = a>>4

-- add enrichment to smap puff.
    073e : 0406 ; -- <0090> b = ga
    073f : c800 ; -- <0091> ga = a+b
    0740 : 1b00 ; -- <0091> "

-- determine TPS enrichment for acceleration.
    0741 : 5e00 ; -- <0094> ram x = $ram_tps_state -- av_ad_hi = 0
    0742 : 62ce ; -- <0094> ram x = $ram_tps_state -- av_ad_lo = 206
    0743 : 1015 ; -- <0094> ram x = $ram_tps_state -- x = av_write_data -- start read cycle
    0744 : 1016 ; -- <0094> ram x = $ram_tps_state -- x = av_read_data -- finish read cycle

    0745 : 0004 ; -- <0097> a = x
    0746 : 0603 ; -- <0097> b = 3

    0747 : e407 ; -- <0095> bn eq :else_1863
    0748 : 074e ; -- <0095> "

    0749 : 23a0 ; -- <0096> pa = :tps_accel2_msg
    074a : 0712 ; -- <0096> "
    074b : fba0 ; -- <0096> callx  unique_text_flag  :tps_accel2_msg
    074c : 0b3b ; -- <0096> "
    074d : fc00 ; -- <0096> "


    074e : 0004 ; -- <0100> a = x
    074f : 0604 ; -- <0100> b = 4

    0750 : e407 ; -- <0098> bn eq :else_1872
    0751 : 0757 ; -- <0098> "

    0752 : 23a0 ; -- <0099> pa = :tps_open_msg
    0753 : 0715 ; -- <0099> "
    0754 : fba0 ; -- <0099> callx  unique_text_flag  :tps_open_msg
    0755 : 0b3b ; -- <0099> "
    0756 : fc00 ; -- <0099> "

    0757 : 0004 ; -- <0101> a = x

    0758 : 0351 ; -- <0102> a = a<<1
    0759 : 06d0 ; -- <0102> b = 208
    075a : 5e00 ; -- <0102> av_ad_hi = 0
    075b : 6300 ; -- <0102> av_ad_lo = ad0
    075c : 0415 ; -- <0102> b = av_write_data
    075d : 0416 ; -- <0102> b = av_read_data


    075e : 0200 ; -- <0117> a = 0
    075f : 0401 ; -- <0117> b = b

    0760 : e007 ; -- <0103> br eq :else_1888
    0761 : 076e ; -- <0103> "

-- calculate TPS enrichment in us.  apply a total of 10 bits of right-shift to
-- implement division by 1024 (thou unit).  spread them out to prevent overflow.
    0762 : 0001 ; -- <0106> a = b
    0763 : 0350 ; -- <0107> a = a>>1
    0764 : 0750 ; -- <0108> b = a>>1
    0765 : 0006 ; -- <0109> a = ga
    0766 : 0353 ; -- <0110> a = a>>4
    0767 : fba0 ; -- <0111> call  multiply
    0768 : 0170 ; -- <0111> "
    0769 : fc00 ; -- <0111> "
    076a : 0353 ; -- <0112> a = a>>4

-- add enrichment to smap puff.
    076b : 0406 ; -- <0115> b = ga
    076c : c800 ; -- <0116> ga = a+b
    076d : 1b00 ; -- <0116> "


-- memorize total puff.
    076e : 5e00 ; -- <0120> ram $ram_next_puff_len_us = ga -- av_ad_hi = 0
    076f : 6290 ; -- <0120> ram $ram_next_puff_len_us = ga -- av_ad_lo = 144
    0770 : 5406 ; -- <0120> ram $ram_next_puff_len_us = ga -- av_write_data = ga


    0771 : f80c ; -- <0123> pop rtna -- func puff_len_run
    0772 : 180c ; -- <0123> pop ga -- "
    0773 : 100c ; -- <0123> pop x -- "
    0774 : fc00 ; -- <0123> swapra = nop

-- ######## func leave_run -- = 0x0775
    0775 : 303e ; -- <0126> push rtna -- func leave_run

    0776 : fba0 ; -- <0125> callx  check_engine_stop  pa
    0777 : 0c5a ; -- <0125> "
    0778 : fc00 ; -- <0125> "

    0779 : f80c ; -- <0127> pop rtna -- func leave_run
    077a : fc00 ; -- <0127> swapra = nop



-- #########################################################################
-- :main -- = 0x077b
    077b : 03a0 ; -- <0214> a = :boot_msg
    077c : 008b ; -- <0214> "
    077d : fba0 ; -- <0215> call :print_nt
    077e : 014f ; -- <0215> "
    077f : fc00 ; -- <0215> "

-- clear the first 64k of RAM.
    0780 : 5e00 ; -- <0218> av_ad_hi = 0
    0781 : fba0 ; -- <0218> callx  clear_ram_page  0
    0782 : 0b1e ; -- <0218> "
    0783 : fc00 ; -- <0218> "

-- init fuel injection.
    0784 : fba0 ; -- <0221> callx  init_plan_stop
    0785 : 0322 ; -- <0221> "
    0786 : fc00 ; -- <0221> "
    0787 : 0a00 ; -- <0226> i = 0
-- :loop_1927 -- = 0x0788

    0788 : 0002 ; -- <0222> a = i
    0789 : 07a0 ; -- <0223> b = 0x0c08
    078a : 0c08 ; -- <0223> "

    078b : 0351 ; -- <0224> a = a<<1
    078c : 3001 ; -- <0224> push b -- push b
    078d : 0698 ; -- <0224> b = 152
    078e : 5e00 ; -- <0224> av_ad_hi = 0
    078f : 6300 ; -- <0224> av_ad_lo = ad0
    0790 : 540c ; -- <0224> pop av_write_data -- pop av_write_data



    0791 : 0002 ; -- <0226> a = i
    0792 : 0601 ; -- <0226> b = 1
    0793 : c800 ; -- <0226> i = a+b
    0794 : 0b00 ; -- <0226> "


    0795 : 0002 ; -- <0226> a = i
    0796 : 060d ; -- <0226> b = $num_rpm_cells
    0797 : e005 ; -- <0226> br lt :loop_1927
    0798 : 0788 ; -- <0226> "

-- :end_1927 -- = 0x0799
    0799 : 0a00 ; -- <0233> i = 0
-- :loop_1945 -- = 0x079a

    079a : 0002 ; -- <0227> a = i
    079b : 07a0 ; -- <0228> b = :default_tps_reference
    079c : 0458 ; -- <0228> "
    079d : c800 ; -- <0229> fetch b from a+b
    079e : d300 ; -- <0229> "
    079f : 07b0 ; -- <0229> "
    07a0 : 0002 ; -- <0230> a = i

    07a1 : 0351 ; -- <0231> a = a<<1
    07a2 : 3001 ; -- <0231> push b -- push b
    07a3 : 06b4 ; -- <0231> b = 180
    07a4 : 5e00 ; -- <0231> av_ad_hi = 0
    07a5 : 6300 ; -- <0231> av_ad_lo = ad0
    07a6 : 540c ; -- <0231> pop av_write_data -- pop av_write_data



    07a7 : 0002 ; -- <0233> a = i
    07a8 : 0601 ; -- <0233> b = 1
    07a9 : c800 ; -- <0233> i = a+b
    07aa : 0b00 ; -- <0233> "


    07ab : 0002 ; -- <0233> a = i
    07ac : 060d ; -- <0233> b = $num_tps_cells
    07ad : e005 ; -- <0233> br lt :loop_1945
    07ae : 079a ; -- <0233> "

-- :end_1945 -- = 0x07af
    07af : 0a00 ; -- <0240> i = 0
-- :loop_1967 -- = 0x07b0

    07b0 : 0002 ; -- <0234> a = i
    07b1 : 07a0 ; -- <0235> b = :default_tps_enrich_thou
    07b2 : 0465 ; -- <0235> "
    07b3 : c800 ; -- <0236> fetch b from a+b
    07b4 : d300 ; -- <0236> "
    07b5 : 07b0 ; -- <0236> "
    07b6 : 0002 ; -- <0237> a = i

    07b7 : 0351 ; -- <0238> a = a<<1
    07b8 : 3001 ; -- <0238> push b -- push b
    07b9 : 06d0 ; -- <0238> b = 208
    07ba : 5e00 ; -- <0238> av_ad_hi = 0
    07bb : 6300 ; -- <0238> av_ad_lo = ad0
    07bc : 540c ; -- <0238> pop av_write_data -- pop av_write_data



    07bd : 0002 ; -- <0240> a = i
    07be : 0601 ; -- <0240> b = 1
    07bf : c800 ; -- <0240> i = a+b
    07c0 : 0b00 ; -- <0240> "


    07c1 : 0002 ; -- <0240> a = i
    07c2 : 0605 ; -- <0240> b = $num_tps_states
    07c3 : e005 ; -- <0240> br lt :loop_1967
    07c4 : 07b0 ; -- <0240> "

-- :end_1967 -- = 0x07c5

-- power up FTDI USB board, and init any other special board control functions.
    07c5 : 7280 ; -- <0243> board_ctrl = $ftdi_power_mask
    07c6 : fba0 ; -- <0244> callx postpone_comm_restart
    07c7 : 0af5 ; -- <0244> "
    07c8 : fc00 ; -- <0244> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    07c9 : 7a00 ; -- <0251> power_duty = $power_duty_closing

    07ca : 001e ; -- <0255> a = power_duty
    07cb : 06c0 ; -- <0255> b = ( $power_lost_mask | $ign_switch_off_mask )

    07cc : e003 ; -- <0252> br and0z :else_1996
    07cd : 07d3 ; -- <0252> "

    07ce : 7a32 ; -- <0253> power_duty = $power_duty_opening
    07cf : 6fa0 ; -- <0254> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    07d0 : fffb ; -- <0254> "
    07d1 : e00f ; -- <0254> error_halt_code $err_power_lost_at_boot
    07d2 : 07d1 ; -- <0254> "

    07d3 : 5e00 ; -- <0256> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    07d4 : 623c ; -- <0256> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 60
    07d5 : 5760 ; -- <0256> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    07d6 : 5e00 ; -- <0257> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    07d7 : 623e ; -- <0257> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 62
    07d8 : 5602 ; -- <0257> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    07d9 : 3ba0 ; -- <0260> soft_event = $event_controller_reset_mask
    07da : 8000 ; -- <0260> "
    07db : 3a00 ; -- <0261> soft_event = 0
    07dc : 47a0 ; -- <0262> mstimer0 = 1000
    07dd : 03e8 ; -- <0262> "
    07de : 4e14 ; -- <0263> mstimer2 = $plan_tick_ms
    07df : e00f ; -- <0264> jmp :poll_events
    07e0 : 008e ; -- <0264> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x07e1
    07e1 : 008e ; -- <0269> ([label :poll_events])
    07e2 : 0a50 ; -- <0270> ([label :power_lost_handler])
    07e3 : 07f6 ; -- <0271> ([label :ign_capture_handler])
    07e4 : 0876 ; -- <0272> ([label :ign_capture_timeout_handler])
    07e5 : 0a84 ; -- <0273> ([label :puff1_done_handler])
    07e6 : 087b ; -- <0274> ([label :ustimer0_handler])
    07e7 : 09db ; -- <0275> ([label :spi_done_handler])
    07e8 : 087d ; -- <0276> ([label :mstimer0_handler])
    07e9 : 09a7 ; -- <0277> ([label :mstimer1_handler])
    07ea : 08ac ; -- <0278> ([label :mstimer2_handler])
    07eb : 08d8 ; -- <0279> ([label :uart_rx_handler])
    07ec : 08f1 ; -- <0280> ([label :uart_rx_overflow_handler])
    07ed : 08f9 ; -- <0281> ([label :uart_tx_overflow_handler])
    07ee : 0900 ; -- <0282> ([label :key0_handler])
    07ef : 090a ; -- <0283> ([label :key1_handler])
    07f0 : 0a67 ; -- <0284> ([label :ign_switch_off_handler])
    07f1 : 0a7a ; -- <0285> ([label :ign_switch_on_handler])
    07f2 : 0914 ; -- <0286> ([label :softevent3_handler])
    07f3 : 0916 ; -- <0287> ([label :softevent2_handler])
    07f4 : 0918 ; -- <0288> ([label :softevent1_handler])
    07f5 : 091a ; -- <0289> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x07f6
-- discard outlier time.
    07f6 : 181f ; -- <0295> g6 = ign_capture_jf
    07f7 : 5e00 ; -- <0296> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    07f8 : 6282 ; -- <0296> ram b = $ram_ign_fastest_jf -- av_ad_lo = 130
    07f9 : 0415 ; -- <0296> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    07fa : 0416 ; -- <0296> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle

    07fb : 0006 ; -- <0299> a = g6
    07fc : 0401 ; -- <0299> b = b

    07fd : e405 ; -- <0297> bn lt :else_2045
    07fe : 0800 ; -- <0297> "

    07ff : 1a00 ; -- <0298> g6 = 0

    0800 : 5e00 ; -- <0300> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    0801 : 6284 ; -- <0300> ram b = $ram_ign_slowest_jf -- av_ad_lo = 132
    0802 : 0415 ; -- <0300> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    0803 : 0416 ; -- <0300> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle

    0804 : 0006 ; -- <0303> a = g6
    0805 : 0401 ; -- <0303> b = b

    0806 : e406 ; -- <0301> bn gt :else_2054
    0807 : 0809 ; -- <0301> "

    0808 : 1a00 ; -- <0302> g6 = 0


-- increment buffer index and memorize time.
    0809 : 5e00 ; -- <0306> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    080a : 6258 ; -- <0306> ram a = $ram_ign_history_idx -- av_ad_lo = 88
    080b : 0015 ; -- <0306> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    080c : 0016 ; -- <0306> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    080d : 0601 ; -- <0307> b = 1
    080e : c800 ; -- <0308> a = a+b
    080f : 0300 ; -- <0308> "
    0810 : 060f ; -- <0309> b = $ign_history_idx_mask
    0811 : c800 ; -- <0310> a = and
    0812 : 0330 ; -- <0310> "
    0813 : 5e00 ; -- <0311> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    0814 : 6258 ; -- <0311> ram $ram_ign_history_idx = a -- av_ad_lo = 88
    0815 : 5400 ; -- <0311> ram $ram_ign_history_idx = a -- av_write_data = a
    0816 : 0406 ; -- <0312> b = g6

    0817 : 0351 ; -- <0313> a = a<<1
    0818 : 3001 ; -- <0313> push b -- push b
    0819 : 065a ; -- <0313> b = 90
    081a : 5e00 ; -- <0313> av_ad_hi = 0
    081b : 6300 ; -- <0313> av_ad_lo = ad0
    081c : 540c ; -- <0313> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, y = sample, i = index = loop count, g6 = count of invalid samples.
    081d : 1200 ; -- <0318> x = 0
    081e : 1a00 ; -- <0319> g6 = 0
    081f : 0a00 ; -- <0335> i = 0
-- :loop_2079 -- = 0x0820

    0820 : 0002 ; -- <0320> a = i

    0821 : 0351 ; -- <0321> a = a<<1
    0822 : 065a ; -- <0321> b = 90
    0823 : 5e00 ; -- <0321> av_ad_hi = 0
    0824 : 6300 ; -- <0321> av_ad_lo = ad0
    0825 : 0415 ; -- <0321> b = av_write_data
    0826 : 0416 ; -- <0321> b = av_read_data

    0827 : 1401 ; -- <0322> y = b

    0828 : 0005 ; -- <0333> a = y
    0829 : 0600 ; -- <0333> b = 0

    082a : e407 ; -- <0323> bn eq :else_2090
    082b : 0832 ; -- <0323> "

    082c : 0006 ; -- <0324> a = g6
    082d : 0601 ; -- <0325> b = 1
    082e : c800 ; -- <0326> g6 = a+b
    082f : 1b00 ; -- <0326> "

    0830 : e00f ; -- <0328> jmp :end_2090
    0831 : 0839 ; -- <0328> "

    0832 : 0208 ; -- <0329> a = ($ign_history_len / 2)
    0833 : 0405 ; -- <0330> b = y
    0834 : c800 ; -- <0331> a = a+b
    0835 : 0300 ; -- <0331> "
    0836 : 1753 ; -- <0332> y = a>>$ign_history_idx_bits
    0837 : c800 ; -- <0333> x = x+y
    0838 : 1320 ; -- <0333> "



    0839 : 0002 ; -- <0335> a = i
    083a : 0601 ; -- <0335> b = 1
    083b : c800 ; -- <0335> i = a+b
    083c : 0b00 ; -- <0335> "


    083d : 0002 ; -- <0335> a = i
    083e : 0610 ; -- <0335> b = $ign_history_len
    083f : e005 ; -- <0335> br lt :loop_2079
    0840 : 0820 ; -- <0335> "

-- :end_2079 -- = 0x0841
    0841 : 5e00 ; -- <0336> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    0842 : 627a ; -- <0336> ram $ram_ign_avg_jf = x -- av_ad_lo = 122
    0843 : 5404 ; -- <0336> ram $ram_ign_avg_jf = x -- av_write_data = x
    0844 : 5e00 ; -- <0337> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    0845 : 6280 ; -- <0337> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 128
    0846 : 5406 ; -- <0337> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.


    0847 : 0006 ; -- <0353> a = g6
    0848 : 0604 ; -- <0353> b = ( $ign_history_len / 4 )

    0849 : e406 ; -- <0346> bn gt :else_2121
    084a : 0850 ; -- <0346> "

    084b : 5e00 ; -- <0347> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    084c : 627e ; -- <0347> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    084d : 5600 ; -- <0347> ram $ram_rpm_valid = 0 -- av_write_data = 0

    084e : e00f ; -- <0349> jmp :end_2121
    084f : 085a ; -- <0349> "

-- convert jiffies b to new RPM estimate.
    0850 : 2004 ; -- <0351> pa = x
    0851 : fba0 ; -- <0351> callx  jf_to_rpm  x  pa
    0852 : 0c4e ; -- <0351> "
    0853 : fc00 ; -- <0351> "
    0854 : 5e00 ; -- <0352> ram $ram_avg_rpm = pa -- av_ad_hi = 0
    0855 : 627c ; -- <0352> ram $ram_avg_rpm = pa -- av_ad_lo = 124
    0856 : 5408 ; -- <0352> ram $ram_avg_rpm = pa -- av_write_data = pa
    0857 : 5e00 ; -- <0353> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    0858 : 627e ; -- <0353> ram $ram_rpm_valid = 1 -- av_ad_lo = 126
    0859 : 5601 ; -- <0353> ram $ram_rpm_valid = 1 -- av_write_data = 1

    085a : e00f ; -- <0354> end_event
    085b : 008e ; -- <0354> "

-- ######## func clear_ign_history -- = 0x085c
    085c : 3002 ; -- <0367> push i -- func clear_ign_history

-- invalidate the RPM estimate.
    085d : 5e00 ; -- <0358> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    085e : 627e ; -- <0358> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    085f : 5600 ; -- <0358> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    0860 : 5e00 ; -- <0361> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    0861 : 6280 ; -- <0361> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 128
    0862 : 5610 ; -- <0361> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    0863 : 0a00 ; -- <0366> i = 0
-- :loop_2147 -- = 0x0864

    0864 : 0002 ; -- <0362> a = i
    0865 : 0600 ; -- <0363> b = 0

    0866 : 0351 ; -- <0364> a = a<<1
    0867 : 3001 ; -- <0364> push b -- push b
    0868 : 065a ; -- <0364> b = 90
    0869 : 5e00 ; -- <0364> av_ad_hi = 0
    086a : 6300 ; -- <0364> av_ad_lo = ad0
    086b : 540c ; -- <0364> pop av_write_data -- pop av_write_data



    086c : 0002 ; -- <0366> a = i
    086d : 0601 ; -- <0366> b = 1
    086e : c800 ; -- <0366> i = a+b
    086f : 0b00 ; -- <0366> "


    0870 : 0002 ; -- <0366> a = i
    0871 : 0610 ; -- <0366> b = $ign_history_len
    0872 : e005 ; -- <0366> br lt :loop_2147
    0873 : 0864 ; -- <0366> "

-- :end_2147 -- = 0x0874

    0874 : 080c ; -- <0368> pop i -- func clear_ign_history
    0875 : fc00 ; -- <0368> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x0876
-- it's been too long since the last ignition pulse detect.
    0876 : fba0 ; -- <0371> callx clear_ign_history
    0877 : 085c ; -- <0371> "
    0878 : fc00 ; -- <0371> "
    0879 : e00f ; -- <0372> end_event
    087a : 008e ; -- <0372> "

-- ######## event ustimer0_handler -- = 0x087b
    087b : e00f ; -- <0375> end_event
    087c : 008e ; -- <0375> "

-- ######## event mstimer0_handler -- = 0x087d
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    087d : 47a0 ; -- <0381> mstimer0 = 1000
    087e : 03e8 ; -- <0381> "

-- realtime counters in RAM.
    087f : 5e00 ; -- <0384> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    0880 : 6242 ; -- <0384> ram a = $ram_seconds_cnt -- av_ad_lo = 66
    0881 : 0015 ; -- <0384> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    0882 : 0016 ; -- <0384> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    0883 : 0601 ; -- <0385> b = 1
    0884 : c800 ; -- <0386> a = a+b
    0885 : 0300 ; -- <0386> "

    0886 : 0000 ; -- <0395> a = a
    0887 : 063c ; -- <0395> b = 60

    0888 : e407 ; -- <0387> bn eq :else_2184
    0889 : 089b ; -- <0387> "

    088a : 5e00 ; -- <0388> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    088b : 6242 ; -- <0388> ram $ram_seconds_cnt = 0 -- av_ad_lo = 66
    088c : 5600 ; -- <0388> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    088d : 5e00 ; -- <0389> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    088e : 6240 ; -- <0389> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    088f : 0015 ; -- <0389> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0890 : 0016 ; -- <0389> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0891 : 0601 ; -- <0390> b = 1
    0892 : 5e00 ; -- <0391> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    0893 : 6240 ; -- <0391> ram $ram_minutes_cnt = a+b -- av_ad_lo = 64
    0894 : c800 ; -- <0391> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    0895 : 5700 ; -- <0391> "
    0896 : fba0 ; -- <0392> callx minute_events
    0897 : 0a93 ; -- <0392> "
    0898 : fc00 ; -- <0392> "

    0899 : e00f ; -- <0394> jmp :end_2184
    089a : 089e ; -- <0394> "

    089b : 5e00 ; -- <0395> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    089c : 6242 ; -- <0395> ram $ram_seconds_cnt = a -- av_ad_lo = 66
    089d : 5400 ; -- <0395> ram $ram_seconds_cnt = a -- av_write_data = a


-- all 1-second functions here.
    089e : fba0 ; -- <0398> callx check_power_relay
    089f : 0a9b ; -- <0398> "
    08a0 : fc00 ; -- <0398> "
    08a1 : fba0 ; -- <0399> callx check_communication
    08a2 : 0ac8 ; -- <0399> "
    08a3 : fc00 ; -- <0399> "
    08a4 : fba0 ; -- <0400> callx start_daq_pass
    08a5 : 0929 ; -- <0400> "
    08a6 : fc00 ; -- <0400> "
    08a7 : e00f ; -- <0401> end_event
    08a8 : 008e ; -- <0401> "

-- :plan_transition_msg -- = 0x08a9
-- "PLAN\x0"
    08a9 : 4c50 ; -- <0404> LP
    08aa : 4e41 ; -- <0404> NA
    08ab : 0000 ; -- <0404>   

-- ######## event mstimer2_handler -- = 0x08ac
-- engine management plan tick timer.

-- restart timer.
    08ac : 4e14 ; -- <0410> mstimer2 = $plan_tick_ms

-- start another TPS reading prior to every plan tick.
-- this will also invoke a o2 reading.  that's done last of all prior to plan_tick,
-- so there's minimal latency between that and the plan_tick utilizing it.
    08ad : 5e00 ; -- <0415> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    08ae : 6236 ; -- <0415> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    08af : 0015 ; -- <0415> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    08b0 : 0016 ; -- <0415> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    08b1 : 0000 ; -- <0418> a = a
    08b2 : 0600 ; -- <0418> b = 0

    08b3 : e407 ; -- <0416> bn eq :else_2227
    08b4 : 08b9 ; -- <0416> "

    08b5 : 2206 ; -- <0417> pa = 6
    08b6 : fba0 ; -- <0417> callx  begin_adc_conversion  $tps_adc_channel
    08b7 : 09cd ; -- <0417> "
    08b8 : fc00 ; -- <0417> "

    08b9 : e00f ; -- <0419> end_event
    08ba : 008e ; -- <0419> "

-- ######## func plan_tick -- = 0x08bb
    08bb : 3004 ; -- <0436> push x -- func plan_tick
    08bc : 303e ; -- <0436> push rtna -- "

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    08bd : 5e00 ; -- <0425> ram rtna = $ram_transition_func -- av_ad_hi = 0
    08be : 628c ; -- <0425> ram rtna = $ram_transition_func -- av_ad_lo = 140
    08bf : f815 ; -- <0425> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    08c0 : f816 ; -- <0425> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    08c1 : 103e ; -- <0426> x = rtna
    08c2 : fc00 ; -- <0427> swapra = nop
    08c3 : 5e00 ; -- <0429> ram b = $ram_transition_func -- av_ad_hi = 0
    08c4 : 628c ; -- <0429> ram b = $ram_transition_func -- av_ad_lo = 140
    08c5 : 0415 ; -- <0429> ram b = $ram_transition_func -- b = av_write_data -- start read cycle
    08c6 : 0416 ; -- <0429> ram b = $ram_transition_func -- b = av_read_data -- finish read cycle

    08c7 : 0004 ; -- <0432> a = x
    08c8 : 0401 ; -- <0432> b = b

    08c9 : e007 ; -- <0430> br eq :else_2249
    08ca : 08d0 ; -- <0430> "

    08cb : 23a0 ; -- <0431> pa = :plan_transition_msg
    08cc : 08a9 ; -- <0431> "
    08cd : fba0 ; -- <0431> callx  set_text_flag  :plan_transition_msg
    08ce : 0b26 ; -- <0431> "
    08cf : fc00 ; -- <0431> "

-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    08d0 : 5e00 ; -- <0435> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    08d1 : 628a ; -- <0435> ram rtna = $ram_puff_len_func -- av_ad_lo = 138
    08d2 : f815 ; -- <0435> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    08d3 : f816 ; -- <0435> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    08d4 : fc00 ; -- <0436> swapra = nop

    08d5 : f80c ; -- <0439> pop rtna -- func plan_tick
    08d6 : 100c ; -- <0439> pop x -- "
    08d7 : fc00 ; -- <0439> swapra = nop

-- ######## event uart_rx_handler -- = 0x08d8
-- :again -- = 0x08d8
    08d8 : fba0 ; -- <0442> pollchar
    08d9 : 00aa ; -- <0442> "
    08da : fc00 ; -- <0442> "
    08db : 1000 ; -- <0443> x = a

    08dc : 0004 ; -- <0446> a = x
    08dd : 0760 ; -- <0446> b = -1

    08de : e407 ; -- <0444> bn eq :else_2270
    08df : 08e2 ; -- <0444> "

    08e0 : e00f ; -- <0445> event_return
    08e1 : 008e ; -- <0445> "


    08e2 : 0004 ; -- <0449> a = x
    08e3 : 060a ; -- <0449> b = 10

    08e4 : e407 ; -- <0447> bn eq :else_2276
    08e5 : 08e9 ; -- <0447> "

    08e6 : fba0 ; -- <0448> callx  postpone_comm_restart
    08e7 : 0af5 ; -- <0448> "
    08e8 : fc00 ; -- <0448> "

    08e9 : 2004 ; -- <0450> pa = x
    08ea : fba0 ; -- <0450> callx  parse_key  x
    08eb : 026e ; -- <0450> "
    08ec : fc00 ; -- <0450> "
    08ed : e00f ; -- <0451> jmp :again
    08ee : 08d8 ; -- <0451> "
    08ef : e00f ; -- <0452> end_event
    08f0 : 008e ; -- <0452> "

-- ######## event uart_rx_overflow_handler -- = 0x08f1
    08f1 : 6fa0 ; -- <0455> error_halt_code $err_rx_overflow -- leds = 0xfffe
    08f2 : fffe ; -- <0455> "
    08f3 : e00f ; -- <0455> error_halt_code $err_rx_overflow
    08f4 : 08f3 ; -- <0455> "
    08f5 : e00f ; -- <0456> end_event
    08f6 : 008e ; -- <0456> "

-- :tx_overflow_msg -- = 0x08f7
-- "TXO\x0"
    08f7 : 5854 ; -- <0459> XT
    08f8 : 004f ; -- <0459>  O

-- ######## event uart_tx_overflow_handler -- = 0x08f9
-- error_halt_code $err_tx_overflow
    08f9 : 23a0 ; -- <0463> pa = :tx_overflow_msg
    08fa : 08f7 ; -- <0463> "
    08fb : fba0 ; -- <0463> callx  set_text_flag  :tx_overflow_msg
    08fc : 0b26 ; -- <0463> "
    08fd : fc00 ; -- <0463> "
    08fe : e00f ; -- <0464> end_event
    08ff : 008e ; -- <0464> "

-- ######## event key0_handler -- = 0x0900
    0900 : 026b ; -- <0467> a = 107 -- putasc "k"
    0901 : fba0 ; -- <0467> putasc "k"
    0902 : 009b ; -- <0467> "
    0903 : fc00 ; -- <0467> "
    0904 : 0230 ; -- <0468> a = 48 -- putasc "0"
    0905 : fba0 ; -- <0468> putasc "0"
    0906 : 009b ; -- <0468> "
    0907 : fc00 ; -- <0468> "
    0908 : e00f ; -- <0469> end_event
    0909 : 008e ; -- <0469> "

-- ######## event key1_handler -- = 0x090a
    090a : 026b ; -- <0472> a = 107 -- putasc "k"
    090b : fba0 ; -- <0472> putasc "k"
    090c : 009b ; -- <0472> "
    090d : fc00 ; -- <0472> "
    090e : 0231 ; -- <0473> a = 49 -- putasc "1"
    090f : fba0 ; -- <0473> putasc "1"
    0910 : 009b ; -- <0473> "
    0911 : fc00 ; -- <0473> "
    0912 : e00f ; -- <0474> end_event
    0913 : 008e ; -- <0474> "

-- ######## event softevent3_handler -- = 0x0914
    0914 : e00f ; -- <0477> end_event
    0915 : 008e ; -- <0477> "

-- ######## event softevent2_handler -- = 0x0916
    0916 : e00f ; -- <0480> end_event
    0917 : 008e ; -- <0480> "

-- ######## event softevent1_handler -- = 0x0918
    0918 : e00f ; -- <0483> end_event
    0919 : 008e ; -- <0483> "

-- ######## event softevent0_handler -- = 0x091a
    091a : e00f ; -- <0486> end_event
    091b : 008e ; -- <0486> "

-- :rpm_msg -- = 0x091c
-- ": rpm=\x0"
    091c : 203a ; -- <0489>  :
    091d : 7072 ; -- <0489> pr
    091e : 3d6d ; -- <0489> =m
    091f : 0000 ; -- <0489>   

-- :puff_len_msg -- = 0x0920
-- " pfl=\x0"
    0920 : 7020 ; -- <0492> p 
    0921 : 6c66 ; -- <0492> lf
    0922 : 003d ; -- <0492>  =

-- :o2_msg -- = 0x0923
-- " o2=\x0"
    0923 : 6f20 ; -- <0495> o 
    0924 : 3d32 ; -- <0495> =2
    0925 : 0000 ; -- <0495>   

-- :tps_msg -- = 0x0926
-- " tp=\x0"
    0926 : 7420 ; -- <0498> t 
    0927 : 3d70 ; -- <0498> =p
    0928 : 0000 ; -- <0498>   

-- ######## func start_daq_pass -- = 0x0929
    0929 : 3004 ; -- <0555> push x -- func start_daq_pass
    092a : 303e ; -- <0555> push rtna -- "

-- daq pass counter in RAM.
    092b : 5e00 ; -- <0502> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    092c : 6214 ; -- <0502> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    092d : 0015 ; -- <0502> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    092e : 0016 ; -- <0502> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    092f : 0601 ; -- <0503> b = 1
    0930 : c800 ; -- <0504> a = a+b
    0931 : 0300 ; -- <0504> "
    0932 : 6c00 ; -- <0505> leds = a
    0933 : 5e00 ; -- <0506> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    0934 : 6214 ; -- <0506> ram $ram_daq_pass_cnt = a -- av_ad_lo = 20
    0935 : 5400 ; -- <0506> ram $ram_daq_pass_cnt = a -- av_write_data = a
    0936 : fba0 ; -- <0507> call :put4x
    0937 : 00c3 ; -- <0507> "
    0938 : fc00 ; -- <0507> "

    0939 : 03a0 ; -- <0509> a = :rpm_msg
    093a : 091c ; -- <0509> "
    093b : fba0 ; -- <0510> call :print_nt
    093c : 014f ; -- <0510> "
    093d : fc00 ; -- <0510> "
    093e : 0200 ; -- <0511> a = 0
    093f : 5e00 ; -- <0512> ram x = $ram_rpm_valid -- av_ad_hi = 0
    0940 : 627e ; -- <0512> ram x = $ram_rpm_valid -- av_ad_lo = 126
    0941 : 1015 ; -- <0512> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    0942 : 1016 ; -- <0512> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle

    0943 : 0004 ; -- <0515> a = x
    0944 : 0600 ; -- <0515> b = 0

    0945 : e007 ; -- <0513> br eq :else_2373
    0946 : 094b ; -- <0513> "

    0947 : 5e00 ; -- <0514> ram a = $ram_avg_rpm -- av_ad_hi = 0
    0948 : 627c ; -- <0514> ram a = $ram_avg_rpm -- av_ad_lo = 124
    0949 : 0015 ; -- <0514> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    094a : 0016 ; -- <0514> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle

    094b : fba0 ; -- <0516> call :put4x
    094c : 00c3 ; -- <0516> "
    094d : fc00 ; -- <0516> "

    094e : 03a0 ; -- <0518> a = :puff_len_msg
    094f : 0920 ; -- <0518> "
    0950 : fba0 ; -- <0519> call :print_nt
    0951 : 014f ; -- <0519> "
    0952 : fc00 ; -- <0519> "
    0953 : 0021 ; -- <0520> a = puff_len_us
    0954 : fba0 ; -- <0521> call :put4x
    0955 : 00c3 ; -- <0521> "
    0956 : fc00 ; -- <0521> "
    0957 : 022c ; -- <0522> a = 44 -- putasc ","
    0958 : fba0 ; -- <0522> putasc ","
    0959 : 009b ; -- <0522> "
    095a : fc00 ; -- <0522> "
    095b : 5e00 ; -- <0523> ram a = $ram_puff_count -- av_ad_hi = 0
    095c : 6292 ; -- <0523> ram a = $ram_puff_count -- av_ad_lo = 146
    095d : 0015 ; -- <0523> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    095e : 0016 ; -- <0523> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    095f : fba0 ; -- <0524> call :put4x
    0960 : 00c3 ; -- <0524> "
    0961 : fc00 ; -- <0524> "

    0962 : 03a0 ; -- <0526> a = :o2_msg
    0963 : 0923 ; -- <0526> "
    0964 : fba0 ; -- <0527> call :print_nt
    0965 : 014f ; -- <0527> "
    0966 : fc00 ; -- <0527> "
    0967 : 0205 ; -- <0528> a = $o2_adc_channel

    0968 : 0351 ; -- <0529> a = a<<1
    0969 : 0626 ; -- <0529> b = 38
    096a : 5e00 ; -- <0529> av_ad_hi = 0
    096b : 6300 ; -- <0529> av_ad_lo = ad0
    096c : 0415 ; -- <0529> b = av_write_data
    096d : 0416 ; -- <0529> b = av_read_data

    096e : 0001 ; -- <0530> a = b
    096f : fba0 ; -- <0531> call :put4x
    0970 : 00c3 ; -- <0531> "
    0971 : fc00 ; -- <0531> "

    0972 : 03a0 ; -- <0533> a = :tps_msg
    0973 : 0926 ; -- <0533> "
    0974 : fba0 ; -- <0534> call :print_nt
    0975 : 014f ; -- <0534> "
    0976 : fc00 ; -- <0534> "
    0977 : 0206 ; -- <0535> a = $tps_adc_channel

    0978 : 0351 ; -- <0536> a = a<<1
    0979 : 0626 ; -- <0536> b = 38
    097a : 5e00 ; -- <0536> av_ad_hi = 0
    097b : 6300 ; -- <0536> av_ad_lo = ad0
    097c : 0415 ; -- <0536> b = av_write_data
    097d : 0416 ; -- <0536> b = av_read_data

    097e : 0001 ; -- <0537> a = b
    097f : fba0 ; -- <0538> call :put4x
    0980 : 00c3 ; -- <0538> "
    0981 : fc00 ; -- <0538> "
    0982 : 022c ; -- <0539> a = 44 -- putasc ","
    0983 : fba0 ; -- <0539> putasc ","
    0984 : 009b ; -- <0539> "
    0985 : fc00 ; -- <0539> "
    0986 : 5e00 ; -- <0540> ram a = $ram_tps_avg -- av_ad_hi = 0
    0987 : 62da ; -- <0540> ram a = $ram_tps_avg -- av_ad_lo = 218
    0988 : 0015 ; -- <0540> ram a = $ram_tps_avg -- a = av_write_data -- start read cycle
    0989 : 0016 ; -- <0540> ram a = $ram_tps_avg -- a = av_read_data -- finish read cycle
    098a : fba0 ; -- <0541> call :put4x
    098b : 00c3 ; -- <0541> "
    098c : fc00 ; -- <0541> "
    098d : 022c ; -- <0542> a = 44 -- putasc ","
    098e : fba0 ; -- <0542> putasc ","
    098f : 009b ; -- <0542> "
    0990 : fc00 ; -- <0542> "
    0991 : 5e00 ; -- <0543> ram a = $ram_tps_state -- av_ad_hi = 0
    0992 : 62ce ; -- <0543> ram a = $ram_tps_state -- av_ad_lo = 206
    0993 : 0015 ; -- <0543> ram a = $ram_tps_state -- a = av_write_data -- start read cycle
    0994 : 0016 ; -- <0543> ram a = $ram_tps_state -- a = av_read_data -- finish read cycle
    0995 : 0630 ; -- <0544> b = 48 -- asc b = "0"
    0996 : c800 ; -- <0545> a = a+b -- putchar a+b
    0997 : 0300 ; -- <0545> "
    0998 : fba0 ; -- <0545> putchar a+b
    0999 : 009b ; -- <0545> "
    099a : fc00 ; -- <0545> "

-- start to acquire & report all anmux channels.
    099b : 0207 ; -- <0548> a = ($anmux_num_channels - 1)
    099c : fba0 ; -- <0549> call :anmux_set_chn
    099d : 00b2 ; -- <0549> "
    099e : fc00 ; -- <0549> "
    099f : 4a05 ; -- <0550> mstimer1 = $anmux_settle_ms

-- observe MCU utilization.  this RAM variable can be seen by the debugger.
    09a0 : 5e00 ; -- <0553> ram $ram_mcu_usage_cnt = usage_count -- av_ad_hi = 0
    09a1 : 6244 ; -- <0553> ram $ram_mcu_usage_cnt = usage_count -- av_ad_lo = 68
    09a2 : 540f ; -- <0553> ram $ram_mcu_usage_cnt = usage_count -- av_write_data = usage_count
    09a3 : 3e00 ; -- <0554> usage_count = 0

    09a4 : f80c ; -- <0556> pop rtna -- func start_daq_pass
    09a5 : 100c ; -- <0556> pop x -- "
    09a6 : fc00 ; -- <0556> swapra = nop

-- ######## event mstimer1_handler -- = 0x09a7
-- anmux signal has settled.

    09a7 : 5e00 ; -- <0560> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    09a8 : 6236 ; -- <0560> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    09a9 : 0015 ; -- <0560> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    09aa : 0016 ; -- <0560> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    09ab : 0000 ; -- <0565> a = a
    09ac : 0600 ; -- <0565> b = 0

    09ad : e007 ; -- <0561> br eq :else_2477
    09ae : 09b2 ; -- <0561> "

-- ADC is busy right now.  wait a while & try again.
    09af : 4a02 ; -- <0563> mstimer1 = $anmux_retry_ms
    09b0 : e00f ; -- <0564> event_return
    09b1 : 008e ; -- <0564> "


-- start a reading from the current anmux channel.
    09b2 : 0220 ; -- <0568> a = 32 -- putasc " "
    09b3 : fba0 ; -- <0568> putasc " "
    09b4 : 009b ; -- <0568> "
    09b5 : fc00 ; -- <0568> "
    09b6 : 0273 ; -- <0569> a = 115 -- putasc "s"
    09b7 : fba0 ; -- <0569> putasc "s"
    09b8 : 009b ; -- <0569> "
    09b9 : fc00 ; -- <0569> "
    09ba : fba0 ; -- <0570> call :anmux_get_chn
    09bb : 00b6 ; -- <0570> "
    09bc : fc00 ; -- <0570> "
    09bd : 0630 ; -- <0571> b = 48 -- asc b = "0"
    09be : c800 ; -- <0572> a = a+b -- putchar a+b
    09bf : 0300 ; -- <0572> "
    09c0 : fba0 ; -- <0572> putchar a+b
    09c1 : 009b ; -- <0572> "
    09c2 : fc00 ; -- <0572> "
    09c3 : 023d ; -- <0573> a = 61 -- putasc "="
    09c4 : fba0 ; -- <0573> putasc "="
    09c5 : 009b ; -- <0573> "
    09c6 : fc00 ; -- <0573> "
    09c7 : 2207 ; -- <0574> pa = 7
    09c8 : fba0 ; -- <0574> callx  begin_adc_conversion  $anmux_adc_channel
    09c9 : 09cd ; -- <0574> "
    09ca : fc00 ; -- <0574> "
    09cb : e00f ; -- <0575> end_event
    09cc : 008e ; -- <0575> "

-- ######## func begin_adc_conversion -- = 0x09cd

-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.

    09cd : 5e00 ; -- <0581> ram $ram_adc_chn_pending = next_channel -- av_ad_hi = 0
    09ce : 6236 ; -- <0581> ram $ram_adc_chn_pending = next_channel -- av_ad_lo = 54
    09cf : 5408 ; -- <0581> ram $ram_adc_chn_pending = next_channel -- av_write_data = next_channel
    09d0 : 0008 ; -- <0582> a = next_channel
    09d1 : 0352 ; -- <0583> a = a<<4
    09d2 : 0352 ; -- <0584> a = a<<4
    09d3 : 0351 ; -- <0585> a = a<<1
    09d4 : 0351 ; -- <0586> a = a<<1
    09d5 : 0351 ; -- <0587> a = a<<1
    09d6 : 5000 ; -- <0588> spi_data = a
    09d7 : 5e00 ; -- <0589> ram $ram_adc_junk = 1 -- av_ad_hi = 0
    09d8 : 6238 ; -- <0589> ram $ram_adc_junk = 1 -- av_ad_lo = 56
    09d9 : 5601 ; -- <0589> ram $ram_adc_junk = 1 -- av_write_data = 1

    09da : fc00 ; -- <0591> swapra = nop

-- ######## event spi_done_handler -- = 0x09db
-- discard the results of the first SPI exchange with the ADC.  that's only for writing the channel num out to the ADC.
    09db : 5e00 ; -- <0594> ram a = $ram_adc_junk -- av_ad_hi = 0
    09dc : 6238 ; -- <0594> ram a = $ram_adc_junk -- av_ad_lo = 56
    09dd : 0015 ; -- <0594> ram a = $ram_adc_junk -- a = av_write_data -- start read cycle
    09de : 0016 ; -- <0594> ram a = $ram_adc_junk -- a = av_read_data -- finish read cycle

    09df : 0000 ; -- <0606> a = a
    09e0 : 0600 ; -- <0606> b = 0

    09e1 : e007 ; -- <0595> br eq :else_2529
    09e2 : 09f2 ; -- <0595> "

-- start another SPI exchange to retrieve the actual reading.
    09e3 : 5e00 ; -- <0597> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    09e4 : 6236 ; -- <0597> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    09e5 : 0015 ; -- <0597> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    09e6 : 0016 ; -- <0597> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle
    09e7 : 0352 ; -- <0598> a = a<<4
    09e8 : 0352 ; -- <0599> a = a<<4
    09e9 : 0351 ; -- <0600> a = a<<1
    09ea : 0351 ; -- <0601> a = a<<1
    09eb : 0351 ; -- <0602> a = a<<1
    09ec : 5000 ; -- <0603> spi_data = a
    09ed : 5e00 ; -- <0604> ram $ram_adc_junk = 0 -- av_ad_hi = 0
    09ee : 6238 ; -- <0604> ram $ram_adc_junk = 0 -- av_ad_lo = 56
    09ef : 5600 ; -- <0604> ram $ram_adc_junk = 0 -- av_write_data = 0
    09f0 : e00f ; -- <0605> event_return
    09f1 : 008e ; -- <0605> "


-- memorize an actual ADC reading.
    09f2 : 5e00 ; -- <0609> ram i = $ram_adc_chn_pending -- av_ad_hi = 0
    09f3 : 6236 ; -- <0609> ram i = $ram_adc_chn_pending -- av_ad_lo = 54
    09f4 : 0815 ; -- <0609> ram i = $ram_adc_chn_pending -- i = av_write_data -- start read cycle
    09f5 : 0816 ; -- <0609> ram i = $ram_adc_chn_pending -- i = av_read_data -- finish read cycle
    09f6 : 5e00 ; -- <0610> ram $ram_adc_chn_pending = 0 -- av_ad_hi = 0
    09f7 : 6236 ; -- <0610> ram $ram_adc_chn_pending = 0 -- av_ad_lo = 54
    09f8 : 5600 ; -- <0610> ram $ram_adc_chn_pending = 0 -- av_write_data = 0
    09f9 : 0002 ; -- <0611> a = i
    09fa : 0414 ; -- <0612> b = spi_data

    09fb : 0351 ; -- <0613> a = a<<1
    09fc : 3001 ; -- <0613> push b -- push b
    09fd : 0626 ; -- <0613> b = 38
    09fe : 5e00 ; -- <0613> av_ad_hi = 0
    09ff : 6300 ; -- <0613> av_ad_lo = ad0
    0a00 : 540c ; -- <0613> pop av_write_data -- pop av_write_data


-- react to ADC reading.

    0a01 : 0002 ; -- <0620> a = i
    0a02 : 0606 ; -- <0620> b = 6

    0a03 : e407 ; -- <0616> bn eq :else_2563
    0a04 : 0a0e ; -- <0616> "

    0a05 : 2205 ; -- <0617> pa = 5
    0a06 : fba0 ; -- <0617> callx  begin_adc_conversion  $o2_adc_channel
    0a07 : 09cd ; -- <0617> "
    0a08 : fc00 ; -- <0617> "
    0a09 : fba0 ; -- <0618> callx  interpret_tps
    0a0a : 0bab ; -- <0618> "
    0a0b : fc00 ; -- <0618> "
    0a0c : e00f ; -- <0619> event_return
    0a0d : 008e ; -- <0619> "


    0a0e : 0002 ; -- <0624> a = i
    0a0f : 0605 ; -- <0624> b = 5

    0a10 : e407 ; -- <0621> bn eq :else_2576
    0a11 : 0a17 ; -- <0621> "

    0a12 : fba0 ; -- <0622> callx  plan_tick
    0a13 : 08bb ; -- <0622> "
    0a14 : fc00 ; -- <0622> "
    0a15 : e00f ; -- <0623> event_return
    0a16 : 008e ; -- <0623> "


    0a17 : 0002 ; -- <0651> a = i
    0a18 : 0607 ; -- <0651> b = 7

    0a19 : e407 ; -- <0625> bn eq :else_2585
    0a1a : 0a4c ; -- <0625> "

-- report anmux reading.
    0a1b : 0014 ; -- <0627> a = spi_data
    0a1c : fba0 ; -- <0628> call :put4x
    0a1d : 00c3 ; -- <0628> "
    0a1e : fc00 ; -- <0628> "

-- memorize anmux reading.
    0a1f : fba0 ; -- <0631> call :anmux_get_chn
    0a20 : 00b6 ; -- <0631> "
    0a21 : fc00 ; -- <0631> "
    0a22 : 0414 ; -- <0632> b = spi_data

    0a23 : 0351 ; -- <0633> a = a<<1
    0a24 : 3001 ; -- <0633> push b -- push b
    0a25 : 0616 ; -- <0633> b = 22
    0a26 : 5e00 ; -- <0633> av_ad_hi = 0
    0a27 : 6300 ; -- <0633> av_ad_lo = ad0
    0a28 : 540c ; -- <0633> pop av_write_data -- pop av_write_data


-- decrement anmux channel & start waiting again.
    0a29 : fba0 ; -- <0636> call :anmux_get_chn
    0a2a : 00b6 ; -- <0636> "
    0a2b : fc00 ; -- <0636> "

    0a2c : 0000 ; -- <0643> a = a
    0a2d : 0600 ; -- <0643> b = 0

    0a2e : e007 ; -- <0637> br eq :else_2606
    0a2f : 0a39 ; -- <0637> "

    0a30 : 0760 ; -- <0638> b = -1
    0a31 : c800 ; -- <0639> a = a+b
    0a32 : 0300 ; -- <0639> "
    0a33 : fba0 ; -- <0640> call :anmux_set_chn
    0a34 : 00b2 ; -- <0640> "
    0a35 : fc00 ; -- <0640> "
    0a36 : 4a05 ; -- <0641> mstimer1 = $anmux_settle_ms
    0a37 : e00f ; -- <0642> event_return
    0a38 : 008e ; -- <0642> "


-- end of temperature daq pass.
    0a39 : fba0 ; -- <0646> callx  report_plan
    0a3a : 0b90 ; -- <0646> "
    0a3b : fc00 ; -- <0646> "
    0a3c : fba0 ; -- <0647> callx  report_text_flags
    0a3d : 0b5d ; -- <0647> "
    0a3e : fc00 ; -- <0647> "
    0a3f : 020d ; -- <0648> a = 13 -- puteol
    0a40 : fba0 ; -- <0648> puteol
    0a41 : 009b ; -- <0648> "
    0a42 : fc00 ; -- <0648> "
    0a43 : 020a ; -- <0648> a = 10 -- puteol
    0a44 : fba0 ; -- <0648> puteol
    0a45 : 009b ; -- <0648> "
    0a46 : fc00 ; -- <0648> "
    0a47 : 5e00 ; -- <0649> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    0a48 : 623a ; -- <0649> ram $ram_dial_setting = spi_data -- av_ad_lo = 58
    0a49 : 5414 ; -- <0649> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    0a4a : e00f ; -- <0650> event_return
    0a4b : 008e ; -- <0650> "

    0a4c : e00f ; -- <0652> end_event
    0a4d : 008e ; -- <0652> "

-- :power_lost_msg -- = 0x0a4e
-- "PWL\x0"
    0a4e : 5750 ; -- <0655> WP
    0a4f : 004c ; -- <0655>  L

-- ######## event power_lost_handler -- = 0x0a50
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    0a50 : 7a00 ; -- <0664> power_duty = $power_duty_closing
    0a51 : 5e00 ; -- <0665> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0a52 : 6214 ; -- <0665> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0a53 : 0015 ; -- <0665> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0a54 : 0016 ; -- <0665> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0a55 : 0602 ; -- <0666> b = $relay_hold_passes
    0a56 : 5e00 ; -- <0667> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    0a57 : 623e ; -- <0667> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 62
    0a58 : c800 ; -- <0667> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    0a59 : 5700 ; -- <0667> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    0a5a : fba0 ; -- <0672> callx  save_persistent_data
    0a5b : 0ac7 ; -- <0672> "
    0a5c : fc00 ; -- <0672> "

    0a5d : 23a0 ; -- <0674> pa = :power_lost_msg
    0a5e : 0a4e ; -- <0674> "
    0a5f : fba0 ; -- <0674> callx  set_text_flag  :power_lost_msg
    0a60 : 0b26 ; -- <0674> "
    0a61 : fc00 ; -- <0674> "
    0a62 : e00f ; -- <0675> end_event
    0a63 : 008e ; -- <0675> "

-- :ign_off_msg -- = 0x0a64
-- "IGOF\x0"
    0a64 : 4749 ; -- <0678> GI
    0a65 : 464f ; -- <0678> FO
    0a66 : 0000 ; -- <0678>   

-- ######## event ign_switch_off_handler -- = 0x0a67
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    0a67 : 5e00 ; -- <0682> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0a68 : 6240 ; -- <0682> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0a69 : 0015 ; -- <0682> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0a6a : 0016 ; -- <0682> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0a6b : 060a ; -- <0683> b = $power_extend_minutes
    0a6c : 5e00 ; -- <0684> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    0a6d : 623c ; -- <0684> ram $ram_power_down_at_min = a+b -- av_ad_lo = 60
    0a6e : c800 ; -- <0684> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    0a6f : 5700 ; -- <0684> "
    0a70 : 23a0 ; -- <0685> pa = :ign_off_msg
    0a71 : 0a64 ; -- <0685> "
    0a72 : fba0 ; -- <0685> callx  set_text_flag   :ign_off_msg
    0a73 : 0b26 ; -- <0685> "
    0a74 : fc00 ; -- <0685> "
    0a75 : e00f ; -- <0686> end_event
    0a76 : 008e ; -- <0686> "

-- :ign_on_msg -- = 0x0a77
-- "IGON\x0"
    0a77 : 4749 ; -- <0689> GI
    0a78 : 4e4f ; -- <0689> NO
    0a79 : 0000 ; -- <0689>   

-- ######## event ign_switch_on_handler -- = 0x0a7a
    0a7a : 5e00 ; -- <0692> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0a7b : 623c ; -- <0692> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 60
    0a7c : 5760 ; -- <0692> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0a7d : 23a0 ; -- <0693> pa = :ign_on_msg
    0a7e : 0a77 ; -- <0693> "
    0a7f : fba0 ; -- <0693> callx  set_text_flag   :ign_on_msg
    0a80 : 0b26 ; -- <0693> "
    0a81 : fc00 ; -- <0693> "
    0a82 : e00f ; -- <0694> end_event
    0a83 : 008e ; -- <0694> "

-- ######## event puff1_done_handler -- = 0x0a84
-- puff just finished.  set length of next puff.
    0a84 : 5e00 ; -- <0698> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    0a85 : 6290 ; -- <0698> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 144
    0a86 : 8415 ; -- <0698> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    0a87 : 8416 ; -- <0698> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    0a88 : 5e00 ; -- <0701> ram a = $ram_puff_count -- av_ad_hi = 0
    0a89 : 6292 ; -- <0701> ram a = $ram_puff_count -- av_ad_lo = 146
    0a8a : 0015 ; -- <0701> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0a8b : 0016 ; -- <0701> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0a8c : 0601 ; -- <0702> b = 1
    0a8d : 5e00 ; -- <0703> ram $ram_puff_count = a+b -- av_ad_hi = 0
    0a8e : 6292 ; -- <0703> ram $ram_puff_count = a+b -- av_ad_lo = 146
    0a8f : c800 ; -- <0703> ram $ram_puff_count = a+b -- av_write_data = a+b
    0a90 : 5700 ; -- <0703> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    0a91 : e00f ; -- <0714> end_event
    0a92 : 008e ; -- <0714> "

-- ######## func minute_events -- = 0x0a93
    0a93 : 303e ; -- <0718> push rtna -- func minute_events

    0a94 : fba0 ; -- <0717> callx  check_power_down
    0a95 : 0ab0 ; -- <0717> "
    0a96 : fc00 ; -- <0717> "

    0a97 : f80c ; -- <0719> pop rtna -- func minute_events
    0a98 : fc00 ; -- <0719> swapra = nop

-- :power_hold_msg -- = 0x0a99
-- "PWH\x0"
    0a99 : 5750 ; -- <0721> WP
    0a9a : 0048 ; -- <0721>  H

-- ######## func check_power_relay -- = 0x0a9b
    0a9b : 303e ; -- <0731> push rtna -- func check_power_relay

    0a9c : 5e00 ; -- <0724> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0a9d : 6214 ; -- <0724> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0a9e : 0015 ; -- <0724> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0a9f : 0016 ; -- <0724> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0aa0 : 5e00 ; -- <0725> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    0aa1 : 623e ; -- <0725> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 62
    0aa2 : 0415 ; -- <0725> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    0aa3 : 0416 ; -- <0725> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle

    0aa4 : 0000 ; -- <0730> a = a
    0aa5 : 0401 ; -- <0730> b = b

    0aa6 : e407 ; -- <0726> bn eq :else_2726
    0aa7 : 0aae ; -- <0726> "

-- time to begin "solenoid saver" coil power reduction by PWM.
    0aa8 : 7a19 ; -- <0728> power_duty = $power_duty_holding
    0aa9 : 23a0 ; -- <0729> pa = :power_hold_msg
    0aaa : 0a99 ; -- <0729> "
    0aab : fba0 ; -- <0729> callx  set_text_flag  :power_hold_msg
    0aac : 0b26 ; -- <0729> "
    0aad : fc00 ; -- <0729> "


    0aae : f80c ; -- <0732> pop rtna -- func check_power_relay
    0aaf : fc00 ; -- <0732> swapra = nop

-- ######## func check_power_down -- = 0x0ab0

-- check power-down deadline in RAM.
    0ab0 : 5e00 ; -- <0735> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0ab1 : 6240 ; -- <0735> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0ab2 : 0015 ; -- <0735> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0ab3 : 0016 ; -- <0735> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0ab4 : 5e00 ; -- <0736> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    0ab5 : 623c ; -- <0736> ram b = $ram_power_down_at_min -- av_ad_lo = 60
    0ab6 : 0415 ; -- <0736> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    0ab7 : 0416 ; -- <0736> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle

    0ab8 : 0000 ; -- <0739> a = a
    0ab9 : 0401 ; -- <0739> b = b

    0aba : e407 ; -- <0737> bn eq :else_2746
    0abb : 0abe ; -- <0737> "

    0abc : e00f ; -- <0738> jmp :power_down
    0abd : 0abf ; -- <0738> "


    0abe : fc00 ; -- <0741> swapra = nop

-- :power_down -- = 0x0abf
-- this code never returns.
    0abf : fba0 ; -- <0744> callx  save_persistent_data
    0ac0 : 0ac7 ; -- <0744> "
    0ac1 : fc00 ; -- <0744> "
    0ac2 : 7a32 ; -- <0745> power_duty = $power_duty_opening
    0ac3 : 6fa0 ; -- <0746> error_halt_code $err_power_down -- leds = 0xfffc
    0ac4 : fffc ; -- <0746> "
    0ac5 : e00f ; -- <0746> error_halt_code $err_power_down
    0ac6 : 0ac5 ; -- <0746> "

-- ######## func save_persistent_data -- = 0x0ac7


    0ac7 : fc00 ; -- <0750> swapra = nop

-- ######## func check_communication -- = 0x0ac8
    0ac8 : 303e ; -- <0770> push rtna -- func check_communication

    0ac9 : 5e00 ; -- <0752> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    0aca : 6212 ; -- <0752> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 18
    0acb : 0015 ; -- <0752> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    0acc : 0016 ; -- <0752> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle

    0acd : 0000 ; -- <0760> a = a
    0ace : 0600 ; -- <0760> b = 0

    0acf : e007 ; -- <0753> br eq :else_2767
    0ad0 : 0ade ; -- <0753> "

    0ad1 : 0760 ; -- <0754> b = -1
    0ad2 : c800 ; -- <0755> a = a+b
    0ad3 : 0300 ; -- <0755> "
    0ad4 : 5e00 ; -- <0756> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0ad5 : 6212 ; -- <0756> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 18
    0ad6 : 5400 ; -- <0756> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a

    0ad7 : 0000 ; -- <0759> a = a
    0ad8 : 0600 ; -- <0759> b = 0

    0ad9 : e407 ; -- <0757> bn eq :else_2777
    0ada : 0ade ; -- <0757> "

    0adb : fba0 ; -- <0758> callx  ftdi_power_on
    0adc : 0b12 ; -- <0758> "
    0add : fc00 ; -- <0758> "



    0ade : 5e00 ; -- <0762> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0adf : 6240 ; -- <0762> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0ae0 : 0015 ; -- <0762> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0ae1 : 0016 ; -- <0762> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0ae2 : 5e00 ; -- <0763> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0ae3 : 6210 ; -- <0763> ram b = $ram_comm_restart_at_min -- av_ad_lo = 16
    0ae4 : 0415 ; -- <0763> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0ae5 : 0416 ; -- <0763> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle

    0ae6 : 0000 ; -- <0769> a = a
    0ae7 : 0401 ; -- <0769> b = b

    0ae8 : e407 ; -- <0764> bn eq :else_2792
    0ae9 : 0af3 ; -- <0764> "

-- comm restart is required.
    0aea : fba0 ; -- <0766> callx  postpone_comm_restart
    0aeb : 0af5 ; -- <0766> "
    0aec : fc00 ; -- <0766> "
    0aed : 5e00 ; -- <0767> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    0aee : 6212 ; -- <0767> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 18
    0aef : 5605 ; -- <0767> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    0af0 : fba0 ; -- <0768> callx  ftdi_power_off
    0af1 : 0b02 ; -- <0768> "
    0af2 : fc00 ; -- <0768> "


    0af3 : f80c ; -- <0771> pop rtna -- func check_communication
    0af4 : fc00 ; -- <0771> swapra = nop

-- ######## func postpone_comm_restart -- = 0x0af5

    0af5 : 5e00 ; -- <0773> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0af6 : 6240 ; -- <0773> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0af7 : 0015 ; -- <0773> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0af8 : 0016 ; -- <0773> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0af9 : 0602 ; -- <0774> b = $comm_grace_period_min
    0afa : 5e00 ; -- <0775> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    0afb : 6210 ; -- <0775> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 16
    0afc : c800 ; -- <0775> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    0afd : 5700 ; -- <0775> "

    0afe : fc00 ; -- <0777> swapra = nop

-- :ftdi_off_msg -- = 0x0aff
-- "FTOF\x0"
    0aff : 5446 ; -- <0779> TF
    0b00 : 464f ; -- <0779> FO
    0b01 : 0000 ; -- <0779>   

-- ######## func ftdi_power_off -- = 0x0b02
    0b02 : 303e ; -- <0786> push rtna -- func ftdi_power_off

    0b03 : 001c ; -- <0782> a = board_ctrl
    0b04 : 07a0 ; -- <0783> b = $not_ftdi_power_mask
    0b05 : ff7f ; -- <0783> "
    0b06 : c800 ; -- <0784> board_ctrl = and
    0b07 : 7330 ; -- <0784> "
    0b08 : 23a0 ; -- <0785> pa = :ftdi_off_msg
    0b09 : 0aff ; -- <0785> "
    0b0a : fba0 ; -- <0785> callx  set_text_flag  :ftdi_off_msg
    0b0b : 0b26 ; -- <0785> "
    0b0c : fc00 ; -- <0785> "

    0b0d : f80c ; -- <0787> pop rtna -- func ftdi_power_off
    0b0e : fc00 ; -- <0787> swapra = nop

-- :ftdi_on_msg -- = 0x0b0f
-- "FTON\x0"
    0b0f : 5446 ; -- <0789> TF
    0b10 : 4e4f ; -- <0789> NO
    0b11 : 0000 ; -- <0789>   

-- ######## func ftdi_power_on -- = 0x0b12
    0b12 : 303e ; -- <0796> push rtna -- func ftdi_power_on

    0b13 : 001c ; -- <0792> a = board_ctrl
    0b14 : 0680 ; -- <0793> b = $ftdi_power_mask
    0b15 : c800 ; -- <0794> board_ctrl = or
    0b16 : 7334 ; -- <0794> "
    0b17 : 23a0 ; -- <0795> pa = :ftdi_on_msg
    0b18 : 0b0f ; -- <0795> "
    0b19 : fba0 ; -- <0795> callx  set_text_flag  :ftdi_on_msg
    0b1a : 0b26 ; -- <0795> "
    0b1b : fc00 ; -- <0795> "

    0b1c : f80c ; -- <0797> pop rtna -- func ftdi_power_on
    0b1d : fc00 ; -- <0797> swapra = nop

-- ######## func clear_ram_page -- = 0x0b1e

    0b1e : 0200 ; -- <0799> a = 0
    0b1f : 0602 ; -- <0800> b = 2
-- :clear_next_word -- = 0x0b20
    0b20 : 6000 ; -- <0802> av_ad_lo = a
    0b21 : 5600 ; -- <0803> av_write_data = 0
    0b22 : 0300 ; -- <0804> a = ad0
    0b23 : e400 ; -- <0805> bn az :clear_next_word
    0b24 : 0b20 ; -- <0805> "

    0b25 : fc00 ; -- <0807> swapra = nop

-- ######## func set_text_flag -- = 0x0b26

    0b26 : 0408 ; -- <0809> b = flag_addr
    0b27 : 5e00 ; -- <0810> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    0b28 : 6256 ; -- <0810> ram a = $ram_next_tfp_idx -- av_ad_lo = 86
    0b29 : 0015 ; -- <0810> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    0b2a : 0016 ; -- <0810> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle

    0b2b : 0351 ; -- <0811> a = a<<1
    0b2c : 3001 ; -- <0811> push b -- push b
    0b2d : 0646 ; -- <0811> b = 70
    0b2e : 5e00 ; -- <0811> av_ad_hi = 0
    0b2f : 6300 ; -- <0811> av_ad_lo = ad0
    0b30 : 540c ; -- <0811> pop av_write_data -- pop av_write_data

    0b31 : 0008 ; -- <0812> a = flag_addr
    0b32 : 0760 ; -- <0813> b = -1
    0b33 : c800 ; -- <0814> a = a+b
    0b34 : 0300 ; -- <0814> "
    0b35 : 0607 ; -- <0815> b = $tfp_mask
    0b36 : 5e00 ; -- <0816> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    0b37 : 6256 ; -- <0816> ram $ram_next_tfp_idx = and -- av_ad_lo = 86
    0b38 : c800 ; -- <0816> ram $ram_next_tfp_idx = and -- av_write_data = and
    0b39 : 5730 ; -- <0816> "

    0b3a : fc00 ; -- <0818> swapra = nop

-- ######## func unique_text_flag -- = 0x0b3b
    0b3b : 3002 ; -- <0829> push i -- func unique_text_flag
    0b3c : 303e ; -- <0829> push rtna -- "

    0b3d : 0a00 ; -- <0826> i = 0
-- :loop_2877 -- = 0x0b3e

    0b3e : 0002 ; -- <0820> a = i

    0b3f : 0351 ; -- <0821> a = a<<1
    0b40 : 0646 ; -- <0821> b = 70
    0b41 : 5e00 ; -- <0821> av_ad_hi = 0
    0b42 : 6300 ; -- <0821> av_ad_lo = ad0
    0b43 : 0415 ; -- <0821> b = av_write_data
    0b44 : 0416 ; -- <0821> b = av_read_data


    0b45 : 0001 ; -- <0824> a = b
    0b46 : 0408 ; -- <0824> b = flag_addr

    0b47 : e407 ; -- <0822> bn eq :else_2887
    0b48 : 0b4b ; -- <0822> "

    0b49 : e00f ; -- <0823> jmp :skip
    0b4a : 0b57 ; -- <0823> "



    0b4b : 0002 ; -- <0826> a = i
    0b4c : 0601 ; -- <0826> b = 1
    0b4d : c800 ; -- <0826> i = a+b
    0b4e : 0b00 ; -- <0826> "


    0b4f : 0002 ; -- <0826> a = i
    0b50 : 0608 ; -- <0826> b = $num_text_flag_pointers
    0b51 : e005 ; -- <0826> br lt :loop_2877
    0b52 : 0b3e ; -- <0826> "

-- :end_2877 -- = 0x0b53
    0b53 : 2008 ; -- <0827> pa = flag_addr
    0b54 : fba0 ; -- <0827> callx  set_text_flag  flag_addr
    0b55 : 0b26 ; -- <0827> "
    0b56 : fc00 ; -- <0827> "
-- :skip -- = 0x0b57

    0b57 : f80c ; -- <0830> pop rtna -- func unique_text_flag
    0b58 : 080c ; -- <0830> pop i -- "
    0b59 : fc00 ; -- <0830> swapra = nop

-- :text_flags_msg -- = 0x0b5a
-- " tf=\x0"
    0b5a : 7420 ; -- <0832> t 
    0b5b : 3d66 ; -- <0832> =f
    0b5c : 0000 ; -- <0832>   

-- ######## func report_text_flags -- = 0x0b5d
    0b5d : 3002 ; -- <0848> push i -- func report_text_flags
    0b5e : 303e ; -- <0848> push rtna -- "

    0b5f : 03a0 ; -- <0835> a = :text_flags_msg
    0b60 : 0b5a ; -- <0835> "
    0b61 : fba0 ; -- <0836> call :print_nt
    0b62 : 014f ; -- <0836> "
    0b63 : fc00 ; -- <0836> "
    0b64 : 0a00 ; -- <0847> i = 0
-- :loop_2916 -- = 0x0b65

    0b65 : 0002 ; -- <0837> a = i

    0b66 : 0351 ; -- <0838> a = a<<1
    0b67 : 0646 ; -- <0838> b = 70
    0b68 : 5e00 ; -- <0838> av_ad_hi = 0
    0b69 : 6300 ; -- <0838> av_ad_lo = ad0
    0b6a : 0415 ; -- <0838> b = av_write_data
    0b6b : 0416 ; -- <0838> b = av_read_data


    0b6c : 0001 ; -- <0845> a = b
    0b6d : 0600 ; -- <0845> b = 0

    0b6e : e007 ; -- <0839> br eq :else_2926
    0b6f : 0b7f ; -- <0839> "

    0b70 : fba0 ; -- <0840> call :print_nt
    0b71 : 014f ; -- <0840> "
    0b72 : fc00 ; -- <0840> "
    0b73 : 022c ; -- <0841> a = 44 -- putasc ","
    0b74 : fba0 ; -- <0841> putasc ","
    0b75 : 009b ; -- <0841> "
    0b76 : fc00 ; -- <0841> "
    0b77 : 0002 ; -- <0842> a = i
    0b78 : 0600 ; -- <0843> b = 0

    0b79 : 0351 ; -- <0844> a = a<<1
    0b7a : 3001 ; -- <0844> push b -- push b
    0b7b : 0646 ; -- <0844> b = 70
    0b7c : 5e00 ; -- <0844> av_ad_hi = 0
    0b7d : 6300 ; -- <0844> av_ad_lo = ad0
    0b7e : 540c ; -- <0844> pop av_write_data -- pop av_write_data




    0b7f : 0002 ; -- <0847> a = i
    0b80 : 0601 ; -- <0847> b = 1
    0b81 : c800 ; -- <0847> i = a+b
    0b82 : 0b00 ; -- <0847> "


    0b83 : 0002 ; -- <0847> a = i
    0b84 : 0608 ; -- <0847> b = $num_text_flag_pointers
    0b85 : e005 ; -- <0847> br lt :loop_2916
    0b86 : 0b65 ; -- <0847> "

-- :end_2916 -- = 0x0b87

    0b87 : f80c ; -- <0849> pop rtna -- func report_text_flags
    0b88 : 080c ; -- <0849> pop i -- "
    0b89 : fc00 ; -- <0849> swapra = nop

-- :plan_msg -- = 0x0b8a
-- " pl=\x0"
    0b8a : 7020 ; -- <0851> p 
    0b8b : 3d6c ; -- <0851> =l
    0b8c : 0000 ; -- <0851>   
-- :manual_trim_msg -- = 0x0b8d
-- " mt=\x0"
    0b8d : 6d20 ; -- <0853> m 
    0b8e : 3d74 ; -- <0853> =t
    0b8f : 0000 ; -- <0853>   

-- ######## func report_plan -- = 0x0b90
    0b90 : 303e ; -- <0865> push rtna -- func report_plan

    0b91 : 03a0 ; -- <0856> a = :plan_msg
    0b92 : 0b8a ; -- <0856> "
    0b93 : fba0 ; -- <0857> call :print_nt
    0b94 : 014f ; -- <0857> "
    0b95 : fc00 ; -- <0857> "
    0b96 : 5e00 ; -- <0858> ram a = $ram_plan_name -- av_ad_hi = 0
    0b97 : 6288 ; -- <0858> ram a = $ram_plan_name -- av_ad_lo = 136
    0b98 : 0015 ; -- <0858> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    0b99 : 0016 ; -- <0858> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    0b9a : fba0 ; -- <0859> call :print_nt
    0b9b : 014f ; -- <0859> "
    0b9c : fc00 ; -- <0859> "

    0b9d : 03a0 ; -- <0861> a = :manual_trim_msg
    0b9e : 0b8d ; -- <0861> "
    0b9f : fba0 ; -- <0862> call :print_nt
    0ba0 : 014f ; -- <0862> "
    0ba1 : fc00 ; -- <0862> "
    0ba2 : 5e00 ; -- <0863> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    0ba3 : 62ec ; -- <0863> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 236
    0ba4 : 0015 ; -- <0863> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    0ba5 : 0016 ; -- <0863> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle
    0ba6 : fba0 ; -- <0864> call :put4x
    0ba7 : 00c3 ; -- <0864> "
    0ba8 : fc00 ; -- <0864> "

    0ba9 : f80c ; -- <0866> pop rtna -- func report_plan
    0baa : fc00 ; -- <0866> swapra = nop

-- ######## func interpret_tps -- = 0x0bab
    0bab : 3002 ; -- <0954> push i -- func interpret_tps
    0bac : 3004 ; -- <0954> push x -- "
    0bad : 3005 ; -- <0954> push y -- "
    0bae : 3006 ; -- <0954> push ga -- "
    0baf : 3007 ; -- <0954> push gb -- "
    0bb0 : 303e ; -- <0954> push rtna -- "

    0bb1 : 0206 ; -- <0868> a = $tps_adc_channel

    0bb2 : 0351 ; -- <0869> a = a<<1
    0bb3 : 0626 ; -- <0869> b = 38
    0bb4 : 5e00 ; -- <0869> av_ad_hi = 0
    0bb5 : 6300 ; -- <0869> av_ad_lo = ad0
    0bb6 : 0415 ; -- <0869> b = av_write_data
    0bb7 : 0416 ; -- <0869> b = av_read_data

-- reverse the scale.
    0bb8 : 03a0 ; -- <0871> a = 0x0fff
    0bb9 : 0fff ; -- <0871> "
    0bba : c800 ; -- <0872> b = xor
    0bbb : 0738 ; -- <0872> "
-- memorize reading into slot 0 and shift history up 1 slot.  total up as we go.
    0bbc : 1801 ; -- <0874> ga = b
    0bbd : 1200 ; -- <0875> x = 0
    0bbe : 0a00 ; -- <0886> i = 0
-- :loop_3006 -- = 0x0bbf

    0bbf : 0002 ; -- <0876> a = i

    0bc0 : 0351 ; -- <0877> a = a<<1
    0bc1 : 06dc ; -- <0877> b = 220
    0bc2 : 5e00 ; -- <0877> av_ad_hi = 0
    0bc3 : 6300 ; -- <0877> av_ad_lo = ad0
    0bc4 : 0415 ; -- <0877> b = av_write_data
    0bc5 : 0416 ; -- <0877> b = av_read_data

    0bc6 : 1c01 ; -- <0878> gb = b
    0bc7 : 1401 ; -- <0879> y = b
    0bc8 : c800 ; -- <0880> x = x+y
    0bc9 : 1320 ; -- <0880> "
    0bca : 0002 ; -- <0881> a = i
    0bcb : 0406 ; -- <0882> b = ga

    0bcc : 0351 ; -- <0883> a = a<<1
    0bcd : 3001 ; -- <0883> push b -- push b
    0bce : 06dc ; -- <0883> b = 220
    0bcf : 5e00 ; -- <0883> av_ad_hi = 0
    0bd0 : 6300 ; -- <0883> av_ad_lo = ad0
    0bd1 : 540c ; -- <0883> pop av_write_data -- pop av_write_data

    0bd2 : 1807 ; -- <0884> ga = gb


    0bd3 : 0002 ; -- <0886> a = i
    0bd4 : 0601 ; -- <0886> b = 1
    0bd5 : c800 ; -- <0886> i = a+b
    0bd6 : 0b00 ; -- <0886> "


    0bd7 : 0002 ; -- <0886> a = i
    0bd8 : 0604 ; -- <0886> b = $tps_history_len
    0bd9 : e005 ; -- <0886> br lt :loop_3006
    0bda : 0bbf ; -- <0886> "

-- :end_3006 -- = 0x0bdb
-- memorize average.
    0bdb : 0004 ; -- <0888> a = x
    0bdc : 0350 ; -- <0889> a = a>>1
    0bdd : 1b50 ; -- <0890> ga = a>>1
    0bde : 5e00 ; -- <0891> ram $ram_tps_avg = ga -- av_ad_hi = 0
    0bdf : 62da ; -- <0891> ram $ram_tps_avg = ga -- av_ad_lo = 218
    0be0 : 5406 ; -- <0891> ram $ram_tps_avg = ga -- av_write_data = ga
-- interpret state by comparing vs. reference table.
-- compare to idle reference.
    0be1 : 0200 ; -- <0894> a = 0

    0be2 : 0351 ; -- <0895> a = a<<1
    0be3 : 06b4 ; -- <0895> b = 180
    0be4 : 5e00 ; -- <0895> av_ad_hi = 0
    0be5 : 6300 ; -- <0895> av_ad_lo = ad0
    0be6 : 0415 ; -- <0895> b = av_write_data
    0be7 : 0416 ; -- <0895> b = av_read_data

    0be8 : 0001 ; -- <0896> a = b
    0be9 : 0353 ; -- <0897> a = a>>4
    0bea : c800 ; -- <0898> b = a+b
    0beb : 0700 ; -- <0898> "

    0bec : 0006 ; -- <0902> a = ga
    0bed : 0401 ; -- <0902> b = b

    0bee : e405 ; -- <0899> bn lt :else_3054
    0bef : 0bf5 ; -- <0899> "

    0bf0 : 5e00 ; -- <0900> ram $ram_tps_state = $tps_state_closed -- av_ad_hi = 0
    0bf1 : 62ce ; -- <0900> ram $ram_tps_state = $tps_state_closed -- av_ad_lo = 206
    0bf2 : 5600 ; -- <0900> ram $ram_tps_state = $tps_state_closed -- av_write_data = 0
    0bf3 : e00f ; -- <0901> jmp :end
    0bf4 : 0c47 ; -- <0901> "

-- compare to wide open reference.
    0bf5 : 020c ; -- <0904> a = ($num_tps_cells - 1)

    0bf6 : 0351 ; -- <0905> a = a<<1
    0bf7 : 06b4 ; -- <0905> b = 180
    0bf8 : 5e00 ; -- <0905> av_ad_hi = 0
    0bf9 : 6300 ; -- <0905> av_ad_lo = ad0
    0bfa : 0415 ; -- <0905> b = av_write_data
    0bfb : 0416 ; -- <0905> b = av_read_data

    0bfc : 1001 ; -- <0906> x = b
    0bfd : 0001 ; -- <0907> a = b
    0bfe : 0350 ; -- <0908> a = a>>1
    0bff : 0350 ; -- <0909> a = a>>1
    0c00 : 0760 ; -- <0910> b = 0xffff
    0c01 : c800 ; -- <0911> y = xor
    0c02 : 1738 ; -- <0911> "

    0c03 : 0006 ; -- <0915> a = ga
    0c04 : c800 ; -- <0915> b = x+y
    0c05 : 0720 ; -- <0915> "

    0c06 : e406 ; -- <0912> bn gt :else_3078
    0c07 : 0c0d ; -- <0912> "

    0c08 : 5e00 ; -- <0913> ram $ram_tps_state = $tps_state_open -- av_ad_hi = 0
    0c09 : 62ce ; -- <0913> ram $ram_tps_state = $tps_state_open -- av_ad_lo = 206
    0c0a : 5604 ; -- <0913> ram $ram_tps_state = $tps_state_open -- av_write_data = 4
    0c0b : e00f ; -- <0914> jmp :end
    0c0c : 0c47 ; -- <0914> "

-- compare to current RPM's reference position.
--patch: rework this to compare to the next 2 tps reference cells instead of a fixed margin.
-- that way always prevents it from enriching while the tps is still within same ref cell.
    0c0d : 5e00 ; -- <0919> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    0c0e : 627c ; -- <0919> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    0c0f : 2015 ; -- <0919> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    0c10 : 2016 ; -- <0919> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    0c11 : fba0 ; -- <0920> callx  find_rpm_cell  pa  a
    0c12 : 0585 ; -- <0920> "
    0c13 : fc00 ; -- <0920> "
    0c14 : 0008 ; -- <0920> a = pa

    0c15 : 0351 ; -- <0921> a = a<<1
    0c16 : 06b4 ; -- <0921> b = 180
    0c17 : 5e00 ; -- <0921> av_ad_hi = 0
    0c18 : 6300 ; -- <0921> av_ad_lo = ad0
    0c19 : 0415 ; -- <0921> b = av_write_data
    0c1a : 0416 ; -- <0921> b = av_read_data

    0c1b : 1001 ; -- <0922> x = b
-- test if it's within 1/16 of reference.
    0c1c : 0004 ; -- <0924> a = x
    0c1d : 0353 ; -- <0925> a = a>>4
    0c1e : c800 ; -- <0926> a = a+b
    0c1f : 0300 ; -- <0926> "

    0c20 : 0000 ; -- <0930> a = a
    0c21 : 0406 ; -- <0930> b = ga

    0c22 : e406 ; -- <0927> bn gt :else_3106
    0c23 : 0c29 ; -- <0927> "

    0c24 : 5e00 ; -- <0928> ram $ram_tps_state = $tps_state_cruise -- av_ad_hi = 0
    0c25 : 62ce ; -- <0928> ram $ram_tps_state = $tps_state_cruise -- av_ad_lo = 206
    0c26 : 5601 ; -- <0928> ram $ram_tps_state = $tps_state_cruise -- av_write_data = 1
    0c27 : e00f ; -- <0929> jmp :end
    0c28 : 0c47 ; -- <0929> "

-- test if it's within 1/8 of reference.
    0c29 : 0004 ; -- <0932> a = x
    0c2a : 0350 ; -- <0933> a = a>>1
    0c2b : 0350 ; -- <0934> a = a>>1
    0c2c : 0350 ; -- <0935> a = a>>1
    0c2d : 0404 ; -- <0936> b = x
    0c2e : c800 ; -- <0937> a = a+b
    0c2f : 0300 ; -- <0937> "

    0c30 : 0000 ; -- <0941> a = a
    0c31 : 0406 ; -- <0941> b = ga

    0c32 : e406 ; -- <0938> bn gt :else_3122
    0c33 : 0c39 ; -- <0938> "

    0c34 : 5e00 ; -- <0939> ram $ram_tps_state = $tps_state_accel1 -- av_ad_hi = 0
    0c35 : 62ce ; -- <0939> ram $ram_tps_state = $tps_state_accel1 -- av_ad_lo = 206
    0c36 : 5602 ; -- <0939> ram $ram_tps_state = $tps_state_accel1 -- av_write_data = 2
    0c37 : e00f ; -- <0940> jmp :end
    0c38 : 0c47 ; -- <0940> "

-- test if it's within 1/2 of reference.
    0c39 : 0004 ; -- <0943> a = x
    0c3a : 0350 ; -- <0944> a = a>>1
    0c3b : 0404 ; -- <0945> b = x
    0c3c : c800 ; -- <0946> a = a+b
    0c3d : 0300 ; -- <0946> "

    0c3e : 0000 ; -- <0950> a = a
    0c3f : 0406 ; -- <0950> b = ga

    0c40 : e406 ; -- <0947> bn gt :else_3136
    0c41 : 0c47 ; -- <0947> "

    0c42 : 5e00 ; -- <0948> ram $ram_tps_state = $tps_state_accel2 -- av_ad_hi = 0
    0c43 : 62ce ; -- <0948> ram $ram_tps_state = $tps_state_accel2 -- av_ad_lo = 206
    0c44 : 5603 ; -- <0948> ram $ram_tps_state = $tps_state_accel2 -- av_write_data = 3
    0c45 : e00f ; -- <0949> jmp :end
    0c46 : 0c47 ; -- <0949> "

-- in this case leave ram_tps_state as-is.

-- :end -- = 0x0c47

    0c47 : f80c ; -- <0955> pop rtna -- func interpret_tps
    0c48 : 1c0c ; -- <0955> pop gb -- "
    0c49 : 180c ; -- <0955> pop ga -- "
    0c4a : 140c ; -- <0955> pop y -- "
    0c4b : 100c ; -- <0955> pop x -- "
    0c4c : 080c ; -- <0955> pop i -- "
    0c4d : fc00 ; -- <0955> swapra = nop

-- ######## func jf_to_rpm -- = 0x0c4e
    0c4e : 303e ; -- <0965> push rtna -- func jf_to_rpm

-- resolution = 32 rpm.
    0c4f : 0408 ; -- <0958> b = jiffies
    0c50 : 03a0 ; -- <0959> a = 0x5573
    0c51 : 5573 ; -- <0959> "
-- = 700000 >> 5
    0c52 : fba0 ; -- <0961> call :divide
    0c53 : 018c ; -- <0961> "
    0c54 : fc00 ; -- <0961> "
    0c55 : 0001 ; -- <0962> a = b
    0c56 : 0352 ; -- <0963> a = a<<4
    0c57 : 2351 ; -- <0964> rpm = a<<1

    0c58 : f80c ; -- <0966> pop rtna -- func jf_to_rpm
    0c59 : fc00 ; -- <0966> swapra = nop

-- ######## func check_engine_stop -- = 0x0c5a
    0c5a : 303e ; -- <0982> push rtna -- func check_engine_stop

-- returns 1 if transitioned to stop, else 0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.

    0c5b : 001e ; -- <0980> a = power_duty
    0c5c : 0680 ; -- <0980> b = ( 0x0080 )

    0c5d : e003 ; -- <0972> br and0z :else_3165
    0c5e : 0c72 ; -- <0972> "

    0c5f : 5e00 ; -- <0973> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0c60 : 627e ; -- <0973> ram a = $ram_rpm_valid -- av_ad_lo = 126
    0c61 : 0015 ; -- <0973> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0c62 : 0016 ; -- <0973> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0c63 : 0000 ; -- <0979> a = a
    0c64 : 0600 ; -- <0979> b = 0

    0c65 : e407 ; -- <0974> bn eq :else_3173
    0c66 : 0c72 ; -- <0974> "

    0c67 : 5e00 ; -- <0975> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0c68 : 628e ; -- <0975> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0c69 : f815 ; -- <0975> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0c6a : f816 ; -- <0975> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0c6b : fc00 ; -- <0976> swapra = nop
    0c6c : fba0 ; -- <0978> callx  init_plan_stop
    0c6d : 0322 ; -- <0978> "
    0c6e : fc00 ; -- <0978> "
    0c6f : 2201 ; -- <0979> did_stop = 1
    0c70 : f80c ; -- <0979> pop rtna -- rtn 1
    0c71 : fc00 ; -- <0978> swapra = nop


    0c72 : 2200 ; -- <0981> did_stop = 0
    0c73 : f80c ; -- <0981> pop rtna -- rtn 0
    0c74 : fc00 ; -- <0980> swapra = nop

    0c75 : f80c ; -- <0983> pop rtna -- func check_engine_stop
    0c76 : fc00 ; -- <0983> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d event_priority
-- src reg 000e soft_event
-- src reg 000f usage_count
-- src reg 0010 ustimer0
-- src reg 0011 mstimer0
-- src reg 0012 mstimer1
-- src reg 0013 mstimer2
-- src reg 0014 spi_data
-- src reg 0015 av_write_data
-- src reg 0016 av_read_data
-- src reg 0017 av_ad_hi
-- src reg 0018 av_ad_lo
-- src reg 0019 fduart_data
-- src reg 001a fduart_status
-- src reg 001b leds
-- src reg 001c board_ctrl
-- src reg 001d anmux_ctrl
-- src reg 001e power_duty
-- src reg 001f ign_capture_jf
-- src reg 0020 ign_timeout_len_jf
-- src reg 0021 puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d event_priority
-- dest reg 000e soft_event
-- dest reg 000f usage_count
-- dest reg 0010 ustimer0
-- dest reg 0011 mstimer0
-- dest reg 0012 mstimer1
-- dest reg 0013 mstimer2
-- dest reg 0014 spi_data
-- dest reg 0015 av_write_data
-- dest reg 0017 av_ad_hi
-- dest reg 0018 av_ad_lo
-- dest reg 0019 fduart_data
-- dest reg 001a fduart_status
-- dest reg 001b leds
-- dest reg 001c board_ctrl
-- dest reg 001d anmux_ctrl
-- dest reg 001e power_duty
-- dest reg 0020 ign_timeout_len_jf
-- dest reg 0021 puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_last_anmux_data
-- ram 00000026 ram_last_adc_data
-- ram 00000036 ram_adc_chn_pending
-- ram 00000038 ram_adc_junk
-- ram 0000003a ram_dial_setting
-- ram 0000003c ram_power_down_at_min
-- ram 0000003e ram_relay_hold_at_pass
-- ram 00000040 ram_minutes_cnt
-- ram 00000042 ram_seconds_cnt
-- ram 00000044 ram_mcu_usage_cnt
-- ram 00000046 ram_text_flag_pointers
-- ram 00000056 ram_next_tfp_idx
-- ram 00000058 ram_ign_history_idx
-- ram 0000005a ram_ign_history_jf
-- ram 0000007a ram_ign_avg_jf
-- ram 0000007c ram_avg_rpm
-- ram 0000007e ram_rpm_valid
-- ram 00000080 ram_ign_bad_samples
-- ram 00000082 ram_ign_fastest_jf
-- ram 00000084 ram_ign_slowest_jf
-- ram 00000086 ram_next_puff_len_us
-- ram 00000088 ram_plan_name
-- ram 0000008a ram_puff_len_func
-- ram 0000008c ram_transition_func
-- ram 0000008e ram_destroy_plan_func
-- ram 00000090 ram_next_puff_len_us
-- ram 00000092 ram_puff_count
-- ram 00000094 ram_terminal_connected
-- ram 00000096 ram_warmup_timeout_at_pass
-- ram 00000098 ram_smap
-- ram 000000b2 ram_last_learn_second
-- ram 000000b4 ram_tps_reference
-- ram 000000ce ram_tps_state
-- ram 000000d0 ram_tps_enrich_thou
-- ram 000000da ram_tps_avg
-- ram 000000dc ram_tps_history
-- ram 000000e4 ram_lrns_ticks_remain
-- ram 000000e6 ram_o2_state
-- ram 000000e8 ram_o2_been_rich
-- ram 000000ea ram_o2_been_lean
-- ram 000000ec ram_run_manual_trim_thou
        
        END;
    
