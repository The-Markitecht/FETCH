
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 0306 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.





-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in jf "jiffies" or "jf".
-- 5000 RPM = about 140 jf between rising edges on chevy ignition white wire.
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".
-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 5000 to 20000 us length in about 7 seconds.
-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.

    0002 : 001e ; -- <0180> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0180>   
    0004 : 2020 ; -- <0180>   
    0005 : 2020 ; -- <0180>   
    0006 : 6120 ; -- <0180> a 
-- "       b"
    0007 : 2020 ; -- <0180>   
    0008 : 2020 ; -- <0180>   
    0009 : 2020 ; -- <0180>   
    000a : 6220 ; -- <0180> b 
-- "       i"
    000b : 2020 ; -- <0180>   
    000c : 2020 ; -- <0180>   
    000d : 2020 ; -- <0180>   
    000e : 6920 ; -- <0180> i 
-- "       j"
    000f : 2020 ; -- <0180>   
    0010 : 2020 ; -- <0180>   
    0011 : 2020 ; -- <0180>   
    0012 : 6a20 ; -- <0180> j 
-- "       x"
    0013 : 2020 ; -- <0180>   
    0014 : 2020 ; -- <0180>   
    0015 : 2020 ; -- <0180>   
    0016 : 7820 ; -- <0180> x 
-- "       y"
    0017 : 2020 ; -- <0180>   
    0018 : 2020 ; -- <0180>   
    0019 : 2020 ; -- <0180>   
    001a : 7920 ; -- <0180> y 
-- "      g6"
    001b : 2020 ; -- <0180>   
    001c : 2020 ; -- <0180>   
    001d : 2020 ; -- <0180>   
    001e : 3667 ; -- <0180> 6g
-- "      g7"
    001f : 2020 ; -- <0180>   
    0020 : 2020 ; -- <0180>   
    0021 : 2020 ; -- <0180>   
    0022 : 3767 ; -- <0180> 7g
-- "--rstk  "
    0023 : 2f2f ; -- <0180> --
    0024 : 7372 ; -- <0180> sr
    0025 : 6b74 ; -- <0180> kt
    0026 : 2020 ; -- <0180>   
-- "  ev_pri"
    0027 : 2020 ; -- <0180>   
    0028 : 7665 ; -- <0180> ve
    0029 : 705f ; -- <0180> p_
    002a : 6972 ; -- <0180> ir
-- "softevnt"
    002b : 6f73 ; -- <0180> os
    002c : 7466 ; -- <0180> tf
    002d : 7665 ; -- <0180> ve
    002e : 746e ; -- <0180> tn
-- "   usage"
    002f : 2020 ; -- <0180>   
    0030 : 7520 ; -- <0180> u 
    0031 : 6173 ; -- <0180> as
    0032 : 6567 ; -- <0180> eg
-- "ustimer0"
    0033 : 7375 ; -- <0180> su
    0034 : 6974 ; -- <0180> it
    0035 : 656d ; -- <0180> em
    0036 : 3072 ; -- <0180> 0r
-- "mstimer0"
    0037 : 736d ; -- <0180> sm
    0038 : 6974 ; -- <0180> it
    0039 : 656d ; -- <0180> em
    003a : 3072 ; -- <0180> 0r
-- "mstimer1"
    003b : 736d ; -- <0180> sm
    003c : 6974 ; -- <0180> it
    003d : 656d ; -- <0180> em
    003e : 3172 ; -- <0180> 1r
-- "mstimer2"
    003f : 736d ; -- <0180> sm
    0040 : 6974 ; -- <0180> it
    0041 : 656d ; -- <0180> em
    0042 : 3272 ; -- <0180> 2r
-- "spi_data"
    0043 : 7073 ; -- <0180> ps
    0044 : 5f69 ; -- <0180> _i
    0045 : 6164 ; -- <0180> ad
    0046 : 6174 ; -- <0180> at
-- "--avwrdt"
    0047 : 2f2f ; -- <0180> --
    0048 : 7661 ; -- <0180> va
    0049 : 7277 ; -- <0180> rw
    004a : 7464 ; -- <0180> td
-- "av_rd_dt"
    004b : 7661 ; -- <0180> va
    004c : 725f ; -- <0180> r_
    004d : 5f64 ; -- <0180> _d
    004e : 7464 ; -- <0180> td
-- "av_ad_hi"
    004f : 7661 ; -- <0180> va
    0050 : 615f ; -- <0180> a_
    0051 : 5f64 ; -- <0180> _d
    0052 : 6968 ; -- <0180> ih
-- "av_ad_lo"
    0053 : 7661 ; -- <0180> va
    0054 : 615f ; -- <0180> a_
    0055 : 5f64 ; -- <0180> _d
    0056 : 6f6c ; -- <0180> ol
-- "--uartdt"
    0057 : 2f2f ; -- <0180> --
    0058 : 6175 ; -- <0180> au
    0059 : 7472 ; -- <0180> tr
    005a : 7464 ; -- <0180> td
-- "uartstat"
    005b : 6175 ; -- <0180> au
    005c : 7472 ; -- <0180> tr
    005d : 7473 ; -- <0180> ts
    005e : 7461 ; -- <0180> ta
-- "    leds"
    005f : 2020 ; -- <0180>   
    0060 : 2020 ; -- <0180>   
    0061 : 656c ; -- <0180> el
    0062 : 7364 ; -- <0180> sd
-- "brd_ctrl"
    0063 : 7262 ; -- <0180> rb
    0064 : 5f64 ; -- <0180> _d
    0065 : 7463 ; -- <0180> tc
    0066 : 6c72 ; -- <0180> lr
-- "   anmux"
    0067 : 2020 ; -- <0180>   
    0068 : 6120 ; -- <0180> a 
    0069 : 6d6e ; -- <0180> mn
    006a : 7875 ; -- <0180> xu
-- "pwr_duty"
    006b : 7770 ; -- <0180> wp
    006c : 5f72 ; -- <0180> _r
    006d : 7564 ; -- <0180> ud
    006e : 7974 ; -- <0180> yt
-- "igntmcap"
    006f : 6769 ; -- <0180> gi
    0070 : 746e ; -- <0180> tn
    0071 : 636d ; -- <0180> cm
    0072 : 7061 ; -- <0180> pa
-- "igntmout"
    0073 : 6769 ; -- <0180> gi
    0074 : 746e ; -- <0180> tn
    0075 : 6f6d ; -- <0180> om
    0076 : 7475 ; -- <0180> tu
-- "puflenus"
    0077 : 7570 ; -- <0180> up
    0078 : 6c66 ; -- <0180> lf
    0079 : 6e65 ; -- <0180> ne
    007a : 7375 ; -- <0180> su

-- string resources
-- :boot_msg -- = 0x007b
-- "TGT\r\n\x0"
    007b : 4754 ; -- <0184> GT
    007c : 0d54 ; -- <0184>  T
    007d : 000a ; -- <0184>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x007e
-- initialize prior to polling loop, for minimum latency.
    007e : 07a0 ; -- <0006> b = :event_table
    007f : 0332 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0080
    0080 : 0009 ; -- <0009> a = event_priority
    0081 : e000 ; -- <0010> br 0z :poll_events_again
    0082 : 0080 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0083 : 2400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0084 : d300 ; -- <0015> fetch rtna from ad0
    0085 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0086 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0087 : 5fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0088 : ffc0 ; -- <0021> "
    0089 : e00f ; -- <0021> error_halt_code 0xffc0
    008a : 0089 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x008b
    008b : 2004 ; -- <0046> push x -- func putchar_fduart

    008c : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    008d : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x008e
    008e : 0416 ; -- <0053> b = fduart_status
    008f : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    0090 : 008e ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    0091 : 5404 ; -- <0057> fduart_data = x
    0092 : 1008 ; -- <0058> pop x -- end_func
    0093 : fc00 ; -- <0058> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x0094
-- wait until FIFO is populated.
    0094 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x0095
    0095 : 0416 ; -- <0066> b = fduart_status
    0096 : e403 ; -- <0067> bn and0z :wait_for_busy
    0097 : 0095 ; -- <0067> "
    0098 : 0015 ; -- <0068> a = fduart_data
    0099 : fc00 ; -- <0069> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x009a
-- check for FIFO is populated.
    009a : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    009b : 0416 ; -- <0075> b = fduart_status
    009c : e403 ; -- <0076> bn and0z :none
    009d : 00a0 ; -- <0076> "
    009e : 0015 ; -- <0077> a = fduart_data
    009f : fc00 ; -- <0078> swapra = nop
-- :none -- = 0x00a0
    00a0 : 0360 ; -- <0080> a = -1
    00a1 : fc00 ; -- <0081> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00a2
-- set & enable analog muxer
    00a2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00a3 : c800 ; -- <0008> anmux_ctrl = or
    00a4 : 6734 ; -- <0008> "
    00a5 : fc00 ; -- <0009> swapra = nop

-- ######## func anmux_get_chn -- = 0x00a6
    00a6 : 0019 ; -- <0012> a = anmux_ctrl
    00a7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00a8 : c800 ; -- <0014> a = and
    00a9 : 0330 ; -- <0014> "
    00aa : fc00 ; -- <0015> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00ab
-- "0123456789abcdef"
    00ab : 3130 ; -- <0050> 10
    00ac : 3332 ; -- <0050> 32
    00ad : 3534 ; -- <0050> 54
    00ae : 3736 ; -- <0050> 76
    00af : 3938 ; -- <0050> 98
    00b0 : 6261 ; -- <0050> ba
    00b1 : 6463 ; -- <0050> dc
    00b2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00b3
    00b3 : 2004 ; -- <0054> push x -- func put4x
    00b4 : 2006 ; -- <0054> push g6 -- "
    00b5 : 203e ; -- <0054> push rtna -- "
    00b6 : 13a0 ; -- <0055> x = :hexdigits
    00b7 : 00ab ; -- <0055> "

    00b8 : 1800 ; -- <0057> g6 = a
    00b9 : 07a0 ; -- <0058> b = 0xF000
    00ba : f000 ; -- <0058> "
    00bb : c800 ; -- <0059> a = and
    00bc : 0330 ; -- <0059> "
    00bd : 0353 ; -- <0060> a = a>>4
    00be : 0353 ; -- <0061> a = a>>4
    00bf : 0353 ; -- <0062> a = a>>4
    00c0 : fba0 ; -- <0063> call fetch_byte
    00c1 : 01cc ; -- <0063> "
    00c2 : fc00 ; -- <0063> "
    00c3 : fba0 ; -- <0064> putchar a
    00c4 : 008b ; -- <0064> "
    00c5 : fc00 ; -- <0064> "

    00c6 : 0006 ; -- <0066> a = g6
    00c7 : 07a0 ; -- <0067> b = 0x0F00
    00c8 : 0f00 ; -- <0067> "
    00c9 : c800 ; -- <0068> a = and
    00ca : 0330 ; -- <0068> "
    00cb : 0353 ; -- <0069> a = a>>4
    00cc : 0353 ; -- <0070> a = a>>4
    00cd : fba0 ; -- <0071> call fetch_byte
    00ce : 01cc ; -- <0071> "
    00cf : fc00 ; -- <0071> "
    00d0 : fba0 ; -- <0072> putchar a
    00d1 : 008b ; -- <0072> "
    00d2 : fc00 ; -- <0072> "

    00d3 : 0006 ; -- <0074> a = g6
    00d4 : 06f0 ; -- <0075> b = 0x00F0
    00d5 : c800 ; -- <0076> a = and
    00d6 : 0330 ; -- <0076> "
    00d7 : 0353 ; -- <0077> a = a>>4
    00d8 : fba0 ; -- <0078> call fetch_byte
    00d9 : 01cc ; -- <0078> "
    00da : fc00 ; -- <0078> "
    00db : fba0 ; -- <0079> putchar a
    00dc : 008b ; -- <0079> "
    00dd : fc00 ; -- <0079> "

    00de : 0006 ; -- <0081> a = g6
    00df : 060f ; -- <0082> b = 0x000F
    00e0 : c800 ; -- <0083> a = and
    00e1 : 0330 ; -- <0083> "
    00e2 : fba0 ; -- <0084> call fetch_byte
    00e3 : 01cc ; -- <0084> "
    00e4 : fc00 ; -- <0084> "
    00e5 : fba0 ; -- <0085> putchar a
    00e6 : 008b ; -- <0085> "
    00e7 : fc00 ; -- <0085> "

    00e8 : f808 ; -- <0087> pop rtna -- end_func
    00e9 : 1808 ; -- <0087> pop g6 -- "
    00ea : 1008 ; -- <0087> pop x -- "
    00eb : fc00 ; -- <0087> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00ec
    00ec : 2002 ; -- <0091> push i -- func get4x
    00ed : 2003 ; -- <0091> push j -- "
    00ee : 2004 ; -- <0091> push x -- "
    00ef : 2005 ; -- <0091> push y -- "
    00f0 : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    00f1 : 1604 ; -- <0094> y = 4
-- :again -- = 0x00f2
    00f2 : fba0 ; -- <0096> getchar
    00f3 : 0094 ; -- <0096> "
    00f4 : fc00 ; -- <0096> "
    00f5 : 13a0 ; -- <0097> x = :hexdigits
    00f6 : 00ab ; -- <0097> "
    00f7 : 0a10 ; -- <0098> i = 16
    00f8 : fba0 ; -- <0099> call :find_in_fetch
    00f9 : 01e0 ; -- <0099> "
    00fa : fc00 ; -- <0099> "
    00fb : 0760 ; -- <0100> b = -1
    00fc : e007 ; -- <0101> br eq :fail
    00fd : 0111 ; -- <0101> "
    00fe : 0400 ; -- <0102> b = a
    00ff : 0003 ; -- <0103> a = j
    0100 : 0352 ; -- <0104> a = a<<4
    0101 : c800 ; -- <0105> j = or
    0102 : 0f34 ; -- <0105> "
    0103 : 1360 ; -- <0106> x = -1
    0104 : c800 ; -- <0107> y = x+y
    0105 : 1720 ; -- <0107> "
    0106 : 0005 ; -- <0108> a = y
    0107 : e400 ; -- <0109> bn az :again
    0108 : 00f2 ; -- <0109> "
    0109 : 0003 ; -- <0110> a = j
    010a : 0600 ; -- <0111> b = 0
    010b : f808 ; -- <0112> pop rtna -- rtn
    010c : 1408 ; -- <0112> pop y -- "
    010d : 1008 ; -- <0112> pop x -- "
    010e : 0c08 ; -- <0112> pop j -- "
    010f : 0808 ; -- <0112> pop i -- "
    0110 : fc00 ; -- <0112> swapra = nop
-- :fail -- = 0x0111
    0111 : 0760 ; -- <0114> b = -1
    0112 : f808 ; -- <0115> pop rtna -- end_func
    0113 : 1408 ; -- <0115> pop y -- "
    0114 : 1008 ; -- <0115> pop x -- "
    0115 : 0c08 ; -- <0115> pop j -- "
    0116 : 0808 ; -- <0115> pop i -- "
    0117 : fc00 ; -- <0115> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0118
    0118 : 2002 ; -- <0121> push i -- func print_fixed
    0119 : 2003 ; -- <0121> push j -- "
    011a : 2004 ; -- <0121> push x -- "
    011b : 2005 ; -- <0121> push y -- "
    011c : 2006 ; -- <0121> push g6 -- "
    011d : 203e ; -- <0121> push rtna -- "
    011e : 0800 ; -- <0122> i = a
    011f : 0e01 ; -- <0123> j = 1
    0120 : 1001 ; -- <0124> x = b
    0121 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0122
    0122 : e002 ; -- <0127> br xz :done
    0123 : 0138 ; -- <0127> "
    0124 : 1320 ; -- <0128> x = ad2
    0125 : d002 ; -- <0129> fetch g6 from i
    0126 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0127 : 0006 ; -- <0131> a = g6 -- putchar g6
    0128 : fba0 ; -- <0131> putchar g6
    0129 : 008b ; -- <0131> "
    012a : fc00 ; -- <0131> "
    012b : e002 ; -- <0132> br xz :done
    012c : 0138 ; -- <0132> "
    012d : 1320 ; -- <0133> x = ad2
    012e : 0006 ; -- <0134> a = g6
    012f : 0353 ; -- <0135> a = a>>4
    0130 : 0353 ; -- <0136> a = a>>4
    0131 : fba0 ; -- <0137> putchar a
    0132 : 008b ; -- <0137> "
    0133 : fc00 ; -- <0137> "
    0134 : c800 ; -- <0138> i = i+j
    0135 : 0b10 ; -- <0138> "
    0136 : e00f ; -- <0139> jmp :next_word
    0137 : 0122 ; -- <0139> "
-- :done -- = 0x0138
    0138 : f808 ; -- <0141> pop rtna -- end_func
    0139 : 1808 ; -- <0141> pop g6 -- "
    013a : 1408 ; -- <0141> pop y -- "
    013b : 1008 ; -- <0141> pop x -- "
    013c : 0c08 ; -- <0141> pop j -- "
    013d : 0808 ; -- <0141> pop i -- "
    013e : fc00 ; -- <0141> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x013f
    013f : 2002 ; -- <0147> push i -- func print_nt
    0140 : 2003 ; -- <0147> push j -- "
    0141 : 2004 ; -- <0147> push x -- "
    0142 : 203e ; -- <0147> push rtna -- "
    0143 : 0800 ; -- <0148> i = a
    0144 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0145
    0145 : d002 ; -- <0151> fetch x from i
    0146 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0147 : 0004 ; -- <0153> a = x
    0148 : 06ff ; -- <0154> b = 0xff
    0149 : e003 ; -- <0155> br and0z :done
    014a : 015b ; -- <0155> "
    014b : fba0 ; -- <0156> putchar a
    014c : 008b ; -- <0156> "
    014d : fc00 ; -- <0156> "
    014e : 0004 ; -- <0157> a = x
    014f : 0353 ; -- <0158> a = a>>4
    0150 : 0353 ; -- <0159> a = a>>4
    0151 : 06ff ; -- <0160> b = 0xff
    0152 : e003 ; -- <0161> br and0z :done
    0153 : 015b ; -- <0161> "
    0154 : fba0 ; -- <0162> putchar a
    0155 : 008b ; -- <0162> "
    0156 : fc00 ; -- <0162> "
    0157 : c800 ; -- <0163> i = i+j
    0158 : 0b10 ; -- <0163> "
    0159 : e00f ; -- <0164> jmp :next_word
    015a : 0145 ; -- <0164> "
-- :done -- = 0x015b
    015b : f808 ; -- <0166> pop rtna -- end_func
    015c : 1008 ; -- <0166> pop x -- "
    015d : 0c08 ; -- <0166> pop j -- "
    015e : 0808 ; -- <0166> pop i -- "
    015f : fc00 ; -- <0166> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0160
    0160 : 2002 ; -- <0004> push i -- func multiply
    0161 : 2003 ; -- <0004> push j -- "
    0162 : 2004 ; -- <0004> push x -- "
    0163 : 2005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0164 : 1000 ; -- <0009> x = a
    0165 : 1401 ; -- <0010> y = b
    0166 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0167
    0167 : e002 ; -- <0013> br xz :done
    0168 : 0176 ; -- <0013> "
    0169 : 0004 ; -- <0014> a = x
    016a : 0601 ; -- <0015> b = 1
    016b : e003 ; -- <0016> br and0z :skip_add
    016c : 0170 ; -- <0016> "
    016d : 0c05 ; -- <0017> j = y
    016e : c800 ; -- <0018> i = i+j
    016f : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0170
    0170 : 0004 ; -- <0020> a = x
    0171 : 1350 ; -- <0021> x = a>>1
    0172 : 0005 ; -- <0022> a = y
    0173 : 1751 ; -- <0023> y = a<<1
    0174 : e00f ; -- <0024> jmp :again
    0175 : 0167 ; -- <0024> "
-- :done -- = 0x0176
    0176 : 0002 ; -- <0026> a = i
    0177 : 1408 ; -- <0027> pop y -- end_func
    0178 : 1008 ; -- <0027> pop x -- "
    0179 : 0c08 ; -- <0027> pop j -- "
    017a : 0808 ; -- <0027> pop i -- "
    017b : fc00 ; -- <0027> swapra = nop

-- ######## func divide -- = 0x017c
    017c : 2002 ; -- <0029> push i -- func divide
    017d : 2003 ; -- <0029> push j -- "
    017e : 2004 ; -- <0029> push x -- "
    017f : 2005 ; -- <0029> push y -- "
    0180 : 2006 ; -- <0029> push g6 -- "
    0181 : 2007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0182 : e005 ; -- <0037> br lt :zero
    0183 : 01bd ; -- <0037> "
    0184 : e000 ; -- <0038> br az :zero
    0185 : 01bd ; -- <0038> "
    0186 : 1000 ; -- <0039> x = a
--    g7 = x
    0187 : 0001 ; -- <0041> a = b
    0188 : e000 ; -- <0042> br az :zero
    0189 : 01bd ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    018a : 0404 ; -- <0058> b = x
    018b : 0a00 ; -- <0059> i = 0
    018c : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x018d
    018d : e006 ; -- <0062> br gt :shift_done
    018e : 0193 ; -- <0062> "
    018f : 0351 ; -- <0063> a = a<<1
    0190 : 0b10 ; -- <0064> i = ad1
    0191 : e00f ; -- <0065> jmp :shift_again
    0192 : 018d ; -- <0065> "
-- :shift_done -- = 0x0193
    0193 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    0194 : 1e00 ; -- <0078> g7 = 0
    0195 : 0f60 ; -- <0079> j = -1
-- :again -- = 0x0196
    0196 : e001 ; -- <0081> br iz :done
    0197 : 01b4 ; -- <0081> "
    0198 : 0006 ; -- <0082> a = g6
    0199 : 0404 ; -- <0083> b = x
    019a : e006 ; -- <0084> br gt :result0
    019b : 01ac ; -- <0084> "
-- temp does fit; output a 1.
    019c : 0007 ; -- <0086> a = g7
    019d : 0351 ; -- <0087> a = a<<1
    019e : 0601 ; -- <0088> b = 1
    019f : c800 ; -- <0089> g7 = or
    01a0 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    01a1 : 0006 ; -- <0091> a = g6
    01a2 : 0760 ; -- <0092> b = -1
    01a3 : c800 ; -- <0093> a = xor
    01a4 : 0338 ; -- <0093> "
    01a5 : 0601 ; -- <0094> b = 1
    01a6 : c800 ; -- <0095> y = a+b
    01a7 : 1700 ; -- <0095> "
    01a8 : c800 ; -- <0096> x = x+y
    01a9 : 1320 ; -- <0096> "
    01aa : e00f ; -- <0097> jmp :next
    01ab : 01ae ; -- <0097> "
-- :result0 -- = 0x01ac
-- temp does not fit; output a 0.
    01ac : 0007 ; -- <0100> a = g7
    01ad : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01ae
    01ae : 0006 ; -- <0104> a = g6
    01af : 1b50 ; -- <0105> g6 = a>>1
    01b0 : c800 ; -- <0106> i = i+j
    01b1 : 0b10 ; -- <0106> "
    01b2 : e00f ; -- <0107> jmp :again
    01b3 : 0196 ; -- <0107> "

-- :done -- = 0x01b4
    01b4 : 0407 ; -- <0110> b = g7
    01b5 : 0004 ; -- <0111> a = x
    01b6 : 1c08 ; -- <0112> pop g7 -- rtn
    01b7 : 1808 ; -- <0112> pop g6 -- "
    01b8 : 1408 ; -- <0112> pop y -- "
    01b9 : 1008 ; -- <0112> pop x -- "
    01ba : 0c08 ; -- <0112> pop j -- "
    01bb : 0808 ; -- <0112> pop i -- "
    01bc : fc00 ; -- <0112> swapra = nop

-- :zero -- = 0x01bd
    01bd : 0600 ; -- <0115> b = 0
    01be : 1c08 ; -- <0116> pop g7 -- rtn
    01bf : 1808 ; -- <0116> pop g6 -- "
    01c0 : 1408 ; -- <0116> pop y -- "
    01c1 : 1008 ; -- <0116> pop x -- "
    01c2 : 0c08 ; -- <0116> pop j -- "
    01c3 : 0808 ; -- <0116> pop i -- "
    01c4 : fc00 ; -- <0116> swapra = nop
    01c5 : 1c08 ; -- <0117> pop g7 -- end_func
    01c6 : 1808 ; -- <0117> pop g6 -- "
    01c7 : 1408 ; -- <0117> pop y -- "
    01c8 : 1008 ; -- <0117> pop x -- "
    01c9 : 0c08 ; -- <0117> pop j -- "
    01ca : 0808 ; -- <0117> pop i -- "
    01cb : fc00 ; -- <0117> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01cc
    01cc : 0601 ; -- <0005> b = 1
    01cd : e003 ; -- <0006> br and0z :pick_byte_even
    01ce : 01d7 ; -- <0006> "
    01cf : 0350 ; -- <0007> a = a>>1
    01d0 : 0404 ; -- <0008> b = x
    01d1 : c800 ; -- <0009> fetch a from a+b
    01d2 : d300 ; -- <0009> "
    01d3 : 03b0 ; -- <0009> "
    01d4 : 0353 ; -- <0010> a = a>>4
    01d5 : 0353 ; -- <0011> a = a>>4
    01d6 : fc00 ; -- <0012> swapra = nop
-- :pick_byte_even -- = 0x01d7
    01d7 : 0350 ; -- <0014> a = a>>1
    01d8 : 0404 ; -- <0015> b = x
    01d9 : c800 ; -- <0016> fetch a from a+b
    01da : d300 ; -- <0016> "
    01db : 03b0 ; -- <0016> "
    01dc : 06ff ; -- <0017> b = 0xff
    01dd : c800 ; -- <0018> a = and
    01de : 0330 ; -- <0018> "
    01df : fc00 ; -- <0019> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01e0
    01e0 : 2002 ; -- <0027> push i -- func find_in_fetch
    01e1 : 2003 ; -- <0027> push j -- "
    01e2 : 2005 ; -- <0027> push y -- "
    01e3 : 203e ; -- <0027> push rtna -- "
    01e4 : 1400 ; -- <0028> y = a
    01e5 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01e6
    01e6 : e001 ; -- <0031> br iz :fail
    01e7 : 01f6 ; -- <0031> "
    01e8 : 0b10 ; -- <0032> i = ad1
    01e9 : 0002 ; -- <0033> a = i
    01ea : fba0 ; -- <0034> call :fetch_byte
    01eb : 01cc ; -- <0034> "
    01ec : fc00 ; -- <0034> "
    01ed : 0405 ; -- <0035> b = y
    01ee : e407 ; -- <0036> bn eq :again
    01ef : 01e6 ; -- <0036> "
-- :found -- = 0x01f0
    01f0 : 0002 ; -- <0038> a = i
    01f1 : f808 ; -- <0039> pop rtna -- rtn
    01f2 : 1408 ; -- <0039> pop y -- "
    01f3 : 0c08 ; -- <0039> pop j -- "
    01f4 : 0808 ; -- <0039> pop i -- "
    01f5 : fc00 ; -- <0039> swapra = nop
-- :fail -- = 0x01f6
    01f6 : 0360 ; -- <0041> a = -1
    01f7 : f808 ; -- <0042> pop rtna -- end_func
    01f8 : 1408 ; -- <0042> pop y -- "
    01f9 : 0c08 ; -- <0042> pop j -- "
    01fa : 0808 ; -- <0042> pop i -- "
    01fb : fc00 ; -- <0042> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x01fc
    01fc : 2004 ; -- <0002> push x -- func spinwait
    01fd : 2005 ; -- <0002> push y -- "
--patch
--rtn
    01fe : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x01ff
    01ff : 13a0 ; -- <0007> x = 16666
    0200 : 411a ; -- <0007> "
    0201 : 1760 ; -- <0008> y = -1
    0202 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0203
-- use of the ad2 name overrides auto-nop here.
    0203 : 1320 ; -- <0012> x = ad2
    0204 : e402 ; -- <0013> bn xz :spinwait_inner
    0205 : 0203 ; -- <0013> "
    0206 : c800 ; -- <0014> a = a+b
    0207 : 0300 ; -- <0014> "
    0208 : e400 ; -- <0015> bn az :spinwait_outer
    0209 : 01ff ; -- <0015> "
    020a : 1408 ; -- <0016> pop y -- end_func
    020b : 1008 ; -- <0016> pop x -- "
    020c : fc00 ; -- <0016> swapra = nop


-- :plan_name_stop -- = 0x020d
-- "STP\x0"
    020d : 5453 ; -- <0002> TS
    020e : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x020f
    020f : 203e ; -- <0004> push rtna -- func init_plan_stop
-- set up the stop plan.
    0210 : fba0 ; -- <0006> call :clear_ign_history
    0211 : 03a5 ; -- <0006> "
    0212 : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    0213 : 4e00 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    0214 : 5260 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 96
    0215 : 47a0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    0216 : 025b ; -- <0008> "
    0217 : 4e00 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0218 : 5262 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 98
    0219 : 47a0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    021a : 36b0 ; -- <0009> "
    021b : 73a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    021c : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    021d : 4e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    021e : 526e ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 110
    021f : 4600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    0220 : 7600 ; -- <0016> puff_len_us = 0

-- memorize state.
    0221 : 4e00 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    0222 : 5266 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 102
    0223 : 47a0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    0224 : 020d ; -- <0019> "
    0225 : 4e00 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    0226 : 5268 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 104
    0227 : 47a0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    0228 : 0234 ; -- <0020> "
    0229 : 4e00 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    022a : 526a ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 106
    022b : 47a0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    022c : 0238 ; -- <0021> "
    022d : 4e00 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    022e : 526c ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 108
    022f : 47a0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0230 : 0233 ; -- <0022> "
    0231 : f808 ; -- <0023> pop rtna -- end_func
    0232 : fc00 ; -- <0023> swapra = nop

-- ######## func destroy_plan_stop -- = 0x0233
    0233 : fc00 ; -- <0026> swapra = nop

-- ######## func puff_len_stop -- = 0x0234
    0234 : 4e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0235 : 526e ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 110
    0236 : 4600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    0237 : fc00 ; -- <0030> swapra = nop

-- ######## func leave_stop -- = 0x0238
    0238 : 203e ; -- <0032> push rtna -- func leave_stop
-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    0239 : 001a ; -- <0035> a = power_duty
    023a : 0680 ; -- <0036> b = $ign_switch_off_mask
    023b : e403 ; -- <0037> bn and0z :stay
    023c : 024a ; -- <0037> "
    023d : 4e00 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    023e : 525e ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 94
    023f : 0011 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0240 : 0012 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0241 : 0608 ; -- <0039> b = ($ign_history_len / 2)
    0242 : e006 ; -- <0040> br gt :stay
    0243 : 024a ; -- <0040> "
    0244 : fba0 ; -- <0041> call :destroy_plan_stop
    0245 : 0233 ; -- <0041> "
    0246 : fc00 ; -- <0041> "
    0247 : fba0 ; -- <0042> call :init_plan_crank
    0248 : 024e ; -- <0042> "
    0249 : fc00 ; -- <0042> "
-- :stay -- = 0x024a
    024a : f808 ; -- <0044> pop rtna -- end_func
    024b : fc00 ; -- <0044> swapra = nop


-- :plan_name_crank -- = 0x024c
-- "CR\x0"
    024c : 5243 ; -- <0002> RC
    024d : 0000 ; -- <0002>   

-- ######## func init_plan_crank -- = 0x024e
-- set up the crank plan.
    024e : 4e00 ; -- <0006> ram $ram_puff_count = 0 -- av_ad_hi = 0
    024f : 5270 ; -- <0006> ram $ram_puff_count = 0 -- av_ad_lo = 112
    0250 : 4600 ; -- <0006> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0251 : 4e00 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    0252 : 5260 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 96
    0253 : 4657 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    0254 : 4e00 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0255 : 5262 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 98
    0256 : 47a0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    0257 : 36b0 ; -- <0009> "
    0258 : 73a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    0259 : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    025a : 4e00 ; -- <0014> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    025b : 526e ; -- <0014> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 110
    025c : 47a0 ; -- <0014> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 5000
    025d : 1388 ; -- <0014> "
    025e : 77a0 ; -- <0015> puff_len_us = $crank_min_puff_len_us
    025f : 1388 ; -- <0015> "

-- memorize state.
    0260 : 4e00 ; -- <0018> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    0261 : 5266 ; -- <0018> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 102
    0262 : 47a0 ; -- <0018> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    0263 : 024c ; -- <0018> "
    0264 : 4e00 ; -- <0019> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    0265 : 5268 ; -- <0019> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 104
    0266 : 47a0 ; -- <0019> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    0267 : 0272 ; -- <0019> "
    0268 : 4e00 ; -- <0020> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    0269 : 526a ; -- <0020> ram $ram_transition_func = :leave_crank -- av_ad_lo = 106
    026a : 47a0 ; -- <0020> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    026b : 0290 ; -- <0020> "
    026c : 4e00 ; -- <0021> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    026d : 526c ; -- <0021> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 108
    026e : 47a0 ; -- <0021> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    026f : 0271 ; -- <0021> "
    0270 : fc00 ; -- <0022> swapra = nop

-- ######## func destroy_plan_crank -- = 0x0271
    0271 : fc00 ; -- <0025> swapra = nop

-- ######## func puff_len_crank -- = 0x0272
    0272 : 203e ; -- <0027> push rtna -- func puff_len_crank
    0273 : 4e00 ; -- <0028> ram a = $ram_puff_count -- av_ad_hi = 0
    0274 : 5270 ; -- <0028> ram a = $ram_puff_count -- av_ad_lo = 112
    0275 : 0011 ; -- <0028> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0276 : 0012 ; -- <0028> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0277 : 060a ; -- <0029> b = $crank_max_puffs
    0278 : e006 ; -- <0030> br gt :puff_limit
    0279 : 0287 ; -- <0030> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    027a : 07a0 ; -- <0032> b = $crank_incr_us_per_puff
    027b : 05dc ; -- <0032> "
    027c : fba0 ; -- <0033> call :multiply
    027d : 0160 ; -- <0033> "
    027e : fc00 ; -- <0033> "
    027f : 07a0 ; -- <0034> b = $crank_min_puff_len_us
    0280 : 1388 ; -- <0034> "
    0281 : 4e00 ; -- <0035> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    0282 : 526e ; -- <0035> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 110
    0283 : c800 ; -- <0035> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    0284 : 4700 ; -- <0035> "
    0285 : e00f ; -- <0036> jmp :done
    0286 : 028e ; -- <0036> "
-- :puff_limit -- = 0x0287
-- prevent the puff counter from going higher & eventually rolling over.
    0287 : 4e00 ; -- <0039> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    0288 : 5270 ; -- <0039> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 112
    0289 : 460a ; -- <0039> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 10
-- accept max puff len.
    028a : 4e00 ; -- <0041> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    028b : 526e ; -- <0041> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 110
    028c : 47a0 ; -- <0041> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    028d : 4e20 ; -- <0041> "
-- :done -- = 0x028e
    028e : f808 ; -- <0043> pop rtna -- end_func
    028f : fc00 ; -- <0043> swapra = nop

-- ######## func leave_crank -- = 0x0290
    0290 : 203e ; -- <0045> push rtna -- func leave_crank
    0291 : fba0 ; -- <0046> call :check_engine_stop
    0292 : 060c ; -- <0046> "
    0293 : fc00 ; -- <0046> "
    0294 : e400 ; -- <0047> bn az :done
    0295 : 02aa ; -- <0047> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    0296 : 4e00 ; -- <0050> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0297 : 525c ; -- <0050> ram a = $ram_rpm_valid -- av_ad_lo = 92
    0298 : 0011 ; -- <0050> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0299 : 0012 ; -- <0050> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    029a : e000 ; -- <0051> br az :stay
    029b : 02aa ; -- <0051> "
    029c : 4e00 ; -- <0052> ram a = $ram_avg_rpm -- av_ad_hi = 0
    029d : 525a ; -- <0052> ram a = $ram_avg_rpm -- av_ad_lo = 90
    029e : 0011 ; -- <0052> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    029f : 0012 ; -- <0052> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    02a0 : 07a0 ; -- <0053> b = $crank_success_rpm
    02a1 : 0258 ; -- <0053> "
    02a2 : e005 ; -- <0054> br lt :stay
    02a3 : 02aa ; -- <0054> "
    02a4 : fba0 ; -- <0055> call :destroy_plan_crank
    02a5 : 0271 ; -- <0055> "
    02a6 : fc00 ; -- <0055> "
    02a7 : fba0 ; -- <0056> call :init_plan_warmup
    02a8 : 02ae ; -- <0056> "
    02a9 : fc00 ; -- <0056> "
-- :stay -- = 0x02aa

-- :done -- = 0x02aa
    02aa : f808 ; -- <0060> pop rtna -- end_func
    02ab : fc00 ; -- <0060> swapra = nop


-- :plan_name_warmup -- = 0x02ac
-- "WM\x0"
    02ac : 4d57 ; -- <0002> MW
    02ad : 0000 ; -- <0002>   

-- ######## func init_plan_warmup -- = 0x02ae
-- set up the warmup plan.

-- memorize state.
    02ae : 4e00 ; -- <0008> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    02af : 5266 ; -- <0008> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 102
    02b0 : 47a0 ; -- <0008> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    02b1 : 02ac ; -- <0008> "
    02b2 : 4e00 ; -- <0009> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    02b3 : 5268 ; -- <0009> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 104
    02b4 : 47a0 ; -- <0009> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    02b5 : 02c0 ; -- <0009> "
    02b6 : 4e00 ; -- <0010> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    02b7 : 526a ; -- <0010> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 106
    02b8 : 47a0 ; -- <0010> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    02b9 : 02c5 ; -- <0010> "
    02ba : 4e00 ; -- <0011> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    02bb : 526c ; -- <0011> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 108
    02bc : 47a0 ; -- <0011> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    02bd : 02bf ; -- <0011> "
    02be : fc00 ; -- <0012> swapra = nop

-- ######## func destroy_plan_warmup -- = 0x02bf
    02bf : fc00 ; -- <0015> swapra = nop

-- ######## func puff_len_warmup -- = 0x02c0
    02c0 : 4e00 ; -- <0018> ram $ram_next_puff_len_us = 5000 -- av_ad_hi = 0
    02c1 : 526e ; -- <0018> ram $ram_next_puff_len_us = 5000 -- av_ad_lo = 110
    02c2 : 47a0 ; -- <0018> ram $ram_next_puff_len_us = 5000 -- av_write_data = 5000
    02c3 : 1388 ; -- <0018> "
--patch: add the dial setting to this, for testing.
    02c4 : fc00 ; -- <0020> swapra = nop

-- ######## func leave_warmup -- = 0x02c5
    02c5 : 203e ; -- <0022> push rtna -- func leave_warmup
    02c6 : fba0 ; -- <0023> call :check_engine_stop
    02c7 : 060c ; -- <0023> "
    02c8 : fc00 ; -- <0023> "
    02c9 : e400 ; -- <0024> bn az :done
    02ca : 02e0 ; -- <0024> "

-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    02cb : 0202 ; -- <0028> a = $anmux_engine_block_temp

    02cc : 0351 ; -- <0029> a = a<<1
    02cd : 0608 ; -- <0029> b = 8
    02ce : 4e00 ; -- <0029> av_ad_hi = 0
    02cf : 5300 ; -- <0029> av_ad_lo = ad0
    02d0 : 0411 ; -- <0029> b = av_write_data
    02d1 : 0412 ; -- <0029> b = av_read_data

    02d2 : 03a0 ; -- <0030> a = $temp_ceiling_adc
    02d3 : 0ff0 ; -- <0030> "
    02d4 : e005 ; -- <0031> br lt :stay
    02d5 : 02e0 ; -- <0031> "
    02d6 : 03a0 ; -- <0032> a = $warmup_success_temp_adc
    02d7 : 04c0 ; -- <0032> "
    02d8 : e006 ; -- <0033> br gt :stay
    02d9 : 02e0 ; -- <0033> "
    02da : fba0 ; -- <0034> call :destroy_plan_warmup
    02db : 02bf ; -- <0034> "
    02dc : fc00 ; -- <0034> "
    02dd : fba0 ; -- <0035> call :init_plan_run
    02de : 02e4 ; -- <0035> "
    02df : fc00 ; -- <0035> "
-- :stay -- = 0x02e0

-- :done -- = 0x02e0
    02e0 : f808 ; -- <0039> pop rtna -- end_func
    02e1 : fc00 ; -- <0039> swapra = nop


-- :plan_name_run -- = 0x02e2
-- "RN\x0"
    02e2 : 4e52 ; -- <0002> NR
    02e3 : 0000 ; -- <0002>   

-- ######## func init_plan_run -- = 0x02e4
-- set up the run plan.

-- memorize state.
    02e4 : 4e00 ; -- <0008> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    02e5 : 5266 ; -- <0008> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 102
    02e6 : 47a0 ; -- <0008> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    02e7 : 02e2 ; -- <0008> "
    02e8 : 4e00 ; -- <0009> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    02e9 : 5268 ; -- <0009> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 104
    02ea : 47a0 ; -- <0009> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    02eb : 02fb ; -- <0009> "
    02ec : 4e00 ; -- <0010> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    02ed : 526a ; -- <0010> ram $ram_transition_func = :leave_run -- av_ad_lo = 106
    02ee : 47a0 ; -- <0010> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    02ef : 0300 ; -- <0010> "
    02f0 : 4e00 ; -- <0011> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    02f1 : 526c ; -- <0011> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 108
    02f2 : 47a0 ; -- <0011> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    02f3 : 02f5 ; -- <0011> "
    02f4 : fc00 ; -- <0012> swapra = nop

-- ######## func destroy_plan_run -- = 0x02f5
    02f5 : 203e ; -- <0014> push rtna -- func destroy_plan_run
    02f6 : fba0 ; -- <0015> call :clear_ign_history
    02f7 : 03a5 ; -- <0015> "
    02f8 : fc00 ; -- <0015> "
    02f9 : f808 ; -- <0016> pop rtna -- end_func
    02fa : fc00 ; -- <0016> swapra = nop

-- ######## func puff_len_run -- = 0x02fb
    02fb : 4e00 ; -- <0019> ram $ram_next_puff_len_us = 3000 -- av_ad_hi = 0
    02fc : 526e ; -- <0019> ram $ram_next_puff_len_us = 3000 -- av_ad_lo = 110
    02fd : 47a0 ; -- <0019> ram $ram_next_puff_len_us = 3000 -- av_write_data = 3000
    02fe : 0bb8 ; -- <0019> "
    02ff : fc00 ; -- <0020> swapra = nop

-- ######## func leave_run -- = 0x0300
    0300 : 203e ; -- <0022> push rtna -- func leave_run
    0301 : fba0 ; -- <0023> call :check_engine_stop
    0302 : 060c ; -- <0023> "
    0303 : fc00 ; -- <0023> "
    0304 : f808 ; -- <0024> pop rtna -- end_func
    0305 : fc00 ; -- <0024> swapra = nop



-- #########################################################################
-- :main -- = 0x0306
    0306 : 03a0 ; -- <0203> a = :boot_msg
    0307 : 007b ; -- <0203> "
    0308 : fba0 ; -- <0204> call :print_nt
    0309 : 013f ; -- <0204> "
    030a : fc00 ; -- <0204> "

-- clear the first 64k of RAM.
    030b : 4e00 ; -- <0207> av_ad_hi = 0
    030c : 0200 ; -- <0208> a = 0
    030d : 0602 ; -- <0209> b = 2
-- :clear_next_word -- = 0x030e
    030e : 5000 ; -- <0211> av_ad_lo = a
    030f : 4600 ; -- <0212> av_write_data = 0
    0310 : 0300 ; -- <0213> a = ad0
    0311 : e400 ; -- <0214> bn az :clear_next_word
    0312 : 030e ; -- <0214> "

-- init fuel injection.
    0313 : fba0 ; -- <0217> call :init_plan_stop
    0314 : 020f ; -- <0217> "
    0315 : fc00 ; -- <0217> "

-- power up FTDI USB board, and init any other special board control functions.
    0316 : 6280 ; -- <0220> board_ctrl = $ftdi_power_mask
    0317 : fba0 ; -- <0221> call :postpone_comm_restart
    0318 : 0581 ; -- <0221> "
    0319 : fc00 ; -- <0221> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    031a : 6a00 ; -- <0228> power_duty = $power_duty_closing
    031b : 001a ; -- <0229> a = power_duty
    031c : 06c0 ; -- <0230> b = ($power_lost_mask | $ign_switch_off_mask)
    031d : e003 ; -- <0231> br and0z :skip_power_lost
    031e : 0324 ; -- <0231> "
    031f : 6a32 ; -- <0232> power_duty = $power_duty_opening
    0320 : 5fa0 ; -- <0233> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    0321 : fffb ; -- <0233> "
    0322 : e00f ; -- <0233> error_halt_code $err_power_lost_at_boot
    0323 : 0322 ; -- <0233> "
-- :skip_power_lost -- = 0x0324
    0324 : 4e00 ; -- <0235> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0325 : 5218 ; -- <0235> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 24
    0326 : 4760 ; -- <0235> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0327 : 4e00 ; -- <0236> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    0328 : 521a ; -- <0236> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 26
    0329 : 4602 ; -- <0236> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    032a : 2ba0 ; -- <0239> soft_event = $event_controller_reset_mask
    032b : 8000 ; -- <0239> "
    032c : 2a00 ; -- <0240> soft_event = 0
    032d : 37a0 ; -- <0241> mstimer0 = 1000
    032e : 03e8 ; -- <0241> "
    032f : 3e14 ; -- <0242> mstimer2 = $plan_tick_ms
    0330 : e00f ; -- <0243> jmp :poll_events
    0331 : 007e ; -- <0243> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x0332
    0332 : 007e ; -- <0248> ([label :poll_events])
    0333 : 04e1 ; -- <0249> ([label :power_lost_handler])
    0334 : 0347 ; -- <0250> ([label :ign_capture_handler])
    0335 : 03be ; -- <0251> ([label :ign_capture_timeout_handler])
    0336 : 0510 ; -- <0252> ([label :puff1_done_handler])
    0337 : 03c3 ; -- <0253> ([label :ustimer0_handler])
    0338 : 03c5 ; -- <0254> ([label :spi_done_handler])
    0339 : 0406 ; -- <0255> ([label :mstimer0_handler])
    033a : 0431 ; -- <0256> ([label :mstimer1_handler])
    033b : 044f ; -- <0257> ([label :mstimer2_handler])
    033c : 045c ; -- <0258> ([label :uart_rx_handler])
    033d : 046c ; -- <0259> ([label :uart_rx_overflow_handler])
    033e : 0472 ; -- <0260> ([label :uart_tx_overflow_handler])
    033f : 0478 ; -- <0261> ([label :key0_handler])
    0340 : 0482 ; -- <0262> ([label :key1_handler])
    0341 : 04f3 ; -- <0263> ([label :ign_switch_off_handler])
    0342 : 0506 ; -- <0264> ([label :ign_switch_on_handler])
    0343 : 048c ; -- <0265> ([label :softevent3_handler])
    0344 : 048e ; -- <0266> ([label :softevent2_handler])
    0345 : 0490 ; -- <0267> ([label :softevent1_handler])
    0346 : 0492 ; -- <0268> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x0347
-- discard outlier time.
    0347 : 181b ; -- <0274> g6 = ign_capture_jf
    0348 : 4e00 ; -- <0275> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    0349 : 5260 ; -- <0275> ram b = $ram_ign_fastest_jf -- av_ad_lo = 96
    034a : 0411 ; -- <0275> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    034b : 0412 ; -- <0275> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle
    034c : 0006 ; -- <0276> a = g6
    034d : e006 ; -- <0277> br gt :fastest_ok
    034e : 0350 ; -- <0277> "
    034f : 1a00 ; -- <0278> g6 = 0
-- :fastest_ok -- = 0x0350
    0350 : 4e00 ; -- <0280> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    0351 : 5262 ; -- <0280> ram b = $ram_ign_slowest_jf -- av_ad_lo = 98
    0352 : 0411 ; -- <0280> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    0353 : 0412 ; -- <0280> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle
    0354 : 0006 ; -- <0281> a = g6
    0355 : e005 ; -- <0282> br lt :slowest_ok
    0356 : 0358 ; -- <0282> "
    0357 : 1a00 ; -- <0283> g6 = 0
-- :slowest_ok -- = 0x0358

-- increment buffer index and memorize time.
    0358 : 4e00 ; -- <0287> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    0359 : 5236 ; -- <0287> ram a = $ram_ign_history_idx -- av_ad_lo = 54
    035a : 0011 ; -- <0287> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    035b : 0012 ; -- <0287> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    035c : 0601 ; -- <0288> b = 1
    035d : c800 ; -- <0289> a = a+b
    035e : 0300 ; -- <0289> "
    035f : 060f ; -- <0290> b = $ign_history_idx_mask
    0360 : c800 ; -- <0291> a = and
    0361 : 0330 ; -- <0291> "
    0362 : 4e00 ; -- <0292> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    0363 : 5236 ; -- <0292> ram $ram_ign_history_idx = a -- av_ad_lo = 54
    0364 : 4400 ; -- <0292> ram $ram_ign_history_idx = a -- av_write_data = a
    0365 : 0406 ; -- <0293> b = g6

    0366 : 0351 ; -- <0294> a = a<<1
    0367 : 2001 ; -- <0294> push b -- push b
    0368 : 0638 ; -- <0294> b = 56
    0369 : 4e00 ; -- <0294> av_ad_hi = 0
    036a : 5300 ; -- <0294> av_ad_lo = ad0
    036b : 4408 ; -- <0294> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, i = index = loop count, g6 = count of invalid samples.
    036c : 1200 ; -- <0299> x = 0
    036d : 0a10 ; -- <0300> i = $ign_history_len
    036e : 0f60 ; -- <0301> j = -1
    036f : 1a00 ; -- <0302> g6 = 0
-- :next_avg -- = 0x0370
    0370 : c800 ; -- <0304> i = i+j
    0371 : 0b10 ; -- <0304> "
    0372 : 0002 ; -- <0305> a = i

    0373 : 0351 ; -- <0306> a = a<<1
    0374 : 0638 ; -- <0306> b = 56
    0375 : 4e00 ; -- <0306> av_ad_hi = 0
    0376 : 5300 ; -- <0306> av_ad_lo = ad0
    0377 : 0411 ; -- <0306> b = av_write_data
    0378 : 0412 ; -- <0306> b = av_read_data

    0379 : 0200 ; -- <0307> a = 0
    037a : e407 ; -- <0308> bn eq :valid_sample
    037b : 0382 ; -- <0308> "
    037c : 0006 ; -- <0309> a = g6
    037d : 0601 ; -- <0310> b = 1
    037e : c800 ; -- <0311> g6 = a+b
    037f : 1b00 ; -- <0311> "
    0380 : e00f ; -- <0312> jmp :sample_done
    0381 : 0388 ; -- <0312> "
-- :valid_sample -- = 0x0382
    0382 : 0208 ; -- <0314> a = ($ign_history_len / 2)
    0383 : c800 ; -- <0315> a = a+b
    0384 : 0300 ; -- <0315> "
    0385 : 1753 ; -- <0316> y = a>>$ign_history_idx_bits
    0386 : c800 ; -- <0317> x = x+y
    0387 : 1320 ; -- <0317> "
-- :sample_done -- = 0x0388
    0388 : e401 ; -- <0319> bn iz :next_avg
    0389 : 0370 ; -- <0319> "
    038a : 4e00 ; -- <0320> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    038b : 5258 ; -- <0320> ram $ram_ign_avg_jf = x -- av_ad_lo = 88
    038c : 4404 ; -- <0320> ram $ram_ign_avg_jf = x -- av_write_data = x
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.

    038d : 4e00 ; -- <0329> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    038e : 525e ; -- <0329> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 94
    038f : 4406 ; -- <0329> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
    0390 : 0006 ; -- <0330> a = g6
    0391 : 0604 ; -- <0331> b = ($ign_history_len / 4)
    0392 : e006 ; -- <0332> br gt :partial_history
    0393 : 03a0 ; -- <0332> "
-- convert jiffies b to new RPM estimate.
    0394 : 0004 ; -- <0334> a = x
    0395 : fba0 ; -- <0335> call :jf_to_rpm
    0396 : 0600 ; -- <0335> "
    0397 : fc00 ; -- <0335> "
    0398 : 4e00 ; -- <0336> ram $ram_avg_rpm = a -- av_ad_hi = 0
    0399 : 525a ; -- <0336> ram $ram_avg_rpm = a -- av_ad_lo = 90
    039a : 4400 ; -- <0336> ram $ram_avg_rpm = a -- av_write_data = a
    039b : 4e00 ; -- <0337> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    039c : 525c ; -- <0337> ram $ram_rpm_valid = 1 -- av_ad_lo = 92
    039d : 4601 ; -- <0337> ram $ram_rpm_valid = 1 -- av_write_data = 1
    039e : e00f ; -- <0338> jmp :done
    039f : 046a ; -- <0338> "
-- :partial_history -- = 0x03a0
    03a0 : 4e00 ; -- <0340> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    03a1 : 525c ; -- <0340> ram $ram_rpm_valid = 0 -- av_ad_lo = 92
    03a2 : 4600 ; -- <0340> ram $ram_rpm_valid = 0 -- av_write_data = 0

-- :done -- = 0x03a3
    03a3 : e00f ; -- <0343> end_event
    03a4 : 007e ; -- <0343> "

-- ######## func clear_ign_history -- = 0x03a5
    03a5 : 2002 ; -- <0345> push i -- func clear_ign_history
    03a6 : 2003 ; -- <0345> push j -- "
-- invalidate the RPM estimate.
    03a7 : 4e00 ; -- <0347> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    03a8 : 525c ; -- <0347> ram $ram_rpm_valid = 0 -- av_ad_lo = 92
    03a9 : 4600 ; -- <0347> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    03aa : 4e00 ; -- <0350> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    03ab : 525e ; -- <0350> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 94
    03ac : 4610 ; -- <0350> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    03ad : 0a10 ; -- <0351> i = $ign_history_len
    03ae : 0f60 ; -- <0352> j = -1
-- :next -- = 0x03af
    03af : 0002 ; -- <0354> a = i
    03b0 : 0600 ; -- <0355> b = 0

    03b1 : 0351 ; -- <0356> a = a<<1
    03b2 : 2001 ; -- <0356> push b -- push b
    03b3 : 0638 ; -- <0356> b = 56
    03b4 : 4e00 ; -- <0356> av_ad_hi = 0
    03b5 : 5300 ; -- <0356> av_ad_lo = ad0
    03b6 : 4408 ; -- <0356> pop av_write_data -- pop av_write_data

    03b7 : c800 ; -- <0357> i = i+j
    03b8 : 0b10 ; -- <0357> "
    03b9 : e401 ; -- <0358> bn iz :next
    03ba : 03af ; -- <0358> "
    03bb : 0c08 ; -- <0359> pop j -- end_func
    03bc : 0808 ; -- <0359> pop i -- "
    03bd : fc00 ; -- <0359> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x03be
-- it's been too long since the last ignition pulse detect.
    03be : fba0 ; -- <0363> call :clear_ign_history
    03bf : 03a5 ; -- <0363> "
    03c0 : fc00 ; -- <0363> "
    03c1 : e00f ; -- <0364> end_event
    03c2 : 007e ; -- <0364> "

-- ######## event ustimer0_handler -- = 0x03c3
    03c3 : e00f ; -- <0367> end_event
    03c4 : 007e ; -- <0367> "

-- ######## event spi_done_handler -- = 0x03c5
-- discard-counter in RAM.
    03c5 : 4e00 ; -- <0371> ram a = $ram_daq_discard_cnt -- av_ad_hi = 0
    03c6 : 5206 ; -- <0371> ram a = $ram_daq_discard_cnt -- av_ad_lo = 6
    03c7 : 0011 ; -- <0371> ram a = $ram_daq_discard_cnt -- a = av_write_data -- start read cycle
    03c8 : 0012 ; -- <0371> ram a = $ram_daq_discard_cnt -- a = av_read_data -- finish read cycle
    03c9 : e000 ; -- <0372> br az :report
    03ca : 03d7 ; -- <0372> "
    03cb : 0760 ; -- <0373> b = -1
    03cc : c800 ; -- <0374> a = a+b
    03cd : 0300 ; -- <0374> "
    03ce : 4e00 ; -- <0375> ram $ram_daq_discard_cnt = a -- av_ad_hi = 0
    03cf : 5206 ; -- <0375> ram $ram_daq_discard_cnt = a -- av_ad_lo = 6
    03d0 : 4400 ; -- <0375> ram $ram_daq_discard_cnt = a -- av_write_data = a
    03d1 : 0207 ; -- <0376> a = $anmux_adc_channel
    03d2 : fba0 ; -- <0377> call :begin_adc_conversion
    03d3 : 04da ; -- <0377> "
    03d4 : fc00 ; -- <0377> "
    03d5 : e00f ; -- <0378> event_return
    03d6 : 007e ; -- <0378> "

-- report ADC reading.
-- :report -- = 0x03d7
    03d7 : 0010 ; -- <0382> a = spi_data
    03d8 : fba0 ; -- <0383> call :put4x
    03d9 : 00b3 ; -- <0383> "
    03da : fc00 ; -- <0383> "

-- memorize ADC reading.
    03db : fba0 ; -- <0386> call :anmux_get_chn
    03dc : 00a6 ; -- <0386> "
    03dd : fc00 ; -- <0386> "
    03de : 0410 ; -- <0387> b = spi_data

    03df : 0351 ; -- <0388> a = a<<1
    03e0 : 2001 ; -- <0388> push b -- push b
    03e1 : 0608 ; -- <0388> b = 8
    03e2 : 4e00 ; -- <0388> av_ad_hi = 0
    03e3 : 5300 ; -- <0388> av_ad_lo = ad0
    03e4 : 4408 ; -- <0388> pop av_write_data -- pop av_write_data


-- decrement anmux channel & start waiting again.
    03e5 : fba0 ; -- <0391> call :anmux_get_chn
    03e6 : 00a6 ; -- <0391> "
    03e7 : fc00 ; -- <0391> "
    03e8 : e000 ; -- <0392> br az :all_done
    03e9 : 03f3 ; -- <0392> "
    03ea : 0760 ; -- <0393> b = -1
    03eb : c800 ; -- <0394> a = a+b
    03ec : 0300 ; -- <0394> "
    03ed : fba0 ; -- <0395> call :anmux_set_chn
    03ee : 00a2 ; -- <0395> "
    03ef : fc00 ; -- <0395> "
    03f0 : 3a05 ; -- <0396> mstimer1 = $anmux_settle_ms
    03f1 : e00f ; -- <0397> event_return
    03f2 : 007e ; -- <0397> "

-- end of daq pass.
-- :all_done -- = 0x03f3
    03f3 : fba0 ; -- <0401> call :report_plan
    03f4 : 05f1 ; -- <0401> "
    03f5 : fc00 ; -- <0401> "
    03f6 : fba0 ; -- <0402> call :report_text_flags
    03f7 : 05c3 ; -- <0402> "
    03f8 : fc00 ; -- <0402> "
    03f9 : 020d ; -- <0403> a = 13 -- puteol
    03fa : fba0 ; -- <0403> puteol
    03fb : 008b ; -- <0403> "
    03fc : fc00 ; -- <0403> "
    03fd : 020a ; -- <0403> a = 10 -- puteol
    03fe : fba0 ; -- <0403> puteol
    03ff : 008b ; -- <0403> "
    0400 : fc00 ; -- <0403> "
    0401 : 4e00 ; -- <0404> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    0402 : 5222 ; -- <0404> ram $ram_dial_setting = spi_data -- av_ad_lo = 34
    0403 : 4410 ; -- <0404> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    0404 : e00f ; -- <0405> end_event
    0405 : 007e ; -- <0405> "

-- ######## event mstimer0_handler -- = 0x0406
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    0406 : 37a0 ; -- <0411> mstimer0 = 1000
    0407 : 03e8 ; -- <0411> "

-- realtime counters in RAM.
    0408 : 4e00 ; -- <0414> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    0409 : 521e ; -- <0414> ram a = $ram_seconds_cnt -- av_ad_lo = 30
    040a : 0011 ; -- <0414> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    040b : 0012 ; -- <0414> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    040c : 0601 ; -- <0415> b = 1
    040d : c800 ; -- <0416> a = a+b
    040e : 0300 ; -- <0416> "
    040f : 063c ; -- <0417> b = 60
    0410 : e407 ; -- <0418> bn eq :same_minute
    0411 : 0423 ; -- <0418> "
    0412 : 4e00 ; -- <0419> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    0413 : 521e ; -- <0419> ram $ram_seconds_cnt = 0 -- av_ad_lo = 30
    0414 : 4600 ; -- <0419> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    0415 : 4e00 ; -- <0420> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0416 : 521c ; -- <0420> ram a = $ram_minutes_cnt -- av_ad_lo = 28
    0417 : 0011 ; -- <0420> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0418 : 0012 ; -- <0420> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0419 : 0601 ; -- <0421> b = 1
    041a : 4e00 ; -- <0422> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    041b : 521c ; -- <0422> ram $ram_minutes_cnt = a+b -- av_ad_lo = 28
    041c : c800 ; -- <0422> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    041d : 4700 ; -- <0422> "
    041e : fba0 ; -- <0423> call :minute_events
    041f : 051f ; -- <0423> "
    0420 : fc00 ; -- <0423> "
    0421 : e00f ; -- <0424> jmp :minutes_done
    0422 : 0426 ; -- <0424> "
-- :same_minute -- = 0x0423
    0423 : 4e00 ; -- <0426> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    0424 : 521e ; -- <0426> ram $ram_seconds_cnt = a -- av_ad_lo = 30
    0425 : 4400 ; -- <0426> ram $ram_seconds_cnt = a -- av_write_data = a
-- :minutes_done -- = 0x0426

    0426 : fba0 ; -- <0429> call :check_power_relay
    0427 : 0527 ; -- <0429> "
    0428 : fc00 ; -- <0429> "
    0429 : fba0 ; -- <0430> call :check_communication
    042a : 0556 ; -- <0430> "
    042b : fc00 ; -- <0430> "
    042c : fba0 ; -- <0431> call :start_daq_pass
    042d : 049b ; -- <0431> "
    042e : fc00 ; -- <0431> "
    042f : e00f ; -- <0432> end_event
    0430 : 007e ; -- <0432> "

-- ######## event mstimer1_handler -- = 0x0431
-- start a reading from the current anmux channel.
    0431 : 4e00 ; -- <0436> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_hi = 0
    0432 : 5206 ; -- <0436> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_lo = 6
    0433 : 4602 ; -- <0436> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_write_data = 2
    0434 : 0220 ; -- <0437> a = 32 -- putasc " "
    0435 : fba0 ; -- <0437> putasc " "
    0436 : 008b ; -- <0437> "
    0437 : fc00 ; -- <0437> "
    0438 : 0273 ; -- <0438> a = 115 -- putasc "s"
    0439 : fba0 ; -- <0438> putasc "s"
    043a : 008b ; -- <0438> "
    043b : fc00 ; -- <0438> "
    043c : fba0 ; -- <0439> call :anmux_get_chn
    043d : 00a6 ; -- <0439> "
    043e : fc00 ; -- <0439> "
    043f : 0630 ; -- <0440> b = 48 -- asc b = "0"
    0440 : c800 ; -- <0441> a = a+b -- putchar a+b
    0441 : 0300 ; -- <0441> "
    0442 : fba0 ; -- <0441> putchar a+b
    0443 : 008b ; -- <0441> "
    0444 : fc00 ; -- <0441> "
    0445 : 023d ; -- <0442> a = 61 -- putasc "="
    0446 : fba0 ; -- <0442> putasc "="
    0447 : 008b ; -- <0442> "
    0448 : fc00 ; -- <0442> "
    0449 : 0207 ; -- <0443> a = $anmux_adc_channel
    044a : fba0 ; -- <0444> call :begin_adc_conversion
    044b : 04da ; -- <0444> "
    044c : fc00 ; -- <0444> "
    044d : e00f ; -- <0445> end_event
    044e : 007e ; -- <0445> "

-- ######## event mstimer2_handler -- = 0x044f
-- restart timer
    044f : 3e14 ; -- <0449> mstimer2 = $plan_tick_ms

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    0450 : 4e00 ; -- <0454> ram rtna = $ram_transition_func -- av_ad_hi = 0
    0451 : 526a ; -- <0454> ram rtna = $ram_transition_func -- av_ad_lo = 106
    0452 : f811 ; -- <0454> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    0453 : f812 ; -- <0454> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    0454 : fc00 ; -- <0455> swapra = nop
-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    0455 : 4e00 ; -- <0458> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    0456 : 5268 ; -- <0458> ram rtna = $ram_puff_len_func -- av_ad_lo = 104
    0457 : f811 ; -- <0458> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    0458 : f812 ; -- <0458> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    0459 : fc00 ; -- <0459> swapra = nop
    045a : e00f ; -- <0460> end_event
    045b : 007e ; -- <0460> "

-- ######## event uart_rx_handler -- = 0x045c
-- :again -- = 0x045c
    045c : fba0 ; -- <0464> pollchar
    045d : 009a ; -- <0464> "
    045e : fc00 ; -- <0464> "
    045f : 0760 ; -- <0465> b = -1
    0460 : e007 ; -- <0466> br eq :done
    0461 : 03a3 ; -- <0466> "
    0462 : 060a ; -- <0467> b = 10
    0463 : e407 ; -- <0468> bn eq :skip_lf
    0464 : 0468 ; -- <0468> "
    0465 : fba0 ; -- <0469> call :postpone_comm_restart
    0466 : 0581 ; -- <0469> "
    0467 : fc00 ; -- <0469> "
-- :skip_lf -- = 0x0468
    0468 : e00f ; -- <0471> jmp :again
    0469 : 045c ; -- <0471> "
-- :done -- = 0x046a
    046a : e00f ; -- <0473> end_event
    046b : 007e ; -- <0473> "

-- ######## event uart_rx_overflow_handler -- = 0x046c
    046c : 5fa0 ; -- <0476> error_halt_code $err_rx_overflow -- leds = 0xfffe
    046d : fffe ; -- <0476> "
    046e : e00f ; -- <0476> error_halt_code $err_rx_overflow
    046f : 046e ; -- <0476> "
    0470 : e00f ; -- <0477> end_event
    0471 : 007e ; -- <0477> "

-- ######## event uart_tx_overflow_handler -- = 0x0472
    0472 : 5fa0 ; -- <0480> error_halt_code $err_tx_overflow -- leds = 0xfffd
    0473 : fffd ; -- <0480> "
    0474 : e00f ; -- <0480> error_halt_code $err_tx_overflow
    0475 : 0474 ; -- <0480> "
    0476 : e00f ; -- <0481> end_event
    0477 : 007e ; -- <0481> "

-- ######## event key0_handler -- = 0x0478
    0478 : 026b ; -- <0484> a = 107 -- putasc "k"
    0479 : fba0 ; -- <0484> putasc "k"
    047a : 008b ; -- <0484> "
    047b : fc00 ; -- <0484> "
    047c : 0230 ; -- <0485> a = 48 -- putasc "0"
    047d : fba0 ; -- <0485> putasc "0"
    047e : 008b ; -- <0485> "
    047f : fc00 ; -- <0485> "
    0480 : e00f ; -- <0486> end_event
    0481 : 007e ; -- <0486> "

-- ######## event key1_handler -- = 0x0482
    0482 : 026b ; -- <0489> a = 107 -- putasc "k"
    0483 : fba0 ; -- <0489> putasc "k"
    0484 : 008b ; -- <0489> "
    0485 : fc00 ; -- <0489> "
    0486 : 0231 ; -- <0490> a = 49 -- putasc "1"
    0487 : fba0 ; -- <0490> putasc "1"
    0488 : 008b ; -- <0490> "
    0489 : fc00 ; -- <0490> "
    048a : e00f ; -- <0491> end_event
    048b : 007e ; -- <0491> "

-- ######## event softevent3_handler -- = 0x048c
    048c : e00f ; -- <0494> end_event
    048d : 007e ; -- <0494> "

-- ######## event softevent2_handler -- = 0x048e
    048e : e00f ; -- <0497> end_event
    048f : 007e ; -- <0497> "

-- ######## event softevent1_handler -- = 0x0490
    0490 : e00f ; -- <0500> end_event
    0491 : 007e ; -- <0500> "

-- ######## event softevent0_handler -- = 0x0492
    0492 : e00f ; -- <0503> end_event
    0493 : 007e ; -- <0503> "

-- :rpm_msg -- = 0x0494
-- ": rpm=\x0"
    0494 : 203a ; -- <0506>  :
    0495 : 7072 ; -- <0506> pr
    0496 : 3d6d ; -- <0506> =m
    0497 : 0000 ; -- <0506>   

-- :puff_len_msg -- = 0x0498
-- " pfl=\x0"
    0498 : 7020 ; -- <0509> p 
    0499 : 6c66 ; -- <0509> lf
    049a : 003d ; -- <0509>  =

-- ######## func start_daq_pass -- = 0x049b
    049b : 2004 ; -- <0511> push x -- func start_daq_pass
    049c : 203e ; -- <0511> push rtna -- "
-- daq pass counter in RAM.
    049d : 4e00 ; -- <0513> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    049e : 5204 ; -- <0513> ram a = $ram_daq_pass_cnt -- av_ad_lo = 4
    049f : 0011 ; -- <0513> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    04a0 : 0012 ; -- <0513> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    04a1 : 0601 ; -- <0514> b = 1
    04a2 : c800 ; -- <0515> a = a+b
    04a3 : 0300 ; -- <0515> "
    04a4 : 5c00 ; -- <0516> leds = a
    04a5 : 4e00 ; -- <0517> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    04a6 : 5204 ; -- <0517> ram $ram_daq_pass_cnt = a -- av_ad_lo = 4
    04a7 : 4400 ; -- <0517> ram $ram_daq_pass_cnt = a -- av_write_data = a
    04a8 : fba0 ; -- <0518> call :put4x
    04a9 : 00b3 ; -- <0518> "
    04aa : fc00 ; -- <0518> "

    04ab : 03a0 ; -- <0520> a = :rpm_msg
    04ac : 0494 ; -- <0520> "
    04ad : fba0 ; -- <0521> call :print_nt
    04ae : 013f ; -- <0521> "
    04af : fc00 ; -- <0521> "
    04b0 : 0200 ; -- <0522> a = 0
    04b1 : 4e00 ; -- <0523> ram x = $ram_rpm_valid -- av_ad_hi = 0
    04b2 : 525c ; -- <0523> ram x = $ram_rpm_valid -- av_ad_lo = 92
    04b3 : 1011 ; -- <0523> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    04b4 : 1012 ; -- <0523> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle
    04b5 : e002 ; -- <0524> br xz :skip_rpm
    04b6 : 04bb ; -- <0524> "
    04b7 : 4e00 ; -- <0525> ram a = $ram_avg_rpm -- av_ad_hi = 0
    04b8 : 525a ; -- <0525> ram a = $ram_avg_rpm -- av_ad_lo = 90
    04b9 : 0011 ; -- <0525> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    04ba : 0012 ; -- <0525> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
-- :skip_rpm -- = 0x04bb
    04bb : fba0 ; -- <0527> call :put4x
    04bc : 00b3 ; -- <0527> "
    04bd : fc00 ; -- <0527> "

    04be : 03a0 ; -- <0529> a = :puff_len_msg
    04bf : 0498 ; -- <0529> "
    04c0 : fba0 ; -- <0530> call :print_nt
    04c1 : 013f ; -- <0530> "
    04c2 : fc00 ; -- <0530> "
    04c3 : 001d ; -- <0531> a = puff_len_us
    04c4 : fba0 ; -- <0532> call :put4x
    04c5 : 00b3 ; -- <0532> "
    04c6 : fc00 ; -- <0532> "
    04c7 : 022c ; -- <0533> a = 44 -- putasc ","
    04c8 : fba0 ; -- <0533> putasc ","
    04c9 : 008b ; -- <0533> "
    04ca : fc00 ; -- <0533> "
    04cb : 4e00 ; -- <0534> ram a = $ram_puff_count -- av_ad_hi = 0
    04cc : 5270 ; -- <0534> ram a = $ram_puff_count -- av_ad_lo = 112
    04cd : 0011 ; -- <0534> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    04ce : 0012 ; -- <0534> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    04cf : fba0 ; -- <0535> call :put4x
    04d0 : 00b3 ; -- <0535> "
    04d1 : fc00 ; -- <0535> "

-- start to acquire & report all anmux channels.
    04d2 : 0207 ; -- <0538> a = ($anmux_num_channels - 1)
    04d3 : fba0 ; -- <0539> call :anmux_set_chn
    04d4 : 00a2 ; -- <0539> "
    04d5 : fc00 ; -- <0539> "
    04d6 : 3a05 ; -- <0540> mstimer1 = $anmux_settle_ms

-- -- observe MCU utilization.
-- a = usage_count
-- call :put4x
-- usage_count = 0
    04d7 : f808 ; -- <0546> pop rtna -- end_func
    04d8 : 1008 ; -- <0546> pop x -- "
    04d9 : fc00 ; -- <0546> swapra = nop

-- ######## func begin_adc_conversion -- = 0x04da
-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.  pass that in a.

    04da : 0352 ; -- <0552> a = a<<4
    04db : 0352 ; -- <0553> a = a<<4
    04dc : 0351 ; -- <0554> a = a<<1
    04dd : 0351 ; -- <0555> a = a<<1
    04de : 0351 ; -- <0556> a = a<<1
    04df : 4000 ; -- <0557> spi_data = a
    04e0 : fc00 ; -- <0558> swapra = nop

-- ######## event power_lost_handler -- = 0x04e1
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    04e1 : 6a00 ; -- <0567> power_duty = $power_duty_closing
    04e2 : 4e00 ; -- <0568> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    04e3 : 5204 ; -- <0568> ram a = $ram_daq_pass_cnt -- av_ad_lo = 4
    04e4 : 0011 ; -- <0568> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    04e5 : 0012 ; -- <0568> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    04e6 : 0602 ; -- <0569> b = $relay_hold_passes
    04e7 : 4e00 ; -- <0570> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    04e8 : 521a ; -- <0570> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 26
    04e9 : c800 ; -- <0570> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    04ea : 4700 ; -- <0570> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    04eb : fba0 ; -- <0575> call :save_persistent_data
    04ec : 0555 ; -- <0575> "
    04ed : fc00 ; -- <0575> "
    04ee : e00f ; -- <0576> end_event
    04ef : 007e ; -- <0576> "

-- :ign_off_msg -- = 0x04f0
-- "IGOF\x0"
    04f0 : 4749 ; -- <0579> GI
    04f1 : 464f ; -- <0579> FO
    04f2 : 0000 ; -- <0579>   

-- ######## event ign_switch_off_handler -- = 0x04f3
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    04f3 : 4e00 ; -- <0583> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    04f4 : 521c ; -- <0583> ram a = $ram_minutes_cnt -- av_ad_lo = 28
    04f5 : 0011 ; -- <0583> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    04f6 : 0012 ; -- <0583> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    04f7 : 060a ; -- <0584> b = $power_extend_minutes
    04f8 : 4e00 ; -- <0585> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    04f9 : 5218 ; -- <0585> ram $ram_power_down_at_min = a+b -- av_ad_lo = 24
    04fa : c800 ; -- <0585> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    04fb : 4700 ; -- <0585> "
    04fc : 03a0 ; -- <0586> a = :ign_off_msg
    04fd : 04f0 ; -- <0586> "
    04fe : fba0 ; -- <0587> call :set_text_flag
    04ff : 05aa ; -- <0587> "
    0500 : fc00 ; -- <0587> "
    0501 : e00f ; -- <0588> end_event
    0502 : 007e ; -- <0588> "

-- :ign_on_msg -- = 0x0503
-- "IGON\x0"
    0503 : 4749 ; -- <0591> GI
    0504 : 4e4f ; -- <0591> NO
    0505 : 0000 ; -- <0591>   

-- ######## event ign_switch_on_handler -- = 0x0506
    0506 : 4e00 ; -- <0594> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0507 : 5218 ; -- <0594> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 24
    0508 : 4760 ; -- <0594> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0509 : 03a0 ; -- <0595> a = :ign_on_msg
    050a : 0503 ; -- <0595> "
    050b : fba0 ; -- <0596> call :set_text_flag
    050c : 05aa ; -- <0596> "
    050d : fc00 ; -- <0596> "
    050e : e00f ; -- <0597> end_event
    050f : 007e ; -- <0597> "

-- ######## event puff1_done_handler -- = 0x0510
-- puff just finished.  set length of next puff.
    0510 : 4e00 ; -- <0601> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    0511 : 526e ; -- <0601> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 110
    0512 : 7411 ; -- <0601> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    0513 : 7412 ; -- <0601> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    0514 : 4e00 ; -- <0604> ram a = $ram_puff_count -- av_ad_hi = 0
    0515 : 5270 ; -- <0604> ram a = $ram_puff_count -- av_ad_lo = 112
    0516 : 0011 ; -- <0604> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0517 : 0012 ; -- <0604> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0518 : 0601 ; -- <0605> b = 1
    0519 : 4e00 ; -- <0606> ram $ram_puff_count = a+b -- av_ad_hi = 0
    051a : 5270 ; -- <0606> ram $ram_puff_count = a+b -- av_ad_lo = 112
    051b : c800 ; -- <0606> ram $ram_puff_count = a+b -- av_write_data = a+b
    051c : 4700 ; -- <0606> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    051d : e00f ; -- <0617> end_event
    051e : 007e ; -- <0617> "

-- ######## func minute_events -- = 0x051f
    051f : 203e ; -- <0619> push rtna -- func minute_events
    0520 : fba0 ; -- <0620> call :check_power_down
    0521 : 053a ; -- <0620> "
    0522 : fc00 ; -- <0620> "
    0523 : f808 ; -- <0621> pop rtna -- end_func
    0524 : fc00 ; -- <0621> swapra = nop

-- :power_hold_msg -- = 0x0525
-- "PWH\x0"
    0525 : 5750 ; -- <0624> WP
    0526 : 0048 ; -- <0624>  H

-- ######## func check_power_relay -- = 0x0527
    0527 : 203e ; -- <0626> push rtna -- func check_power_relay
    0528 : 4e00 ; -- <0627> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0529 : 5204 ; -- <0627> ram a = $ram_daq_pass_cnt -- av_ad_lo = 4
    052a : 0011 ; -- <0627> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    052b : 0012 ; -- <0627> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    052c : 4e00 ; -- <0628> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    052d : 521a ; -- <0628> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 26
    052e : 0411 ; -- <0628> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    052f : 0412 ; -- <0628> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle
    0530 : e407 ; -- <0629> bn eq :done
    0531 : 0538 ; -- <0629> "
-- time to begin "solenoid saver" coil power reduction by PWM.
    0532 : 6a19 ; -- <0631> power_duty = $power_duty_holding
    0533 : 03a0 ; -- <0632> a = :power_hold_msg
    0534 : 0525 ; -- <0632> "
    0535 : fba0 ; -- <0633> call :set_text_flag
    0536 : 05aa ; -- <0633> "
    0537 : fc00 ; -- <0633> "
-- :done -- = 0x0538
    0538 : f808 ; -- <0635> pop rtna -- end_func
    0539 : fc00 ; -- <0635> swapra = nop

-- ######## func check_power_down -- = 0x053a
    053a : 203e ; -- <0637> push rtna -- func check_power_down
-- check power-down deadline in RAM.
    053b : 4e00 ; -- <0639> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    053c : 521c ; -- <0639> ram a = $ram_minutes_cnt -- av_ad_lo = 28
    053d : 0011 ; -- <0639> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    053e : 0012 ; -- <0639> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    053f : 4e00 ; -- <0640> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    0540 : 5218 ; -- <0640> ram b = $ram_power_down_at_min -- av_ad_lo = 24
    0541 : 0411 ; -- <0640> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    0542 : 0412 ; -- <0640> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle
    0543 : e407 ; -- <0641> bn eq :done
    0544 : 0548 ; -- <0641> "
    0545 : fba0 ; -- <0642> call :power_down
    0546 : 054a ; -- <0642> "
    0547 : fc00 ; -- <0642> "
-- :done -- = 0x0548
    0548 : f808 ; -- <0644> pop rtna -- end_func
    0549 : fc00 ; -- <0644> swapra = nop

-- ######## func power_down -- = 0x054a
    054a : 203e ; -- <0646> push rtna -- func power_down
-- this function never returns.
    054b : fba0 ; -- <0648> call :save_persistent_data
    054c : 0555 ; -- <0648> "
    054d : fc00 ; -- <0648> "
    054e : 6a32 ; -- <0649> power_duty = $power_duty_opening
    054f : 5fa0 ; -- <0650> error_halt_code $err_power_down -- leds = 0xfffc
    0550 : fffc ; -- <0650> "
    0551 : e00f ; -- <0650> error_halt_code $err_power_down
    0552 : 0551 ; -- <0650> "
    0553 : f808 ; -- <0651> pop rtna -- end_func
    0554 : fc00 ; -- <0651> swapra = nop

-- ######## func save_persistent_data -- = 0x0555
    0555 : fc00 ; -- <0654> swapra = nop

-- ######## func check_communication -- = 0x0556
    0556 : 203e ; -- <0656> push rtna -- func check_communication
    0557 : 4e00 ; -- <0657> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    0558 : 5202 ; -- <0657> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 2
    0559 : 0011 ; -- <0657> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    055a : 0012 ; -- <0657> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle
    055b : e000 ; -- <0658> br az :skip_ftdi_powerup
    055c : 056c ; -- <0658> "
    055d : 0760 ; -- <0659> b = -1
    055e : c800 ; -- <0660> a = a+b
    055f : 0300 ; -- <0660> "
    0560 : 4e00 ; -- <0661> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0561 : 5202 ; -- <0661> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 2
    0562 : 4400 ; -- <0661> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a
    0563 : e000 ; -- <0662> br az :do_power_on
    0564 : 0567 ; -- <0662> "
    0565 : f808 ; -- <0663> pop rtna -- rtn
    0566 : fc00 ; -- <0663> swapra = nop
-- :do_power_on -- = 0x0567
    0567 : fba0 ; -- <0665> call :ftdi_power_on
    0568 : 059e ; -- <0665> "
    0569 : fc00 ; -- <0665> "
    056a : f808 ; -- <0666> pop rtna -- rtn
    056b : fc00 ; -- <0666> swapra = nop
-- :skip_ftdi_powerup -- = 0x056c

    056c : 4e00 ; -- <0669> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    056d : 521c ; -- <0669> ram a = $ram_minutes_cnt -- av_ad_lo = 28
    056e : 0011 ; -- <0669> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    056f : 0012 ; -- <0669> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0570 : 4e00 ; -- <0670> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0571 : 5200 ; -- <0670> ram b = $ram_comm_restart_at_min -- av_ad_lo = 0
    0572 : 0411 ; -- <0670> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0573 : 0412 ; -- <0670> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle
    0574 : e407 ; -- <0671> bn eq :done
    0575 : 057f ; -- <0671> "
-- comm restart is required.
    0576 : fba0 ; -- <0673> call :postpone_comm_restart
    0577 : 0581 ; -- <0673> "
    0578 : fc00 ; -- <0673> "
    0579 : 4e00 ; -- <0674> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    057a : 5202 ; -- <0674> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 2
    057b : 4605 ; -- <0674> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    057c : fba0 ; -- <0675> call :ftdi_power_off
    057d : 058e ; -- <0675> "
    057e : fc00 ; -- <0675> "
-- :done -- = 0x057f
    057f : f808 ; -- <0677> pop rtna -- end_func
    0580 : fc00 ; -- <0677> swapra = nop

-- ######## func postpone_comm_restart -- = 0x0581
    0581 : 4e00 ; -- <0680> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0582 : 521c ; -- <0680> ram a = $ram_minutes_cnt -- av_ad_lo = 28
    0583 : 0011 ; -- <0680> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0584 : 0012 ; -- <0680> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0585 : 0602 ; -- <0681> b = $comm_grace_period_min
    0586 : 4e00 ; -- <0682> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    0587 : 5200 ; -- <0682> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 0
    0588 : c800 ; -- <0682> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    0589 : 4700 ; -- <0682> "
    058a : fc00 ; -- <0683> swapra = nop

-- :ftdi_off_msg -- = 0x058b
-- "FTOF\x0"
    058b : 5446 ; -- <0686> TF
    058c : 464f ; -- <0686> FO
    058d : 0000 ; -- <0686>   

-- ######## func ftdi_power_off -- = 0x058e
    058e : 203e ; -- <0688> push rtna -- func ftdi_power_off
    058f : 0018 ; -- <0689> a = board_ctrl
    0590 : 07a0 ; -- <0690> b = $not_ftdi_power_mask
    0591 : ff7f ; -- <0690> "
    0592 : c800 ; -- <0691> board_ctrl = and
    0593 : 6330 ; -- <0691> "
    0594 : 03a0 ; -- <0692> a = :ftdi_off_msg
    0595 : 058b ; -- <0692> "
    0596 : fba0 ; -- <0693> call :set_text_flag
    0597 : 05aa ; -- <0693> "
    0598 : fc00 ; -- <0693> "
    0599 : f808 ; -- <0694> pop rtna -- end_func
    059a : fc00 ; -- <0694> swapra = nop

-- :ftdi_on_msg -- = 0x059b
-- "FTON\x0"
    059b : 5446 ; -- <0697> TF
    059c : 4e4f ; -- <0697> NO
    059d : 0000 ; -- <0697>   

-- ######## func ftdi_power_on -- = 0x059e
    059e : 203e ; -- <0699> push rtna -- func ftdi_power_on
    059f : 0018 ; -- <0700> a = board_ctrl
    05a0 : 0680 ; -- <0701> b = $ftdi_power_mask
    05a1 : c800 ; -- <0702> board_ctrl = or
    05a2 : 6334 ; -- <0702> "
    05a3 : 03a0 ; -- <0703> a = :ftdi_on_msg
    05a4 : 059b ; -- <0703> "
    05a5 : fba0 ; -- <0704> call :set_text_flag
    05a6 : 05aa ; -- <0704> "
    05a7 : fc00 ; -- <0704> "
    05a8 : f808 ; -- <0705> pop rtna -- end_func
    05a9 : fc00 ; -- <0705> swapra = nop

-- ######## func set_text_flag -- = 0x05aa
    05aa : 0400 ; -- <0708> b = a
    05ab : 4e00 ; -- <0709> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    05ac : 5234 ; -- <0709> ram a = $ram_next_tfp_idx -- av_ad_lo = 52
    05ad : 0011 ; -- <0709> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    05ae : 0012 ; -- <0709> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle
    05af : 2000 ; -- <0710> push a -- push a

    05b0 : 0351 ; -- <0711> a = a<<1
    05b1 : 2001 ; -- <0711> push b -- push b
    05b2 : 0624 ; -- <0711> b = 36
    05b3 : 4e00 ; -- <0711> av_ad_hi = 0
    05b4 : 5300 ; -- <0711> av_ad_lo = ad0
    05b5 : 4408 ; -- <0711> pop av_write_data -- pop av_write_data

    05b6 : 0008 ; -- <0712> pop a -- pop a
    05b7 : 0760 ; -- <0713> b = -1
    05b8 : c800 ; -- <0714> a = a+b
    05b9 : 0300 ; -- <0714> "
    05ba : 0607 ; -- <0715> b = $tfp_mask
    05bb : 4e00 ; -- <0716> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    05bc : 5234 ; -- <0716> ram $ram_next_tfp_idx = and -- av_ad_lo = 52
    05bd : c800 ; -- <0716> ram $ram_next_tfp_idx = and -- av_write_data = and
    05be : 4730 ; -- <0716> "
    05bf : fc00 ; -- <0717> swapra = nop

-- :text_flags_msg -- = 0x05c0
-- " tf=\x0"
    05c0 : 7420 ; -- <0720> t 
    05c1 : 3d66 ; -- <0720> =f
    05c2 : 0000 ; -- <0720>   

-- ######## func report_text_flags -- = 0x05c3
    05c3 : 2002 ; -- <0722> push i -- func report_text_flags
    05c4 : 2003 ; -- <0722> push j -- "
    05c5 : 203e ; -- <0722> push rtna -- "
    05c6 : 03a0 ; -- <0723> a = :text_flags_msg
    05c7 : 05c0 ; -- <0723> "
    05c8 : fba0 ; -- <0724> call :print_nt
    05c9 : 013f ; -- <0724> "
    05ca : fc00 ; -- <0724> "
    05cb : 0a08 ; -- <0725> i = $num_text_flag_pointers
    05cc : 0f60 ; -- <0726> j = -1
-- :next_ptr -- = 0x05cd
    05cd : c800 ; -- <0728> i = i+j
    05ce : 0b10 ; -- <0728> "
    05cf : 0002 ; -- <0729> a = i

    05d0 : 0351 ; -- <0730> a = a<<1
    05d1 : 0624 ; -- <0730> b = 36
    05d2 : 4e00 ; -- <0730> av_ad_hi = 0
    05d3 : 5300 ; -- <0730> av_ad_lo = ad0
    05d4 : 0411 ; -- <0730> b = av_write_data
    05d5 : 0412 ; -- <0730> b = av_read_data

    05d6 : 0001 ; -- <0731> a = b
    05d7 : e000 ; -- <0732> br az :skip
    05d8 : 05e8 ; -- <0732> "
    05d9 : fba0 ; -- <0733> call :print_nt
    05da : 013f ; -- <0733> "
    05db : fc00 ; -- <0733> "
    05dc : 022c ; -- <0734> a = 44 -- putasc ","
    05dd : fba0 ; -- <0734> putasc ","
    05de : 008b ; -- <0734> "
    05df : fc00 ; -- <0734> "
    05e0 : 0002 ; -- <0735> a = i
    05e1 : 0600 ; -- <0736> b = 0

    05e2 : 0351 ; -- <0737> a = a<<1
    05e3 : 2001 ; -- <0737> push b -- push b
    05e4 : 0624 ; -- <0737> b = 36
    05e5 : 4e00 ; -- <0737> av_ad_hi = 0
    05e6 : 5300 ; -- <0737> av_ad_lo = ad0
    05e7 : 4408 ; -- <0737> pop av_write_data -- pop av_write_data

-- :skip -- = 0x05e8
    05e8 : e401 ; -- <0739> bn iz :next_ptr
    05e9 : 05cd ; -- <0739> "
    05ea : f808 ; -- <0740> pop rtna -- end_func
    05eb : 0c08 ; -- <0740> pop j -- "
    05ec : 0808 ; -- <0740> pop i -- "
    05ed : fc00 ; -- <0740> swapra = nop

-- :plan_msg -- = 0x05ee
-- " pl=\x0"
    05ee : 7020 ; -- <0743> p 
    05ef : 3d6c ; -- <0743> =l
    05f0 : 0000 ; -- <0743>   

-- ######## func report_plan -- = 0x05f1
    05f1 : 203e ; -- <0745> push rtna -- func report_plan
    05f2 : 03a0 ; -- <0746> a = :plan_msg
    05f3 : 05ee ; -- <0746> "
    05f4 : fba0 ; -- <0747> call :print_nt
    05f5 : 013f ; -- <0747> "
    05f6 : fc00 ; -- <0747> "
    05f7 : 4e00 ; -- <0748> ram a = $ram_plan_name -- av_ad_hi = 0
    05f8 : 5266 ; -- <0748> ram a = $ram_plan_name -- av_ad_lo = 102
    05f9 : 0011 ; -- <0748> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    05fa : 0012 ; -- <0748> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    05fb : fba0 ; -- <0749> call :print_nt
    05fc : 013f ; -- <0749> "
    05fd : fc00 ; -- <0749> "
    05fe : f808 ; -- <0750> pop rtna -- end_func
    05ff : fc00 ; -- <0750> swapra = nop

-- ######## func jf_to_rpm -- = 0x0600
    0600 : 203e ; -- <0752> push rtna -- func jf_to_rpm
-- pass jiffies in a.  return rpm in a.
-- resolution = 32 rpm.
    0601 : 0400 ; -- <0755> b = a
    0602 : 03a0 ; -- <0756> a = 0x5573
    0603 : 5573 ; -- <0756> "
-- = 700000 >> 5
    0604 : fba0 ; -- <0758> call :divide
    0605 : 017c ; -- <0758> "
    0606 : fc00 ; -- <0758> "
    0607 : 0001 ; -- <0759> a = b
    0608 : 0352 ; -- <0760> a = a<<4
    0609 : 0351 ; -- <0761> a = a<<1
    060a : f808 ; -- <0762> pop rtna -- end_func
    060b : fc00 ; -- <0762> swapra = nop

-- ######## func check_engine_stop -- = 0x060c
    060c : 203e ; -- <0764> push rtna -- func check_engine_stop
-- returns a=1 if transitioned to stop, else a=0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.
    060d : 001a ; -- <0769> a = power_duty
    060e : 0680 ; -- <0770> b = $ign_switch_off_mask
    060f : e003 ; -- <0771> br and0z :stay
    0610 : 0622 ; -- <0771> "
    0611 : 4e00 ; -- <0772> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0612 : 525c ; -- <0772> ram a = $ram_rpm_valid -- av_ad_lo = 92
    0613 : 0011 ; -- <0772> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0614 : 0012 ; -- <0772> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    0615 : e400 ; -- <0773> bn az :stay
    0616 : 0622 ; -- <0773> "
    0617 : 4e00 ; -- <0774> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0618 : 526c ; -- <0774> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 108
    0619 : f811 ; -- <0774> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    061a : f812 ; -- <0774> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    061b : fc00 ; -- <0775> swapra = nop
    061c : fba0 ; -- <0776> call :init_plan_stop
    061d : 020f ; -- <0776> "
    061e : fc00 ; -- <0776> "
    061f : 0201 ; -- <0777> a = 1
    0620 : e00f ; -- <0778> jmp :done
    0621 : 0623 ; -- <0778> "
-- :stay -- = 0x0622
    0622 : 0200 ; -- <0780> a = 0
-- :done -- = 0x0623
    0623 : f808 ; -- <0782> pop rtna -- end_func
    0624 : fc00 ; -- <0782> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 g6
-- src reg 0007 g7
-- src reg 0008 rstk
-- src reg 0009 event_priority
-- src reg 000a soft_event
-- src reg 000b usage_count
-- src reg 000c ustimer0
-- src reg 000d mstimer0
-- src reg 000e mstimer1
-- src reg 000f mstimer2
-- src reg 0010 spi_data
-- src reg 0011 av_write_data
-- src reg 0012 av_read_data
-- src reg 0013 av_ad_hi
-- src reg 0014 av_ad_lo
-- src reg 0015 fduart_data
-- src reg 0016 fduart_status
-- src reg 0017 leds
-- src reg 0018 board_ctrl
-- src reg 0019 anmux_ctrl
-- src reg 001a power_duty
-- src reg 001b ign_capture_jf
-- src reg 001c ign_timeout_len_jf
-- src reg 001d puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 g6
-- dest reg 0007 g7
-- dest reg 0008 rstk
-- dest reg 0009 event_priority
-- dest reg 000a soft_event
-- dest reg 000b usage_count
-- dest reg 000c ustimer0
-- dest reg 000d mstimer0
-- dest reg 000e mstimer1
-- dest reg 000f mstimer2
-- dest reg 0010 spi_data
-- dest reg 0011 av_write_data
-- dest reg 0013 av_ad_hi
-- dest reg 0014 av_ad_lo
-- dest reg 0015 fduart_data
-- dest reg 0016 fduart_status
-- dest reg 0017 leds
-- dest reg 0018 board_ctrl
-- dest reg 0019 anmux_ctrl
-- dest reg 001a power_duty
-- dest reg 001c ign_timeout_len_jf
-- dest reg 001d puff_len_us
-- ram 00000000 ram_comm_restart_at_min
-- ram 00000002 ram_ftdi_downtime_remain_sec
-- ram 00000004 ram_daq_pass_cnt
-- ram 00000006 ram_daq_discard_cnt
-- ram 00000008 ram_last_anmux_data
-- ram 00000018 ram_power_down_at_min
-- ram 0000001a ram_relay_hold_at_pass
-- ram 0000001c ram_minutes_cnt
-- ram 0000001e ram_seconds_cnt
-- ram 00000020 ram_mcu_usage_cnt
-- ram 00000022 ram_dial_setting
-- ram 00000024 ram_text_flag_pointers
-- ram 00000034 ram_next_tfp_idx
-- ram 00000036 ram_ign_history_idx
-- ram 00000038 ram_ign_history_jf
-- ram 00000058 ram_ign_avg_jf
-- ram 0000005a ram_avg_rpm
-- ram 0000005c ram_rpm_valid
-- ram 0000005e ram_ign_bad_samples
-- ram 00000060 ram_ign_fastest_jf
-- ram 00000062 ram_ign_slowest_jf
-- ram 00000064 ram_next_puff_len_us
-- ram 00000066 ram_plan_name
-- ram 00000068 ram_puff_len_func
-- ram 0000006a ram_transition_func
-- ram 0000006c ram_destroy_plan_func
-- ram 0000006e ram_next_puff_len_us
-- ram 00000070 ram_puff_count
        
        END;
    
