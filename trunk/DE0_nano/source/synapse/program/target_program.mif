
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 0753 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.





-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 8750 RPM = about 80 jf between rising edges on chevy ignition white wire.  ignition counter noise blanking begins here in rev 627.
-- 5000 RPM = about 140 jf
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 0022 ; -- <0189> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0189>   
    0004 : 2020 ; -- <0189>   
    0005 : 2020 ; -- <0189>   
    0006 : 6120 ; -- <0189> a 
-- "       b"
    0007 : 2020 ; -- <0189>   
    0008 : 2020 ; -- <0189>   
    0009 : 2020 ; -- <0189>   
    000a : 6220 ; -- <0189> b 
-- "       i"
    000b : 2020 ; -- <0189>   
    000c : 2020 ; -- <0189>   
    000d : 2020 ; -- <0189>   
    000e : 6920 ; -- <0189> i 
-- "       j"
    000f : 2020 ; -- <0189>   
    0010 : 2020 ; -- <0189>   
    0011 : 2020 ; -- <0189>   
    0012 : 6a20 ; -- <0189> j 
-- "       x"
    0013 : 2020 ; -- <0189>   
    0014 : 2020 ; -- <0189>   
    0015 : 2020 ; -- <0189>   
    0016 : 7820 ; -- <0189> x 
-- "       y"
    0017 : 2020 ; -- <0189>   
    0018 : 2020 ; -- <0189>   
    0019 : 2020 ; -- <0189>   
    001a : 7920 ; -- <0189> y 
-- "      ga"
    001b : 2020 ; -- <0189>   
    001c : 2020 ; -- <0189>   
    001d : 2020 ; -- <0189>   
    001e : 6167 ; -- <0189> ag
-- "      gb"
    001f : 2020 ; -- <0189>   
    0020 : 2020 ; -- <0189>   
    0021 : 2020 ; -- <0189>   
    0022 : 6267 ; -- <0189> bg
-- "      pa"
    0023 : 2020 ; -- <0189>   
    0024 : 2020 ; -- <0189>   
    0025 : 2020 ; -- <0189>   
    0026 : 6170 ; -- <0189> ap
-- "      pb"
    0027 : 2020 ; -- <0189>   
    0028 : 2020 ; -- <0189>   
    0029 : 2020 ; -- <0189>   
    002a : 6270 ; -- <0189> bp
-- "      pc"
    002b : 2020 ; -- <0189>   
    002c : 2020 ; -- <0189>   
    002d : 2020 ; -- <0189>   
    002e : 6370 ; -- <0189> cp
-- "      pd"
    002f : 2020 ; -- <0189>   
    0030 : 2020 ; -- <0189>   
    0031 : 2020 ; -- <0189>   
    0032 : 6470 ; -- <0189> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0189> --
    0034 : 7372 ; -- <0189> sr
    0035 : 6b74 ; -- <0189> kt
    0036 : 2020 ; -- <0189>   
-- "  ev_pri"
    0037 : 2020 ; -- <0189>   
    0038 : 7665 ; -- <0189> ve
    0039 : 705f ; -- <0189> p_
    003a : 6972 ; -- <0189> ir
-- "softevnt"
    003b : 6f73 ; -- <0189> os
    003c : 7466 ; -- <0189> tf
    003d : 7665 ; -- <0189> ve
    003e : 746e ; -- <0189> tn
-- "   usage"
    003f : 2020 ; -- <0189>   
    0040 : 7520 ; -- <0189> u 
    0041 : 6173 ; -- <0189> as
    0042 : 6567 ; -- <0189> eg
-- "ustimer0"
    0043 : 7375 ; -- <0189> su
    0044 : 6974 ; -- <0189> it
    0045 : 656d ; -- <0189> em
    0046 : 3072 ; -- <0189> 0r
-- "mstimer0"
    0047 : 736d ; -- <0189> sm
    0048 : 6974 ; -- <0189> it
    0049 : 656d ; -- <0189> em
    004a : 3072 ; -- <0189> 0r
-- "mstimer1"
    004b : 736d ; -- <0189> sm
    004c : 6974 ; -- <0189> it
    004d : 656d ; -- <0189> em
    004e : 3172 ; -- <0189> 1r
-- "mstimer2"
    004f : 736d ; -- <0189> sm
    0050 : 6974 ; -- <0189> it
    0051 : 656d ; -- <0189> em
    0052 : 3272 ; -- <0189> 2r
-- "spi_data"
    0053 : 7073 ; -- <0189> ps
    0054 : 5f69 ; -- <0189> _i
    0055 : 6164 ; -- <0189> ad
    0056 : 6174 ; -- <0189> at
-- "--avwrdt"
    0057 : 2f2f ; -- <0189> --
    0058 : 7661 ; -- <0189> va
    0059 : 7277 ; -- <0189> rw
    005a : 7464 ; -- <0189> td
-- "av_rd_dt"
    005b : 7661 ; -- <0189> va
    005c : 725f ; -- <0189> r_
    005d : 5f64 ; -- <0189> _d
    005e : 7464 ; -- <0189> td
-- "av_ad_hi"
    005f : 7661 ; -- <0189> va
    0060 : 615f ; -- <0189> a_
    0061 : 5f64 ; -- <0189> _d
    0062 : 6968 ; -- <0189> ih
-- "av_ad_lo"
    0063 : 7661 ; -- <0189> va
    0064 : 615f ; -- <0189> a_
    0065 : 5f64 ; -- <0189> _d
    0066 : 6f6c ; -- <0189> ol
-- "--uartdt"
    0067 : 2f2f ; -- <0189> --
    0068 : 6175 ; -- <0189> au
    0069 : 7472 ; -- <0189> tr
    006a : 7464 ; -- <0189> td
-- "uartstat"
    006b : 6175 ; -- <0189> au
    006c : 7472 ; -- <0189> tr
    006d : 7473 ; -- <0189> ts
    006e : 7461 ; -- <0189> ta
-- "    leds"
    006f : 2020 ; -- <0189>   
    0070 : 2020 ; -- <0189>   
    0071 : 656c ; -- <0189> el
    0072 : 7364 ; -- <0189> sd
-- "brd_ctrl"
    0073 : 7262 ; -- <0189> rb
    0074 : 5f64 ; -- <0189> _d
    0075 : 7463 ; -- <0189> tc
    0076 : 6c72 ; -- <0189> lr
-- "   anmux"
    0077 : 2020 ; -- <0189>   
    0078 : 6120 ; -- <0189> a 
    0079 : 6d6e ; -- <0189> mn
    007a : 7875 ; -- <0189> xu
-- "pwr_duty"
    007b : 7770 ; -- <0189> wp
    007c : 5f72 ; -- <0189> _r
    007d : 7564 ; -- <0189> ud
    007e : 7974 ; -- <0189> yt
-- "igntmcap"
    007f : 6769 ; -- <0189> gi
    0080 : 746e ; -- <0189> tn
    0081 : 636d ; -- <0189> cm
    0082 : 7061 ; -- <0189> pa
-- "igntmout"
    0083 : 6769 ; -- <0189> gi
    0084 : 746e ; -- <0189> tn
    0085 : 6f6d ; -- <0189> om
    0086 : 7475 ; -- <0189> tu
-- "puflenus"
    0087 : 7570 ; -- <0189> up
    0088 : 6c66 ; -- <0189> lf
    0089 : 6e65 ; -- <0189> ne
    008a : 7375 ; -- <0189> su

-- string resources
-- :boot_msg -- = 0x008b
-- "TGT\r\n\x0"
    008b : 4754 ; -- <0193> GT
    008c : 0d54 ; -- <0193>  T
    008d : 000a ; -- <0193>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x008e
-- initialize prior to polling loop, for minimum latency.
    008e : 07a0 ; -- <0006> b = :event_table
    008f : 07c1 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0090
    0090 : 000d ; -- <0009> a = event_priority
    0091 : e000 ; -- <0010> br 0z :poll_events_again
    0092 : 0090 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0093 : 3400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0094 : d300 ; -- <0015> fetch rtna from ad0
    0095 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0096 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0097 : 6fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0098 : ffc0 ; -- <0021> "
    0099 : e00f ; -- <0021> error_halt_code 0xffc0
    009a : 0099 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x009b
    009b : 3004 ; -- <0046> push x -- func putchar_fduart

    009c : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    009d : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x009e
    009e : 041a ; -- <0053> b = fduart_status
    009f : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    00a0 : 009e ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    00a1 : 6404 ; -- <0057> fduart_data = x
    00a2 : 100c ; -- <0058> pop x -- end_func
    00a3 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x00a4
-- wait until FIFO is populated.
    00a4 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x00a5
    00a5 : 041a ; -- <0066> b = fduart_status
    00a6 : e403 ; -- <0067> bn and0z :wait_for_busy
    00a7 : 00a5 ; -- <0067> "
    00a8 : 0019 ; -- <0068> a = fduart_data
    00a9 : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x00aa
-- check for FIFO is populated.
    00aa : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    00ab : 041a ; -- <0075> b = fduart_status
    00ac : e403 ; -- <0076> bn and0z :none
    00ad : 00b0 ; -- <0076> "
    00ae : 0019 ; -- <0077> a = fduart_data
    00af : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x00b0
    00b0 : 0360 ; -- <0080> a = -1
    00b1 : fc00 ; -- <0080> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00b2
-- set & enable analog muxer
    00b2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00b3 : c800 ; -- <0008> anmux_ctrl = or
    00b4 : 7734 ; -- <0008> "
    00b5 : fc00 ; -- <0008> swapra = nop

-- ######## func anmux_get_chn -- = 0x00b6
    00b6 : 001d ; -- <0012> a = anmux_ctrl
    00b7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00b8 : c800 ; -- <0014> a = and
    00b9 : 0330 ; -- <0014> "
    00ba : fc00 ; -- <0014> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00bb
-- "0123456789abcdef"
    00bb : 3130 ; -- <0050> 10
    00bc : 3332 ; -- <0050> 32
    00bd : 3534 ; -- <0050> 54
    00be : 3736 ; -- <0050> 76
    00bf : 3938 ; -- <0050> 98
    00c0 : 6261 ; -- <0050> ba
    00c1 : 6463 ; -- <0050> dc
    00c2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00c3
    00c3 : 3004 ; -- <0054> push x -- func put4x
    00c4 : 3006 ; -- <0054> push g6 -- "
    00c5 : 303e ; -- <0054> push rtna -- "
    00c6 : 13a0 ; -- <0055> x = :hexdigits
    00c7 : 00bb ; -- <0055> "

    00c8 : 1800 ; -- <0057> g6 = a
    00c9 : 07a0 ; -- <0058> b = 0xF000
    00ca : f000 ; -- <0058> "
    00cb : c800 ; -- <0059> a = and
    00cc : 0330 ; -- <0059> "
    00cd : 0353 ; -- <0060> a = a>>4
    00ce : 0353 ; -- <0061> a = a>>4
    00cf : 0353 ; -- <0062> a = a>>4
    00d0 : fba0 ; -- <0063> call fetch_byte
    00d1 : 01dc ; -- <0063> "
    00d2 : fc00 ; -- <0063> "
    00d3 : fba0 ; -- <0064> putchar a
    00d4 : 009b ; -- <0064> "
    00d5 : fc00 ; -- <0064> "

    00d6 : 0006 ; -- <0066> a = g6
    00d7 : 07a0 ; -- <0067> b = 0x0F00
    00d8 : 0f00 ; -- <0067> "
    00d9 : c800 ; -- <0068> a = and
    00da : 0330 ; -- <0068> "
    00db : 0353 ; -- <0069> a = a>>4
    00dc : 0353 ; -- <0070> a = a>>4
    00dd : fba0 ; -- <0071> call fetch_byte
    00de : 01dc ; -- <0071> "
    00df : fc00 ; -- <0071> "
    00e0 : fba0 ; -- <0072> putchar a
    00e1 : 009b ; -- <0072> "
    00e2 : fc00 ; -- <0072> "

    00e3 : 0006 ; -- <0074> a = g6
    00e4 : 06f0 ; -- <0075> b = 0x00F0
    00e5 : c800 ; -- <0076> a = and
    00e6 : 0330 ; -- <0076> "
    00e7 : 0353 ; -- <0077> a = a>>4
    00e8 : fba0 ; -- <0078> call fetch_byte
    00e9 : 01dc ; -- <0078> "
    00ea : fc00 ; -- <0078> "
    00eb : fba0 ; -- <0079> putchar a
    00ec : 009b ; -- <0079> "
    00ed : fc00 ; -- <0079> "

    00ee : 0006 ; -- <0081> a = g6
    00ef : 060f ; -- <0082> b = 0x000F
    00f0 : c800 ; -- <0083> a = and
    00f1 : 0330 ; -- <0083> "
    00f2 : fba0 ; -- <0084> call fetch_byte
    00f3 : 01dc ; -- <0084> "
    00f4 : fc00 ; -- <0084> "
    00f5 : fba0 ; -- <0085> putchar a
    00f6 : 009b ; -- <0085> "
    00f7 : fc00 ; -- <0085> "

    00f8 : f80c ; -- <0087> pop rtna -- end_func
    00f9 : 180c ; -- <0087> pop g6 -- "
    00fa : 100c ; -- <0087> pop x -- "
    00fb : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00fc
    00fc : 3002 ; -- <0091> push i -- func get4x
    00fd : 3003 ; -- <0091> push j -- "
    00fe : 3004 ; -- <0091> push x -- "
    00ff : 3005 ; -- <0091> push y -- "
    0100 : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    0101 : 1604 ; -- <0094> y = 4
-- :again -- = 0x0102
    0102 : fba0 ; -- <0096> getchar
    0103 : 00a4 ; -- <0096> "
    0104 : fc00 ; -- <0096> "
    0105 : 13a0 ; -- <0097> x = :hexdigits
    0106 : 00bb ; -- <0097> "
    0107 : 0a10 ; -- <0098> i = 16
    0108 : fba0 ; -- <0099> call :find_in_fetch
    0109 : 01f0 ; -- <0099> "
    010a : fc00 ; -- <0099> "
    010b : 0760 ; -- <0100> b = -1
    010c : e007 ; -- <0101> br eq :fail
    010d : 0121 ; -- <0101> "
    010e : 0400 ; -- <0102> b = a
    010f : 0003 ; -- <0103> a = j
    0110 : 0352 ; -- <0104> a = a<<4
    0111 : c800 ; -- <0105> j = or
    0112 : 0f34 ; -- <0105> "
    0113 : 1360 ; -- <0106> x = -1
    0114 : c800 ; -- <0107> y = x+y
    0115 : 1720 ; -- <0107> "
    0116 : 0005 ; -- <0108> a = y
    0117 : e400 ; -- <0109> bn az :again
    0118 : 0102 ; -- <0109> "
    0119 : 0003 ; -- <0110> a = j
    011a : 0600 ; -- <0111> b = 0
    011b : f80c ; -- <0112> pop rtna -- rtn
    011c : 140c ; -- <0112> pop y -- "
    011d : 100c ; -- <0112> pop x -- "
    011e : 0c0c ; -- <0112> pop j -- "
    011f : 080c ; -- <0112> pop i -- "
    0120 : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x0121
    0121 : 0760 ; -- <0114> b = -1
    0122 : f80c ; -- <0115> pop rtna -- end_func
    0123 : 140c ; -- <0115> pop y -- "
    0124 : 100c ; -- <0115> pop x -- "
    0125 : 0c0c ; -- <0115> pop j -- "
    0126 : 080c ; -- <0115> pop i -- "
    0127 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0128
    0128 : 3002 ; -- <0121> push i -- func print_fixed
    0129 : 3003 ; -- <0121> push j -- "
    012a : 3004 ; -- <0121> push x -- "
    012b : 3005 ; -- <0121> push y -- "
    012c : 3006 ; -- <0121> push g6 -- "
    012d : 303e ; -- <0121> push rtna -- "
    012e : 0800 ; -- <0122> i = a
    012f : 0e01 ; -- <0123> j = 1
    0130 : 1001 ; -- <0124> x = b
    0131 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0132
    0132 : e002 ; -- <0127> br xz :done
    0133 : 0148 ; -- <0127> "
    0134 : 1320 ; -- <0128> x = ad2
    0135 : d002 ; -- <0129> fetch g6 from i
    0136 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0137 : 0006 ; -- <0131> a = g6 -- putchar g6
    0138 : fba0 ; -- <0131> putchar g6
    0139 : 009b ; -- <0131> "
    013a : fc00 ; -- <0131> "
    013b : e002 ; -- <0132> br xz :done
    013c : 0148 ; -- <0132> "
    013d : 1320 ; -- <0133> x = ad2
    013e : 0006 ; -- <0134> a = g6
    013f : 0353 ; -- <0135> a = a>>4
    0140 : 0353 ; -- <0136> a = a>>4
    0141 : fba0 ; -- <0137> putchar a
    0142 : 009b ; -- <0137> "
    0143 : fc00 ; -- <0137> "
    0144 : c800 ; -- <0138> i = i+j
    0145 : 0b10 ; -- <0138> "
    0146 : e00f ; -- <0139> jmp :next_word
    0147 : 0132 ; -- <0139> "
-- :done -- = 0x0148
    0148 : f80c ; -- <0141> pop rtna -- end_func
    0149 : 180c ; -- <0141> pop g6 -- "
    014a : 140c ; -- <0141> pop y -- "
    014b : 100c ; -- <0141> pop x -- "
    014c : 0c0c ; -- <0141> pop j -- "
    014d : 080c ; -- <0141> pop i -- "
    014e : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x014f
    014f : 3002 ; -- <0147> push i -- func print_nt
    0150 : 3003 ; -- <0147> push j -- "
    0151 : 3004 ; -- <0147> push x -- "
    0152 : 303e ; -- <0147> push rtna -- "
    0153 : 0800 ; -- <0148> i = a
    0154 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0155
    0155 : d002 ; -- <0151> fetch x from i
    0156 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0157 : 0004 ; -- <0153> a = x
    0158 : 06ff ; -- <0154> b = 0xff
    0159 : e003 ; -- <0155> br and0z :done
    015a : 016b ; -- <0155> "
    015b : fba0 ; -- <0156> putchar a
    015c : 009b ; -- <0156> "
    015d : fc00 ; -- <0156> "
    015e : 0004 ; -- <0157> a = x
    015f : 0353 ; -- <0158> a = a>>4
    0160 : 0353 ; -- <0159> a = a>>4
    0161 : 06ff ; -- <0160> b = 0xff
    0162 : e003 ; -- <0161> br and0z :done
    0163 : 016b ; -- <0161> "
    0164 : fba0 ; -- <0162> putchar a
    0165 : 009b ; -- <0162> "
    0166 : fc00 ; -- <0162> "
    0167 : c800 ; -- <0163> i = i+j
    0168 : 0b10 ; -- <0163> "
    0169 : e00f ; -- <0164> jmp :next_word
    016a : 0155 ; -- <0164> "
-- :done -- = 0x016b
    016b : f80c ; -- <0166> pop rtna -- end_func
    016c : 100c ; -- <0166> pop x -- "
    016d : 0c0c ; -- <0166> pop j -- "
    016e : 080c ; -- <0166> pop i -- "
    016f : fc00 ; -- <0165> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0170
    0170 : 3002 ; -- <0004> push i -- func multiply
    0171 : 3003 ; -- <0004> push j -- "
    0172 : 3004 ; -- <0004> push x -- "
    0173 : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0174 : 1000 ; -- <0009> x = a
    0175 : 1401 ; -- <0010> y = b
    0176 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0177
    0177 : e002 ; -- <0013> br xz :done
    0178 : 0186 ; -- <0013> "
    0179 : 0004 ; -- <0014> a = x
    017a : 0601 ; -- <0015> b = 1
    017b : e003 ; -- <0016> br and0z :skip_add
    017c : 0180 ; -- <0016> "
    017d : 0c05 ; -- <0017> j = y
    017e : c800 ; -- <0018> i = i+j
    017f : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0180
    0180 : 0004 ; -- <0020> a = x
    0181 : 1350 ; -- <0021> x = a>>1
    0182 : 0005 ; -- <0022> a = y
    0183 : 1751 ; -- <0023> y = a<<1
    0184 : e00f ; -- <0024> jmp :again
    0185 : 0177 ; -- <0024> "
-- :done -- = 0x0186
    0186 : 0002 ; -- <0026> a = i
    0187 : 140c ; -- <0027> pop y -- end_func
    0188 : 100c ; -- <0027> pop x -- "
    0189 : 0c0c ; -- <0027> pop j -- "
    018a : 080c ; -- <0027> pop i -- "
    018b : fc00 ; -- <0026> swapra = nop

-- ######## func divide -- = 0x018c
    018c : 3002 ; -- <0029> push i -- func divide
    018d : 3003 ; -- <0029> push j -- "
    018e : 3004 ; -- <0029> push x -- "
    018f : 3005 ; -- <0029> push y -- "
    0190 : 3006 ; -- <0029> push g6 -- "
    0191 : 3007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0192 : e005 ; -- <0037> br lt :zero
    0193 : 01cd ; -- <0037> "
    0194 : e000 ; -- <0038> br az :zero
    0195 : 01cd ; -- <0038> "
    0196 : 1000 ; -- <0039> x = a
--    g7 = x
    0197 : 0001 ; -- <0041> a = b
    0198 : e000 ; -- <0042> br az :zero
    0199 : 01cd ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    019a : 0404 ; -- <0058> b = x
    019b : 0a00 ; -- <0059> i = 0
    019c : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x019d
    019d : e006 ; -- <0062> br gt :shift_done
    019e : 01a3 ; -- <0062> "
    019f : 0351 ; -- <0063> a = a<<1
    01a0 : 0b10 ; -- <0064> i = ad1
    01a1 : e00f ; -- <0065> jmp :shift_again
    01a2 : 019d ; -- <0065> "
-- :shift_done -- = 0x01a3
    01a3 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    01a4 : 1e00 ; -- <0078> g7 = 0
    01a5 : 0f60 ; -- <0079> j = -1
-- :again -- = 0x01a6
    01a6 : e001 ; -- <0081> br iz :done
    01a7 : 01c4 ; -- <0081> "
    01a8 : 0006 ; -- <0082> a = g6
    01a9 : 0404 ; -- <0083> b = x
    01aa : e006 ; -- <0084> br gt :result0
    01ab : 01bc ; -- <0084> "
-- temp does fit; output a 1.
    01ac : 0007 ; -- <0086> a = g7
    01ad : 0351 ; -- <0087> a = a<<1
    01ae : 0601 ; -- <0088> b = 1
    01af : c800 ; -- <0089> g7 = or
    01b0 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    01b1 : 0006 ; -- <0091> a = g6
    01b2 : 0760 ; -- <0092> b = -1
    01b3 : c800 ; -- <0093> a = xor
    01b4 : 0338 ; -- <0093> "
    01b5 : 0601 ; -- <0094> b = 1
    01b6 : c800 ; -- <0095> y = a+b
    01b7 : 1700 ; -- <0095> "
    01b8 : c800 ; -- <0096> x = x+y
    01b9 : 1320 ; -- <0096> "
    01ba : e00f ; -- <0097> jmp :next
    01bb : 01be ; -- <0097> "
-- :result0 -- = 0x01bc
-- temp does not fit; output a 0.
    01bc : 0007 ; -- <0100> a = g7
    01bd : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01be
    01be : 0006 ; -- <0104> a = g6
    01bf : 1b50 ; -- <0105> g6 = a>>1
    01c0 : c800 ; -- <0106> i = i+j
    01c1 : 0b10 ; -- <0106> "
    01c2 : e00f ; -- <0107> jmp :again
    01c3 : 01a6 ; -- <0107> "

-- :done -- = 0x01c4
    01c4 : 0407 ; -- <0110> b = g7
    01c5 : 0004 ; -- <0111> a = x
    01c6 : 1c0c ; -- <0112> pop g7 -- rtn
    01c7 : 180c ; -- <0112> pop g6 -- "
    01c8 : 140c ; -- <0112> pop y -- "
    01c9 : 100c ; -- <0112> pop x -- "
    01ca : 0c0c ; -- <0112> pop j -- "
    01cb : 080c ; -- <0112> pop i -- "
    01cc : fc00 ; -- <0111> swapra = nop

-- :zero -- = 0x01cd
    01cd : 0600 ; -- <0115> b = 0
    01ce : 1c0c ; -- <0116> pop g7 -- rtn
    01cf : 180c ; -- <0116> pop g6 -- "
    01d0 : 140c ; -- <0116> pop y -- "
    01d1 : 100c ; -- <0116> pop x -- "
    01d2 : 0c0c ; -- <0116> pop j -- "
    01d3 : 080c ; -- <0116> pop i -- "
    01d4 : fc00 ; -- <0115> swapra = nop
    01d5 : 1c0c ; -- <0117> pop g7 -- end_func
    01d6 : 180c ; -- <0117> pop g6 -- "
    01d7 : 140c ; -- <0117> pop y -- "
    01d8 : 100c ; -- <0117> pop x -- "
    01d9 : 0c0c ; -- <0117> pop j -- "
    01da : 080c ; -- <0117> pop i -- "
    01db : fc00 ; -- <0116> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01dc
    01dc : 0601 ; -- <0005> b = 1
    01dd : e003 ; -- <0006> br and0z :pick_byte_even
    01de : 01e7 ; -- <0006> "
    01df : 0350 ; -- <0007> a = a>>1
    01e0 : 0404 ; -- <0008> b = x
    01e1 : c800 ; -- <0009> fetch a from a+b
    01e2 : d300 ; -- <0009> "
    01e3 : 03b0 ; -- <0009> "
    01e4 : 0353 ; -- <0010> a = a>>4
    01e5 : 0353 ; -- <0011> a = a>>4
    01e6 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x01e7
    01e7 : 0350 ; -- <0014> a = a>>1
    01e8 : 0404 ; -- <0015> b = x
    01e9 : c800 ; -- <0016> fetch a from a+b
    01ea : d300 ; -- <0016> "
    01eb : 03b0 ; -- <0016> "
    01ec : 06ff ; -- <0017> b = 0xff
    01ed : c800 ; -- <0018> a = and
    01ee : 0330 ; -- <0018> "
    01ef : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01f0
    01f0 : 3002 ; -- <0027> push i -- func find_in_fetch
    01f1 : 3003 ; -- <0027> push j -- "
    01f2 : 3005 ; -- <0027> push y -- "
    01f3 : 303e ; -- <0027> push rtna -- "
    01f4 : 1400 ; -- <0028> y = a
    01f5 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01f6
    01f6 : e001 ; -- <0031> br iz :fail
    01f7 : 0206 ; -- <0031> "
    01f8 : 0b10 ; -- <0032> i = ad1
    01f9 : 0002 ; -- <0033> a = i
    01fa : fba0 ; -- <0034> call :fetch_byte
    01fb : 01dc ; -- <0034> "
    01fc : fc00 ; -- <0034> "
    01fd : 0405 ; -- <0035> b = y
    01fe : e407 ; -- <0036> bn eq :again
    01ff : 01f6 ; -- <0036> "
-- :found -- = 0x0200
    0200 : 0002 ; -- <0038> a = i
    0201 : f80c ; -- <0039> pop rtna -- rtn
    0202 : 140c ; -- <0039> pop y -- "
    0203 : 0c0c ; -- <0039> pop j -- "
    0204 : 080c ; -- <0039> pop i -- "
    0205 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0206
    0206 : 0360 ; -- <0041> a = -1
    0207 : f80c ; -- <0042> pop rtna -- end_func
    0208 : 140c ; -- <0042> pop y -- "
    0209 : 0c0c ; -- <0042> pop j -- "
    020a : 080c ; -- <0042> pop i -- "
    020b : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x020c
    020c : 3004 ; -- <0002> push x -- func spinwait
    020d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    020e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x020f
    020f : 13a0 ; -- <0007> x = 16666
    0210 : 411a ; -- <0007> "
    0211 : 1760 ; -- <0008> y = -1
    0212 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0213
-- use of the ad2 name overrides auto-nop here.
    0213 : 1320 ; -- <0012> x = ad2
    0214 : e402 ; -- <0013> bn xz :spinwait_inner
    0215 : 0213 ; -- <0013> "
    0216 : c800 ; -- <0014> a = a+b
    0217 : 0300 ; -- <0014> "
    0218 : e400 ; -- <0015> bn az :spinwait_outer
    0219 : 020f ; -- <0015> "
    021a : 140c ; -- <0016> pop y -- end_func
    021b : 100c ; -- <0016> pop x -- "
    021c : fc00 ; -- <0015> swapra = nop




-- when commands share a common suffix, the longer command must come FIRST here.
-- :cmd_table -- = 0x021d
-- "  hello"
    021d : 2020 ; -- <0006>   
    021e : 6568 ; -- <0006> eh
    021f : 6c6c ; -- <0006> ll
    0220 : 006f ; -- <0006>  o
    0221 : 02e5 ; -- <0007> ([label hello_cmd])
-- "  plstp"
    0222 : 2020 ; -- <0008>   
    0223 : 6c70 ; -- <0008> lp
    0224 : 7473 ; -- <0008> ts
    0225 : 0070 ; -- <0008>  p
    0226 : 02e9 ; -- <0009> ([label set_plan_stop_cmd])
-- "   plcr"
    0227 : 2020 ; -- <0010>   
    0228 : 7020 ; -- <0010> p 
    0229 : 636c ; -- <0010> cl
    022a : 0072 ; -- <0010>  r
    022b : 02f4 ; -- <0011> ([label set_plan_crank_cmd])
-- "   plwm"
    022c : 2020 ; -- <0012>   
    022d : 7020 ; -- <0012> p 
    022e : 776c ; -- <0012> wl
    022f : 006d ; -- <0012>  m
    0230 : 02ff ; -- <0013> ([label set_plan_warmup_cmd])
-- "   plrn"
    0231 : 2020 ; -- <0014>   
    0232 : 7020 ; -- <0014> p 
    0233 : 726c ; -- <0014> rl
    0234 : 006e ; -- <0014>  n
    0235 : 030a ; -- <0015> ([label set_plan_run_cmd])
-- "   plln"
    0236 : 2020 ; -- <0016>   
    0237 : 7020 ; -- <0016> p 
    0238 : 6c6c ; -- <0016> ll
    0239 : 006e ; -- <0016>  n
    023a : 0315 ; -- <0017> ([label set_plan_learn_cmd])
-- " ldsmap"
    023b : 6c20 ; -- <0018> l 
    023c : 7364 ; -- <0018> sd
    023d : 616d ; -- <0018> am
    023e : 0070 ; -- <0018>  p
    023f : 0613 ; -- <0019> ([label load_smap_cmd])
-- " clsmap"
    0240 : 6320 ; -- <0020> c 
    0241 : 736c ; -- <0020> sl
    0242 : 616d ; -- <0020> am
    0243 : 0070 ; -- <0020>  p
    0244 : 062f ; -- <0021> ([label clear_smap_cmd])
-- "   smap"
    0245 : 2020 ; -- <0022>   
    0246 : 7320 ; -- <0022> s 
    0247 : 616d ; -- <0022> am
    0248 : 0070 ; -- <0022>  p
    0249 : 05ae ; -- <0023> ([label dump_smap_cmd])
-- "   ltps"
    024a : 2020 ; -- <0024>   
    024b : 6c20 ; -- <0024> l 
    024c : 7074 ; -- <0024> pt
    024d : 0073 ; -- <0024>  s
    024e : 0667 ; -- <0025> ([label learn_tps_ref_cmd])
-- " ldtpsr"
    024f : 6c20 ; -- <0026> l 
    0250 : 7464 ; -- <0026> td
    0251 : 7370 ; -- <0026> sp
    0252 : 0072 ; -- <0026>  r
    0253 : 0644 ; -- <0027> ([label load_tps_ref_cmd])
-- " ldtpse"
    0254 : 6c20 ; -- <0028> l 
    0255 : 7464 ; -- <0028> td
    0256 : 7370 ; -- <0028> sp
    0257 : 0065 ; -- <0028>  e
    0258 : 0612 ; -- <0029> ([label load_tps_enrich_cmd])
-- "      ,"
    0259 : 2020 ; -- <0030>   
    025a : 2020 ; -- <0030>   
    025b : 2020 ; -- <0030>   
    025c : 002c ; -- <0030>  ,
    025d : 067f ; -- <0031> ([label trim_lean_cmd])
-- "      ."
    025e : 2020 ; -- <0032>   
    025f : 2020 ; -- <0032>   
    0260 : 2020 ; -- <0032>   
    0261 : 002e ; -- <0032>  .
    0262 : 0692 ; -- <0033> ([label trim_rich_cmd])
-- "      \["
    0263 : 2020 ; -- <0034>   
    0264 : 2020 ; -- <0034>   
    0265 : 2020 ; -- <0034>   
    0266 : 005b ; -- <0034>  [
    0267 : 06a5 ; -- <0035> ([label trim_2lean_cmd])
-- "      \]"
    0268 : 2020 ; -- <0036>   
    0269 : 2020 ; -- <0036>   
    026a : 2020 ; -- <0036>   
    026b : 005d ; -- <0036>  ]
    026c : 06b8 ; -- <0037> ([label trim_2rich_cmd])
-- "\x0\x0"
    026d : 0000 ; -- <0038>   


-- ######## func parse_key -- = 0x026e
    026e : 3002 ; -- <0056> push i -- func parse_key
    026f : 3004 ; -- <0056> push x -- "
    0270 : 3005 ; -- <0056> push y -- "
    0271 : 303e ; -- <0056> push rtna -- "

-- memorize into ram_key_buf, pushing down existing content.
    0272 : 1008 ; -- <0043> x = key
    0273 : 0a07 ; -- <0052> i = $key_buf_max
-- :loop_627 -- = 0x0274

    0274 : 0002 ; -- <0044> a = i

    0275 : 0351 ; -- <0045> a = a<<1
    0276 : 0600 ; -- <0045> b = 0
    0277 : 5e00 ; -- <0045> av_ad_hi = 0
    0278 : 6300 ; -- <0045> av_ad_lo = ad0
    0279 : 0415 ; -- <0045> b = av_write_data
    027a : 0416 ; -- <0045> b = av_read_data

    027b : 1401 ; -- <0046> y = b
    027c : 0002 ; -- <0047> a = i
    027d : 0404 ; -- <0048> b = x

    027e : 0351 ; -- <0049> a = a<<1
    027f : 3001 ; -- <0049> push b -- push b
    0280 : 0600 ; -- <0049> b = 0
    0281 : 5e00 ; -- <0049> av_ad_hi = 0
    0282 : 6300 ; -- <0049> av_ad_lo = ad0
    0283 : 540c ; -- <0049> pop av_write_data -- pop av_write_data

    0284 : 1005 ; -- <0050> x = y


    0285 : 0002 ; -- <0052> a = i
    0286 : 0600 ; -- <0052> b = 0
    0287 : e007 ; -- <0052> br eq :end_627
    0288 : 0291 ; -- <0052> "


    0289 : 0002 ; -- <0052> a = i
    028a : 0760 ; -- <0052> b = -1
    028b : c800 ; -- <0052> i = a+b
    028c : 0b00 ; -- <0052> "


    028d : 0002 ; -- <0052> a = i
    028e : 0600 ; -- <0052> b = 0
    028f : e405 ; -- <0052> bn lt :loop_627
    0290 : 0274 ; -- <0052> "

-- :end_627 -- = 0x0291

    0291 : 0008 ; -- <0055> a = key
    0292 : 060d ; -- <0055> b = 13

    0293 : e407 ; -- <0053> bn eq :else_659
    0294 : 0298 ; -- <0053> "

    0295 : fba0 ; -- <0054> callx  parse_command
    0296 : 029f ; -- <0054> "
    0297 : fc00 ; -- <0054> "


    0298 : f80c ; -- <0057> pop rtna -- func parse_key
    0299 : 140c ; -- <0057> pop y -- "
    029a : 100c ; -- <0057> pop x -- "
    029b : 080c ; -- <0057> pop i -- "
    029c : fc00 ; -- <0057> swapra = nop

-- :cmd_ack_msg -- = 0x029d
-- "OK\x0"
    029d : 4b4f ; -- <0059> KO
    029e : 0000 ; -- <0059>   

-- ######## func parse_command -- = 0x029f
    029f : 3002 ; -- <0100> push i -- func parse_command
    02a0 : 3004 ; -- <0100> push x -- "
    02a1 : 3005 ; -- <0100> push y -- "
    02a2 : 303e ; -- <0100> push rtna -- "

    02a3 : 13a0 ; -- <0062> x = :cmd_table
    02a4 : 021d ; -- <0062> "
-- :next_cmd -- = 0x02a5
    02a5 : d004 ; -- <0064> fetch a from x
    02a6 : 03b0 ; -- <0064> "
    02a7 : e000 ; -- <0065> br az :done
    02a8 : 02e0 ; -- <0065> "

    02a9 : 0a00 ; -- <0081> i = 0
-- :loop_681 -- = 0x02aa

    02aa : 0002 ; -- <0067> a = i
    02ab : fba0 ; -- <0068> call :fetch_byte
    02ac : 01dc ; -- <0068> "
    02ad : fc00 ; -- <0068> "
    02ae : 1400 ; -- <0069> y = a
    02af : 0620 ; -- <0070> b = 32 -- asc b = " "

    02b0 : 0000 ; -- <0079> a = a
    02b1 : 0401 ; -- <0079> b = b

    02b2 : e007 ; -- <0071> br eq :else_690
    02b3 : 02c1 ; -- <0071> "

    02b4 : 062a ; -- <0072> b = 42 -- asc b = "*"
    02b5 : e007 ; -- <0073> br eq :matched
    02b6 : 02c9 ; -- <0073> "
-- parameter character.  succeed early.
    02b7 : 0002 ; -- <0075> a = i

    02b8 : 0351 ; -- <0076> a = a<<1
    02b9 : 0600 ; -- <0076> b = 0
    02ba : 5e00 ; -- <0076> av_ad_hi = 0
    02bb : 6300 ; -- <0076> av_ad_lo = ad0
    02bc : 0415 ; -- <0076> b = av_write_data
    02bd : 0416 ; -- <0076> b = av_read_data

    02be : 0005 ; -- <0077> a = y
    02bf : e407 ; -- <0078> bn eq :no_match
    02c0 : 02d5 ; -- <0078> "



    02c1 : 0002 ; -- <0081> a = i
    02c2 : 0601 ; -- <0081> b = 1
    02c3 : c800 ; -- <0081> i = a+b
    02c4 : 0b00 ; -- <0081> "


    02c5 : 0002 ; -- <0081> a = i
    02c6 : 0607 ; -- <0081> b = $key_buf_max
    02c7 : e005 ; -- <0081> br lt :loop_681
    02c8 : 02aa ; -- <0081> "

-- :end_681 -- = 0x02c9

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x02c9
    02c9 : 23a0 ; -- <0085> pa = :cmd_ack_msg
    02ca : 029d ; -- <0085> "
    02cb : fba0 ; -- <0085> callx  set_text_flag  :cmd_ack_msg
    02cc : 0b07 ; -- <0085> "
    02cd : fc00 ; -- <0085> "
    02ce : 1604 ; -- <0086> y = ($key_buf_len / 2)
    02cf : c800 ; -- <0087> fetch rtna from x+y
    02d0 : d320 ; -- <0087> "
    02d1 : fbb0 ; -- <0087> "
    02d2 : fc00 ; -- <0088> swapra = nop
    02d3 : e00f ; -- <0090> jmp :done
    02d4 : 02e0 ; -- <0090> "

-- :no_match -- = 0x02d5
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    02d5 : 5e00 ; -- <0094> ram a = $ram_terminal_connected -- av_ad_hi = 0
    02d6 : 6294 ; -- <0094> ram a = $ram_terminal_connected -- av_ad_lo = 148
    02d7 : 0015 ; -- <0094> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    02d8 : 0016 ; -- <0094> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    02d9 : e000 ; -- <0095> br az :done
    02da : 02e0 ; -- <0095> "

    02db : 1605 ; -- <0097> y = (($key_buf_len / 2) + 1)
    02dc : c800 ; -- <0098> x = x+y
    02dd : 1320 ; -- <0098> "
    02de : e00f ; -- <0099> jmp :next_cmd
    02df : 02a5 ; -- <0099> "
-- :done -- = 0x02e0

    02e0 : f80c ; -- <0102> pop rtna -- func parse_command
    02e1 : 140c ; -- <0102> pop y -- "
    02e2 : 100c ; -- <0102> pop x -- "
    02e3 : 080c ; -- <0102> pop i -- "
    02e4 : fc00 ; -- <0102> swapra = nop

-- ######## func hello_cmd -- = 0x02e5

    02e5 : 5e00 ; -- <0104> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    02e6 : 6294 ; -- <0104> ram $ram_terminal_connected = 1 -- av_ad_lo = 148
    02e7 : 5601 ; -- <0104> ram $ram_terminal_connected = 1 -- av_write_data = 1

    02e8 : fc00 ; -- <0106> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x02e9
    02e9 : 303e ; -- <0111> push rtna -- func set_plan_stop_cmd

    02ea : 5e00 ; -- <0108> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02eb : 628e ; -- <0108> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    02ec : f815 ; -- <0108> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02ed : f816 ; -- <0108> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02ee : fc00 ; -- <0109> swapra = nop
    02ef : fba0 ; -- <0111> callx  init_plan_stop
    02f0 : 0322 ; -- <0111> "
    02f1 : fc00 ; -- <0111> "

    02f2 : f80c ; -- <0113> pop rtna -- func set_plan_stop_cmd
    02f3 : fc00 ; -- <0113> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x02f4
    02f4 : 303e ; -- <0118> push rtna -- func set_plan_crank_cmd

    02f5 : 5e00 ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02f6 : 628e ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    02f7 : f815 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02f8 : f816 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02f9 : fc00 ; -- <0116> swapra = nop
    02fa : fba0 ; -- <0118> callx  init_plan_crank
    02fb : 0361 ; -- <0118> "
    02fc : fc00 ; -- <0118> "

    02fd : f80c ; -- <0120> pop rtna -- func set_plan_crank_cmd
    02fe : fc00 ; -- <0120> swapra = nop

-- ######## func set_plan_warmup_cmd -- = 0x02ff
    02ff : 303e ; -- <0125> push rtna -- func set_plan_warmup_cmd

    0300 : 5e00 ; -- <0122> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0301 : 628e ; -- <0122> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0302 : f815 ; -- <0122> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0303 : f816 ; -- <0122> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0304 : fc00 ; -- <0123> swapra = nop
    0305 : fba0 ; -- <0125> callx  init_plan_warmup
    0306 : 03c7 ; -- <0125> "
    0307 : fc00 ; -- <0125> "

    0308 : f80c ; -- <0127> pop rtna -- func set_plan_warmup_cmd
    0309 : fc00 ; -- <0127> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x030a
    030a : 303e ; -- <0132> push rtna -- func set_plan_run_cmd

    030b : 5e00 ; -- <0129> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    030c : 628e ; -- <0129> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    030d : f815 ; -- <0129> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    030e : f816 ; -- <0129> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    030f : fc00 ; -- <0130> swapra = nop
    0310 : fba0 ; -- <0132> callx  init_plan_run
    0311 : 06cb ; -- <0132> "
    0312 : fc00 ; -- <0132> "

    0313 : f80c ; -- <0134> pop rtna -- func set_plan_run_cmd
    0314 : fc00 ; -- <0134> swapra = nop

-- ######## func set_plan_learn_cmd -- = 0x0315
    0315 : 303e ; -- <0139> push rtna -- func set_plan_learn_cmd

    0316 : 5e00 ; -- <0136> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0317 : 628e ; -- <0136> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0318 : f815 ; -- <0136> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0319 : f816 ; -- <0136> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    031a : fc00 ; -- <0137> swapra = nop
    031b : fba0 ; -- <0139> callx  init_plan_learn_stoich
    031c : 0467 ; -- <0139> "
    031d : fc00 ; -- <0139> "

    031e : f80c ; -- <0141> pop rtna -- func set_plan_learn_cmd
    031f : fc00 ; -- <0141> swapra = nop


-- :plan_name_stop -- = 0x0320
-- "STP\x0"
    0320 : 5453 ; -- <0002> TS
    0321 : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x0322
    0322 : 303e ; -- <0023> push rtna -- func init_plan_stop

-- set up the stop plan.
    0323 : fba0 ; -- <0006> callx  clear_ign_history
    0324 : 083c ; -- <0006> "
    0325 : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    0326 : 5e00 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    0327 : 6282 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 130
    0328 : 57a0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    0329 : 025b ; -- <0008> "
    032a : 5e00 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    032b : 6284 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    032c : 57a0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    032d : 36b0 ; -- <0009> "
    032e : 83a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    032f : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    0330 : 5e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0331 : 6290 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    0332 : 5600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    0333 : 8600 ; -- <0016> puff_len_us = 0

-- memorize state.
    0334 : 5e00 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    0335 : 6288 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 136
    0336 : 57a0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    0337 : 0320 ; -- <0019> "
    0338 : 5e00 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    0339 : 628a ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 138
    033a : 57a0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    033b : 0347 ; -- <0020> "
    033c : 5e00 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    033d : 628c ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 140
    033e : 57a0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    033f : 034b ; -- <0021> "
    0340 : 5e00 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0341 : 628e ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 142
    0342 : 57a0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0343 : 0346 ; -- <0022> "

    0344 : f80c ; -- <0024> pop rtna -- func init_plan_stop
    0345 : fc00 ; -- <0024> swapra = nop

-- ######## func destroy_plan_stop -- = 0x0346


    0346 : fc00 ; -- <0027> swapra = nop

-- ######## func puff_len_stop -- = 0x0347

    0347 : 5e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0348 : 6290 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    0349 : 5600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0

    034a : fc00 ; -- <0031> swapra = nop

-- ######## func leave_stop -- = 0x034b
    034b : 303e ; -- <0044> push rtna -- func leave_stop

-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    034c : 001e ; -- <0035> a = power_duty
    034d : 0680 ; -- <0036> b = $ign_switch_off_mask
    034e : e403 ; -- <0037> bn and0z :stay
    034f : 035d ; -- <0037> "
    0350 : 5e00 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    0351 : 6280 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 128
    0352 : 0015 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0353 : 0016 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0354 : 0608 ; -- <0039> b = ($ign_history_len / 2)
    0355 : e006 ; -- <0040> br gt :stay
    0356 : 035d ; -- <0040> "
    0357 : fba0 ; -- <0041> callx  destroy_plan_stop
    0358 : 0346 ; -- <0041> "
    0359 : fc00 ; -- <0041> "
    035a : fba0 ; -- <0042> callx  init_plan_crank
    035b : 0361 ; -- <0042> "
    035c : fc00 ; -- <0042> "
-- :stay -- = 0x035d

    035d : f80c ; -- <0045> pop rtna -- func leave_stop
    035e : fc00 ; -- <0045> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 10000 to 20000 us length in about 5 seconds.

-- :plan_name_crank -- = 0x035f
-- "CR\x0"
    035f : 5243 ; -- <0011> RC
    0360 : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x0361
    0361 : 303e ; -- <0033> push rtna -- func init_plan_crank

-- set up the crank plan.
    0362 : 5e00 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    0363 : 6292 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 146
    0364 : 5600 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0365 : 5e00 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    0366 : 6282 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 130
    0367 : 5657 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    0368 : 5e00 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0369 : 6284 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    036a : 57a0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    036b : 36b0 ; -- <0018> "
    036c : 83a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    036d : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    036e : 5e00 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    036f : 6290 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 144
    0370 : 57a0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 10000
    0371 : 2710 ; -- <0023> "
    0372 : 87a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    0373 : 2710 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    0374 : fba0 ; -- <0026> callx  clear_ign_history
    0375 : 083c ; -- <0026> "
    0376 : fc00 ; -- <0026> "

-- memorize state.
    0377 : 5e00 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    0378 : 6288 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 136
    0379 : 57a0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    037a : 035f ; -- <0029> "
    037b : 5e00 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    037c : 628a ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 138
    037d : 57a0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    037e : 038a ; -- <0030> "
    037f : 5e00 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    0380 : 628c ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 140
    0381 : 57a0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    0382 : 03a8 ; -- <0031> "
    0383 : 5e00 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    0384 : 628e ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 142
    0385 : 57a0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    0386 : 0389 ; -- <0032> "

    0387 : f80c ; -- <0034> pop rtna -- func init_plan_crank
    0388 : fc00 ; -- <0034> swapra = nop

-- ######## func destroy_plan_crank -- = 0x0389


    0389 : fc00 ; -- <0037> swapra = nop

-- ######## func puff_len_crank -- = 0x038a
    038a : 303e ; -- <0054> push rtna -- func puff_len_crank

    038b : 5e00 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    038c : 6292 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 146
    038d : 0015 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    038e : 0016 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    038f : 0604 ; -- <0040> b = $crank_max_puffs
    0390 : e006 ; -- <0041> br gt :puff_limit
    0391 : 039f ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    0392 : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    0393 : 09c4 ; -- <0043> "
    0394 : fba0 ; -- <0044> call :multiply
    0395 : 0170 ; -- <0044> "
    0396 : fc00 ; -- <0044> "
    0397 : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    0398 : 2710 ; -- <0045> "
    0399 : 5e00 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    039a : 6290 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 144
    039b : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    039c : 5700 ; -- <0046> "
    039d : e00f ; -- <0047> jmp :done
    039e : 03a6 ; -- <0047> "
-- :puff_limit -- = 0x039f
-- prevent the puff counter from going higher & eventually rolling over.
    039f : 5e00 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    03a0 : 6292 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 146
    03a1 : 5604 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 4
-- accept max puff len.
    03a2 : 5e00 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    03a3 : 6290 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 144
    03a4 : 57a0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    03a5 : 4e20 ; -- <0052> "
-- :done -- = 0x03a6

    03a6 : f80c ; -- <0055> pop rtna -- func puff_len_crank
    03a7 : fc00 ; -- <0055> swapra = nop

-- ######## func leave_crank -- = 0x03a8
    03a8 : 303e ; -- <0071> push rtna -- func leave_crank

    03a9 : fba0 ; -- <0057> callx  check_engine_stop  a
    03aa : 0c3f ; -- <0057> "
    03ab : fc00 ; -- <0057> "
    03ac : 0008 ; -- <0057> a = pa
    03ad : e400 ; -- <0058> bn az :done
    03ae : 03c3 ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    03af : 5e00 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    03b0 : 627e ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 126
    03b1 : 0015 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    03b2 : 0016 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    03b3 : e000 ; -- <0062> br az :stay
    03b4 : 03c3 ; -- <0062> "
    03b5 : 5e00 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    03b6 : 627c ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 124
    03b7 : 0015 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    03b8 : 0016 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    03b9 : 07a0 ; -- <0064> b = $crank_success_rpm
    03ba : 0320 ; -- <0064> "
    03bb : e005 ; -- <0065> br lt :stay
    03bc : 03c3 ; -- <0065> "
    03bd : fba0 ; -- <0066> callx  destroy_plan_crank
    03be : 0389 ; -- <0066> "
    03bf : fc00 ; -- <0066> "
    03c0 : fba0 ; -- <0067> callx  init_plan_warmup
    03c1 : 03c7 ; -- <0067> "
    03c2 : fc00 ; -- <0067> "
-- :stay -- = 0x03c3

-- :done -- = 0x03c3

    03c3 : f80c ; -- <0072> pop rtna -- func leave_crank
    03c4 : fc00 ; -- <0072> swapra = nop



-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.
-- 750 = 0 degF.
-- max 6000 & min 4500 over a temp range 750 to 0x4c0 gives 6900 us puff at 74 deg F.  program rev 594.
-- this is used if the engine temp is unavailable.

-- :plan_name_warmup -- = 0x03c5
-- "WM\x0"
    03c5 : 4d57 ; -- <0016> MW
    03c6 : 0000 ; -- <0016>   

-- ######## func init_plan_warmup -- = 0x03c7

-- set up the warmup plan.
    03c7 : 5e00 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03c8 : 6214 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03c9 : 0015 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03ca : 0016 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03cb : 063c ; -- <0021> b = $warmup_timeout_sec
    03cc : 5e00 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_hi = 0
    03cd : 6296 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_lo = 150
    03ce : c800 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_write_data = a+b
    03cf : 5700 ; -- <0022> "

-- memorize state.
    03d0 : 5e00 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    03d1 : 6288 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 136
    03d2 : 57a0 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    03d3 : 03c5 ; -- <0025> "
    03d4 : 5e00 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    03d5 : 628a ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 138
    03d6 : 57a0 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    03d7 : 03e2 ; -- <0026> "
    03d8 : 5e00 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    03d9 : 628c ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 140
    03da : 57a0 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    03db : 0414 ; -- <0027> "
    03dc : 5e00 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    03dd : 628e ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 142
    03de : 57a0 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    03df : 03e1 ; -- <0028> "

    03e0 : fc00 ; -- <0030> swapra = nop

-- ######## func destroy_plan_warmup -- = 0x03e1


    03e1 : fc00 ; -- <0033> swapra = nop

-- ######## func puff_len_warmup -- = 0x03e2
    03e2 : 3004 ; -- <0070> push x -- func puff_len_warmup
    03e3 : 303e ; -- <0070> push rtna -- "

-- x = enrichment us.
    03e4 : 13a0 ; -- <0036> x = $warmup_limping_enrichment_us
    03e5 : 07d0 ; -- <0036> "

-- check engine block temp sensor.  if valid, enrich by a linear function:
-- {warmup_min_temp_adc...warmup_success_temp_adc} -> {$warmup_max_enrichment_us...0}
    03e6 : 0202 ; -- <0040> a = $anmux_engine_block_temp

    03e7 : 0351 ; -- <0041> a = a<<1
    03e8 : 0616 ; -- <0041> b = 22
    03e9 : 5e00 ; -- <0041> av_ad_hi = 0
    03ea : 6300 ; -- <0041> av_ad_lo = ad0
    03eb : 0415 ; -- <0041> b = av_write_data
    03ec : 0416 ; -- <0041> b = av_read_data

-- b = sensor reading in adc counts.
    03ed : 03a0 ; -- <0043> a = $temp_ceiling_adc
    03ee : 0ff0 ; -- <0043> "
    03ef : e005 ; -- <0044> br lt :temp_invalid
    03f0 : 040a ; -- <0044> "
    03f1 : 03a0 ; -- <0045> a = $warmup_success_temp_adc
    03f2 : 04c0 ; -- <0045> "
    03f3 : e005 ; -- <0046> br lt :too_warm
    03f4 : 040a ; -- <0046> "
    03f5 : 03a0 ; -- <0047> a = $warmup_min_temp_adc
    03f6 : 02ee ; -- <0047> "
    03f7 : e005 ; -- <0048> br lt :in_range
    03f8 : 03fb ; -- <0048> "
    03f9 : 07a0 ; -- <0049> b = $warmup_min_temp_adc
    03fa : 02ee ; -- <0049> "
-- :in_range -- = 0x03fb
-- negate the sensor reading so as to subtract it from warmup_success_temp_adc.
    03fb : 0360 ; -- <0052> a = 0xffff
    03fc : c800 ; -- <0053> b = xor
    03fd : 0738 ; -- <0053> "
    03fe : 0201 ; -- <0054> a = 1
    03ff : c800 ; -- <0055> b = a+b
    0400 : 0700 ; -- <0055> "
    0401 : 03a0 ; -- <0056> a = $warmup_success_temp_adc
    0402 : 04c0 ; -- <0056> "
    0403 : c800 ; -- <0057> b = a+b
    0404 : 0700 ; -- <0057> "
-- b = how many counts "cold" we are.  multiply that by the slope warmup_us_per_cold_adc.
    0405 : 020c ; -- <0059> a = $warmup_us_per_cold_adc
    0406 : fba0 ; -- <0060> call :multiply
    0407 : 0170 ; -- <0060> "
    0408 : fc00 ; -- <0060> "
    0409 : 1000 ; -- <0061> x = a
-- :too_warm -- = 0x040a
-- :temp_invalid -- = 0x040a

-- apply total of base amount and enrichment.
-- $warmup_min_puff_len_us <= total <= ($warmup_min_puff_len_us + $warmup_max_enrichment_us)
    040a : 03a0 ; -- <0067> a = $warmup_min_puff_len_us
    040b : 09c4 ; -- <0067> "
    040c : 0404 ; -- <0068> b = x
    040d : 5e00 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    040e : 6290 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 144
    040f : c800 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    0410 : 5700 ; -- <0069> "

    0411 : f80c ; -- <0071> pop rtna -- func puff_len_warmup
    0412 : 100c ; -- <0071> pop x -- "
    0413 : fc00 ; -- <0071> swapra = nop

-- ######## func leave_warmup -- = 0x0414
    0414 : 303e ; -- <0099> push rtna -- func leave_warmup

    0415 : fba0 ; -- <0073> callx  check_engine_stop  a
    0416 : 0c3f ; -- <0073> "
    0417 : fc00 ; -- <0073> "
    0418 : 0008 ; -- <0073> a = pa
    0419 : e400 ; -- <0074> bn az :done
    041a : 0448 ; -- <0074> "

-- transition to plan_run if warmup has expired.
    041b : 5e00 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    041c : 6214 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    041d : 0015 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    041e : 0016 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    041f : 5e00 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_hi = 0
    0420 : 6296 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_lo = 150
    0421 : 0415 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_write_data -- start read cycle
    0422 : 0416 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_read_data -- finish read cycle

    0423 : 0000 ; -- <0083> a = a
    0424 : 0401 ; -- <0083> b = b

    0425 : e406 ; -- <0079> bn gt :else_1061
    0426 : 042f ; -- <0079> "

    0427 : fba0 ; -- <0080> callx  destroy_plan_warmup
    0428 : 03e1 ; -- <0080> "
    0429 : fc00 ; -- <0080> "
    042a : fba0 ; -- <0081> callx  init_plan_run
    042b : 06cb ; -- <0081> "
    042c : fc00 ; -- <0081> "
    042d : e00f ; -- <0082> jmp :done
    042e : 0448 ; -- <0082> "


-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    042f : 0202 ; -- <0087> a = $anmux_engine_block_temp

    0430 : 0351 ; -- <0088> a = a<<1
    0431 : 0616 ; -- <0088> b = 22
    0432 : 5e00 ; -- <0088> av_ad_hi = 0
    0433 : 6300 ; -- <0088> av_ad_lo = ad0
    0434 : 0415 ; -- <0088> b = av_write_data
    0435 : 0416 ; -- <0088> b = av_read_data

    0436 : 03a0 ; -- <0089> a = $temp_ceiling_adc
    0437 : 0ff0 ; -- <0089> "

    0438 : 0000 ; -- <0096> a = a
    0439 : 0401 ; -- <0096> b = b

    043a : e406 ; -- <0090> bn gt :else_1082
    043b : 0448 ; -- <0090> "

    043c : 03a0 ; -- <0091> a = $warmup_success_temp_adc
    043d : 04c0 ; -- <0091> "

    043e : 0000 ; -- <0095> a = a
    043f : 0401 ; -- <0095> b = b

    0440 : e405 ; -- <0092> bn lt :else_1088
    0441 : 0448 ; -- <0092> "

    0442 : fba0 ; -- <0093> callx  destroy_plan_warmup
    0443 : 03e1 ; -- <0093> "
    0444 : fc00 ; -- <0093> "
    0445 : fba0 ; -- <0094> callx  init_plan_run
    0446 : 06cb ; -- <0094> "
    0447 : fc00 ; -- <0094> "



-- :done -- = 0x0448

    0448 : f80c ; -- <0100> pop rtna -- func leave_warmup
    0449 : fc00 ; -- <0100> swapra = nop



-- :rpm_cells -- = 0x044a
    044a : 01f4 ; -- <0004> 500
    044b : 0271 ; -- <0005> 625
    044c : 030d ; -- <0006> 781
    044d : 03d1 ; -- <0007> 977
    044e : 04c5 ; -- <0008> 1221
    044f : 05f6 ; -- <0009> 1526
    0450 : 0773 ; -- <0010> 1907
    0451 : 0950 ; -- <0011> 2384
    0452 : 0ba4 ; -- <0012> 2980
    0453 : 0e8d ; -- <0013> 3725
    0454 : 1231 ; -- <0014> 4657
    0455 : 16bd ; -- <0015> 5821
    0456 : 1c6c ; -- <0016> 7276
    0457 : ffff ; -- <0017> 0xffff




-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed.

-- o2 sensor interpetation & state machine.

-- default maps
-- :default_tps_reference -- = 0x0458
    0458 : 0100 ; -- <0064> 0x0100
    0459 : 0540 ; -- <0065> 0x0540
    045a : 0540 ; -- <0066> 0x0540
    045b : 0540 ; -- <0067> 0x0540
    045c : 0540 ; -- <0068> 0x0540
    045d : 0540 ; -- <0069> 0x0540
    045e : 0540 ; -- <0070> 0x0540
    045f : 0540 ; -- <0071> 0x0540
    0460 : 0540 ; -- <0072> 0x0540
    0461 : 0540 ; -- <0073> 0x0540
    0462 : 0540 ; -- <0074> 0x0540
    0463 : 0540 ; -- <0075> 0x0540
    0464 : 0b00 ; -- <0076> 0x0b00

-- :plan_name_learn_stoich -- = 0x0465
-- "LN\x0"
    0465 : 4e4c ; -- <0079> NL
    0466 : 0000 ; -- <0079>   

-- ######## func init_plan_learn_stoich -- = 0x0467

-- set up the learn_stoich plan.
    0467 : 5e00 ; -- <0083> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    0468 : 63a0 ; -- <0083> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 348
    0469 : 015c ; -- <0083> "
    046a : 560a ; -- <0083> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- memorize state.
    046b : 5e00 ; -- <0086> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_hi = 0
    046c : 6288 ; -- <0086> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_lo = 136
    046d : 57a0 ; -- <0086> ram $ram_plan_name = :plan_name_learn_stoich -- av_write_data = :plan_name_learn_stoich
    046e : 0465 ; -- <0086> "
    046f : 5e00 ; -- <0087> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_hi = 0
    0470 : 628a ; -- <0087> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_lo = 138
    0471 : 57a0 ; -- <0087> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_write_data = :puff_len_learn_stoich
    0472 : 0481 ; -- <0087> "
    0473 : 5e00 ; -- <0088> ram $ram_transition_func = :leave_learn_stoich -- av_ad_hi = 0
    0474 : 628c ; -- <0088> ram $ram_transition_func = :leave_learn_stoich -- av_ad_lo = 140
    0475 : 57a0 ; -- <0088> ram $ram_transition_func = :leave_learn_stoich -- av_write_data = :leave_learn_stoich
    0476 : 058b ; -- <0088> "
    0477 : 5e00 ; -- <0089> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_hi = 0
    0478 : 628e ; -- <0089> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_lo = 142
    0479 : 57a0 ; -- <0089> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_write_data = :destroy_plan_learn_stoich
    047a : 047c ; -- <0089> "

    047b : fc00 ; -- <0091> swapra = nop

-- ######## func destroy_plan_learn_stoich -- = 0x047c


    047c : fc00 ; -- <0094> swapra = nop

-- :lrns_trim_up_msg -- = 0x047d
-- "trR\x0"
    047d : 7274 ; -- <0096> rt
    047e : 0052 ; -- <0096>  R
-- :lrns_trim_down_msg -- = 0x047f
-- "trL\x0"
    047f : 7274 ; -- <0098> rt
    0480 : 004c ; -- <0098>  L

-- ######## func puff_len_learn_stoich -- = 0x0481
    0481 : 3002 ; -- <0133> push i -- func puff_len_learn_stoich
    0482 : 3003 ; -- <0133> push j -- "
    0483 : 3006 ; -- <0133> push g6 -- "
    0484 : 3007 ; -- <0133> push g7 -- "
    0485 : 303e ; -- <0133> push rtna -- "

    0486 : 5e00 ; -- <0101> ram i = $ram_lrns_ticks_remain -- av_ad_hi = 0
    0487 : 63a0 ; -- <0101> ram i = $ram_lrns_ticks_remain -- av_ad_lo = 348
    0488 : 015c ; -- <0101> "
    0489 : 0815 ; -- <0101> ram i = $ram_lrns_ticks_remain -- i = av_write_data -- start read cycle
    048a : 0816 ; -- <0101> ram i = $ram_lrns_ticks_remain -- i = av_read_data -- finish read cycle

    048b : 0002 ; -- <0132> a = i
    048c : 0600 ; -- <0132> b = 0

    048d : e406 ; -- <0102> bn gt :else_1165
    048e : 0497 ; -- <0102> "

    048f : 0f60 ; -- <0103> j = -1
    0490 : 5e00 ; -- <0104> ram $ram_lrns_ticks_remain = i+j -- av_ad_hi = 0
    0491 : 63a0 ; -- <0104> ram $ram_lrns_ticks_remain = i+j -- av_ad_lo = 348
    0492 : 015c ; -- <0104> "
    0493 : c800 ; -- <0104> ram $ram_lrns_ticks_remain = i+j -- av_write_data = i+j
    0494 : 5710 ; -- <0104> "

    0495 : e00f ; -- <0106> jmp :end_1165
    0496 : 04d6 ; -- <0106> "

    0497 : 5e00 ; -- <0107> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    0498 : 63a0 ; -- <0107> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 348
    0499 : 015c ; -- <0107> "
    049a : 560a ; -- <0107> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    049b : 5e00 ; -- <0110> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    049c : 6290 ; -- <0110> ram i = $ram_next_puff_len_us -- av_ad_lo = 144
    049d : 0815 ; -- <0110> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    049e : 0816 ; -- <0110> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    049f : 0e00 ; -- <0111> j = 0
    04a0 : 5e00 ; -- <0112> ram g6 = $ram_o2_state -- av_ad_hi = 0
    04a1 : 63a0 ; -- <0112> ram g6 = $ram_o2_state -- av_ad_lo = 350
    04a2 : 015e ; -- <0112> "
    04a3 : 1815 ; -- <0112> ram g6 = $ram_o2_state -- g6 = av_write_data -- start read cycle
    04a4 : 1816 ; -- <0112> ram g6 = $ram_o2_state -- g6 = av_read_data -- finish read cycle
    04a5 : fba0 ; -- <0113> callx  interpret_o2
    04a6 : 0546 ; -- <0113> "
    04a7 : fc00 ; -- <0113> "
    04a8 : 5e00 ; -- <0114> ram g7 = $ram_o2_state -- av_ad_hi = 0
    04a9 : 63a0 ; -- <0114> ram g7 = $ram_o2_state -- av_ad_lo = 350
    04aa : 015e ; -- <0114> "
    04ab : 1c15 ; -- <0114> ram g7 = $ram_o2_state -- g7 = av_write_data -- start read cycle
    04ac : 1c16 ; -- <0114> ram g7 = $ram_o2_state -- g7 = av_read_data -- finish read cycle

    04ad : 0007 ; -- <0131> a = g7
    04ae : 0601 ; -- <0131> b = 1

    04af : e407 ; -- <0115> bn eq :else_1199
    04b0 : 04c6 ; -- <0115> "

-- sensing a lean condition.  trim up to enrich.

    04b1 : 0002 ; -- <0119> a = i
    04b2 : 07a0 ; -- <0119> b = 10000
    04b3 : 2710 ; -- <0119> "

    04b4 : e405 ; -- <0117> bn lt :else_1204
    04b5 : 04b8 ; -- <0117> "

    04b6 : 0fa0 ; -- <0118> j = $lrns_puff_step_up_us
    04b7 : 0258 ; -- <0118> "

    04b8 : 23a0 ; -- <0120> pa = :lrns_trim_up_msg
    04b9 : 047d ; -- <0120> "
    04ba : fba0 ; -- <0120> callx  set_text_flag  :lrns_trim_up_msg
    04bb : 0b07 ; -- <0120> "
    04bc : fc00 ; -- <0120> "

    04bd : 0006 ; -- <0124> a = g6
    04be : 0602 ; -- <0124> b = 2

    04bf : e407 ; -- <0121> bn eq :else_1215
    04c0 : 04c4 ; -- <0121> "

-- o2 state just switched to lean.  adjust map.
    04c1 : fba0 ; -- <0123> callx  learn_smap
    04c2 : 04e2 ; -- <0123> "
    04c3 : fc00 ; -- <0123> "


    04c4 : e00f ; -- <0126> jmp :end_1199
    04c5 : 04d2 ; -- <0126> "

-- sensing a rich condition.  trim down to lean it out.

    04c6 : 0002 ; -- <0130> a = i
    04c7 : 07a0 ; -- <0130> b = 2000
    04c8 : 07d0 ; -- <0130> "

    04c9 : e406 ; -- <0128> bn gt :else_1225
    04ca : 04cd ; -- <0128> "

    04cb : 0fa0 ; -- <0129> j = $lrns_puff_step_down_us
    04cc : ffdf ; -- <0129> "

    04cd : 23a0 ; -- <0131> pa = :lrns_trim_down_msg
    04ce : 047f ; -- <0131> "
    04cf : fba0 ; -- <0131> callx  set_text_flag  :lrns_trim_down_msg
    04d0 : 0b07 ; -- <0131> "
    04d1 : fc00 ; -- <0131> "

    04d2 : 5e00 ; -- <0132> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    04d3 : 6290 ; -- <0132> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 144
    04d4 : c800 ; -- <0132> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    04d5 : 5710 ; -- <0132> "


    04d6 : f80c ; -- <0134> pop rtna -- func puff_len_learn_stoich
    04d7 : 1c0c ; -- <0134> pop g7 -- "
    04d8 : 180c ; -- <0134> pop g6 -- "
    04d9 : 0c0c ; -- <0134> pop j -- "
    04da : 080c ; -- <0134> pop i -- "
    04db : fc00 ; -- <0134> swapra = nop

-- :lrns_enrich_msg -- = 0x04dc
-- "lrnR\x0"
    04dc : 726c ; -- <0136> rl
    04dd : 526e ; -- <0136> Rn
    04de : 0000 ; -- <0136>   
-- :lrns_lean_msg -- = 0x04df
-- "lrnL\x0"
    04df : 726c ; -- <0138> rl
    04e0 : 4c6e ; -- <0138> Ln
    04e1 : 0000 ; -- <0138>   

-- ######## func learn_smap -- = 0x04e2
    04e2 : 3002 ; -- <0175> push i -- func learn_smap
    04e3 : 3004 ; -- <0175> push x -- "
    04e4 : 3005 ; -- <0175> push y -- "
    04e5 : 303e ; -- <0175> push rtna -- "

    04e6 : 5e00 ; -- <0141> ram a = $ram_rpm_valid -- av_ad_hi = 0
    04e7 : 627e ; -- <0141> ram a = $ram_rpm_valid -- av_ad_lo = 126
    04e8 : 0015 ; -- <0141> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    04e9 : 0016 ; -- <0141> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    04ea : 0000 ; -- <0174> a = a
    04eb : 0601 ; -- <0174> b = 1

    04ec : e407 ; -- <0142> bn eq :else_1260
    04ed : 053d ; -- <0142> "

-- let g6 = map cell num.  x = map puff len.  i = observed stoich puff len.
    04ee : 5e00 ; -- <0144> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    04ef : 627c ; -- <0144> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    04f0 : 2015 ; -- <0144> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    04f1 : 2016 ; -- <0144> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    04f2 : fba0 ; -- <0145> callx  find_rpm_cell  pa  g6
    04f3 : 0591 ; -- <0145> "
    04f4 : fc00 ; -- <0145> "
    04f5 : 1808 ; -- <0145> g6 = pa
    04f6 : 0006 ; -- <0146> a = g6

    04f7 : 0351 ; -- <0147> a = a<<1
    04f8 : 0698 ; -- <0147> b = 152
    04f9 : 5e00 ; -- <0147> av_ad_hi = 0
    04fa : 6300 ; -- <0147> av_ad_lo = ad0
    04fb : 0415 ; -- <0147> b = av_write_data
    04fc : 0416 ; -- <0147> b = av_read_data

    04fd : 1001 ; -- <0148> x = b
    04fe : 5e00 ; -- <0149> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    04ff : 6290 ; -- <0149> ram i = $ram_next_puff_len_us -- av_ad_lo = 144
    0500 : 0815 ; -- <0149> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    0501 : 0816 ; -- <0149> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    0502 : 17a0 ; -- <0150> y = (0xffff - $lrns_map_step + 1)
    0503 : ff38 ; -- <0150> "

    0504 : c800 ; -- <0157> a = x+y
    0505 : 0320 ; -- <0157> "
    0506 : 0402 ; -- <0157> b = i

    0507 : e406 ; -- <0151> bn gt :else_1287
    0508 : 0517 ; -- <0151> "

-- map is richer than observed stoich.  lean the map 1 step.
    0509 : 0006 ; -- <0153> a = g6
    050a : c800 ; -- <0154> b = x+y
    050b : 0720 ; -- <0154> "

    050c : 0351 ; -- <0155> a = a<<1
    050d : 3001 ; -- <0155> push b -- push b
    050e : 0698 ; -- <0155> b = 152
    050f : 5e00 ; -- <0155> av_ad_hi = 0
    0510 : 6300 ; -- <0155> av_ad_lo = ad0
    0511 : 540c ; -- <0155> pop av_write_data -- pop av_write_data

    0512 : 23a0 ; -- <0156> pa = :lrns_lean_msg
    0513 : 04df ; -- <0156> "
    0514 : fba0 ; -- <0156> callx  set_text_flag  :lrns_lean_msg
    0515 : 0b07 ; -- <0156> "
    0516 : fc00 ; -- <0156> "

    0517 : 16c8 ; -- <0158> y = $lrns_map_step

    0518 : c800 ; -- <0165> a = x+y
    0519 : 0320 ; -- <0165> "
    051a : 0402 ; -- <0165> b = i

    051b : e405 ; -- <0159> bn lt :else_1307
    051c : 052b ; -- <0159> "

-- map is leaner than observed stoich.  rich the map 1 step.
    051d : 0006 ; -- <0161> a = g6
    051e : c800 ; -- <0162> b = x+y
    051f : 0720 ; -- <0162> "

    0520 : 0351 ; -- <0163> a = a<<1
    0521 : 3001 ; -- <0163> push b -- push b
    0522 : 0698 ; -- <0163> b = 152
    0523 : 5e00 ; -- <0163> av_ad_hi = 0
    0524 : 6300 ; -- <0163> av_ad_lo = ad0
    0525 : 540c ; -- <0163> pop av_write_data -- pop av_write_data

    0526 : 23a0 ; -- <0164> pa = :lrns_enrich_msg
    0527 : 04dc ; -- <0164> "
    0528 : fba0 ; -- <0164> callx  set_text_flag  :lrns_enrich_msg
    0529 : 0b07 ; -- <0164> "
    052a : fc00 ; -- <0164> "


-- dump smap if we haven't done so lately.
    052b : 5e00 ; -- <0168> ram a = $ram_last_learn_second -- av_ad_hi = 0
    052c : 62b2 ; -- <0168> ram a = $ram_last_learn_second -- av_ad_lo = 178
    052d : 0015 ; -- <0168> ram a = $ram_last_learn_second -- a = av_write_data -- start read cycle
    052e : 0016 ; -- <0168> ram a = $ram_last_learn_second -- a = av_read_data -- finish read cycle
    052f : 5e00 ; -- <0169> ram b = $ram_seconds_cnt -- av_ad_hi = 0
    0530 : 6242 ; -- <0169> ram b = $ram_seconds_cnt -- av_ad_lo = 66
    0531 : 0415 ; -- <0169> ram b = $ram_seconds_cnt -- b = av_write_data -- start read cycle
    0532 : 0416 ; -- <0169> ram b = $ram_seconds_cnt -- b = av_read_data -- finish read cycle

    0533 : 0000 ; -- <0173> a = a
    0534 : 0401 ; -- <0173> b = b

    0535 : e007 ; -- <0170> br eq :else_1333
    0536 : 053d ; -- <0170> "

    0537 : 5e00 ; -- <0171> ram $ram_last_learn_second = b -- av_ad_hi = 0
    0538 : 62b2 ; -- <0171> ram $ram_last_learn_second = b -- av_ad_lo = 178
    0539 : 5401 ; -- <0171> ram $ram_last_learn_second = b -- av_write_data = b
    053a : fba0 ; -- <0172> callx  dump_smap_cmd
    053b : 05ae ; -- <0172> "
    053c : fc00 ; -- <0172> "



    053d : f80c ; -- <0176> pop rtna -- func learn_smap
    053e : 140c ; -- <0176> pop y -- "
    053f : 100c ; -- <0176> pop x -- "
    0540 : 080c ; -- <0176> pop i -- "
    0541 : fc00 ; -- <0176> swapra = nop

-- :o2_rich_msg -- = 0x0542
-- "o2R\x0"
    0542 : 326f ; -- <0178> 2o
    0543 : 0052 ; -- <0178>  R
-- :o2_lean_msg -- = 0x0544
-- "o2L\x0"
    0544 : 326f ; -- <0180> 2o
    0545 : 004c ; -- <0180>  L

-- ######## func interpret_o2 -- = 0x0546

    0546 : 5e00 ; -- <0183> ram a = $ram_o2_state -- av_ad_hi = 0
    0547 : 63a0 ; -- <0183> ram a = $ram_o2_state -- av_ad_lo = 350
    0548 : 015e ; -- <0183> "
    0549 : 0015 ; -- <0183> ram a = $ram_o2_state -- a = av_write_data -- start read cycle
    054a : 0016 ; -- <0183> ram a = $ram_o2_state -- a = av_read_data -- finish read cycle

    054b : 0000 ; -- <0194> a = a
    054c : 0601 ; -- <0194> b = 1

    054d : e007 ; -- <0184> br eq :else_1357
    054e : 0564 ; -- <0184> "

-- check sensor for lean state.
    054f : 0205 ; -- <0186> a = $o2_adc_channel

    0550 : 0351 ; -- <0187> a = a<<1
    0551 : 0626 ; -- <0187> b = 38
    0552 : 5e00 ; -- <0187> av_ad_hi = 0
    0553 : 6300 ; -- <0187> av_ad_lo = ad0
    0554 : 0415 ; -- <0187> b = av_write_data
    0555 : 0416 ; -- <0187> b = av_read_data

    0556 : 03a0 ; -- <0188> a = $o2_lean_thresh_adc
    0557 : 01c2 ; -- <0188> "

    0558 : 0000 ; -- <0193> a = a
    0559 : 0401 ; -- <0193> b = b

    055a : e406 ; -- <0189> bn gt :else_1370
    055b : 0564 ; -- <0189> "

    055c : 5e00 ; -- <0190> ram $ram_o2_state = $o2_state_lean -- av_ad_hi = 0
    055d : 63a0 ; -- <0190> ram $ram_o2_state = $o2_state_lean -- av_ad_lo = 350
    055e : 015e ; -- <0190> "
    055f : 5601 ; -- <0190> ram $ram_o2_state = $o2_state_lean -- av_write_data = 1
    0560 : 5e00 ; -- <0191> ram $ram_o2_been_lean = 1 -- av_ad_hi = 0
    0561 : 63a0 ; -- <0191> ram $ram_o2_been_lean = 1 -- av_ad_lo = 354
    0562 : 0162 ; -- <0191> "
    0563 : 5601 ; -- <0191> ram $ram_o2_been_lean = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_lean_msg



    0564 : 0000 ; -- <0205> a = a
    0565 : 0602 ; -- <0205> b = 2

    0566 : e007 ; -- <0195> br eq :else_1382
    0567 : 057d ; -- <0195> "

-- check sensor for rich state.
    0568 : 0205 ; -- <0197> a = $o2_adc_channel

    0569 : 0351 ; -- <0198> a = a<<1
    056a : 0626 ; -- <0198> b = 38
    056b : 5e00 ; -- <0198> av_ad_hi = 0
    056c : 6300 ; -- <0198> av_ad_lo = ad0
    056d : 0415 ; -- <0198> b = av_write_data
    056e : 0416 ; -- <0198> b = av_read_data

    056f : 03a0 ; -- <0199> a = $o2_rich_thresh_adc
    0570 : 02bc ; -- <0199> "

    0571 : 0000 ; -- <0204> a = a
    0572 : 0401 ; -- <0204> b = b

    0573 : e405 ; -- <0200> bn lt :else_1395
    0574 : 057d ; -- <0200> "

    0575 : 5e00 ; -- <0201> ram $ram_o2_state = $o2_state_rich -- av_ad_hi = 0
    0576 : 63a0 ; -- <0201> ram $ram_o2_state = $o2_state_rich -- av_ad_lo = 350
    0577 : 015e ; -- <0201> "
    0578 : 5602 ; -- <0201> ram $ram_o2_state = $o2_state_rich -- av_write_data = 2
    0579 : 5e00 ; -- <0202> ram $ram_o2_been_rich = 1 -- av_ad_hi = 0
    057a : 63a0 ; -- <0202> ram $ram_o2_been_rich = 1 -- av_ad_lo = 352
    057b : 0160 ; -- <0202> "
    057c : 5601 ; -- <0202> ram $ram_o2_been_rich = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_rich_msg



    057d : fc00 ; -- <0207> swapra = nop

-- ######## func init_o2_state -- = 0x057e

    057e : 5e00 ; -- <0209> ram $ram_o2_state = $o2_state_init -- av_ad_hi = 0
    057f : 63a0 ; -- <0209> ram $ram_o2_state = $o2_state_init -- av_ad_lo = 350
    0580 : 015e ; -- <0209> "
    0581 : 5600 ; -- <0209> ram $ram_o2_state = $o2_state_init -- av_write_data = 0
    0582 : 5e00 ; -- <0210> ram $ram_o2_been_lean = 0 -- av_ad_hi = 0
    0583 : 63a0 ; -- <0210> ram $ram_o2_been_lean = 0 -- av_ad_lo = 354
    0584 : 0162 ; -- <0210> "
    0585 : 5600 ; -- <0210> ram $ram_o2_been_lean = 0 -- av_write_data = 0
    0586 : 5e00 ; -- <0211> ram $ram_o2_been_rich = 0 -- av_ad_hi = 0
    0587 : 63a0 ; -- <0211> ram $ram_o2_been_rich = 0 -- av_ad_lo = 352
    0588 : 0160 ; -- <0211> "
    0589 : 5600 ; -- <0211> ram $ram_o2_been_rich = 0 -- av_write_data = 0

    058a : fc00 ; -- <0213> swapra = nop

-- ######## func leave_learn_stoich -- = 0x058b
    058b : 303e ; -- <0216> push rtna -- func leave_learn_stoich

    058c : fba0 ; -- <0215> callx  check_engine_stop  pa
    058d : 0c3f ; -- <0215> "
    058e : fc00 ; -- <0215> "

    058f : f80c ; -- <0217> pop rtna -- func leave_learn_stoich
    0590 : fc00 ; -- <0217> swapra = nop

-- ######## func find_rpm_cell -- = 0x0591
    0591 : 3002 ; -- <0234> push i -- func find_rpm_cell
    0592 : 3003 ; -- <0234> push j -- "

    0593 : 0a01 ; -- <0219> i = 1
    0594 : 0008 ; -- <0220> a = rpm
    0595 : 0760 ; -- <0221> b = 0xffff
    0596 : e007 ; -- <0222> br eq :found
    0597 : 05a5 ; -- <0222> "
-- :next_cell -- = 0x0598
    0598 : 0fa0 ; -- <0224> j = :rpm_cells
    0599 : 044a ; -- <0224> "
    059a : c800 ; -- <0225> fetch a from i+j
    059b : d310 ; -- <0225> "
    059c : 03b0 ; -- <0225> "
    059d : 0408 ; -- <0226> b = rpm
    059e : e006 ; -- <0227> br gt :found
    059f : 05a5 ; -- <0227> "
    05a0 : 0e01 ; -- <0228> j = 1
    05a1 : c800 ; -- <0229> i = i+j
    05a2 : 0b10 ; -- <0229> "
    05a3 : e00f ; -- <0230> jmp :next_cell
    05a4 : 0598 ; -- <0230> "
-- :found -- = 0x05a5
    05a5 : 0f60 ; -- <0232> j = -1
    05a6 : c800 ; -- <0233> cell = i+j
    05a7 : 2310 ; -- <0233> "
    05a8 : 0c0c ; -- <0233> pop j -- rtn i+j
    05a9 : 080c ; -- <0233> pop i -- "
    05aa : fc00 ; -- <0232> swapra = nop

    05ab : 0c0c ; -- <0235> pop j -- func find_rpm_cell
    05ac : 080c ; -- <0235> pop i -- "
    05ad : fc00 ; -- <0235> swapra = nop

-- ######## func dump_smap_cmd -- = 0x05ae
    05ae : 3004 ; -- <0274> push x -- func dump_smap_cmd
    05af : 303e ; -- <0274> push rtna -- "

    05b0 : 020d ; -- <0237> a = 13 -- puteol
    05b1 : fba0 ; -- <0237> puteol
    05b2 : 009b ; -- <0237> "
    05b3 : fc00 ; -- <0237> "
    05b4 : 020a ; -- <0237> a = 10 -- puteol
    05b5 : fba0 ; -- <0237> puteol
    05b6 : 009b ; -- <0237> "
    05b7 : fc00 ; -- <0237> "
    05b8 : 5e00 ; -- <0238> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    05b9 : 627c ; -- <0238> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    05ba : 2015 ; -- <0238> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    05bb : 2016 ; -- <0238> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    05bc : fba0 ; -- <0239> callx  find_rpm_cell  pa  pa
    05bd : 0591 ; -- <0239> "
    05be : fc00 ; -- <0239> "
    05bf : 1200 ; -- <0249> x = 0
-- :loop_1471 -- = 0x05c0

    05c0 : 0004 ; -- <0240> a = x

    05c1 : 0351 ; -- <0241> a = a<<1
    05c2 : 0698 ; -- <0241> b = 152
    05c3 : 5e00 ; -- <0241> av_ad_hi = 0
    05c4 : 6300 ; -- <0241> av_ad_lo = ad0
    05c5 : 0415 ; -- <0241> b = av_write_data
    05c6 : 0416 ; -- <0241> b = av_read_data

    05c7 : 0001 ; -- <0242> a = b
    05c8 : fba0 ; -- <0243> call put4x
    05c9 : 00c3 ; -- <0243> "
    05ca : fc00 ; -- <0243> "

    05cb : 0004 ; -- <0246> a = x
    05cc : 0408 ; -- <0246> b = pa

    05cd : e407 ; -- <0244> bn eq :else_1485
    05ce : 05d3 ; -- <0244> "

    05cf : 023c ; -- <0245> a = 60 -- putasc "<"
    05d0 : fba0 ; -- <0245> putasc "<"
    05d1 : 009b ; -- <0245> "
    05d2 : fc00 ; -- <0245> "

    05d3 : 0220 ; -- <0247> a = 32 -- putasc " "
    05d4 : fba0 ; -- <0247> putasc " "
    05d5 : 009b ; -- <0247> "
    05d6 : fc00 ; -- <0247> "


    05d7 : 0004 ; -- <0249> a = x
    05d8 : 0601 ; -- <0249> b = 1
    05d9 : c800 ; -- <0249> x = a+b
    05da : 1300 ; -- <0249> "


    05db : 0004 ; -- <0249> a = x
    05dc : 060d ; -- <0249> b = $num_rpm_cells
    05dd : e005 ; -- <0249> br lt :loop_1471
    05de : 05c0 ; -- <0249> "

-- :end_1471 -- = 0x05df
    05df : 020d ; -- <0250> a = 13 -- puteol
    05e0 : fba0 ; -- <0250> puteol
    05e1 : 009b ; -- <0250> "
    05e2 : fc00 ; -- <0250> "
    05e3 : 020a ; -- <0250> a = 10 -- puteol
    05e4 : fba0 ; -- <0250> puteol
    05e5 : 009b ; -- <0250> "
    05e6 : fc00 ; -- <0250> "
    05e7 : 1200 ; -- <0260> x = 0
-- :loop_1511 -- = 0x05e8

    05e8 : 0004 ; -- <0251> a = x

    05e9 : 0351 ; -- <0252> a = a<<1
    05ea : 06b4 ; -- <0252> b = 180
    05eb : 5e00 ; -- <0252> av_ad_hi = 0
    05ec : 6300 ; -- <0252> av_ad_lo = ad0
    05ed : 0415 ; -- <0252> b = av_write_data
    05ee : 0416 ; -- <0252> b = av_read_data

    05ef : 0001 ; -- <0253> a = b
    05f0 : fba0 ; -- <0254> call put4x
    05f1 : 00c3 ; -- <0254> "
    05f2 : fc00 ; -- <0254> "

    05f3 : 0004 ; -- <0257> a = x
    05f4 : 0408 ; -- <0257> b = pa

    05f5 : e407 ; -- <0255> bn eq :else_1525
    05f6 : 05fb ; -- <0255> "

    05f7 : 023c ; -- <0256> a = 60 -- putasc "<"
    05f8 : fba0 ; -- <0256> putasc "<"
    05f9 : 009b ; -- <0256> "
    05fa : fc00 ; -- <0256> "

    05fb : 0220 ; -- <0258> a = 32 -- putasc " "
    05fc : fba0 ; -- <0258> putasc " "
    05fd : 009b ; -- <0258> "
    05fe : fc00 ; -- <0258> "


    05ff : 0004 ; -- <0260> a = x
    0600 : 0601 ; -- <0260> b = 1
    0601 : c800 ; -- <0260> x = a+b
    0602 : 1300 ; -- <0260> "


    0603 : 0004 ; -- <0260> a = x
    0604 : 060d ; -- <0260> b = $num_tps_cells
    0605 : e005 ; -- <0260> br lt :loop_1511
    0606 : 05e8 ; -- <0260> "

-- :end_1511 -- = 0x0607
    0607 : 020d ; -- <0261> a = 13 -- puteol
    0608 : fba0 ; -- <0261> puteol
    0609 : 009b ; -- <0261> "
    060a : fc00 ; -- <0261> "
    060b : 020a ; -- <0261> a = 10 -- puteol
    060c : fba0 ; -- <0261> puteol
    060d : 009b ; -- <0261> "
    060e : fc00 ; -- <0261> "
-- ram pa = $ram_tps_state
-- for {x = 0} {x lt $num_tps_states} step y = 1 {
-- a = x
-- struct_read $ram_tps_enrich_thou
-- a = b
-- call put4x
-- if x eq pa {
-- putasc "<"
-- }
-- putasc " "
-- }
-- puteol

    060f : f80c ; -- <0275> pop rtna -- func dump_smap_cmd
    0610 : 100c ; -- <0275> pop x -- "
    0611 : fc00 ; -- <0275> swapra = nop

-- ######## func load_tps_enrich_cmd -- = 0x0612

-- for {i = 0} {i lt $num_tps_states} step j = 1 {
-- call  get4x
-- b = a
-- a = i
-- struct_write $ram_tps_enrich_thou
-- getchar
-- }

    0612 : fc00 ; -- <0285> swapra = nop

-- ######## func load_smap_cmd -- = 0x0613
    0613 : 3002 ; -- <0294> push i -- func load_smap_cmd
    0614 : 303e ; -- <0294> push rtna -- "

    0615 : 0a00 ; -- <0293> i = 0
-- :loop_1557 -- = 0x0616

    0616 : fba0 ; -- <0287> call  get4x
    0617 : 00fc ; -- <0287> "
    0618 : fc00 ; -- <0287> "
    0619 : 0400 ; -- <0288> b = a
    061a : 0002 ; -- <0289> a = i

    061b : 0351 ; -- <0290> a = a<<1
    061c : 3001 ; -- <0290> push b -- push b
    061d : 0698 ; -- <0290> b = 152
    061e : 5e00 ; -- <0290> av_ad_hi = 0
    061f : 6300 ; -- <0290> av_ad_lo = ad0
    0620 : 540c ; -- <0290> pop av_write_data -- pop av_write_data

    0621 : fba0 ; -- <0291> getchar
    0622 : 00a4 ; -- <0291> "
    0623 : fc00 ; -- <0291> "


    0624 : 0002 ; -- <0293> a = i
    0625 : 0601 ; -- <0293> b = 1
    0626 : c800 ; -- <0293> i = a+b
    0627 : 0b00 ; -- <0293> "


    0628 : 0002 ; -- <0293> a = i
    0629 : 060d ; -- <0293> b = $num_rpm_cells
    062a : e005 ; -- <0293> br lt :loop_1557
    062b : 0616 ; -- <0293> "

-- :end_1557 -- = 0x062c

    062c : f80c ; -- <0295> pop rtna -- func load_smap_cmd
    062d : 080c ; -- <0295> pop i -- "
    062e : fc00 ; -- <0295> swapra = nop

-- ######## func clear_smap_cmd -- = 0x062f
    062f : 3002 ; -- <0302> push i -- func clear_smap_cmd

    0630 : 0a00 ; -- <0301> i = 0
-- :loop_1584 -- = 0x0631

    0631 : 0002 ; -- <0297> a = i
    0632 : 07a0 ; -- <0298> b = 3000
    0633 : 0bb8 ; -- <0298> "

    0634 : 0351 ; -- <0299> a = a<<1
    0635 : 3001 ; -- <0299> push b -- push b
    0636 : 0698 ; -- <0299> b = 152
    0637 : 5e00 ; -- <0299> av_ad_hi = 0
    0638 : 6300 ; -- <0299> av_ad_lo = ad0
    0639 : 540c ; -- <0299> pop av_write_data -- pop av_write_data



    063a : 0002 ; -- <0301> a = i
    063b : 0601 ; -- <0301> b = 1
    063c : c800 ; -- <0301> i = a+b
    063d : 0b00 ; -- <0301> "


    063e : 0002 ; -- <0301> a = i
    063f : 060d ; -- <0301> b = $num_rpm_cells
    0640 : e005 ; -- <0301> br lt :loop_1584
    0641 : 0631 ; -- <0301> "

-- :end_1584 -- = 0x0642

    0642 : 080c ; -- <0303> pop i -- func clear_smap_cmd
    0643 : fc00 ; -- <0303> swapra = nop

-- ######## func load_tps_ref_cmd -- = 0x0644
    0644 : 3002 ; -- <0315> push i -- func load_tps_ref_cmd
    0645 : 3006 ; -- <0315> push ga -- "
    0646 : 303e ; -- <0315> push rtna -- "

    0647 : 0a00 ; -- <0314> i = 0
-- :loop_1607 -- = 0x0648

    0648 : fba0 ; -- <0305> call  get4x
    0649 : 00fc ; -- <0305> "
    064a : fc00 ; -- <0305> "
    064b : 1800 ; -- <0306> ga = a
    064c : 0400 ; -- <0307> b = a
    064d : 0002 ; -- <0308> a = i

    064e : 0351 ; -- <0309> a = a<<1
    064f : 3001 ; -- <0309> push b -- push b
    0650 : 06b4 ; -- <0309> b = 180
    0651 : 5e00 ; -- <0309> av_ad_hi = 0
    0652 : 6300 ; -- <0309> av_ad_lo = ad0
    0653 : 540c ; -- <0309> pop av_write_data -- pop av_write_data

    0654 : 0006 ; -- <0310> a = ga
    0655 : fba0 ; -- <0311> call put4x
    0656 : 00c3 ; -- <0311> "
    0657 : fc00 ; -- <0311> "
    0658 : fba0 ; -- <0312> getchar
    0659 : 00a4 ; -- <0312> "
    065a : fc00 ; -- <0312> "


    065b : 0002 ; -- <0314> a = i
    065c : 0601 ; -- <0314> b = 1
    065d : c800 ; -- <0314> i = a+b
    065e : 0b00 ; -- <0314> "


    065f : 0002 ; -- <0314> a = i
    0660 : 060d ; -- <0314> b = $num_tps_cells
    0661 : e005 ; -- <0314> br lt :loop_1607
    0662 : 0648 ; -- <0314> "

-- :end_1607 -- = 0x0663

    0663 : f80c ; -- <0316> pop rtna -- func load_tps_ref_cmd
    0664 : 180c ; -- <0316> pop ga -- "
    0665 : 080c ; -- <0316> pop i -- "
    0666 : fc00 ; -- <0316> swapra = nop

-- ######## func learn_tps_ref_cmd -- = 0x0667
    0667 : 303e ; -- <0322> push rtna -- func learn_tps_ref_cmd

    0668 : 5e00 ; -- <0318> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    0669 : 627c ; -- <0318> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    066a : 2015 ; -- <0318> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    066b : 2016 ; -- <0318> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    066c : fba0 ; -- <0319> callx  find_rpm_cell  pa  a
    066d : 0591 ; -- <0319> "
    066e : fc00 ; -- <0319> "
    066f : 0008 ; -- <0319> a = pa
    0670 : 5e00 ; -- <0320> ram b = $ram_tps_avg -- av_ad_hi = 0
    0671 : 63a0 ; -- <0320> ram b = $ram_tps_avg -- av_ad_lo = 338
    0672 : 0152 ; -- <0320> "
    0673 : 0415 ; -- <0320> ram b = $ram_tps_avg -- b = av_write_data -- start read cycle
    0674 : 0416 ; -- <0320> ram b = $ram_tps_avg -- b = av_read_data -- finish read cycle

    0675 : 0351 ; -- <0321> a = a<<1
    0676 : 3001 ; -- <0321> push b -- push b
    0677 : 06b4 ; -- <0321> b = 180
    0678 : 5e00 ; -- <0321> av_ad_hi = 0
    0679 : 6300 ; -- <0321> av_ad_lo = ad0
    067a : 540c ; -- <0321> pop av_write_data -- pop av_write_data


    067b : f80c ; -- <0323> pop rtna -- func learn_tps_ref_cmd
    067c : fc00 ; -- <0323> swapra = nop


-- :plan_name_run -- = 0x067d
-- "RN\x0"
    067d : 4e52 ; -- <0002> NR
    067e : 0000 ; -- <0002>   


-- max trim is about 200 thou prior to multiplier overflow.
-- or more if the smap puff is below 8000.
-- trim resolution is 4 thou due to multiplier.
-- smap resolution for trimming is 16 us.
-- final trim enrichment us resolution is 16 us.

-- ######## func trim_lean_cmd -- = 0x067f

    067f : 5e00 ; -- <0016> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    0680 : 63a0 ; -- <0016> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 356
    0681 : 0164 ; -- <0016> "
    0682 : 0015 ; -- <0016> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    0683 : 0016 ; -- <0016> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    0684 : 0000 ; -- <0021> a = a
    0685 : 0600 ; -- <0021> b = 0

    0686 : e7a0 ; -- <0017> bn = :else_1670
    0687 : 068a ; -- <0017> "


    0688 : e00f ; -- <0019> jmp :end_1670
    0689 : 0691 ; -- <0019> "

    068a : 07a0 ; -- <0020> b = (($run_manual_trim_step_thou ^ 0xffff) + 1)
    068b : fffc ; -- <0020> "
    068c : 5e00 ; -- <0021> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    068d : 63a0 ; -- <0021> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 356
    068e : 0164 ; -- <0021> "
    068f : c800 ; -- <0021> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    0690 : 5700 ; -- <0021> "


    0691 : fc00 ; -- <0023> swapra = nop

-- ######## func trim_rich_cmd -- = 0x0692

    0692 : 5e00 ; -- <0025> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    0693 : 63a0 ; -- <0025> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 356
    0694 : 0164 ; -- <0025> "
    0695 : 0015 ; -- <0025> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    0696 : 0016 ; -- <0025> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    0697 : 0000 ; -- <0030> a = a
    0698 : 07a0 ; -- <0030> b = 800
    0699 : 0320 ; -- <0030> "

    069a : e406 ; -- <0026> bn gt :else_1690
    069b : 069e ; -- <0026> "


    069c : e00f ; -- <0028> jmp :end_1690
    069d : 06a4 ; -- <0028> "

    069e : 0604 ; -- <0029> b = $run_manual_trim_step_thou
    069f : 5e00 ; -- <0030> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06a0 : 63a0 ; -- <0030> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 356
    06a1 : 0164 ; -- <0030> "
    06a2 : c800 ; -- <0030> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06a3 : 5700 ; -- <0030> "


    06a4 : fc00 ; -- <0032> swapra = nop

-- ######## func trim_2lean_cmd -- = 0x06a5

    06a5 : 5e00 ; -- <0034> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    06a6 : 63a0 ; -- <0034> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 356
    06a7 : 0164 ; -- <0034> "
    06a8 : 0015 ; -- <0034> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    06a9 : 0016 ; -- <0034> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    06aa : 0000 ; -- <0039> a = a
    06ab : 0600 ; -- <0039> b = 0

    06ac : e7a0 ; -- <0035> bn = :else_1708
    06ad : 06b0 ; -- <0035> "


    06ae : e00f ; -- <0037> jmp :end_1708
    06af : 06b7 ; -- <0037> "

    06b0 : 07a0 ; -- <0038> b = ((($run_manual_trim_step_thou << 3) ^ 0xffff) + 1)
    06b1 : ffe0 ; -- <0038> "
    06b2 : 5e00 ; -- <0039> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06b3 : 63a0 ; -- <0039> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 356
    06b4 : 0164 ; -- <0039> "
    06b5 : c800 ; -- <0039> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06b6 : 5700 ; -- <0039> "


    06b7 : fc00 ; -- <0041> swapra = nop

-- ######## func trim_2rich_cmd -- = 0x06b8

    06b8 : 5e00 ; -- <0043> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    06b9 : 63a0 ; -- <0043> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 356
    06ba : 0164 ; -- <0043> "
    06bb : 0015 ; -- <0043> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    06bc : 0016 ; -- <0043> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle

    06bd : 0000 ; -- <0048> a = a
    06be : 07a0 ; -- <0048> b = 800
    06bf : 0320 ; -- <0048> "

    06c0 : e406 ; -- <0044> bn gt :else_1728
    06c1 : 06c4 ; -- <0044> "


    06c2 : e00f ; -- <0046> jmp :end_1728
    06c3 : 06ca ; -- <0046> "

    06c4 : 0620 ; -- <0047> b = ($run_manual_trim_step_thou << 3)
    06c5 : 5e00 ; -- <0048> ram $ram_run_manual_trim_thou = a+b -- av_ad_hi = 0
    06c6 : 63a0 ; -- <0048> ram $ram_run_manual_trim_thou = a+b -- av_ad_lo = 356
    06c7 : 0164 ; -- <0048> "
    06c8 : c800 ; -- <0048> ram $ram_run_manual_trim_thou = a+b -- av_write_data = a+b
    06c9 : 5700 ; -- <0048> "


    06ca : fc00 ; -- <0050> swapra = nop

-- ######## func init_plan_run -- = 0x06cb

-- set up the run plan.
    06cb : 5e00 ; -- <0053> ram $ram_run_manual_trim_thou = 0 -- av_ad_hi = 0
    06cc : 63a0 ; -- <0053> ram $ram_run_manual_trim_thou = 0 -- av_ad_lo = 356
    06cd : 0164 ; -- <0053> "
    06ce : 5600 ; -- <0053> ram $ram_run_manual_trim_thou = 0 -- av_write_data = 0

-- memorize state.
    06cf : 5e00 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    06d0 : 6288 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 136
    06d1 : 57a0 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    06d2 : 067d ; -- <0056> "
    06d3 : 5e00 ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    06d4 : 628a ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 138
    06d5 : 57a0 ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    06d6 : 06e7 ; -- <0057> "
    06d7 : 5e00 ; -- <0058> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    06d8 : 628c ; -- <0058> ram $ram_transition_func = :leave_run -- av_ad_lo = 140
    06d9 : 57a0 ; -- <0058> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    06da : 074d ; -- <0058> "
    06db : 5e00 ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    06dc : 628e ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 142
    06dd : 57a0 ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    06de : 06e0 ; -- <0059> "

    06df : fc00 ; -- <0061> swapra = nop

-- ######## func destroy_plan_run -- = 0x06e0


    06e0 : fc00 ; -- <0064> swapra = nop

-- :tps_accel2_msg -- = 0x06e1
-- "tpsa2\x0"
    06e1 : 7074 ; -- <0066> pt
    06e2 : 6173 ; -- <0066> as
    06e3 : 0032 ; -- <0066>  2
-- :tps_open_msg -- = 0x06e4
-- "tpsop\x0"
    06e4 : 7074 ; -- <0068> pt
    06e5 : 6f73 ; -- <0068> os
    06e6 : 0070 ; -- <0068>  p

-- ######## func puff_len_run -- = 0x06e7
    06e7 : 3002 ; -- <0128> push i -- func puff_len_run
    06e8 : 3003 ; -- <0128> push j -- "
    06e9 : 3004 ; -- <0128> push x -- "
    06ea : 3005 ; -- <0128> push y -- "
    06eb : 3006 ; -- <0128> push ga -- "
    06ec : 3007 ; -- <0128> push gb -- "
    06ed : 303e ; -- <0128> push rtna -- "

    06ee : 5e00 ; -- <0071> ram a = $ram_rpm_valid -- av_ad_hi = 0
    06ef : 627e ; -- <0071> ram a = $ram_rpm_valid -- av_ad_lo = 126
    06f0 : 0015 ; -- <0071> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    06f1 : 0016 ; -- <0071> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    06f2 : 0000 ; -- <0127> a = a
    06f3 : 0601 ; -- <0127> b = 1

    06f4 : e407 ; -- <0072> bn eq :else_1780
    06f5 : 0745 ; -- <0072> "

-- read smap puff into ga
    06f6 : 5e00 ; -- <0074> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    06f7 : 627c ; -- <0074> ram pa = $ram_avg_rpm -- av_ad_lo = 124
    06f8 : 2015 ; -- <0074> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    06f9 : 2016 ; -- <0074> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    06fa : fba0 ; -- <0075> callx  find_rpm_cell  pa  a
    06fb : 0591 ; -- <0075> "
    06fc : fc00 ; -- <0075> "
    06fd : 0008 ; -- <0075> a = pa
    06fe : 1c00 ; -- <0076> gb = a

    06ff : 0351 ; -- <0077> a = a<<1
    0700 : 0698 ; -- <0077> b = 152
    0701 : 5e00 ; -- <0077> av_ad_hi = 0
    0702 : 6300 ; -- <0077> av_ad_lo = ad0
    0703 : 0415 ; -- <0077> b = av_write_data
    0704 : 0416 ; -- <0077> b = av_read_data

    0705 : 1801 ; -- <0078> ga = b

-- calculate manual enrichment in us.  apply a total of 10 bits of right-shift to
-- implement division by 1024 (thou unit).  spread them out to prevent overflow.
    0706 : 5e00 ; -- <0082> ram a = $ram_run_manual_trim_thou -- av_ad_hi = 0
    0707 : 63a0 ; -- <0082> ram a = $ram_run_manual_trim_thou -- av_ad_lo = 356
    0708 : 0164 ; -- <0082> "
    0709 : 0015 ; -- <0082> ram a = $ram_run_manual_trim_thou -- a = av_write_data -- start read cycle
    070a : 0016 ; -- <0082> ram a = $ram_run_manual_trim_thou -- a = av_read_data -- finish read cycle
    070b : 0350 ; -- <0083> a = a>>1
    070c : 0750 ; -- <0084> b = a>>1
    070d : 0006 ; -- <0085> a = ga
    070e : 0353 ; -- <0086> a = a>>4
    070f : fba0 ; -- <0087> call  multiply
    0710 : 0170 ; -- <0087> "
    0711 : fc00 ; -- <0087> "
    0712 : 0353 ; -- <0088> a = a>>4

-- add enrichment to smap puff.
    0713 : 0406 ; -- <0091> b = ga
    0714 : c800 ; -- <0092> ga = a+b
    0715 : 1b00 ; -- <0092> "

-- determine TPS enrichment for acceleration.
    0716 : 5e00 ; -- <0095> ram x = $ram_tps_state -- av_ad_hi = 0
    0717 : 62ce ; -- <0095> ram x = $ram_tps_state -- av_ad_lo = 206
    0718 : 1015 ; -- <0095> ram x = $ram_tps_state -- x = av_write_data -- start read cycle
    0719 : 1016 ; -- <0095> ram x = $ram_tps_state -- x = av_read_data -- finish read cycle

    071a : 0004 ; -- <0098> a = x
    071b : 0603 ; -- <0098> b = 3

    071c : e407 ; -- <0096> bn eq :else_1820
    071d : 0723 ; -- <0096> "

    071e : 23a0 ; -- <0097> pa = :tps_accel2_msg
    071f : 06e1 ; -- <0097> "
    0720 : fba0 ; -- <0097> callx  unique_text_flag  :tps_accel2_msg
    0721 : 0b1c ; -- <0097> "
    0722 : fc00 ; -- <0097> "


    0723 : 0004 ; -- <0101> a = x
    0724 : 0604 ; -- <0101> b = 4

    0725 : e407 ; -- <0099> bn eq :else_1829
    0726 : 072c ; -- <0099> "

    0727 : 23a0 ; -- <0100> pa = :tps_open_msg
    0728 : 06e4 ; -- <0100> "
    0729 : fba0 ; -- <0100> callx  unique_text_flag  :tps_open_msg
    072a : 0b1c ; -- <0100> "
    072b : fc00 ; -- <0100> "

-- index into maps by TPS state.
    072c : 0a00 ; -- <0103> i = 0
    072d : 0e0d ; -- <0104> j = $num_tps_cells
    072e : 1760 ; -- <0105> y = -1
-- :next_state -- = 0x072f
    072f : e002 ; -- <0107> br xz :found_state
    0730 : 0737 ; -- <0107> "
    0731 : c800 ; -- <0108> i = i+j
    0732 : 0b10 ; -- <0108> "
    0733 : c800 ; -- <0109> x = x+y
    0734 : 1320 ; -- <0109> "
    0735 : e00f ; -- <0110> jmp :next_state
    0736 : 072f ; -- <0110> "
-- :found_state -- = 0x0737
-- index into maps by RPM.
    0737 : 0c07 ; -- <0113> j = gb
    0738 : c800 ; -- <0114> a = i+j
    0739 : 0310 ; -- <0114> "
-- convert from words to bytes.
    073a : 0351 ; -- <0116> a = a<<1
-- add map address.
