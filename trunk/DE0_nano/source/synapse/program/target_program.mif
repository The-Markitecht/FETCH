
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

-- register file configuration

-- application-specific register aliases.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.


-- -- I/O expansion bus.
-- alias_both exp                  [incr counter]
-- alias_both exp_addr             [incr counter]
-- vdefine exp_num_regs 32
-- vdefine exp_top_reg ($exp_num_regs - 1)
-- setvar exp_counter -1

-- alias_src  keys                 [incr exp_counter]@exp
-- alias_both leds                 [incr exp_counter]@exp

-- alias_both anmux_ctrl           [incr exp_counter]@exp
-- vdefine     anmux_enable_mask       0x0008
-- vdefine     anmux_channel_mask      0x0007



-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.



    0000 : e00f ; -- <0103> jmp :main
    0001 : 0150 ; -- <0103> "

    0002 : 001a ; -- <0105> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0105>   
    0004 : 2020 ; -- <0105>   
    0005 : 2020 ; -- <0105>   
    0006 : 6120 ; -- <0105> a 
-- "       b"
    0007 : 2020 ; -- <0105>   
    0008 : 2020 ; -- <0105>   
    0009 : 2020 ; -- <0105>   
    000a : 6220 ; -- <0105> b 
-- "       i"
    000b : 2020 ; -- <0105>   
    000c : 2020 ; -- <0105>   
    000d : 2020 ; -- <0105>   
    000e : 6920 ; -- <0105> i 
-- "       j"
    000f : 2020 ; -- <0105>   
    0010 : 2020 ; -- <0105>   
    0011 : 2020 ; -- <0105>   
    0012 : 6a20 ; -- <0105> j 
-- "       x"
    0013 : 2020 ; -- <0105>   
    0014 : 2020 ; -- <0105>   
    0015 : 2020 ; -- <0105>   
    0016 : 7820 ; -- <0105> x 
-- "       y"
    0017 : 2020 ; -- <0105>   
    0018 : 2020 ; -- <0105>   
    0019 : 2020 ; -- <0105>   
    001a : 7920 ; -- <0105> y 
-- "      g6"
    001b : 2020 ; -- <0105>   
    001c : 2020 ; -- <0105>   
    001d : 2020 ; -- <0105>   
    001e : 3667 ; -- <0105> 6g
-- "      g7"
    001f : 2020 ; -- <0105>   
    0020 : 2020 ; -- <0105>   
    0021 : 2020 ; -- <0105>   
    0022 : 3767 ; -- <0105> 7g
-- "--rstk  "
    0023 : 2f2f ; -- <0105> --
    0024 : 7372 ; -- <0105> sr
    0025 : 6b74 ; -- <0105> kt
    0026 : 2020 ; -- <0105>   
-- "  ev_pri"
    0027 : 2020 ; -- <0105>   
    0028 : 7665 ; -- <0105> ve
    0029 : 705f ; -- <0105> p_
    002a : 6972 ; -- <0105> ir
-- "softevnt"
    002b : 6f73 ; -- <0105> os
    002c : 7466 ; -- <0105> tf
    002d : 7665 ; -- <0105> ve
    002e : 746e ; -- <0105> tn
-- "   usage"
    002f : 2020 ; -- <0105>   
    0030 : 7520 ; -- <0105> u 
    0031 : 6173 ; -- <0105> as
    0032 : 6567 ; -- <0105> eg
-- "ustimer0"
    0033 : 7375 ; -- <0105> su
    0034 : 6974 ; -- <0105> it
    0035 : 656d ; -- <0105> em
    0036 : 3072 ; -- <0105> 0r
-- "mstimer0"
    0037 : 736d ; -- <0105> sm
    0038 : 6974 ; -- <0105> it
    0039 : 656d ; -- <0105> em
    003a : 3072 ; -- <0105> 0r
-- "mstimer1"
    003b : 736d ; -- <0105> sm
    003c : 6974 ; -- <0105> it
    003d : 656d ; -- <0105> em
    003e : 3172 ; -- <0105> 1r
-- "spi_data"
    003f : 7073 ; -- <0105> ps
    0040 : 5f69 ; -- <0105> _i
    0041 : 6164 ; -- <0105> ad
    0042 : 6174 ; -- <0105> at
-- "--avwrdt"
    0043 : 2f2f ; -- <0105> --
    0044 : 7661 ; -- <0105> va
    0045 : 7277 ; -- <0105> rw
    0046 : 7464 ; -- <0105> td
-- "av_rd_dt"
    0047 : 7661 ; -- <0105> va
    0048 : 725f ; -- <0105> r_
    0049 : 5f64 ; -- <0105> _d
    004a : 7464 ; -- <0105> td
-- "av_ad_hi"
    004b : 7661 ; -- <0105> va
    004c : 615f ; -- <0105> a_
    004d : 5f64 ; -- <0105> _d
    004e : 6968 ; -- <0105> ih
-- "av_ad_lo"
    004f : 7661 ; -- <0105> va
    0050 : 615f ; -- <0105> a_
    0051 : 5f64 ; -- <0105> _d
    0052 : 6f6c ; -- <0105> ol
-- "--uartdt"
    0053 : 2f2f ; -- <0105> --
    0054 : 6175 ; -- <0105> au
    0055 : 7472 ; -- <0105> tr
    0056 : 7464 ; -- <0105> td
-- "uartstat"
    0057 : 6175 ; -- <0105> au
    0058 : 7472 ; -- <0105> tr
    0059 : 7473 ; -- <0105> ts
    005a : 7461 ; -- <0105> ta
-- "    keys"
    005b : 2020 ; -- <0105>   
    005c : 2020 ; -- <0105>   
    005d : 656b ; -- <0105> ek
    005e : 7379 ; -- <0105> sy
-- "    leds"
    005f : 2020 ; -- <0105>   
    0060 : 2020 ; -- <0105>   
    0061 : 656c ; -- <0105> el
    0062 : 7364 ; -- <0105> sd
-- "   anmux"
    0063 : 2020 ; -- <0105>   
    0064 : 6120 ; -- <0105> a 
    0065 : 6d6e ; -- <0105> mn
    0066 : 7875 ; -- <0105> xu
-- "pwr_duty"
    0067 : 7770 ; -- <0105> wp
    0068 : 5f72 ; -- <0105> _r
    0069 : 7564 ; -- <0105> ud
    006a : 7974 ; -- <0105> yt

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x006b
-- initialize prior to polling loop, for minimum latency.
    006b : 07a0 ; -- <0006> b = :event_table
    006c : 0165 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x006d
    006d : 0009 ; -- <0009> a = event_priority
    006e : e000 ; -- <0010> br 0z :poll_events_again
    006f : 006d ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0070 : 2400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0071 : d300 ; -- <0015> fetch rtna from ad0
    0072 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0073 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0074 : 5fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0075 : ffc0 ; -- <0021> "
    0076 : e00f ; -- <0021> error_halt_code 0xffc0
    0077 : 0076 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x0078
    0078 : 2004 ; -- <0044> push x -- func putchar_fduart

    0079 : 1000 ; -- <0046> x = a

-- wait for FIFO to be available.
    007a : 0202 ; -- <0049> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x007b
    007b : 0415 ; -- <0051> b = fduart_status
    007c : e403 ; -- <0052> bn and0z :pcfduart_wait_for_idle
    007d : 007b ; -- <0052> "

-- push word to the UART.  its low byte is a character.
    007e : 5004 ; -- <0055> fduart_data = x
    007f : 1008 ; -- <0056> pop x -- end_func
    0080 : fc00 ; -- <0056> end_func

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x0081
-- wait until FIFO is populated.
    0081 : 0208 ; -- <0062> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x0082
    0082 : 0415 ; -- <0064> b = fduart_status
    0083 : e403 ; -- <0065> bn and0z :wait_for_busy
    0084 : 0082 ; -- <0065> "
    0085 : 0014 ; -- <0066> a = fduart_data
    0086 : fc00 ; -- <0067> end_func

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x0087
-- check for FIFO is populated.
    0087 : 0208 ; -- <0072> a = $arx_fifo_empty_mask
    0088 : 0415 ; -- <0073> b = fduart_status
    0089 : e403 ; -- <0074> bn and0z :none
    008a : 008d ; -- <0074> "
    008b : 0014 ; -- <0075> a = fduart_data
    008c : fc00 ; -- <0076> rtn
-- :none -- = 0x008d
    008d : 0360 ; -- <0078> a = -1
    008e : fc00 ; -- <0079> end_func


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x008f
-- set & enable analog muxer
    008f : 0608 ; -- <0007> b = $anmux_enable_mask
    0090 : c800 ; -- <0008> anmux_ctrl = or
    0091 : 6334 ; -- <0008> "
    0092 : fc00 ; -- <0009> end_func

-- ######## func anmux_get_chn -- = 0x0093
    0093 : 0018 ; -- <0012> a = anmux_ctrl
    0094 : 0607 ; -- <0013> b = $anmux_channel_mask
    0095 : c800 ; -- <0014> a = and
    0096 : 0330 ; -- <0014> "
    0097 : fc00 ; -- <0015> end_func


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x0098
    0098 : 0601 ; -- <0005> b = 1
    0099 : e003 ; -- <0006> br and0z :pick_byte_even
    009a : 00a3 ; -- <0006> "
    009b : 0350 ; -- <0007> a = a>>1
    009c : 0404 ; -- <0008> b = x
    009d : c800 ; -- <0009> fetch a from a+b
    009e : d300 ; -- <0009> "
    009f : 03b0 ; -- <0009> "
    00a0 : 0353 ; -- <0010> a = a>>4
    00a1 : 0353 ; -- <0011> a = a>>4
    00a2 : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x00a3
    00a3 : 0350 ; -- <0014> a = a>>1
    00a4 : 0404 ; -- <0015> b = x
    00a5 : c800 ; -- <0016> fetch a from a+b
    00a6 : d300 ; -- <0016> "
    00a7 : 03b0 ; -- <0016> "
    00a8 : 06ff ; -- <0017> b = 0xff
    00a9 : c800 ; -- <0018> a = and
    00aa : 0330 ; -- <0018> "
    00ab : fc00 ; -- <0019> end_func

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x00ac
    00ac : 2002 ; -- <0027> push i -- func find_in_fetch
    00ad : 2003 ; -- <0027> push j -- "
    00ae : 2005 ; -- <0027> push y -- "
    00af : 203e ; -- <0027> push rtna -- "
    00b0 : 1400 ; -- <0028> y = a
    00b1 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x00b2
    00b2 : e001 ; -- <0031> br iz :fail
    00b3 : 00c2 ; -- <0031> "
    00b4 : 0b10 ; -- <0032> i = ad1
    00b5 : 0002 ; -- <0033> a = i
    00b6 : fba0 ; -- <0034> call :fetch_byte
    00b7 : 0098 ; -- <0034> "
    00b8 : fc00 ; -- <0034> "
    00b9 : 0405 ; -- <0035> b = y
    00ba : e407 ; -- <0036> bn eq :again
    00bb : 00b2 ; -- <0036> "
-- :found -- = 0x00bc
    00bc : 0002 ; -- <0038> a = i
    00bd : f808 ; -- <0039> pop rtna -- rtn
    00be : 1408 ; -- <0039> pop y -- "
    00bf : 0c08 ; -- <0039> pop j -- "
    00c0 : 0808 ; -- <0039> pop i -- "
    00c1 : fc00 ; -- <0039> rtn
-- :fail -- = 0x00c2
    00c2 : 0360 ; -- <0041> a = -1
    00c3 : f808 ; -- <0042> pop rtna -- end_func
    00c4 : 1408 ; -- <0042> pop y -- "
    00c5 : 0c08 ; -- <0042> pop j -- "
    00c6 : 0808 ; -- <0042> pop i -- "
    00c7 : fc00 ; -- <0042> end_func



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00c8
-- "0123456789abcdef"
    00c8 : 3130 ; -- <0054> 10
    00c9 : 3332 ; -- <0054> 32
    00ca : 3534 ; -- <0054> 54
    00cb : 3736 ; -- <0054> 76
    00cc : 3938 ; -- <0054> 98
    00cd : 6261 ; -- <0054> ba
    00ce : 6463 ; -- <0054> dc
    00cf : 6665 ; -- <0054> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00d0
    00d0 : 2004 ; -- <0058> push x -- func put4x
    00d1 : 2006 ; -- <0058> push g6 -- "
    00d2 : 203e ; -- <0058> push rtna -- "
    00d3 : 13a0 ; -- <0059> x = :hexdigits
    00d4 : 00c8 ; -- <0059> "

    00d5 : 1800 ; -- <0061> g6 = a
    00d6 : 07a0 ; -- <0062> b = 0xF000
    00d7 : f000 ; -- <0062> "
    00d8 : c800 ; -- <0063> a = and
    00d9 : 0330 ; -- <0063> "
    00da : 0353 ; -- <0064> a = a>>4
    00db : 0353 ; -- <0065> a = a>>4
    00dc : 0353 ; -- <0066> a = a>>4
    00dd : fba0 ; -- <0067> call fetch_byte
    00de : 0098 ; -- <0067> "
    00df : fc00 ; -- <0067> "
    00e0 : 0000 ; -- <0068> a = a -- putchar a
    00e1 : fba0 ; -- <0068> putchar a
    00e2 : 0078 ; -- <0068> "
    00e3 : fc00 ; -- <0068> "

    00e4 : 0006 ; -- <0070> a = g6
    00e5 : 07a0 ; -- <0071> b = 0x0F00
    00e6 : 0f00 ; -- <0071> "
    00e7 : c800 ; -- <0072> a = and
    00e8 : 0330 ; -- <0072> "
    00e9 : 0353 ; -- <0073> a = a>>4
    00ea : 0353 ; -- <0074> a = a>>4
    00eb : fba0 ; -- <0075> call fetch_byte
    00ec : 0098 ; -- <0075> "
    00ed : fc00 ; -- <0075> "
    00ee : 0000 ; -- <0076> a = a -- putchar a
    00ef : fba0 ; -- <0076> putchar a
    00f0 : 0078 ; -- <0076> "
    00f1 : fc00 ; -- <0076> "

    00f2 : 0006 ; -- <0078> a = g6
    00f3 : 06f0 ; -- <0079> b = 0x00F0
    00f4 : c800 ; -- <0080> a = and
    00f5 : 0330 ; -- <0080> "
    00f6 : 0353 ; -- <0081> a = a>>4
    00f7 : fba0 ; -- <0082> call fetch_byte
    00f8 : 0098 ; -- <0082> "
    00f9 : fc00 ; -- <0082> "
    00fa : 0000 ; -- <0083> a = a -- putchar a
    00fb : fba0 ; -- <0083> putchar a
    00fc : 0078 ; -- <0083> "
    00fd : fc00 ; -- <0083> "

    00fe : 0006 ; -- <0085> a = g6
    00ff : 060f ; -- <0086> b = 0x000F
    0100 : c800 ; -- <0087> a = and
    0101 : 0330 ; -- <0087> "
    0102 : fba0 ; -- <0088> call fetch_byte
    0103 : 0098 ; -- <0088> "
    0104 : fc00 ; -- <0088> "
    0105 : 0000 ; -- <0089> a = a -- putchar a
    0106 : fba0 ; -- <0089> putchar a
    0107 : 0078 ; -- <0089> "
    0108 : fc00 ; -- <0089> "

    0109 : f808 ; -- <0091> pop rtna -- end_func
    010a : 1808 ; -- <0091> pop g6 -- "
    010b : 1008 ; -- <0091> pop x -- "
    010c : fc00 ; -- <0091> end_func

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x010d
    010d : 2002 ; -- <0095> push i -- func get4x
    010e : 2003 ; -- <0095> push j -- "
    010f : 2004 ; -- <0095> push x -- "
    0110 : 2005 ; -- <0095> push y -- "
    0111 : 203e ; -- <0095> push rtna -- "
-- y = digit counter
-- j = sum
    0112 : 1604 ; -- <0098> y = 4
-- :again -- = 0x0113
    0113 : fba0 ; -- <0100> getchar
    0114 : 0081 ; -- <0100> "
    0115 : fc00 ; -- <0100> "
    0116 : 2000 ; -- <0100> push a -- "
    0117 : 0000 ; -- <0100> a = a -- "
    0118 : fba0 ; -- <0100> "
    0119 : 0078 ; -- <0100> "
    011a : fc00 ; -- <0100> "
    011b : 0008 ; -- <0100> pop a -- "
    011c : 13a0 ; -- <0101> x = :hexdigits
    011d : 00c8 ; -- <0101> "
    011e : 0a10 ; -- <0102> i = 16
    011f : fba0 ; -- <0103> call :find_in_fetch
    0120 : 00ac ; -- <0103> "
    0121 : fc00 ; -- <0103> "
    0122 : 0760 ; -- <0104> b = -1
    0123 : e007 ; -- <0105> br eq :fail
    0124 : 0138 ; -- <0105> "
    0125 : 0400 ; -- <0106> b = a
    0126 : 0003 ; -- <0107> a = j
    0127 : 0352 ; -- <0108> a = a<<4
    0128 : c800 ; -- <0109> j = or
    0129 : 0f34 ; -- <0109> "
    012a : 1360 ; -- <0110> x = -1
    012b : c800 ; -- <0111> y = x+y
    012c : 1720 ; -- <0111> "
    012d : 0005 ; -- <0112> a = y
    012e : e400 ; -- <0113> bn az :again
    012f : 0113 ; -- <0113> "
    0130 : 0003 ; -- <0114> a = j
    0131 : 0600 ; -- <0115> b = 0
    0132 : f808 ; -- <0116> pop rtna -- rtn
    0133 : 1408 ; -- <0116> pop y -- "
    0134 : 1008 ; -- <0116> pop x -- "
    0135 : 0c08 ; -- <0116> pop j -- "
    0136 : 0808 ; -- <0116> pop i -- "
    0137 : fc00 ; -- <0116> rtn
-- :fail -- = 0x0138
    0138 : 0760 ; -- <0118> b = -1
    0139 : f808 ; -- <0119> pop rtna -- end_func
    013a : 1408 ; -- <0119> pop y -- "
    013b : 1008 ; -- <0119> pop x -- "
    013c : 0c08 ; -- <0119> pop j -- "
    013d : 0808 ; -- <0119> pop i -- "
    013e : fc00 ; -- <0119> end_func

-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x013f
    013f : 2004 ; -- <0002> push x -- func spinwait
    0140 : 2005 ; -- <0002> push y -- "
--patch
--rtn
    0141 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x0142
    0142 : 13a0 ; -- <0007> x = 16666
    0143 : 411a ; -- <0007> "
    0144 : 1760 ; -- <0008> y = -1
    0145 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0146
-- use of the ad2 name overrides auto-nop here.
    0146 : 1320 ; -- <0012> x = ad2
    0147 : e402 ; -- <0013> bn xz :spinwait_inner
    0148 : 0146 ; -- <0013> "
    0149 : c800 ; -- <0014> a = a+b
    014a : 0300 ; -- <0014> "
    014b : e400 ; -- <0015> bn az :spinwait_outer
    014c : 0142 ; -- <0015> "
    014d : 1408 ; -- <0016> pop y -- end_func
    014e : 1008 ; -- <0016> pop x -- "
    014f : fc00 ; -- <0016> end_func



-- #########################################################################
-- :main -- = 0x0150

-- soft_event = $event_controller_reset_mask
-- soft_event = 0
-- mstimer0 = 1000
-- :waiting
-- a = event_priority
-- br az :waiting
-- event_priority = a
-- putasc "."
-- jmp :main

-- clear the first 64k of RAM.
    0150 : 4a00 ; -- <0130> av_ad_hi = 0
    0151 : 0200 ; -- <0131> a = 0
    0152 : 0602 ; -- <0132> b = 2
-- :clear_next_word -- = 0x0153
    0153 : 4c00 ; -- <0134> av_ad_lo = a
    0154 : 4200 ; -- <0135> av_write_data = 0
    0155 : 0300 ; -- <0136> a = ad0
    0156 : e400 ; -- <0137> bn az :clear_next_word
    0157 : 0153 ; -- <0137> "

-- init RAM variables.
    0158 : 4a00 ; -- <0140> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0159 : 4e0a ; -- <0140> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 10
    015a : 4360 ; -- <0140> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    015b : 4a00 ; -- <0141> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    015c : 4e0c ; -- <0141> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 12
    015d : 4202 ; -- <0141> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    015e : 2ba0 ; -- <0144> soft_event = $event_controller_reset_mask
    015f : 8000 ; -- <0144> "
    0160 : 2a00 ; -- <0145> soft_event = 0
    0161 : 37a0 ; -- <0146> mstimer0 = 1000
    0162 : 03e8 ; -- <0146> "
    0163 : e00f ; -- <0147> jmp :poll_events
    0164 : 006b ; -- <0147> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x0165
    0165 : 006b ; -- <0152> ([label :poll_events])
    0166 : 0241 ; -- <0153> ([label :power_lost_handler])
    0167 : 0176 ; -- <0154> ([label :ustimer0_handler])
    0168 : 0178 ; -- <0155> ([label :spi_done_handler])
    0169 : 01a8 ; -- <0156> ([label :mstimer0_handler])
    016a : 01d0 ; -- <0157> ([label :mstimer1_handler])
    016b : 01f1 ; -- <0158> ([label :uart_rx_handler])
    016c : 01f3 ; -- <0159> ([label :uart_rx_overflow_handler])
    016d : 01f9 ; -- <0160> ([label :uart_tx_overflow_handler])
    016e : 01ff ; -- <0161> ([label :key0_handler])
    016f : 020b ; -- <0162> ([label :key1_handler])
    0170 : 0250 ; -- <0163> ([label :ignition_switch_off_handler])
    0171 : 025b ; -- <0164> ([label :ignition_switch_on_handler])
    0172 : 0217 ; -- <0165> ([label :softevent3_handler])
    0173 : 0219 ; -- <0166> ([label :softevent2_handler])
    0174 : 021b ; -- <0167> ([label :softevent1_handler])
    0175 : 021d ; -- <0168> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ustimer0_handler -- = 0x0176
    0176 : e00f ; -- <0173> end_event
    0177 : 006b ; -- <0173> "

-- ######## event spi_done_handler -- = 0x0178
-- discard-counter in RAM.
    0178 : 4a00 ; -- <0177> ram a = $ram_daq_discard_cnt -- av_ad_hi = 0
    0179 : 4e04 ; -- <0177> ram a = $ram_daq_discard_cnt -- av_ad_lo = 4
    017a : 0010 ; -- <0177> ram a = $ram_daq_discard_cnt -- a = av_write_data -- start read cycle
    017b : 0011 ; -- <0177> ram a = $ram_daq_discard_cnt -- a = av_read_data -- finish read cycle
    017c : e000 ; -- <0178> br az :report
    017d : 018a ; -- <0178> "
    017e : 0760 ; -- <0179> b = -1
    017f : c800 ; -- <0180> a = a+b
    0180 : 0300 ; -- <0180> "
    0181 : 4a00 ; -- <0181> ram $ram_daq_discard_cnt = a -- av_ad_hi = 0
    0182 : 4e04 ; -- <0181> ram $ram_daq_discard_cnt = a -- av_ad_lo = 4
    0183 : 4000 ; -- <0181> ram $ram_daq_discard_cnt = a -- av_write_data = a
    0184 : 0207 ; -- <0182> a = $anmux_adc_channel
    0185 : fba0 ; -- <0183> call :begin_adc_conversion
    0186 : 023a ; -- <0183> "
    0187 : fc00 ; -- <0183> "
    0188 : e00f ; -- <0184> event_return
    0189 : 006b ; -- <0184> "

-- report ADC reading.
-- :report -- = 0x018a
    018a : 000f ; -- <0188> a = spi_data
    018b : fba0 ; -- <0189> call :put4x
    018c : 00d0 ; -- <0189> "
    018d : fc00 ; -- <0189> "

-- decrement anmux channel & start waiting again.
    018e : fba0 ; -- <0192> call :anmux_get_chn
    018f : 0093 ; -- <0192> "
    0190 : fc00 ; -- <0192> "
    0191 : e000 ; -- <0193> br az :all_done
    0192 : 019c ; -- <0193> "
    0193 : 0760 ; -- <0194> b = -1
    0194 : c800 ; -- <0195> a = a+b
    0195 : 0300 ; -- <0195> "
    0196 : fba0 ; -- <0196> call :anmux_set_chn
    0197 : 008f ; -- <0196> "
    0198 : fc00 ; -- <0196> "
    0199 : 3a05 ; -- <0197> mstimer1 = $anmux_settle_ms
    019a : e00f ; -- <0198> event_return
    019b : 006b ; -- <0198> "

-- end of daq pass.
-- :all_done -- = 0x019c
    019c : 020d ; -- <0202> a = 13 -- puteol
    019d : 0000 ; -- <0202> a = a -- puteol
    019e : fba0 ; -- <0202> puteol
    019f : 0078 ; -- <0202> "
    01a0 : fc00 ; -- <0202> "
    01a1 : 020a ; -- <0202> a = 10 -- puteol
    01a2 : 0000 ; -- <0202> a = a -- puteol
    01a3 : fba0 ; -- <0202> puteol
    01a4 : 0078 ; -- <0202> "
    01a5 : fc00 ; -- <0202> "
    01a6 : e00f ; -- <0203> end_event
    01a7 : 006b ; -- <0203> "

-- ######## event mstimer0_handler -- = 0x01a8
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    01a8 : 37a0 ; -- <0209> mstimer0 = 1000
    01a9 : 03e8 ; -- <0209> "

-- realtime counters in RAM.
    01aa : 4a00 ; -- <0212> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    01ab : 4e08 ; -- <0212> ram a = $ram_seconds_cnt -- av_ad_lo = 8
    01ac : 0010 ; -- <0212> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    01ad : 0011 ; -- <0212> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    01ae : 0601 ; -- <0213> b = 1
    01af : c800 ; -- <0214> a = a+b
    01b0 : 0300 ; -- <0214> "
    01b1 : 063c ; -- <0215> b = 60
    01b2 : e407 ; -- <0216> bn eq :same_minute
    01b3 : 01c5 ; -- <0216> "
    01b4 : 4a00 ; -- <0217> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    01b5 : 4e08 ; -- <0217> ram $ram_seconds_cnt = 0 -- av_ad_lo = 8
    01b6 : 4200 ; -- <0217> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    01b7 : 4a00 ; -- <0218> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    01b8 : 4e06 ; -- <0218> ram a = $ram_minutes_cnt -- av_ad_lo = 6
    01b9 : 0010 ; -- <0218> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    01ba : 0011 ; -- <0218> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    01bb : 0601 ; -- <0219> b = 1
    01bc : 4a00 ; -- <0220> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    01bd : 4e06 ; -- <0220> ram $ram_minutes_cnt = a+b -- av_ad_lo = 6
    01be : c800 ; -- <0220> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    01bf : 4300 ; -- <0220> "
    01c0 : fba0 ; -- <0221> call :minute_events
    01c1 : 0260 ; -- <0221> "
    01c2 : fc00 ; -- <0221> "
    01c3 : e00f ; -- <0222> jmp :minutes_done
    01c4 : 01c8 ; -- <0222> "
-- :same_minute -- = 0x01c5
    01c5 : 4a00 ; -- <0224> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    01c6 : 4e08 ; -- <0224> ram $ram_seconds_cnt = a -- av_ad_lo = 8
    01c7 : 4000 ; -- <0224> ram $ram_seconds_cnt = a -- av_write_data = a
-- :minutes_done -- = 0x01c8

    01c8 : fba0 ; -- <0227> call :check_power_relay
    01c9 : 0266 ; -- <0227> "
    01ca : fc00 ; -- <0227> "
    01cb : fba0 ; -- <0228> call :start_daq_pass
    01cc : 021f ; -- <0228> "
    01cd : fc00 ; -- <0228> "
    01ce : e00f ; -- <0229> end_event
    01cf : 006b ; -- <0229> "

-- ######## event mstimer1_handler -- = 0x01d0
-- start a reading from the current anmux channel.
    01d0 : 4a00 ; -- <0233> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_hi = 0
    01d1 : 4e04 ; -- <0233> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_ad_lo = 4
    01d2 : 4202 ; -- <0233> ram $ram_daq_discard_cnt = $anmux_num_discards -- av_write_data = 2
    01d3 : 0220 ; -- <0234> a = 32 -- putasc " "
    01d4 : 0000 ; -- <0234> a = a -- putasc " "
    01d5 : fba0 ; -- <0234> putasc " "
    01d6 : 0078 ; -- <0234> "
    01d7 : fc00 ; -- <0234> "
    01d8 : 0273 ; -- <0235> a = 115 -- putasc "s"
    01d9 : 0000 ; -- <0235> a = a -- putasc "s"
    01da : fba0 ; -- <0235> putasc "s"
    01db : 0078 ; -- <0235> "
    01dc : fc00 ; -- <0235> "
    01dd : fba0 ; -- <0236> call :anmux_get_chn
    01de : 0093 ; -- <0236> "
    01df : fc00 ; -- <0236> "
    01e0 : 0630 ; -- <0237> b = 48 -- asc b = "0"
    01e1 : c800 ; -- <0238> a = a+b -- putchar a+b
    01e2 : 0300 ; -- <0238> "
    01e3 : fba0 ; -- <0238> putchar a+b
    01e4 : 0078 ; -- <0238> "
    01e5 : fc00 ; -- <0238> "
    01e6 : 023d ; -- <0239> a = 61 -- putasc "="
    01e7 : 0000 ; -- <0239> a = a -- putasc "="
    01e8 : fba0 ; -- <0239> putasc "="
    01e9 : 0078 ; -- <0239> "
    01ea : fc00 ; -- <0239> "
    01eb : 0207 ; -- <0240> a = $anmux_adc_channel
    01ec : fba0 ; -- <0241> call :begin_adc_conversion
    01ed : 023a ; -- <0241> "
    01ee : fc00 ; -- <0241> "
    01ef : e00f ; -- <0242> end_event
    01f0 : 006b ; -- <0242> "

-- ######## event uart_rx_handler -- = 0x01f1
-- handle data here
    01f1 : e00f ; -- <0246> end_event
    01f2 : 006b ; -- <0246> "

-- ######## event uart_rx_overflow_handler -- = 0x01f3
    01f3 : 5fa0 ; -- <0249> error_halt_code $err_rx_overflow -- leds = 0xfffe
    01f4 : fffe ; -- <0249> "
    01f5 : e00f ; -- <0249> error_halt_code $err_rx_overflow
    01f6 : 01f5 ; -- <0249> "
    01f7 : e00f ; -- <0250> end_event
    01f8 : 006b ; -- <0250> "

-- ######## event uart_tx_overflow_handler -- = 0x01f9
    01f9 : 5fa0 ; -- <0253> error_halt_code $err_tx_overflow -- leds = 0xfffd
    01fa : fffd ; -- <0253> "
    01fb : e00f ; -- <0253> error_halt_code $err_tx_overflow
    01fc : 01fb ; -- <0253> "
    01fd : e00f ; -- <0254> end_event
    01fe : 006b ; -- <0254> "

-- ######## event key0_handler -- = 0x01ff
    01ff : 026b ; -- <0257> a = 107 -- putasc "k"
    0200 : 0000 ; -- <0257> a = a -- putasc "k"
    0201 : fba0 ; -- <0257> putasc "k"
    0202 : 0078 ; -- <0257> "
    0203 : fc00 ; -- <0257> "
    0204 : 0230 ; -- <0258> a = 48 -- putasc "0"
    0205 : 0000 ; -- <0258> a = a -- putasc "0"
    0206 : fba0 ; -- <0258> putasc "0"
    0207 : 0078 ; -- <0258> "
    0208 : fc00 ; -- <0258> "
    0209 : e00f ; -- <0259> end_event
    020a : 006b ; -- <0259> "

-- ######## event key1_handler -- = 0x020b
    020b : 026b ; -- <0262> a = 107 -- putasc "k"
    020c : 0000 ; -- <0262> a = a -- putasc "k"
    020d : fba0 ; -- <0262> putasc "k"
    020e : 0078 ; -- <0262> "
    020f : fc00 ; -- <0262> "
    0210 : 0231 ; -- <0263> a = 49 -- putasc "1"
    0211 : 0000 ; -- <0263> a = a -- putasc "1"
    0212 : fba0 ; -- <0263> putasc "1"
    0213 : 0078 ; -- <0263> "
    0214 : fc00 ; -- <0263> "
    0215 : e00f ; -- <0264> end_event
    0216 : 006b ; -- <0264> "

-- ######## event softevent3_handler -- = 0x0217
    0217 : e00f ; -- <0267> end_event
    0218 : 006b ; -- <0267> "

-- ######## event softevent2_handler -- = 0x0219
    0219 : e00f ; -- <0270> end_event
    021a : 006b ; -- <0270> "

-- ######## event softevent1_handler -- = 0x021b
    021b : e00f ; -- <0273> end_event
    021c : 006b ; -- <0273> "

-- ######## event softevent0_handler -- = 0x021d
    021d : e00f ; -- <0276> end_event
    021e : 006b ; -- <0276> "

-- ######## func start_daq_pass -- = 0x021f
    021f : 203e ; -- <0278> push rtna -- func start_daq_pass
-- daq pass counter in RAM.
    0220 : 4a00 ; -- <0280> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0221 : 4e02 ; -- <0280> ram a = $ram_daq_pass_cnt -- av_ad_lo = 2
    0222 : 0010 ; -- <0280> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0223 : 0011 ; -- <0280> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0224 : 0601 ; -- <0281> b = 1
    0225 : c800 ; -- <0282> a = a+b
    0226 : 0300 ; -- <0282> "
    0227 : 5c00 ; -- <0283> leds = a
    0228 : 4a00 ; -- <0284> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    0229 : 4e02 ; -- <0284> ram $ram_daq_pass_cnt = a -- av_ad_lo = 2
    022a : 4000 ; -- <0284> ram $ram_daq_pass_cnt = a -- av_write_data = a
    022b : fba0 ; -- <0285> call :put4x
    022c : 00d0 ; -- <0285> "
    022d : fc00 ; -- <0285> "
    022e : 023a ; -- <0286> a = 58 -- putasc ":"
    022f : 0000 ; -- <0286> a = a -- putasc ":"
    0230 : fba0 ; -- <0286> putasc ":"
    0231 : 0078 ; -- <0286> "
    0232 : fc00 ; -- <0286> "

-- start to acquire & report all anmux channels.
    0233 : 0207 ; -- <0289> a = 7
    0234 : fba0 ; -- <0290> call :anmux_set_chn
    0235 : 008f ; -- <0290> "
    0236 : fc00 ; -- <0290> "
    0237 : 3a05 ; -- <0291> mstimer1 = $anmux_settle_ms

-- -- observe MCU utilization.
-- a = usage_count
-- call :put4x
-- usage_count = 0
    0238 : f808 ; -- <0297> pop rtna -- end_func
    0239 : fc00 ; -- <0297> end_func

-- ######## func begin_adc_conversion -- = 0x023a
-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.  pass that in a.

    023a : 0352 ; -- <0303> a = a<<4
    023b : 0352 ; -- <0304> a = a<<4
    023c : 0351 ; -- <0305> a = a<<1
    023d : 0351 ; -- <0306> a = a<<1
    023e : 0351 ; -- <0307> a = a<<1
    023f : 3c00 ; -- <0308> spi_data = a
    0240 : fc00 ; -- <0309> end_func

-- ######## event power_lost_handler -- = 0x0241
-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    0241 : 6600 ; -- <0316> power_duty = $power_duty_closing
    0242 : 4a00 ; -- <0317> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0243 : 4e02 ; -- <0317> ram a = $ram_daq_pass_cnt -- av_ad_lo = 2
    0244 : 0010 ; -- <0317> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0245 : 0011 ; -- <0317> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0246 : 0602 ; -- <0318> b = $relay_hold_passes
    0247 : 4a00 ; -- <0319> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    0248 : 4e0c ; -- <0319> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 12
    0249 : c800 ; -- <0319> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    024a : 4300 ; -- <0319> "
-- save persistent data in case the power remains down e.g. due to battery disconnect.
    024b : fba0 ; -- <0321> call :save_persistent_data
    024c : 028d ; -- <0321> "
    024d : fc00 ; -- <0321> "
    024e : e00f ; -- <0322> end_event
    024f : 006b ; -- <0322> "

-- ######## event ignition_switch_off_handler -- = 0x0250
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    0250 : 4a00 ; -- <0326> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0251 : 4e06 ; -- <0326> ram a = $ram_minutes_cnt -- av_ad_lo = 6
    0252 : 0010 ; -- <0326> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0253 : 0011 ; -- <0326> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0254 : 061e ; -- <0327> b = $power_extend_minutes
    0255 : 4a00 ; -- <0328> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    0256 : 4e0a ; -- <0328> ram $ram_power_down_at_min = a+b -- av_ad_lo = 10
    0257 : c800 ; -- <0328> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    0258 : 4300 ; -- <0328> "
    0259 : e00f ; -- <0329> end_event
    025a : 006b ; -- <0329> "

-- ######## event ignition_switch_on_handler -- = 0x025b
    025b : 4a00 ; -- <0332> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    025c : 4e0a ; -- <0332> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 10
    025d : 4360 ; -- <0332> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    025e : e00f ; -- <0333> end_event
    025f : 006b ; -- <0333> "

-- ######## func minute_events -- = 0x0260
    0260 : 203e ; -- <0335> push rtna -- func minute_events
    0261 : fba0 ; -- <0336> call :check_power_down
    0262 : 0272 ; -- <0336> "
    0263 : fc00 ; -- <0336> "
    0264 : f808 ; -- <0337> pop rtna -- end_func
    0265 : fc00 ; -- <0337> end_func

-- ######## func check_power_relay -- = 0x0266
    0266 : 4a00 ; -- <0340> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0267 : 4e02 ; -- <0340> ram a = $ram_daq_pass_cnt -- av_ad_lo = 2
    0268 : 0010 ; -- <0340> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0269 : 0011 ; -- <0340> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    026a : 4a00 ; -- <0341> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    026b : 4e0c ; -- <0341> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 12
    026c : 0410 ; -- <0341> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    026d : 0411 ; -- <0341> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle
    026e : e407 ; -- <0342> bn eq :done
    026f : 0271 ; -- <0342> "
-- time to begin "solenoid saver" coil power reduction by PWM.
    0270 : 6610 ; -- <0344> power_duty = $power_duty_holding
-- :done -- = 0x0271
    0271 : fc00 ; -- <0346> end_func

-- ######## func check_power_down -- = 0x0272
    0272 : 203e ; -- <0348> push rtna -- func check_power_down
-- check power-down deadline in RAM.
    0273 : 4a00 ; -- <0350> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0274 : 4e06 ; -- <0350> ram a = $ram_minutes_cnt -- av_ad_lo = 6
    0275 : 0010 ; -- <0350> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0276 : 0011 ; -- <0350> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0277 : 4a00 ; -- <0351> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    0278 : 4e0a ; -- <0351> ram b = $ram_power_down_at_min -- av_ad_lo = 10
    0279 : 0410 ; -- <0351> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    027a : 0411 ; -- <0351> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle
    027b : e407 ; -- <0352> bn eq :done
    027c : 0280 ; -- <0352> "
    027d : fba0 ; -- <0353> call :power_down
    027e : 0282 ; -- <0353> "
    027f : fc00 ; -- <0353> "
-- :done -- = 0x0280
    0280 : f808 ; -- <0355> pop rtna -- end_func
    0281 : fc00 ; -- <0355> end_func

-- ######## func power_down -- = 0x0282
    0282 : 203e ; -- <0357> push rtna -- func power_down
-- this function never returns.
    0283 : fba0 ; -- <0359> call :save_persistent_data
    0284 : 028d ; -- <0359> "
    0285 : fc00 ; -- <0359> "
    0286 : 6632 ; -- <0360> power_duty = $power_duty_opening
    0287 : 5fa0 ; -- <0361> error_halt_code $err_power_down -- leds = 0xfffc
    0288 : fffc ; -- <0361> "
    0289 : e00f ; -- <0361> error_halt_code $err_power_down
    028a : 0289 ; -- <0361> "
    028b : f808 ; -- <0362> pop rtna -- end_func
    028c : fc00 ; -- <0362> end_func

-- ######## func save_persistent_data -- = 0x028d
    028d : fc00 ; -- <0365> end_func

        
        END;
    
