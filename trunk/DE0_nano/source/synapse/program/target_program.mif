
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 0478 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.





-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in jf "jiffies" or "jf".
-- 5000 RPM = about 140 jf between rising edges on chevy ignition white wire.
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 001e ; -- <0181> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0181>   
    0004 : 2020 ; -- <0181>   
    0005 : 2020 ; -- <0181>   
    0006 : 6120 ; -- <0181> a 
-- "       b"
    0007 : 2020 ; -- <0181>   
    0008 : 2020 ; -- <0181>   
    0009 : 2020 ; -- <0181>   
    000a : 6220 ; -- <0181> b 
-- "       i"
    000b : 2020 ; -- <0181>   
    000c : 2020 ; -- <0181>   
    000d : 2020 ; -- <0181>   
    000e : 6920 ; -- <0181> i 
-- "       j"
    000f : 2020 ; -- <0181>   
    0010 : 2020 ; -- <0181>   
    0011 : 2020 ; -- <0181>   
    0012 : 6a20 ; -- <0181> j 
-- "       x"
    0013 : 2020 ; -- <0181>   
    0014 : 2020 ; -- <0181>   
    0015 : 2020 ; -- <0181>   
    0016 : 7820 ; -- <0181> x 
-- "       y"
    0017 : 2020 ; -- <0181>   
    0018 : 2020 ; -- <0181>   
    0019 : 2020 ; -- <0181>   
    001a : 7920 ; -- <0181> y 
-- "      g6"
    001b : 2020 ; -- <0181>   
    001c : 2020 ; -- <0181>   
    001d : 2020 ; -- <0181>   
    001e : 3667 ; -- <0181> 6g
-- "      g7"
    001f : 2020 ; -- <0181>   
    0020 : 2020 ; -- <0181>   
    0021 : 2020 ; -- <0181>   
    0022 : 3767 ; -- <0181> 7g
-- "--rstk  "
    0023 : 2f2f ; -- <0181> --
    0024 : 7372 ; -- <0181> sr
    0025 : 6b74 ; -- <0181> kt
    0026 : 2020 ; -- <0181>   
-- "  ev_pri"
    0027 : 2020 ; -- <0181>   
    0028 : 7665 ; -- <0181> ve
    0029 : 705f ; -- <0181> p_
    002a : 6972 ; -- <0181> ir
-- "softevnt"
    002b : 6f73 ; -- <0181> os
    002c : 7466 ; -- <0181> tf
    002d : 7665 ; -- <0181> ve
    002e : 746e ; -- <0181> tn
-- "   usage"
    002f : 2020 ; -- <0181>   
    0030 : 7520 ; -- <0181> u 
    0031 : 6173 ; -- <0181> as
    0032 : 6567 ; -- <0181> eg
-- "ustimer0"
    0033 : 7375 ; -- <0181> su
    0034 : 6974 ; -- <0181> it
    0035 : 656d ; -- <0181> em
    0036 : 3072 ; -- <0181> 0r
-- "mstimer0"
    0037 : 736d ; -- <0181> sm
    0038 : 6974 ; -- <0181> it
    0039 : 656d ; -- <0181> em
    003a : 3072 ; -- <0181> 0r
-- "mstimer1"
    003b : 736d ; -- <0181> sm
    003c : 6974 ; -- <0181> it
    003d : 656d ; -- <0181> em
    003e : 3172 ; -- <0181> 1r
-- "mstimer2"
    003f : 736d ; -- <0181> sm
    0040 : 6974 ; -- <0181> it
    0041 : 656d ; -- <0181> em
    0042 : 3272 ; -- <0181> 2r
-- "spi_data"
    0043 : 7073 ; -- <0181> ps
    0044 : 5f69 ; -- <0181> _i
    0045 : 6164 ; -- <0181> ad
    0046 : 6174 ; -- <0181> at
-- "--avwrdt"
    0047 : 2f2f ; -- <0181> --
    0048 : 7661 ; -- <0181> va
    0049 : 7277 ; -- <0181> rw
    004a : 7464 ; -- <0181> td
-- "av_rd_dt"
    004b : 7661 ; -- <0181> va
    004c : 725f ; -- <0181> r_
    004d : 5f64 ; -- <0181> _d
    004e : 7464 ; -- <0181> td
-- "av_ad_hi"
    004f : 7661 ; -- <0181> va
    0050 : 615f ; -- <0181> a_
    0051 : 5f64 ; -- <0181> _d
    0052 : 6968 ; -- <0181> ih
-- "av_ad_lo"
    0053 : 7661 ; -- <0181> va
    0054 : 615f ; -- <0181> a_
    0055 : 5f64 ; -- <0181> _d
    0056 : 6f6c ; -- <0181> ol
-- "--uartdt"
    0057 : 2f2f ; -- <0181> --
    0058 : 6175 ; -- <0181> au
    0059 : 7472 ; -- <0181> tr
    005a : 7464 ; -- <0181> td
-- "uartstat"
    005b : 6175 ; -- <0181> au
    005c : 7472 ; -- <0181> tr
    005d : 7473 ; -- <0181> ts
    005e : 7461 ; -- <0181> ta
-- "    leds"
    005f : 2020 ; -- <0181>   
    0060 : 2020 ; -- <0181>   
    0061 : 656c ; -- <0181> el
    0062 : 7364 ; -- <0181> sd
-- "brd_ctrl"
    0063 : 7262 ; -- <0181> rb
    0064 : 5f64 ; -- <0181> _d
    0065 : 7463 ; -- <0181> tc
    0066 : 6c72 ; -- <0181> lr
-- "   anmux"
    0067 : 2020 ; -- <0181>   
    0068 : 6120 ; -- <0181> a 
    0069 : 6d6e ; -- <0181> mn
    006a : 7875 ; -- <0181> xu
-- "pwr_duty"
    006b : 7770 ; -- <0181> wp
    006c : 5f72 ; -- <0181> _r
    006d : 7564 ; -- <0181> ud
    006e : 7974 ; -- <0181> yt
-- "igntmcap"
    006f : 6769 ; -- <0181> gi
    0070 : 746e ; -- <0181> tn
    0071 : 636d ; -- <0181> cm
    0072 : 7061 ; -- <0181> pa
-- "igntmout"
    0073 : 6769 ; -- <0181> gi
    0074 : 746e ; -- <0181> tn
    0075 : 6f6d ; -- <0181> om
    0076 : 7475 ; -- <0181> tu
-- "puflenus"
    0077 : 7570 ; -- <0181> up
    0078 : 6c66 ; -- <0181> lf
    0079 : 6e65 ; -- <0181> ne
    007a : 7375 ; -- <0181> su

-- string resources
-- :boot_msg -- = 0x007b
-- "TGT\r\n\x0"
    007b : 4754 ; -- <0185> GT
    007c : 0d54 ; -- <0185>  T
    007d : 000a ; -- <0185>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x007e
-- initialize prior to polling loop, for minimum latency.
    007e : 07a0 ; -- <0006> b = :event_table
    007f : 04a0 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0080
    0080 : 0009 ; -- <0009> a = event_priority
    0081 : e000 ; -- <0010> br 0z :poll_events_again
    0082 : 0080 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0083 : 2400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0084 : d300 ; -- <0015> fetch rtna from ad0
    0085 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0086 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0087 : 5fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0088 : ffc0 ; -- <0021> "
    0089 : e00f ; -- <0021> error_halt_code 0xffc0
    008a : 0089 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x008b
    008b : 2004 ; -- <0046> push x -- func putchar_fduart

    008c : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    008d : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x008e
    008e : 0416 ; -- <0053> b = fduart_status
    008f : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    0090 : 008e ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    0091 : 5404 ; -- <0057> fduart_data = x
    0092 : 1008 ; -- <0058> pop x -- end_func
    0093 : fc00 ; -- <0058> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x0094
-- wait until FIFO is populated.
    0094 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x0095
    0095 : 0416 ; -- <0066> b = fduart_status
    0096 : e403 ; -- <0067> bn and0z :wait_for_busy
    0097 : 0095 ; -- <0067> "
    0098 : 0015 ; -- <0068> a = fduart_data
    0099 : fc00 ; -- <0069> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x009a
-- check for FIFO is populated.
    009a : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    009b : 0416 ; -- <0075> b = fduart_status
    009c : e403 ; -- <0076> bn and0z :none
    009d : 00a0 ; -- <0076> "
    009e : 0015 ; -- <0077> a = fduart_data
    009f : fc00 ; -- <0078> swapra = nop
-- :none -- = 0x00a0
    00a0 : 0360 ; -- <0080> a = -1
    00a1 : fc00 ; -- <0081> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00a2
-- set & enable analog muxer
    00a2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00a3 : c800 ; -- <0008> anmux_ctrl = or
    00a4 : 6734 ; -- <0008> "
    00a5 : fc00 ; -- <0009> swapra = nop

-- ######## func anmux_get_chn -- = 0x00a6
    00a6 : 0019 ; -- <0012> a = anmux_ctrl
    00a7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00a8 : c800 ; -- <0014> a = and
    00a9 : 0330 ; -- <0014> "
    00aa : fc00 ; -- <0015> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00ab
-- "0123456789abcdef"
    00ab : 3130 ; -- <0050> 10
    00ac : 3332 ; -- <0050> 32
    00ad : 3534 ; -- <0050> 54
    00ae : 3736 ; -- <0050> 76
    00af : 3938 ; -- <0050> 98
    00b0 : 6261 ; -- <0050> ba
    00b1 : 6463 ; -- <0050> dc
    00b2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00b3
    00b3 : 2004 ; -- <0054> push x -- func put4x
    00b4 : 2006 ; -- <0054> push g6 -- "
    00b5 : 203e ; -- <0054> push rtna -- "
    00b6 : 13a0 ; -- <0055> x = :hexdigits
    00b7 : 00ab ; -- <0055> "

    00b8 : 1800 ; -- <0057> g6 = a
    00b9 : 07a0 ; -- <0058> b = 0xF000
    00ba : f000 ; -- <0058> "
    00bb : c800 ; -- <0059> a = and
    00bc : 0330 ; -- <0059> "
    00bd : 0353 ; -- <0060> a = a>>4
    00be : 0353 ; -- <0061> a = a>>4
    00bf : 0353 ; -- <0062> a = a>>4
    00c0 : fba0 ; -- <0063> call fetch_byte
    00c1 : 01cc ; -- <0063> "
    00c2 : fc00 ; -- <0063> "
    00c3 : fba0 ; -- <0064> putchar a
    00c4 : 008b ; -- <0064> "
    00c5 : fc00 ; -- <0064> "

    00c6 : 0006 ; -- <0066> a = g6
    00c7 : 07a0 ; -- <0067> b = 0x0F00
    00c8 : 0f00 ; -- <0067> "
    00c9 : c800 ; -- <0068> a = and
    00ca : 0330 ; -- <0068> "
    00cb : 0353 ; -- <0069> a = a>>4
    00cc : 0353 ; -- <0070> a = a>>4
    00cd : fba0 ; -- <0071> call fetch_byte
    00ce : 01cc ; -- <0071> "
    00cf : fc00 ; -- <0071> "
    00d0 : fba0 ; -- <0072> putchar a
    00d1 : 008b ; -- <0072> "
    00d2 : fc00 ; -- <0072> "

    00d3 : 0006 ; -- <0074> a = g6
    00d4 : 06f0 ; -- <0075> b = 0x00F0
    00d5 : c800 ; -- <0076> a = and
    00d6 : 0330 ; -- <0076> "
    00d7 : 0353 ; -- <0077> a = a>>4
    00d8 : fba0 ; -- <0078> call fetch_byte
    00d9 : 01cc ; -- <0078> "
    00da : fc00 ; -- <0078> "
    00db : fba0 ; -- <0079> putchar a
    00dc : 008b ; -- <0079> "
    00dd : fc00 ; -- <0079> "

    00de : 0006 ; -- <0081> a = g6
    00df : 060f ; -- <0082> b = 0x000F
    00e0 : c800 ; -- <0083> a = and
    00e1 : 0330 ; -- <0083> "
    00e2 : fba0 ; -- <0084> call fetch_byte
    00e3 : 01cc ; -- <0084> "
    00e4 : fc00 ; -- <0084> "
    00e5 : fba0 ; -- <0085> putchar a
    00e6 : 008b ; -- <0085> "
    00e7 : fc00 ; -- <0085> "

    00e8 : f808 ; -- <0087> pop rtna -- end_func
    00e9 : 1808 ; -- <0087> pop g6 -- "
    00ea : 1008 ; -- <0087> pop x -- "
    00eb : fc00 ; -- <0087> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00ec
    00ec : 2002 ; -- <0091> push i -- func get4x
    00ed : 2003 ; -- <0091> push j -- "
    00ee : 2004 ; -- <0091> push x -- "
    00ef : 2005 ; -- <0091> push y -- "
    00f0 : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    00f1 : 1604 ; -- <0094> y = 4
-- :again -- = 0x00f2
    00f2 : fba0 ; -- <0096> getchar
    00f3 : 0094 ; -- <0096> "
    00f4 : fc00 ; -- <0096> "
    00f5 : 13a0 ; -- <0097> x = :hexdigits
    00f6 : 00ab ; -- <0097> "
    00f7 : 0a10 ; -- <0098> i = 16
    00f8 : fba0 ; -- <0099> call :find_in_fetch
    00f9 : 01e0 ; -- <0099> "
    00fa : fc00 ; -- <0099> "
    00fb : 0760 ; -- <0100> b = -1
    00fc : e007 ; -- <0101> br eq :fail
    00fd : 0111 ; -- <0101> "
    00fe : 0400 ; -- <0102> b = a
    00ff : 0003 ; -- <0103> a = j
    0100 : 0352 ; -- <0104> a = a<<4
    0101 : c800 ; -- <0105> j = or
    0102 : 0f34 ; -- <0105> "
    0103 : 1360 ; -- <0106> x = -1
    0104 : c800 ; -- <0107> y = x+y
    0105 : 1720 ; -- <0107> "
    0106 : 0005 ; -- <0108> a = y
    0107 : e400 ; -- <0109> bn az :again
    0108 : 00f2 ; -- <0109> "
    0109 : 0003 ; -- <0110> a = j
    010a : 0600 ; -- <0111> b = 0
    010b : f808 ; -- <0112> pop rtna -- rtn
    010c : 1408 ; -- <0112> pop y -- "
    010d : 1008 ; -- <0112> pop x -- "
    010e : 0c08 ; -- <0112> pop j -- "
    010f : 0808 ; -- <0112> pop i -- "
    0110 : fc00 ; -- <0112> swapra = nop
-- :fail -- = 0x0111
    0111 : 0760 ; -- <0114> b = -1
    0112 : f808 ; -- <0115> pop rtna -- end_func
    0113 : 1408 ; -- <0115> pop y -- "
    0114 : 1008 ; -- <0115> pop x -- "
    0115 : 0c08 ; -- <0115> pop j -- "
    0116 : 0808 ; -- <0115> pop i -- "
    0117 : fc00 ; -- <0115> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0118
    0118 : 2002 ; -- <0121> push i -- func print_fixed
    0119 : 2003 ; -- <0121> push j -- "
    011a : 2004 ; -- <0121> push x -- "
    011b : 2005 ; -- <0121> push y -- "
    011c : 2006 ; -- <0121> push g6 -- "
    011d : 203e ; -- <0121> push rtna -- "
    011e : 0800 ; -- <0122> i = a
    011f : 0e01 ; -- <0123> j = 1
    0120 : 1001 ; -- <0124> x = b
    0121 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0122
    0122 : e002 ; -- <0127> br xz :done
    0123 : 0138 ; -- <0127> "
    0124 : 1320 ; -- <0128> x = ad2
    0125 : d002 ; -- <0129> fetch g6 from i
    0126 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0127 : 0006 ; -- <0131> a = g6 -- putchar g6
    0128 : fba0 ; -- <0131> putchar g6
    0129 : 008b ; -- <0131> "
    012a : fc00 ; -- <0131> "
    012b : e002 ; -- <0132> br xz :done
    012c : 0138 ; -- <0132> "
    012d : 1320 ; -- <0133> x = ad2
    012e : 0006 ; -- <0134> a = g6
    012f : 0353 ; -- <0135> a = a>>4
    0130 : 0353 ; -- <0136> a = a>>4
    0131 : fba0 ; -- <0137> putchar a
    0132 : 008b ; -- <0137> "
    0133 : fc00 ; -- <0137> "
    0134 : c800 ; -- <0138> i = i+j
    0135 : 0b10 ; -- <0138> "
    0136 : e00f ; -- <0139> jmp :next_word
    0137 : 0122 ; -- <0139> "
-- :done -- = 0x0138
    0138 : f808 ; -- <0141> pop rtna -- end_func
    0139 : 1808 ; -- <0141> pop g6 -- "
    013a : 1408 ; -- <0141> pop y -- "
    013b : 1008 ; -- <0141> pop x -- "
    013c : 0c08 ; -- <0141> pop j -- "
    013d : 0808 ; -- <0141> pop i -- "
    013e : fc00 ; -- <0141> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x013f
    013f : 2002 ; -- <0147> push i -- func print_nt
    0140 : 2003 ; -- <0147> push j -- "
    0141 : 2004 ; -- <0147> push x -- "
    0142 : 203e ; -- <0147> push rtna -- "
    0143 : 0800 ; -- <0148> i = a
    0144 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0145
    0145 : d002 ; -- <0151> fetch x from i
    0146 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0147 : 0004 ; -- <0153> a = x
    0148 : 06ff ; -- <0154> b = 0xff
    0149 : e003 ; -- <0155> br and0z :done
    014a : 015b ; -- <0155> "
    014b : fba0 ; -- <0156> putchar a
    014c : 008b ; -- <0156> "
    014d : fc00 ; -- <0156> "
    014e : 0004 ; -- <0157> a = x
    014f : 0353 ; -- <0158> a = a>>4
    0150 : 0353 ; -- <0159> a = a>>4
    0151 : 06ff ; -- <0160> b = 0xff
    0152 : e003 ; -- <0161> br and0z :done
    0153 : 015b ; -- <0161> "
    0154 : fba0 ; -- <0162> putchar a
    0155 : 008b ; -- <0162> "
    0156 : fc00 ; -- <0162> "
    0157 : c800 ; -- <0163> i = i+j
    0158 : 0b10 ; -- <0163> "
    0159 : e00f ; -- <0164> jmp :next_word
    015a : 0145 ; -- <0164> "
-- :done -- = 0x015b
    015b : f808 ; -- <0166> pop rtna -- end_func
    015c : 1008 ; -- <0166> pop x -- "
    015d : 0c08 ; -- <0166> pop j -- "
    015e : 0808 ; -- <0166> pop i -- "
    015f : fc00 ; -- <0166> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0160
    0160 : 2002 ; -- <0004> push i -- func multiply
    0161 : 2003 ; -- <0004> push j -- "
    0162 : 2004 ; -- <0004> push x -- "
    0163 : 2005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0164 : 1000 ; -- <0009> x = a
    0165 : 1401 ; -- <0010> y = b
    0166 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0167
    0167 : e002 ; -- <0013> br xz :done
    0168 : 0176 ; -- <0013> "
    0169 : 0004 ; -- <0014> a = x
    016a : 0601 ; -- <0015> b = 1
    016b : e003 ; -- <0016> br and0z :skip_add
    016c : 0170 ; -- <0016> "
    016d : 0c05 ; -- <0017> j = y
    016e : c800 ; -- <0018> i = i+j
    016f : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0170
    0170 : 0004 ; -- <0020> a = x
    0171 : 1350 ; -- <0021> x = a>>1
    0172 : 0005 ; -- <0022> a = y
    0173 : 1751 ; -- <0023> y = a<<1
    0174 : e00f ; -- <0024> jmp :again
    0175 : 0167 ; -- <0024> "
-- :done -- = 0x0176
    0176 : 0002 ; -- <0026> a = i
    0177 : 1408 ; -- <0027> pop y -- end_func
    0178 : 1008 ; -- <0027> pop x -- "
    0179 : 0c08 ; -- <0027> pop j -- "
    017a : 0808 ; -- <0027> pop i -- "
    017b : fc00 ; -- <0027> swapra = nop

-- ######## func divide -- = 0x017c
    017c : 2002 ; -- <0029> push i -- func divide
    017d : 2003 ; -- <0029> push j -- "
    017e : 2004 ; -- <0029> push x -- "
    017f : 2005 ; -- <0029> push y -- "
    0180 : 2006 ; -- <0029> push g6 -- "
    0181 : 2007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0182 : e005 ; -- <0037> br lt :zero
    0183 : 01bd ; -- <0037> "
    0184 : e000 ; -- <0038> br az :zero
    0185 : 01bd ; -- <0038> "
    0186 : 1000 ; -- <0039> x = a
--    g7 = x
    0187 : 0001 ; -- <0041> a = b
    0188 : e000 ; -- <0042> br az :zero
    0189 : 01bd ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    018a : 0404 ; -- <0058> b = x
    018b : 0a00 ; -- <0059> i = 0
    018c : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x018d
    018d : e006 ; -- <0062> br gt :shift_done
    018e : 0193 ; -- <0062> "
    018f : 0351 ; -- <0063> a = a<<1
    0190 : 0b10 ; -- <0064> i = ad1
    0191 : e00f ; -- <0065> jmp :shift_again
    0192 : 018d ; -- <0065> "
-- :shift_done -- = 0x0193
    0193 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    0194 : 1e00 ; -- <0078> g7 = 0
    0195 : 0f60 ; -- <0079> j = -1
-- :again -- = 0x0196
    0196 : e001 ; -- <0081> br iz :done
    0197 : 01b4 ; -- <0081> "
    0198 : 0006 ; -- <0082> a = g6
    0199 : 0404 ; -- <0083> b = x
    019a : e006 ; -- <0084> br gt :result0
    019b : 01ac ; -- <0084> "
-- temp does fit; output a 1.
    019c : 0007 ; -- <0086> a = g7
    019d : 0351 ; -- <0087> a = a<<1
    019e : 0601 ; -- <0088> b = 1
    019f : c800 ; -- <0089> g7 = or
    01a0 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    01a1 : 0006 ; -- <0091> a = g6
    01a2 : 0760 ; -- <0092> b = -1
    01a3 : c800 ; -- <0093> a = xor
    01a4 : 0338 ; -- <0093> "
    01a5 : 0601 ; -- <0094> b = 1
    01a6 : c800 ; -- <0095> y = a+b
    01a7 : 1700 ; -- <0095> "
    01a8 : c800 ; -- <0096> x = x+y
    01a9 : 1320 ; -- <0096> "
    01aa : e00f ; -- <0097> jmp :next
    01ab : 01ae ; -- <0097> "
-- :result0 -- = 0x01ac
-- temp does not fit; output a 0.
    01ac : 0007 ; -- <0100> a = g7
    01ad : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01ae
    01ae : 0006 ; -- <0104> a = g6
    01af : 1b50 ; -- <0105> g6 = a>>1
    01b0 : c800 ; -- <0106> i = i+j
    01b1 : 0b10 ; -- <0106> "
    01b2 : e00f ; -- <0107> jmp :again
    01b3 : 0196 ; -- <0107> "

-- :done -- = 0x01b4
    01b4 : 0407 ; -- <0110> b = g7
    01b5 : 0004 ; -- <0111> a = x
    01b6 : 1c08 ; -- <0112> pop g7 -- rtn
    01b7 : 1808 ; -- <0112> pop g6 -- "
    01b8 : 1408 ; -- <0112> pop y -- "
    01b9 : 1008 ; -- <0112> pop x -- "
    01ba : 0c08 ; -- <0112> pop j -- "
    01bb : 0808 ; -- <0112> pop i -- "
    01bc : fc00 ; -- <0112> swapra = nop

-- :zero -- = 0x01bd
    01bd : 0600 ; -- <0115> b = 0
    01be : 1c08 ; -- <0116> pop g7 -- rtn
    01bf : 1808 ; -- <0116> pop g6 -- "
    01c0 : 1408 ; -- <0116> pop y -- "
    01c1 : 1008 ; -- <0116> pop x -- "
    01c2 : 0c08 ; -- <0116> pop j -- "
    01c3 : 0808 ; -- <0116> pop i -- "
    01c4 : fc00 ; -- <0116> swapra = nop
    01c5 : 1c08 ; -- <0117> pop g7 -- end_func
    01c6 : 1808 ; -- <0117> pop g6 -- "
    01c7 : 1408 ; -- <0117> pop y -- "
    01c8 : 1008 ; -- <0117> pop x -- "
    01c9 : 0c08 ; -- <0117> pop j -- "
    01ca : 0808 ; -- <0117> pop i -- "
    01cb : fc00 ; -- <0117> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01cc
    01cc : 0601 ; -- <0005> b = 1
    01cd : e003 ; -- <0006> br and0z :pick_byte_even
    01ce : 01d7 ; -- <0006> "
    01cf : 0350 ; -- <0007> a = a>>1
    01d0 : 0404 ; -- <0008> b = x
    01d1 : c800 ; -- <0009> fetch a from a+b
    01d2 : d300 ; -- <0009> "
    01d3 : 03b0 ; -- <0009> "
    01d4 : 0353 ; -- <0010> a = a>>4
    01d5 : 0353 ; -- <0011> a = a>>4
    01d6 : fc00 ; -- <0012> swapra = nop
-- :pick_byte_even -- = 0x01d7
    01d7 : 0350 ; -- <0014> a = a>>1
    01d8 : 0404 ; -- <0015> b = x
    01d9 : c800 ; -- <0016> fetch a from a+b
    01da : d300 ; -- <0016> "
    01db : 03b0 ; -- <0016> "
    01dc : 06ff ; -- <0017> b = 0xff
    01dd : c800 ; -- <0018> a = and
    01de : 0330 ; -- <0018> "
    01df : fc00 ; -- <0019> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01e0
    01e0 : 2002 ; -- <0027> push i -- func find_in_fetch
    01e1 : 2003 ; -- <0027> push j -- "
    01e2 : 2005 ; -- <0027> push y -- "
    01e3 : 203e ; -- <0027> push rtna -- "
    01e4 : 1400 ; -- <0028> y = a
    01e5 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01e6
    01e6 : e001 ; -- <0031> br iz :fail
    01e7 : 01f6 ; -- <0031> "
    01e8 : 0b10 ; -- <0032> i = ad1
    01e9 : 0002 ; -- <0033> a = i
    01ea : fba0 ; -- <0034> call :fetch_byte
    01eb : 01cc ; -- <0034> "
    01ec : fc00 ; -- <0034> "
    01ed : 0405 ; -- <0035> b = y
    01ee : e407 ; -- <0036> bn eq :again
    01ef : 01e6 ; -- <0036> "
-- :found -- = 0x01f0
    01f0 : 0002 ; -- <0038> a = i
    01f1 : f808 ; -- <0039> pop rtna -- rtn
    01f2 : 1408 ; -- <0039> pop y -- "
    01f3 : 0c08 ; -- <0039> pop j -- "
    01f4 : 0808 ; -- <0039> pop i -- "
    01f5 : fc00 ; -- <0039> swapra = nop
-- :fail -- = 0x01f6
    01f6 : 0360 ; -- <0041> a = -1
    01f7 : f808 ; -- <0042> pop rtna -- end_func
    01f8 : 1408 ; -- <0042> pop y -- "
    01f9 : 0c08 ; -- <0042> pop j -- "
    01fa : 0808 ; -- <0042> pop i -- "
    01fb : fc00 ; -- <0042> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x01fc
    01fc : 2004 ; -- <0002> push x -- func spinwait
    01fd : 2005 ; -- <0002> push y -- "
--patch
--rtn
    01fe : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x01ff
    01ff : 13a0 ; -- <0007> x = 16666
    0200 : 411a ; -- <0007> "
    0201 : 1760 ; -- <0008> y = -1
    0202 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0203
-- use of the ad2 name overrides auto-nop here.
    0203 : 1320 ; -- <0012> x = ad2
    0204 : e402 ; -- <0013> bn xz :spinwait_inner
    0205 : 0203 ; -- <0013> "
    0206 : c800 ; -- <0014> a = a+b
    0207 : 0300 ; -- <0014> "
    0208 : e400 ; -- <0015> bn az :spinwait_outer
    0209 : 01ff ; -- <0015> "
    020a : 1408 ; -- <0016> pop y -- end_func
    020b : 1008 ; -- <0016> pop x -- "
    020c : fc00 ; -- <0016> swapra = nop




-- :cmd_table -- = 0x020d
-- "  hello"
    020d : 2020 ; -- <0005>   
    020e : 6568 ; -- <0005> eh
    020f : 6c6c ; -- <0005> ll
    0210 : 006f ; -- <0005>  o
    0211 : 02a5 ; -- <0006> ([label hello_cmd])
-- "  plstp"
    0212 : 2020 ; -- <0007>   
    0213 : 6c70 ; -- <0007> lp
    0214 : 7473 ; -- <0007> ts
    0215 : 0070 ; -- <0007>  p
    0216 : 02a9 ; -- <0008> ([label set_plan_stop_cmd])
-- "   plcr"
    0217 : 2020 ; -- <0009>   
    0218 : 7020 ; -- <0009> p 
    0219 : 636c ; -- <0009> cl
    021a : 0072 ; -- <0009>  r
    021b : 02b4 ; -- <0010> ([label set_plan_crank_cmd])
-- "   plwm"
    021c : 2020 ; -- <0011>   
    021d : 7020 ; -- <0011> p 
    021e : 776c ; -- <0011> wl
    021f : 006d ; -- <0011>  m
    0220 : 02bf ; -- <0012> ([label set_plan_warmup_cmd])
-- "   plrn"
    0221 : 2020 ; -- <0013>   
    0222 : 7020 ; -- <0013> p 
    0223 : 726c ; -- <0013> rl
    0224 : 006e ; -- <0013>  n
    0225 : 02ca ; -- <0014> ([label set_plan_run_cmd])
-- "   plln"
    0226 : 2020 ; -- <0015>   
    0227 : 7020 ; -- <0015> p 
    0228 : 6c6c ; -- <0015> ll
    0229 : 006e ; -- <0015>  n
    022a : 02d5 ; -- <0016> ([label set_plan_learn_cmd])
-- "\x0\x0"
    022b : 0000 ; -- <0017>   


-- ######## func parse_key -- = 0x022c
    022c : 2002 ; -- <0020> push i -- func parse_key
    022d : 2004 ; -- <0020> push x -- "
    022e : 2005 ; -- <0020> push y -- "
    022f : 203e ; -- <0020> push rtna -- "
-- memorize into ram_key_buf, pushing down existing content.
    0230 : 2000 ; -- <0022> push a -- push a
    0231 : 1000 ; -- <0023> x = a
    0232 : 0a07 ; -- <0032> i = $key_buf_max
-- :loop_562 -- = 0x0233

    0233 : 0002 ; -- <0032> a = i

    0234 : 0351 ; -- <0032> a = a<<1
    0235 : 0600 ; -- <0032> b = 0
    0236 : 4e00 ; -- <0032> av_ad_hi = 0
    0237 : 5300 ; -- <0032> av_ad_lo = ad0
    0238 : 0411 ; -- <0032> b = av_write_data
    0239 : 0412 ; -- <0032> b = av_read_data

    023a : 1401 ; -- <0032> y = b
    023b : 0002 ; -- <0032> a = i
    023c : 0404 ; -- <0032> b = x

    023d : 0351 ; -- <0032> a = a<<1
    023e : 2001 ; -- <0032> push b -- push b
    023f : 0600 ; -- <0032> b = 0
    0240 : 4e00 ; -- <0032> av_ad_hi = 0
    0241 : 5300 ; -- <0032> av_ad_lo = ad0
    0242 : 4408 ; -- <0032> pop av_write_data -- pop av_write_data

    0243 : 1005 ; -- <0032> x = y


    0244 : 0002 ; -- <0032> a = i
    0245 : 0600 ; -- <0032> b = 0
    0246 : e007 ; -- <0032> br eq :end_562
    0247 : 0250 ; -- <0032> "


    0248 : 0002 ; -- <0032> a = i
    0249 : 0760 ; -- <0032> b = -1
    024a : c800 ; -- <0032> i = a+b
    024b : 0b00 ; -- <0032> "


    024c : 0002 ; -- <0032> a = i
    024d : 0600 ; -- <0032> b = 0
    024e : e405 ; -- <0032> bn lt :loop_562
    024f : 0233 ; -- <0032> "

-- :end_562 -- = 0x0250
    0250 : 0008 ; -- <0033> pop a -- pop a

    0251 : 0000 ; -- <0036> a = a
    0252 : 060d ; -- <0036> b = 13


    0253 : e407 ; -- <0036> bn eq :else_595
    0254 : 0258 ; -- <0036> "

    0255 : fba0 ; -- <0036> call :parse_command
    0256 : 025f ; -- <0036> "
    0257 : fc00 ; -- <0036> "


-- :else_595 -- = 0x0258

-- :end_595 -- = 0x0258

    0258 : f808 ; -- <0037> pop rtna -- end_func
    0259 : 1408 ; -- <0037> pop y -- "
    025a : 1008 ; -- <0037> pop x -- "
    025b : 0808 ; -- <0037> pop i -- "
    025c : fc00 ; -- <0037> swapra = nop

-- :cmd_ack_msg -- = 0x025d
-- "OK\x0"
    025d : 4b4f ; -- <0040> KO
    025e : 0000 ; -- <0040>   

-- ######## func parse_command -- = 0x025f
    025f : 2002 ; -- <0042> push i -- func parse_command
    0260 : 2004 ; -- <0042> push x -- "
    0261 : 2005 ; -- <0042> push y -- "
    0262 : 203e ; -- <0042> push rtna -- "
    0263 : 13a0 ; -- <0043> x = :cmd_table
    0264 : 020d ; -- <0043> "
-- :next_cmd -- = 0x0265
    0265 : d004 ; -- <0045> fetch a from x
    0266 : 03b0 ; -- <0045> "
    0267 : e000 ; -- <0046> br az :done
    0268 : 02a0 ; -- <0046> "

    0269 : 0a00 ; -- <0062> i = 0
-- :loop_617 -- = 0x026a

    026a : 0002 ; -- <0062> a = i
    026b : fba0 ; -- <0062> call :fetch_byte
    026c : 01cc ; -- <0062> "
    026d : fc00 ; -- <0062> "
    026e : 1400 ; -- <0062> y = a
    026f : 0620 ; -- <0062> b = 32 -- asc b = " "

    0270 : 0000 ; -- <0062> a = a
    0271 : 0401 ; -- <0062> b = b


    0272 : e007 ; -- <0062> br eq :else_626
    0273 : 0281 ; -- <0062> "

    0274 : 062a ; -- <0062> b = 42 -- asc b = "*"
    0275 : e007 ; -- <0062> br eq :matched
    0276 : 0289 ; -- <0062> "
-- parameter character.  succeed early.
    0277 : 0002 ; -- <0062> a = i

    0278 : 0351 ; -- <0062> a = a<<1
    0279 : 0600 ; -- <0062> b = 0
    027a : 4e00 ; -- <0062> av_ad_hi = 0
    027b : 5300 ; -- <0062> av_ad_lo = ad0
    027c : 0411 ; -- <0062> b = av_write_data
    027d : 0412 ; -- <0062> b = av_read_data

    027e : 0005 ; -- <0062> a = y
    027f : e407 ; -- <0062> bn eq :no_match
    0280 : 0295 ; -- <0062> "


-- :else_626 -- = 0x0281

-- :end_626 -- = 0x0281



    0281 : 0002 ; -- <0062> a = i
    0282 : 0601 ; -- <0062> b = 1
    0283 : c800 ; -- <0062> i = a+b
    0284 : 0b00 ; -- <0062> "


    0285 : 0002 ; -- <0062> a = i
    0286 : 0607 ; -- <0062> b = $key_buf_max
    0287 : e005 ; -- <0062> br lt :loop_617
    0288 : 026a ; -- <0062> "

-- :end_617 -- = 0x0289

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x0289
    0289 : 03a0 ; -- <0066> a = :cmd_ack_msg
    028a : 025d ; -- <0066> "
    028b : fba0 ; -- <0067> call :set_text_flag
    028c : 07a6 ; -- <0067> "
    028d : fc00 ; -- <0067> "
    028e : 1604 ; -- <0068> y = ($key_buf_len / 2)
    028f : c800 ; -- <0069> fetch rtna from x+y
    0290 : d320 ; -- <0069> "
    0291 : fbb0 ; -- <0069> "
    0292 : fc00 ; -- <0070> swapra = nop
    0293 : e00f ; -- <0071> jmp :done
    0294 : 02a0 ; -- <0071> "

-- :no_match -- = 0x0295
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    0295 : 4e00 ; -- <0075> ram a = $ram_terminal_connected -- av_ad_hi = 0
    0296 : 5296 ; -- <0075> ram a = $ram_terminal_connected -- av_ad_lo = 150
    0297 : 0011 ; -- <0075> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    0298 : 0012 ; -- <0075> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    0299 : e000 ; -- <0076> br az :done
    029a : 02a0 ; -- <0076> "

    029b : 1605 ; -- <0078> y = (($key_buf_len / 2) + 1)
    029c : c800 ; -- <0079> x = x+y
    029d : 1320 ; -- <0079> "
    029e : e00f ; -- <0080> jmp :next_cmd
    029f : 0265 ; -- <0080> "
-- :done -- = 0x02a0
    02a0 : f808 ; -- <0082> pop rtna -- end_func
    02a1 : 1408 ; -- <0082> pop y -- "
    02a2 : 1008 ; -- <0082> pop x -- "
    02a3 : 0808 ; -- <0082> pop i -- "
    02a4 : fc00 ; -- <0082> swapra = nop

-- ######## func hello_cmd -- = 0x02a5
    02a5 : 4e00 ; -- <0085> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    02a6 : 5296 ; -- <0085> ram $ram_terminal_connected = 1 -- av_ad_lo = 150
    02a7 : 4601 ; -- <0085> ram $ram_terminal_connected = 1 -- av_write_data = 1
    02a8 : fc00 ; -- <0086> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x02a9
    02a9 : 203e ; -- <0088> push rtna -- func set_plan_stop_cmd
    02aa : 4e00 ; -- <0089> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02ab : 5290 ; -- <0089> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02ac : f811 ; -- <0089> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02ad : f812 ; -- <0089> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02ae : fc00 ; -- <0090> swapra = nop
    02af : fba0 ; -- <0091> call :init_plan_stop
    02b0 : 02e2 ; -- <0091> "
    02b1 : fc00 ; -- <0091> "
    02b2 : f808 ; -- <0092> pop rtna -- end_func
    02b3 : fc00 ; -- <0092> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x02b4
    02b4 : 203e ; -- <0094> push rtna -- func set_plan_crank_cmd
    02b5 : 4e00 ; -- <0095> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02b6 : 5290 ; -- <0095> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02b7 : f811 ; -- <0095> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02b8 : f812 ; -- <0095> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02b9 : fc00 ; -- <0096> swapra = nop
    02ba : fba0 ; -- <0097> call :init_plan_crank
    02bb : 0321 ; -- <0097> "
    02bc : fc00 ; -- <0097> "
    02bd : f808 ; -- <0098> pop rtna -- end_func
    02be : fc00 ; -- <0098> swapra = nop

-- ######## func set_plan_warmup_cmd -- = 0x02bf
    02bf : 203e ; -- <0100> push rtna -- func set_plan_warmup_cmd
    02c0 : 4e00 ; -- <0101> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02c1 : 5290 ; -- <0101> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02c2 : f811 ; -- <0101> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02c3 : f812 ; -- <0101> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02c4 : fc00 ; -- <0102> swapra = nop
    02c5 : fba0 ; -- <0103> call :init_plan_warmup
    02c6 : 0386 ; -- <0103> "
    02c7 : fc00 ; -- <0103> "
    02c8 : f808 ; -- <0104> pop rtna -- end_func
    02c9 : fc00 ; -- <0104> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x02ca
    02ca : 203e ; -- <0106> push rtna -- func set_plan_run_cmd
    02cb : 4e00 ; -- <0107> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02cc : 5290 ; -- <0107> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02cd : f811 ; -- <0107> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02ce : f812 ; -- <0107> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02cf : fc00 ; -- <0108> swapra = nop
    02d0 : fba0 ; -- <0109> call :init_plan_run
    02d1 : 040a ; -- <0109> "
    02d2 : fc00 ; -- <0109> "
    02d3 : f808 ; -- <0110> pop rtna -- end_func
    02d4 : fc00 ; -- <0110> swapra = nop

-- ######## func set_plan_learn_cmd -- = 0x02d5
    02d5 : 203e ; -- <0112> push rtna -- func set_plan_learn_cmd
    02d6 : 4e00 ; -- <0113> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02d7 : 5290 ; -- <0113> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02d8 : f811 ; -- <0113> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02d9 : f812 ; -- <0113> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02da : fc00 ; -- <0114> swapra = nop
    02db : fba0 ; -- <0115> call :init_plan_learn_stoich
    02dc : 045f ; -- <0115> "
    02dd : fc00 ; -- <0115> "
    02de : f808 ; -- <0116> pop rtna -- end_func
    02df : fc00 ; -- <0116> swapra = nop


-- :plan_name_stop -- = 0x02e0
-- "STP\x0"
    02e0 : 5453 ; -- <0002> TS
    02e1 : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x02e2
    02e2 : 203e ; -- <0004> push rtna -- func init_plan_stop
-- set up the stop plan.
    02e3 : fba0 ; -- <0006> call :clear_ign_history
    02e4 : 051b ; -- <0006> "
    02e5 : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    02e6 : 4e00 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    02e7 : 5284 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 132
    02e8 : 47a0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    02e9 : 025b ; -- <0008> "
    02ea : 4e00 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    02eb : 5286 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    02ec : 47a0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    02ed : 36b0 ; -- <0009> "
    02ee : 73a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    02ef : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    02f0 : 4e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    02f1 : 5292 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    02f2 : 4600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    02f3 : 7600 ; -- <0016> puff_len_us = 0

-- memorize state.
    02f4 : 4e00 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    02f5 : 528a ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 138
    02f6 : 47a0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    02f7 : 02e0 ; -- <0019> "
    02f8 : 4e00 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    02f9 : 528c ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 140
    02fa : 47a0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    02fb : 0307 ; -- <0020> "
    02fc : 4e00 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    02fd : 528e ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 142
    02fe : 47a0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    02ff : 030b ; -- <0021> "
    0300 : 4e00 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0301 : 5290 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 144
    0302 : 47a0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0303 : 0306 ; -- <0022> "
    0304 : f808 ; -- <0023> pop rtna -- end_func
    0305 : fc00 ; -- <0023> swapra = nop

-- ######## func destroy_plan_stop -- = 0x0306
    0306 : fc00 ; -- <0026> swapra = nop

-- ######## func puff_len_stop -- = 0x0307
    0307 : 4e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0308 : 5292 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    0309 : 4600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    030a : fc00 ; -- <0030> swapra = nop

-- ######## func leave_stop -- = 0x030b
    030b : 203e ; -- <0032> push rtna -- func leave_stop
-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    030c : 001a ; -- <0035> a = power_duty
    030d : 0680 ; -- <0036> b = $ign_switch_off_mask
    030e : e403 ; -- <0037> bn and0z :stay
    030f : 031d ; -- <0037> "
    0310 : 4e00 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    0311 : 5282 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 130
    0312 : 0011 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0313 : 0012 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0314 : 0608 ; -- <0039> b = ($ign_history_len / 2)
    0315 : e006 ; -- <0040> br gt :stay
    0316 : 031d ; -- <0040> "
    0317 : fba0 ; -- <0041> call :destroy_plan_stop
    0318 : 0306 ; -- <0041> "
    0319 : fc00 ; -- <0041> "
    031a : fba0 ; -- <0042> call :init_plan_crank
    031b : 0321 ; -- <0042> "
    031c : fc00 ; -- <0042> "
-- :stay -- = 0x031d
    031d : f808 ; -- <0044> pop rtna -- end_func
    031e : fc00 ; -- <0044> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 5000 to 20000 us length in about 7 seconds.

-- :plan_name_crank -- = 0x031f
-- "CR\x0"
    031f : 5243 ; -- <0011> RC
    0320 : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x0321
    0321 : 203e ; -- <0013> push rtna -- func init_plan_crank
-- set up the crank plan.
    0322 : 4e00 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    0323 : 5294 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 148
    0324 : 4600 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0325 : 4e00 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    0326 : 5284 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 132
    0327 : 4657 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    0328 : 4e00 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    0329 : 5286 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    032a : 47a0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    032b : 36b0 ; -- <0018> "
    032c : 73a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    032d : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    032e : 4e00 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    032f : 5292 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 146
    0330 : 47a0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 5000
    0331 : 1388 ; -- <0023> "
    0332 : 77a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    0333 : 1388 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    0334 : fba0 ; -- <0026> call :clear_ign_history
    0335 : 051b ; -- <0026> "
    0336 : fc00 ; -- <0026> "

-- memorize state.
    0337 : 4e00 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    0338 : 528a ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 138
    0339 : 47a0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    033a : 031f ; -- <0029> "
    033b : 4e00 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    033c : 528c ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 140
    033d : 47a0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    033e : 034a ; -- <0030> "
    033f : 4e00 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    0340 : 528e ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 142
    0341 : 47a0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    0342 : 0368 ; -- <0031> "
    0343 : 4e00 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    0344 : 5290 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 144
    0345 : 47a0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    0346 : 0349 ; -- <0032> "
    0347 : f808 ; -- <0033> pop rtna -- end_func
    0348 : fc00 ; -- <0033> swapra = nop

-- ######## func destroy_plan_crank -- = 0x0349
    0349 : fc00 ; -- <0036> swapra = nop

-- ######## func puff_len_crank -- = 0x034a
    034a : 203e ; -- <0038> push rtna -- func puff_len_crank
    034b : 4e00 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    034c : 5294 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 148
    034d : 0011 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    034e : 0012 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    034f : 060a ; -- <0040> b = $crank_max_puffs
    0350 : e006 ; -- <0041> br gt :puff_limit
    0351 : 035f ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    0352 : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    0353 : 05dc ; -- <0043> "
    0354 : fba0 ; -- <0044> call :multiply
    0355 : 0160 ; -- <0044> "
    0356 : fc00 ; -- <0044> "
    0357 : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    0358 : 1388 ; -- <0045> "
    0359 : 4e00 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    035a : 5292 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    035b : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    035c : 4700 ; -- <0046> "
    035d : e00f ; -- <0047> jmp :done
    035e : 0366 ; -- <0047> "
-- :puff_limit -- = 0x035f
-- prevent the puff counter from going higher & eventually rolling over.
    035f : 4e00 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    0360 : 5294 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 148
    0361 : 460a ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 10
-- accept max puff len.
    0362 : 4e00 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    0363 : 5292 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 146
    0364 : 47a0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    0365 : 4e20 ; -- <0052> "
-- :done -- = 0x0366
    0366 : f808 ; -- <0054> pop rtna -- end_func
    0367 : fc00 ; -- <0054> swapra = nop

-- ######## func leave_crank -- = 0x0368
    0368 : 203e ; -- <0056> push rtna -- func leave_crank
    0369 : fba0 ; -- <0057> call :check_engine_stop
    036a : 080a ; -- <0057> "
    036b : fc00 ; -- <0057> "
    036c : e400 ; -- <0058> bn az :done
    036d : 0382 ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    036e : 4e00 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    036f : 5280 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 128
    0370 : 0011 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0371 : 0012 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    0372 : e000 ; -- <0062> br az :stay
    0373 : 0382 ; -- <0062> "
    0374 : 4e00 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    0375 : 527e ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 126
    0376 : 0011 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    0377 : 0012 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    0378 : 07a0 ; -- <0064> b = $crank_success_rpm
    0379 : 0320 ; -- <0064> "
    037a : e005 ; -- <0065> br lt :stay
    037b : 0382 ; -- <0065> "
    037c : fba0 ; -- <0066> call :destroy_plan_crank
    037d : 0349 ; -- <0066> "
    037e : fc00 ; -- <0066> "
    037f : fba0 ; -- <0067> call :init_plan_warmup
    0380 : 0386 ; -- <0067> "
    0381 : fc00 ; -- <0067> "
-- :stay -- = 0x0382

-- :done -- = 0x0382
    0382 : f808 ; -- <0071> pop rtna -- end_func
    0383 : fc00 ; -- <0071> swapra = nop



-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.
-- 750 = 0 degF.
-- max 6000 & min 4500 over a temp range 750 to 0x4c0 gives 6900 us puff at 74 deg F.  program rev 594.
-- this is used if the engine temp is unavailable.

-- :plan_name_warmup -- = 0x0384
-- "WM\x0"
    0384 : 4d57 ; -- <0016> MW
    0385 : 0000 ; -- <0016>   

-- ######## func init_plan_warmup -- = 0x0386
-- set up the warmup plan.
    0386 : 4e00 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0387 : 5214 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0388 : 0011 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0389 : 0012 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    038a : 063c ; -- <0021> b = $warmup_timeout_sec
    038b : 4e00 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_hi = 0
    038c : 5298 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_lo = 152
    038d : c800 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_write_data = a+b
    038e : 4700 ; -- <0022> "

-- memorize state.
    038f : 4e00 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    0390 : 528a ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 138
    0391 : 47a0 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    0392 : 0384 ; -- <0025> "
    0393 : 4e00 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    0394 : 528c ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 140
    0395 : 47a0 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    0396 : 03a1 ; -- <0026> "
    0397 : 4e00 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    0398 : 528e ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 142
    0399 : 47a0 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    039a : 03d3 ; -- <0027> "
    039b : 4e00 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    039c : 5290 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 144
    039d : 47a0 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    039e : 03a0 ; -- <0028> "
    039f : fc00 ; -- <0029> swapra = nop

-- ######## func destroy_plan_warmup -- = 0x03a0
    03a0 : fc00 ; -- <0032> swapra = nop

-- ######## func puff_len_warmup -- = 0x03a1
    03a1 : 2004 ; -- <0034> push x -- func puff_len_warmup
    03a2 : 203e ; -- <0034> push rtna -- "
-- x = enrichment us.
    03a3 : 13a0 ; -- <0036> x = $warmup_limping_enrichment_us
    03a4 : 07d0 ; -- <0036> "

-- check engine block temp sensor.  if valid, enrich by a linear function:
-- {warmup_min_temp_adc...warmup_success_temp_adc} -> {$warmup_max_enrichment_us...0}
    03a5 : 0202 ; -- <0040> a = $anmux_engine_block_temp

    03a6 : 0351 ; -- <0041> a = a<<1
    03a7 : 0618 ; -- <0041> b = 24
    03a8 : 4e00 ; -- <0041> av_ad_hi = 0
    03a9 : 5300 ; -- <0041> av_ad_lo = ad0
    03aa : 0411 ; -- <0041> b = av_write_data
    03ab : 0412 ; -- <0041> b = av_read_data

-- b = sensor reading in adc counts.
    03ac : 03a0 ; -- <0043> a = $temp_ceiling_adc
    03ad : 0ff0 ; -- <0043> "
    03ae : e005 ; -- <0044> br lt :temp_invalid
    03af : 03c9 ; -- <0044> "
    03b0 : 03a0 ; -- <0045> a = $warmup_success_temp_adc
    03b1 : 04c0 ; -- <0045> "
    03b2 : e005 ; -- <0046> br lt :too_warm
    03b3 : 03c9 ; -- <0046> "
    03b4 : 03a0 ; -- <0047> a = $warmup_min_temp_adc
    03b5 : 02ee ; -- <0047> "
    03b6 : e005 ; -- <0048> br lt :in_range
    03b7 : 03ba ; -- <0048> "
    03b8 : 07a0 ; -- <0049> b = $warmup_min_temp_adc
    03b9 : 02ee ; -- <0049> "
-- :in_range -- = 0x03ba
-- negate the sensor reading so as to subtract it from warmup_success_temp_adc.
    03ba : 0360 ; -- <0052> a = 0xffff
    03bb : c800 ; -- <0053> b = xor
    03bc : 0738 ; -- <0053> "
    03bd : 0201 ; -- <0054> a = 1
    03be : c800 ; -- <0055> b = a+b
    03bf : 0700 ; -- <0055> "
    03c0 : 03a0 ; -- <0056> a = $warmup_success_temp_adc
    03c1 : 04c0 ; -- <0056> "
    03c2 : c800 ; -- <0057> b = a+b
    03c3 : 0700 ; -- <0057> "
-- b = how many counts "cold" we are.  multiply that by the slope warmup_us_per_cold_adc.
    03c4 : 020c ; -- <0059> a = $warmup_us_per_cold_adc
    03c5 : fba0 ; -- <0060> call :multiply
    03c6 : 0160 ; -- <0060> "
    03c7 : fc00 ; -- <0060> "
    03c8 : 1000 ; -- <0061> x = a
-- :too_warm -- = 0x03c9
-- :temp_invalid -- = 0x03c9

-- apply total of base amount and enrichment.
-- $warmup_min_puff_len_us <= total <= ($warmup_min_puff_len_us + $warmup_max_enrichment_us)
    03c9 : 03a0 ; -- <0067> a = $warmup_min_puff_len_us
    03ca : 09c4 ; -- <0067> "
    03cb : 0404 ; -- <0068> b = x
    03cc : 4e00 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    03cd : 5292 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    03ce : c800 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    03cf : 4700 ; -- <0069> "
    03d0 : f808 ; -- <0070> pop rtna -- end_func
    03d1 : 1008 ; -- <0070> pop x -- "
    03d2 : fc00 ; -- <0070> swapra = nop

-- ######## func leave_warmup -- = 0x03d3
    03d3 : 203e ; -- <0072> push rtna -- func leave_warmup
    03d4 : fba0 ; -- <0073> call :check_engine_stop
    03d5 : 080a ; -- <0073> "
    03d6 : fc00 ; -- <0073> "
    03d7 : e400 ; -- <0074> bn az :done
    03d8 : 0406 ; -- <0074> "

-- transition to plan_run if warmup has expired.
    03d9 : 4e00 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03da : 5214 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03db : 0011 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03dc : 0012 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03dd : 4e00 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_hi = 0
    03de : 5298 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_lo = 152
    03df : 0411 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_write_data -- start read cycle
    03e0 : 0412 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_read_data -- finish read cycle

    03e1 : 0000 ; -- <0083> a = a
    03e2 : 0401 ; -- <0083> b = b


    03e3 : e406 ; -- <0083> bn gt :else_995
    03e4 : 03ed ; -- <0083> "

    03e5 : fba0 ; -- <0083> call :destroy_plan_warmup
    03e6 : 03a0 ; -- <0083> "
    03e7 : fc00 ; -- <0083> "
    03e8 : fba0 ; -- <0083> call :init_plan_run
    03e9 : 040a ; -- <0083> "
    03ea : fc00 ; -- <0083> "
    03eb : e00f ; -- <0083> jmp :done
    03ec : 0406 ; -- <0083> "


-- :else_995 -- = 0x03ed

-- :end_995 -- = 0x03ed


-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    03ed : 0202 ; -- <0087> a = $anmux_engine_block_temp

    03ee : 0351 ; -- <0088> a = a<<1
    03ef : 0618 ; -- <0088> b = 24
    03f0 : 4e00 ; -- <0088> av_ad_hi = 0
    03f1 : 5300 ; -- <0088> av_ad_lo = ad0
    03f2 : 0411 ; -- <0088> b = av_write_data
    03f3 : 0412 ; -- <0088> b = av_read_data

    03f4 : 03a0 ; -- <0089> a = $temp_ceiling_adc
    03f5 : 0ff0 ; -- <0089> "

    03f6 : 0000 ; -- <0096> a = a
    03f7 : 0401 ; -- <0096> b = b


    03f8 : e406 ; -- <0096> bn gt :else_1016
    03f9 : 0406 ; -- <0096> "

    03fa : 03a0 ; -- <0096> a = $warmup_success_temp_adc
    03fb : 04c0 ; -- <0096> "

    03fc : 0000 ; -- <0096> a = a
    03fd : 0401 ; -- <0096> b = b


    03fe : e405 ; -- <0096> bn lt :else_1022
    03ff : 0406 ; -- <0096> "

    0400 : fba0 ; -- <0096> call :destroy_plan_warmup
    0401 : 03a0 ; -- <0096> "
    0402 : fc00 ; -- <0096> "
    0403 : fba0 ; -- <0096> call :init_plan_run
    0404 : 040a ; -- <0096> "
    0405 : fc00 ; -- <0096> "


-- :else_1022 -- = 0x0406

-- :end_1022 -- = 0x0406



-- :else_1016 -- = 0x0406

-- :end_1016 -- = 0x0406


-- :done -- = 0x0406
    0406 : f808 ; -- <0099> pop rtna -- end_func
    0407 : fc00 ; -- <0099> swapra = nop


-- :plan_name_run -- = 0x0408
-- "RN\x0"
    0408 : 4e52 ; -- <0002> NR
    0409 : 0000 ; -- <0002>   

-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed, by about 1000 us per second.



-- ######## func init_plan_run -- = 0x040a
-- set up the run plan.

-- memorize state.
    040a : 4e00 ; -- <0021> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    040b : 528a ; -- <0021> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 138
    040c : 47a0 ; -- <0021> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    040d : 0408 ; -- <0021> "
    040e : 4e00 ; -- <0022> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    040f : 528c ; -- <0022> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 140
    0410 : 47a0 ; -- <0022> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    0411 : 041c ; -- <0022> "
    0412 : 4e00 ; -- <0023> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    0413 : 528e ; -- <0023> ram $ram_transition_func = :leave_run -- av_ad_lo = 142
    0414 : 47a0 ; -- <0023> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    0415 : 0457 ; -- <0023> "
    0416 : 4e00 ; -- <0024> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    0417 : 5290 ; -- <0024> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 144
    0418 : 47a0 ; -- <0024> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    0419 : 041b ; -- <0024> "
    041a : fc00 ; -- <0025> swapra = nop

-- ######## func destroy_plan_run -- = 0x041b
    041b : fc00 ; -- <0028> swapra = nop

-- ######## func puff_len_run -- = 0x041c
    041c : 2002 ; -- <0030> push i -- func puff_len_run
    041d : 2003 ; -- <0030> push j -- "
    041e : 4e00 ; -- <0031> ram i = $ram_run_ticks_remain -- av_ad_hi = 0
    041f : 529a ; -- <0031> ram i = $ram_run_ticks_remain -- av_ad_lo = 154
    0420 : 0811 ; -- <0031> ram i = $ram_run_ticks_remain -- i = av_write_data -- start read cycle
    0421 : 0812 ; -- <0031> ram i = $ram_run_ticks_remain -- i = av_read_data -- finish read cycle

    0422 : 0002 ; -- <0055> a = i
    0423 : 0600 ; -- <0055> b = 0


    0424 : e406 ; -- <0055> bn gt :else_1060
    0425 : 042d ; -- <0055> "

    0426 : 0f60 ; -- <0055> j = -1
    0427 : 4e00 ; -- <0055> ram $ram_run_ticks_remain = i+j -- av_ad_hi = 0
    0428 : 529a ; -- <0055> ram $ram_run_ticks_remain = i+j -- av_ad_lo = 154
    0429 : c800 ; -- <0055> ram $ram_run_ticks_remain = i+j -- av_write_data = i+j
    042a : 4710 ; -- <0055> "

    042b : e00f ; -- <0055> jmp :end_1060
    042c : 0454 ; -- <0055> "
-- :else_1060 -- = 0x042d

    042d : 4e00 ; -- <0055> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_ad_hi = 0
    042e : 529a ; -- <0055> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_ad_lo = 154
    042f : 460a ; -- <0055> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    0430 : 4e00 ; -- <0055> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    0431 : 5292 ; -- <0055> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    0432 : 0811 ; -- <0055> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    0433 : 0812 ; -- <0055> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    0434 : 0e00 ; -- <0055> j = 0
    0435 : 0205 ; -- <0055> a = $o2_adc_channel

    0436 : 0351 ; -- <0055> a = a<<1
    0437 : 0628 ; -- <0055> b = 40
    0438 : 4e00 ; -- <0055> av_ad_hi = 0
    0439 : 5300 ; -- <0055> av_ad_lo = ad0
    043a : 0411 ; -- <0055> b = av_write_data
    043b : 0412 ; -- <0055> b = av_read_data


    043c : 0001 ; -- <0055> a = b
    043d : 07a0 ; -- <0055> b = 588
    043e : 024c ; -- <0055> "


    043f : e405 ; -- <0055> bn lt :else_1087
    0440 : 0449 ; -- <0055> "

-- sensing a lean condition.  trim up to enrich.

    0441 : 0002 ; -- <0055> a = i
    0442 : 07a0 ; -- <0055> b = 10000
    0443 : 2710 ; -- <0055> "


    0444 : e405 ; -- <0055> bn lt :else_1092
    0445 : 0447 ; -- <0055> "

    0446 : 0ec8 ; -- <0055> j = $run_puff_step_up_us


-- :else_1092 -- = 0x0447

-- :end_1092 -- = 0x0447


    0447 : e00f ; -- <0055> jmp :end_1087
    0448 : 0450 ; -- <0055> "
-- :else_1087 -- = 0x0449

-- sensing a rich condition.  trim down to lean it out.

    0449 : 0002 ; -- <0055> a = i
    044a : 07a0 ; -- <0055> b = 2000
    044b : 07d0 ; -- <0055> "


    044c : e406 ; -- <0055> bn gt :else_1100
    044d : 0450 ; -- <0055> "

    044e : 0fa0 ; -- <0055> j = $run_puff_step_down_us
    044f : ff9b ; -- <0055> "


-- :else_1100 -- = 0x0450

-- :end_1100 -- = 0x0450


-- :end_1087 -- = 0x0450

    0450 : 4e00 ; -- <0055> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    0451 : 5292 ; -- <0055> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 146
    0452 : c800 ; -- <0055> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    0453 : 4710 ; -- <0055> "

-- :end_1060 -- = 0x0454

    0454 : 0c08 ; -- <0056> pop j -- end_func
    0455 : 0808 ; -- <0056> pop i -- "
    0456 : fc00 ; -- <0056> swapra = nop

-- ######## func leave_run -- = 0x0457
    0457 : 203e ; -- <0058> push rtna -- func leave_run
    0458 : fba0 ; -- <0059> call :check_engine_stop
    0459 : 080a ; -- <0059> "
    045a : fc00 ; -- <0059> "
    045b : f808 ; -- <0060> pop rtna -- end_func
    045c : fc00 ; -- <0060> swapra = nop


-- :plan_name_learn_stoich -- = 0x045d
-- "LN\x0"
    045d : 4e4c ; -- <0002> NL
    045e : 0000 ; -- <0002>   

-- ######## func init_plan_learn_stoich -- = 0x045f
-- set up the learn_stoich plan.

-- memorize state.
    045f : 4e00 ; -- <0008> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_hi = 0
    0460 : 528a ; -- <0008> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_lo = 138
    0461 : 47a0 ; -- <0008> ram $ram_plan_name = :plan_name_learn_stoich -- av_write_data = :plan_name_learn_stoich
    0462 : 045d ; -- <0008> "
    0463 : 4e00 ; -- <0009> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_hi = 0
    0464 : 528c ; -- <0009> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_lo = 140
    0465 : 47a0 ; -- <0009> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_write_data = :puff_len_learn_stoich
    0466 : 0471 ; -- <0009> "
    0467 : 4e00 ; -- <0010> ram $ram_transition_func = :leave_learn_stoich -- av_ad_hi = 0
    0468 : 528e ; -- <0010> ram $ram_transition_func = :leave_learn_stoich -- av_ad_lo = 142
    0469 : 47a0 ; -- <0010> ram $ram_transition_func = :leave_learn_stoich -- av_write_data = :leave_learn_stoich
    046a : 0472 ; -- <0010> "
    046b : 4e00 ; -- <0011> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_hi = 0
    046c : 5290 ; -- <0011> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_lo = 144
    046d : 47a0 ; -- <0011> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_write_data = :destroy_plan_learn_stoich
    046e : 0470 ; -- <0011> "
    046f : fc00 ; -- <0012> swapra = nop

-- ######## func destroy_plan_learn_stoich -- = 0x0470
    0470 : fc00 ; -- <0015> swapra = nop

-- ######## func puff_len_learn_stoich -- = 0x0471

    0471 : fc00 ; -- <0019> swapra = nop

-- ######## func leave_learn_stoich -- = 0x0472
    0472 : 203e ; -- <0021> push rtna -- func leave_learn_stoich
    0473 : fba0 ; -- <0022> call :check_engine_stop
    0474 : 080a ; -- <0022> "
    0475 : fc00 ; -- <0022> "
    0476 : f808 ; -- <0023> pop rtna -- end_func
    0477 : fc00 ; -- <0023> swapra = nop



-- #########################################################################
-- :main -- = 0x0478
    0478 : 03a0 ; -- <0206> a = :boot_msg
    0479 : 007b ; -- <0206> "
    047a : fba0 ; -- <0207> call :print_nt
    047b : 013f ; -- <0207> "
    047c : fc00 ; -- <0207> "

-- clear the first 64k of RAM.
    047d : 4e00 ; -- <0210> av_ad_hi = 0
    047e : fba0 ; -- <0211> call :clear_ram_page
    047f : 079e ; -- <0211> "
    0480 : fc00 ; -- <0211> "

-- init fuel injection.
    0481 : fba0 ; -- <0214> call :init_plan_stop
    0482 : 02e2 ; -- <0214> "
    0483 : fc00 ; -- <0214> "

-- power up FTDI USB board, and init any other special board control functions.
    0484 : 6280 ; -- <0217> board_ctrl = $ftdi_power_mask
    0485 : fba0 ; -- <0218> call :postpone_comm_restart
    0486 : 0775 ; -- <0218> "
    0487 : fc00 ; -- <0218> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    0488 : 6a00 ; -- <0225> power_duty = $power_duty_closing

    0489 : 001a ; -- <0229> a = power_duty
    048a : 06c0 ; -- <0229> b = ( $power_lost_mask | $ign_switch_off_mask )


    048b : e003 ; -- <0229> br and0z :else_1163
    048c : 0492 ; -- <0229> "

    048d : 6a32 ; -- <0229> power_duty = $power_duty_opening
    048e : 5fa0 ; -- <0229> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    048f : fffb ; -- <0229> "
    0490 : e00f ; -- <0229> error_halt_code $err_power_lost_at_boot
    0491 : 0490 ; -- <0229> "


-- :else_1163 -- = 0x0492

-- :end_1163 -- = 0x0492

    0492 : 4e00 ; -- <0230> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0493 : 523e ; -- <0230> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    0494 : 4760 ; -- <0230> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0495 : 4e00 ; -- <0231> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    0496 : 5240 ; -- <0231> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 64
    0497 : 4602 ; -- <0231> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    0498 : 2ba0 ; -- <0234> soft_event = $event_controller_reset_mask
    0499 : 8000 ; -- <0234> "
    049a : 2a00 ; -- <0235> soft_event = 0
    049b : 37a0 ; -- <0236> mstimer0 = 1000
    049c : 03e8 ; -- <0236> "
    049d : 3e14 ; -- <0237> mstimer2 = $plan_tick_ms
    049e : e00f ; -- <0238> jmp :poll_events
    049f : 007e ; -- <0238> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x04a0
    04a0 : 007e ; -- <0243> ([label :poll_events])
    04a1 : 06ca ; -- <0244> ([label :power_lost_handler])
    04a2 : 04b5 ; -- <0245> ([label :ign_capture_handler])
    04a3 : 0535 ; -- <0246> ([label :ign_capture_timeout_handler])
    04a4 : 06fe ; -- <0247> ([label :puff1_done_handler])
    04a5 : 053a ; -- <0248> ([label :ustimer0_handler])
    04a6 : 0665 ; -- <0249> ([label :spi_done_handler])
    04a7 : 053c ; -- <0250> ([label :mstimer0_handler])
    04a8 : 0632 ; -- <0251> ([label :mstimer1_handler])
    04a9 : 056b ; -- <0252> ([label :mstimer2_handler])
    04aa : 0592 ; -- <0253> ([label :uart_rx_handler])
    04ab : 05ab ; -- <0254> ([label :uart_rx_overflow_handler])
    04ac : 05b1 ; -- <0255> ([label :uart_tx_overflow_handler])
    04ad : 05b7 ; -- <0256> ([label :key0_handler])
    04ae : 05c1 ; -- <0257> ([label :key1_handler])
    04af : 06e1 ; -- <0258> ([label :ign_switch_off_handler])
    04b0 : 06f4 ; -- <0259> ([label :ign_switch_on_handler])
    04b1 : 05cb ; -- <0260> ([label :softevent3_handler])
    04b2 : 05cd ; -- <0261> ([label :softevent2_handler])
    04b3 : 05cf ; -- <0262> ([label :softevent1_handler])
    04b4 : 05d1 ; -- <0263> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x04b5
-- discard outlier time.
    04b5 : 181b ; -- <0269> g6 = ign_capture_jf
    04b6 : 4e00 ; -- <0270> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    04b7 : 5284 ; -- <0270> ram b = $ram_ign_fastest_jf -- av_ad_lo = 132
    04b8 : 0411 ; -- <0270> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    04b9 : 0412 ; -- <0270> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle

    04ba : 0006 ; -- <0273> a = g6
    04bb : 0401 ; -- <0273> b = b


    04bc : e405 ; -- <0273> bn lt :else_1212
    04bd : 04bf ; -- <0273> "

    04be : 1a00 ; -- <0273> g6 = 0


-- :else_1212 -- = 0x04bf

-- :end_1212 -- = 0x04bf

    04bf : 4e00 ; -- <0274> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    04c0 : 5286 ; -- <0274> ram b = $ram_ign_slowest_jf -- av_ad_lo = 134
    04c1 : 0411 ; -- <0274> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    04c2 : 0412 ; -- <0274> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle

    04c3 : 0006 ; -- <0277> a = g6
    04c4 : 0401 ; -- <0277> b = b


    04c5 : e406 ; -- <0277> bn gt :else_1221
    04c6 : 04c8 ; -- <0277> "

    04c7 : 1a00 ; -- <0277> g6 = 0


-- :else_1221 -- = 0x04c8

-- :end_1221 -- = 0x04c8


-- increment buffer index and memorize time.
    04c8 : 4e00 ; -- <0280> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    04c9 : 525a ; -- <0280> ram a = $ram_ign_history_idx -- av_ad_lo = 90
    04ca : 0011 ; -- <0280> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    04cb : 0012 ; -- <0280> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    04cc : 0601 ; -- <0281> b = 1
    04cd : c800 ; -- <0282> a = a+b
    04ce : 0300 ; -- <0282> "
    04cf : 060f ; -- <0283> b = $ign_history_idx_mask
    04d0 : c800 ; -- <0284> a = and
    04d1 : 0330 ; -- <0284> "
    04d2 : 4e00 ; -- <0285> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    04d3 : 525a ; -- <0285> ram $ram_ign_history_idx = a -- av_ad_lo = 90
    04d4 : 4400 ; -- <0285> ram $ram_ign_history_idx = a -- av_write_data = a
    04d5 : 0406 ; -- <0286> b = g6

    04d6 : 0351 ; -- <0287> a = a<<1
    04d7 : 2001 ; -- <0287> push b -- push b
    04d8 : 065c ; -- <0287> b = 92
    04d9 : 4e00 ; -- <0287> av_ad_hi = 0
    04da : 5300 ; -- <0287> av_ad_lo = ad0
    04db : 4408 ; -- <0287> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, y = sample, i = index = loop count, g6 = count of invalid samples.
    04dc : 1200 ; -- <0292> x = 0
    04dd : 1a00 ; -- <0293> g6 = 0
    04de : 0a00 ; -- <0309> i = 0
-- :loop_1246 -- = 0x04df

    04df : 0002 ; -- <0309> a = i

    04e0 : 0351 ; -- <0309> a = a<<1
    04e1 : 065c ; -- <0309> b = 92
    04e2 : 4e00 ; -- <0309> av_ad_hi = 0
    04e3 : 5300 ; -- <0309> av_ad_lo = ad0
    04e4 : 0411 ; -- <0309> b = av_write_data
    04e5 : 0412 ; -- <0309> b = av_read_data

    04e6 : 1401 ; -- <0309> y = b

    04e7 : 0005 ; -- <0309> a = y
    04e8 : 0600 ; -- <0309> b = 0


    04e9 : e407 ; -- <0309> bn eq :else_1257
    04ea : 04f1 ; -- <0309> "

    04eb : 0006 ; -- <0309> a = g6
    04ec : 0601 ; -- <0309> b = 1
    04ed : c800 ; -- <0309> g6 = a+b
    04ee : 1b00 ; -- <0309> "

    04ef : e00f ; -- <0309> jmp :end_1257
    04f0 : 04f8 ; -- <0309> "
-- :else_1257 -- = 0x04f1

    04f1 : 0208 ; -- <0309> a = ($ign_history_len / 2)
    04f2 : 0405 ; -- <0309> b = y
    04f3 : c800 ; -- <0309> a = a+b
    04f4 : 0300 ; -- <0309> "
    04f5 : 1753 ; -- <0309> y = a>>$ign_history_idx_bits
    04f6 : c800 ; -- <0309> x = x+y
    04f7 : 1320 ; -- <0309> "

-- :end_1257 -- = 0x04f8



    04f8 : 0002 ; -- <0309> a = i
    04f9 : 0601 ; -- <0309> b = 1
    04fa : c800 ; -- <0309> i = a+b
    04fb : 0b00 ; -- <0309> "


    04fc : 0002 ; -- <0309> a = i
    04fd : 0610 ; -- <0309> b = $ign_history_len
    04fe : e005 ; -- <0309> br lt :loop_1246
    04ff : 04df ; -- <0309> "

-- :end_1246 -- = 0x0500
    0500 : 4e00 ; -- <0310> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    0501 : 527c ; -- <0310> ram $ram_ign_avg_jf = x -- av_ad_lo = 124
    0502 : 4404 ; -- <0310> ram $ram_ign_avg_jf = x -- av_write_data = x
    0503 : 4e00 ; -- <0311> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    0504 : 5282 ; -- <0311> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 130
    0505 : 4406 ; -- <0311> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.


    0506 : 0006 ; -- <0328> a = g6
    0507 : 0604 ; -- <0328> b = ( $ign_history_len / 4 )


    0508 : e406 ; -- <0328> bn gt :else_1288
    0509 : 050f ; -- <0328> "

    050a : 4e00 ; -- <0328> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    050b : 5280 ; -- <0328> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    050c : 4600 ; -- <0328> ram $ram_rpm_valid = 0 -- av_write_data = 0

    050d : e00f ; -- <0328> jmp :end_1288
    050e : 0519 ; -- <0328> "
-- :else_1288 -- = 0x050f

-- convert jiffies b to new RPM estimate.
    050f : 0004 ; -- <0328> a = x
    0510 : fba0 ; -- <0328> call :jf_to_rpm
    0511 : 07fe ; -- <0328> "
    0512 : fc00 ; -- <0328> "
    0513 : 4e00 ; -- <0328> ram $ram_avg_rpm = a -- av_ad_hi = 0
    0514 : 527e ; -- <0328> ram $ram_avg_rpm = a -- av_ad_lo = 126
    0515 : 4400 ; -- <0328> ram $ram_avg_rpm = a -- av_write_data = a
    0516 : 4e00 ; -- <0328> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    0517 : 5280 ; -- <0328> ram $ram_rpm_valid = 1 -- av_ad_lo = 128
    0518 : 4601 ; -- <0328> ram $ram_rpm_valid = 1 -- av_write_data = 1

-- :end_1288 -- = 0x0519

    0519 : e00f ; -- <0329> end_event
    051a : 007e ; -- <0329> "

-- ######## func clear_ign_history -- = 0x051b
    051b : 2002 ; -- <0331> push i -- func clear_ign_history
-- invalidate the RPM estimate.
    051c : 4e00 ; -- <0333> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    051d : 5280 ; -- <0333> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    051e : 4600 ; -- <0333> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    051f : 4e00 ; -- <0336> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    0520 : 5282 ; -- <0336> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 130
    0521 : 4610 ; -- <0336> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    0522 : 0a00 ; -- <0341> i = 0
-- :loop_1314 -- = 0x0523

    0523 : 0002 ; -- <0341> a = i
    0524 : 0600 ; -- <0341> b = 0

    0525 : 0351 ; -- <0341> a = a<<1
    0526 : 2001 ; -- <0341> push b -- push b
    0527 : 065c ; -- <0341> b = 92
    0528 : 4e00 ; -- <0341> av_ad_hi = 0
    0529 : 5300 ; -- <0341> av_ad_lo = ad0
    052a : 4408 ; -- <0341> pop av_write_data -- pop av_write_data



    052b : 0002 ; -- <0341> a = i
    052c : 0601 ; -- <0341> b = 1
    052d : c800 ; -- <0341> i = a+b
    052e : 0b00 ; -- <0341> "


    052f : 0002 ; -- <0341> a = i
    0530 : 0610 ; -- <0341> b = $ign_history_len
    0531 : e005 ; -- <0341> br lt :loop_1314
    0532 : 0523 ; -- <0341> "

-- :end_1314 -- = 0x0533
    0533 : 0808 ; -- <0342> pop i -- end_func
    0534 : fc00 ; -- <0342> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x0535
-- it's been too long since the last ignition pulse detect.
    0535 : fba0 ; -- <0346> call :clear_ign_history
    0536 : 051b ; -- <0346> "
    0537 : fc00 ; -- <0346> "
    0538 : e00f ; -- <0347> end_event
    0539 : 007e ; -- <0347> "

-- ######## event ustimer0_handler -- = 0x053a
    053a : e00f ; -- <0350> end_event
    053b : 007e ; -- <0350> "

-- ######## event mstimer0_handler -- = 0x053c
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    053c : 37a0 ; -- <0356> mstimer0 = 1000
    053d : 03e8 ; -- <0356> "

-- realtime counters in RAM.
    053e : 4e00 ; -- <0359> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    053f : 5244 ; -- <0359> ram a = $ram_seconds_cnt -- av_ad_lo = 68
    0540 : 0011 ; -- <0359> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    0541 : 0012 ; -- <0359> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    0542 : 0601 ; -- <0360> b = 1
    0543 : c800 ; -- <0361> a = a+b
    0544 : 0300 ; -- <0361> "

    0545 : 0000 ; -- <0370> a = a
    0546 : 063c ; -- <0370> b = 60


    0547 : e407 ; -- <0370> bn eq :else_1351
    0548 : 055a ; -- <0370> "

    0549 : 4e00 ; -- <0370> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    054a : 5244 ; -- <0370> ram $ram_seconds_cnt = 0 -- av_ad_lo = 68
    054b : 4600 ; -- <0370> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    054c : 4e00 ; -- <0370> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    054d : 5242 ; -- <0370> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    054e : 0011 ; -- <0370> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    054f : 0012 ; -- <0370> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0550 : 0601 ; -- <0370> b = 1
    0551 : 4e00 ; -- <0370> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    0552 : 5242 ; -- <0370> ram $ram_minutes_cnt = a+b -- av_ad_lo = 66
    0553 : c800 ; -- <0370> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    0554 : 4700 ; -- <0370> "
    0555 : fba0 ; -- <0370> call :minute_events
    0556 : 070d ; -- <0370> "
    0557 : fc00 ; -- <0370> "

    0558 : e00f ; -- <0370> jmp :end_1351
    0559 : 055d ; -- <0370> "
-- :else_1351 -- = 0x055a

    055a : 4e00 ; -- <0370> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    055b : 5244 ; -- <0370> ram $ram_seconds_cnt = a -- av_ad_lo = 68
    055c : 4400 ; -- <0370> ram $ram_seconds_cnt = a -- av_write_data = a

-- :end_1351 -- = 0x055d


-- all 1-second functions here.
    055d : fba0 ; -- <0373> call :check_power_relay
    055e : 0715 ; -- <0373> "
    055f : fc00 ; -- <0373> "
    0560 : fba0 ; -- <0374> call :check_communication
    0561 : 0748 ; -- <0374> "
    0562 : fc00 ; -- <0374> "
    0563 : fba0 ; -- <0375> call :start_daq_pass
    0564 : 05dd ; -- <0375> "
    0565 : fc00 ; -- <0375> "
    0566 : e00f ; -- <0376> end_event
    0567 : 007e ; -- <0376> "

-- :plan_transition_msg -- = 0x0568
-- "PLAN\x0"
    0568 : 4c50 ; -- <0379> LP
    0569 : 4e41 ; -- <0379> NA
    056a : 0000 ; -- <0379>   

-- ######## event mstimer2_handler -- = 0x056b
-- engine management plan tick timer.

-- restart timer.
    056b : 3e14 ; -- <0385> mstimer2 = $plan_tick_ms

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    056c : 4e00 ; -- <0390> ram rtna = $ram_transition_func -- av_ad_hi = 0
    056d : 528e ; -- <0390> ram rtna = $ram_transition_func -- av_ad_lo = 142
    056e : f811 ; -- <0390> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    056f : f812 ; -- <0390> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    0570 : 103e ; -- <0391> x = rtna
    0571 : fc00 ; -- <0392> swapra = nop
    0572 : 4e00 ; -- <0393> ram b = $ram_transition_func -- av_ad_hi = 0
    0573 : 528e ; -- <0393> ram b = $ram_transition_func -- av_ad_lo = 142
    0574 : 0411 ; -- <0393> ram b = $ram_transition_func -- b = av_write_data -- start read cycle
    0575 : 0412 ; -- <0393> ram b = $ram_transition_func -- b = av_read_data -- finish read cycle

    0576 : 0004 ; -- <0397> a = x
    0577 : 0401 ; -- <0397> b = b


    0578 : e007 ; -- <0397> br eq :else_1400
    0579 : 057f ; -- <0397> "

    057a : 03a0 ; -- <0397> a = :plan_transition_msg
    057b : 0568 ; -- <0397> "
    057c : fba0 ; -- <0397> call :set_text_flag
    057d : 07a6 ; -- <0397> "
    057e : fc00 ; -- <0397> "


-- :else_1400 -- = 0x057f

-- :end_1400 -- = 0x057f

-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    057f : 4e00 ; -- <0400> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    0580 : 528c ; -- <0400> ram rtna = $ram_puff_len_func -- av_ad_lo = 140
    0581 : f811 ; -- <0400> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    0582 : f812 ; -- <0400> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    0583 : fc00 ; -- <0401> swapra = nop

-- start another o2 reading every plan tick.
    0584 : 4e00 ; -- <0404> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0585 : 5238 ; -- <0404> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    0586 : 0011 ; -- <0404> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0587 : 0012 ; -- <0404> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    0588 : 0000 ; -- <0408> a = a
    0589 : 0600 ; -- <0408> b = 0


    058a : e407 ; -- <0408> bn eq :else_1418
    058b : 0590 ; -- <0408> "

    058c : 0205 ; -- <0408> a = $o2_adc_channel
    058d : fba0 ; -- <0408> call :begin_adc_conversion
    058e : 0658 ; -- <0408> "
    058f : fc00 ; -- <0408> "


-- :else_1418 -- = 0x0590

-- :end_1418 -- = 0x0590

    0590 : e00f ; -- <0409> end_event
    0591 : 007e ; -- <0409> "

-- ######## event uart_rx_handler -- = 0x0592
-- :again -- = 0x0592
    0592 : fba0 ; -- <0413> pollchar
    0593 : 009a ; -- <0413> "
    0594 : fc00 ; -- <0413> "
    0595 : 1000 ; -- <0414> x = a

    0596 : 0004 ; -- <0417> a = x
    0597 : 0760 ; -- <0417> b = -1


    0598 : e407 ; -- <0417> bn eq :else_1432
    0599 : 059c ; -- <0417> "

    059a : e00f ; -- <0417> event_return
    059b : 007e ; -- <0417> "


-- :else_1432 -- = 0x059c

-- :end_1432 -- = 0x059c


    059c : 0004 ; -- <0420> a = x
    059d : 060a ; -- <0420> b = 10


    059e : e407 ; -- <0420> bn eq :else_1438
    059f : 05a3 ; -- <0420> "

    05a0 : fba0 ; -- <0420> call :postpone_comm_restart
    05a1 : 0775 ; -- <0420> "
    05a2 : fc00 ; -- <0420> "


-- :else_1438 -- = 0x05a3

-- :end_1438 -- = 0x05a3

    05a3 : 0004 ; -- <0421> a = x
    05a4 : fba0 ; -- <0422> call :parse_key
    05a5 : 022c ; -- <0422> "
    05a6 : fc00 ; -- <0422> "
    05a7 : e00f ; -- <0423> jmp :again
    05a8 : 0592 ; -- <0423> "
    05a9 : e00f ; -- <0424> end_event
    05aa : 007e ; -- <0424> "

-- ######## event uart_rx_overflow_handler -- = 0x05ab
    05ab : 5fa0 ; -- <0427> error_halt_code $err_rx_overflow -- leds = 0xfffe
    05ac : fffe ; -- <0427> "
    05ad : e00f ; -- <0427> error_halt_code $err_rx_overflow
    05ae : 05ad ; -- <0427> "
    05af : e00f ; -- <0428> end_event
    05b0 : 007e ; -- <0428> "

-- ######## event uart_tx_overflow_handler -- = 0x05b1
    05b1 : 5fa0 ; -- <0431> error_halt_code $err_tx_overflow -- leds = 0xfffd
    05b2 : fffd ; -- <0431> "
    05b3 : e00f ; -- <0431> error_halt_code $err_tx_overflow
    05b4 : 05b3 ; -- <0431> "
    05b5 : e00f ; -- <0432> end_event
    05b6 : 007e ; -- <0432> "

-- ######## event key0_handler -- = 0x05b7
    05b7 : 026b ; -- <0435> a = 107 -- putasc "k"
    05b8 : fba0 ; -- <0435> putasc "k"
    05b9 : 008b ; -- <0435> "
    05ba : fc00 ; -- <0435> "
    05bb : 0230 ; -- <0436> a = 48 -- putasc "0"
    05bc : fba0 ; -- <0436> putasc "0"
    05bd : 008b ; -- <0436> "
    05be : fc00 ; -- <0436> "
    05bf : e00f ; -- <0437> end_event
    05c0 : 007e ; -- <0437> "

-- ######## event key1_handler -- = 0x05c1
    05c1 : 026b ; -- <0440> a = 107 -- putasc "k"
    05c2 : fba0 ; -- <0440> putasc "k"
    05c3 : 008b ; -- <0440> "
    05c4 : fc00 ; -- <0440> "
    05c5 : 0231 ; -- <0441> a = 49 -- putasc "1"
    05c6 : fba0 ; -- <0441> putasc "1"
    05c7 : 008b ; -- <0441> "
    05c8 : fc00 ; -- <0441> "
    05c9 : e00f ; -- <0442> end_event
    05ca : 007e ; -- <0442> "

-- ######## event softevent3_handler -- = 0x05cb
    05cb : e00f ; -- <0445> end_event
    05cc : 007e ; -- <0445> "

-- ######## event softevent2_handler -- = 0x05cd
    05cd : e00f ; -- <0448> end_event
    05ce : 007e ; -- <0448> "

-- ######## event softevent1_handler -- = 0x05cf
    05cf : e00f ; -- <0451> end_event
    05d0 : 007e ; -- <0451> "

-- ######## event softevent0_handler -- = 0x05d1
    05d1 : e00f ; -- <0454> end_event
    05d2 : 007e ; -- <0454> "

-- :rpm_msg -- = 0x05d3
-- ": rpm=\x0"
    05d3 : 203a ; -- <0457>  :
    05d4 : 7072 ; -- <0457> pr
    05d5 : 3d6d ; -- <0457> =m
    05d6 : 0000 ; -- <0457>   

-- :puff_len_msg -- = 0x05d7
-- " pfl=\x0"
    05d7 : 7020 ; -- <0460> p 
    05d8 : 6c66 ; -- <0460> lf
    05d9 : 003d ; -- <0460>  =

-- :o2_msg -- = 0x05da
-- " o2=\x0"
    05da : 6f20 ; -- <0463> o 
    05db : 3d32 ; -- <0463> =2
    05dc : 0000 ; -- <0463>   

-- ######## func start_daq_pass -- = 0x05dd
    05dd : 2004 ; -- <0465> push x -- func start_daq_pass
    05de : 203e ; -- <0465> push rtna -- "
-- daq pass counter in RAM.
    05df : 4e00 ; -- <0467> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    05e0 : 5214 ; -- <0467> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    05e1 : 0011 ; -- <0467> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    05e2 : 0012 ; -- <0467> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    05e3 : 0601 ; -- <0468> b = 1
    05e4 : c800 ; -- <0469> a = a+b
    05e5 : 0300 ; -- <0469> "
    05e6 : 5c00 ; -- <0470> leds = a
    05e7 : 4e00 ; -- <0471> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    05e8 : 5214 ; -- <0471> ram $ram_daq_pass_cnt = a -- av_ad_lo = 20
    05e9 : 4400 ; -- <0471> ram $ram_daq_pass_cnt = a -- av_write_data = a
    05ea : fba0 ; -- <0472> call :put4x
    05eb : 00b3 ; -- <0472> "
    05ec : fc00 ; -- <0472> "

    05ed : 03a0 ; -- <0474> a = :rpm_msg
    05ee : 05d3 ; -- <0474> "
    05ef : fba0 ; -- <0475> call :print_nt
    05f0 : 013f ; -- <0475> "
    05f1 : fc00 ; -- <0475> "
    05f2 : 0200 ; -- <0476> a = 0
    05f3 : 4e00 ; -- <0477> ram x = $ram_rpm_valid -- av_ad_hi = 0
    05f4 : 5280 ; -- <0477> ram x = $ram_rpm_valid -- av_ad_lo = 128
    05f5 : 1011 ; -- <0477> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    05f6 : 1012 ; -- <0477> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle

    05f7 : 0004 ; -- <0480> a = x
    05f8 : 0600 ; -- <0480> b = 0


    05f9 : e007 ; -- <0480> br eq :else_1529
    05fa : 05ff ; -- <0480> "

    05fb : 4e00 ; -- <0480> ram a = $ram_avg_rpm -- av_ad_hi = 0
    05fc : 527e ; -- <0480> ram a = $ram_avg_rpm -- av_ad_lo = 126
    05fd : 0011 ; -- <0480> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    05fe : 0012 ; -- <0480> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle


-- :else_1529 -- = 0x05ff

-- :end_1529 -- = 0x05ff

    05ff : fba0 ; -- <0481> call :put4x
    0600 : 00b3 ; -- <0481> "
    0601 : fc00 ; -- <0481> "

    0602 : 03a0 ; -- <0483> a = :puff_len_msg
    0603 : 05d7 ; -- <0483> "
    0604 : fba0 ; -- <0484> call :print_nt
    0605 : 013f ; -- <0484> "
    0606 : fc00 ; -- <0484> "
    0607 : 001d ; -- <0485> a = puff_len_us
    0608 : fba0 ; -- <0486> call :put4x
    0609 : 00b3 ; -- <0486> "
    060a : fc00 ; -- <0486> "
    060b : 022c ; -- <0487> a = 44 -- putasc ","
    060c : fba0 ; -- <0487> putasc ","
    060d : 008b ; -- <0487> "
    060e : fc00 ; -- <0487> "
    060f : 4e00 ; -- <0488> ram a = $ram_puff_count -- av_ad_hi = 0
    0610 : 5294 ; -- <0488> ram a = $ram_puff_count -- av_ad_lo = 148
    0611 : 0011 ; -- <0488> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0612 : 0012 ; -- <0488> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0613 : fba0 ; -- <0489> call :put4x
    0614 : 00b3 ; -- <0489> "
    0615 : fc00 ; -- <0489> "

    0616 : 03a0 ; -- <0491> a = :o2_msg
    0617 : 05da ; -- <0491> "
    0618 : fba0 ; -- <0492> call :print_nt
    0619 : 013f ; -- <0492> "
    061a : fc00 ; -- <0492> "
    061b : 0205 ; -- <0493> a = $o2_adc_channel

    061c : 0351 ; -- <0494> a = a<<1
    061d : 0628 ; -- <0494> b = 40
    061e : 4e00 ; -- <0494> av_ad_hi = 0
    061f : 5300 ; -- <0494> av_ad_lo = ad0
    0620 : 0411 ; -- <0494> b = av_write_data
    0621 : 0412 ; -- <0494> b = av_read_data

    0622 : 0001 ; -- <0495> a = b
    0623 : fba0 ; -- <0496> call :put4x
    0624 : 00b3 ; -- <0496> "
    0625 : fc00 ; -- <0496> "

-- start to acquire & report all anmux channels.
    0626 : 0207 ; -- <0499> a = ($anmux_num_channels - 1)
    0627 : fba0 ; -- <0500> call :anmux_set_chn
    0628 : 00a2 ; -- <0500> "
    0629 : fc00 ; -- <0500> "
    062a : 3a05 ; -- <0501> mstimer1 = $anmux_settle_ms

-- -- observe MCU utilization.  this RAM variable can be seen by the debugger.
    062b : 4e00 ; -- <0504> ram $ram_mcu_usage_cnt = usage_count -- av_ad_hi = 0
    062c : 5246 ; -- <0504> ram $ram_mcu_usage_cnt = usage_count -- av_ad_lo = 70
    062d : 440b ; -- <0504> ram $ram_mcu_usage_cnt = usage_count -- av_write_data = usage_count
    062e : 2e00 ; -- <0505> usage_count = 0
    062f : f808 ; -- <0506> pop rtna -- end_func
    0630 : 1008 ; -- <0506> pop x -- "
    0631 : fc00 ; -- <0506> swapra = nop

-- ######## event mstimer1_handler -- = 0x0632
-- anmux signal has settled.

    0632 : 4e00 ; -- <0511> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0633 : 5238 ; -- <0511> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    0634 : 0011 ; -- <0511> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0635 : 0012 ; -- <0511> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    0636 : 0000 ; -- <0516> a = a
    0637 : 0600 ; -- <0516> b = 0


    0638 : e007 ; -- <0516> br eq :else_1592
    0639 : 063d ; -- <0516> "

-- ADC is busy right now.  wait a while & try again.
    063a : 3a02 ; -- <0516> mstimer1 = $anmux_retry_ms
    063b : e00f ; -- <0516> event_return
    063c : 007e ; -- <0516> "


-- :else_1592 -- = 0x063d

-- :end_1592 -- = 0x063d


-- start a reading from the current anmux channel.
    063d : 0220 ; -- <0519> a = 32 -- putasc " "
    063e : fba0 ; -- <0519> putasc " "
    063f : 008b ; -- <0519> "
    0640 : fc00 ; -- <0519> "
    0641 : 0273 ; -- <0520> a = 115 -- putasc "s"
    0642 : fba0 ; -- <0520> putasc "s"
    0643 : 008b ; -- <0520> "
    0644 : fc00 ; -- <0520> "
    0645 : fba0 ; -- <0521> call :anmux_get_chn
    0646 : 00a6 ; -- <0521> "
    0647 : fc00 ; -- <0521> "
    0648 : 0630 ; -- <0522> b = 48 -- asc b = "0"
    0649 : c800 ; -- <0523> a = a+b -- putchar a+b
    064a : 0300 ; -- <0523> "
    064b : fba0 ; -- <0523> putchar a+b
    064c : 008b ; -- <0523> "
    064d : fc00 ; -- <0523> "
    064e : 023d ; -- <0524> a = 61 -- putasc "="
    064f : fba0 ; -- <0524> putasc "="
    0650 : 008b ; -- <0524> "
    0651 : fc00 ; -- <0524> "
    0652 : 0207 ; -- <0525> a = $anmux_adc_channel
    0653 : fba0 ; -- <0526> call :begin_adc_conversion
    0654 : 0658 ; -- <0526> "
    0655 : fc00 ; -- <0526> "
    0656 : e00f ; -- <0527> end_event
    0657 : 007e ; -- <0527> "

-- ######## func begin_adc_conversion -- = 0x0658
-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.  pass that in a.

    0658 : 4e00 ; -- <0533> ram $ram_adc_chn_pending = a -- av_ad_hi = 0
    0659 : 5238 ; -- <0533> ram $ram_adc_chn_pending = a -- av_ad_lo = 56
    065a : 4400 ; -- <0533> ram $ram_adc_chn_pending = a -- av_write_data = a
    065b : 0352 ; -- <0534> a = a<<4
    065c : 0352 ; -- <0535> a = a<<4
    065d : 0351 ; -- <0536> a = a<<1
    065e : 0351 ; -- <0537> a = a<<1
    065f : 0351 ; -- <0538> a = a<<1
    0660 : 4000 ; -- <0539> spi_data = a
    0661 : 4e00 ; -- <0540> ram $ram_adc_junk = 1 -- av_ad_hi = 0
    0662 : 523a ; -- <0540> ram $ram_adc_junk = 1 -- av_ad_lo = 58
    0663 : 4601 ; -- <0540> ram $ram_adc_junk = 1 -- av_write_data = 1
    0664 : fc00 ; -- <0541> swapra = nop

-- ######## event spi_done_handler -- = 0x0665
-- discard the results of the first SPI exchange with the ADC.  that's only for writing the channel num out to the ADC.
    0665 : 4e00 ; -- <0545> ram a = $ram_adc_junk -- av_ad_hi = 0
    0666 : 523a ; -- <0545> ram a = $ram_adc_junk -- av_ad_lo = 58
    0667 : 0011 ; -- <0545> ram a = $ram_adc_junk -- a = av_write_data -- start read cycle
    0668 : 0012 ; -- <0545> ram a = $ram_adc_junk -- a = av_read_data -- finish read cycle

    0669 : 0000 ; -- <0557> a = a
    066a : 0600 ; -- <0557> b = 0


    066b : e007 ; -- <0557> br eq :else_1643
    066c : 067c ; -- <0557> "

-- start another SPI exchange to retrieve the actual reading.
    066d : 4e00 ; -- <0557> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    066e : 5238 ; -- <0557> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    066f : 0011 ; -- <0557> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0670 : 0012 ; -- <0557> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle
    0671 : 0352 ; -- <0557> a = a<<4
    0672 : 0352 ; -- <0557> a = a<<4
    0673 : 0351 ; -- <0557> a = a<<1
    0674 : 0351 ; -- <0557> a = a<<1
    0675 : 0351 ; -- <0557> a = a<<1
    0676 : 4000 ; -- <0557> spi_data = a
    0677 : 4e00 ; -- <0557> ram $ram_adc_junk = 0 -- av_ad_hi = 0
    0678 : 523a ; -- <0557> ram $ram_adc_junk = 0 -- av_ad_lo = 58
    0679 : 4600 ; -- <0557> ram $ram_adc_junk = 0 -- av_write_data = 0
    067a : e00f ; -- <0557> event_return
    067b : 007e ; -- <0557> "


-- :else_1643 -- = 0x067c

-- :end_1643 -- = 0x067c


-- memorize an actual ADC reading.
    067c : 4e00 ; -- <0560> ram i = $ram_adc_chn_pending -- av_ad_hi = 0
    067d : 5238 ; -- <0560> ram i = $ram_adc_chn_pending -- av_ad_lo = 56
    067e : 0811 ; -- <0560> ram i = $ram_adc_chn_pending -- i = av_write_data -- start read cycle
    067f : 0812 ; -- <0560> ram i = $ram_adc_chn_pending -- i = av_read_data -- finish read cycle
    0680 : 4e00 ; -- <0561> ram $ram_adc_chn_pending = 0 -- av_ad_hi = 0
    0681 : 5238 ; -- <0561> ram $ram_adc_chn_pending = 0 -- av_ad_lo = 56
    0682 : 4600 ; -- <0561> ram $ram_adc_chn_pending = 0 -- av_write_data = 0
    0683 : 0002 ; -- <0562> a = i
    0684 : 0410 ; -- <0563> b = spi_data

    0685 : 0351 ; -- <0564> a = a<<1
    0686 : 2001 ; -- <0564> push b -- push b
    0687 : 0628 ; -- <0564> b = 40
    0688 : 4e00 ; -- <0564> av_ad_hi = 0
    0689 : 5300 ; -- <0564> av_ad_lo = ad0
    068a : 4408 ; -- <0564> pop av_write_data -- pop av_write_data


    068b : 0002 ; -- <0567> a = i
    068c : 0605 ; -- <0567> b = 5


    068d : e407 ; -- <0567> bn eq :else_1677
    068e : 0691 ; -- <0567> "

    068f : e00f ; -- <0567> event_return
    0690 : 007e ; -- <0567> "


-- :else_1677 -- = 0x0691

-- :end_1677 -- = 0x0691


    0691 : 0002 ; -- <0594> a = i
    0692 : 0607 ; -- <0594> b = 7


    0693 : e407 ; -- <0594> bn eq :else_1683
    0694 : 06c6 ; -- <0594> "

-- report anmux reading.
    0695 : 0010 ; -- <0594> a = spi_data
    0696 : fba0 ; -- <0594> call :put4x
    0697 : 00b3 ; -- <0594> "
    0698 : fc00 ; -- <0594> "

-- memorize anmux reading.
    0699 : fba0 ; -- <0594> call :anmux_get_chn
    069a : 00a6 ; -- <0594> "
    069b : fc00 ; -- <0594> "
    069c : 0410 ; -- <0594> b = spi_data

    069d : 0351 ; -- <0594> a = a<<1
    069e : 2001 ; -- <0594> push b -- push b
    069f : 0618 ; -- <0594> b = 24
    06a0 : 4e00 ; -- <0594> av_ad_hi = 0
    06a1 : 5300 ; -- <0594> av_ad_lo = ad0
    06a2 : 4408 ; -- <0594> pop av_write_data -- pop av_write_data


-- decrement anmux channel & start waiting again.
    06a3 : fba0 ; -- <0594> call :anmux_get_chn
    06a4 : 00a6 ; -- <0594> "
    06a5 : fc00 ; -- <0594> "

    06a6 : 0000 ; -- <0594> a = a
    06a7 : 0600 ; -- <0594> b = 0


    06a8 : e007 ; -- <0594> br eq :else_1704
    06a9 : 06b3 ; -- <0594> "

    06aa : 0760 ; -- <0594> b = -1
    06ab : c800 ; -- <0594> a = a+b
    06ac : 0300 ; -- <0594> "
    06ad : fba0 ; -- <0594> call :anmux_set_chn
    06ae : 00a2 ; -- <0594> "
    06af : fc00 ; -- <0594> "
    06b0 : 3a05 ; -- <0594> mstimer1 = $anmux_settle_ms
    06b1 : e00f ; -- <0594> event_return
    06b2 : 007e ; -- <0594> "


-- :else_1704 -- = 0x06b3

-- :end_1704 -- = 0x06b3


-- end of temperature daq pass.
    06b3 : fba0 ; -- <0594> call :report_plan
    06b4 : 07ef ; -- <0594> "
    06b5 : fc00 ; -- <0594> "
    06b6 : fba0 ; -- <0594> call :report_text_flags
    06b7 : 07bf ; -- <0594> "
    06b8 : fc00 ; -- <0594> "
    06b9 : 020d ; -- <0594> a = 13 -- puteol
    06ba : fba0 ; -- <0594> puteol
    06bb : 008b ; -- <0594> "
    06bc : fc00 ; -- <0594> "
    06bd : 020a ; -- <0594> a = 10 -- puteol
    06be : fba0 ; -- <0594> puteol
    06bf : 008b ; -- <0594> "
    06c0 : fc00 ; -- <0594> "
    06c1 : 4e00 ; -- <0594> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    06c2 : 523c ; -- <0594> ram $ram_dial_setting = spi_data -- av_ad_lo = 60
    06c3 : 4410 ; -- <0594> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    06c4 : e00f ; -- <0594> event_return
    06c5 : 007e ; -- <0594> "


-- :else_1683 -- = 0x06c6

-- :end_1683 -- = 0x06c6

    06c6 : e00f ; -- <0595> end_event
    06c7 : 007e ; -- <0595> "

-- :power_lost_msg -- = 0x06c8
-- "PWL\x0"
    06c8 : 5750 ; -- <0598> WP
    06c9 : 004c ; -- <0598>  L

-- ######## event power_lost_handler -- = 0x06ca
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    06ca : 6a00 ; -- <0607> power_duty = $power_duty_closing
    06cb : 4e00 ; -- <0608> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    06cc : 5214 ; -- <0608> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    06cd : 0011 ; -- <0608> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    06ce : 0012 ; -- <0608> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    06cf : 0602 ; -- <0609> b = $relay_hold_passes
    06d0 : 4e00 ; -- <0610> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    06d1 : 5240 ; -- <0610> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 64
    06d2 : c800 ; -- <0610> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    06d3 : 4700 ; -- <0610> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    06d4 : fba0 ; -- <0615> call :save_persistent_data
    06d5 : 0747 ; -- <0615> "
    06d6 : fc00 ; -- <0615> "

    06d7 : 03a0 ; -- <0617> a = :power_lost_msg
    06d8 : 06c8 ; -- <0617> "
    06d9 : fba0 ; -- <0618> call :set_text_flag
    06da : 07a6 ; -- <0618> "
    06db : fc00 ; -- <0618> "
    06dc : e00f ; -- <0619> end_event
    06dd : 007e ; -- <0619> "

-- :ign_off_msg -- = 0x06de
-- "IGOF\x0"
    06de : 4749 ; -- <0622> GI
    06df : 464f ; -- <0622> FO
    06e0 : 0000 ; -- <0622>   

-- ######## event ign_switch_off_handler -- = 0x06e1
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    06e1 : 4e00 ; -- <0626> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    06e2 : 5242 ; -- <0626> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    06e3 : 0011 ; -- <0626> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    06e4 : 0012 ; -- <0626> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    06e5 : 060a ; -- <0627> b = $power_extend_minutes
    06e6 : 4e00 ; -- <0628> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    06e7 : 523e ; -- <0628> ram $ram_power_down_at_min = a+b -- av_ad_lo = 62
    06e8 : c800 ; -- <0628> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    06e9 : 4700 ; -- <0628> "
    06ea : 03a0 ; -- <0629> a = :ign_off_msg
    06eb : 06de ; -- <0629> "
    06ec : fba0 ; -- <0630> call :set_text_flag
    06ed : 07a6 ; -- <0630> "
    06ee : fc00 ; -- <0630> "
    06ef : e00f ; -- <0631> end_event
    06f0 : 007e ; -- <0631> "

-- :ign_on_msg -- = 0x06f1
-- "IGON\x0"
    06f1 : 4749 ; -- <0634> GI
    06f2 : 4e4f ; -- <0634> NO
    06f3 : 0000 ; -- <0634>   

-- ######## event ign_switch_on_handler -- = 0x06f4
    06f4 : 4e00 ; -- <0637> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    06f5 : 523e ; -- <0637> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    06f6 : 4760 ; -- <0637> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    06f7 : 03a0 ; -- <0638> a = :ign_on_msg
    06f8 : 06f1 ; -- <0638> "
    06f9 : fba0 ; -- <0639> call :set_text_flag
    06fa : 07a6 ; -- <0639> "
    06fb : fc00 ; -- <0639> "
    06fc : e00f ; -- <0640> end_event
    06fd : 007e ; -- <0640> "

-- ######## event puff1_done_handler -- = 0x06fe
-- puff just finished.  set length of next puff.
    06fe : 4e00 ; -- <0644> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    06ff : 5292 ; -- <0644> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 146
    0700 : 7411 ; -- <0644> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    0701 : 7412 ; -- <0644> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    0702 : 4e00 ; -- <0647> ram a = $ram_puff_count -- av_ad_hi = 0
    0703 : 5294 ; -- <0647> ram a = $ram_puff_count -- av_ad_lo = 148
    0704 : 0011 ; -- <0647> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0705 : 0012 ; -- <0647> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0706 : 0601 ; -- <0648> b = 1
    0707 : 4e00 ; -- <0649> ram $ram_puff_count = a+b -- av_ad_hi = 0
    0708 : 5294 ; -- <0649> ram $ram_puff_count = a+b -- av_ad_lo = 148
    0709 : c800 ; -- <0649> ram $ram_puff_count = a+b -- av_write_data = a+b
    070a : 4700 ; -- <0649> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    070b : e00f ; -- <0660> end_event
    070c : 007e ; -- <0660> "

-- ######## func minute_events -- = 0x070d
    070d : 203e ; -- <0662> push rtna -- func minute_events
    070e : fba0 ; -- <0663> call :check_power_down
    070f : 072a ; -- <0663> "
    0710 : fc00 ; -- <0663> "
    0711 : f808 ; -- <0664> pop rtna -- end_func
    0712 : fc00 ; -- <0664> swapra = nop

-- :power_hold_msg -- = 0x0713
-- "PWH\x0"
    0713 : 5750 ; -- <0667> WP
    0714 : 0048 ; -- <0667>  H

-- ######## func check_power_relay -- = 0x0715
    0715 : 203e ; -- <0669> push rtna -- func check_power_relay
    0716 : 4e00 ; -- <0670> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0717 : 5214 ; -- <0670> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0718 : 0011 ; -- <0670> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0719 : 0012 ; -- <0670> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    071a : 4e00 ; -- <0671> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    071b : 5240 ; -- <0671> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 64
    071c : 0411 ; -- <0671> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    071d : 0412 ; -- <0671> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle

    071e : 0000 ; -- <0677> a = a
    071f : 0401 ; -- <0677> b = b


    0720 : e407 ; -- <0677> bn eq :else_1824
    0721 : 0728 ; -- <0677> "

-- time to begin "solenoid saver" coil power reduction by PWM.
    0722 : 6a19 ; -- <0677> power_duty = $power_duty_holding
    0723 : 03a0 ; -- <0677> a = :power_hold_msg
    0724 : 0713 ; -- <0677> "
    0725 : fba0 ; -- <0677> call :set_text_flag
    0726 : 07a6 ; -- <0677> "
    0727 : fc00 ; -- <0677> "


-- :else_1824 -- = 0x0728

-- :end_1824 -- = 0x0728

    0728 : f808 ; -- <0678> pop rtna -- end_func
    0729 : fc00 ; -- <0678> swapra = nop

-- ######## func check_power_down -- = 0x072a
    072a : 203e ; -- <0680> push rtna -- func check_power_down
-- check power-down deadline in RAM.
    072b : 4e00 ; -- <0682> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    072c : 5242 ; -- <0682> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    072d : 0011 ; -- <0682> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    072e : 0012 ; -- <0682> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    072f : 4e00 ; -- <0683> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    0730 : 523e ; -- <0683> ram b = $ram_power_down_at_min -- av_ad_lo = 62
    0731 : 0411 ; -- <0683> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    0732 : 0412 ; -- <0683> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle

    0733 : 0000 ; -- <0686> a = a
    0734 : 0401 ; -- <0686> b = b


    0735 : e407 ; -- <0686> bn eq :else_1845
    0736 : 073a ; -- <0686> "

    0737 : fba0 ; -- <0686> call :power_down
    0738 : 073c ; -- <0686> "
    0739 : fc00 ; -- <0686> "


-- :else_1845 -- = 0x073a

-- :end_1845 -- = 0x073a

    073a : f808 ; -- <0687> pop rtna -- end_func
    073b : fc00 ; -- <0687> swapra = nop

-- ######## func power_down -- = 0x073c
    073c : 203e ; -- <0689> push rtna -- func power_down
-- this function never returns.
    073d : fba0 ; -- <0691> call :save_persistent_data
    073e : 0747 ; -- <0691> "
    073f : fc00 ; -- <0691> "
    0740 : 6a32 ; -- <0692> power_duty = $power_duty_opening
    0741 : 5fa0 ; -- <0693> error_halt_code $err_power_down -- leds = 0xfffc
    0742 : fffc ; -- <0693> "
    0743 : e00f ; -- <0693> error_halt_code $err_power_down
    0744 : 0743 ; -- <0693> "
    0745 : f808 ; -- <0694> pop rtna -- end_func
    0746 : fc00 ; -- <0694> swapra = nop

-- ######## func save_persistent_data -- = 0x0747
    0747 : fc00 ; -- <0697> swapra = nop

-- ######## func check_communication -- = 0x0748
    0748 : 203e ; -- <0699> push rtna -- func check_communication
    0749 : 4e00 ; -- <0700> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    074a : 5212 ; -- <0700> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 18
    074b : 0011 ; -- <0700> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    074c : 0012 ; -- <0700> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle

    074d : 0000 ; -- <0708> a = a
    074e : 0600 ; -- <0708> b = 0


    074f : e007 ; -- <0708> br eq :else_1871
    0750 : 075e ; -- <0708> "

    0751 : 0760 ; -- <0708> b = -1
    0752 : c800 ; -- <0708> a = a+b
    0753 : 0300 ; -- <0708> "
    0754 : 4e00 ; -- <0708> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0755 : 5212 ; -- <0708> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 18
    0756 : 4400 ; -- <0708> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a

    0757 : 0000 ; -- <0708> a = a
    0758 : 0600 ; -- <0708> b = 0


    0759 : e407 ; -- <0708> bn eq :else_1881
    075a : 075e ; -- <0708> "

    075b : fba0 ; -- <0708> call :ftdi_power_on
    075c : 0792 ; -- <0708> "
    075d : fc00 ; -- <0708> "


-- :else_1881 -- = 0x075e

-- :end_1881 -- = 0x075e



-- :else_1871 -- = 0x075e

-- :end_1871 -- = 0x075e


    075e : 4e00 ; -- <0710> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    075f : 5242 ; -- <0710> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0760 : 0011 ; -- <0710> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0761 : 0012 ; -- <0710> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0762 : 4e00 ; -- <0711> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0763 : 5210 ; -- <0711> ram b = $ram_comm_restart_at_min -- av_ad_lo = 16
    0764 : 0411 ; -- <0711> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0765 : 0412 ; -- <0711> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle

    0766 : 0000 ; -- <0717> a = a
    0767 : 0401 ; -- <0717> b = b


    0768 : e407 ; -- <0717> bn eq :else_1896
    0769 : 0773 ; -- <0717> "

-- comm restart is required.
    076a : fba0 ; -- <0717> call :postpone_comm_restart
    076b : 0775 ; -- <0717> "
    076c : fc00 ; -- <0717> "
    076d : 4e00 ; -- <0717> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    076e : 5212 ; -- <0717> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 18
    076f : 4605 ; -- <0717> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    0770 : fba0 ; -- <0717> call :ftdi_power_off
    0771 : 0782 ; -- <0717> "
    0772 : fc00 ; -- <0717> "


-- :else_1896 -- = 0x0773

-- :end_1896 -- = 0x0773

    0773 : f808 ; -- <0718> pop rtna -- end_func
    0774 : fc00 ; -- <0718> swapra = nop

-- ######## func postpone_comm_restart -- = 0x0775
    0775 : 4e00 ; -- <0721> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0776 : 5242 ; -- <0721> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0777 : 0011 ; -- <0721> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0778 : 0012 ; -- <0721> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0779 : 0602 ; -- <0722> b = $comm_grace_period_min
    077a : 4e00 ; -- <0723> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    077b : 5210 ; -- <0723> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 16
    077c : c800 ; -- <0723> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    077d : 4700 ; -- <0723> "
    077e : fc00 ; -- <0724> swapra = nop

-- :ftdi_off_msg -- = 0x077f
-- "FTOF\x0"
    077f : 5446 ; -- <0727> TF
    0780 : 464f ; -- <0727> FO
    0781 : 0000 ; -- <0727>   

-- ######## func ftdi_power_off -- = 0x0782
    0782 : 203e ; -- <0729> push rtna -- func ftdi_power_off
    0783 : 0018 ; -- <0730> a = board_ctrl
    0784 : 07a0 ; -- <0731> b = $not_ftdi_power_mask
    0785 : ff7f ; -- <0731> "
    0786 : c800 ; -- <0732> board_ctrl = and
    0787 : 6330 ; -- <0732> "
    0788 : 03a0 ; -- <0733> a = :ftdi_off_msg
    0789 : 077f ; -- <0733> "
    078a : fba0 ; -- <0734> call :set_text_flag
    078b : 07a6 ; -- <0734> "
    078c : fc00 ; -- <0734> "
    078d : f808 ; -- <0735> pop rtna -- end_func
    078e : fc00 ; -- <0735> swapra = nop

-- :ftdi_on_msg -- = 0x078f
-- "FTON\x0"
    078f : 5446 ; -- <0738> TF
    0790 : 4e4f ; -- <0738> NO
    0791 : 0000 ; -- <0738>   

-- ######## func ftdi_power_on -- = 0x0792
    0792 : 203e ; -- <0740> push rtna -- func ftdi_power_on
    0793 : 0018 ; -- <0741> a = board_ctrl
    0794 : 0680 ; -- <0742> b = $ftdi_power_mask
    0795 : c800 ; -- <0743> board_ctrl = or
    0796 : 6334 ; -- <0743> "
    0797 : 03a0 ; -- <0744> a = :ftdi_on_msg
    0798 : 078f ; -- <0744> "
    0799 : fba0 ; -- <0745> call :set_text_flag
    079a : 07a6 ; -- <0745> "
    079b : fc00 ; -- <0745> "
    079c : f808 ; -- <0746> pop rtna -- end_func
    079d : fc00 ; -- <0746> swapra = nop

-- ######## func clear_ram_page -- = 0x079e
-- pass the page to be cleared in av_ad_hi.
    079e : 0200 ; -- <0750> a = 0
    079f : 0602 ; -- <0751> b = 2
-- :clear_next_word -- = 0x07a0
    07a0 : 5000 ; -- <0753> av_ad_lo = a
    07a1 : 4600 ; -- <0754> av_write_data = 0
    07a2 : 0300 ; -- <0755> a = ad0
    07a3 : e400 ; -- <0756> bn az :clear_next_word
    07a4 : 07a0 ; -- <0756> "
    07a5 : fc00 ; -- <0757> swapra = nop

-- ######## func set_text_flag -- = 0x07a6
    07a6 : 0400 ; -- <0760> b = a
    07a7 : 4e00 ; -- <0761> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    07a8 : 5258 ; -- <0761> ram a = $ram_next_tfp_idx -- av_ad_lo = 88
    07a9 : 0011 ; -- <0761> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    07aa : 0012 ; -- <0761> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle
    07ab : 2000 ; -- <0762> push a -- push a

    07ac : 0351 ; -- <0763> a = a<<1
    07ad : 2001 ; -- <0763> push b -- push b
    07ae : 0648 ; -- <0763> b = 72
    07af : 4e00 ; -- <0763> av_ad_hi = 0
    07b0 : 5300 ; -- <0763> av_ad_lo = ad0
    07b1 : 4408 ; -- <0763> pop av_write_data -- pop av_write_data

    07b2 : 0008 ; -- <0764> pop a -- pop a
    07b3 : 0760 ; -- <0765> b = -1
    07b4 : c800 ; -- <0766> a = a+b
    07b5 : 0300 ; -- <0766> "
    07b6 : 0607 ; -- <0767> b = $tfp_mask
    07b7 : 4e00 ; -- <0768> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    07b8 : 5258 ; -- <0768> ram $ram_next_tfp_idx = and -- av_ad_lo = 88
    07b9 : c800 ; -- <0768> ram $ram_next_tfp_idx = and -- av_write_data = and
    07ba : 4730 ; -- <0768> "
    07bb : fc00 ; -- <0769> swapra = nop

-- :text_flags_msg -- = 0x07bc
-- " tf=\x0"
    07bc : 7420 ; -- <0772> t 
    07bd : 3d66 ; -- <0772> =f
    07be : 0000 ; -- <0772>   

-- ######## func report_text_flags -- = 0x07bf
    07bf : 2002 ; -- <0774> push i -- func report_text_flags
    07c0 : 203e ; -- <0774> push rtna -- "
    07c1 : 03a0 ; -- <0775> a = :text_flags_msg
    07c2 : 07bc ; -- <0775> "
    07c3 : fba0 ; -- <0776> call :print_nt
    07c4 : 013f ; -- <0776> "
    07c5 : fc00 ; -- <0776> "
    07c6 : 0a00 ; -- <0787> i = 0
-- :loop_1990 -- = 0x07c7

    07c7 : 0002 ; -- <0787> a = i

    07c8 : 0351 ; -- <0787> a = a<<1
    07c9 : 0648 ; -- <0787> b = 72
    07ca : 4e00 ; -- <0787> av_ad_hi = 0
    07cb : 5300 ; -- <0787> av_ad_lo = ad0
    07cc : 0411 ; -- <0787> b = av_write_data
    07cd : 0412 ; -- <0787> b = av_read_data


    07ce : 0001 ; -- <0787> a = b
    07cf : 0600 ; -- <0787> b = 0


    07d0 : e007 ; -- <0787> br eq :else_2000
    07d1 : 07e1 ; -- <0787> "

    07d2 : fba0 ; -- <0787> call :print_nt
    07d3 : 013f ; -- <0787> "
    07d4 : fc00 ; -- <0787> "
    07d5 : 022c ; -- <0787> a = 44 -- putasc ","
    07d6 : fba0 ; -- <0787> putasc ","
    07d7 : 008b ; -- <0787> "
    07d8 : fc00 ; -- <0787> "
    07d9 : 0002 ; -- <0787> a = i
    07da : 0600 ; -- <0787> b = 0

    07db : 0351 ; -- <0787> a = a<<1
    07dc : 2001 ; -- <0787> push b -- push b
    07dd : 0648 ; -- <0787> b = 72
    07de : 4e00 ; -- <0787> av_ad_hi = 0
    07df : 5300 ; -- <0787> av_ad_lo = ad0
    07e0 : 4408 ; -- <0787> pop av_write_data -- pop av_write_data



-- :else_2000 -- = 0x07e1

-- :end_2000 -- = 0x07e1



    07e1 : 0002 ; -- <0787> a = i
    07e2 : 0601 ; -- <0787> b = 1
    07e3 : c800 ; -- <0787> i = a+b
    07e4 : 0b00 ; -- <0787> "


    07e5 : 0002 ; -- <0787> a = i
    07e6 : 0608 ; -- <0787> b = $num_text_flag_pointers
    07e7 : e005 ; -- <0787> br lt :loop_1990
    07e8 : 07c7 ; -- <0787> "

-- :end_1990 -- = 0x07e9
    07e9 : f808 ; -- <0788> pop rtna -- end_func
    07ea : 0808 ; -- <0788> pop i -- "
    07eb : fc00 ; -- <0788> swapra = nop

-- :plan_msg -- = 0x07ec
-- " pl=\x0"
    07ec : 7020 ; -- <0791> p 
    07ed : 3d6c ; -- <0791> =l
    07ee : 0000 ; -- <0791>   

-- ######## func report_plan -- = 0x07ef
    07ef : 203e ; -- <0793> push rtna -- func report_plan
    07f0 : 03a0 ; -- <0794> a = :plan_msg
    07f1 : 07ec ; -- <0794> "
    07f2 : fba0 ; -- <0795> call :print_nt
    07f3 : 013f ; -- <0795> "
    07f4 : fc00 ; -- <0795> "
    07f5 : 4e00 ; -- <0796> ram a = $ram_plan_name -- av_ad_hi = 0
    07f6 : 528a ; -- <0796> ram a = $ram_plan_name -- av_ad_lo = 138
    07f7 : 0011 ; -- <0796> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    07f8 : 0012 ; -- <0796> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    07f9 : fba0 ; -- <0797> call :print_nt
    07fa : 013f ; -- <0797> "
    07fb : fc00 ; -- <0797> "
    07fc : f808 ; -- <0798> pop rtna -- end_func
    07fd : fc00 ; -- <0798> swapra = nop

-- ######## func jf_to_rpm -- = 0x07fe
    07fe : 203e ; -- <0800> push rtna -- func jf_to_rpm
-- pass jiffies in a.  return rpm in a.
-- resolution = 32 rpm.
    07ff : 0400 ; -- <0803> b = a
    0800 : 03a0 ; -- <0804> a = 0x5573
    0801 : 5573 ; -- <0804> "
-- = 700000 >> 5
    0802 : fba0 ; -- <0806> call :divide
    0803 : 017c ; -- <0806> "
    0804 : fc00 ; -- <0806> "
    0805 : 0001 ; -- <0807> a = b
    0806 : 0352 ; -- <0808> a = a<<4
    0807 : 0351 ; -- <0809> a = a<<1
    0808 : f808 ; -- <0810> pop rtna -- end_func
    0809 : fc00 ; -- <0810> swapra = nop

-- ######## func check_engine_stop -- = 0x080a
    080a : 203e ; -- <0812> push rtna -- func check_engine_stop
-- returns a=1 if transitioned to stop, else a=0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.

    080b : 001a ; -- <0826> a = power_duty
    080c : 0680 ; -- <0826> b = ( 0x0080 )


    080d : e003 ; -- <0826> br and0z :else_2061
    080e : 0822 ; -- <0826> "

    080f : 4e00 ; -- <0826> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0810 : 5280 ; -- <0826> ram a = $ram_rpm_valid -- av_ad_lo = 128
    0811 : 0011 ; -- <0826> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0812 : 0012 ; -- <0826> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0813 : 0000 ; -- <0826> a = a
    0814 : 0600 ; -- <0826> b = 0


    0815 : e407 ; -- <0826> bn eq :else_2069
    0816 : 0822 ; -- <0826> "

    0817 : 4e00 ; -- <0826> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0818 : 5290 ; -- <0826> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    0819 : f811 ; -- <0826> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    081a : f812 ; -- <0826> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    081b : fc00 ; -- <0826> swapra = nop
    081c : fba0 ; -- <0826> call :init_plan_stop
    081d : 02e2 ; -- <0826> "
    081e : fc00 ; -- <0826> "
    081f : 0201 ; -- <0826> a = 1
    0820 : f808 ; -- <0826> pop rtna -- rtn
    0821 : fc00 ; -- <0826> swapra = nop


-- :else_2069 -- = 0x0822

-- :end_2069 -- = 0x0822



-- :else_2061 -- = 0x0822

-- :end_2061 -- = 0x0822

    0822 : 0200 ; -- <0827> a = 0
    0823 : f808 ; -- <0828> pop rtna -- end_func
    0824 : fc00 ; -- <0828> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 g6
-- src reg 0007 g7
-- src reg 0008 rstk
-- src reg 0009 event_priority
-- src reg 000a soft_event
-- src reg 000b usage_count
-- src reg 000c ustimer0
-- src reg 000d mstimer0
-- src reg 000e mstimer1
-- src reg 000f mstimer2
-- src reg 0010 spi_data
-- src reg 0011 av_write_data
-- src reg 0012 av_read_data
-- src reg 0013 av_ad_hi
-- src reg 0014 av_ad_lo
-- src reg 0015 fduart_data
-- src reg 0016 fduart_status
-- src reg 0017 leds
-- src reg 0018 board_ctrl
-- src reg 0019 anmux_ctrl
-- src reg 001a power_duty
-- src reg 001b ign_capture_jf
-- src reg 001c ign_timeout_len_jf
-- src reg 001d puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 g6
-- dest reg 0007 g7
-- dest reg 0008 rstk
-- dest reg 0009 event_priority
-- dest reg 000a soft_event
-- dest reg 000b usage_count
-- dest reg 000c ustimer0
-- dest reg 000d mstimer0
-- dest reg 000e mstimer1
-- dest reg 000f mstimer2
-- dest reg 0010 spi_data
-- dest reg 0011 av_write_data
-- dest reg 0013 av_ad_hi
-- dest reg 0014 av_ad_lo
-- dest reg 0015 fduart_data
-- dest reg 0016 fduart_status
-- dest reg 0017 leds
-- dest reg 0018 board_ctrl
-- dest reg 0019 anmux_ctrl
-- dest reg 001a power_duty
-- dest reg 001c ign_timeout_len_jf
-- dest reg 001d puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_daq_discard_cnt
-- ram 00000018 ram_last_anmux_data
-- ram 00000028 ram_last_adc_data
-- ram 00000038 ram_adc_chn_pending
-- ram 0000003a ram_adc_junk
-- ram 0000003c ram_dial_setting
-- ram 0000003e ram_power_down_at_min
-- ram 00000040 ram_relay_hold_at_pass
-- ram 00000042 ram_minutes_cnt
-- ram 00000044 ram_seconds_cnt
-- ram 00000046 ram_mcu_usage_cnt
-- ram 00000048 ram_text_flag_pointers
-- ram 00000058 ram_next_tfp_idx
-- ram 0000005a ram_ign_history_idx
-- ram 0000005c ram_ign_history_jf
-- ram 0000007c ram_ign_avg_jf
-- ram 0000007e ram_avg_rpm
-- ram 00000080 ram_rpm_valid
-- ram 00000082 ram_ign_bad_samples
-- ram 00000084 ram_ign_fastest_jf
-- ram 00000086 ram_ign_slowest_jf
-- ram 00000088 ram_next_puff_len_us
-- ram 0000008a ram_plan_name
-- ram 0000008c ram_puff_len_func
-- ram 0000008e ram_transition_func
-- ram 00000090 ram_destroy_plan_func
-- ram 00000092 ram_next_puff_len_us
-- ram 00000094 ram_puff_count
-- ram 00000096 ram_terminal_connected
-- ram 00000098 ram_warmup_timeout_at_pass
-- ram 0000009a ram_run_ticks_remain
        
        END;
    
