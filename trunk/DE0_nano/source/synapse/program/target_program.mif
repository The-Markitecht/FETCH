
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 06e9 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.


-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.






-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 8750 RPM = about 80 jf between rising edges on chevy ignition white wire.  ignition counter noise blanking begins here in rev 627.
-- 5000 RPM = about 140 jf
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 0026 ; -- <0197> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0197>   
    0004 : 2020 ; -- <0197>   
    0005 : 2020 ; -- <0197>   
    0006 : 6120 ; -- <0197> a 
-- "       b"
    0007 : 2020 ; -- <0197>   
    0008 : 2020 ; -- <0197>   
    0009 : 2020 ; -- <0197>   
    000a : 6220 ; -- <0197> b 
-- "       i"
    000b : 2020 ; -- <0197>   
    000c : 2020 ; -- <0197>   
    000d : 2020 ; -- <0197>   
    000e : 6920 ; -- <0197> i 
-- "       j"
    000f : 2020 ; -- <0197>   
    0010 : 2020 ; -- <0197>   
    0011 : 2020 ; -- <0197>   
    0012 : 6a20 ; -- <0197> j 
-- "       x"
    0013 : 2020 ; -- <0197>   
    0014 : 2020 ; -- <0197>   
    0015 : 2020 ; -- <0197>   
    0016 : 7820 ; -- <0197> x 
-- "       y"
    0017 : 2020 ; -- <0197>   
    0018 : 2020 ; -- <0197>   
    0019 : 2020 ; -- <0197>   
    001a : 7920 ; -- <0197> y 
-- "      ga"
    001b : 2020 ; -- <0197>   
    001c : 2020 ; -- <0197>   
    001d : 2020 ; -- <0197>   
    001e : 6167 ; -- <0197> ag
-- "      gb"
    001f : 2020 ; -- <0197>   
    0020 : 2020 ; -- <0197>   
    0021 : 2020 ; -- <0197>   
    0022 : 6267 ; -- <0197> bg
-- "      pa"
    0023 : 2020 ; -- <0197>   
    0024 : 2020 ; -- <0197>   
    0025 : 2020 ; -- <0197>   
    0026 : 6170 ; -- <0197> ap
-- "      pb"
    0027 : 2020 ; -- <0197>   
    0028 : 2020 ; -- <0197>   
    0029 : 2020 ; -- <0197>   
    002a : 6270 ; -- <0197> bp
-- "      pc"
    002b : 2020 ; -- <0197>   
    002c : 2020 ; -- <0197>   
    002d : 2020 ; -- <0197>   
    002e : 6370 ; -- <0197> cp
-- "      pd"
    002f : 2020 ; -- <0197>   
    0030 : 2020 ; -- <0197>   
    0031 : 2020 ; -- <0197>   
    0032 : 6470 ; -- <0197> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0197> --
    0034 : 7372 ; -- <0197> sr
    0035 : 6b74 ; -- <0197> kt
    0036 : 2020 ; -- <0197>   
-- "  ev_pri"
    0037 : 2020 ; -- <0197>   
    0038 : 7665 ; -- <0197> ve
    0039 : 705f ; -- <0197> p_
    003a : 6972 ; -- <0197> ir
-- "softevnt"
    003b : 6f73 ; -- <0197> os
    003c : 7466 ; -- <0197> tf
    003d : 7665 ; -- <0197> ve
    003e : 746e ; -- <0197> tn
-- "   usage"
    003f : 2020 ; -- <0197>   
    0040 : 7520 ; -- <0197> u 
    0041 : 6173 ; -- <0197> as
    0042 : 6567 ; -- <0197> eg
-- "prductlo"
    0043 : 7270 ; -- <0197> rp
    0044 : 7564 ; -- <0197> ud
    0045 : 7463 ; -- <0197> tc
    0046 : 6f6c ; -- <0197> ol
-- "prducthi"
    0047 : 7270 ; -- <0197> rp
    0048 : 7564 ; -- <0197> ud
    0049 : 7463 ; -- <0197> tc
    004a : 6968 ; -- <0197> ih
-- "ustimer0"
    004b : 7375 ; -- <0197> su
    004c : 6974 ; -- <0197> it
    004d : 656d ; -- <0197> em
    004e : 3072 ; -- <0197> 0r
-- "mstimer0"
    004f : 736d ; -- <0197> sm
    0050 : 6974 ; -- <0197> it
    0051 : 656d ; -- <0197> em
    0052 : 3072 ; -- <0197> 0r
-- "mstimer1"
    0053 : 736d ; -- <0197> sm
    0054 : 6974 ; -- <0197> it
    0055 : 656d ; -- <0197> em
    0056 : 3172 ; -- <0197> 1r
-- "mstimer2"
    0057 : 736d ; -- <0197> sm
    0058 : 6974 ; -- <0197> it
    0059 : 656d ; -- <0197> em
    005a : 3272 ; -- <0197> 2r
-- "spi_data"
    005b : 7073 ; -- <0197> ps
    005c : 5f69 ; -- <0197> _i
    005d : 6164 ; -- <0197> ad
    005e : 6174 ; -- <0197> at
-- "--avwrdt"
    005f : 2f2f ; -- <0197> --
    0060 : 7661 ; -- <0197> va
    0061 : 7277 ; -- <0197> rw
    0062 : 7464 ; -- <0197> td
-- "av_rd_dt"
    0063 : 7661 ; -- <0197> va
    0064 : 725f ; -- <0197> r_
    0065 : 5f64 ; -- <0197> _d
    0066 : 7464 ; -- <0197> td
-- "av_ad_hi"
    0067 : 7661 ; -- <0197> va
    0068 : 615f ; -- <0197> a_
    0069 : 5f64 ; -- <0197> _d
    006a : 6968 ; -- <0197> ih
-- "av_ad_lo"
    006b : 7661 ; -- <0197> va
    006c : 615f ; -- <0197> a_
    006d : 5f64 ; -- <0197> _d
    006e : 6f6c ; -- <0197> ol
-- "--dromad"
    006f : 2f2f ; -- <0197> --
    0070 : 7264 ; -- <0197> rd
    0071 : 6d6f ; -- <0197> mo
    0072 : 6461 ; -- <0197> da
-- "dromdata"
    0073 : 7264 ; -- <0197> rd
    0074 : 6d6f ; -- <0197> mo
    0075 : 6164 ; -- <0197> ad
    0076 : 6174 ; -- <0197> at
-- "--uartdt"
    0077 : 2f2f ; -- <0197> --
    0078 : 6175 ; -- <0197> au
    0079 : 7472 ; -- <0197> tr
    007a : 7464 ; -- <0197> td
-- "uartstat"
    007b : 6175 ; -- <0197> au
    007c : 7472 ; -- <0197> tr
    007d : 7473 ; -- <0197> ts
    007e : 7461 ; -- <0197> ta
-- "    leds"
    007f : 2020 ; -- <0197>   
    0080 : 2020 ; -- <0197>   
    0081 : 656c ; -- <0197> el
    0082 : 7364 ; -- <0197> sd
-- "brd_ctrl"
    0083 : 7262 ; -- <0197> rb
    0084 : 5f64 ; -- <0197> _d
    0085 : 7463 ; -- <0197> tc
    0086 : 6c72 ; -- <0197> lr
-- "   anmux"
    0087 : 2020 ; -- <0197>   
    0088 : 6120 ; -- <0197> a 
    0089 : 6d6e ; -- <0197> mn
    008a : 7875 ; -- <0197> xu
-- "pwr_duty"
    008b : 7770 ; -- <0197> wp
    008c : 5f72 ; -- <0197> _r
    008d : 7564 ; -- <0197> ud
    008e : 7974 ; -- <0197> yt
-- "igntmcap"
    008f : 6769 ; -- <0197> gi
    0090 : 746e ; -- <0197> tn
    0091 : 636d ; -- <0197> cm
    0092 : 7061 ; -- <0197> pa
-- "igntmout"
    0093 : 6769 ; -- <0197> gi
    0094 : 746e ; -- <0197> tn
    0095 : 6f6d ; -- <0197> om
    0096 : 7475 ; -- <0197> tu
-- "puflenus"
    0097 : 7570 ; -- <0197> up
    0098 : 6c66 ; -- <0197> lf
    0099 : 6e65 ; -- <0197> ne
    009a : 7375 ; -- <0197> su

-- string resources
-- :boot_msg -- = 0x009b
-- "TGT\r\n\x0"
    009b : 4754 ; -- <0201> GT
    009c : 0d54 ; -- <0201>  T
    009d : 000a ; -- <0201>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x009e
-- initialize prior to polling loop, for minimum latency.
    009e : 07a0 ; -- <0006> b = :event_table
    009f : 0714 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x00a0
    00a0 : 000d ; -- <0009> a = event_priority
    00a1 : e000 ; -- <0010> br 0z :poll_events_again
    00a2 : 00a0 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    00a3 : 3400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    00a4 : d300 ; -- <0015> fetch rtna from ad0
    00a5 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    00a6 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    00a7 : 7fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    00a8 : ffc0 ; -- <0021> "
    00a9 : e00f ; -- <0021> error_halt_code 0xffc0
    00aa : 00a9 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x00ab
    00ab : 3004 ; -- <0046> push x -- func putchar_fduart

    00ac : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    00ad : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x00ae
    00ae : 041e ; -- <0053> b = fduart_status
    00af : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    00b0 : 00ae ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    00b1 : 7404 ; -- <0057> fduart_data = x
    00b2 : 100c ; -- <0058> pop x -- end_func
    00b3 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x00b4
-- wait until FIFO is populated.
    00b4 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x00b5
    00b5 : 041e ; -- <0066> b = fduart_status
    00b6 : e403 ; -- <0067> bn and0z :wait_for_busy
    00b7 : 00b5 ; -- <0067> "
    00b8 : 001d ; -- <0068> a = fduart_data
    00b9 : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x00ba
-- check for FIFO is populated.
    00ba : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    00bb : 041e ; -- <0075> b = fduart_status
    00bc : e403 ; -- <0076> bn and0z :none
    00bd : 00c0 ; -- <0076> "
    00be : 001d ; -- <0077> a = fduart_data
    00bf : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x00c0
    00c0 : 0360 ; -- <0080> a = -1
    00c1 : fc00 ; -- <0080> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00c2
-- set & enable analog muxer
    00c2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00c3 : c800 ; -- <0008> anmux_ctrl = or
    00c4 : 8734 ; -- <0008> "
    00c5 : fc00 ; -- <0008> swapra = nop

-- ######## func anmux_get_chn -- = 0x00c6
    00c6 : 0021 ; -- <0012> a = anmux_ctrl
    00c7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00c8 : c800 ; -- <0014> a = and
    00c9 : 0330 ; -- <0014> "
    00ca : fc00 ; -- <0014> swapra = nop



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00cb
-- "0123456789abcdef"
    00cb : 3130 ; -- <0050> 10
    00cc : 3332 ; -- <0050> 32
    00cd : 3534 ; -- <0050> 54
    00ce : 3736 ; -- <0050> 76
    00cf : 3938 ; -- <0050> 98
    00d0 : 6261 ; -- <0050> ba
    00d1 : 6463 ; -- <0050> dc
    00d2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00d3
    00d3 : 3004 ; -- <0054> push x -- func put4x
    00d4 : 3006 ; -- <0054> push ga -- "
    00d5 : 303e ; -- <0054> push rtna -- "
    00d6 : 13a0 ; -- <0055> x = :hexdigits
    00d7 : 00cb ; -- <0055> "

    00d8 : 1800 ; -- <0057> ga = a
    00d9 : 07a0 ; -- <0058> b = 0xF000
    00da : f000 ; -- <0058> "
    00db : c800 ; -- <0059> a = and
    00dc : 0330 ; -- <0059> "
    00dd : 0353 ; -- <0060> a = a>>4
    00de : 0353 ; -- <0061> a = a>>4
    00df : 0353 ; -- <0062> a = a>>4
    00e0 : fba0 ; -- <0063> call fetch_byte
    00e1 : 01ec ; -- <0063> "
    00e2 : fc00 ; -- <0063> "
    00e3 : fba0 ; -- <0064> putchar a
    00e4 : 00ab ; -- <0064> "
    00e5 : fc00 ; -- <0064> "

    00e6 : 0006 ; -- <0066> a = ga
    00e7 : 07a0 ; -- <0067> b = 0x0F00
    00e8 : 0f00 ; -- <0067> "
    00e9 : c800 ; -- <0068> a = and
    00ea : 0330 ; -- <0068> "
    00eb : 0353 ; -- <0069> a = a>>4
    00ec : 0353 ; -- <0070> a = a>>4
    00ed : fba0 ; -- <0071> call fetch_byte
    00ee : 01ec ; -- <0071> "
    00ef : fc00 ; -- <0071> "
    00f0 : fba0 ; -- <0072> putchar a
    00f1 : 00ab ; -- <0072> "
    00f2 : fc00 ; -- <0072> "

    00f3 : 0006 ; -- <0074> a = ga
    00f4 : 06f0 ; -- <0075> b = 0x00F0
    00f5 : c800 ; -- <0076> a = and
    00f6 : 0330 ; -- <0076> "
    00f7 : 0353 ; -- <0077> a = a>>4
    00f8 : fba0 ; -- <0078> call fetch_byte
    00f9 : 01ec ; -- <0078> "
    00fa : fc00 ; -- <0078> "
    00fb : fba0 ; -- <0079> putchar a
    00fc : 00ab ; -- <0079> "
    00fd : fc00 ; -- <0079> "

    00fe : 0006 ; -- <0081> a = ga
    00ff : 060f ; -- <0082> b = 0x000F
    0100 : c800 ; -- <0083> a = and
    0101 : 0330 ; -- <0083> "
    0102 : fba0 ; -- <0084> call fetch_byte
    0103 : 01ec ; -- <0084> "
    0104 : fc00 ; -- <0084> "
    0105 : fba0 ; -- <0085> putchar a
    0106 : 00ab ; -- <0085> "
    0107 : fc00 ; -- <0085> "

    0108 : f80c ; -- <0087> pop rtna -- end_func
    0109 : 180c ; -- <0087> pop ga -- "
    010a : 100c ; -- <0087> pop x -- "
    010b : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x010c
    010c : 3002 ; -- <0091> push i -- func get4x
    010d : 3003 ; -- <0091> push j -- "
    010e : 3004 ; -- <0091> push x -- "
    010f : 3005 ; -- <0091> push y -- "
    0110 : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    0111 : 1604 ; -- <0094> y = 4
-- :again -- = 0x0112
    0112 : fba0 ; -- <0096> getchar
    0113 : 00b4 ; -- <0096> "
    0114 : fc00 ; -- <0096> "
    0115 : 13a0 ; -- <0097> x = :hexdigits
    0116 : 00cb ; -- <0097> "
    0117 : 0a10 ; -- <0098> i = 16
    0118 : fba0 ; -- <0099> call :find_in_fetch
    0119 : 0200 ; -- <0099> "
    011a : fc00 ; -- <0099> "
    011b : 0760 ; -- <0100> b = -1
    011c : e007 ; -- <0101> br eq :fail
    011d : 0131 ; -- <0101> "
    011e : 0400 ; -- <0102> b = a
    011f : 0003 ; -- <0103> a = j
    0120 : 0352 ; -- <0104> a = a<<4
    0121 : c800 ; -- <0105> j = or
    0122 : 0f34 ; -- <0105> "
    0123 : 1360 ; -- <0106> x = -1
    0124 : c800 ; -- <0107> y = x+y
    0125 : 1720 ; -- <0107> "
    0126 : 0005 ; -- <0108> a = y
    0127 : e400 ; -- <0109> bn az :again
    0128 : 0112 ; -- <0109> "
    0129 : 0003 ; -- <0110> a = j
    012a : 0600 ; -- <0111> b = 0
    012b : f80c ; -- <0112> pop rtna -- rtn
    012c : 140c ; -- <0112> pop y -- "
    012d : 100c ; -- <0112> pop x -- "
    012e : 0c0c ; -- <0112> pop j -- "
    012f : 080c ; -- <0112> pop i -- "
    0130 : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x0131
    0131 : 0760 ; -- <0114> b = -1
    0132 : f80c ; -- <0115> pop rtna -- end_func
    0133 : 140c ; -- <0115> pop y -- "
    0134 : 100c ; -- <0115> pop x -- "
    0135 : 0c0c ; -- <0115> pop j -- "
    0136 : 080c ; -- <0115> pop i -- "
    0137 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0138
    0138 : 3002 ; -- <0121> push i -- func print_fixed
    0139 : 3003 ; -- <0121> push j -- "
    013a : 3004 ; -- <0121> push x -- "
    013b : 3005 ; -- <0121> push y -- "
    013c : 3006 ; -- <0121> push ga -- "
    013d : 303e ; -- <0121> push rtna -- "
    013e : 0800 ; -- <0122> i = a
    013f : 0e01 ; -- <0123> j = 1
    0140 : 1001 ; -- <0124> x = b
    0141 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0142
    0142 : e002 ; -- <0127> br xz :done
    0143 : 0158 ; -- <0127> "
    0144 : 1320 ; -- <0128> x = ad2
    0145 : d002 ; -- <0129> fetch ga from i
    0146 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, ga = data word.
    0147 : 0006 ; -- <0131> a = ga -- putchar ga
    0148 : fba0 ; -- <0131> putchar ga
    0149 : 00ab ; -- <0131> "
    014a : fc00 ; -- <0131> "
    014b : e002 ; -- <0132> br xz :done
    014c : 0158 ; -- <0132> "
    014d : 1320 ; -- <0133> x = ad2
    014e : 0006 ; -- <0134> a = ga
    014f : 0353 ; -- <0135> a = a>>4
    0150 : 0353 ; -- <0136> a = a>>4
    0151 : fba0 ; -- <0137> putchar a
    0152 : 00ab ; -- <0137> "
    0153 : fc00 ; -- <0137> "
    0154 : c800 ; -- <0138> i = i+j
    0155 : 0b10 ; -- <0138> "
    0156 : e00f ; -- <0139> jmp :next_word
    0157 : 0142 ; -- <0139> "
-- :done -- = 0x0158
    0158 : f80c ; -- <0141> pop rtna -- end_func
    0159 : 180c ; -- <0141> pop ga -- "
    015a : 140c ; -- <0141> pop y -- "
    015b : 100c ; -- <0141> pop x -- "
    015c : 0c0c ; -- <0141> pop j -- "
    015d : 080c ; -- <0141> pop i -- "
    015e : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x015f
    015f : 3002 ; -- <0147> push i -- func print_nt
    0160 : 3003 ; -- <0147> push j -- "
    0161 : 3004 ; -- <0147> push x -- "
    0162 : 303e ; -- <0147> push rtna -- "
    0163 : 0800 ; -- <0148> i = a
    0164 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0165
    0165 : d002 ; -- <0151> fetch x from i
    0166 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0167 : 0004 ; -- <0153> a = x
    0168 : 06ff ; -- <0154> b = 0xff
    0169 : e003 ; -- <0155> br and0z :done
    016a : 017b ; -- <0155> "
    016b : fba0 ; -- <0156> putchar a
    016c : 00ab ; -- <0156> "
    016d : fc00 ; -- <0156> "
    016e : 0004 ; -- <0157> a = x
    016f : 0353 ; -- <0158> a = a>>4
    0170 : 0353 ; -- <0159> a = a>>4
    0171 : 06ff ; -- <0160> b = 0xff
    0172 : e003 ; -- <0161> br and0z :done
    0173 : 017b ; -- <0161> "
    0174 : fba0 ; -- <0162> putchar a
    0175 : 00ab ; -- <0162> "
    0176 : fc00 ; -- <0162> "
    0177 : c800 ; -- <0163> i = i+j
    0178 : 0b10 ; -- <0163> "
    0179 : e00f ; -- <0164> jmp :next_word
    017a : 0165 ; -- <0164> "
-- :done -- = 0x017b
    017b : f80c ; -- <0166> pop rtna -- end_func
    017c : 100c ; -- <0166> pop x -- "
    017d : 0c0c ; -- <0166> pop j -- "
    017e : 080c ; -- <0166> pop i -- "
    017f : fc00 ; -- <0165> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0180
    0180 : 3002 ; -- <0004> push i -- func multiply
    0181 : 3003 ; -- <0004> push j -- "
    0182 : 3004 ; -- <0004> push x -- "
    0183 : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- x = operand a
-- y = operand b
-- i = total
-- x is shifted right so its low bit can be tested each time.
-- y is shifted left so its value (for summing) increases each time.
    0184 : 1000 ; -- <0014> x = a
    0185 : 1401 ; -- <0015> y = b
    0186 : 0a00 ; -- <0016> i = 0
-- :again -- = 0x0187
    0187 : e002 ; -- <0018> br xz :done
    0188 : 0196 ; -- <0018> "
    0189 : 0004 ; -- <0019> a = x
    018a : 0601 ; -- <0020> b = 1
    018b : e003 ; -- <0021> br and0z :skip_add
    018c : 0190 ; -- <0021> "
    018d : 0c05 ; -- <0022> j = y
    018e : c800 ; -- <0023> i = i+j
    018f : 0b10 ; -- <0023> "
-- :skip_add -- = 0x0190
    0190 : 0004 ; -- <0025> a = x
    0191 : 1350 ; -- <0026> x = a>>1
    0192 : 0005 ; -- <0027> a = y
    0193 : 1751 ; -- <0028> y = a<<1
    0194 : e00f ; -- <0029> jmp :again
    0195 : 0187 ; -- <0029> "
-- :done -- = 0x0196
    0196 : 0002 ; -- <0031> a = i
    0197 : 140c ; -- <0032> pop y -- end_func
    0198 : 100c ; -- <0032> pop x -- "
    0199 : 0c0c ; -- <0032> pop j -- "
    019a : 080c ; -- <0032> pop i -- "
    019b : fc00 ; -- <0031> swapra = nop

-- ######## func divide -- = 0x019c
    019c : 3002 ; -- <0034> push i -- func divide
    019d : 3003 ; -- <0034> push j -- "
    019e : 3004 ; -- <0034> push x -- "
    019f : 3005 ; -- <0034> push y -- "
    01a0 : 3006 ; -- <0034> push g6 -- "
    01a1 : 3007 ; -- <0034> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    01a2 : e005 ; -- <0042> br lt :zero
    01a3 : 01dd ; -- <0042> "
    01a4 : e000 ; -- <0043> br az :zero
    01a5 : 01dd ; -- <0043> "
    01a6 : 1000 ; -- <0044> x = a
--    g7 = x
    01a7 : 0001 ; -- <0046> a = b
    01a8 : e000 ; -- <0047> br az :zero
    01a9 : 01dd ; -- <0047> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    01aa : 0404 ; -- <0063> b = x
    01ab : 0a00 ; -- <0064> i = 0
    01ac : 0e01 ; -- <0065> j = 1
-- :shift_again -- = 0x01ad
    01ad : e006 ; -- <0067> br gt :shift_done
    01ae : 01b3 ; -- <0067> "
    01af : 0351 ; -- <0068> a = a<<1
    01b0 : 0b10 ; -- <0069> i = ad1
    01b1 : e00f ; -- <0070> jmp :shift_again
    01b2 : 01ad ; -- <0070> "
-- :shift_done -- = 0x01b3
    01b3 : 1b50 ; -- <0072> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    01b4 : 1e00 ; -- <0083> g7 = 0
    01b5 : 0f60 ; -- <0084> j = -1
-- :again -- = 0x01b6
    01b6 : e001 ; -- <0086> br iz :done
    01b7 : 01d4 ; -- <0086> "
    01b8 : 0006 ; -- <0087> a = g6
    01b9 : 0404 ; -- <0088> b = x
    01ba : e006 ; -- <0089> br gt :result0
    01bb : 01cc ; -- <0089> "
-- temp does fit; output a 1.
    01bc : 0007 ; -- <0091> a = g7
    01bd : 0351 ; -- <0092> a = a<<1
    01be : 0601 ; -- <0093> b = 1
    01bf : c800 ; -- <0094> g7 = or
    01c0 : 1f34 ; -- <0094> "
-- dividend = dividend - temp
    01c1 : 0006 ; -- <0096> a = g6
    01c2 : 0760 ; -- <0097> b = -1
    01c3 : c800 ; -- <0098> a = xor
    01c4 : 0338 ; -- <0098> "
    01c5 : 0601 ; -- <0099> b = 1
    01c6 : c800 ; -- <0100> y = a+b
    01c7 : 1700 ; -- <0100> "
    01c8 : c800 ; -- <0101> x = x+y
    01c9 : 1320 ; -- <0101> "
    01ca : e00f ; -- <0102> jmp :next
    01cb : 01ce ; -- <0102> "
-- :result0 -- = 0x01cc
-- temp does not fit; output a 0.
    01cc : 0007 ; -- <0105> a = g7
    01cd : 1f51 ; -- <0106> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01ce
    01ce : 0006 ; -- <0109> a = g6
    01cf : 1b50 ; -- <0110> g6 = a>>1
    01d0 : c800 ; -- <0111> i = i+j
    01d1 : 0b10 ; -- <0111> "
    01d2 : e00f ; -- <0112> jmp :again
    01d3 : 01b6 ; -- <0112> "

-- :done -- = 0x01d4
    01d4 : 0407 ; -- <0115> b = g7
    01d5 : 0004 ; -- <0116> a = x
    01d6 : 1c0c ; -- <0117> pop g7 -- rtn
    01d7 : 180c ; -- <0117> pop g6 -- "
    01d8 : 140c ; -- <0117> pop y -- "
    01d9 : 100c ; -- <0117> pop x -- "
    01da : 0c0c ; -- <0117> pop j -- "
    01db : 080c ; -- <0117> pop i -- "
    01dc : fc00 ; -- <0116> swapra = nop

-- :zero -- = 0x01dd
    01dd : 0600 ; -- <0120> b = 0
    01de : 1c0c ; -- <0121> pop g7 -- rtn
    01df : 180c ; -- <0121> pop g6 -- "
    01e0 : 140c ; -- <0121> pop y -- "
    01e1 : 100c ; -- <0121> pop x -- "
    01e2 : 0c0c ; -- <0121> pop j -- "
    01e3 : 080c ; -- <0121> pop i -- "
    01e4 : fc00 ; -- <0120> swapra = nop
    01e5 : 1c0c ; -- <0122> pop g7 -- end_func
    01e6 : 180c ; -- <0122> pop g6 -- "
    01e7 : 140c ; -- <0122> pop y -- "
    01e8 : 100c ; -- <0122> pop x -- "
    01e9 : 0c0c ; -- <0122> pop j -- "
    01ea : 080c ; -- <0122> pop i -- "
    01eb : fc00 ; -- <0121> swapra = nop


--func multiply32 {arg_a in pa} {arg_b in pb} {product_lo out pa} {product_hi out pb} {
---- unsigned 16-bit multiplication with 32-bit product.

---- ga = product_lo
---- gb = product_hi
---- pa is shifted right so its low bit can be tested each time.
---- pb is shifted left so its value (for summing) increases each time.
--FAIL:  because pb is shifting, it will be destroyed in cases where total bits > 16.
--despite supporting carry overflow, the algorithm still assumes total bits <= 16.
--also i think the loop order is backward for correctly shifting into the hi word.
--could fix that by reversing the hi word shift.
--ga = 0
--gb = 0
--:again
--br xz :done
--a = arg_a
--b = 1
--br and0z :skip_add
--a = ga
--b = arg_b
--ga = a+b
--br ad0c :carry
--a = gb
--gb = a<<1
--jmp :carry_done
--:carry
--a = gb
--a = a<<1
--b = 1
--gb = a+b
--:carry_done
--:skip_add
--a = arg_a
--arg_a = a>>1
--a = arg_b
--arg_b = a<<1
--jmp :again
--:done
--product_lo = ga
--product_hi = gb
--end_func


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01ec
    01ec : 0601 ; -- <0005> b = 1
    01ed : e003 ; -- <0006> br and0z :pick_byte_even
    01ee : 01f7 ; -- <0006> "
    01ef : 0350 ; -- <0007> a = a>>1
    01f0 : 0404 ; -- <0008> b = x
    01f1 : c800 ; -- <0009> fetch a from a+b
    01f2 : d300 ; -- <0009> "
    01f3 : 03b0 ; -- <0009> "
    01f4 : 0353 ; -- <0010> a = a>>4
    01f5 : 0353 ; -- <0011> a = a>>4
    01f6 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x01f7
    01f7 : 0350 ; -- <0014> a = a>>1
    01f8 : 0404 ; -- <0015> b = x
    01f9 : c800 ; -- <0016> fetch a from a+b
    01fa : d300 ; -- <0016> "
    01fb : 03b0 ; -- <0016> "
    01fc : 06ff ; -- <0017> b = 0xff
    01fd : c800 ; -- <0018> a = and
    01fe : 0330 ; -- <0018> "
    01ff : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x0200
    0200 : 3002 ; -- <0027> push i -- func find_in_fetch
    0201 : 3003 ; -- <0027> push j -- "
    0202 : 3005 ; -- <0027> push y -- "
    0203 : 303e ; -- <0027> push rtna -- "
    0204 : 1400 ; -- <0028> y = a
    0205 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0206
    0206 : e001 ; -- <0031> br iz :fail
    0207 : 0216 ; -- <0031> "
    0208 : 0b10 ; -- <0032> i = ad1
    0209 : 0002 ; -- <0033> a = i
    020a : fba0 ; -- <0034> call :fetch_byte
    020b : 01ec ; -- <0034> "
    020c : fc00 ; -- <0034> "
    020d : 0405 ; -- <0035> b = y
    020e : e407 ; -- <0036> bn eq :again
    020f : 0206 ; -- <0036> "
-- :found -- = 0x0210
    0210 : 0002 ; -- <0038> a = i
    0211 : f80c ; -- <0039> pop rtna -- rtn
    0212 : 140c ; -- <0039> pop y -- "
    0213 : 0c0c ; -- <0039> pop j -- "
    0214 : 080c ; -- <0039> pop i -- "
    0215 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0216
    0216 : 0360 ; -- <0041> a = -1
    0217 : f80c ; -- <0042> pop rtna -- end_func
    0218 : 140c ; -- <0042> pop y -- "
    0219 : 0c0c ; -- <0042> pop j -- "
    021a : 080c ; -- <0042> pop i -- "
    021b : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x021c
    021c : 3004 ; -- <0002> push x -- func spinwait
    021d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    021e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x021f
    021f : 13a0 ; -- <0007> x = 16666
    0220 : 411a ; -- <0007> "
    0221 : 1760 ; -- <0008> y = -1
    0222 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0223
-- use of the ad2 name overrides auto-nop here.
    0223 : 1320 ; -- <0012> x = ad2
    0224 : e402 ; -- <0013> bn xz :spinwait_inner
    0225 : 0223 ; -- <0013> "
    0226 : c800 ; -- <0014> a = a+b
    0227 : 0300 ; -- <0014> "
    0228 : e400 ; -- <0015> bn az :spinwait_outer
    0229 : 021f ; -- <0015> "
    022a : 140c ; -- <0016> pop y -- end_func
    022b : 100c ; -- <0016> pop x -- "
    022c : fc00 ; -- <0015> swapra = nop




-- ######## func fletcher16_init -- = 0x022d

    022d : 2a00 ; -- <0005> $fletcher_sum1_reg = 0
    022e : 2e00 ; -- <0006> $fletcher_sum2_reg = 0

    022f : fc00 ; -- <0008> swapra = nop

-- return the modulus(255) of a given number.
-- ######## func mod255 -- = 0x0230

-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x0230
    0230 : 06fe ; -- <0013> b = 0xfe
    0231 : e006 ; -- <0014> br gt :mod255_greater
    0232 : 0234 ; -- <0014> "
    0233 : fc00 ; -- <0014> swapra = nop
-- :mod255_greater -- = 0x0234
    0234 : 07a0 ; -- <0017> b = ([negate 0xfe])
    0235 : ff02 ; -- <0017> "
    0236 : c800 ; -- <0018> a = a+b
    0237 : 0300 ; -- <0018> "
    0238 : e00f ; -- <0019> jmp :mod255_again
    0239 : 0230 ; -- <0019> "

    023a : fc00 ; -- <0021> swapra = nop

-- accumulate a Fletcher16 checksum, given the next byte of data.
-- ######## func fletcher16_input8 -- = 0x023b
    023b : 303e ; -- <0030> push rtna -- func fletcher16_input8

    023c : 040a ; -- <0024> b = $fletcher_sum1_reg
    023d : c800 ; -- <0025> a = a+b
    023e : 0300 ; -- <0025> "
    023f : fba0 ; -- <0025> callx mod255  a+b  $fletcher_sum1_reg
    0240 : 0230 ; -- <0025> "
    0241 : fc00 ; -- <0025> "
    0242 : 2800 ; -- <0025> pc = a

    0243 : 000a ; -- <0027> a = $fletcher_sum1_reg
    0244 : 040b ; -- <0028> b = $fletcher_sum2_reg
    0245 : c800 ; -- <0029> a = a+b
    0246 : 0300 ; -- <0029> "
    0247 : fba0 ; -- <0029> callx mod255  a+b  $fletcher_sum2_reg
    0248 : 0230 ; -- <0029> "
    0249 : fc00 ; -- <0029> "
    024a : 2c00 ; -- <0029> pd = a

    024b : f80c ; -- <0031> pop rtna -- func fletcher16_input8
    024c : fc00 ; -- <0031> swapra = nop

-- accumulate a Fletcher16 checksum, given the next word of data.
-- ######## func fletcher16_input16 -- = 0x024d
    024d : 3002 ; -- <0039> push i -- func fletcher16_input16
    024e : 303e ; -- <0039> push rtna -- "

    024f : 0b53 ; -- <0034> i = a>>4
    0250 : 06ff ; -- <0035> b = 0xff
    0251 : c800 ; -- <0036> a = and
    0252 : 0330 ; -- <0036> "
    0253 : fba0 ; -- <0036> callx fletcher16_input8  and
    0254 : 023b ; -- <0036> "
    0255 : fc00 ; -- <0036> "
    0256 : 0002 ; -- <0037> a = i
    0257 : 0353 ; -- <0038> a = a>>4
    0258 : fba0 ; -- <0038> callx fletcher16_input8  a>>4
    0259 : 023b ; -- <0038> "
    025a : fc00 ; -- <0038> "

    025b : f80c ; -- <0040> pop rtna -- func fletcher16_input16
    025c : 080c ; -- <0040> pop i -- "
    025d : fc00 ; -- <0040> swapra = nop

-- return the combined 16-bit result of Fletcher16 checksum.
-- ######## func fletcher16_result -- = 0x025e

    025e : 000b ; -- <0043> a = $fletcher_sum2_reg
    025f : 0352 ; -- <0044> a = a<<4
    0260 : 0352 ; -- <0045> a = a<<4
    0261 : 040a ; -- <0046> b = $fletcher_sum1_reg
    0262 : c800 ; -- <0047> result = or
    0263 : 0334 ; -- <0047> "
    0264 : fc00 ; -- <0046> swapra = nop

    0265 : fc00 ; -- <0049> swapra = nop











-- ######## func init_drom -- = 0x0266
    0266 : 3002 ; -- <0040> push i -- func init_drom

-- copy entire ROM content to a shadow area in RAM.
    0267 : 67a0 ; -- <0034> av_ad_hi = ($drom_shadow_base >> 16)
    0268 : 0100 ; -- <0034> "
    0269 : 0a00 ; -- <0039> i = 0
-- :loop_617 -- = 0x026a

    026a : 6c02 ; -- <0035> drom_ad = i
    026b : 6802 ; -- <0036> av_ad_lo = i
    026c : 5c1c ; -- <0037> av_write_data = drom_data


    026d : 0002 ; -- <0039> a = i
    026e : 0601 ; -- <0039> b = 1
    026f : c800 ; -- <0039> i = a+b
    0270 : 0b00 ; -- <0039> "


    0271 : 0002 ; -- <0039> a = i
    0272 : 07a0 ; -- <0039> b = $drom_shadow_len_bytes
    0273 : 0b48 ; -- <0039> "
    0274 : e005 ; -- <0039> br lt :loop_617
    0275 : 026a ; -- <0039> "

-- :end_617 -- = 0x0276

    0276 : 080c ; -- <0041> pop i -- func init_drom
    0277 : fc00 ; -- <0041> swapra = nop

-- ######## func load_afrc_cmd -- = 0x0278
    0278 : 3002 ; -- <0076> push i -- func load_afrc_cmd
    0279 : 3005 ; -- <0076> push y -- "
    027a : 303e ; -- <0076> push rtna -- "

-- loads 1 row only.

    027b : fba0 ; -- <0045> callx fletcher16_init
    027c : 022d ; -- <0045> "
    027d : fc00 ; -- <0045> "
-- expect valid row index.
    027e : fba0 ; -- <0047> call  get4x
    027f : 010c ; -- <0047> "
    0280 : fc00 ; -- <0047> "
    0281 : 1400 ; -- <0048> y = a
    0282 : fba0 ; -- <0049> callx fletcher16_input16  a
    0283 : 024d ; -- <0049> "
    0284 : fc00 ; -- <0049> "

    0285 : 0005 ; -- <0070> a = y
    0286 : 0640 ; -- <0070> b = 64

    0287 : e405 ; -- <0050> bn lt :else_647
    0288 : 02ab ; -- <0050> "

-- set RAM address to start of given row.  call struct_read for its side effect on Avalon address regs.
    0289 : 0005 ; -- <0052> a = y
    028a : 0610 ; -- <0053> b = $afrc_rpm_cols
    028b : c800 ; -- <0054> nop
    028c : c800 ; -- <0055> nop
    028d : c800 ; -- <0056> nop
    028e : c800 ; -- <0057> nop
    028f : 0410 ; -- <0058> b = product_lo

    0290 : 0351 ; -- <0059> a = a<<1
    0291 : 0600 ; -- <0059> b = 0
    0292 : 67a0 ; -- <0059> av_ad_hi = 256
    0293 : 0100 ; -- <0059> "
    0294 : 6b00 ; -- <0059> av_ad_lo = ad0
    0295 : 0417 ; -- <0059> b = av_begin_read
    0296 : 0418 ; -- <0059> b = av_read_data


-- expect each cell value back-to-back.
    0297 : 0a00 ; -- <0069> i = 0
-- :loop_663 -- = 0x0298

    0298 : fba0 ; -- <0062> call  get4x
    0299 : 010c ; -- <0062> "
    029a : fc00 ; -- <0062> "
    029b : 5c00 ; -- <0063> av_write_data = a
    029c : fba0 ; -- <0064> callx fletcher16_input16  a
    029d : 024d ; -- <0064> "
    029e : fc00 ; -- <0064> "
    029f : 001a ; -- <0065> a = av_ad_lo
    02a0 : 0602 ; -- <0066> b = 2
    02a1 : c800 ; -- <0067> av_ad_lo = a+b
    02a2 : 6b00 ; -- <0067> "


    02a3 : 0002 ; -- <0069> a = i
    02a4 : 0601 ; -- <0069> b = 1
    02a5 : c800 ; -- <0069> i = a+b
    02a6 : 0b00 ; -- <0069> "


    02a7 : 0002 ; -- <0069> a = i
    02a8 : 0610 ; -- <0069> b = $afrc_rpm_cols
    02a9 : e005 ; -- <0069> br lt :loop_663
    02aa : 0298 ; -- <0069> "

-- :end_663 -- = 0x02ab


-- reply with checksum
    02ab : fba0 ; -- <0073> callx fletcher16_result a
    02ac : 025e ; -- <0073> "
    02ad : fc00 ; -- <0073> "
    02ae : fba0 ; -- <0074> call put4x
    02af : 00d3 ; -- <0074> "
    02b0 : fc00 ; -- <0074> "
    02b1 : 020d ; -- <0075> a = 13 -- puteol
    02b2 : fba0 ; -- <0075> puteol
    02b3 : 00ab ; -- <0075> "
    02b4 : fc00 ; -- <0075> "
    02b5 : 020a ; -- <0075> a = 10 -- puteol
    02b6 : fba0 ; -- <0075> puteol
    02b7 : 00ab ; -- <0075> "
    02b8 : fc00 ; -- <0075> "

    02b9 : f80c ; -- <0077> pop rtna -- func load_afrc_cmd
    02ba : 140c ; -- <0077> pop y -- "
    02bb : 080c ; -- <0077> pop i -- "
    02bc : fc00 ; -- <0077> swapra = nop

-- ######## func load_row_cmd -- = 0x02bd
    02bd : 3002 ; -- <0098> push i -- func load_row_cmd
    02be : 303e ; -- <0098> push rtna -- "

-- loads 1 row of data having the given number of words.
-- start of row address must be already loaded into av_ad_hi and av_ad_lo.

    02bf : fba0 ; -- <0082> callx fletcher16_init
    02c0 : 022d ; -- <0082> "
    02c1 : fc00 ; -- <0082> "

-- expect each cell value back-to-back.
    02c2 : 0a00 ; -- <0092> i = 0
-- :loop_706 -- = 0x02c3

    02c3 : fba0 ; -- <0085> call  get4x
    02c4 : 010c ; -- <0085> "
    02c5 : fc00 ; -- <0085> "
    02c6 : 5c00 ; -- <0086> av_write_data = a
    02c7 : fba0 ; -- <0087> callx fletcher16_input16  a
    02c8 : 024d ; -- <0087> "
    02c9 : fc00 ; -- <0087> "
    02ca : 001a ; -- <0088> a = av_ad_lo
    02cb : 0602 ; -- <0089> b = 2
    02cc : c800 ; -- <0090> av_ad_lo = a+b
    02cd : 6b00 ; -- <0090> "


    02ce : 0002 ; -- <0092> a = i
    02cf : 0601 ; -- <0092> b = 1
    02d0 : c800 ; -- <0092> i = a+b
    02d1 : 0b00 ; -- <0092> "


    02d2 : 0002 ; -- <0092> a = i
    02d3 : 0408 ; -- <0092> b = num_words
    02d4 : e005 ; -- <0092> br lt :loop_706
    02d5 : 02c3 ; -- <0092> "

-- :end_706 -- = 0x02d6

-- reply with checksum
    02d6 : fba0 ; -- <0095> callx fletcher16_result a
    02d7 : 025e ; -- <0095> "
    02d8 : fc00 ; -- <0095> "
    02d9 : fba0 ; -- <0096> call put4x
    02da : 00d3 ; -- <0096> "
    02db : fc00 ; -- <0096> "
    02dc : 020d ; -- <0097> a = 13 -- puteol
    02dd : fba0 ; -- <0097> puteol
    02de : 00ab ; -- <0097> "
    02df : fc00 ; -- <0097> "
    02e0 : 020a ; -- <0097> a = 10 -- puteol
    02e1 : fba0 ; -- <0097> puteol
    02e2 : 00ab ; -- <0097> "
    02e3 : fc00 ; -- <0097> "

    02e4 : f80c ; -- <0099> pop rtna -- func load_row_cmd
    02e5 : 080c ; -- <0099> pop i -- "
    02e6 : fc00 ; -- <0099> swapra = nop

-- ######## func load_rpm_ref_cmd -- = 0x02e7
    02e7 : 303e ; -- <0104> push rtna -- func load_rpm_ref_cmd

    02e8 : 0600 ; -- <0101> b = 0

    02e9 : 0351 ; -- <0102> a = a<<1
    02ea : 07a0 ; -- <0102> b = 2560
    02eb : 0a00 ; -- <0102> "
    02ec : 67a0 ; -- <0102> av_ad_hi = 256
    02ed : 0100 ; -- <0102> "
    02ee : 6b00 ; -- <0102> av_ad_lo = ad0
    02ef : 0417 ; -- <0102> b = av_begin_read
    02f0 : 0418 ; -- <0102> b = av_read_data

    02f1 : 2210 ; -- <0103> pa = 16
    02f2 : fba0 ; -- <0103> callx load_row_cmd $rpm_ref_num_cells
    02f3 : 02bd ; -- <0103> "
    02f4 : fc00 ; -- <0103> "

    02f5 : f80c ; -- <0105> pop rtna -- func load_rpm_ref_cmd
    02f6 : fc00 ; -- <0105> swapra = nop

-- ######## func load_maf_ref_cmd -- = 0x02f7
    02f7 : 303e ; -- <0110> push rtna -- func load_maf_ref_cmd

    02f8 : 0600 ; -- <0107> b = 0

    02f9 : 0351 ; -- <0108> a = a<<1
    02fa : 07a0 ; -- <0108> b = 2048
    02fb : 0800 ; -- <0108> "
    02fc : 67a0 ; -- <0108> av_ad_hi = 256
    02fd : 0100 ; -- <0108> "
    02fe : 6b00 ; -- <0108> av_ad_lo = ad0
    02ff : 0417 ; -- <0108> b = av_begin_read
    0300 : 0418 ; -- <0108> b = av_read_data

    0301 : 23a0 ; -- <0109> pa = 256
    0302 : 0100 ; -- <0109> "
    0303 : fba0 ; -- <0109> callx load_row_cmd $maf_ref_num_cells
    0304 : 02bd ; -- <0109> "
    0305 : fc00 ; -- <0109> "

    0306 : f80c ; -- <0111> pop rtna -- func load_maf_ref_cmd
    0307 : fc00 ; -- <0111> swapra = nop

-- ######## func load_block_temp_scale_cmd -- = 0x0308
    0308 : 303e ; -- <0116> push rtna -- func load_block_temp_scale_cmd

    0309 : 0600 ; -- <0113> b = 0

    030a : 0351 ; -- <0114> a = a<<1
    030b : 07a0 ; -- <0114> b = 2592
    030c : 0a20 ; -- <0114> "
    030d : 67a0 ; -- <0114> av_ad_hi = 256
    030e : 0100 ; -- <0114> "
    030f : 6b00 ; -- <0114> av_ad_lo = ad0
    0310 : 0417 ; -- <0114> b = av_begin_read
    0311 : 0418 ; -- <0114> b = av_read_data

    0312 : 2240 ; -- <0115> pa = 64
    0313 : fba0 ; -- <0115> callx load_row_cmd $block_temp_num_cells
    0314 : 02bd ; -- <0115> "
    0315 : fc00 ; -- <0115> "

    0316 : f80c ; -- <0117> pop rtna -- func load_block_temp_scale_cmd
    0317 : fc00 ; -- <0117> swapra = nop

-- ######## func load_block_temp_map_cmd -- = 0x0318
    0318 : 303e ; -- <0122> push rtna -- func load_block_temp_map_cmd

    0319 : 0600 ; -- <0119> b = 0

    031a : 0351 ; -- <0120> a = a<<1
    031b : 07a0 ; -- <0120> b = 2720
    031c : 0aa0 ; -- <0120> "
    031d : 67a0 ; -- <0120> av_ad_hi = 256
    031e : 0100 ; -- <0120> "
    031f : 6b00 ; -- <0120> av_ad_lo = ad0
    0320 : 0417 ; -- <0120> b = av_begin_read
    0321 : 0418 ; -- <0120> b = av_read_data

    0322 : 2240 ; -- <0121> pa = 64
    0323 : fba0 ; -- <0121> callx load_row_cmd $block_temp_num_cells
    0324 : 02bd ; -- <0121> "
    0325 : fc00 ; -- <0121> "

    0326 : f80c ; -- <0123> pop rtna -- func load_block_temp_map_cmd
    0327 : fc00 ; -- <0123> swapra = nop

-- ######## func load_afterstart_ref_cmd -- = 0x0328
    0328 : 303e ; -- <0128> push rtna -- func load_afterstart_ref_cmd

    0329 : 0600 ; -- <0125> b = 0

    032a : 0351 ; -- <0126> a = a<<1
    032b : 07a0 ; -- <0126> b = 2848
    032c : 0b20 ; -- <0126> "
    032d : 67a0 ; -- <0126> av_ad_hi = 256
    032e : 0100 ; -- <0126> "
    032f : 6b00 ; -- <0126> av_ad_lo = ad0
    0330 : 0417 ; -- <0126> b = av_begin_read
    0331 : 0418 ; -- <0126> b = av_read_data

    0332 : 220a ; -- <0127> pa = 10
    0333 : fba0 ; -- <0127> callx load_row_cmd $afterstart_num_cells
    0334 : 02bd ; -- <0127> "
    0335 : fc00 ; -- <0127> "

    0336 : f80c ; -- <0129> pop rtna -- func load_afterstart_ref_cmd
    0337 : fc00 ; -- <0129> swapra = nop

-- ######## func load_afterstart_map_cmd -- = 0x0338
    0338 : 303e ; -- <0134> push rtna -- func load_afterstart_map_cmd

    0339 : 0600 ; -- <0131> b = 0

    033a : 0351 ; -- <0132> a = a<<1
    033b : 07a0 ; -- <0132> b = 2868
    033c : 0b34 ; -- <0132> "
    033d : 67a0 ; -- <0132> av_ad_hi = 256
    033e : 0100 ; -- <0132> "
    033f : 6b00 ; -- <0132> av_ad_lo = ad0
    0340 : 0417 ; -- <0132> b = av_begin_read
    0341 : 0418 ; -- <0132> b = av_read_data

    0342 : 220a ; -- <0133> pa = 10
    0343 : fba0 ; -- <0133> callx load_row_cmd $afterstart_num_cells
    0344 : 02bd ; -- <0133> "
    0345 : fc00 ; -- <0133> "

    0346 : f80c ; -- <0135> pop rtna -- func load_afterstart_map_cmd
    0347 : fc00 ; -- <0135> swapra = nop




-- when commands share a common suffix, the longer command must come FIRST here.
-- :cmd_table -- = 0x0348
-- "  hello"
    0348 : 2020 ; -- <0006>   
    0349 : 6568 ; -- <0006> eh
    034a : 6c6c ; -- <0006> ll
    034b : 006f ; -- <0006>  o
    034c : 040f ; -- <0007> ([label hello_cmd])
-- "  plstp"
    034d : 2020 ; -- <0008>   
    034e : 6c70 ; -- <0008> lp
    034f : 7473 ; -- <0008> ts
    0350 : 0070 ; -- <0008>  p
    0351 : 0413 ; -- <0009> ([label set_plan_stop_cmd])
-- "   plcr"
    0352 : 2020 ; -- <0010>   
    0353 : 7020 ; -- <0010> p 
    0354 : 636c ; -- <0010> cl
    0355 : 0072 ; -- <0010>  r
    0356 : 041e ; -- <0011> ([label set_plan_crank_cmd])
--"   plwm"
--([label set_plan_warmup_cmd])
-- "   plrn"
    0357 : 2020 ; -- <0014>   
    0358 : 7020 ; -- <0014> p 
    0359 : 726c ; -- <0014> rl
    035a : 006e ; -- <0014>  n
    035b : 0429 ; -- <0015> ([label set_plan_run_cmd])
--"   plln"
--([label set_plan_learn_cmd])
-- "   afrc"
    035c : 2020 ; -- <0018>   
    035d : 6120 ; -- <0018> a 
    035e : 7266 ; -- <0018> rf
    035f : 0063 ; -- <0018>  c
    0360 : 0696 ; -- <0019> ([label dump_afrc_cmd])
-- " ldafrc"
    0361 : 6c20 ; -- <0020> l 
    0362 : 6164 ; -- <0020> ad
    0363 : 7266 ; -- <0020> rf
    0364 : 0063 ; -- <0020>  c
    0365 : 0278 ; -- <0021> ([label load_afrc_cmd])
-- "  ldrpm"
    0366 : 2020 ; -- <0022>   
    0367 : 646c ; -- <0022> dl
    0368 : 7072 ; -- <0022> pr
    0369 : 006d ; -- <0022>  m
    036a : 02e7 ; -- <0023> ([label load_rpm_ref_cmd])
-- "  ldmaf"
    036b : 2020 ; -- <0024>   
    036c : 646c ; -- <0024> dl
    036d : 616d ; -- <0024> am
    036e : 0066 ; -- <0024>  f
    036f : 02f7 ; -- <0025> ([label load_maf_ref_cmd])
-- "ldbtsc"
    0370 : 646c ; -- <0026> dl
    0371 : 7462 ; -- <0026> tb
    0372 : 6373 ; -- <0026> cs
    0373 : 0308 ; -- <0027> ([label load_block_temp_scale_cmd])
-- "ldbtmap"
    0374 : 646c ; -- <0028> dl
    0375 : 7462 ; -- <0028> tb
    0376 : 616d ; -- <0028> am
    0377 : 0070 ; -- <0028>  p
    0378 : 0318 ; -- <0029> ([label load_block_temp_map_cmd])
-- "ldastref"
    0379 : 646c ; -- <0030> dl
    037a : 7361 ; -- <0030> sa
    037b : 7274 ; -- <0030> rt
    037c : 6665 ; -- <0030> fe
    037d : 0328 ; -- <0031> ([label load_afterstart_ref_cmd])
-- "ldastmap"
    037e : 646c ; -- <0032> dl
    037f : 7361 ; -- <0032> sa
    0380 : 6d74 ; -- <0032> mt
    0381 : 7061 ; -- <0032> pa
    0382 : 0338 ; -- <0033> ([label load_afterstart_map_cmd])
-- "      ,"
    0383 : 2020 ; -- <0034>   
    0384 : 2020 ; -- <0034>   
    0385 : 2020 ; -- <0034>   
    0386 : 002c ; -- <0034>  ,
    0387 : 04db ; -- <0035> ([label trim_lean_cmd])
-- "      ."
    0388 : 2020 ; -- <0036>   
    0389 : 2020 ; -- <0036>   
    038a : 2020 ; -- <0036>   
    038b : 002e ; -- <0036>  .
    038c : 04ec ; -- <0037> ([label trim_rich_cmd])
-- "      \["
    038d : 2020 ; -- <0038>   
    038e : 2020 ; -- <0038>   
    038f : 2020 ; -- <0038>   
    0390 : 005b ; -- <0038>  [
    0391 : 04fd ; -- <0039> ([label trim_2lean_cmd])
-- "      \]"
    0392 : 2020 ; -- <0040>   
    0393 : 2020 ; -- <0040>   
    0394 : 2020 ; -- <0040>   
    0395 : 005d ; -- <0040>  ]
    0396 : 050e ; -- <0041> ([label trim_2rich_cmd])
-- "\x0\x0"
    0397 : 0000 ; -- <0042>   


-- ######## func parse_key -- = 0x0398
    0398 : 3002 ; -- <0060> push i -- func parse_key
    0399 : 3004 ; -- <0060> push x -- "
    039a : 3005 ; -- <0060> push y -- "
    039b : 303e ; -- <0060> push rtna -- "

-- memorize into ram_key_buf, pushing down existing content.
    039c : 1008 ; -- <0047> x = key
    039d : 0a07 ; -- <0056> i = $key_buf_max
-- :loop_925 -- = 0x039e

    039e : 0002 ; -- <0048> a = i

    039f : 0351 ; -- <0049> a = a<<1
    03a0 : 0600 ; -- <0049> b = 0
    03a1 : 6600 ; -- <0049> av_ad_hi = 0
    03a2 : 6b00 ; -- <0049> av_ad_lo = ad0
    03a3 : 0417 ; -- <0049> b = av_begin_read
    03a4 : 0418 ; -- <0049> b = av_read_data

    03a5 : 1401 ; -- <0050> y = b
    03a6 : 0002 ; -- <0051> a = i
    03a7 : 0404 ; -- <0052> b = x

    03a8 : 0351 ; -- <0053> a = a<<1
    03a9 : 3001 ; -- <0053> push b -- push b
    03aa : 0600 ; -- <0053> b = 0
    03ab : 6600 ; -- <0053> av_ad_hi = 0
    03ac : 6b00 ; -- <0053> av_ad_lo = ad0
    03ad : 5c0c ; -- <0053> pop av_write_data -- pop av_write_data

    03ae : 1005 ; -- <0054> x = y


    03af : 0002 ; -- <0056> a = i
    03b0 : 0600 ; -- <0056> b = 0
    03b1 : e007 ; -- <0056> br eq :end_925
    03b2 : 03bb ; -- <0056> "


    03b3 : 0002 ; -- <0056> a = i
    03b4 : 0760 ; -- <0056> b = -1
    03b5 : c800 ; -- <0056> i = a+b
    03b6 : 0b00 ; -- <0056> "


    03b7 : 0002 ; -- <0056> a = i
    03b8 : 0600 ; -- <0056> b = 0
    03b9 : e405 ; -- <0056> bn lt :loop_925
    03ba : 039e ; -- <0056> "

-- :end_925 -- = 0x03bb

    03bb : 0008 ; -- <0059> a = key
    03bc : 060d ; -- <0059> b = 13

    03bd : e407 ; -- <0057> bn eq :else_957
    03be : 03c2 ; -- <0057> "

    03bf : fba0 ; -- <0058> callx  parse_command
    03c0 : 03c9 ; -- <0058> "
    03c1 : fc00 ; -- <0058> "


    03c2 : f80c ; -- <0061> pop rtna -- func parse_key
    03c3 : 140c ; -- <0061> pop y -- "
    03c4 : 100c ; -- <0061> pop x -- "
    03c5 : 080c ; -- <0061> pop i -- "
    03c6 : fc00 ; -- <0061> swapra = nop

-- :cmd_ack_msg -- = 0x03c7
-- "OK\x0"
    03c7 : 4b4f ; -- <0063> KO
    03c8 : 0000 ; -- <0063>   

-- ######## func parse_command -- = 0x03c9
    03c9 : 3002 ; -- <0104> push i -- func parse_command
    03ca : 3004 ; -- <0104> push x -- "
    03cb : 3005 ; -- <0104> push y -- "
    03cc : 303e ; -- <0104> push rtna -- "

    03cd : 13a0 ; -- <0066> x = :cmd_table
    03ce : 0348 ; -- <0066> "
-- :next_cmd -- = 0x03cf
    03cf : d004 ; -- <0068> fetch a from x
    03d0 : 03b0 ; -- <0068> "
    03d1 : e000 ; -- <0069> br az :done
    03d2 : 040a ; -- <0069> "

    03d3 : 0a00 ; -- <0085> i = 0
-- :loop_979 -- = 0x03d4

    03d4 : 0002 ; -- <0071> a = i
    03d5 : fba0 ; -- <0072> call :fetch_byte
    03d6 : 01ec ; -- <0072> "
    03d7 : fc00 ; -- <0072> "
    03d8 : 1400 ; -- <0073> y = a
    03d9 : 0620 ; -- <0074> b = 32 -- asc b = " "

    03da : 0000 ; -- <0083> a = a
    03db : 0401 ; -- <0083> b = b

    03dc : e007 ; -- <0075> br eq :else_988
    03dd : 03eb ; -- <0075> "

    03de : 062a ; -- <0076> b = 42 -- asc b = "*"
    03df : e007 ; -- <0077> br eq :matched
    03e0 : 03f3 ; -- <0077> "
-- parameter character.  succeed early.
    03e1 : 0002 ; -- <0079> a = i

    03e2 : 0351 ; -- <0080> a = a<<1
    03e3 : 0600 ; -- <0080> b = 0
    03e4 : 6600 ; -- <0080> av_ad_hi = 0
    03e5 : 6b00 ; -- <0080> av_ad_lo = ad0
    03e6 : 0417 ; -- <0080> b = av_begin_read
    03e7 : 0418 ; -- <0080> b = av_read_data

    03e8 : 0005 ; -- <0081> a = y
    03e9 : e407 ; -- <0082> bn eq :no_match
    03ea : 03ff ; -- <0082> "



    03eb : 0002 ; -- <0085> a = i
    03ec : 0601 ; -- <0085> b = 1
    03ed : c800 ; -- <0085> i = a+b
    03ee : 0b00 ; -- <0085> "


    03ef : 0002 ; -- <0085> a = i
    03f0 : 0607 ; -- <0085> b = $key_buf_max
    03f1 : e005 ; -- <0085> br lt :loop_979
    03f2 : 03d4 ; -- <0085> "

-- :end_979 -- = 0x03f3

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x03f3
    03f3 : 23a0 ; -- <0089> pa = :cmd_ack_msg
    03f4 : 03c7 ; -- <0089> "
    03f5 : fba0 ; -- <0089> callx  set_text_flag  :cmd_ack_msg
    03f6 : 0ac4 ; -- <0089> "
    03f7 : fc00 ; -- <0089> "
    03f8 : 1604 ; -- <0090> y = ($key_buf_len / 2)
    03f9 : c800 ; -- <0091> fetch rtna from x+y
    03fa : d320 ; -- <0091> "
    03fb : fbb0 ; -- <0091> "
    03fc : fc00 ; -- <0092> swapra = nop
    03fd : e00f ; -- <0094> jmp :done
    03fe : 040a ; -- <0094> "

-- :no_match -- = 0x03ff
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    03ff : 6600 ; -- <0098> ram a = $ram_terminal_connected -- av_ad_hi = 0
    0400 : 6a94 ; -- <0098> ram a = $ram_terminal_connected -- av_ad_lo = 148
    0401 : 0017 ; -- <0098> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    0402 : 0018 ; -- <0098> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    0403 : e000 ; -- <0099> br az :done
    0404 : 040a ; -- <0099> "

    0405 : 1605 ; -- <0101> y = (($key_buf_len / 2) + 1)
    0406 : c800 ; -- <0102> x = x+y
    0407 : 1320 ; -- <0102> "
    0408 : e00f ; -- <0103> jmp :next_cmd
    0409 : 03cf ; -- <0103> "
-- :done -- = 0x040a

    040a : f80c ; -- <0106> pop rtna -- func parse_command
    040b : 140c ; -- <0106> pop y -- "
    040c : 100c ; -- <0106> pop x -- "
    040d : 080c ; -- <0106> pop i -- "
    040e : fc00 ; -- <0106> swapra = nop

-- ######## func hello_cmd -- = 0x040f

    040f : 6600 ; -- <0108> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    0410 : 6a94 ; -- <0108> ram $ram_terminal_connected = 1 -- av_ad_lo = 148
    0411 : 5e01 ; -- <0108> ram $ram_terminal_connected = 1 -- av_write_data = 1

    0412 : fc00 ; -- <0110> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x0413
    0413 : 303e ; -- <0115> push rtna -- func set_plan_stop_cmd

    0414 : 6600 ; -- <0112> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0415 : 6a8e ; -- <0112> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0416 : f817 ; -- <0112> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0417 : f818 ; -- <0112> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0418 : fc00 ; -- <0113> swapra = nop
    0419 : fba0 ; -- <0115> callx  init_plan_stop
    041a : 0436 ; -- <0115> "
    041b : fc00 ; -- <0115> "

    041c : f80c ; -- <0117> pop rtna -- func set_plan_stop_cmd
    041d : fc00 ; -- <0117> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x041e
    041e : 303e ; -- <0122> push rtna -- func set_plan_crank_cmd

    041f : 6600 ; -- <0119> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0420 : 6a8e ; -- <0119> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0421 : f817 ; -- <0119> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0422 : f818 ; -- <0119> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0423 : fc00 ; -- <0120> swapra = nop
    0424 : fba0 ; -- <0122> callx  init_plan_crank
    0425 : 0475 ; -- <0122> "
    0426 : fc00 ; -- <0122> "

    0427 : f80c ; -- <0124> pop rtna -- func set_plan_crank_cmd
    0428 : fc00 ; -- <0124> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x0429
    0429 : 303e ; -- <0129> push rtna -- func set_plan_run_cmd

    042a : 6600 ; -- <0126> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    042b : 6a8e ; -- <0126> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    042c : f817 ; -- <0126> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    042d : f818 ; -- <0126> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    042e : fc00 ; -- <0127> swapra = nop
    042f : fba0 ; -- <0129> callx  init_plan_run
    0430 : 0520 ; -- <0129> "
    0431 : fc00 ; -- <0129> "

    0432 : f80c ; -- <0131> pop rtna -- func set_plan_run_cmd
    0433 : fc00 ; -- <0131> swapra = nop


-- :plan_name_stop -- = 0x0434
-- "STP\x0"
    0434 : 5453 ; -- <0002> TS
    0435 : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x0436
    0436 : 303e ; -- <0023> push rtna -- func init_plan_stop

-- set up the stop plan.
    0437 : fba0 ; -- <0006> callx  clear_ign_history
    0438 : 07b1 ; -- <0006> "
    0439 : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    043a : 6600 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    043b : 6a82 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 130
    043c : 5fa0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    043d : 025b ; -- <0008> "
    043e : 6600 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    043f : 6a84 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    0440 : 5fa0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    0441 : 36b0 ; -- <0009> "
    0442 : 93a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    0443 : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    0444 : 6600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0445 : 6a90 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    0446 : 5e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    0447 : 9600 ; -- <0016> puff_len_us = 0

-- memorize state.
    0448 : 6600 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    0449 : 6a88 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 136
    044a : 5fa0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    044b : 0434 ; -- <0019> "
    044c : 6600 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    044d : 6a8a ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 138
    044e : 5fa0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    044f : 045b ; -- <0020> "
    0450 : 6600 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    0451 : 6a8c ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 140
    0452 : 5fa0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    0453 : 045f ; -- <0021> "
    0454 : 6600 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0455 : 6a8e ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 142
    0456 : 5fa0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0457 : 045a ; -- <0022> "

    0458 : f80c ; -- <0024> pop rtna -- func init_plan_stop
    0459 : fc00 ; -- <0024> swapra = nop

-- ######## func destroy_plan_stop -- = 0x045a


    045a : fc00 ; -- <0027> swapra = nop

-- ######## func puff_len_stop -- = 0x045b

    045b : 6600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    045c : 6a90 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 144
    045d : 5e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0

    045e : fc00 ; -- <0031> swapra = nop

-- ######## func leave_stop -- = 0x045f
    045f : 303e ; -- <0044> push rtna -- func leave_stop

-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    0460 : 0022 ; -- <0035> a = power_duty
    0461 : 0680 ; -- <0036> b = $ign_switch_off_mask
    0462 : e403 ; -- <0037> bn and0z :stay
    0463 : 0471 ; -- <0037> "
    0464 : 6600 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    0465 : 6a80 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 128
    0466 : 0017 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0467 : 0018 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0468 : 0608 ; -- <0039> b = ($ign_history_len / 2)
    0469 : e006 ; -- <0040> br gt :stay
    046a : 0471 ; -- <0040> "
    046b : fba0 ; -- <0041> callx  destroy_plan_stop
    046c : 045a ; -- <0041> "
    046d : fc00 ; -- <0041> "
    046e : fba0 ; -- <0042> callx  init_plan_crank
    046f : 0475 ; -- <0042> "
    0470 : fc00 ; -- <0042> "
-- :stay -- = 0x0471

    0471 : f80c ; -- <0045> pop rtna -- func leave_stop
    0472 : fc00 ; -- <0045> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 10000 to 20000 us length in about 5 seconds.

-- :plan_name_crank -- = 0x0473
-- "CR\x0"
    0473 : 5243 ; -- <0011> RC
    0474 : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x0475
    0475 : 303e ; -- <0033> push rtna -- func init_plan_crank

-- set up the crank plan.
    0476 : 6600 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    0477 : 6a92 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 146
    0478 : 5e00 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0479 : 6600 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    047a : 6a82 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 130
    047b : 5e57 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    047c : 6600 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    047d : 6a84 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 132
    047e : 5fa0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    047f : 36b0 ; -- <0018> "
    0480 : 93a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    0481 : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    0482 : 6600 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    0483 : 6a90 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 144
    0484 : 5fa0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 12000
    0485 : 2ee0 ; -- <0023> "
    0486 : 97a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    0487 : 2ee0 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    0488 : fba0 ; -- <0026> callx  clear_ign_history
    0489 : 07b1 ; -- <0026> "
    048a : fc00 ; -- <0026> "

-- memorize state.
    048b : 6600 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    048c : 6a88 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 136
    048d : 5fa0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    048e : 0473 ; -- <0029> "
    048f : 6600 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    0490 : 6a8a ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 138
    0491 : 5fa0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    0492 : 049e ; -- <0030> "
    0493 : 6600 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    0494 : 6a8c ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 140
    0495 : 5fa0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    0496 : 04bc ; -- <0031> "
    0497 : 6600 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    0498 : 6a8e ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 142
    0499 : 5fa0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    049a : 049d ; -- <0032> "

    049b : f80c ; -- <0034> pop rtna -- func init_plan_crank
    049c : fc00 ; -- <0034> swapra = nop

-- ######## func destroy_plan_crank -- = 0x049d


    049d : fc00 ; -- <0037> swapra = nop

-- ######## func puff_len_crank -- = 0x049e
    049e : 303e ; -- <0054> push rtna -- func puff_len_crank

    049f : 6600 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    04a0 : 6a92 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 146
    04a1 : 0017 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    04a2 : 0018 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    04a3 : 0602 ; -- <0040> b = $crank_max_puffs
    04a4 : e006 ; -- <0041> br gt :puff_limit
    04a5 : 04b3 ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    04a6 : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    04a7 : 0bb8 ; -- <0043> "
    04a8 : fba0 ; -- <0044> call :multiply
    04a9 : 0180 ; -- <0044> "
    04aa : fc00 ; -- <0044> "
    04ab : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    04ac : 2ee0 ; -- <0045> "
    04ad : 6600 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    04ae : 6a90 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 144
    04af : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    04b0 : 5f00 ; -- <0046> "
    04b1 : e00f ; -- <0047> jmp :done
    04b2 : 04ba ; -- <0047> "
-- :puff_limit -- = 0x04b3
-- prevent the puff counter from going higher & eventually rolling over.
    04b3 : 6600 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    04b4 : 6a92 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 146
    04b5 : 5e02 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 2
-- accept max puff len.
    04b6 : 6600 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    04b7 : 6a90 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 144
    04b8 : 5fa0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    04b9 : 4e20 ; -- <0052> "
-- :done -- = 0x04ba

    04ba : f80c ; -- <0055> pop rtna -- func puff_len_crank
    04bb : fc00 ; -- <0055> swapra = nop

-- ######## func leave_crank -- = 0x04bc
    04bc : 303e ; -- <0071> push rtna -- func leave_crank

    04bd : fba0 ; -- <0057> callx  check_engine_stop  a
    04be : 0bd0 ; -- <0057> "
    04bf : fc00 ; -- <0057> "
    04c0 : 0008 ; -- <0057> a = pa
    04c1 : e400 ; -- <0058> bn az :done
    04c2 : 04d7 ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    04c3 : 6600 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    04c4 : 6a7e ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 126
    04c5 : 0017 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    04c6 : 0018 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    04c7 : e000 ; -- <0062> br az :stay
    04c8 : 04d7 ; -- <0062> "
    04c9 : 6600 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    04ca : 6a7c ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 124
    04cb : 0017 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    04cc : 0018 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    04cd : 07a0 ; -- <0064> b = $crank_success_rpm
    04ce : 0320 ; -- <0064> "
    04cf : e005 ; -- <0065> br lt :stay
    04d0 : 04d7 ; -- <0065> "
    04d1 : fba0 ; -- <0066> callx  destroy_plan_crank
    04d2 : 049d ; -- <0066> "
    04d3 : fc00 ; -- <0066> "
    04d4 : fba0 ; -- <0067> callx  init_plan_run
    04d5 : 0520 ; -- <0067> "
    04d6 : fc00 ; -- <0067> "
-- :stay -- = 0x04d7

-- :done -- = 0x04d7

    04d7 : f80c ; -- <0072> pop rtna -- func leave_crank
    04d8 : fc00 ; -- <0072> swapra = nop


-- :plan_name_run -- = 0x04d9
-- "RN\x0"
    04d9 : 4e52 ; -- <0002> NR
    04da : 0000 ; -- <0002>   


-- 0.5 to 2.0 trim factor equivalent.









-- ######## func trim_lean_cmd -- = 0x04db

    04db : 6600 ; -- <0037> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    04dc : 6aaa ; -- <0037> ram a = $ram_run_manual_trim -- av_ad_lo = 170
    04dd : 0017 ; -- <0037> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    04de : 0018 ; -- <0037> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    04df : 0000 ; -- <0042> a = a
    04e0 : 0600 ; -- <0042> b = 0

    04e1 : e407 ; -- <0038> bn eq :else_1249
    04e2 : 04e5 ; -- <0038> "


    04e3 : e00f ; -- <0040> jmp :end_1249
    04e4 : 04eb ; -- <0040> "

    04e5 : 07a0 ; -- <0041> b = ([negate $run_manual_trim_step])
    04e6 : ff40 ; -- <0041> "
    04e7 : 6600 ; -- <0042> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    04e8 : 6aaa ; -- <0042> ram $ram_run_manual_trim = a+b -- av_ad_lo = 170
    04e9 : c800 ; -- <0042> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    04ea : 5f00 ; -- <0042> "


    04eb : fc00 ; -- <0044> swapra = nop

-- ######## func trim_rich_cmd -- = 0x04ec

    04ec : 6600 ; -- <0046> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    04ed : 6aaa ; -- <0046> ram a = $ram_run_manual_trim -- av_ad_lo = 170
    04ee : 0017 ; -- <0046> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    04ef : 0018 ; -- <0046> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    04f0 : 0000 ; -- <0051> a = a
    04f1 : 07a0 ; -- <0051> b = 800
    04f2 : 0320 ; -- <0051> "

    04f3 : e406 ; -- <0047> bn gt :else_1267
    04f4 : 04f7 ; -- <0047> "


    04f5 : e00f ; -- <0049> jmp :end_1267
    04f6 : 04fc ; -- <0049> "

    04f7 : 06c0 ; -- <0050> b = $run_manual_trim_step
    04f8 : 6600 ; -- <0051> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    04f9 : 6aaa ; -- <0051> ram $ram_run_manual_trim = a+b -- av_ad_lo = 170
    04fa : c800 ; -- <0051> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    04fb : 5f00 ; -- <0051> "


    04fc : fc00 ; -- <0053> swapra = nop

-- ######## func trim_2lean_cmd -- = 0x04fd

    04fd : 6600 ; -- <0055> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    04fe : 6aaa ; -- <0055> ram a = $ram_run_manual_trim -- av_ad_lo = 170
    04ff : 0017 ; -- <0055> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    0500 : 0018 ; -- <0055> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    0501 : 0000 ; -- <0060> a = a
    0502 : 0600 ; -- <0060> b = 0

    0503 : e407 ; -- <0056> bn eq :else_1283
    0504 : 0507 ; -- <0056> "


    0505 : e00f ; -- <0058> jmp :end_1283
    0506 : 050d ; -- <0058> "

    0507 : 07a0 ; -- <0059> b = ([negate [expr $run_manual_trim_step * 8]])
    0508 : fa00 ; -- <0059> "
    0509 : 6600 ; -- <0060> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    050a : 6aaa ; -- <0060> ram $ram_run_manual_trim = a+b -- av_ad_lo = 170
    050b : c800 ; -- <0060> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    050c : 5f00 ; -- <0060> "


    050d : fc00 ; -- <0062> swapra = nop

-- ######## func trim_2rich_cmd -- = 0x050e

    050e : 6600 ; -- <0064> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    050f : 6aaa ; -- <0064> ram a = $ram_run_manual_trim -- av_ad_lo = 170
    0510 : 0017 ; -- <0064> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    0511 : 0018 ; -- <0064> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    0512 : 0000 ; -- <0069> a = a
    0513 : 07a0 ; -- <0069> b = 800
    0514 : 0320 ; -- <0069> "

    0515 : e406 ; -- <0065> bn gt :else_1301
    0516 : 0519 ; -- <0065> "


    0517 : e00f ; -- <0067> jmp :end_1301
    0518 : 051f ; -- <0067> "

    0519 : 07a0 ; -- <0068> b = ($run_manual_trim_step * 8)
    051a : 0600 ; -- <0068> "
    051b : 6600 ; -- <0069> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    051c : 6aaa ; -- <0069> ram $ram_run_manual_trim = a+b -- av_ad_lo = 170
    051d : c800 ; -- <0069> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    051e : 5f00 ; -- <0069> "


    051f : fc00 ; -- <0071> swapra = nop

-- ######## func init_plan_run -- = 0x0520

-- set up the run plan.
-- this code is repeated each crank cycle, so don't depend on RAM already being 0.
    0520 : 6600 ; -- <0075> ram $ram_maf_valid = 0 -- av_ad_hi = 0
    0521 : 6a96 ; -- <0075> ram $ram_maf_valid = 0 -- av_ad_lo = 150
    0522 : 5e00 ; -- <0075> ram $ram_maf_valid = 0 -- av_write_data = 0
    0523 : 6600 ; -- <0076> ram $ram_afrc_maf_row_idx = 0 -- av_ad_hi = 0
    0524 : 6a9c ; -- <0076> ram $ram_afrc_maf_row_idx = 0 -- av_ad_lo = 156
    0525 : 5e00 ; -- <0076> ram $ram_afrc_maf_row_idx = 0 -- av_write_data = 0
    0526 : 6600 ; -- <0077> ram $ram_afrc_rpm_col_idx = 0 -- av_ad_hi = 0
    0527 : 6a9e ; -- <0077> ram $ram_afrc_rpm_col_idx = 0 -- av_ad_lo = 158
    0528 : 5e00 ; -- <0077> ram $ram_afrc_rpm_col_idx = 0 -- av_write_data = 0
    0529 : 6600 ; -- <0078> ram $ram_block_temp_map_idx = 0 -- av_ad_hi = 0
    052a : 6aa0 ; -- <0078> ram $ram_block_temp_map_idx = 0 -- av_ad_lo = 160
    052b : 5e00 ; -- <0078> ram $ram_block_temp_map_idx = 0 -- av_write_data = 0
    052c : 6600 ; -- <0079> ram $ram_block_temp_trim = $trim_unity -- av_ad_hi = 0
    052d : 6aa2 ; -- <0079> ram $ram_block_temp_trim = $trim_unity -- av_ad_lo = 162
    052e : 5fa0 ; -- <0079> ram $ram_block_temp_trim = $trim_unity -- av_write_data = 8192
    052f : 2000 ; -- <0079> "
    0530 : 6600 ; -- <0080> ram $ram_afterstart_map_idx = 0 -- av_ad_hi = 0
    0531 : 6aa4 ; -- <0080> ram $ram_afterstart_map_idx = 0 -- av_ad_lo = 164
    0532 : 5e00 ; -- <0080> ram $ram_afterstart_map_idx = 0 -- av_write_data = 0
    0533 : 6600 ; -- <0081> ram $ram_afterstart_trim = $trim_unity -- av_ad_hi = 0
    0534 : 6aa6 ; -- <0081> ram $ram_afterstart_trim = $trim_unity -- av_ad_lo = 166
    0535 : 5fa0 ; -- <0081> ram $ram_afterstart_trim = $trim_unity -- av_write_data = 8192
    0536 : 2000 ; -- <0081> "
    0537 : 6600 ; -- <0082> ram $ram_o2_trim = $trim_unity -- av_ad_hi = 0
    0538 : 6aa8 ; -- <0082> ram $ram_o2_trim = $trim_unity -- av_ad_lo = 168
    0539 : 5fa0 ; -- <0082> ram $ram_o2_trim = $trim_unity -- av_write_data = 8192
    053a : 2000 ; -- <0082> "
    053b : 6600 ; -- <0083> ram $ram_puff_count = 0 -- av_ad_hi = 0
    053c : 6a92 ; -- <0083> ram $ram_puff_count = 0 -- av_ad_lo = 146
    053d : 5e00 ; -- <0083> ram $ram_puff_count = 0 -- av_write_data = 0
    053e : 6600 ; -- <0084> ram $ram_run_manual_trim = $trim_unity -- av_ad_hi = 0
    053f : 6aaa ; -- <0084> ram $ram_run_manual_trim = $trim_unity -- av_ad_lo = 170
    0540 : 5fa0 ; -- <0084> ram $ram_run_manual_trim = $trim_unity -- av_write_data = 8192
    0541 : 2000 ; -- <0084> "
    0542 : 6600 ; -- <0085> ram $ram_o2_trim = $trim_unity -- av_ad_hi = 0
    0543 : 6aa8 ; -- <0085> ram $ram_o2_trim = $trim_unity -- av_ad_lo = 168
    0544 : 5fa0 ; -- <0085> ram $ram_o2_trim = $trim_unity -- av_write_data = 8192
    0545 : 2000 ; -- <0085> "
    0546 : 6600 ; -- <0086> ram $ram_total_trim = 0 -- av_ad_hi = 0
    0547 : 6aac ; -- <0086> ram $ram_total_trim = 0 -- av_ad_lo = 172
    0548 : 5e00 ; -- <0086> ram $ram_total_trim = 0 -- av_write_data = 0

-- memorize state.
    0549 : 6600 ; -- <0089> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    054a : 6a88 ; -- <0089> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 136
    054b : 5fa0 ; -- <0089> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    054c : 04d9 ; -- <0089> "
    054d : 6600 ; -- <0090> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    054e : 6a8a ; -- <0090> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 138
    054f : 5fa0 ; -- <0090> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    0550 : 05a0 ; -- <0090> "
    0551 : 6600 ; -- <0091> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    0552 : 6a8c ; -- <0091> ram $ram_transition_func = :leave_run -- av_ad_lo = 140
    0553 : 5fa0 ; -- <0091> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    0554 : 061c ; -- <0091> "
    0555 : 6600 ; -- <0092> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    0556 : 6a8e ; -- <0092> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 142
    0557 : 5fa0 ; -- <0092> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    0558 : 055a ; -- <0092> "

    0559 : fc00 ; -- <0094> swapra = nop

-- ######## func destroy_plan_run -- = 0x055a


    055a : fc00 ; -- <0097> swapra = nop

-- ######## func combine_trim -- = 0x055b
    055b : 3002 ; -- <0138> push i -- func combine_trim
    055c : 3003 ; -- <0138> push j -- "
    055d : 3004 ; -- <0138> push x -- "

-- combine the given increment with the given total trim factor, returning
-- the new total trim.  this process is complicated by the decision to keep the
-- 0.5 offset in the integer representation scheme.  that's done in case i ever
-- have to calculate puff without the aid of a hardware multiplier.
-- the process is to add the offset to each argument, multiply them,
-- undo the offsets, and saturate to prevent excess accumulation.
    055e : 0008 ; -- <0105> a = total
    055f : 07a0 ; -- <0106> b = $trim_unity
    0560 : 2000 ; -- <0106> "
    0561 : c800 ; -- <0107> a = a+b
    0562 : 0300 ; -- <0107> "
    0563 : 0809 ; -- <0108> i = increment
    0564 : 0fa0 ; -- <0109> j = $trim_unity
    0565 : 2000 ; -- <0109> "
    0566 : c800 ; -- <0110> b = i+j
    0567 : 0710 ; -- <0110> "
    0568 : c800 ; -- <0111> nop
    0569 : c800 ; -- <0112> nop
    056a : c800 ; -- <0113> nop
    056b : c800 ; -- <0114> nop
-- total = product / 16384 = product >> 14
-- this cancels the two offsets that were added prior to the mult.
    056c : 1011 ; -- <0117> x = product_hi
    056d : 0010 ; -- <0118> a = product_lo
    056e : 0353 ; -- <0119> a = a>>4
    056f : 0353 ; -- <0120> a = a>>4
    0570 : 0353 ; -- <0121> a = a>>4
    0571 : 0350 ; -- <0122> a = a>>1
    0572 : 2350 ; -- <0123> out_total = a>>1
    0573 : 0004 ; -- <0124> a = x
    0574 : 07a0 ; -- <0125> b = 0x3fff
    0575 : 3fff ; -- <0125> "
    0576 : c800 ; -- <0126> a = and
    0577 : 0330 ; -- <0126> "
    0578 : 0351 ; -- <0127> a = a<<1
    0579 : 0351 ; -- <0128> a = a<<1
    057a : 0408 ; -- <0129> b = out_total
    057b : c800 ; -- <0130> a = or
    057c : 0334 ; -- <0130> "
-- subtract the unity offset to get back to the correct integer representation.
    057d : 07a0 ; -- <0132> b = ([negate $trim_unity])
    057e : e000 ; -- <0132> "
    057f : c800 ; -- <0133> out_total = a+b
    0580 : 2300 ; -- <0133> "
-- clamp.

    0581 : 0008 ; -- <0137> a = out_total
    0582 : 07a0 ; -- <0137> b = 24576
    0583 : 6000 ; -- <0137> "

    0584 : e406 ; -- <0135> bn gt :else_1412
    0585 : 0588 ; -- <0135> "

    0586 : 23a0 ; -- <0136> out_total = $trim_double
    0587 : 6000 ; -- <0136> "


    0588 : 100c ; -- <0139> pop x -- func combine_trim
    0589 : 0c0c ; -- <0139> pop j -- "
    058a : 080c ; -- <0139> pop i -- "
    058b : fc00 ; -- <0139> swapra = nop

-- ######## func fetch_afrc -- = 0x058c

-- look up Air/Fuel Ratio Correction in AFRC map.
-- index rows by MAF.
    058c : 0008 ; -- <0143> a = maf_row_idx
    058d : 0610 ; -- <0144> b = $afrc_rpm_cols
    058e : c800 ; -- <0145> nop
    058f : c800 ; -- <0146> nop
    0590 : c800 ; -- <0147> nop
    0591 : c800 ; -- <0148> nop
    0592 : 0410 ; -- <0149> b = product_lo
-- index columns by RPM.
    0593 : 0009 ; -- <0151> a = rpm_col_idx
    0594 : c800 ; -- <0152> a = a+b
    0595 : 0300 ; -- <0152> "

    0596 : 0351 ; -- <0153> a = a<<1
    0597 : 0600 ; -- <0153> b = 0
    0598 : 67a0 ; -- <0153> av_ad_hi = 256
    0599 : 0100 ; -- <0153> "
    059a : 6b00 ; -- <0153> av_ad_lo = ad0
    059b : 0417 ; -- <0153> b = av_begin_read
    059c : 0418 ; -- <0153> b = av_read_data

    059d : 2001 ; -- <0154> afrc = b
    059e : fc00 ; -- <0153> swapra = nop

    059f : fc00 ; -- <0156> swapra = nop

-- ######## func puff_len_run -- = 0x05a0
    05a0 : 3004 ; -- <0239> push x -- func puff_len_run
    05a1 : 3007 ; -- <0239> push gb -- "
    05a2 : 303e ; -- <0239> push rtna -- "

    05a3 : 6600 ; -- <0158> ram a = $ram_rpm_valid -- av_ad_hi = 0
    05a4 : 6a7e ; -- <0158> ram a = $ram_rpm_valid -- av_ad_lo = 126
    05a5 : 0017 ; -- <0158> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    05a6 : 0018 ; -- <0158> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    05a7 : e000 ; -- <0159> br az :abort
    05a8 : 0618 ; -- <0159> "
    05a9 : 6600 ; -- <0160> ram a = $ram_maf_valid -- av_ad_hi = 0
    05aa : 6a96 ; -- <0160> ram a = $ram_maf_valid -- av_ad_lo = 150
    05ab : 0017 ; -- <0160> ram a = $ram_maf_valid -- a = av_write_data -- start read cycle
    05ac : 0018 ; -- <0160> ram a = $ram_maf_valid -- a = av_read_data -- finish read cycle
    05ad : e000 ; -- <0161> br az :abort
    05ae : 0618 ; -- <0161> "

-- look up Air/Fuel Ratio Correction in AFRC map.
    05af : 6600 ; -- <0164> ram pa = $ram_afrc_maf_row_idx -- av_ad_hi = 0
    05b0 : 6a9c ; -- <0164> ram pa = $ram_afrc_maf_row_idx -- av_ad_lo = 156
    05b1 : 2017 ; -- <0164> ram pa = $ram_afrc_maf_row_idx -- pa = av_write_data -- start read cycle
    05b2 : 2018 ; -- <0164> ram pa = $ram_afrc_maf_row_idx -- pa = av_read_data -- finish read cycle
    05b3 : 6600 ; -- <0165> ram pb = $ram_afrc_rpm_col_idx -- av_ad_hi = 0
    05b4 : 6a9e ; -- <0165> ram pb = $ram_afrc_rpm_col_idx -- av_ad_lo = 158
    05b5 : 2417 ; -- <0165> ram pb = $ram_afrc_rpm_col_idx -- pb = av_write_data -- start read cycle
    05b6 : 2418 ; -- <0165> ram pb = $ram_afrc_rpm_col_idx -- pb = av_read_data -- finish read cycle
    05b7 : fba0 ; -- <0166> callx fetch_afrc pa pb ga
    05b8 : 058c ; -- <0166> "
    05b9 : fc00 ; -- <0166> "
    05ba : 1808 ; -- <0166> ga = pa
-- now ga = total trim factor as integer.

-- apply block temperature trim factor.
    05bb : 6600 ; -- <0170> ram b = $ram_block_temp_trim -- av_ad_hi = 0
    05bc : 6aa2 ; -- <0170> ram b = $ram_block_temp_trim -- av_ad_lo = 162
    05bd : 0417 ; -- <0170> ram b = $ram_block_temp_trim -- b = av_write_data -- start read cycle
    05be : 0418 ; -- <0170> ram b = $ram_block_temp_trim -- b = av_read_data -- finish read cycle
    05bf : 2006 ; -- <0171> pa = ga
    05c0 : 2401 ; -- <0171> pb = b
    05c1 : fba0 ; -- <0171> callx combine_trim ga b ga
    05c2 : 055b ; -- <0171> "
    05c3 : fc00 ; -- <0171> "
    05c4 : 1808 ; -- <0171> ga = pa

-- apply afterstart trim factor.
    05c5 : fba0 ; -- <0174> callx interpret_puff_count
    05c6 : 0656 ; -- <0174> "
    05c7 : fc00 ; -- <0174> "
    05c8 : 6600 ; -- <0175> ram b = $ram_afterstart_trim -- av_ad_hi = 0
    05c9 : 6aa6 ; -- <0175> ram b = $ram_afterstart_trim -- av_ad_lo = 166
    05ca : 0417 ; -- <0175> ram b = $ram_afterstart_trim -- b = av_write_data -- start read cycle
    05cb : 0418 ; -- <0175> ram b = $ram_afterstart_trim -- b = av_read_data -- finish read cycle
    05cc : 2006 ; -- <0176> pa = ga
    05cd : 2401 ; -- <0176> pb = b
    05ce : fba0 ; -- <0176> callx combine_trim ga b ga
    05cf : 055b ; -- <0176> "
    05d0 : fc00 ; -- <0176> "
    05d1 : 1808 ; -- <0176> ga = pa

-- apply stoich learning trim factor.
    05d2 : 6600 ; -- <0179> ram b = $ram_o2_trim -- av_ad_hi = 0
    05d3 : 6aa8 ; -- <0179> ram b = $ram_o2_trim -- av_ad_lo = 168
    05d4 : 0417 ; -- <0179> ram b = $ram_o2_trim -- b = av_write_data -- start read cycle
    05d5 : 0418 ; -- <0179> ram b = $ram_o2_trim -- b = av_read_data -- finish read cycle
    05d6 : 2006 ; -- <0180> pa = ga
    05d7 : 2401 ; -- <0180> pb = b
    05d8 : fba0 ; -- <0180> callx combine_trim ga b ga
    05d9 : 055b ; -- <0180> "
    05da : fc00 ; -- <0180> "
    05db : 1808 ; -- <0180> ga = pa

-- apply manual trim factor.
    05dc : 6600 ; -- <0183> ram b = $ram_run_manual_trim -- av_ad_hi = 0
    05dd : 6aaa ; -- <0183> ram b = $ram_run_manual_trim -- av_ad_lo = 170
    05de : 0417 ; -- <0183> ram b = $ram_run_manual_trim -- b = av_write_data -- start read cycle
    05df : 0418 ; -- <0183> ram b = $ram_run_manual_trim -- b = av_read_data -- finish read cycle
    05e0 : 2006 ; -- <0184> pa = ga
    05e1 : 2401 ; -- <0184> pb = b
    05e2 : fba0 ; -- <0184> callx combine_trim ga b ga
    05e3 : 055b ; -- <0184> "
    05e4 : fc00 ; -- <0184> "
    05e5 : 1808 ; -- <0184> ga = pa

-- final multiplication for puff length.
-- (MAF linear flow) * (stoich ratio constant) * (total trim as floating point) = (puff length jf).
-- here the total trim float will have to be represented as a fraction (num/denom).
-- stoich ratio constant (8) (really the conversion factor from linear
-- flow to nominal jf)  is folded into that denominator (16384) at compile time.
-- that makes denom = 2048 = 11 bits.  so:
-- gb = (puff len jf) = (MAF linear flow) * [(total trim) + trim_unity] >> 11
    05e6 : 0006 ; -- <0193> a = ga
    05e7 : 07a0 ; -- <0194> b = $trim_unity
    05e8 : 2000 ; -- <0194> "
    05e9 : c800 ; -- <0195> a = a+b
    05ea : 0300 ; -- <0195> "
    05eb : 6600 ; -- <0196> ram b = $ram_maf_flow_hi_res -- av_ad_hi = 0
    05ec : 6a9a ; -- <0196> ram b = $ram_maf_flow_hi_res -- av_ad_lo = 154
    05ed : 0417 ; -- <0196> ram b = $ram_maf_flow_hi_res -- b = av_write_data -- start read cycle
    05ee : 0418 ; -- <0196> ram b = $ram_maf_flow_hi_res -- b = av_read_data -- finish read cycle
    05ef : c800 ; -- <0197> nop
    05f0 : c800 ; -- <0198> nop
    05f1 : c800 ; -- <0199> nop
    05f2 : c800 ; -- <0200> nop
-- gb = 32-bit product shifted >> 11.  lower 11 bits of product_hi are
-- explicitly moved to upper 11 bits of gb.
    05f3 : 0010 ; -- <0203> a = product_lo
    05f4 : 0411 ; -- <0204> b = product_hi
    05f5 : 0353 ; -- <0205> a = a>>4
    05f6 : 0353 ; -- <0206> a = a>>4
    05f7 : 0350 ; -- <0207> a = a>>1
    05f8 : 0350 ; -- <0208> a = a>>1
    05f9 : 1f50 ; -- <0209> gb = a>>1
    05fa : 0001 ; -- <0210> a = b
    05fb : 0352 ; -- <0211> a = a<<4
    05fc : 0351 ; -- <0212> a = a<<1
    05fd : 0407 ; -- <0213> b = gb
    05fe : c800 ; -- <0214> gb = or
    05ff : 1f34 ; -- <0214> "

-- clamp the (puff length jf) to sane range.
-- max is the floating duty cycle.  7/8 of puff cycle, or 87.5%.
    0600 : 6600 ; -- <0218> ram a = $ram_ign_avg_jf -- av_ad_hi = 0
    0601 : 6a7a ; -- <0218> ram a = $ram_ign_avg_jf -- av_ad_lo = 122
    0602 : 0017 ; -- <0218> ram a = $ram_ign_avg_jf -- a = av_write_data -- start read cycle
    0603 : 0018 ; -- <0218> ram a = $ram_ign_avg_jf -- a = av_read_data -- finish read cycle
    0604 : 0350 ; -- <0219> a = a>>1
    0605 : 0350 ; -- <0220> a = a>>1
    0606 : 0350 ; -- <0221> a = a>>1
    0607 : 0760 ; -- <0222> b = 0xffff
    0608 : c800 ; -- <0223> a = xor
    0609 : 0338 ; -- <0223> "
    060a : 6600 ; -- <0224> ram b = $ram_ign_avg_jf -- av_ad_hi = 0
    060b : 6a7a ; -- <0224> ram b = $ram_ign_avg_jf -- av_ad_lo = 122
    060c : 0417 ; -- <0224> ram b = $ram_ign_avg_jf -- b = av_write_data -- start read cycle
    060d : 0418 ; -- <0224> ram b = $ram_ign_avg_jf -- b = av_read_data -- finish read cycle
    060e : c800 ; -- <0225> x = a+b
    060f : 1300 ; -- <0225> "

    0610 : 0007 ; -- <0228> a = gb
    0611 : 0404 ; -- <0228> b = x

    0612 : e406 ; -- <0226> bn gt :else_1554
    0613 : 0615 ; -- <0226> "

    0614 : 1c04 ; -- <0227> gb = x

-- min is the safety amount to keep motor running and maybe prevent leaning damage.
--patch: don't know a proper minimum.

-- shut off puff during closed throttle engine braking.
--patch: not implemented.

-- memorize total puff.
    0615 : 6600 ; -- <0236> ram $ram_next_puff_len_us = ga -- av_ad_hi = 0
    0616 : 6a90 ; -- <0236> ram $ram_next_puff_len_us = ga -- av_ad_lo = 144
    0617 : 5c06 ; -- <0236> ram $ram_next_puff_len_us = ga -- av_write_data = ga

-- :abort -- = 0x0618

    0618 : f80c ; -- <0240> pop rtna -- func puff_len_run
    0619 : 1c0c ; -- <0240> pop gb -- "
    061a : 100c ; -- <0240> pop x -- "
    061b : fc00 ; -- <0240> swapra = nop

-- ######## func leave_run -- = 0x061c
    061c : 303e ; -- <0243> push rtna -- func leave_run

    061d : fba0 ; -- <0242> callx  check_engine_stop  pa
    061e : 0bd0 ; -- <0242> "
    061f : fc00 ; -- <0242> "

    0620 : f80c ; -- <0244> pop rtna -- func leave_run
    0621 : fc00 ; -- <0244> swapra = nop

-- ######## func interpret_block_temp -- = 0x0622
    0622 : 3002 ; -- <0262> push i -- func interpret_block_temp
    0623 : 3007 ; -- <0262> push gb -- "

-- look up block temperature map trim factor.
    0624 : 0202 ; -- <0247> a = $anmux_engine_block_temp

    0625 : 0351 ; -- <0248> a = a<<1
    0626 : 0616 ; -- <0248> b = 22
    0627 : 6600 ; -- <0248> av_ad_hi = 0
    0628 : 6b00 ; -- <0248> av_ad_lo = ad0
    0629 : 0417 ; -- <0248> b = av_begin_read
    062a : 0418 ; -- <0248> b = av_read_data

    062b : 1c01 ; -- <0249> gb = b
    062c : 0a00 ; -- <0260> i = 0
-- :loop_1580 -- = 0x062d

    062d : 0002 ; -- <0250> a = i

    062e : 0351 ; -- <0251> a = a<<1
    062f : 07a0 ; -- <0251> b = 2592
    0630 : 0a20 ; -- <0251> "
    0631 : 67a0 ; -- <0251> av_ad_hi = 256
    0632 : 0100 ; -- <0251> "
    0633 : 6b00 ; -- <0251> av_ad_lo = ad0
    0634 : 0417 ; -- <0251> b = av_begin_read
    0635 : 0418 ; -- <0251> b = av_read_data


    0636 : 0001 ; -- <0258> a = b
    0637 : 0407 ; -- <0258> b = gb

    0638 : e406 ; -- <0252> bn gt :else_1592
    0639 : 064b ; -- <0252> "

    063a : 6600 ; -- <0253> ram $ram_block_temp_map_idx = i -- av_ad_hi = 0
    063b : 6aa0 ; -- <0253> ram $ram_block_temp_map_idx = i -- av_ad_lo = 160
    063c : 5c02 ; -- <0253> ram $ram_block_temp_map_idx = i -- av_write_data = i
    063d : 0002 ; -- <0254> a = i

    063e : 0351 ; -- <0255> a = a<<1
    063f : 07a0 ; -- <0255> b = 2720
    0640 : 0aa0 ; -- <0255> "
    0641 : 67a0 ; -- <0255> av_ad_hi = 256
    0642 : 0100 ; -- <0255> "
    0643 : 6b00 ; -- <0255> av_ad_lo = ad0
    0644 : 0417 ; -- <0255> b = av_begin_read
    0645 : 0418 ; -- <0255> b = av_read_data

    0646 : 6600 ; -- <0256> ram $ram_block_temp_trim = b -- av_ad_hi = 0
    0647 : 6aa2 ; -- <0256> ram $ram_block_temp_trim = b -- av_ad_lo = 162
    0648 : 5c01 ; -- <0256> ram $ram_block_temp_trim = b -- av_write_data = b
    0649 : e00f ; -- <0257> jmp :temp_done
    064a : 0653 ; -- <0257> "



    064b : 0002 ; -- <0260> a = i
    064c : 0601 ; -- <0260> b = 1
    064d : c800 ; -- <0260> i = a+b
    064e : 0b00 ; -- <0260> "


    064f : 0002 ; -- <0260> a = i
    0650 : 0640 ; -- <0260> b = $block_temp_num_cells
    0651 : e005 ; -- <0260> br lt :loop_1580
    0652 : 062d ; -- <0260> "

-- :end_1580 -- = 0x0653
-- :temp_done -- = 0x0653

    0653 : 1c0c ; -- <0263> pop gb -- func interpret_block_temp
    0654 : 080c ; -- <0263> pop i -- "
    0655 : fc00 ; -- <0263> swapra = nop

-- ######## func interpret_puff_count -- = 0x0656
    0656 : 3002 ; -- <0283> push i -- func interpret_puff_count
    0657 : 3003 ; -- <0283> push j -- "
    0658 : 3007 ; -- <0283> push gb -- "

-- look up afterstart trim factor.
    0659 : 6600 ; -- <0266> ram gb = $ram_puff_count -- av_ad_hi = 0
    065a : 6a92 ; -- <0266> ram gb = $ram_puff_count -- av_ad_lo = 146
    065b : 1c17 ; -- <0266> ram gb = $ram_puff_count -- gb = av_write_data -- start read cycle
    065c : 1c18 ; -- <0266> ram gb = $ram_puff_count -- gb = av_read_data -- finish read cycle
    065d : 0a00 ; -- <0278> i = 0
-- :loop_1629 -- = 0x065e

    065e : 0002 ; -- <0267> a = i

    065f : 0351 ; -- <0268> a = a<<1
    0660 : 07a0 ; -- <0268> b = 2848
    0661 : 0b20 ; -- <0268> "
    0662 : 67a0 ; -- <0268> av_ad_hi = 256
    0663 : 0100 ; -- <0268> "
    0664 : 6b00 ; -- <0268> av_ad_lo = ad0
    0665 : 0417 ; -- <0268> b = av_begin_read
    0666 : 0418 ; -- <0268> b = av_read_data


    0667 : 0001 ; -- <0276> a = b
    0668 : 0407 ; -- <0276> b = gb

    0669 : e406 ; -- <0269> bn gt :else_1641
    066a : 067e ; -- <0269> "

    066b : 0f60 ; -- <0270> j = -1
    066c : 6600 ; -- <0271> ram $ram_afterstart_map_idx = i+j -- av_ad_hi = 0
    066d : 6aa4 ; -- <0271> ram $ram_afterstart_map_idx = i+j -- av_ad_lo = 164
    066e : c800 ; -- <0271> ram $ram_afterstart_map_idx = i+j -- av_write_data = i+j
    066f : 5f10 ; -- <0271> "
    0670 : 0002 ; -- <0272> a = i

    0671 : 0351 ; -- <0273> a = a<<1
    0672 : 07a0 ; -- <0273> b = 2868
    0673 : 0b34 ; -- <0273> "
    0674 : 67a0 ; -- <0273> av_ad_hi = 256
    0675 : 0100 ; -- <0273> "
    0676 : 6b00 ; -- <0273> av_ad_lo = ad0
    0677 : 0417 ; -- <0273> b = av_begin_read
    0678 : 0418 ; -- <0273> b = av_read_data

    0679 : 6600 ; -- <0274> ram $ram_afterstart_trim = b -- av_ad_hi = 0
    067a : 6aa6 ; -- <0274> ram $ram_afterstart_trim = b -- av_ad_lo = 166
    067b : 5c01 ; -- <0274> ram $ram_afterstart_trim = b -- av_write_data = b
    067c : e00f ; -- <0275> jmp :done
    067d : 0692 ; -- <0275> "



    067e : 0002 ; -- <0278> a = i
    067f : 0601 ; -- <0278> b = 1
    0680 : c800 ; -- <0278> i = a+b
    0681 : 0b00 ; -- <0278> "


    0682 : 0002 ; -- <0278> a = i
    0683 : 060a ; -- <0278> b = $afterstart_num_cells
    0684 : e005 ; -- <0278> br lt :loop_1629
    0685 : 065e ; -- <0278> "

-- :end_1629 -- = 0x0686
    0686 : 0209 ; -- <0279> a = ($afterstart_num_cells - 1)

    0687 : 0351 ; -- <0280> a = a<<1
    0688 : 07a0 ; -- <0280> b = 2868
    0689 : 0b34 ; -- <0280> "
    068a : 67a0 ; -- <0280> av_ad_hi = 256
    068b : 0100 ; -- <0280> "
    068c : 6b00 ; -- <0280> av_ad_lo = ad0
    068d : 0417 ; -- <0280> b = av_begin_read
    068e : 0418 ; -- <0280> b = av_read_data

    068f : 6600 ; -- <0281> ram $ram_afterstart_trim = b -- av_ad_hi = 0
    0690 : 6aa6 ; -- <0281> ram $ram_afterstart_trim = b -- av_ad_lo = 166
    0691 : 5c01 ; -- <0281> ram $ram_afterstart_trim = b -- av_write_data = b
-- :done -- = 0x0692

    0692 : 1c0c ; -- <0284> pop gb -- func interpret_puff_count
    0693 : 0c0c ; -- <0284> pop j -- "
    0694 : 080c ; -- <0284> pop i -- "
    0695 : fc00 ; -- <0284> swapra = nop

-- ######## func dump_afrc_cmd -- = 0x0696
    0696 : 3002 ; -- <0308> push i -- func dump_afrc_cmd
    0697 : 3004 ; -- <0308> push x -- "
    0698 : 3006 ; -- <0308> push ga -- "
    0699 : 3007 ; -- <0308> push gb -- "
    069a : 303e ; -- <0308> push rtna -- "

    069b : 020d ; -- <0286> a = 13 -- puteol
    069c : fba0 ; -- <0286> puteol
    069d : 00ab ; -- <0286> "
    069e : fc00 ; -- <0286> "
    069f : 020a ; -- <0286> a = 10 -- puteol
    06a0 : fba0 ; -- <0286> puteol
    06a1 : 00ab ; -- <0286> "
    06a2 : fc00 ; -- <0286> "
    06a3 : 6600 ; -- <0287> ram ga = $ram_afrc_maf_row_idx -- av_ad_hi = 0
    06a4 : 6a9c ; -- <0287> ram ga = $ram_afrc_maf_row_idx -- av_ad_lo = 156
    06a5 : 1817 ; -- <0287> ram ga = $ram_afrc_maf_row_idx -- ga = av_write_data -- start read cycle
    06a6 : 1818 ; -- <0287> ram ga = $ram_afrc_maf_row_idx -- ga = av_read_data -- finish read cycle
    06a7 : 6600 ; -- <0288> ram gb = $ram_afrc_rpm_col_idx -- av_ad_hi = 0
    06a8 : 6a9e ; -- <0288> ram gb = $ram_afrc_rpm_col_idx -- av_ad_lo = 158
    06a9 : 1c17 ; -- <0288> ram gb = $ram_afrc_rpm_col_idx -- gb = av_write_data -- start read cycle
    06aa : 1c18 ; -- <0288> ram gb = $ram_afrc_rpm_col_idx -- gb = av_read_data -- finish read cycle
    06ab : 67a0 ; -- <0289> av_ad_hi = ([ram_join $ram_afrc_map] >> 16)
    06ac : 0100 ; -- <0289> "
    06ad : 6a00 ; -- <0290> av_ad_lo = ([ram_join $ram_afrc_map] & 0xffff)
    06ae : 0a00 ; -- <0307> i = 0
-- :loop_1710 -- = 0x06af

    06af : 1200 ; -- <0304> x = 0
-- :loop_1711 -- = 0x06b0

    06b0 : 0017 ; -- <0291> a = av_begin_read
    06b1 : 0018 ; -- <0292> a = av_read_data
    06b2 : fba0 ; -- <0293> call put4x
    06b3 : 00d3 ; -- <0293> "
    06b4 : fc00 ; -- <0293> "

    06b5 : 0004 ; -- <0298> a = x
    06b6 : 0407 ; -- <0298> b = gb

    06b7 : e407 ; -- <0294> bn eq :else_1719
    06b8 : 06bf ; -- <0294> "

    06b9 : 023c ; -- <0295> a = 60 -- putasc "<"
    06ba : fba0 ; -- <0295> putasc "<"
    06bb : 00ab ; -- <0295> "
    06bc : fc00 ; -- <0295> "

    06bd : e00f ; -- <0297> jmp :end_1719
    06be : 06c3 ; -- <0297> "

    06bf : 0220 ; -- <0298> a = 32 -- putasc " "
    06c0 : fba0 ; -- <0298> putasc " "
    06c1 : 00ab ; -- <0298> "
    06c2 : fc00 ; -- <0298> "

    06c3 : 0220 ; -- <0299> a = 32 -- putasc " "
    06c4 : fba0 ; -- <0299> putasc " "
    06c5 : 00ab ; -- <0299> "
    06c6 : fc00 ; -- <0299> "
    06c7 : 001a ; -- <0300> a = av_ad_lo
    06c8 : 0602 ; -- <0301> b = 2
    06c9 : c800 ; -- <0302> av_ad_lo = a+b
    06ca : 6b00 ; -- <0302> "


    06cb : 0004 ; -- <0304> a = x
    06cc : 0601 ; -- <0304> b = 1
    06cd : c800 ; -- <0304> x = a+b
    06ce : 1300 ; -- <0304> "


    06cf : 0004 ; -- <0304> a = x
    06d0 : 0610 ; -- <0304> b = $afrc_rpm_cols
    06d1 : e005 ; -- <0304> br lt :loop_1711
    06d2 : 06b0 ; -- <0304> "

-- :end_1711 -- = 0x06d3
    06d3 : 020d ; -- <0305> a = 13 -- puteol
    06d4 : fba0 ; -- <0305> puteol
    06d5 : 00ab ; -- <0305> "
    06d6 : fc00 ; -- <0305> "
    06d7 : 020a ; -- <0305> a = 10 -- puteol
    06d8 : fba0 ; -- <0305> puteol
    06d9 : 00ab ; -- <0305> "
    06da : fc00 ; -- <0305> "


    06db : 0002 ; -- <0307> a = i
    06dc : 0601 ; -- <0307> b = 1
    06dd : c800 ; -- <0307> i = a+b
    06de : 0b00 ; -- <0307> "


    06df : 0002 ; -- <0307> a = i
    06e0 : 0640 ; -- <0307> b = $afrc_maf_rows
    06e1 : e005 ; -- <0307> br lt :loop_1710
    06e2 : 06af ; -- <0307> "

-- :end_1710 -- = 0x06e3

    06e3 : f80c ; -- <0309> pop rtna -- func dump_afrc_cmd
    06e4 : 1c0c ; -- <0309> pop gb -- "
    06e5 : 180c ; -- <0309> pop ga -- "
    06e6 : 100c ; -- <0309> pop x -- "
    06e7 : 080c ; -- <0309> pop i -- "
    06e8 : fc00 ; -- <0309> swapra = nop



-- #########################################################################
-- :main -- = 0x06e9
    06e9 : 03a0 ; -- <0224> a = :boot_msg
    06ea : 009b ; -- <0224> "
    06eb : fba0 ; -- <0225> call :print_nt
    06ec : 015f ; -- <0225> "
    06ed : fc00 ; -- <0225> "

-- clear the first 64k of RAM.
    06ee : 6600 ; -- <0228> av_ad_hi = 0
    06ef : fba0 ; -- <0228> callx  clear_ram_page  0
    06f0 : 0abc ; -- <0228> "
    06f1 : fc00 ; -- <0228> "

    06f2 : fba0 ; -- <0230> callx  init_drom
    06f3 : 0266 ; -- <0230> "
    06f4 : fc00 ; -- <0230> "

-- init fuel injection.
    06f5 : fba0 ; -- <0233> callx  init_plan_stop
    06f6 : 0436 ; -- <0233> "
    06f7 : fc00 ; -- <0233> "

-- power up FTDI USB board, and init any other special board control functions.
    06f8 : 8280 ; -- <0236> board_ctrl = $ftdi_power_mask
    06f9 : fba0 ; -- <0237> callx postpone_comm_restart
    06fa : 0a93 ; -- <0237> "
    06fb : fc00 ; -- <0237> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    06fc : 8a00 ; -- <0244> power_duty = $power_duty_closing

    06fd : 0022 ; -- <0248> a = power_duty
    06fe : 06c0 ; -- <0248> b = ( $power_lost_mask | $ign_switch_off_mask )

    06ff : e003 ; -- <0245> br and0z :else_1791
    0700 : 0706 ; -- <0245> "

    0701 : 8a32 ; -- <0246> power_duty = $power_duty_opening
    0702 : 7fa0 ; -- <0247> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    0703 : fffb ; -- <0247> "
    0704 : e00f ; -- <0247> error_halt_code $err_power_lost_at_boot
    0705 : 0704 ; -- <0247> "

    0706 : 6600 ; -- <0249> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0707 : 6a3c ; -- <0249> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 60
    0708 : 5f60 ; -- <0249> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0709 : 6600 ; -- <0250> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    070a : 6a3e ; -- <0250> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 62
    070b : 5e02 ; -- <0250> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    070c : 3ba0 ; -- <0253> soft_event = $event_controller_reset_mask
    070d : 8000 ; -- <0253> "
    070e : 3a00 ; -- <0254> soft_event = 0
    070f : 4fa0 ; -- <0255> mstimer0 = 1000
    0710 : 03e8 ; -- <0255> "
    0711 : 5614 ; -- <0256> mstimer2 = $plan_tick_ms
    0712 : e00f ; -- <0257> jmp :poll_events
    0713 : 009e ; -- <0257> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x0714
    0714 : 009e ; -- <0262> ([label :poll_events])
    0715 : 09ee ; -- <0263> ([label :power_lost_handler])
    0716 : 0729 ; -- <0264> ([label :ign_capture_handler])
    0717 : 07cb ; -- <0265> ([label :ign_capture_timeout_handler])
    0718 : 0a22 ; -- <0266> ([label :puff1_done_handler])
    0719 : 07d0 ; -- <0267> ([label :ustimer0_handler])
    071a : 0969 ; -- <0268> ([label :spi_done_handler])
    071b : 07d2 ; -- <0269> ([label :mstimer0_handler])
    071c : 0935 ; -- <0270> ([label :mstimer1_handler])
    071d : 0801 ; -- <0271> ([label :mstimer2_handler])
    071e : 082d ; -- <0272> ([label :uart_rx_handler])
    071f : 0846 ; -- <0273> ([label :uart_rx_overflow_handler])
    0720 : 084e ; -- <0274> ([label :uart_tx_overflow_handler])
    0721 : 0855 ; -- <0275> ([label :key0_handler])
    0722 : 085f ; -- <0276> ([label :key1_handler])
    0723 : 0a05 ; -- <0277> ([label :ign_switch_off_handler])
    0724 : 0a18 ; -- <0278> ([label :ign_switch_on_handler])
    0725 : 0869 ; -- <0279> ([label :softevent3_handler])
    0726 : 086b ; -- <0280> ([label :softevent2_handler])
    0727 : 086d ; -- <0281> ([label :softevent1_handler])
    0728 : 086f ; -- <0282> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x0729
-- discard outlier time.
    0729 : 1823 ; -- <0288> g6 = ign_capture_jf
    072a : 6600 ; -- <0289> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    072b : 6a82 ; -- <0289> ram b = $ram_ign_fastest_jf -- av_ad_lo = 130
    072c : 0417 ; -- <0289> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    072d : 0418 ; -- <0289> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle

    072e : 0006 ; -- <0292> a = g6
    072f : 0401 ; -- <0292> b = b

    0730 : e405 ; -- <0290> bn lt :else_1840
    0731 : 0733 ; -- <0290> "

    0732 : 1a00 ; -- <0291> g6 = 0

    0733 : 6600 ; -- <0293> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    0734 : 6a84 ; -- <0293> ram b = $ram_ign_slowest_jf -- av_ad_lo = 132
    0735 : 0417 ; -- <0293> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    0736 : 0418 ; -- <0293> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle

    0737 : 0006 ; -- <0296> a = g6
    0738 : 0401 ; -- <0296> b = b

    0739 : e406 ; -- <0294> bn gt :else_1849
    073a : 073c ; -- <0294> "

    073b : 1a00 ; -- <0295> g6 = 0


-- increment buffer index and memorize time.
    073c : 6600 ; -- <0299> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    073d : 6a58 ; -- <0299> ram a = $ram_ign_history_idx -- av_ad_lo = 88
    073e : 0017 ; -- <0299> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    073f : 0018 ; -- <0299> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    0740 : 0601 ; -- <0300> b = 1
    0741 : c800 ; -- <0301> a = a+b
    0742 : 0300 ; -- <0301> "
    0743 : 060f ; -- <0302> b = $ign_history_idx_mask
    0744 : c800 ; -- <0303> a = and
    0745 : 0330 ; -- <0303> "
    0746 : 6600 ; -- <0304> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    0747 : 6a58 ; -- <0304> ram $ram_ign_history_idx = a -- av_ad_lo = 88
    0748 : 5c00 ; -- <0304> ram $ram_ign_history_idx = a -- av_write_data = a
    0749 : 0406 ; -- <0305> b = g6

    074a : 0351 ; -- <0306> a = a<<1
    074b : 3001 ; -- <0306> push b -- push b
    074c : 065a ; -- <0306> b = 90
    074d : 6600 ; -- <0306> av_ad_hi = 0
    074e : 6b00 ; -- <0306> av_ad_lo = ad0
    074f : 5c0c ; -- <0306> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, y = sample, i = index = loop count, g6 = count of invalid samples.
    0750 : 1200 ; -- <0311> x = 0
    0751 : 1a00 ; -- <0312> g6 = 0
    0752 : 0a00 ; -- <0328> i = 0
-- :loop_1874 -- = 0x0753

    0753 : 0002 ; -- <0313> a = i

    0754 : 0351 ; -- <0314> a = a<<1
    0755 : 065a ; -- <0314> b = 90
    0756 : 6600 ; -- <0314> av_ad_hi = 0
    0757 : 6b00 ; -- <0314> av_ad_lo = ad0
    0758 : 0417 ; -- <0314> b = av_begin_read
    0759 : 0418 ; -- <0314> b = av_read_data

    075a : 1401 ; -- <0315> y = b

    075b : 0005 ; -- <0326> a = y
    075c : 0600 ; -- <0326> b = 0

    075d : e407 ; -- <0316> bn eq :else_1885
    075e : 0765 ; -- <0316> "

    075f : 0006 ; -- <0317> a = g6
    0760 : 0601 ; -- <0318> b = 1
    0761 : c800 ; -- <0319> g6 = a+b
    0762 : 1b00 ; -- <0319> "

    0763 : e00f ; -- <0321> jmp :end_1885
    0764 : 076c ; -- <0321> "

    0765 : 0208 ; -- <0322> a = ($ign_history_len / 2)
    0766 : 0405 ; -- <0323> b = y
    0767 : c800 ; -- <0324> a = a+b
    0768 : 0300 ; -- <0324> "
    0769 : 1753 ; -- <0325> y = a>>$ign_history_idx_bits
    076a : c800 ; -- <0326> x = x+y
    076b : 1320 ; -- <0326> "



    076c : 0002 ; -- <0328> a = i
    076d : 0601 ; -- <0328> b = 1
    076e : c800 ; -- <0328> i = a+b
    076f : 0b00 ; -- <0328> "


    0770 : 0002 ; -- <0328> a = i
    0771 : 0610 ; -- <0328> b = $ign_history_len
    0772 : e005 ; -- <0328> br lt :loop_1874
    0773 : 0753 ; -- <0328> "

-- :end_1874 -- = 0x0774
    0774 : 6600 ; -- <0329> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    0775 : 6a7a ; -- <0329> ram $ram_ign_avg_jf = x -- av_ad_lo = 122
    0776 : 5c04 ; -- <0329> ram $ram_ign_avg_jf = x -- av_write_data = x
    0777 : 6600 ; -- <0330> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    0778 : 6a80 ; -- <0330> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 128
    0779 : 5c06 ; -- <0330> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.


    077a : 0006 ; -- <0359> a = g6
    077b : 0604 ; -- <0359> b = ( $ign_history_len / 4 )

    077c : e406 ; -- <0339> bn gt :else_1916
    077d : 0783 ; -- <0339> "

    077e : 6600 ; -- <0340> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    077f : 6a7e ; -- <0340> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    0780 : 5e00 ; -- <0340> ram $ram_rpm_valid = 0 -- av_write_data = 0

    0781 : e00f ; -- <0342> jmp :end_1916
    0782 : 07af ; -- <0342> "

-- convert jiffies b to new RPM estimate.
    0783 : 2004 ; -- <0344> pa = x
    0784 : fba0 ; -- <0344> callx  jf_to_rpm  x  pa
    0785 : 0bc4 ; -- <0344> "
    0786 : fc00 ; -- <0344> "
    0787 : 6600 ; -- <0345> ram $ram_avg_rpm = pa -- av_ad_hi = 0
    0788 : 6a7c ; -- <0345> ram $ram_avg_rpm = pa -- av_ad_lo = 124
    0789 : 5c08 ; -- <0345> ram $ram_avg_rpm = pa -- av_write_data = pa
    078a : 6600 ; -- <0346> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    078b : 6a7e ; -- <0346> ram $ram_rpm_valid = 1 -- av_ad_lo = 126
    078c : 5e01 ; -- <0346> ram $ram_rpm_valid = 1 -- av_write_data = 1

-- find RPM column in AFRC map.
    078d : 6600 ; -- <0349> ram gb = $ram_avg_rpm -- av_ad_hi = 0
    078e : 6a7c ; -- <0349> ram gb = $ram_avg_rpm -- av_ad_lo = 124
    078f : 1c17 ; -- <0349> ram gb = $ram_avg_rpm -- gb = av_write_data -- start read cycle
    0790 : 1c18 ; -- <0349> ram gb = $ram_avg_rpm -- gb = av_read_data -- finish read cycle
    0791 : 0a00 ; -- <0357> i = 0
-- :loop_1937 -- = 0x0792

    0792 : 0002 ; -- <0350> a = i

    0793 : 0351 ; -- <0351> a = a<<1
    0794 : 07a0 ; -- <0351> b = 2560
    0795 : 0a00 ; -- <0351> "
    0796 : 67a0 ; -- <0351> av_ad_hi = 256
    0797 : 0100 ; -- <0351> "
    0798 : 6b00 ; -- <0351> av_ad_lo = ad0
    0799 : 0417 ; -- <0351> b = av_begin_read
    079a : 0418 ; -- <0351> b = av_read_data


    079b : 0001 ; -- <0355> a = b
    079c : 0407 ; -- <0355> b = gb

    079d : e406 ; -- <0352> bn gt :else_1949
    079e : 07a4 ; -- <0352> "

    079f : 6600 ; -- <0353> ram $ram_afrc_rpm_col_idx = i -- av_ad_hi = 0
    07a0 : 6a9e ; -- <0353> ram $ram_afrc_rpm_col_idx = i -- av_ad_lo = 158
    07a1 : 5c02 ; -- <0353> ram $ram_afrc_rpm_col_idx = i -- av_write_data = i
    07a2 : e00f ; -- <0354> jmp :rpm_found
    07a3 : 07af ; -- <0354> "



    07a4 : 0002 ; -- <0357> a = i
    07a5 : 0601 ; -- <0357> b = 1
    07a6 : c800 ; -- <0357> i = a+b
    07a7 : 0b00 ; -- <0357> "


    07a8 : 0002 ; -- <0357> a = i
    07a9 : 0610 ; -- <0357> b = $rpm_ref_num_cells
    07aa : e005 ; -- <0357> br lt :loop_1937
    07ab : 0792 ; -- <0357> "

-- :end_1937 -- = 0x07ac
    07ac : 6600 ; -- <0358> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    07ad : 6a7e ; -- <0358> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    07ae : 5e00 ; -- <0358> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- :rpm_found -- = 0x07af

    07af : e00f ; -- <0360> end_event
    07b0 : 009e ; -- <0360> "

-- ######## func clear_ign_history -- = 0x07b1
    07b1 : 3002 ; -- <0373> push i -- func clear_ign_history

-- invalidate the RPM estimate.
    07b2 : 6600 ; -- <0364> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    07b3 : 6a7e ; -- <0364> ram $ram_rpm_valid = 0 -- av_ad_lo = 126
    07b4 : 5e00 ; -- <0364> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    07b5 : 6600 ; -- <0367> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    07b6 : 6a80 ; -- <0367> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 128
    07b7 : 5e10 ; -- <0367> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    07b8 : 0a00 ; -- <0372> i = 0
-- :loop_1976 -- = 0x07b9

    07b9 : 0002 ; -- <0368> a = i
    07ba : 0600 ; -- <0369> b = 0

    07bb : 0351 ; -- <0370> a = a<<1
    07bc : 3001 ; -- <0370> push b -- push b
    07bd : 065a ; -- <0370> b = 90
    07be : 6600 ; -- <0370> av_ad_hi = 0
    07bf : 6b00 ; -- <0370> av_ad_lo = ad0
    07c0 : 5c0c ; -- <0370> pop av_write_data -- pop av_write_data



    07c1 : 0002 ; -- <0372> a = i
    07c2 : 0601 ; -- <0372> b = 1
    07c3 : c800 ; -- <0372> i = a+b
    07c4 : 0b00 ; -- <0372> "


    07c5 : 0002 ; -- <0372> a = i
    07c6 : 0610 ; -- <0372> b = $ign_history_len
    07c7 : e005 ; -- <0372> br lt :loop_1976
    07c8 : 07b9 ; -- <0372> "

-- :end_1976 -- = 0x07c9

    07c9 : 080c ; -- <0374> pop i -- func clear_ign_history
    07ca : fc00 ; -- <0374> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x07cb
-- it's been too long since the last ignition pulse detect.
    07cb : fba0 ; -- <0377> callx clear_ign_history
    07cc : 07b1 ; -- <0377> "
    07cd : fc00 ; -- <0377> "
    07ce : e00f ; -- <0378> end_event
    07cf : 009e ; -- <0378> "

-- ######## event ustimer0_handler -- = 0x07d0
    07d0 : e00f ; -- <0381> end_event
    07d1 : 009e ; -- <0381> "

-- ######## event mstimer0_handler -- = 0x07d2
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    07d2 : 4fa0 ; -- <0387> mstimer0 = 1000
    07d3 : 03e8 ; -- <0387> "

-- realtime counters in RAM.
    07d4 : 6600 ; -- <0390> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    07d5 : 6a42 ; -- <0390> ram a = $ram_seconds_cnt -- av_ad_lo = 66
    07d6 : 0017 ; -- <0390> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    07d7 : 0018 ; -- <0390> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    07d8 : 0601 ; -- <0391> b = 1
    07d9 : c800 ; -- <0392> a = a+b
    07da : 0300 ; -- <0392> "

    07db : 0000 ; -- <0401> a = a
    07dc : 063c ; -- <0401> b = 60

    07dd : e407 ; -- <0393> bn eq :else_2013
    07de : 07f0 ; -- <0393> "

    07df : 6600 ; -- <0394> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    07e0 : 6a42 ; -- <0394> ram $ram_seconds_cnt = 0 -- av_ad_lo = 66
    07e1 : 5e00 ; -- <0394> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    07e2 : 6600 ; -- <0395> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    07e3 : 6a40 ; -- <0395> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    07e4 : 0017 ; -- <0395> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    07e5 : 0018 ; -- <0395> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    07e6 : 0601 ; -- <0396> b = 1
    07e7 : 6600 ; -- <0397> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    07e8 : 6a40 ; -- <0397> ram $ram_minutes_cnt = a+b -- av_ad_lo = 64
    07e9 : c800 ; -- <0397> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    07ea : 5f00 ; -- <0397> "
    07eb : fba0 ; -- <0398> callx minute_events
    07ec : 0a31 ; -- <0398> "
    07ed : fc00 ; -- <0398> "

    07ee : e00f ; -- <0400> jmp :end_2013
    07ef : 07f3 ; -- <0400> "

    07f0 : 6600 ; -- <0401> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    07f1 : 6a42 ; -- <0401> ram $ram_seconds_cnt = a -- av_ad_lo = 66
    07f2 : 5c00 ; -- <0401> ram $ram_seconds_cnt = a -- av_write_data = a


-- all 1-second functions here.
    07f3 : fba0 ; -- <0404> callx check_power_relay
    07f4 : 0a39 ; -- <0404> "
    07f5 : fc00 ; -- <0404> "
    07f6 : fba0 ; -- <0405> callx check_communication
    07f7 : 0a66 ; -- <0405> "
    07f8 : fc00 ; -- <0405> "
    07f9 : fba0 ; -- <0406> callx start_daq_pass
    07fa : 088a ; -- <0406> "
    07fb : fc00 ; -- <0406> "
    07fc : e00f ; -- <0407> end_event
    07fd : 009e ; -- <0407> "

-- :plan_transition_msg -- = 0x07fe
-- "PLAN\x0"
    07fe : 4c50 ; -- <0410> LP
    07ff : 4e41 ; -- <0410> NA
    0800 : 0000 ; -- <0410>   

-- ######## event mstimer2_handler -- = 0x0801
-- engine management plan tick timer.

-- restart timer.
    0801 : 5614 ; -- <0416> mstimer2 = $plan_tick_ms

-- start another TPS reading prior to every plan tick.
-- this will also invoke a o2 reading.  that's done last of all prior to plan_tick,
-- so there's minimal latency between that and the plan_tick utilizing it.
    0802 : 6600 ; -- <0421> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0803 : 6a36 ; -- <0421> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    0804 : 0017 ; -- <0421> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0805 : 0018 ; -- <0421> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    0806 : 0000 ; -- <0424> a = a
    0807 : 0600 ; -- <0424> b = 0

    0808 : e407 ; -- <0422> bn eq :else_2056
    0809 : 080e ; -- <0422> "

    080a : 2206 ; -- <0423> pa = 6
    080b : fba0 ; -- <0423> callx  begin_adc_conversion  $tps_adc_channel
    080c : 095b ; -- <0423> "
    080d : fc00 ; -- <0423> "

    080e : e00f ; -- <0425> end_event
    080f : 009e ; -- <0425> "

-- ######## func plan_tick -- = 0x0810
    0810 : 3004 ; -- <0442> push x -- func plan_tick
    0811 : 303e ; -- <0442> push rtna -- "

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    0812 : 6600 ; -- <0431> ram rtna = $ram_transition_func -- av_ad_hi = 0
    0813 : 6a8c ; -- <0431> ram rtna = $ram_transition_func -- av_ad_lo = 140
    0814 : f817 ; -- <0431> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    0815 : f818 ; -- <0431> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    0816 : 103e ; -- <0432> x = rtna
    0817 : fc00 ; -- <0433> swapra = nop
    0818 : 6600 ; -- <0435> ram b = $ram_transition_func -- av_ad_hi = 0
    0819 : 6a8c ; -- <0435> ram b = $ram_transition_func -- av_ad_lo = 140
    081a : 0417 ; -- <0435> ram b = $ram_transition_func -- b = av_write_data -- start read cycle
    081b : 0418 ; -- <0435> ram b = $ram_transition_func -- b = av_read_data -- finish read cycle

    081c : 0004 ; -- <0438> a = x
    081d : 0401 ; -- <0438> b = b

    081e : e007 ; -- <0436> br eq :else_2078
    081f : 0825 ; -- <0436> "

    0820 : 23a0 ; -- <0437> pa = :plan_transition_msg
    0821 : 07fe ; -- <0437> "
    0822 : fba0 ; -- <0437> callx  set_text_flag  :plan_transition_msg
    0823 : 0ac4 ; -- <0437> "
    0824 : fc00 ; -- <0437> "

-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    0825 : 6600 ; -- <0441> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    0826 : 6a8a ; -- <0441> ram rtna = $ram_puff_len_func -- av_ad_lo = 138
    0827 : f817 ; -- <0441> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    0828 : f818 ; -- <0441> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    0829 : fc00 ; -- <0442> swapra = nop

    082a : f80c ; -- <0445> pop rtna -- func plan_tick
    082b : 100c ; -- <0445> pop x -- "
    082c : fc00 ; -- <0445> swapra = nop

-- ######## event uart_rx_handler -- = 0x082d
-- :again -- = 0x082d
    082d : fba0 ; -- <0448> pollchar
    082e : 00ba ; -- <0448> "
    082f : fc00 ; -- <0448> "
    0830 : 1000 ; -- <0449> x = a

    0831 : 0004 ; -- <0452> a = x
    0832 : 0760 ; -- <0452> b = -1

    0833 : e407 ; -- <0450> bn eq :else_2099
    0834 : 0837 ; -- <0450> "

    0835 : e00f ; -- <0451> event_return
    0836 : 009e ; -- <0451> "


    0837 : 0004 ; -- <0455> a = x
    0838 : 060a ; -- <0455> b = 10

    0839 : e407 ; -- <0453> bn eq :else_2105
    083a : 083e ; -- <0453> "

    083b : fba0 ; -- <0454> callx  postpone_comm_restart
    083c : 0a93 ; -- <0454> "
    083d : fc00 ; -- <0454> "

    083e : 2004 ; -- <0456> pa = x
    083f : fba0 ; -- <0456> callx  parse_key  x
    0840 : 0398 ; -- <0456> "
    0841 : fc00 ; -- <0456> "
    0842 : e00f ; -- <0457> jmp :again
    0843 : 082d ; -- <0457> "
    0844 : e00f ; -- <0458> end_event
    0845 : 009e ; -- <0458> "

-- ######## event uart_rx_overflow_handler -- = 0x0846
    0846 : 7fa0 ; -- <0461> error_halt_code $err_rx_overflow -- leds = 0xfffe
    0847 : fffe ; -- <0461> "
    0848 : e00f ; -- <0461> error_halt_code $err_rx_overflow
    0849 : 0848 ; -- <0461> "
    084a : e00f ; -- <0462> end_event
    084b : 009e ; -- <0462> "

-- :tx_overflow_msg -- = 0x084c
-- "TXO\x0"
    084c : 5854 ; -- <0465> XT
    084d : 004f ; -- <0465>  O

-- ######## event uart_tx_overflow_handler -- = 0x084e
-- error_halt_code $err_tx_overflow
    084e : 23a0 ; -- <0469> pa = :tx_overflow_msg
    084f : 084c ; -- <0469> "
    0850 : fba0 ; -- <0469> callx  set_text_flag  :tx_overflow_msg
    0851 : 0ac4 ; -- <0469> "
    0852 : fc00 ; -- <0469> "
    0853 : e00f ; -- <0470> end_event
    0854 : 009e ; -- <0470> "

-- ######## event key0_handler -- = 0x0855
    0855 : 026b ; -- <0473> a = 107 -- putasc "k"
    0856 : fba0 ; -- <0473> putasc "k"
    0857 : 00ab ; -- <0473> "
    0858 : fc00 ; -- <0473> "
    0859 : 0230 ; -- <0474> a = 48 -- putasc "0"
    085a : fba0 ; -- <0474> putasc "0"
    085b : 00ab ; -- <0474> "
    085c : fc00 ; -- <0474> "
    085d : e00f ; -- <0475> end_event
    085e : 009e ; -- <0475> "

-- ######## event key1_handler -- = 0x085f
    085f : 026b ; -- <0478> a = 107 -- putasc "k"
    0860 : fba0 ; -- <0478> putasc "k"
    0861 : 00ab ; -- <0478> "
    0862 : fc00 ; -- <0478> "
    0863 : 0231 ; -- <0479> a = 49 -- putasc "1"
    0864 : fba0 ; -- <0479> putasc "1"
    0865 : 00ab ; -- <0479> "
    0866 : fc00 ; -- <0479> "
    0867 : e00f ; -- <0480> end_event
    0868 : 009e ; -- <0480> "

-- ######## event softevent3_handler -- = 0x0869
    0869 : e00f ; -- <0483> end_event
    086a : 009e ; -- <0483> "

-- ######## event softevent2_handler -- = 0x086b
    086b : e00f ; -- <0486> end_event
    086c : 009e ; -- <0486> "

-- ######## event softevent1_handler -- = 0x086d
    086d : e00f ; -- <0489> end_event
    086e : 009e ; -- <0489> "

-- ######## event softevent0_handler -- = 0x086f
    086f : e00f ; -- <0492> end_event
    0870 : 009e ; -- <0492> "

-- :rpm_msg -- = 0x0871
-- ": rpm=\x0"
    0871 : 203a ; -- <0495>  :
    0872 : 7072 ; -- <0495> pr
    0873 : 3d6d ; -- <0495> =m
    0874 : 0000 ; -- <0495>   

-- :puff_len_msg -- = 0x0875
-- " pfl=\x0"
    0875 : 7020 ; -- <0498> p 
    0876 : 6c66 ; -- <0498> lf
    0877 : 003d ; -- <0498>  =

-- :afrc_coords_msg -- = 0x0878
-- " map=\x0"
    0878 : 6d20 ; -- <0501> m 
    0879 : 7061 ; -- <0501> pa
    087a : 003d ; -- <0501>  =

-- :o2_msg -- = 0x087b
-- " o2=\x0"
    087b : 6f20 ; -- <0504> o 
    087c : 3d32 ; -- <0504> =2
    087d : 0000 ; -- <0504>   

-- :maf_msg -- = 0x087e
-- " af=\x0"
    087e : 6120 ; -- <0507> a 
    087f : 3d66 ; -- <0507> =f
    0880 : 0000 ; -- <0507>   

-- :tps_msg -- = 0x0881
-- " tp=\x0"
    0881 : 7420 ; -- <0510> t 
    0882 : 3d70 ; -- <0510> =p
    0883 : 0000 ; -- <0510>   

-- :block_temp_idx_msg -- = 0x0884
-- " bti=\x0"
    0884 : 6220 ; -- <0513> b 
    0885 : 6974 ; -- <0513> it
    0886 : 003d ; -- <0513>  =

-- :afterstart_idx_msg -- = 0x0887
-- " asi=\x0"
    0887 : 6120 ; -- <0516> a 
    0888 : 6973 ; -- <0516> is
    0889 : 003d ; -- <0516>  =

-- ######## func start_daq_pass -- = 0x088a
    088a : 3004 ; -- <0592> push x -- func start_daq_pass
    088b : 303e ; -- <0592> push rtna -- "

-- daq pass counter in RAM.
    088c : 6600 ; -- <0520> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    088d : 6a14 ; -- <0520> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    088e : 0017 ; -- <0520> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    088f : 0018 ; -- <0520> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0890 : 0601 ; -- <0521> b = 1
    0891 : c800 ; -- <0522> a = a+b
    0892 : 0300 ; -- <0522> "
    0893 : 7c00 ; -- <0523> leds = a
    0894 : 6600 ; -- <0524> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    0895 : 6a14 ; -- <0524> ram $ram_daq_pass_cnt = a -- av_ad_lo = 20
    0896 : 5c00 ; -- <0524> ram $ram_daq_pass_cnt = a -- av_write_data = a
    0897 : fba0 ; -- <0525> call :put4x
    0898 : 00d3 ; -- <0525> "
    0899 : fc00 ; -- <0525> "

    089a : 03a0 ; -- <0527> a = :rpm_msg
    089b : 0871 ; -- <0527> "
    089c : fba0 ; -- <0528> call :print_nt
    089d : 015f ; -- <0528> "
    089e : fc00 ; -- <0528> "
    089f : 0200 ; -- <0529> a = 0
    08a0 : 6600 ; -- <0530> ram x = $ram_rpm_valid -- av_ad_hi = 0
    08a1 : 6a7e ; -- <0530> ram x = $ram_rpm_valid -- av_ad_lo = 126
    08a2 : 1017 ; -- <0530> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    08a3 : 1018 ; -- <0530> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle

    08a4 : 0004 ; -- <0533> a = x
    08a5 : 0600 ; -- <0533> b = 0

    08a6 : e007 ; -- <0531> br eq :else_2214
    08a7 : 08ac ; -- <0531> "

    08a8 : 6600 ; -- <0532> ram a = $ram_avg_rpm -- av_ad_hi = 0
    08a9 : 6a7c ; -- <0532> ram a = $ram_avg_rpm -- av_ad_lo = 124
    08aa : 0017 ; -- <0532> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    08ab : 0018 ; -- <0532> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle

    08ac : fba0 ; -- <0534> call :put4x
    08ad : 00d3 ; -- <0534> "
    08ae : fc00 ; -- <0534> "

    08af : 03a0 ; -- <0536> a = :puff_len_msg
    08b0 : 0875 ; -- <0536> "
    08b1 : fba0 ; -- <0537> call :print_nt
    08b2 : 015f ; -- <0537> "
    08b3 : fc00 ; -- <0537> "
    08b4 : 0025 ; -- <0538> a = puff_len_us
    08b5 : fba0 ; -- <0539> call :put4x
    08b6 : 00d3 ; -- <0539> "
    08b7 : fc00 ; -- <0539> "
    08b8 : 022c ; -- <0540> a = 44 -- putasc ","
    08b9 : fba0 ; -- <0540> putasc ","
    08ba : 00ab ; -- <0540> "
    08bb : fc00 ; -- <0540> "
    08bc : 6600 ; -- <0541> ram a = $ram_puff_count -- av_ad_hi = 0
    08bd : 6a92 ; -- <0541> ram a = $ram_puff_count -- av_ad_lo = 146
    08be : 0017 ; -- <0541> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    08bf : 0018 ; -- <0541> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    08c0 : fba0 ; -- <0542> call :put4x
    08c1 : 00d3 ; -- <0542> "
    08c2 : fc00 ; -- <0542> "

    08c3 : 03a0 ; -- <0544> a = :afrc_coords_msg
    08c4 : 0878 ; -- <0544> "
    08c5 : fba0 ; -- <0545> call :print_nt
    08c6 : 015f ; -- <0545> "
    08c7 : fc00 ; -- <0545> "
    08c8 : 6600 ; -- <0546> ram a = $ram_afrc_rpm_col_idx -- av_ad_hi = 0
    08c9 : 6a9e ; -- <0546> ram a = $ram_afrc_rpm_col_idx -- av_ad_lo = 158
    08ca : 0017 ; -- <0546> ram a = $ram_afrc_rpm_col_idx -- a = av_write_data -- start read cycle
    08cb : 0018 ; -- <0546> ram a = $ram_afrc_rpm_col_idx -- a = av_read_data -- finish read cycle
    08cc : fba0 ; -- <0547> call :put4x
    08cd : 00d3 ; -- <0547> "
    08ce : fc00 ; -- <0547> "
    08cf : 022c ; -- <0548> a = 44 -- putasc ","
    08d0 : fba0 ; -- <0548> putasc ","
    08d1 : 00ab ; -- <0548> "
    08d2 : fc00 ; -- <0548> "
    08d3 : 6600 ; -- <0549> ram a = $ram_afrc_maf_row_idx -- av_ad_hi = 0
    08d4 : 6a9c ; -- <0549> ram a = $ram_afrc_maf_row_idx -- av_ad_lo = 156
    08d5 : 0017 ; -- <0549> ram a = $ram_afrc_maf_row_idx -- a = av_write_data -- start read cycle
    08d6 : 0018 ; -- <0549> ram a = $ram_afrc_maf_row_idx -- a = av_read_data -- finish read cycle
    08d7 : fba0 ; -- <0550> call :put4x
    08d8 : 00d3 ; -- <0550> "
    08d9 : fc00 ; -- <0550> "

    08da : 03a0 ; -- <0552> a = :o2_msg
    08db : 087b ; -- <0552> "
    08dc : fba0 ; -- <0553> call :print_nt
    08dd : 015f ; -- <0553> "
    08de : fc00 ; -- <0553> "
    08df : 0205 ; -- <0554> a = $o2_adc_channel

    08e0 : 0351 ; -- <0555> a = a<<1
    08e1 : 0626 ; -- <0555> b = 38
    08e2 : 6600 ; -- <0555> av_ad_hi = 0
    08e3 : 6b00 ; -- <0555> av_ad_lo = ad0
    08e4 : 0417 ; -- <0555> b = av_begin_read
    08e5 : 0418 ; -- <0555> b = av_read_data

    08e6 : 0001 ; -- <0556> a = b
    08e7 : fba0 ; -- <0557> call :put4x
    08e8 : 00d3 ; -- <0557> "
    08e9 : fc00 ; -- <0557> "

    08ea : 03a0 ; -- <0559> a = :maf_msg
    08eb : 087e ; -- <0559> "
    08ec : fba0 ; -- <0560> call :print_nt
    08ed : 015f ; -- <0560> "
    08ee : fc00 ; -- <0560> "
    08ef : 6600 ; -- <0561> ram a = $ram_maf_adc_filtered -- av_ad_hi = 0
    08f0 : 6a98 ; -- <0561> ram a = $ram_maf_adc_filtered -- av_ad_lo = 152
    08f1 : 0017 ; -- <0561> ram a = $ram_maf_adc_filtered -- a = av_write_data -- start read cycle
    08f2 : 0018 ; -- <0561> ram a = $ram_maf_adc_filtered -- a = av_read_data -- finish read cycle
    08f3 : fba0 ; -- <0562> call :put4x
    08f4 : 00d3 ; -- <0562> "
    08f5 : fc00 ; -- <0562> "

    08f6 : 03a0 ; -- <0564> a = :tps_msg
    08f7 : 0881 ; -- <0564> "
    08f8 : fba0 ; -- <0565> call :print_nt
    08f9 : 015f ; -- <0565> "
    08fa : fc00 ; -- <0565> "
    08fb : 0206 ; -- <0566> a = $tps_adc_channel

    08fc : 0351 ; -- <0567> a = a<<1
    08fd : 0626 ; -- <0567> b = 38
    08fe : 6600 ; -- <0567> av_ad_hi = 0
    08ff : 6b00 ; -- <0567> av_ad_lo = ad0
    0900 : 0417 ; -- <0567> b = av_begin_read
    0901 : 0418 ; -- <0567> b = av_read_data

    0902 : 0001 ; -- <0568> a = b
    0903 : fba0 ; -- <0569> call :put4x
    0904 : 00d3 ; -- <0569> "
    0905 : fc00 ; -- <0569> "
    0906 : 022c ; -- <0570> a = 44 -- putasc ","
    0907 : fba0 ; -- <0570> putasc ","
    0908 : 00ab ; -- <0570> "
    0909 : fc00 ; -- <0570> "
    090a : 6600 ; -- <0571> ram a = $ram_tps_avg -- av_ad_hi = 0
    090b : 6aae ; -- <0571> ram a = $ram_tps_avg -- av_ad_lo = 174
    090c : 0017 ; -- <0571> ram a = $ram_tps_avg -- a = av_write_data -- start read cycle
    090d : 0018 ; -- <0571> ram a = $ram_tps_avg -- a = av_read_data -- finish read cycle
    090e : fba0 ; -- <0572> call :put4x
    090f : 00d3 ; -- <0572> "
    0910 : fc00 ; -- <0572> "

    0911 : 03a0 ; -- <0574> a = :block_temp_idx_msg
    0912 : 0884 ; -- <0574> "
    0913 : fba0 ; -- <0575> call :print_nt
    0914 : 015f ; -- <0575> "
    0915 : fc00 ; -- <0575> "
    0916 : 6600 ; -- <0576> ram a = $ram_block_temp_map_idx -- av_ad_hi = 0
    0917 : 6aa0 ; -- <0576> ram a = $ram_block_temp_map_idx -- av_ad_lo = 160
    0918 : 0017 ; -- <0576> ram a = $ram_block_temp_map_idx -- a = av_write_data -- start read cycle
    0919 : 0018 ; -- <0576> ram a = $ram_block_temp_map_idx -- a = av_read_data -- finish read cycle
    091a : fba0 ; -- <0577> call :put4x
    091b : 00d3 ; -- <0577> "
    091c : fc00 ; -- <0577> "

    091d : 03a0 ; -- <0579> a = :afterstart_idx_msg
    091e : 0887 ; -- <0579> "
    091f : fba0 ; -- <0580> call :print_nt
    0920 : 015f ; -- <0580> "
    0921 : fc00 ; -- <0580> "
    0922 : 6600 ; -- <0581> ram a = $ram_afterstart_map_idx -- av_ad_hi = 0
    0923 : 6aa4 ; -- <0581> ram a = $ram_afterstart_map_idx -- av_ad_lo = 164
    0924 : 0017 ; -- <0581> ram a = $ram_afterstart_map_idx -- a = av_write_data -- start read cycle
    0925 : 0018 ; -- <0581> ram a = $ram_afterstart_map_idx -- a = av_read_data -- finish read cycle
    0926 : fba0 ; -- <0582> call :put4x
    0927 : 00d3 ; -- <0582> "
    0928 : fc00 ; -- <0582> "

-- start to acquire & report all anmux channels.
    0929 : 0207 ; -- <0585> a = ($anmux_num_channels - 1)
    092a : fba0 ; -- <0586> call :anmux_set_chn
    092b : 00c2 ; -- <0586> "
    092c : fc00 ; -- <0586> "
    092d : 5205 ; -- <0587> mstimer1 = $anmux_settle_ms

-- observe MCU utilization.  this RAM variable can be seen by the debugger.
    092e : 6600 ; -- <0590> ram $ram_mcu_usage_cnt = usage_count -- av_ad_hi = 0
    092f : 6a44 ; -- <0590> ram $ram_mcu_usage_cnt = usage_count -- av_ad_lo = 68
    0930 : 5c0f ; -- <0590> ram $ram_mcu_usage_cnt = usage_count -- av_write_data = usage_count
    0931 : 3e00 ; -- <0591> usage_count = 0

    0932 : f80c ; -- <0593> pop rtna -- func start_daq_pass
    0933 : 100c ; -- <0593> pop x -- "
    0934 : fc00 ; -- <0593> swapra = nop

-- ######## event mstimer1_handler -- = 0x0935
-- anmux signal has settled.

    0935 : 6600 ; -- <0597> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0936 : 6a36 ; -- <0597> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    0937 : 0017 ; -- <0597> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0938 : 0018 ; -- <0597> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    0939 : 0000 ; -- <0602> a = a
    093a : 0600 ; -- <0602> b = 0

    093b : e007 ; -- <0598> br eq :else_2363
    093c : 0940 ; -- <0598> "

-- ADC is busy right now.  wait a while & try again.
    093d : 5202 ; -- <0600> mstimer1 = $anmux_retry_ms
    093e : e00f ; -- <0601> event_return
    093f : 009e ; -- <0601> "


-- start a reading from the current anmux channel.
    0940 : 0220 ; -- <0605> a = 32 -- putasc " "
    0941 : fba0 ; -- <0605> putasc " "
    0942 : 00ab ; -- <0605> "
    0943 : fc00 ; -- <0605> "
    0944 : 0273 ; -- <0606> a = 115 -- putasc "s"
    0945 : fba0 ; -- <0606> putasc "s"
    0946 : 00ab ; -- <0606> "
    0947 : fc00 ; -- <0606> "
    0948 : fba0 ; -- <0607> call :anmux_get_chn
    0949 : 00c6 ; -- <0607> "
    094a : fc00 ; -- <0607> "
    094b : 0630 ; -- <0608> b = 48 -- asc b = "0"
    094c : c800 ; -- <0609> a = a+b -- putchar a+b
    094d : 0300 ; -- <0609> "
    094e : fba0 ; -- <0609> putchar a+b
    094f : 00ab ; -- <0609> "
    0950 : fc00 ; -- <0609> "
    0951 : 023d ; -- <0610> a = 61 -- putasc "="
    0952 : fba0 ; -- <0610> putasc "="
    0953 : 00ab ; -- <0610> "
    0954 : fc00 ; -- <0610> "
    0955 : 2207 ; -- <0611> pa = 7
    0956 : fba0 ; -- <0611> callx  begin_adc_conversion  $anmux_adc_channel
    0957 : 095b ; -- <0611> "
    0958 : fc00 ; -- <0611> "
    0959 : e00f ; -- <0612> end_event
    095a : 009e ; -- <0612> "

-- ######## func begin_adc_conversion -- = 0x095b

-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.

    095b : 6600 ; -- <0618> ram $ram_adc_chn_pending = next_channel -- av_ad_hi = 0
    095c : 6a36 ; -- <0618> ram $ram_adc_chn_pending = next_channel -- av_ad_lo = 54
    095d : 5c08 ; -- <0618> ram $ram_adc_chn_pending = next_channel -- av_write_data = next_channel
    095e : 0008 ; -- <0619> a = next_channel
    095f : 0352 ; -- <0620> a = a<<4
    0960 : 0352 ; -- <0621> a = a<<4
    0961 : 0351 ; -- <0622> a = a<<1
    0962 : 0351 ; -- <0623> a = a<<1
    0963 : 0351 ; -- <0624> a = a<<1
    0964 : 5800 ; -- <0625> spi_data = a
    0965 : 6600 ; -- <0626> ram $ram_adc_junk = 1 -- av_ad_hi = 0
    0966 : 6a38 ; -- <0626> ram $ram_adc_junk = 1 -- av_ad_lo = 56
    0967 : 5e01 ; -- <0626> ram $ram_adc_junk = 1 -- av_write_data = 1

    0968 : fc00 ; -- <0628> swapra = nop

-- ######## event spi_done_handler -- = 0x0969
-- discard the results of the first SPI exchange with the ADC.  that's only for writing the channel num out to the ADC.
    0969 : 6600 ; -- <0631> ram a = $ram_adc_junk -- av_ad_hi = 0
    096a : 6a38 ; -- <0631> ram a = $ram_adc_junk -- av_ad_lo = 56
    096b : 0017 ; -- <0631> ram a = $ram_adc_junk -- a = av_write_data -- start read cycle
    096c : 0018 ; -- <0631> ram a = $ram_adc_junk -- a = av_read_data -- finish read cycle

    096d : 0000 ; -- <0643> a = a
    096e : 0600 ; -- <0643> b = 0

    096f : e007 ; -- <0632> br eq :else_2415
    0970 : 0980 ; -- <0632> "

-- start another SPI exchange to retrieve the actual reading.
    0971 : 6600 ; -- <0634> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0972 : 6a36 ; -- <0634> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    0973 : 0017 ; -- <0634> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0974 : 0018 ; -- <0634> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle
    0975 : 0352 ; -- <0635> a = a<<4
    0976 : 0352 ; -- <0636> a = a<<4
    0977 : 0351 ; -- <0637> a = a<<1
    0978 : 0351 ; -- <0638> a = a<<1
    0979 : 0351 ; -- <0639> a = a<<1
    097a : 5800 ; -- <0640> spi_data = a
    097b : 6600 ; -- <0641> ram $ram_adc_junk = 0 -- av_ad_hi = 0
    097c : 6a38 ; -- <0641> ram $ram_adc_junk = 0 -- av_ad_lo = 56
    097d : 5e00 ; -- <0641> ram $ram_adc_junk = 0 -- av_write_data = 0
    097e : e00f ; -- <0642> event_return
    097f : 009e ; -- <0642> "


-- memorize an actual ADC reading.
    0980 : 6600 ; -- <0646> ram i = $ram_adc_chn_pending -- av_ad_hi = 0
    0981 : 6a36 ; -- <0646> ram i = $ram_adc_chn_pending -- av_ad_lo = 54
    0982 : 0817 ; -- <0646> ram i = $ram_adc_chn_pending -- i = av_write_data -- start read cycle
    0983 : 0818 ; -- <0646> ram i = $ram_adc_chn_pending -- i = av_read_data -- finish read cycle
    0984 : 6600 ; -- <0647> ram $ram_adc_chn_pending = 0 -- av_ad_hi = 0
    0985 : 6a36 ; -- <0647> ram $ram_adc_chn_pending = 0 -- av_ad_lo = 54
    0986 : 5e00 ; -- <0647> ram $ram_adc_chn_pending = 0 -- av_write_data = 0
    0987 : 0002 ; -- <0648> a = i
    0988 : 0416 ; -- <0649> b = spi_data

    0989 : 0351 ; -- <0650> a = a<<1
    098a : 3001 ; -- <0650> push b -- push b
    098b : 0626 ; -- <0650> b = 38
    098c : 6600 ; -- <0650> av_ad_hi = 0
    098d : 6b00 ; -- <0650> av_ad_lo = ad0
    098e : 5c0c ; -- <0650> pop av_write_data -- pop av_write_data


-- react to ADC reading.

    098f : 0002 ; -- <0657> a = i
    0990 : 0606 ; -- <0657> b = 6

    0991 : e407 ; -- <0653> bn eq :else_2449
    0992 : 099c ; -- <0653> "

    0993 : 2205 ; -- <0654> pa = 5
    0994 : fba0 ; -- <0654> callx  begin_adc_conversion  $o2_adc_channel
    0995 : 095b ; -- <0654> "
    0996 : fc00 ; -- <0654> "
    0997 : fba0 ; -- <0655> callx  interpret_tps
    0998 : 0b89 ; -- <0655> "
    0999 : fc00 ; -- <0655> "
    099a : e00f ; -- <0656> event_return
    099b : 009e ; -- <0656> "


    099c : 0002 ; -- <0661> a = i
    099d : 0605 ; -- <0661> b = 5

    099e : e407 ; -- <0658> bn eq :else_2462
    099f : 09a6 ; -- <0658> "

    09a0 : 2204 ; -- <0659> pa = 4
    09a1 : fba0 ; -- <0659> callx  begin_adc_conversion  $maf_adc_channel
    09a2 : 095b ; -- <0659> "
    09a3 : fc00 ; -- <0659> "
    09a4 : e00f ; -- <0660> event_return
    09a5 : 009e ; -- <0660> "


    09a6 : 0002 ; -- <0666> a = i
    09a7 : 0604 ; -- <0666> b = 4

    09a8 : e407 ; -- <0662> bn eq :else_2472
    09a9 : 09b2 ; -- <0662> "

    09aa : fba0 ; -- <0663> callx  interpret_maf
    09ab : 0b49 ; -- <0663> "
    09ac : fc00 ; -- <0663> "
    09ad : fba0 ; -- <0664> callx  plan_tick
    09ae : 0810 ; -- <0664> "
    09af : fc00 ; -- <0664> "
    09b0 : e00f ; -- <0665> event_return
    09b1 : 009e ; -- <0665> "


    09b2 : 0002 ; -- <0694> a = i
    09b3 : 0607 ; -- <0694> b = 7

    09b4 : e407 ; -- <0667> bn eq :else_2484
    09b5 : 09ea ; -- <0667> "

-- report anmux reading.
    09b6 : 0016 ; -- <0669> a = spi_data
    09b7 : fba0 ; -- <0670> call :put4x
    09b8 : 00d3 ; -- <0670> "
    09b9 : fc00 ; -- <0670> "

-- memorize anmux reading.
    09ba : fba0 ; -- <0673> call :anmux_get_chn
    09bb : 00c6 ; -- <0673> "
    09bc : fc00 ; -- <0673> "
    09bd : 0416 ; -- <0674> b = spi_data

    09be : 0351 ; -- <0675> a = a<<1
    09bf : 3001 ; -- <0675> push b -- push b
    09c0 : 0616 ; -- <0675> b = 22
    09c1 : 6600 ; -- <0675> av_ad_hi = 0
    09c2 : 6b00 ; -- <0675> av_ad_lo = ad0
    09c3 : 5c0c ; -- <0675> pop av_write_data -- pop av_write_data


-- decrement anmux channel & start waiting again.
    09c4 : fba0 ; -- <0678> call :anmux_get_chn
    09c5 : 00c6 ; -- <0678> "
    09c6 : fc00 ; -- <0678> "

    09c7 : 0000 ; -- <0685> a = a
    09c8 : 0600 ; -- <0685> b = 0

    09c9 : e007 ; -- <0679> br eq :else_2505
    09ca : 09d4 ; -- <0679> "

    09cb : 0760 ; -- <0680> b = -1
    09cc : c800 ; -- <0681> a = a+b
    09cd : 0300 ; -- <0681> "
    09ce : fba0 ; -- <0682> call :anmux_set_chn
    09cf : 00c2 ; -- <0682> "
    09d0 : fc00 ; -- <0682> "
    09d1 : 5205 ; -- <0683> mstimer1 = $anmux_settle_ms
    09d2 : e00f ; -- <0684> event_return
    09d3 : 009e ; -- <0684> "


-- end of temperature daq pass.
    09d4 : fba0 ; -- <0688> callx  interpret_block_temp
    09d5 : 0622 ; -- <0688> "
    09d6 : fc00 ; -- <0688> "
    09d7 : fba0 ; -- <0689> callx  report_plan
    09d8 : 0b2e ; -- <0689> "
    09d9 : fc00 ; -- <0689> "
    09da : fba0 ; -- <0690> callx  report_text_flags
    09db : 0afb ; -- <0690> "
    09dc : fc00 ; -- <0690> "
    09dd : 020d ; -- <0691> a = 13 -- puteol
    09de : fba0 ; -- <0691> puteol
    09df : 00ab ; -- <0691> "
    09e0 : fc00 ; -- <0691> "
    09e1 : 020a ; -- <0691> a = 10 -- puteol
    09e2 : fba0 ; -- <0691> puteol
    09e3 : 00ab ; -- <0691> "
    09e4 : fc00 ; -- <0691> "
    09e5 : 6600 ; -- <0692> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    09e6 : 6a3a ; -- <0692> ram $ram_dial_setting = spi_data -- av_ad_lo = 58
    09e7 : 5c16 ; -- <0692> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    09e8 : e00f ; -- <0693> event_return
    09e9 : 009e ; -- <0693> "

    09ea : e00f ; -- <0695> end_event
    09eb : 009e ; -- <0695> "

-- :power_lost_msg -- = 0x09ec
-- "PWL\x0"
    09ec : 5750 ; -- <0698> WP
    09ed : 004c ; -- <0698>  L

-- ######## event power_lost_handler -- = 0x09ee
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    09ee : 8a00 ; -- <0707> power_duty = $power_duty_closing
    09ef : 6600 ; -- <0708> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    09f0 : 6a14 ; -- <0708> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    09f1 : 0017 ; -- <0708> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    09f2 : 0018 ; -- <0708> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    09f3 : 0602 ; -- <0709> b = $relay_hold_passes
    09f4 : 6600 ; -- <0710> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    09f5 : 6a3e ; -- <0710> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 62
    09f6 : c800 ; -- <0710> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    09f7 : 5f00 ; -- <0710> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    09f8 : fba0 ; -- <0715> callx  save_persistent_data
    09f9 : 0a65 ; -- <0715> "
    09fa : fc00 ; -- <0715> "

    09fb : 23a0 ; -- <0717> pa = :power_lost_msg
    09fc : 09ec ; -- <0717> "
    09fd : fba0 ; -- <0717> callx  set_text_flag  :power_lost_msg
    09fe : 0ac4 ; -- <0717> "
    09ff : fc00 ; -- <0717> "
    0a00 : e00f ; -- <0718> end_event
    0a01 : 009e ; -- <0718> "

-- :ign_off_msg -- = 0x0a02
-- "IGOF\x0"
    0a02 : 4749 ; -- <0721> GI
    0a03 : 464f ; -- <0721> FO
    0a04 : 0000 ; -- <0721>   

-- ######## event ign_switch_off_handler -- = 0x0a05
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    0a05 : 6600 ; -- <0725> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0a06 : 6a40 ; -- <0725> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0a07 : 0017 ; -- <0725> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0a08 : 0018 ; -- <0725> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0a09 : 060a ; -- <0726> b = $power_extend_minutes
    0a0a : 6600 ; -- <0727> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    0a0b : 6a3c ; -- <0727> ram $ram_power_down_at_min = a+b -- av_ad_lo = 60
    0a0c : c800 ; -- <0727> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    0a0d : 5f00 ; -- <0727> "
    0a0e : 23a0 ; -- <0728> pa = :ign_off_msg
    0a0f : 0a02 ; -- <0728> "
    0a10 : fba0 ; -- <0728> callx  set_text_flag   :ign_off_msg
    0a11 : 0ac4 ; -- <0728> "
    0a12 : fc00 ; -- <0728> "
    0a13 : e00f ; -- <0729> end_event
    0a14 : 009e ; -- <0729> "

-- :ign_on_msg -- = 0x0a15
-- "IGON\x0"
    0a15 : 4749 ; -- <0732> GI
    0a16 : 4e4f ; -- <0732> NO
    0a17 : 0000 ; -- <0732>   

-- ######## event ign_switch_on_handler -- = 0x0a18
    0a18 : 6600 ; -- <0735> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0a19 : 6a3c ; -- <0735> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 60
    0a1a : 5f60 ; -- <0735> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0a1b : 23a0 ; -- <0736> pa = :ign_on_msg
    0a1c : 0a15 ; -- <0736> "
    0a1d : fba0 ; -- <0736> callx  set_text_flag   :ign_on_msg
    0a1e : 0ac4 ; -- <0736> "
    0a1f : fc00 ; -- <0736> "
    0a20 : e00f ; -- <0737> end_event
    0a21 : 009e ; -- <0737> "

-- ######## event puff1_done_handler -- = 0x0a22
-- puff just finished.  set length of next puff.
    0a22 : 6600 ; -- <0741> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    0a23 : 6a90 ; -- <0741> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 144
    0a24 : 9417 ; -- <0741> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    0a25 : 9418 ; -- <0741> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    0a26 : 6600 ; -- <0744> ram a = $ram_puff_count -- av_ad_hi = 0
    0a27 : 6a92 ; -- <0744> ram a = $ram_puff_count -- av_ad_lo = 146
    0a28 : 0017 ; -- <0744> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0a29 : 0018 ; -- <0744> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0a2a : 0601 ; -- <0745> b = 1
    0a2b : 6600 ; -- <0746> ram $ram_puff_count = a+b -- av_ad_hi = 0
    0a2c : 6a92 ; -- <0746> ram $ram_puff_count = a+b -- av_ad_lo = 146
    0a2d : c800 ; -- <0746> ram $ram_puff_count = a+b -- av_write_data = a+b
    0a2e : 5f00 ; -- <0746> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    0a2f : e00f ; -- <0757> end_event
    0a30 : 009e ; -- <0757> "

-- ######## func minute_events -- = 0x0a31
    0a31 : 303e ; -- <0761> push rtna -- func minute_events

    0a32 : fba0 ; -- <0760> callx  check_power_down
    0a33 : 0a4e ; -- <0760> "
    0a34 : fc00 ; -- <0760> "

    0a35 : f80c ; -- <0762> pop rtna -- func minute_events
    0a36 : fc00 ; -- <0762> swapra = nop

-- :power_hold_msg -- = 0x0a37
-- "PWH\x0"
    0a37 : 5750 ; -- <0764> WP
    0a38 : 0048 ; -- <0764>  H

-- ######## func check_power_relay -- = 0x0a39
    0a39 : 303e ; -- <0774> push rtna -- func check_power_relay

    0a3a : 6600 ; -- <0767> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0a3b : 6a14 ; -- <0767> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0a3c : 0017 ; -- <0767> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0a3d : 0018 ; -- <0767> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0a3e : 6600 ; -- <0768> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    0a3f : 6a3e ; -- <0768> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 62
    0a40 : 0417 ; -- <0768> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    0a41 : 0418 ; -- <0768> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle

    0a42 : 0000 ; -- <0773> a = a
    0a43 : 0401 ; -- <0773> b = b

    0a44 : e407 ; -- <0769> bn eq :else_2628
    0a45 : 0a4c ; -- <0769> "

-- time to begin "solenoid saver" coil power reduction by PWM.
    0a46 : 8a19 ; -- <0771> power_duty = $power_duty_holding
    0a47 : 23a0 ; -- <0772> pa = :power_hold_msg
    0a48 : 0a37 ; -- <0772> "
    0a49 : fba0 ; -- <0772> callx  set_text_flag  :power_hold_msg
    0a4a : 0ac4 ; -- <0772> "
    0a4b : fc00 ; -- <0772> "


    0a4c : f80c ; -- <0775> pop rtna -- func check_power_relay
    0a4d : fc00 ; -- <0775> swapra = nop

-- ######## func check_power_down -- = 0x0a4e

-- check power-down deadline in RAM.
    0a4e : 6600 ; -- <0778> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0a4f : 6a40 ; -- <0778> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0a50 : 0017 ; -- <0778> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0a51 : 0018 ; -- <0778> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0a52 : 6600 ; -- <0779> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    0a53 : 6a3c ; -- <0779> ram b = $ram_power_down_at_min -- av_ad_lo = 60
    0a54 : 0417 ; -- <0779> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    0a55 : 0418 ; -- <0779> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle

    0a56 : 0000 ; -- <0782> a = a
    0a57 : 0401 ; -- <0782> b = b

    0a58 : e407 ; -- <0780> bn eq :else_2648
    0a59 : 0a5c ; -- <0780> "

    0a5a : e00f ; -- <0781> jmp :power_down
    0a5b : 0a5d ; -- <0781> "


    0a5c : fc00 ; -- <0784> swapra = nop

-- :power_down -- = 0x0a5d
-- this code never returns.
    0a5d : fba0 ; -- <0787> callx  save_persistent_data
    0a5e : 0a65 ; -- <0787> "
    0a5f : fc00 ; -- <0787> "
    0a60 : 8a32 ; -- <0788> power_duty = $power_duty_opening
    0a61 : 7fa0 ; -- <0789> error_halt_code $err_power_down -- leds = 0xfffc
    0a62 : fffc ; -- <0789> "
    0a63 : e00f ; -- <0789> error_halt_code $err_power_down
    0a64 : 0a63 ; -- <0789> "

-- ######## func save_persistent_data -- = 0x0a65


    0a65 : fc00 ; -- <0793> swapra = nop

-- ######## func check_communication -- = 0x0a66
    0a66 : 303e ; -- <0813> push rtna -- func check_communication

    0a67 : 6600 ; -- <0795> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    0a68 : 6a12 ; -- <0795> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 18
    0a69 : 0017 ; -- <0795> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    0a6a : 0018 ; -- <0795> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle

    0a6b : 0000 ; -- <0803> a = a
    0a6c : 0600 ; -- <0803> b = 0

    0a6d : e007 ; -- <0796> br eq :else_2669
    0a6e : 0a7c ; -- <0796> "

    0a6f : 0760 ; -- <0797> b = -1
    0a70 : c800 ; -- <0798> a = a+b
    0a71 : 0300 ; -- <0798> "
    0a72 : 6600 ; -- <0799> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0a73 : 6a12 ; -- <0799> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 18
    0a74 : 5c00 ; -- <0799> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a

    0a75 : 0000 ; -- <0802> a = a
    0a76 : 0600 ; -- <0802> b = 0

    0a77 : e407 ; -- <0800> bn eq :else_2679
    0a78 : 0a7c ; -- <0800> "

    0a79 : fba0 ; -- <0801> callx  ftdi_power_on
    0a7a : 0ab0 ; -- <0801> "
    0a7b : fc00 ; -- <0801> "



    0a7c : 6600 ; -- <0805> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0a7d : 6a40 ; -- <0805> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0a7e : 0017 ; -- <0805> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0a7f : 0018 ; -- <0805> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0a80 : 6600 ; -- <0806> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0a81 : 6a10 ; -- <0806> ram b = $ram_comm_restart_at_min -- av_ad_lo = 16
    0a82 : 0417 ; -- <0806> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0a83 : 0418 ; -- <0806> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle

    0a84 : 0000 ; -- <0812> a = a
    0a85 : 0401 ; -- <0812> b = b

    0a86 : e407 ; -- <0807> bn eq :else_2694
    0a87 : 0a91 ; -- <0807> "

-- comm restart is required.
    0a88 : fba0 ; -- <0809> callx  postpone_comm_restart
    0a89 : 0a93 ; -- <0809> "
    0a8a : fc00 ; -- <0809> "
    0a8b : 6600 ; -- <0810> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    0a8c : 6a12 ; -- <0810> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 18
    0a8d : 5e05 ; -- <0810> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    0a8e : fba0 ; -- <0811> callx  ftdi_power_off
    0a8f : 0aa0 ; -- <0811> "
    0a90 : fc00 ; -- <0811> "


    0a91 : f80c ; -- <0814> pop rtna -- func check_communication
    0a92 : fc00 ; -- <0814> swapra = nop

-- ######## func postpone_comm_restart -- = 0x0a93

    0a93 : 6600 ; -- <0816> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0a94 : 6a40 ; -- <0816> ram a = $ram_minutes_cnt -- av_ad_lo = 64
    0a95 : 0017 ; -- <0816> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0a96 : 0018 ; -- <0816> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0a97 : 0602 ; -- <0817> b = $comm_grace_period_min
    0a98 : 6600 ; -- <0818> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    0a99 : 6a10 ; -- <0818> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 16
    0a9a : c800 ; -- <0818> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    0a9b : 5f00 ; -- <0818> "

    0a9c : fc00 ; -- <0820> swapra = nop

-- :ftdi_off_msg -- = 0x0a9d
-- "FTOF\x0"
    0a9d : 5446 ; -- <0822> TF
    0a9e : 464f ; -- <0822> FO
    0a9f : 0000 ; -- <0822>   

-- ######## func ftdi_power_off -- = 0x0aa0
    0aa0 : 303e ; -- <0829> push rtna -- func ftdi_power_off

    0aa1 : 0020 ; -- <0825> a = board_ctrl
    0aa2 : 07a0 ; -- <0826> b = $not_ftdi_power_mask
    0aa3 : ff7f ; -- <0826> "
    0aa4 : c800 ; -- <0827> board_ctrl = and
    0aa5 : 8330 ; -- <0827> "
    0aa6 : 23a0 ; -- <0828> pa = :ftdi_off_msg
    0aa7 : 0a9d ; -- <0828> "
    0aa8 : fba0 ; -- <0828> callx  set_text_flag  :ftdi_off_msg
    0aa9 : 0ac4 ; -- <0828> "
    0aaa : fc00 ; -- <0828> "

    0aab : f80c ; -- <0830> pop rtna -- func ftdi_power_off
    0aac : fc00 ; -- <0830> swapra = nop

-- :ftdi_on_msg -- = 0x0aad
-- "FTON\x0"
    0aad : 5446 ; -- <0832> TF
    0aae : 4e4f ; -- <0832> NO
    0aaf : 0000 ; -- <0832>   

-- ######## func ftdi_power_on -- = 0x0ab0
    0ab0 : 303e ; -- <0839> push rtna -- func ftdi_power_on

    0ab1 : 0020 ; -- <0835> a = board_ctrl
    0ab2 : 0680 ; -- <0836> b = $ftdi_power_mask
    0ab3 : c800 ; -- <0837> board_ctrl = or
    0ab4 : 8334 ; -- <0837> "
    0ab5 : 23a0 ; -- <0838> pa = :ftdi_on_msg
    0ab6 : 0aad ; -- <0838> "
    0ab7 : fba0 ; -- <0838> callx  set_text_flag  :ftdi_on_msg
    0ab8 : 0ac4 ; -- <0838> "
    0ab9 : fc00 ; -- <0838> "

    0aba : f80c ; -- <0840> pop rtna -- func ftdi_power_on
    0abb : fc00 ; -- <0840> swapra = nop

-- ######## func clear_ram_page -- = 0x0abc

    0abc : 0200 ; -- <0842> a = 0
    0abd : 0602 ; -- <0843> b = 2
-- :clear_next_word -- = 0x0abe
    0abe : 6800 ; -- <0845> av_ad_lo = a
    0abf : 5e00 ; -- <0846> av_write_data = 0
    0ac0 : 0300 ; -- <0847> a = ad0
    0ac1 : e400 ; -- <0848> bn az :clear_next_word
    0ac2 : 0abe ; -- <0848> "

    0ac3 : fc00 ; -- <0850> swapra = nop

-- ######## func set_text_flag -- = 0x0ac4

    0ac4 : 0408 ; -- <0852> b = flag_addr
    0ac5 : 6600 ; -- <0853> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    0ac6 : 6a56 ; -- <0853> ram a = $ram_next_tfp_idx -- av_ad_lo = 86
    0ac7 : 0017 ; -- <0853> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    0ac8 : 0018 ; -- <0853> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle

    0ac9 : 0351 ; -- <0854> a = a<<1
    0aca : 3001 ; -- <0854> push b -- push b
    0acb : 0646 ; -- <0854> b = 70
    0acc : 6600 ; -- <0854> av_ad_hi = 0
    0acd : 6b00 ; -- <0854> av_ad_lo = ad0
    0ace : 5c0c ; -- <0854> pop av_write_data -- pop av_write_data

    0acf : 0008 ; -- <0855> a = flag_addr
    0ad0 : 0760 ; -- <0856> b = -1
    0ad1 : c800 ; -- <0857> a = a+b
    0ad2 : 0300 ; -- <0857> "
    0ad3 : 0607 ; -- <0858> b = $tfp_mask
    0ad4 : 6600 ; -- <0859> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    0ad5 : 6a56 ; -- <0859> ram $ram_next_tfp_idx = and -- av_ad_lo = 86
    0ad6 : c800 ; -- <0859> ram $ram_next_tfp_idx = and -- av_write_data = and
    0ad7 : 5f30 ; -- <0859> "

    0ad8 : fc00 ; -- <0861> swapra = nop

-- ######## func unique_text_flag -- = 0x0ad9
    0ad9 : 3002 ; -- <0872> push i -- func unique_text_flag
    0ada : 303e ; -- <0872> push rtna -- "

    0adb : 0a00 ; -- <0869> i = 0
-- :loop_2779 -- = 0x0adc

    0adc : 0002 ; -- <0863> a = i

    0add : 0351 ; -- <0864> a = a<<1
    0ade : 0646 ; -- <0864> b = 70
    0adf : 6600 ; -- <0864> av_ad_hi = 0
    0ae0 : 6b00 ; -- <0864> av_ad_lo = ad0
    0ae1 : 0417 ; -- <0864> b = av_begin_read
    0ae2 : 0418 ; -- <0864> b = av_read_data


    0ae3 : 0001 ; -- <0867> a = b
    0ae4 : 0408 ; -- <0867> b = flag_addr

    0ae5 : e407 ; -- <0865> bn eq :else_2789
    0ae6 : 0ae9 ; -- <0865> "

    0ae7 : e00f ; -- <0866> jmp :skip
    0ae8 : 0af5 ; -- <0866> "



    0ae9 : 0002 ; -- <0869> a = i
    0aea : 0601 ; -- <0869> b = 1
    0aeb : c800 ; -- <0869> i = a+b
    0aec : 0b00 ; -- <0869> "


    0aed : 0002 ; -- <0869> a = i
    0aee : 0608 ; -- <0869> b = $num_text_flag_pointers
    0aef : e005 ; -- <0869> br lt :loop_2779
    0af0 : 0adc ; -- <0869> "

-- :end_2779 -- = 0x0af1
    0af1 : 2008 ; -- <0870> pa = flag_addr
    0af2 : fba0 ; -- <0870> callx  set_text_flag  flag_addr
    0af3 : 0ac4 ; -- <0870> "
    0af4 : fc00 ; -- <0870> "
-- :skip -- = 0x0af5

    0af5 : f80c ; -- <0873> pop rtna -- func unique_text_flag
    0af6 : 080c ; -- <0873> pop i -- "
    0af7 : fc00 ; -- <0873> swapra = nop

-- :text_flags_msg -- = 0x0af8
-- " tf=\x0"
    0af8 : 7420 ; -- <0875> t 
    0af9 : 3d66 ; -- <0875> =f
    0afa : 0000 ; -- <0875>   

-- ######## func report_text_flags -- = 0x0afb
    0afb : 3002 ; -- <0891> push i -- func report_text_flags
    0afc : 303e ; -- <0891> push rtna -- "

    0afd : 03a0 ; -- <0878> a = :text_flags_msg
    0afe : 0af8 ; -- <0878> "
    0aff : fba0 ; -- <0879> call :print_nt
    0b00 : 015f ; -- <0879> "
    0b01 : fc00 ; -- <0879> "
    0b02 : 0a00 ; -- <0890> i = 0
-- :loop_2818 -- = 0x0b03

    0b03 : 0002 ; -- <0880> a = i

    0b04 : 0351 ; -- <0881> a = a<<1
    0b05 : 0646 ; -- <0881> b = 70
    0b06 : 6600 ; -- <0881> av_ad_hi = 0
    0b07 : 6b00 ; -- <0881> av_ad_lo = ad0
    0b08 : 0417 ; -- <0881> b = av_begin_read
    0b09 : 0418 ; -- <0881> b = av_read_data


    0b0a : 0001 ; -- <0888> a = b
    0b0b : 0600 ; -- <0888> b = 0

    0b0c : e007 ; -- <0882> br eq :else_2828
    0b0d : 0b1d ; -- <0882> "

    0b0e : fba0 ; -- <0883> call :print_nt
    0b0f : 015f ; -- <0883> "
    0b10 : fc00 ; -- <0883> "
    0b11 : 022c ; -- <0884> a = 44 -- putasc ","
    0b12 : fba0 ; -- <0884> putasc ","
    0b13 : 00ab ; -- <0884> "
    0b14 : fc00 ; -- <0884> "
    0b15 : 0002 ; -- <0885> a = i
    0b16 : 0600 ; -- <0886> b = 0

    0b17 : 0351 ; -- <0887> a = a<<1
    0b18 : 3001 ; -- <0887> push b -- push b
    0b19 : 0646 ; -- <0887> b = 70
    0b1a : 6600 ; -- <0887> av_ad_hi = 0
    0b1b : 6b00 ; -- <0887> av_ad_lo = ad0
    0b1c : 5c0c ; -- <0887> pop av_write_data -- pop av_write_data




    0b1d : 0002 ; -- <0890> a = i
    0b1e : 0601 ; -- <0890> b = 1
    0b1f : c800 ; -- <0890> i = a+b
    0b20 : 0b00 ; -- <0890> "


    0b21 : 0002 ; -- <0890> a = i
    0b22 : 0608 ; -- <0890> b = $num_text_flag_pointers
    0b23 : e005 ; -- <0890> br lt :loop_2818
    0b24 : 0b03 ; -- <0890> "

-- :end_2818 -- = 0x0b25

    0b25 : f80c ; -- <0892> pop rtna -- func report_text_flags
    0b26 : 080c ; -- <0892> pop i -- "
    0b27 : fc00 ; -- <0892> swapra = nop

-- :plan_msg -- = 0x0b28
-- " pl=\x0"
    0b28 : 7020 ; -- <0894> p 
    0b29 : 3d6c ; -- <0894> =l
    0b2a : 0000 ; -- <0894>   
-- :manual_trim_msg -- = 0x0b2b
-- " mt=\x0"
    0b2b : 6d20 ; -- <0896> m 
    0b2c : 3d74 ; -- <0896> =t
    0b2d : 0000 ; -- <0896>   

-- ######## func report_plan -- = 0x0b2e
    0b2e : 303e ; -- <0908> push rtna -- func report_plan

    0b2f : 03a0 ; -- <0899> a = :plan_msg
    0b30 : 0b28 ; -- <0899> "
    0b31 : fba0 ; -- <0900> call :print_nt
    0b32 : 015f ; -- <0900> "
    0b33 : fc00 ; -- <0900> "
    0b34 : 6600 ; -- <0901> ram a = $ram_plan_name -- av_ad_hi = 0
    0b35 : 6a88 ; -- <0901> ram a = $ram_plan_name -- av_ad_lo = 136
    0b36 : 0017 ; -- <0901> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    0b37 : 0018 ; -- <0901> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    0b38 : fba0 ; -- <0902> call :print_nt
    0b39 : 015f ; -- <0902> "
    0b3a : fc00 ; -- <0902> "

    0b3b : 03a0 ; -- <0904> a = :manual_trim_msg
    0b3c : 0b2b ; -- <0904> "
    0b3d : fba0 ; -- <0905> call :print_nt
    0b3e : 015f ; -- <0905> "
    0b3f : fc00 ; -- <0905> "
    0b40 : 6600 ; -- <0906> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    0b41 : 6aaa ; -- <0906> ram a = $ram_run_manual_trim -- av_ad_lo = 170
    0b42 : 0017 ; -- <0906> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    0b43 : 0018 ; -- <0906> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle
    0b44 : fba0 ; -- <0907> call :put4x
    0b45 : 00d3 ; -- <0907> "
    0b46 : fc00 ; -- <0907> "

    0b47 : f80c ; -- <0909> pop rtna -- func report_plan
    0b48 : fc00 ; -- <0909> swapra = nop

-- ######## func interpret_maf -- = 0x0b49
    0b49 : 3002 ; -- <0942> push i -- func interpret_maf
    0b4a : 3004 ; -- <0942> push x -- "

-- offset and clamp the MAF ADC count to 0..511.
    0b4b : 0204 ; -- <0912> a = $maf_adc_channel

    0b4c : 0351 ; -- <0913> a = a<<1
    0b4d : 0626 ; -- <0913> b = 38
    0b4e : 6600 ; -- <0913> av_ad_hi = 0
    0b4f : 6b00 ; -- <0913> av_ad_lo = ad0
    0b50 : 0417 ; -- <0913> b = av_begin_read
    0b51 : 0418 ; -- <0913> b = av_read_data

    0b52 : 0001 ; -- <0914> a = b
    0b53 : 0350 ; -- <0915> a = a>>1
    0b54 : 07a0 ; -- <0916> b = 0x01ff
    0b55 : 01ff ; -- <0916> "
--patch: do some averaging here, like interpret_tps.
    0b56 : c800 ; -- <0918> x = and
    0b57 : 1330 ; -- <0918> "
    0b58 : 6600 ; -- <0919> ram $ram_maf_adc_filtered = and -- av_ad_hi = 0
    0b59 : 6a98 ; -- <0919> ram $ram_maf_adc_filtered = and -- av_ad_lo = 152
    0b5a : c800 ; -- <0919> ram $ram_maf_adc_filtered = and -- av_write_data = and
    0b5b : 5f30 ; -- <0919> "

-- recover linear flow from MAF ADC count using hi-res method,
-- for actual flow feeding into final puff multiply later.
-- 256 cell Brute-force lookup might take e.g. 80us to run.  That's 4 jf,
-- or 5% of ignition cycle at max RPM.
    0b5c : 6600 ; -- <0925> ram $ram_maf_valid = 0 -- av_ad_hi = 0
    0b5d : 6a96 ; -- <0925> ram $ram_maf_valid = 0 -- av_ad_lo = 150
    0b5e : 5e00 ; -- <0925> ram $ram_maf_valid = 0 -- av_write_data = 0
    0b5f : 0a00 ; -- <0934> i = 0
-- :loop_2911 -- = 0x0b60

    0b60 : 0002 ; -- <0926> a = i

    0b61 : 0351 ; -- <0927> a = a<<1
    0b62 : 07a0 ; -- <0927> b = 2048
    0b63 : 0800 ; -- <0927> "
    0b64 : 67a0 ; -- <0927> av_ad_hi = 256
    0b65 : 0100 ; -- <0927> "
    0b66 : 6b00 ; -- <0927> av_ad_lo = ad0
    0b67 : 0417 ; -- <0927> b = av_begin_read
    0b68 : 0418 ; -- <0927> b = av_read_data


    0b69 : 0001 ; -- <0932> a = b
    0b6a : 0404 ; -- <0932> b = x

    0b6b : e406 ; -- <0928> bn gt :else_2923
    0b6c : 0b75 ; -- <0928> "

    0b6d : 6600 ; -- <0929> ram $ram_maf_flow_hi_res = i -- av_ad_hi = 0
    0b6e : 6a9a ; -- <0929> ram $ram_maf_flow_hi_res = i -- av_ad_lo = 154
    0b6f : 5c02 ; -- <0929> ram $ram_maf_flow_hi_res = i -- av_write_data = i
    0b70 : 6600 ; -- <0930> ram $ram_maf_valid = 1 -- av_ad_hi = 0
    0b71 : 6a96 ; -- <0930> ram $ram_maf_valid = 1 -- av_ad_lo = 150
    0b72 : 5e01 ; -- <0930> ram $ram_maf_valid = 1 -- av_write_data = 1
    0b73 : e00f ; -- <0931> jmp :maf_done
    0b74 : 0b7e ; -- <0931> "



    0b75 : 0002 ; -- <0934> a = i
    0b76 : 0601 ; -- <0934> b = 1
    0b77 : c800 ; -- <0934> i = a+b
    0b78 : 0b00 ; -- <0934> "


    0b79 : 0002 ; -- <0934> a = i
    0b7a : 07a0 ; -- <0934> b = $maf_ref_num_cells
    0b7b : 0100 ; -- <0934> "
    0b7c : e005 ; -- <0934> br lt :loop_2911
    0b7d : 0b60 ; -- <0934> "

-- :end_2911 -- = 0x0b7e
-- :maf_done -- = 0x0b7e

-- quantize linear flow from hi-res to lo-res for indexing into AFRC map rows.
-- Lo-res = hi-res >> 2.
    0b7e : 6600 ; -- <0939> ram a = $ram_maf_flow_hi_res -- av_ad_hi = 0
    0b7f : 6a9a ; -- <0939> ram a = $ram_maf_flow_hi_res -- av_ad_lo = 154
    0b80 : 0017 ; -- <0939> ram a = $ram_maf_flow_hi_res -- a = av_write_data -- start read cycle
    0b81 : 0018 ; -- <0939> ram a = $ram_maf_flow_hi_res -- a = av_read_data -- finish read cycle
    0b82 : 0350 ; -- <0940> a = a>>1
    0b83 : 6600 ; -- <0941> ram $ram_afrc_maf_row_idx = a>>1 -- av_ad_hi = 0
    0b84 : 6a9c ; -- <0941> ram $ram_afrc_maf_row_idx = a>>1 -- av_ad_lo = 156
    0b85 : 5f50 ; -- <0941> ram $ram_afrc_maf_row_idx = a>>1 -- av_write_data = a>>1

    0b86 : 100c ; -- <0943> pop x -- func interpret_maf
    0b87 : 080c ; -- <0943> pop i -- "
    0b88 : fc00 ; -- <0943> swapra = nop

-- ######## func interpret_tps -- = 0x0b89
    0b89 : 3002 ; -- <0971> push i -- func interpret_tps
    0b8a : 3004 ; -- <0971> push x -- "
    0b8b : 3005 ; -- <0971> push y -- "
    0b8c : 3006 ; -- <0971> push ga -- "
    0b8d : 3007 ; -- <0971> push gb -- "

    0b8e : 0206 ; -- <0945> a = $tps_adc_channel

    0b8f : 0351 ; -- <0946> a = a<<1
    0b90 : 0626 ; -- <0946> b = 38
    0b91 : 6600 ; -- <0946> av_ad_hi = 0
    0b92 : 6b00 ; -- <0946> av_ad_lo = ad0
    0b93 : 0417 ; -- <0946> b = av_begin_read
    0b94 : 0418 ; -- <0946> b = av_read_data

-- reverse the scale.
    0b95 : 03a0 ; -- <0948> a = 0x0fff
    0b96 : 0fff ; -- <0948> "
    0b97 : c800 ; -- <0949> b = xor
    0b98 : 0738 ; -- <0949> "
-- memorize reading into slot 0 and shift history up 1 slot.  total up as we go.
    0b99 : 1801 ; -- <0951> ga = b
    0b9a : 1200 ; -- <0952> x = 0
    0b9b : 0a00 ; -- <0963> i = 0
-- :loop_2971 -- = 0x0b9c

    0b9c : 0002 ; -- <0953> a = i

    0b9d : 0351 ; -- <0954> a = a<<1
    0b9e : 06b0 ; -- <0954> b = 176
    0b9f : 6600 ; -- <0954> av_ad_hi = 0
    0ba0 : 6b00 ; -- <0954> av_ad_lo = ad0
    0ba1 : 0417 ; -- <0954> b = av_begin_read
    0ba2 : 0418 ; -- <0954> b = av_read_data

    0ba3 : 1c01 ; -- <0955> gb = b
    0ba4 : 1401 ; -- <0956> y = b
    0ba5 : c800 ; -- <0957> x = x+y
    0ba6 : 1320 ; -- <0957> "
    0ba7 : 0002 ; -- <0958> a = i
    0ba8 : 0406 ; -- <0959> b = ga

    0ba9 : 0351 ; -- <0960> a = a<<1
    0baa : 3001 ; -- <0960> push b -- push b
    0bab : 06b0 ; -- <0960> b = 176
    0bac : 6600 ; -- <0960> av_ad_hi = 0
    0bad : 6b00 ; -- <0960> av_ad_lo = ad0
    0bae : 5c0c ; -- <0960> pop av_write_data -- pop av_write_data

    0baf : 1807 ; -- <0961> ga = gb


    0bb0 : 0002 ; -- <0963> a = i
    0bb1 : 0601 ; -- <0963> b = 1
    0bb2 : c800 ; -- <0963> i = a+b
    0bb3 : 0b00 ; -- <0963> "


    0bb4 : 0002 ; -- <0963> a = i
    0bb5 : 0604 ; -- <0963> b = $tps_history_len
    0bb6 : e005 ; -- <0963> br lt :loop_2971
    0bb7 : 0b9c ; -- <0963> "

-- :end_2971 -- = 0x0bb8
-- memorize average.
    0bb8 : 0004 ; -- <0965> a = x
    0bb9 : 0350 ; -- <0966> a = a>>1
    0bba : 1b50 ; -- <0967> ga = a>>1
    0bbb : 6600 ; -- <0968> ram $ram_tps_avg = ga -- av_ad_hi = 0
    0bbc : 6aae ; -- <0968> ram $ram_tps_avg = ga -- av_ad_lo = 174
    0bbd : 5c06 ; -- <0968> ram $ram_tps_avg = ga -- av_write_data = ga

-- :end -- = 0x0bbe

    0bbe : 1c0c ; -- <0972> pop gb -- func interpret_tps
    0bbf : 180c ; -- <0972> pop ga -- "
    0bc0 : 140c ; -- <0972> pop y -- "
    0bc1 : 100c ; -- <0972> pop x -- "
    0bc2 : 080c ; -- <0972> pop i -- "
    0bc3 : fc00 ; -- <0972> swapra = nop

-- ######## func jf_to_rpm -- = 0x0bc4
    0bc4 : 303e ; -- <0982> push rtna -- func jf_to_rpm

-- resolution = 32 rpm.
    0bc5 : 0408 ; -- <0975> b = jiffies
    0bc6 : 03a0 ; -- <0976> a = 0x5573
    0bc7 : 5573 ; -- <0976> "
-- = 700000 >> 5
    0bc8 : fba0 ; -- <0978> call :divide
    0bc9 : 019c ; -- <0978> "
    0bca : fc00 ; -- <0978> "
    0bcb : 0001 ; -- <0979> a = b
    0bcc : 0352 ; -- <0980> a = a<<4
    0bcd : 2351 ; -- <0981> rpm = a<<1

    0bce : f80c ; -- <0983> pop rtna -- func jf_to_rpm
    0bcf : fc00 ; -- <0983> swapra = nop

-- ######## func check_engine_stop -- = 0x0bd0
    0bd0 : 303e ; -- <0999> push rtna -- func check_engine_stop

-- returns 1 if transitioned to stop, else 0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.

    0bd1 : 0022 ; -- <0997> a = power_duty
    0bd2 : 0680 ; -- <0997> b = ( 0x0080 )

    0bd3 : e003 ; -- <0989> br and0z :else_3027
    0bd4 : 0be8 ; -- <0989> "

    0bd5 : 6600 ; -- <0990> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0bd6 : 6a7e ; -- <0990> ram a = $ram_rpm_valid -- av_ad_lo = 126
    0bd7 : 0017 ; -- <0990> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0bd8 : 0018 ; -- <0990> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0bd9 : 0000 ; -- <0996> a = a
    0bda : 0600 ; -- <0996> b = 0

    0bdb : e407 ; -- <0991> bn eq :else_3035
    0bdc : 0be8 ; -- <0991> "

    0bdd : 6600 ; -- <0992> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0bde : 6a8e ; -- <0992> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 142
    0bdf : f817 ; -- <0992> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0be0 : f818 ; -- <0992> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0be1 : fc00 ; -- <0993> swapra = nop
    0be2 : fba0 ; -- <0995> callx  init_plan_stop
    0be3 : 0436 ; -- <0995> "
    0be4 : fc00 ; -- <0995> "
    0be5 : 2201 ; -- <0996> did_stop = 1
    0be6 : f80c ; -- <0996> pop rtna -- rtn 1
    0be7 : fc00 ; -- <0995> swapra = nop


    0be8 : 2200 ; -- <0998> did_stop = 0
    0be9 : f80c ; -- <0998> pop rtna -- rtn 0
    0bea : fc00 ; -- <0997> swapra = nop

    0beb : f80c ; -- <1000> pop rtna -- func check_engine_stop
    0bec : fc00 ; -- <1000> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d event_priority
-- src reg 000e soft_event
-- src reg 000f usage_count
-- src reg 0010 product_lo
-- src reg 0011 product_hi
-- src reg 0012 ustimer0
-- src reg 0013 mstimer0
-- src reg 0014 mstimer1
-- src reg 0015 mstimer2
-- src reg 0016 spi_data
-- src reg 0017 av_begin_read
-- src reg 0018 av_read_data
-- src reg 0019 av_ad_hi
-- src reg 001a av_ad_lo
-- src reg 001c drom_data
-- src reg 001d fduart_data
-- src reg 001e fduart_status
-- src reg 001f leds
-- src reg 0020 board_ctrl
-- src reg 0021 anmux_ctrl
-- src reg 0022 power_duty
-- src reg 0023 ign_capture_jf
-- src reg 0024 ign_timeout_len_jf
-- src reg 0025 puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d event_priority
-- dest reg 000e soft_event
-- dest reg 000f usage_count
-- dest reg 0012 ustimer0
-- dest reg 0013 mstimer0
-- dest reg 0014 mstimer1
-- dest reg 0015 mstimer2
-- dest reg 0016 spi_data
-- dest reg 0017 av_write_data
-- dest reg 0019 av_ad_hi
-- dest reg 001a av_ad_lo
-- dest reg 001b drom_ad
-- dest reg 001d fduart_data
-- dest reg 001e fduart_status
-- dest reg 001f leds
-- dest reg 0020 board_ctrl
-- dest reg 0021 anmux_ctrl
-- dest reg 0022 power_duty
-- dest reg 0024 ign_timeout_len_jf
-- dest reg 0025 puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_last_anmux_data
-- ram 00000026 ram_last_adc_data
-- ram 00000036 ram_adc_chn_pending
-- ram 00000038 ram_adc_junk
-- ram 0000003a ram_dial_setting
-- ram 0000003c ram_power_down_at_min
-- ram 0000003e ram_relay_hold_at_pass
-- ram 00000040 ram_minutes_cnt
-- ram 00000042 ram_seconds_cnt
-- ram 00000044 ram_mcu_usage_cnt
-- ram 00000046 ram_text_flag_pointers
-- ram 00000056 ram_next_tfp_idx
-- ram 00000058 ram_ign_history_idx
-- ram 0000005a ram_ign_history_jf
-- ram 0000007a ram_ign_avg_jf
-- ram 0000007c ram_avg_rpm
-- ram 0000007e ram_rpm_valid
-- ram 00000080 ram_ign_bad_samples
-- ram 00000082 ram_ign_fastest_jf
-- ram 00000084 ram_ign_slowest_jf
-- ram 00000086 ram_next_puff_len_us
-- ram 00000088 ram_plan_name
-- ram 0000008a ram_puff_len_func
-- ram 0000008c ram_transition_func
-- ram 0000008e ram_destroy_plan_func
-- ram 00000090 ram_next_puff_len_us
-- ram 00000092 ram_puff_count
-- ram 00000094 ram_terminal_connected
-- ram 00000096 ram_maf_valid
-- ram 00000098 ram_maf_adc_filtered
-- ram 0000009a ram_maf_flow_hi_res
-- ram 0000009c ram_afrc_maf_row_idx
-- ram 0000009e ram_afrc_rpm_col_idx
-- ram 000000a0 ram_block_temp_map_idx
-- ram 000000a2 ram_block_temp_trim
-- ram 000000a4 ram_afterstart_map_idx
-- ram 000000a6 ram_afterstart_trim
-- ram 000000a8 ram_o2_trim
-- ram 000000aa ram_run_manual_trim
-- ram 000000ac ram_total_trim
-- ram 000000ae ram_tps_avg
-- ram 000000b0 ram_tps_history
        
        END;
    
