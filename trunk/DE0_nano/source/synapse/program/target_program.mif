
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 0675 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.





-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 8750 RPM = about 80 jf between rising edges on chevy ignition white wire.  ignition counter noise blanking begins here in rev 627.
-- 5000 RPM = about 140 jf
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 0022 ; -- <0190> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0190>   
    0004 : 2020 ; -- <0190>   
    0005 : 2020 ; -- <0190>   
    0006 : 6120 ; -- <0190> a 
-- "       b"
    0007 : 2020 ; -- <0190>   
    0008 : 2020 ; -- <0190>   
    0009 : 2020 ; -- <0190>   
    000a : 6220 ; -- <0190> b 
-- "       i"
    000b : 2020 ; -- <0190>   
    000c : 2020 ; -- <0190>   
    000d : 2020 ; -- <0190>   
    000e : 6920 ; -- <0190> i 
-- "       j"
    000f : 2020 ; -- <0190>   
    0010 : 2020 ; -- <0190>   
    0011 : 2020 ; -- <0190>   
    0012 : 6a20 ; -- <0190> j 
-- "       x"
    0013 : 2020 ; -- <0190>   
    0014 : 2020 ; -- <0190>   
    0015 : 2020 ; -- <0190>   
    0016 : 7820 ; -- <0190> x 
-- "       y"
    0017 : 2020 ; -- <0190>   
    0018 : 2020 ; -- <0190>   
    0019 : 2020 ; -- <0190>   
    001a : 7920 ; -- <0190> y 
-- "      ga"
    001b : 2020 ; -- <0190>   
    001c : 2020 ; -- <0190>   
    001d : 2020 ; -- <0190>   
    001e : 6167 ; -- <0190> ag
-- "      gb"
    001f : 2020 ; -- <0190>   
    0020 : 2020 ; -- <0190>   
    0021 : 2020 ; -- <0190>   
    0022 : 6267 ; -- <0190> bg
-- "      pa"
    0023 : 2020 ; -- <0190>   
    0024 : 2020 ; -- <0190>   
    0025 : 2020 ; -- <0190>   
    0026 : 6170 ; -- <0190> ap
-- "      pb"
    0027 : 2020 ; -- <0190>   
    0028 : 2020 ; -- <0190>   
    0029 : 2020 ; -- <0190>   
    002a : 6270 ; -- <0190> bp
-- "      pc"
    002b : 2020 ; -- <0190>   
    002c : 2020 ; -- <0190>   
    002d : 2020 ; -- <0190>   
    002e : 6370 ; -- <0190> cp
-- "      pd"
    002f : 2020 ; -- <0190>   
    0030 : 2020 ; -- <0190>   
    0031 : 2020 ; -- <0190>   
    0032 : 6470 ; -- <0190> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0190> --
    0034 : 7372 ; -- <0190> sr
    0035 : 6b74 ; -- <0190> kt
    0036 : 2020 ; -- <0190>   
-- "  ev_pri"
    0037 : 2020 ; -- <0190>   
    0038 : 7665 ; -- <0190> ve
    0039 : 705f ; -- <0190> p_
    003a : 6972 ; -- <0190> ir
-- "softevnt"
    003b : 6f73 ; -- <0190> os
    003c : 7466 ; -- <0190> tf
    003d : 7665 ; -- <0190> ve
    003e : 746e ; -- <0190> tn
-- "   usage"
    003f : 2020 ; -- <0190>   
    0040 : 7520 ; -- <0190> u 
    0041 : 6173 ; -- <0190> as
    0042 : 6567 ; -- <0190> eg
-- "ustimer0"
    0043 : 7375 ; -- <0190> su
    0044 : 6974 ; -- <0190> it
    0045 : 656d ; -- <0190> em
    0046 : 3072 ; -- <0190> 0r
-- "mstimer0"
    0047 : 736d ; -- <0190> sm
    0048 : 6974 ; -- <0190> it
    0049 : 656d ; -- <0190> em
    004a : 3072 ; -- <0190> 0r
-- "mstimer1"
    004b : 736d ; -- <0190> sm
    004c : 6974 ; -- <0190> it
    004d : 656d ; -- <0190> em
    004e : 3172 ; -- <0190> 1r
-- "mstimer2"
    004f : 736d ; -- <0190> sm
    0050 : 6974 ; -- <0190> it
    0051 : 656d ; -- <0190> em
    0052 : 3272 ; -- <0190> 2r
-- "spi_data"
    0053 : 7073 ; -- <0190> ps
    0054 : 5f69 ; -- <0190> _i
    0055 : 6164 ; -- <0190> ad
    0056 : 6174 ; -- <0190> at
-- "--avwrdt"
    0057 : 2f2f ; -- <0190> --
    0058 : 7661 ; -- <0190> va
    0059 : 7277 ; -- <0190> rw
    005a : 7464 ; -- <0190> td
-- "av_rd_dt"
    005b : 7661 ; -- <0190> va
    005c : 725f ; -- <0190> r_
    005d : 5f64 ; -- <0190> _d
    005e : 7464 ; -- <0190> td
-- "av_ad_hi"
    005f : 7661 ; -- <0190> va
    0060 : 615f ; -- <0190> a_
    0061 : 5f64 ; -- <0190> _d
    0062 : 6968 ; -- <0190> ih
-- "av_ad_lo"
    0063 : 7661 ; -- <0190> va
    0064 : 615f ; -- <0190> a_
    0065 : 5f64 ; -- <0190> _d
    0066 : 6f6c ; -- <0190> ol
-- "--uartdt"
    0067 : 2f2f ; -- <0190> --
    0068 : 6175 ; -- <0190> au
    0069 : 7472 ; -- <0190> tr
    006a : 7464 ; -- <0190> td
-- "uartstat"
    006b : 6175 ; -- <0190> au
    006c : 7472 ; -- <0190> tr
    006d : 7473 ; -- <0190> ts
    006e : 7461 ; -- <0190> ta
-- "    leds"
    006f : 2020 ; -- <0190>   
    0070 : 2020 ; -- <0190>   
    0071 : 656c ; -- <0190> el
    0072 : 7364 ; -- <0190> sd
-- "brd_ctrl"
    0073 : 7262 ; -- <0190> rb
    0074 : 5f64 ; -- <0190> _d
    0075 : 7463 ; -- <0190> tc
    0076 : 6c72 ; -- <0190> lr
-- "   anmux"
    0077 : 2020 ; -- <0190>   
    0078 : 6120 ; -- <0190> a 
    0079 : 6d6e ; -- <0190> mn
    007a : 7875 ; -- <0190> xu
-- "pwr_duty"
    007b : 7770 ; -- <0190> wp
    007c : 5f72 ; -- <0190> _r
    007d : 7564 ; -- <0190> ud
    007e : 7974 ; -- <0190> yt
-- "igntmcap"
    007f : 6769 ; -- <0190> gi
    0080 : 746e ; -- <0190> tn
    0081 : 636d ; -- <0190> cm
    0082 : 7061 ; -- <0190> pa
-- "igntmout"
    0083 : 6769 ; -- <0190> gi
    0084 : 746e ; -- <0190> tn
    0085 : 6f6d ; -- <0190> om
    0086 : 7475 ; -- <0190> tu
-- "puflenus"
    0087 : 7570 ; -- <0190> up
    0088 : 6c66 ; -- <0190> lf
    0089 : 6e65 ; -- <0190> ne
    008a : 7375 ; -- <0190> su

-- string resources
-- :boot_msg -- = 0x008b
-- "TGT\r\n\x0"
    008b : 4754 ; -- <0194> GT
    008c : 0d54 ; -- <0194>  T
    008d : 000a ; -- <0194>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x008e
-- initialize prior to polling loop, for minimum latency.
    008e : 07a0 ; -- <0006> b = :event_table
    008f : 069d ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0090
    0090 : 000d ; -- <0009> a = event_priority
    0091 : e000 ; -- <0010> br 0z :poll_events_again
    0092 : 0090 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0093 : 3400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0094 : d300 ; -- <0015> fetch rtna from ad0
    0095 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0096 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0097 : 6fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0098 : ffc0 ; -- <0021> "
    0099 : e00f ; -- <0021> error_halt_code 0xffc0
    009a : 0099 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x009b
    009b : 3004 ; -- <0046> push x -- func putchar_fduart

    009c : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    009d : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x009e
    009e : 041a ; -- <0053> b = fduart_status
    009f : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    00a0 : 009e ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    00a1 : 6404 ; -- <0057> fduart_data = x
    00a2 : 100c ; -- <0058> pop x -- end_func
    00a3 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x00a4
-- wait until FIFO is populated.
    00a4 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x00a5
    00a5 : 041a ; -- <0066> b = fduart_status
    00a6 : e403 ; -- <0067> bn and0z :wait_for_busy
    00a7 : 00a5 ; -- <0067> "
    00a8 : 0019 ; -- <0068> a = fduart_data
    00a9 : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x00aa
-- check for FIFO is populated.
    00aa : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    00ab : 041a ; -- <0075> b = fduart_status
    00ac : e403 ; -- <0076> bn and0z :none
    00ad : 00b0 ; -- <0076> "
    00ae : 0019 ; -- <0077> a = fduart_data
    00af : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x00b0
    00b0 : 0360 ; -- <0080> a = -1
    00b1 : fc00 ; -- <0080> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00b2
-- set & enable analog muxer
    00b2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00b3 : c800 ; -- <0008> anmux_ctrl = or
    00b4 : 7734 ; -- <0008> "
    00b5 : fc00 ; -- <0008> swapra = nop

-- ######## func anmux_get_chn -- = 0x00b6
    00b6 : 001d ; -- <0012> a = anmux_ctrl
    00b7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00b8 : c800 ; -- <0014> a = and
    00b9 : 0330 ; -- <0014> "
    00ba : fc00 ; -- <0014> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00bb
-- "0123456789abcdef"
    00bb : 3130 ; -- <0050> 10
    00bc : 3332 ; -- <0050> 32
    00bd : 3534 ; -- <0050> 54
    00be : 3736 ; -- <0050> 76
    00bf : 3938 ; -- <0050> 98
    00c0 : 6261 ; -- <0050> ba
    00c1 : 6463 ; -- <0050> dc
    00c2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00c3
    00c3 : 3004 ; -- <0054> push x -- func put4x
    00c4 : 3006 ; -- <0054> push g6 -- "
    00c5 : 303e ; -- <0054> push rtna -- "
    00c6 : 13a0 ; -- <0055> x = :hexdigits
    00c7 : 00bb ; -- <0055> "

    00c8 : 1800 ; -- <0057> g6 = a
    00c9 : 07a0 ; -- <0058> b = 0xF000
    00ca : f000 ; -- <0058> "
    00cb : c800 ; -- <0059> a = and
    00cc : 0330 ; -- <0059> "
    00cd : 0353 ; -- <0060> a = a>>4
    00ce : 0353 ; -- <0061> a = a>>4
    00cf : 0353 ; -- <0062> a = a>>4
    00d0 : fba0 ; -- <0063> call fetch_byte
    00d1 : 01dc ; -- <0063> "
    00d2 : fc00 ; -- <0063> "
    00d3 : fba0 ; -- <0064> putchar a
    00d4 : 009b ; -- <0064> "
    00d5 : fc00 ; -- <0064> "

    00d6 : 0006 ; -- <0066> a = g6
    00d7 : 07a0 ; -- <0067> b = 0x0F00
    00d8 : 0f00 ; -- <0067> "
    00d9 : c800 ; -- <0068> a = and
    00da : 0330 ; -- <0068> "
    00db : 0353 ; -- <0069> a = a>>4
    00dc : 0353 ; -- <0070> a = a>>4
    00dd : fba0 ; -- <0071> call fetch_byte
    00de : 01dc ; -- <0071> "
    00df : fc00 ; -- <0071> "
    00e0 : fba0 ; -- <0072> putchar a
    00e1 : 009b ; -- <0072> "
    00e2 : fc00 ; -- <0072> "

    00e3 : 0006 ; -- <0074> a = g6
    00e4 : 06f0 ; -- <0075> b = 0x00F0
    00e5 : c800 ; -- <0076> a = and
    00e6 : 0330 ; -- <0076> "
    00e7 : 0353 ; -- <0077> a = a>>4
    00e8 : fba0 ; -- <0078> call fetch_byte
    00e9 : 01dc ; -- <0078> "
    00ea : fc00 ; -- <0078> "
    00eb : fba0 ; -- <0079> putchar a
    00ec : 009b ; -- <0079> "
    00ed : fc00 ; -- <0079> "

    00ee : 0006 ; -- <0081> a = g6
    00ef : 060f ; -- <0082> b = 0x000F
    00f0 : c800 ; -- <0083> a = and
    00f1 : 0330 ; -- <0083> "
    00f2 : fba0 ; -- <0084> call fetch_byte
    00f3 : 01dc ; -- <0084> "
    00f4 : fc00 ; -- <0084> "
    00f5 : fba0 ; -- <0085> putchar a
    00f6 : 009b ; -- <0085> "
    00f7 : fc00 ; -- <0085> "

    00f8 : f80c ; -- <0087> pop rtna -- end_func
    00f9 : 180c ; -- <0087> pop g6 -- "
    00fa : 100c ; -- <0087> pop x -- "
    00fb : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00fc
    00fc : 3002 ; -- <0091> push i -- func get4x
    00fd : 3003 ; -- <0091> push j -- "
    00fe : 3004 ; -- <0091> push x -- "
    00ff : 3005 ; -- <0091> push y -- "
    0100 : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    0101 : 1604 ; -- <0094> y = 4
-- :again -- = 0x0102
    0102 : fba0 ; -- <0096> getchar
    0103 : 00a4 ; -- <0096> "
    0104 : fc00 ; -- <0096> "
    0105 : 13a0 ; -- <0097> x = :hexdigits
    0106 : 00bb ; -- <0097> "
    0107 : 0a10 ; -- <0098> i = 16
    0108 : fba0 ; -- <0099> call :find_in_fetch
    0109 : 01f0 ; -- <0099> "
    010a : fc00 ; -- <0099> "
    010b : 0760 ; -- <0100> b = -1
    010c : e007 ; -- <0101> br eq :fail
    010d : 0121 ; -- <0101> "
    010e : 0400 ; -- <0102> b = a
    010f : 0003 ; -- <0103> a = j
    0110 : 0352 ; -- <0104> a = a<<4
    0111 : c800 ; -- <0105> j = or
    0112 : 0f34 ; -- <0105> "
    0113 : 1360 ; -- <0106> x = -1
    0114 : c800 ; -- <0107> y = x+y
    0115 : 1720 ; -- <0107> "
    0116 : 0005 ; -- <0108> a = y
    0117 : e400 ; -- <0109> bn az :again
    0118 : 0102 ; -- <0109> "
    0119 : 0003 ; -- <0110> a = j
    011a : 0600 ; -- <0111> b = 0
    011b : f80c ; -- <0112> pop rtna -- rtn
    011c : 140c ; -- <0112> pop y -- "
    011d : 100c ; -- <0112> pop x -- "
    011e : 0c0c ; -- <0112> pop j -- "
    011f : 080c ; -- <0112> pop i -- "
    0120 : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x0121
    0121 : 0760 ; -- <0114> b = -1
    0122 : f80c ; -- <0115> pop rtna -- end_func
    0123 : 140c ; -- <0115> pop y -- "
    0124 : 100c ; -- <0115> pop x -- "
    0125 : 0c0c ; -- <0115> pop j -- "
    0126 : 080c ; -- <0115> pop i -- "
    0127 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0128
    0128 : 3002 ; -- <0121> push i -- func print_fixed
    0129 : 3003 ; -- <0121> push j -- "
    012a : 3004 ; -- <0121> push x -- "
    012b : 3005 ; -- <0121> push y -- "
    012c : 3006 ; -- <0121> push g6 -- "
    012d : 303e ; -- <0121> push rtna -- "
    012e : 0800 ; -- <0122> i = a
    012f : 0e01 ; -- <0123> j = 1
    0130 : 1001 ; -- <0124> x = b
    0131 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0132
    0132 : e002 ; -- <0127> br xz :done
    0133 : 0148 ; -- <0127> "
    0134 : 1320 ; -- <0128> x = ad2
    0135 : d002 ; -- <0129> fetch g6 from i
    0136 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0137 : 0006 ; -- <0131> a = g6 -- putchar g6
    0138 : fba0 ; -- <0131> putchar g6
    0139 : 009b ; -- <0131> "
    013a : fc00 ; -- <0131> "
    013b : e002 ; -- <0132> br xz :done
    013c : 0148 ; -- <0132> "
    013d : 1320 ; -- <0133> x = ad2
    013e : 0006 ; -- <0134> a = g6
    013f : 0353 ; -- <0135> a = a>>4
    0140 : 0353 ; -- <0136> a = a>>4
    0141 : fba0 ; -- <0137> putchar a
    0142 : 009b ; -- <0137> "
    0143 : fc00 ; -- <0137> "
    0144 : c800 ; -- <0138> i = i+j
    0145 : 0b10 ; -- <0138> "
    0146 : e00f ; -- <0139> jmp :next_word
    0147 : 0132 ; -- <0139> "
-- :done -- = 0x0148
    0148 : f80c ; -- <0141> pop rtna -- end_func
    0149 : 180c ; -- <0141> pop g6 -- "
    014a : 140c ; -- <0141> pop y -- "
    014b : 100c ; -- <0141> pop x -- "
    014c : 0c0c ; -- <0141> pop j -- "
    014d : 080c ; -- <0141> pop i -- "
    014e : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x014f
    014f : 3002 ; -- <0147> push i -- func print_nt
    0150 : 3003 ; -- <0147> push j -- "
    0151 : 3004 ; -- <0147> push x -- "
    0152 : 303e ; -- <0147> push rtna -- "
    0153 : 0800 ; -- <0148> i = a
    0154 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0155
    0155 : d002 ; -- <0151> fetch x from i
    0156 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0157 : 0004 ; -- <0153> a = x
    0158 : 06ff ; -- <0154> b = 0xff
    0159 : e003 ; -- <0155> br and0z :done
    015a : 016b ; -- <0155> "
    015b : fba0 ; -- <0156> putchar a
    015c : 009b ; -- <0156> "
    015d : fc00 ; -- <0156> "
    015e : 0004 ; -- <0157> a = x
    015f : 0353 ; -- <0158> a = a>>4
    0160 : 0353 ; -- <0159> a = a>>4
    0161 : 06ff ; -- <0160> b = 0xff
    0162 : e003 ; -- <0161> br and0z :done
    0163 : 016b ; -- <0161> "
    0164 : fba0 ; -- <0162> putchar a
    0165 : 009b ; -- <0162> "
    0166 : fc00 ; -- <0162> "
    0167 : c800 ; -- <0163> i = i+j
    0168 : 0b10 ; -- <0163> "
    0169 : e00f ; -- <0164> jmp :next_word
    016a : 0155 ; -- <0164> "
-- :done -- = 0x016b
    016b : f80c ; -- <0166> pop rtna -- end_func
    016c : 100c ; -- <0166> pop x -- "
    016d : 0c0c ; -- <0166> pop j -- "
    016e : 080c ; -- <0166> pop i -- "
    016f : fc00 ; -- <0165> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0170
    0170 : 3002 ; -- <0004> push i -- func multiply
    0171 : 3003 ; -- <0004> push j -- "
    0172 : 3004 ; -- <0004> push x -- "
    0173 : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0174 : 1000 ; -- <0009> x = a
    0175 : 1401 ; -- <0010> y = b
    0176 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0177
    0177 : e002 ; -- <0013> br xz :done
    0178 : 0186 ; -- <0013> "
    0179 : 0004 ; -- <0014> a = x
    017a : 0601 ; -- <0015> b = 1
    017b : e003 ; -- <0016> br and0z :skip_add
    017c : 0180 ; -- <0016> "
    017d : 0c05 ; -- <0017> j = y
    017e : c800 ; -- <0018> i = i+j
    017f : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0180
    0180 : 0004 ; -- <0020> a = x
    0181 : 1350 ; -- <0021> x = a>>1
    0182 : 0005 ; -- <0022> a = y
    0183 : 1751 ; -- <0023> y = a<<1
    0184 : e00f ; -- <0024> jmp :again
    0185 : 0177 ; -- <0024> "
-- :done -- = 0x0186
    0186 : 0002 ; -- <0026> a = i
    0187 : 140c ; -- <0027> pop y -- end_func
    0188 : 100c ; -- <0027> pop x -- "
    0189 : 0c0c ; -- <0027> pop j -- "
    018a : 080c ; -- <0027> pop i -- "
    018b : fc00 ; -- <0026> swapra = nop

-- ######## func divide -- = 0x018c
    018c : 3002 ; -- <0029> push i -- func divide
    018d : 3003 ; -- <0029> push j -- "
    018e : 3004 ; -- <0029> push x -- "
    018f : 3005 ; -- <0029> push y -- "
    0190 : 3006 ; -- <0029> push g6 -- "
    0191 : 3007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0192 : e005 ; -- <0037> br lt :zero
    0193 : 01cd ; -- <0037> "
    0194 : e000 ; -- <0038> br az :zero
    0195 : 01cd ; -- <0038> "
    0196 : 1000 ; -- <0039> x = a
--    g7 = x
    0197 : 0001 ; -- <0041> a = b
    0198 : e000 ; -- <0042> br az :zero
    0199 : 01cd ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    019a : 0404 ; -- <0058> b = x
    019b : 0a00 ; -- <0059> i = 0
    019c : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x019d
    019d : e006 ; -- <0062> br gt :shift_done
    019e : 01a3 ; -- <0062> "
    019f : 0351 ; -- <0063> a = a<<1
    01a0 : 0b10 ; -- <0064> i = ad1
    01a1 : e00f ; -- <0065> jmp :shift_again
    01a2 : 019d ; -- <0065> "
-- :shift_done -- = 0x01a3
    01a3 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    01a4 : 1e00 ; -- <0078> g7 = 0
    01a5 : 0f60 ; -- <0079> j = -1
-- :again -- = 0x01a6
    01a6 : e001 ; -- <0081> br iz :done
    01a7 : 01c4 ; -- <0081> "
    01a8 : 0006 ; -- <0082> a = g6
    01a9 : 0404 ; -- <0083> b = x
    01aa : e006 ; -- <0084> br gt :result0
    01ab : 01bc ; -- <0084> "
-- temp does fit; output a 1.
    01ac : 0007 ; -- <0086> a = g7
    01ad : 0351 ; -- <0087> a = a<<1
    01ae : 0601 ; -- <0088> b = 1
    01af : c800 ; -- <0089> g7 = or
    01b0 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    01b1 : 0006 ; -- <0091> a = g6
    01b2 : 0760 ; -- <0092> b = -1
    01b3 : c800 ; -- <0093> a = xor
    01b4 : 0338 ; -- <0093> "
    01b5 : 0601 ; -- <0094> b = 1
    01b6 : c800 ; -- <0095> y = a+b
    01b7 : 1700 ; -- <0095> "
    01b8 : c800 ; -- <0096> x = x+y
    01b9 : 1320 ; -- <0096> "
    01ba : e00f ; -- <0097> jmp :next
    01bb : 01be ; -- <0097> "
-- :result0 -- = 0x01bc
-- temp does not fit; output a 0.
    01bc : 0007 ; -- <0100> a = g7
    01bd : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01be
    01be : 0006 ; -- <0104> a = g6
    01bf : 1b50 ; -- <0105> g6 = a>>1
    01c0 : c800 ; -- <0106> i = i+j
    01c1 : 0b10 ; -- <0106> "
    01c2 : e00f ; -- <0107> jmp :again
    01c3 : 01a6 ; -- <0107> "

-- :done -- = 0x01c4
    01c4 : 0407 ; -- <0110> b = g7
    01c5 : 0004 ; -- <0111> a = x
    01c6 : 1c0c ; -- <0112> pop g7 -- rtn
    01c7 : 180c ; -- <0112> pop g6 -- "
    01c8 : 140c ; -- <0112> pop y -- "
    01c9 : 100c ; -- <0112> pop x -- "
    01ca : 0c0c ; -- <0112> pop j -- "
    01cb : 080c ; -- <0112> pop i -- "
    01cc : fc00 ; -- <0111> swapra = nop

-- :zero -- = 0x01cd
    01cd : 0600 ; -- <0115> b = 0
    01ce : 1c0c ; -- <0116> pop g7 -- rtn
    01cf : 180c ; -- <0116> pop g6 -- "
    01d0 : 140c ; -- <0116> pop y -- "
    01d1 : 100c ; -- <0116> pop x -- "
    01d2 : 0c0c ; -- <0116> pop j -- "
    01d3 : 080c ; -- <0116> pop i -- "
    01d4 : fc00 ; -- <0115> swapra = nop
    01d5 : 1c0c ; -- <0117> pop g7 -- end_func
    01d6 : 180c ; -- <0117> pop g6 -- "
    01d7 : 140c ; -- <0117> pop y -- "
    01d8 : 100c ; -- <0117> pop x -- "
    01d9 : 0c0c ; -- <0117> pop j -- "
    01da : 080c ; -- <0117> pop i -- "
    01db : fc00 ; -- <0116> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01dc
    01dc : 0601 ; -- <0005> b = 1
    01dd : e003 ; -- <0006> br and0z :pick_byte_even
    01de : 01e7 ; -- <0006> "
    01df : 0350 ; -- <0007> a = a>>1
    01e0 : 0404 ; -- <0008> b = x
    01e1 : c800 ; -- <0009> fetch a from a+b
    01e2 : d300 ; -- <0009> "
    01e3 : 03b0 ; -- <0009> "
    01e4 : 0353 ; -- <0010> a = a>>4
    01e5 : 0353 ; -- <0011> a = a>>4
    01e6 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x01e7
    01e7 : 0350 ; -- <0014> a = a>>1
    01e8 : 0404 ; -- <0015> b = x
    01e9 : c800 ; -- <0016> fetch a from a+b
    01ea : d300 ; -- <0016> "
    01eb : 03b0 ; -- <0016> "
    01ec : 06ff ; -- <0017> b = 0xff
    01ed : c800 ; -- <0018> a = and
    01ee : 0330 ; -- <0018> "
    01ef : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01f0
    01f0 : 3002 ; -- <0027> push i -- func find_in_fetch
    01f1 : 3003 ; -- <0027> push j -- "
    01f2 : 3005 ; -- <0027> push y -- "
    01f3 : 303e ; -- <0027> push rtna -- "
    01f4 : 1400 ; -- <0028> y = a
    01f5 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01f6
    01f6 : e001 ; -- <0031> br iz :fail
    01f7 : 0206 ; -- <0031> "
    01f8 : 0b10 ; -- <0032> i = ad1
    01f9 : 0002 ; -- <0033> a = i
    01fa : fba0 ; -- <0034> call :fetch_byte
    01fb : 01dc ; -- <0034> "
    01fc : fc00 ; -- <0034> "
    01fd : 0405 ; -- <0035> b = y
    01fe : e407 ; -- <0036> bn eq :again
    01ff : 01f6 ; -- <0036> "
-- :found -- = 0x0200
    0200 : 0002 ; -- <0038> a = i
    0201 : f80c ; -- <0039> pop rtna -- rtn
    0202 : 140c ; -- <0039> pop y -- "
    0203 : 0c0c ; -- <0039> pop j -- "
    0204 : 080c ; -- <0039> pop i -- "
    0205 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0206
    0206 : 0360 ; -- <0041> a = -1
    0207 : f80c ; -- <0042> pop rtna -- end_func
    0208 : 140c ; -- <0042> pop y -- "
    0209 : 0c0c ; -- <0042> pop j -- "
    020a : 080c ; -- <0042> pop i -- "
    020b : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x020c
    020c : 3004 ; -- <0002> push x -- func spinwait
    020d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    020e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x020f
    020f : 13a0 ; -- <0007> x = 16666
    0210 : 411a ; -- <0007> "
    0211 : 1760 ; -- <0008> y = -1
    0212 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0213
-- use of the ad2 name overrides auto-nop here.
    0213 : 1320 ; -- <0012> x = ad2
    0214 : e402 ; -- <0013> bn xz :spinwait_inner
    0215 : 0213 ; -- <0013> "
    0216 : c800 ; -- <0014> a = a+b
    0217 : 0300 ; -- <0014> "
    0218 : e400 ; -- <0015> bn az :spinwait_outer
    0219 : 020f ; -- <0015> "
    021a : 140c ; -- <0016> pop y -- end_func
    021b : 100c ; -- <0016> pop x -- "
    021c : fc00 ; -- <0015> swapra = nop




-- :cmd_table -- = 0x021d
-- "  hello"
    021d : 2020 ; -- <0005>   
    021e : 6568 ; -- <0005> eh
    021f : 6c6c ; -- <0005> ll
    0220 : 006f ; -- <0005>  o
    0221 : 02d6 ; -- <0006> ([label hello_cmd])
-- "  plstp"
    0222 : 2020 ; -- <0007>   
    0223 : 6c70 ; -- <0007> lp
    0224 : 7473 ; -- <0007> ts
    0225 : 0070 ; -- <0007>  p
    0226 : 02da ; -- <0008> ([label set_plan_stop_cmd])
-- "   plcr"
    0227 : 2020 ; -- <0009>   
    0228 : 7020 ; -- <0009> p 
    0229 : 636c ; -- <0009> cl
    022a : 0072 ; -- <0009>  r
    022b : 02e5 ; -- <0010> ([label set_plan_crank_cmd])
-- "   plwm"
    022c : 2020 ; -- <0011>   
    022d : 7020 ; -- <0011> p 
    022e : 776c ; -- <0011> wl
    022f : 006d ; -- <0011>  m
    0230 : 02f0 ; -- <0012> ([label set_plan_warmup_cmd])
-- "   plrn"
    0231 : 2020 ; -- <0013>   
    0232 : 7020 ; -- <0013> p 
    0233 : 726c ; -- <0013> rl
    0234 : 006e ; -- <0013>  n
    0235 : 02fb ; -- <0014> ([label set_plan_run_cmd])
-- "   plln"
    0236 : 2020 ; -- <0015>   
    0237 : 7020 ; -- <0015> p 
    0238 : 6c6c ; -- <0015> ll
    0239 : 006e ; -- <0015>  n
    023a : 0306 ; -- <0016> ([label set_plan_learn_cmd])
-- "   smap"
    023b : 2020 ; -- <0017>   
    023c : 7320 ; -- <0017> s 
    023d : 616d ; -- <0017> am
    023e : 0070 ; -- <0017>  p
    023f : 0581 ; -- <0018> ([label dump_smap_cmd])
-- " ldsmap"
    0240 : 6c20 ; -- <0019> l 
    0241 : 7364 ; -- <0019> sd
    0242 : 616d ; -- <0019> am
    0243 : 0070 ; -- <0019>  p
    0244 : 05b6 ; -- <0020> ([label load_smap_cmd])
-- " clsmap"
    0245 : 6320 ; -- <0021> c 
    0246 : 736c ; -- <0021> sl
    0247 : 616d ; -- <0021> am
    0248 : 0070 ; -- <0021>  p
    0249 : 05d2 ; -- <0022> ([label clear_smap_cmd])
-- "      ,"
    024a : 2020 ; -- <0023>   
    024b : 2020 ; -- <0023>   
    024c : 2020 ; -- <0023>   
    024d : 002c ; -- <0023>  ,
    024e : 05e9 ; -- <0024> ([label trim_lean_cmd])
-- "      ."
    024f : 2020 ; -- <0025>   
    0250 : 2020 ; -- <0025>   
    0251 : 2020 ; -- <0025>   
    0252 : 002e ; -- <0025>  .
    0253 : 05fa ; -- <0026> ([label trim_rich_cmd])
-- "      \["
    0254 : 2020 ; -- <0027>   
    0255 : 2020 ; -- <0027>   
    0256 : 2020 ; -- <0027>   
    0257 : 005b ; -- <0027>  [
    0258 : 060b ; -- <0028> ([label trim_2lean_cmd])
-- "      \]"
    0259 : 2020 ; -- <0029>   
    025a : 2020 ; -- <0029>   
    025b : 2020 ; -- <0029>   
    025c : 005d ; -- <0029>  ]
    025d : 061c ; -- <0030> ([label trim_2rich_cmd])
-- "\x0\x0"
    025e : 0000 ; -- <0031>   


-- ######## func parse_key -- = 0x025f
    025f : 3002 ; -- <0049> push i -- func parse_key
    0260 : 3004 ; -- <0049> push x -- "
    0261 : 3005 ; -- <0049> push y -- "
    0262 : 303e ; -- <0049> push rtna -- "

-- memorize into ram_key_buf, pushing down existing content.
    0263 : 1008 ; -- <0036> x = key
    0264 : 0a07 ; -- <0045> i = $key_buf_max
-- :loop_612 -- = 0x0265

    0265 : 0002 ; -- <0037> a = i

    0266 : 0351 ; -- <0038> a = a<<1
    0267 : 0600 ; -- <0038> b = 0
    0268 : 5e00 ; -- <0038> av_ad_hi = 0
    0269 : 6300 ; -- <0038> av_ad_lo = ad0
    026a : 0415 ; -- <0038> b = av_write_data
    026b : 0416 ; -- <0038> b = av_read_data

    026c : 1401 ; -- <0039> y = b
    026d : 0002 ; -- <0040> a = i
    026e : 0404 ; -- <0041> b = x

    026f : 0351 ; -- <0042> a = a<<1
    0270 : 3001 ; -- <0042> push b -- push b
    0271 : 0600 ; -- <0042> b = 0
    0272 : 5e00 ; -- <0042> av_ad_hi = 0
    0273 : 6300 ; -- <0042> av_ad_lo = ad0
    0274 : 540c ; -- <0042> pop av_write_data -- pop av_write_data

    0275 : 1005 ; -- <0043> x = y


    0276 : 0002 ; -- <0045> a = i
    0277 : 0600 ; -- <0045> b = 0
    0278 : e007 ; -- <0045> br eq :end_612
    0279 : 0282 ; -- <0045> "


    027a : 0002 ; -- <0045> a = i
    027b : 0760 ; -- <0045> b = -1
    027c : c800 ; -- <0045> i = a+b
    027d : 0b00 ; -- <0045> "


    027e : 0002 ; -- <0045> a = i
    027f : 0600 ; -- <0045> b = 0
    0280 : e405 ; -- <0045> bn lt :loop_612
    0281 : 0265 ; -- <0045> "

-- :end_612 -- = 0x0282

    0282 : 0008 ; -- <0048> a = key
    0283 : 060d ; -- <0048> b = 13

    0284 : e407 ; -- <0046> bn eq :else_644
    0285 : 0289 ; -- <0046> "

    0286 : fba0 ; -- <0047> callx  parse_command
    0287 : 0290 ; -- <0047> "
    0288 : fc00 ; -- <0047> "


    0289 : f80c ; -- <0050> pop rtna -- func parse_key
    028a : 140c ; -- <0050> pop y -- "
    028b : 100c ; -- <0050> pop x -- "
    028c : 080c ; -- <0050> pop i -- "
    028d : fc00 ; -- <0050> swapra = nop

-- :cmd_ack_msg -- = 0x028e
-- "OK\x0"
    028e : 4b4f ; -- <0052> KO
    028f : 0000 ; -- <0052>   

-- ######## func parse_command -- = 0x0290
    0290 : 3002 ; -- <0093> push i -- func parse_command
    0291 : 3004 ; -- <0093> push x -- "
    0292 : 3005 ; -- <0093> push y -- "
    0293 : 303e ; -- <0093> push rtna -- "

    0294 : 13a0 ; -- <0055> x = :cmd_table
    0295 : 021d ; -- <0055> "
-- :next_cmd -- = 0x0296
    0296 : d004 ; -- <0057> fetch a from x
    0297 : 03b0 ; -- <0057> "
    0298 : e000 ; -- <0058> br az :done
    0299 : 02d1 ; -- <0058> "

    029a : 0a00 ; -- <0074> i = 0
-- :loop_666 -- = 0x029b

    029b : 0002 ; -- <0060> a = i
    029c : fba0 ; -- <0061> call :fetch_byte
    029d : 01dc ; -- <0061> "
    029e : fc00 ; -- <0061> "
    029f : 1400 ; -- <0062> y = a
    02a0 : 0620 ; -- <0063> b = 32 -- asc b = " "

    02a1 : 0000 ; -- <0072> a = a
    02a2 : 0401 ; -- <0072> b = b

    02a3 : e007 ; -- <0064> br eq :else_675
    02a4 : 02b2 ; -- <0064> "

    02a5 : 062a ; -- <0065> b = 42 -- asc b = "*"
    02a6 : e007 ; -- <0066> br eq :matched
    02a7 : 02ba ; -- <0066> "
-- parameter character.  succeed early.
    02a8 : 0002 ; -- <0068> a = i

    02a9 : 0351 ; -- <0069> a = a<<1
    02aa : 0600 ; -- <0069> b = 0
    02ab : 5e00 ; -- <0069> av_ad_hi = 0
    02ac : 6300 ; -- <0069> av_ad_lo = ad0
    02ad : 0415 ; -- <0069> b = av_write_data
    02ae : 0416 ; -- <0069> b = av_read_data

    02af : 0005 ; -- <0070> a = y
    02b0 : e407 ; -- <0071> bn eq :no_match
    02b1 : 02c6 ; -- <0071> "



    02b2 : 0002 ; -- <0074> a = i
    02b3 : 0601 ; -- <0074> b = 1
    02b4 : c800 ; -- <0074> i = a+b
    02b5 : 0b00 ; -- <0074> "


    02b6 : 0002 ; -- <0074> a = i
    02b7 : 0607 ; -- <0074> b = $key_buf_max
    02b8 : e005 ; -- <0074> br lt :loop_666
    02b9 : 029b ; -- <0074> "

-- :end_666 -- = 0x02ba

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x02ba
    02ba : 23a0 ; -- <0078> pa = :cmd_ack_msg
    02bb : 028e ; -- <0078> "
    02bc : fba0 ; -- <0078> callx  set_text_flag  :cmd_ack_msg
    02bd : 09c3 ; -- <0078> "
    02be : fc00 ; -- <0078> "
    02bf : 1604 ; -- <0079> y = ($key_buf_len / 2)
    02c0 : c800 ; -- <0080> fetch rtna from x+y
    02c1 : d320 ; -- <0080> "
    02c2 : fbb0 ; -- <0080> "
    02c3 : fc00 ; -- <0081> swapra = nop
    02c4 : e00f ; -- <0083> jmp :done
    02c5 : 02d1 ; -- <0083> "

-- :no_match -- = 0x02c6
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    02c6 : 5e00 ; -- <0087> ram a = $ram_terminal_connected -- av_ad_hi = 0
    02c7 : 6296 ; -- <0087> ram a = $ram_terminal_connected -- av_ad_lo = 150
    02c8 : 0015 ; -- <0087> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    02c9 : 0016 ; -- <0087> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    02ca : e000 ; -- <0088> br az :done
    02cb : 02d1 ; -- <0088> "

    02cc : 1605 ; -- <0090> y = (($key_buf_len / 2) + 1)
    02cd : c800 ; -- <0091> x = x+y
    02ce : 1320 ; -- <0091> "
    02cf : e00f ; -- <0092> jmp :next_cmd
    02d0 : 0296 ; -- <0092> "
-- :done -- = 0x02d1

    02d1 : f80c ; -- <0095> pop rtna -- func parse_command
    02d2 : 140c ; -- <0095> pop y -- "
    02d3 : 100c ; -- <0095> pop x -- "
    02d4 : 080c ; -- <0095> pop i -- "
    02d5 : fc00 ; -- <0095> swapra = nop

-- ######## func hello_cmd -- = 0x02d6

    02d6 : 5e00 ; -- <0097> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    02d7 : 6296 ; -- <0097> ram $ram_terminal_connected = 1 -- av_ad_lo = 150
    02d8 : 5601 ; -- <0097> ram $ram_terminal_connected = 1 -- av_write_data = 1

    02d9 : fc00 ; -- <0099> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x02da
    02da : 303e ; -- <0104> push rtna -- func set_plan_stop_cmd

    02db : 5e00 ; -- <0101> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02dc : 6290 ; -- <0101> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02dd : f815 ; -- <0101> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02de : f816 ; -- <0101> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02df : fc00 ; -- <0102> swapra = nop
    02e0 : fba0 ; -- <0104> callx  init_plan_stop
    02e1 : 0313 ; -- <0104> "
    02e2 : fc00 ; -- <0104> "

    02e3 : f80c ; -- <0106> pop rtna -- func set_plan_stop_cmd
    02e4 : fc00 ; -- <0106> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x02e5
    02e5 : 303e ; -- <0111> push rtna -- func set_plan_crank_cmd

    02e6 : 5e00 ; -- <0108> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02e7 : 6290 ; -- <0108> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02e8 : f815 ; -- <0108> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02e9 : f816 ; -- <0108> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02ea : fc00 ; -- <0109> swapra = nop
    02eb : fba0 ; -- <0111> callx  init_plan_crank
    02ec : 0352 ; -- <0111> "
    02ed : fc00 ; -- <0111> "

    02ee : f80c ; -- <0113> pop rtna -- func set_plan_crank_cmd
    02ef : fc00 ; -- <0113> swapra = nop

-- ######## func set_plan_warmup_cmd -- = 0x02f0
    02f0 : 303e ; -- <0118> push rtna -- func set_plan_warmup_cmd

    02f1 : 5e00 ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02f2 : 6290 ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02f3 : f815 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02f4 : f816 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02f5 : fc00 ; -- <0116> swapra = nop
    02f6 : fba0 ; -- <0118> callx  init_plan_warmup
    02f7 : 03b8 ; -- <0118> "
    02f8 : fc00 ; -- <0118> "

    02f9 : f80c ; -- <0120> pop rtna -- func set_plan_warmup_cmd
    02fa : fc00 ; -- <0120> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x02fb
    02fb : 303e ; -- <0125> push rtna -- func set_plan_run_cmd

    02fc : 5e00 ; -- <0122> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02fd : 6290 ; -- <0122> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02fe : f815 ; -- <0122> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02ff : f816 ; -- <0122> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0300 : fc00 ; -- <0123> swapra = nop
    0301 : fba0 ; -- <0125> callx  init_plan_run
    0302 : 062d ; -- <0125> "
    0303 : fc00 ; -- <0125> "

    0304 : f80c ; -- <0127> pop rtna -- func set_plan_run_cmd
    0305 : fc00 ; -- <0127> swapra = nop

-- ######## func set_plan_learn_cmd -- = 0x0306
    0306 : 303e ; -- <0132> push rtna -- func set_plan_learn_cmd

    0307 : 5e00 ; -- <0129> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0308 : 6290 ; -- <0129> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    0309 : f815 ; -- <0129> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    030a : f816 ; -- <0129> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    030b : fc00 ; -- <0130> swapra = nop
    030c : fba0 ; -- <0132> callx  init_plan_learn_stoich
    030d : 044b ; -- <0132> "
    030e : fc00 ; -- <0132> "

    030f : f80c ; -- <0134> pop rtna -- func set_plan_learn_cmd
    0310 : fc00 ; -- <0134> swapra = nop


-- :plan_name_stop -- = 0x0311
-- "STP\x0"
    0311 : 5453 ; -- <0002> TS
    0312 : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x0313
    0313 : 303e ; -- <0023> push rtna -- func init_plan_stop

-- set up the stop plan.
    0314 : fba0 ; -- <0006> callx  clear_ign_history
    0315 : 0718 ; -- <0006> "
    0316 : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    0317 : 5e00 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    0318 : 6284 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 132
    0319 : 57a0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    031a : 025b ; -- <0008> "
    031b : 5e00 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    031c : 6286 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    031d : 57a0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    031e : 36b0 ; -- <0009> "
    031f : 83a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    0320 : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    0321 : 5e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0322 : 6292 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    0323 : 5600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    0324 : 8600 ; -- <0016> puff_len_us = 0

-- memorize state.
    0325 : 5e00 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    0326 : 628a ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 138
    0327 : 57a0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    0328 : 0311 ; -- <0019> "
    0329 : 5e00 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    032a : 628c ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 140
    032b : 57a0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    032c : 0338 ; -- <0020> "
    032d : 5e00 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    032e : 628e ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 142
    032f : 57a0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    0330 : 033c ; -- <0021> "
    0331 : 5e00 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0332 : 6290 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 144
    0333 : 57a0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0334 : 0337 ; -- <0022> "

    0335 : f80c ; -- <0024> pop rtna -- func init_plan_stop
    0336 : fc00 ; -- <0024> swapra = nop

-- ######## func destroy_plan_stop -- = 0x0337


    0337 : fc00 ; -- <0027> swapra = nop

-- ######## func puff_len_stop -- = 0x0338

    0338 : 5e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0339 : 6292 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    033a : 5600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0

    033b : fc00 ; -- <0031> swapra = nop

-- ######## func leave_stop -- = 0x033c
    033c : 303e ; -- <0044> push rtna -- func leave_stop

-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    033d : 001e ; -- <0035> a = power_duty
    033e : 0680 ; -- <0036> b = $ign_switch_off_mask
    033f : e403 ; -- <0037> bn and0z :stay
    0340 : 034e ; -- <0037> "
    0341 : 5e00 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    0342 : 6282 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 130
    0343 : 0015 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0344 : 0016 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0345 : 0608 ; -- <0039> b = ($ign_history_len / 2)
    0346 : e006 ; -- <0040> br gt :stay
    0347 : 034e ; -- <0040> "
    0348 : fba0 ; -- <0041> callx  destroy_plan_stop
    0349 : 0337 ; -- <0041> "
    034a : fc00 ; -- <0041> "
    034b : fba0 ; -- <0042> callx  init_plan_crank
    034c : 0352 ; -- <0042> "
    034d : fc00 ; -- <0042> "
-- :stay -- = 0x034e

    034e : f80c ; -- <0045> pop rtna -- func leave_stop
    034f : fc00 ; -- <0045> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 10000 to 20000 us length in about 5 seconds.

-- :plan_name_crank -- = 0x0350
-- "CR\x0"
    0350 : 5243 ; -- <0011> RC
    0351 : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x0352
    0352 : 303e ; -- <0033> push rtna -- func init_plan_crank

-- set up the crank plan.
    0353 : 5e00 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    0354 : 6294 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 148
    0355 : 5600 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0356 : 5e00 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    0357 : 6284 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 132
    0358 : 5657 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    0359 : 5e00 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    035a : 6286 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    035b : 57a0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    035c : 36b0 ; -- <0018> "
    035d : 83a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    035e : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    035f : 5e00 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    0360 : 6292 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 146
    0361 : 57a0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 10000
    0362 : 2710 ; -- <0023> "
    0363 : 87a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    0364 : 2710 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    0365 : fba0 ; -- <0026> callx  clear_ign_history
    0366 : 0718 ; -- <0026> "
    0367 : fc00 ; -- <0026> "

-- memorize state.
    0368 : 5e00 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    0369 : 628a ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 138
    036a : 57a0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    036b : 0350 ; -- <0029> "
    036c : 5e00 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    036d : 628c ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 140
    036e : 57a0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    036f : 037b ; -- <0030> "
    0370 : 5e00 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    0371 : 628e ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 142
    0372 : 57a0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    0373 : 0399 ; -- <0031> "
    0374 : 5e00 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    0375 : 6290 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 144
    0376 : 57a0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    0377 : 037a ; -- <0032> "

    0378 : f80c ; -- <0034> pop rtna -- func init_plan_crank
    0379 : fc00 ; -- <0034> swapra = nop

-- ######## func destroy_plan_crank -- = 0x037a


    037a : fc00 ; -- <0037> swapra = nop

-- ######## func puff_len_crank -- = 0x037b
    037b : 303e ; -- <0054> push rtna -- func puff_len_crank

    037c : 5e00 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    037d : 6294 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 148
    037e : 0015 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    037f : 0016 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0380 : 0606 ; -- <0040> b = $crank_max_puffs
    0381 : e006 ; -- <0041> br gt :puff_limit
    0382 : 0390 ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    0383 : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    0384 : 05dc ; -- <0043> "
    0385 : fba0 ; -- <0044> call :multiply
    0386 : 0170 ; -- <0044> "
    0387 : fc00 ; -- <0044> "
    0388 : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    0389 : 2710 ; -- <0045> "
    038a : 5e00 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    038b : 6292 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    038c : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    038d : 5700 ; -- <0046> "
    038e : e00f ; -- <0047> jmp :done
    038f : 0397 ; -- <0047> "
-- :puff_limit -- = 0x0390
-- prevent the puff counter from going higher & eventually rolling over.
    0390 : 5e00 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    0391 : 6294 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 148
    0392 : 5606 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 6
-- accept max puff len.
    0393 : 5e00 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    0394 : 6292 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 146
    0395 : 57a0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    0396 : 4e20 ; -- <0052> "
-- :done -- = 0x0397

    0397 : f80c ; -- <0055> pop rtna -- func puff_len_crank
    0398 : fc00 ; -- <0055> swapra = nop

-- ######## func leave_crank -- = 0x0399
    0399 : 303e ; -- <0071> push rtna -- func leave_crank

    039a : fba0 ; -- <0057> callx  check_engine_stop  a
    039b : 0a35 ; -- <0057> "
    039c : fc00 ; -- <0057> "
    039d : 0008 ; -- <0057> a = pa
    039e : e400 ; -- <0058> bn az :done
    039f : 03b4 ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    03a0 : 5e00 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    03a1 : 6280 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 128
    03a2 : 0015 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    03a3 : 0016 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    03a4 : e000 ; -- <0062> br az :stay
    03a5 : 03b4 ; -- <0062> "
    03a6 : 5e00 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    03a7 : 627e ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 126
    03a8 : 0015 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    03a9 : 0016 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    03aa : 07a0 ; -- <0064> b = $crank_success_rpm
    03ab : 0320 ; -- <0064> "
    03ac : e005 ; -- <0065> br lt :stay
    03ad : 03b4 ; -- <0065> "
    03ae : fba0 ; -- <0066> callx  destroy_plan_crank
    03af : 037a ; -- <0066> "
    03b0 : fc00 ; -- <0066> "
    03b1 : fba0 ; -- <0067> callx  init_plan_warmup
    03b2 : 03b8 ; -- <0067> "
    03b3 : fc00 ; -- <0067> "
-- :stay -- = 0x03b4

-- :done -- = 0x03b4

    03b4 : f80c ; -- <0072> pop rtna -- func leave_crank
    03b5 : fc00 ; -- <0072> swapra = nop



-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.
-- 750 = 0 degF.
-- max 6000 & min 4500 over a temp range 750 to 0x4c0 gives 6900 us puff at 74 deg F.  program rev 594.
-- this is used if the engine temp is unavailable.

-- :plan_name_warmup -- = 0x03b6
-- "WM\x0"
    03b6 : 4d57 ; -- <0016> MW
    03b7 : 0000 ; -- <0016>   

-- ######## func init_plan_warmup -- = 0x03b8

-- set up the warmup plan.
    03b8 : 5e00 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03b9 : 6214 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03ba : 0015 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03bb : 0016 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03bc : 063c ; -- <0021> b = $warmup_timeout_sec
    03bd : 5e00 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_hi = 0
    03be : 6298 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_lo = 152
    03bf : c800 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_write_data = a+b
    03c0 : 5700 ; -- <0022> "

-- memorize state.
    03c1 : 5e00 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    03c2 : 628a ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 138
    03c3 : 57a0 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    03c4 : 03b6 ; -- <0025> "
    03c5 : 5e00 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    03c6 : 628c ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 140
    03c7 : 57a0 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    03c8 : 03d3 ; -- <0026> "
    03c9 : 5e00 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    03ca : 628e ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 142
    03cb : 57a0 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    03cc : 0405 ; -- <0027> "
    03cd : 5e00 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    03ce : 6290 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 144
    03cf : 57a0 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    03d0 : 03d2 ; -- <0028> "

    03d1 : fc00 ; -- <0030> swapra = nop

-- ######## func destroy_plan_warmup -- = 0x03d2


    03d2 : fc00 ; -- <0033> swapra = nop

-- ######## func puff_len_warmup -- = 0x03d3
    03d3 : 3004 ; -- <0070> push x -- func puff_len_warmup
    03d4 : 303e ; -- <0070> push rtna -- "

-- x = enrichment us.
    03d5 : 13a0 ; -- <0036> x = $warmup_limping_enrichment_us
    03d6 : 07d0 ; -- <0036> "

-- check engine block temp sensor.  if valid, enrich by a linear function:
-- {warmup_min_temp_adc...warmup_success_temp_adc} -> {$warmup_max_enrichment_us...0}
    03d7 : 0202 ; -- <0040> a = $anmux_engine_block_temp

    03d8 : 0351 ; -- <0041> a = a<<1
    03d9 : 0618 ; -- <0041> b = 24
    03da : 5e00 ; -- <0041> av_ad_hi = 0
    03db : 6300 ; -- <0041> av_ad_lo = ad0
    03dc : 0415 ; -- <0041> b = av_write_data
    03dd : 0416 ; -- <0041> b = av_read_data

-- b = sensor reading in adc counts.
    03de : 03a0 ; -- <0043> a = $temp_ceiling_adc
    03df : 0ff0 ; -- <0043> "
    03e0 : e005 ; -- <0044> br lt :temp_invalid
    03e1 : 03fb ; -- <0044> "
    03e2 : 03a0 ; -- <0045> a = $warmup_success_temp_adc
    03e3 : 04c0 ; -- <0045> "
    03e4 : e005 ; -- <0046> br lt :too_warm
    03e5 : 03fb ; -- <0046> "
    03e6 : 03a0 ; -- <0047> a = $warmup_min_temp_adc
    03e7 : 02ee ; -- <0047> "
    03e8 : e005 ; -- <0048> br lt :in_range
    03e9 : 03ec ; -- <0048> "
    03ea : 07a0 ; -- <0049> b = $warmup_min_temp_adc
    03eb : 02ee ; -- <0049> "
-- :in_range -- = 0x03ec
-- negate the sensor reading so as to subtract it from warmup_success_temp_adc.
    03ec : 0360 ; -- <0052> a = 0xffff
    03ed : c800 ; -- <0053> b = xor
    03ee : 0738 ; -- <0053> "
    03ef : 0201 ; -- <0054> a = 1
    03f0 : c800 ; -- <0055> b = a+b
    03f1 : 0700 ; -- <0055> "
    03f2 : 03a0 ; -- <0056> a = $warmup_success_temp_adc
    03f3 : 04c0 ; -- <0056> "
    03f4 : c800 ; -- <0057> b = a+b
    03f5 : 0700 ; -- <0057> "
-- b = how many counts "cold" we are.  multiply that by the slope warmup_us_per_cold_adc.
    03f6 : 020c ; -- <0059> a = $warmup_us_per_cold_adc
    03f7 : fba0 ; -- <0060> call :multiply
    03f8 : 0170 ; -- <0060> "
    03f9 : fc00 ; -- <0060> "
    03fa : 1000 ; -- <0061> x = a
-- :too_warm -- = 0x03fb
-- :temp_invalid -- = 0x03fb

-- apply total of base amount and enrichment.
-- $warmup_min_puff_len_us <= total <= ($warmup_min_puff_len_us + $warmup_max_enrichment_us)
    03fb : 03a0 ; -- <0067> a = $warmup_min_puff_len_us
    03fc : 09c4 ; -- <0067> "
    03fd : 0404 ; -- <0068> b = x
    03fe : 5e00 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    03ff : 6292 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    0400 : c800 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    0401 : 5700 ; -- <0069> "

    0402 : f80c ; -- <0071> pop rtna -- func puff_len_warmup
    0403 : 100c ; -- <0071> pop x -- "
    0404 : fc00 ; -- <0071> swapra = nop

-- ######## func leave_warmup -- = 0x0405
    0405 : 303e ; -- <0099> push rtna -- func leave_warmup

    0406 : fba0 ; -- <0073> callx  check_engine_stop  a
    0407 : 0a35 ; -- <0073> "
    0408 : fc00 ; -- <0073> "
    0409 : 0008 ; -- <0073> a = pa
    040a : e400 ; -- <0074> bn az :done
    040b : 0439 ; -- <0074> "

-- transition to plan_run if warmup has expired.
    040c : 5e00 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    040d : 6214 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    040e : 0015 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    040f : 0016 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0410 : 5e00 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_hi = 0
    0411 : 6298 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_lo = 152
    0412 : 0415 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_write_data -- start read cycle
    0413 : 0416 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_read_data -- finish read cycle

    0414 : 0000 ; -- <0083> a = a
    0415 : 0401 ; -- <0083> b = b

    0416 : e406 ; -- <0079> bn gt :else_1046
    0417 : 0420 ; -- <0079> "

    0418 : fba0 ; -- <0080> callx  destroy_plan_warmup
    0419 : 03d2 ; -- <0080> "
    041a : fc00 ; -- <0080> "
    041b : fba0 ; -- <0081> callx  init_plan_run
    041c : 062d ; -- <0081> "
    041d : fc00 ; -- <0081> "
    041e : e00f ; -- <0082> jmp :done
    041f : 0439 ; -- <0082> "


-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    0420 : 0202 ; -- <0087> a = $anmux_engine_block_temp

    0421 : 0351 ; -- <0088> a = a<<1
    0422 : 0618 ; -- <0088> b = 24
    0423 : 5e00 ; -- <0088> av_ad_hi = 0
    0424 : 6300 ; -- <0088> av_ad_lo = ad0
    0425 : 0415 ; -- <0088> b = av_write_data
    0426 : 0416 ; -- <0088> b = av_read_data

    0427 : 03a0 ; -- <0089> a = $temp_ceiling_adc
    0428 : 0ff0 ; -- <0089> "

    0429 : 0000 ; -- <0096> a = a
    042a : 0401 ; -- <0096> b = b

    042b : e406 ; -- <0090> bn gt :else_1067
    042c : 0439 ; -- <0090> "

    042d : 03a0 ; -- <0091> a = $warmup_success_temp_adc
    042e : 04c0 ; -- <0091> "

    042f : 0000 ; -- <0095> a = a
    0430 : 0401 ; -- <0095> b = b

    0431 : e405 ; -- <0092> bn lt :else_1073
    0432 : 0439 ; -- <0092> "

    0433 : fba0 ; -- <0093> callx  destroy_plan_warmup
    0434 : 03d2 ; -- <0093> "
    0435 : fc00 ; -- <0093> "
    0436 : fba0 ; -- <0094> callx  init_plan_run
    0437 : 062d ; -- <0094> "
    0438 : fc00 ; -- <0094> "



-- :done -- = 0x0439

    0439 : f80c ; -- <0100> pop rtna -- func leave_warmup
    043a : fc00 ; -- <0100> swapra = nop



-- :rpm_cells -- = 0x043b
    043b : 01f4 ; -- <0004> 500
    043c : 0271 ; -- <0005> 625
    043d : 030d ; -- <0006> 781
    043e : 03d1 ; -- <0007> 977
    043f : 04c5 ; -- <0008> 1221
    0440 : 05f6 ; -- <0009> 1526
    0441 : 0773 ; -- <0010> 1907
    0442 : 0950 ; -- <0011> 2384
    0443 : 0ba4 ; -- <0012> 2980
    0444 : 0e8d ; -- <0013> 3725
    0445 : 1231 ; -- <0014> 4657
    0446 : 16bd ; -- <0015> 5821
    0447 : 1c6c ; -- <0016> 7276
    0448 : ffff ; -- <0017> 0xffff




-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed.

-- o2 sensor interpetation & state machine.

-- :plan_name_learn_stoich -- = 0x0449
-- "LN\x0"
    0449 : 4e4c ; -- <0047> NL
    044a : 0000 ; -- <0047>   

-- ######## func init_plan_learn_stoich -- = 0x044b

-- set up the learn_stoich plan.
    044b : 5e00 ; -- <0051> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    044c : 62d0 ; -- <0051> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 208
    044d : 560a ; -- <0051> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- memorize state.
    044e : 5e00 ; -- <0054> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_hi = 0
    044f : 628a ; -- <0054> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_lo = 138
    0450 : 57a0 ; -- <0054> ram $ram_plan_name = :plan_name_learn_stoich -- av_write_data = :plan_name_learn_stoich
    0451 : 0449 ; -- <0054> "
    0452 : 5e00 ; -- <0055> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_hi = 0
    0453 : 628c ; -- <0055> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_lo = 140
    0454 : 57a0 ; -- <0055> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_write_data = :puff_len_learn_stoich
    0455 : 0464 ; -- <0055> "
    0456 : 5e00 ; -- <0056> ram $ram_transition_func = :leave_learn_stoich -- av_ad_hi = 0
    0457 : 628e ; -- <0056> ram $ram_transition_func = :leave_learn_stoich -- av_ad_lo = 142
    0458 : 57a0 ; -- <0056> ram $ram_transition_func = :leave_learn_stoich -- av_write_data = :leave_learn_stoich
    0459 : 055e ; -- <0056> "
    045a : 5e00 ; -- <0057> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_hi = 0
    045b : 6290 ; -- <0057> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_lo = 144
    045c : 57a0 ; -- <0057> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_write_data = :destroy_plan_learn_stoich
    045d : 045f ; -- <0057> "

    045e : fc00 ; -- <0059> swapra = nop

-- ######## func destroy_plan_learn_stoich -- = 0x045f


    045f : fc00 ; -- <0062> swapra = nop

-- :lrns_trim_up_msg -- = 0x0460
-- "trR\x0"
    0460 : 7274 ; -- <0064> rt
    0461 : 0052 ; -- <0064>  R
-- :lrns_trim_down_msg -- = 0x0462
-- "trL\x0"
    0462 : 7274 ; -- <0066> rt
    0463 : 004c ; -- <0066>  L

-- ######## func puff_len_learn_stoich -- = 0x0464
    0464 : 3002 ; -- <0101> push i -- func puff_len_learn_stoich
    0465 : 3003 ; -- <0101> push j -- "
    0466 : 3006 ; -- <0101> push g6 -- "
    0467 : 3007 ; -- <0101> push g7 -- "
    0468 : 303e ; -- <0101> push rtna -- "

    0469 : 5e00 ; -- <0069> ram i = $ram_lrns_ticks_remain -- av_ad_hi = 0
    046a : 62d0 ; -- <0069> ram i = $ram_lrns_ticks_remain -- av_ad_lo = 208
    046b : 0815 ; -- <0069> ram i = $ram_lrns_ticks_remain -- i = av_write_data -- start read cycle
    046c : 0816 ; -- <0069> ram i = $ram_lrns_ticks_remain -- i = av_read_data -- finish read cycle

    046d : 0002 ; -- <0100> a = i
    046e : 0600 ; -- <0100> b = 0

    046f : e406 ; -- <0070> bn gt :else_1135
    0470 : 0478 ; -- <0070> "

    0471 : 0f60 ; -- <0071> j = -1
    0472 : 5e00 ; -- <0072> ram $ram_lrns_ticks_remain = i+j -- av_ad_hi = 0
    0473 : 62d0 ; -- <0072> ram $ram_lrns_ticks_remain = i+j -- av_ad_lo = 208
    0474 : c800 ; -- <0072> ram $ram_lrns_ticks_remain = i+j -- av_write_data = i+j
    0475 : 5710 ; -- <0072> "

    0476 : e00f ; -- <0074> jmp :end_1135
    0477 : 04b4 ; -- <0074> "

    0478 : 5e00 ; -- <0075> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    0479 : 62d0 ; -- <0075> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 208
    047a : 560a ; -- <0075> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    047b : 5e00 ; -- <0078> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    047c : 6292 ; -- <0078> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    047d : 0815 ; -- <0078> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    047e : 0816 ; -- <0078> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    047f : 0e00 ; -- <0079> j = 0
    0480 : 5e00 ; -- <0080> ram g6 = $ram_o2_state -- av_ad_hi = 0
    0481 : 62d2 ; -- <0080> ram g6 = $ram_o2_state -- av_ad_lo = 210
    0482 : 1815 ; -- <0080> ram g6 = $ram_o2_state -- g6 = av_write_data -- start read cycle
    0483 : 1816 ; -- <0080> ram g6 = $ram_o2_state -- g6 = av_read_data -- finish read cycle
    0484 : fba0 ; -- <0081> callx  interpret_o2
    0485 : 0521 ; -- <0081> "
    0486 : fc00 ; -- <0081> "
    0487 : 5e00 ; -- <0082> ram g7 = $ram_o2_state -- av_ad_hi = 0
    0488 : 62d2 ; -- <0082> ram g7 = $ram_o2_state -- av_ad_lo = 210
    0489 : 1c15 ; -- <0082> ram g7 = $ram_o2_state -- g7 = av_write_data -- start read cycle
    048a : 1c16 ; -- <0082> ram g7 = $ram_o2_state -- g7 = av_read_data -- finish read cycle

    048b : 0007 ; -- <0099> a = g7
    048c : 0601 ; -- <0099> b = 1

    048d : e407 ; -- <0083> bn eq :else_1165
    048e : 04a4 ; -- <0083> "

-- sensing a lean condition.  trim up to enrich.

    048f : 0002 ; -- <0087> a = i
    0490 : 07a0 ; -- <0087> b = 10000
    0491 : 2710 ; -- <0087> "

    0492 : e405 ; -- <0085> bn lt :else_1170
    0493 : 0496 ; -- <0085> "

    0494 : 0fa0 ; -- <0086> j = $lrns_puff_step_up_us
    0495 : 0258 ; -- <0086> "

    0496 : 23a0 ; -- <0088> pa = :lrns_trim_up_msg
    0497 : 0460 ; -- <0088> "
    0498 : fba0 ; -- <0088> callx  set_text_flag  :lrns_trim_up_msg
    0499 : 09c3 ; -- <0088> "
    049a : fc00 ; -- <0088> "

    049b : 0006 ; -- <0092> a = g6
    049c : 0602 ; -- <0092> b = 2

    049d : e407 ; -- <0089> bn eq :else_1181
    049e : 04a2 ; -- <0089> "

-- o2 state just switched to lean.  adjust map.
    049f : fba0 ; -- <0091> callx  learn_smap
    04a0 : 04c0 ; -- <0091> "
    04a1 : fc00 ; -- <0091> "


    04a2 : e00f ; -- <0094> jmp :end_1165
    04a3 : 04b0 ; -- <0094> "

-- sensing a rich condition.  trim down to lean it out.

    04a4 : 0002 ; -- <0098> a = i
    04a5 : 07a0 ; -- <0098> b = 2000
    04a6 : 07d0 ; -- <0098> "

    04a7 : e406 ; -- <0096> bn gt :else_1191
    04a8 : 04ab ; -- <0096> "

    04a9 : 0fa0 ; -- <0097> j = $lrns_puff_step_down_us
    04aa : ffdf ; -- <0097> "

    04ab : 23a0 ; -- <0099> pa = :lrns_trim_down_msg
    04ac : 0462 ; -- <0099> "
    04ad : fba0 ; -- <0099> callx  set_text_flag  :lrns_trim_down_msg
    04ae : 09c3 ; -- <0099> "
    04af : fc00 ; -- <0099> "

    04b0 : 5e00 ; -- <0100> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    04b1 : 6292 ; -- <0100> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 146
    04b2 : c800 ; -- <0100> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    04b3 : 5710 ; -- <0100> "


    04b4 : f80c ; -- <0102> pop rtna -- func puff_len_learn_stoich
    04b5 : 1c0c ; -- <0102> pop g7 -- "
    04b6 : 180c ; -- <0102> pop g6 -- "
    04b7 : 0c0c ; -- <0102> pop j -- "
    04b8 : 080c ; -- <0102> pop i -- "
    04b9 : fc00 ; -- <0102> swapra = nop

-- :lrns_enrich_msg -- = 0x04ba
-- "lrnR\x0"
    04ba : 726c ; -- <0104> rl
    04bb : 526e ; -- <0104> Rn
    04bc : 0000 ; -- <0104>   
-- :lrns_lean_msg -- = 0x04bd
-- "lrnL\x0"
    04bd : 726c ; -- <0106> rl
    04be : 4c6e ; -- <0106> Ln
    04bf : 0000 ; -- <0106>   

-- ######## func learn_smap -- = 0x04c0
    04c0 : 3002 ; -- <0142> push i -- func learn_smap
    04c1 : 3004 ; -- <0142> push x -- "
    04c2 : 3005 ; -- <0142> push y -- "
    04c3 : 303e ; -- <0142> push rtna -- "

    04c4 : 5e00 ; -- <0109> ram a = $ram_rpm_valid -- av_ad_hi = 0
    04c5 : 6280 ; -- <0109> ram a = $ram_rpm_valid -- av_ad_lo = 128
    04c6 : 0015 ; -- <0109> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    04c7 : 0016 ; -- <0109> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    04c8 : 0000 ; -- <0141> a = a
    04c9 : 0601 ; -- <0141> b = 1

    04ca : e407 ; -- <0110> bn eq :else_1226
    04cb : 0518 ; -- <0110> "

-- let g6 = map cell num.  x = map puff len.  i = observed stoich puff len.
    04cc : 5e00 ; -- <0112> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    04cd : 627e ; -- <0112> ram pa = $ram_avg_rpm -- av_ad_lo = 126
    04ce : 2015 ; -- <0112> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    04cf : 2016 ; -- <0112> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    04d0 : fba0 ; -- <0113> callx  find_rpm_cell  pa  g6
    04d1 : 0564 ; -- <0113> "
    04d2 : fc00 ; -- <0113> "
    04d3 : 1808 ; -- <0113> g6 = pa
    04d4 : 0006 ; -- <0114> a = g6

    04d5 : 0351 ; -- <0115> a = a<<1
    04d6 : 069a ; -- <0115> b = 154
    04d7 : 5e00 ; -- <0115> av_ad_hi = 0
    04d8 : 6300 ; -- <0115> av_ad_lo = ad0
    04d9 : 0415 ; -- <0115> b = av_write_data
    04da : 0416 ; -- <0115> b = av_read_data

    04db : 1001 ; -- <0116> x = b
    04dc : 5e00 ; -- <0117> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    04dd : 6292 ; -- <0117> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    04de : 0815 ; -- <0117> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    04df : 0816 ; -- <0117> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    04e0 : 17a0 ; -- <0118> y = (0xffff - $lrns_map_step + 1)
    04e1 : ff38 ; -- <0118> "

    04e2 : c800 ; -- <0125> a = x+y
    04e3 : 0320 ; -- <0125> "
    04e4 : 0402 ; -- <0125> b = i

    04e5 : e406 ; -- <0119> bn gt :else_1253
    04e6 : 04f5 ; -- <0119> "

-- map is richer than observed stoich.  lean the map 1 step.
    04e7 : 0006 ; -- <0121> a = g6
    04e8 : c800 ; -- <0122> b = x+y
    04e9 : 0720 ; -- <0122> "

    04ea : 0351 ; -- <0123> a = a<<1
    04eb : 3001 ; -- <0123> push b -- push b
    04ec : 069a ; -- <0123> b = 154
    04ed : 5e00 ; -- <0123> av_ad_hi = 0
    04ee : 6300 ; -- <0123> av_ad_lo = ad0
    04ef : 540c ; -- <0123> pop av_write_data -- pop av_write_data

    04f0 : 23a0 ; -- <0124> pa = :lrns_lean_msg
    04f1 : 04bd ; -- <0124> "
    04f2 : fba0 ; -- <0124> callx  set_text_flag  :lrns_lean_msg
    04f3 : 09c3 ; -- <0124> "
    04f4 : fc00 ; -- <0124> "

    04f5 : 16c8 ; -- <0126> y = $lrns_map_step

    04f6 : c800 ; -- <0133> a = x+y
    04f7 : 0320 ; -- <0133> "
    04f8 : 0402 ; -- <0133> b = i

    04f9 : e405 ; -- <0127> bn lt :else_1273
    04fa : 0509 ; -- <0127> "

-- map is leaner than observed stoich.  rich the map 1 step.
    04fb : 0006 ; -- <0129> a = g6
    04fc : c800 ; -- <0130> b = x+y
    04fd : 0720 ; -- <0130> "

    04fe : 0351 ; -- <0131> a = a<<1
    04ff : 3001 ; -- <0131> push b -- push b
    0500 : 069a ; -- <0131> b = 154
    0501 : 5e00 ; -- <0131> av_ad_hi = 0
    0502 : 6300 ; -- <0131> av_ad_lo = ad0
    0503 : 540c ; -- <0131> pop av_write_data -- pop av_write_data

    0504 : 23a0 ; -- <0132> pa = :lrns_enrich_msg
    0505 : 04ba ; -- <0132> "
    0506 : fba0 ; -- <0132> callx  set_text_flag  :lrns_enrich_msg
    0507 : 09c3 ; -- <0132> "
    0508 : fc00 ; -- <0132> "


-- dump smap if we haven't done so lately.
    0509 : 5e00 ; -- <0136> ram a = $ram_last_learn_second -- av_ad_hi = 0
    050a : 62b4 ; -- <0136> ram a = $ram_last_learn_second -- av_ad_lo = 180
    050b : 0015 ; -- <0136> ram a = $ram_last_learn_second -- a = av_write_data -- start read cycle
    050c : 0016 ; -- <0136> ram a = $ram_last_learn_second -- a = av_read_data -- finish read cycle
    050d : 5e00 ; -- <0137> ram b = $ram_seconds_cnt -- av_ad_hi = 0
    050e : 6244 ; -- <0137> ram b = $ram_seconds_cnt -- av_ad_lo = 68
    050f : 0415 ; -- <0137> ram b = $ram_seconds_cnt -- b = av_write_data -- start read cycle
    0510 : 0416 ; -- <0137> ram b = $ram_seconds_cnt -- b = av_read_data -- finish read cycle

    0511 : 0000 ; -- <0140> a = a
    0512 : 0401 ; -- <0140> b = b

    0513 : e007 ; -- <0138> br eq :else_1299
    0514 : 0518 ; -- <0138> "

    0515 : fba0 ; -- <0139> callx  dump_smap_cmd
    0516 : 0581 ; -- <0139> "
    0517 : fc00 ; -- <0139> "



    0518 : f80c ; -- <0143> pop rtna -- func learn_smap
    0519 : 140c ; -- <0143> pop y -- "
    051a : 100c ; -- <0143> pop x -- "
    051b : 080c ; -- <0143> pop i -- "
    051c : fc00 ; -- <0143> swapra = nop

-- :o2_rich_msg -- = 0x051d
-- "o2R\x0"
    051d : 326f ; -- <0145> 2o
    051e : 0052 ; -- <0145>  R
-- :o2_lean_msg -- = 0x051f
-- "o2L\x0"
    051f : 326f ; -- <0147> 2o
    0520 : 004c ; -- <0147>  L

-- ######## func interpret_o2 -- = 0x0521

    0521 : 5e00 ; -- <0150> ram a = $ram_o2_state -- av_ad_hi = 0
    0522 : 62d2 ; -- <0150> ram a = $ram_o2_state -- av_ad_lo = 210
    0523 : 0015 ; -- <0150> ram a = $ram_o2_state -- a = av_write_data -- start read cycle
    0524 : 0016 ; -- <0150> ram a = $ram_o2_state -- a = av_read_data -- finish read cycle

    0525 : 0000 ; -- <0161> a = a
    0526 : 0601 ; -- <0161> b = 1

    0527 : e007 ; -- <0151> br eq :else_1319
    0528 : 053c ; -- <0151> "

-- check sensor for lean state.
    0529 : 0205 ; -- <0153> a = $o2_adc_channel

    052a : 0351 ; -- <0154> a = a<<1
    052b : 0628 ; -- <0154> b = 40
    052c : 5e00 ; -- <0154> av_ad_hi = 0
    052d : 6300 ; -- <0154> av_ad_lo = ad0
    052e : 0415 ; -- <0154> b = av_write_data
    052f : 0416 ; -- <0154> b = av_read_data

    0530 : 03a0 ; -- <0155> a = $o2_lean_thresh_adc
    0531 : 01c2 ; -- <0155> "

    0532 : 0000 ; -- <0160> a = a
    0533 : 0401 ; -- <0160> b = b

    0534 : e406 ; -- <0156> bn gt :else_1332
    0535 : 053c ; -- <0156> "

    0536 : 5e00 ; -- <0157> ram $ram_o2_state = $o2_state_lean -- av_ad_hi = 0
    0537 : 62d2 ; -- <0157> ram $ram_o2_state = $o2_state_lean -- av_ad_lo = 210
    0538 : 5601 ; -- <0157> ram $ram_o2_state = $o2_state_lean -- av_write_data = 1
    0539 : 5e00 ; -- <0158> ram $ram_o2_been_lean = 1 -- av_ad_hi = 0
    053a : 62d6 ; -- <0158> ram $ram_o2_been_lean = 1 -- av_ad_lo = 214
    053b : 5601 ; -- <0158> ram $ram_o2_been_lean = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_lean_msg



    053c : 0000 ; -- <0172> a = a
    053d : 0602 ; -- <0172> b = 2

    053e : e007 ; -- <0162> br eq :else_1342
    053f : 0553 ; -- <0162> "

-- check sensor for rich state.
    0540 : 0205 ; -- <0164> a = $o2_adc_channel

    0541 : 0351 ; -- <0165> a = a<<1
    0542 : 0628 ; -- <0165> b = 40
    0543 : 5e00 ; -- <0165> av_ad_hi = 0
    0544 : 6300 ; -- <0165> av_ad_lo = ad0
    0545 : 0415 ; -- <0165> b = av_write_data
    0546 : 0416 ; -- <0165> b = av_read_data

    0547 : 03a0 ; -- <0166> a = $o2_rich_thresh_adc
    0548 : 02bc ; -- <0166> "

    0549 : 0000 ; -- <0171> a = a
    054a : 0401 ; -- <0171> b = b

    054b : e405 ; -- <0167> bn lt :else_1355
    054c : 0553 ; -- <0167> "

    054d : 5e00 ; -- <0168> ram $ram_o2_state = $o2_state_rich -- av_ad_hi = 0
    054e : 62d2 ; -- <0168> ram $ram_o2_state = $o2_state_rich -- av_ad_lo = 210
    054f : 5602 ; -- <0168> ram $ram_o2_state = $o2_state_rich -- av_write_data = 2
    0550 : 5e00 ; -- <0169> ram $ram_o2_been_rich = 1 -- av_ad_hi = 0
    0551 : 62d4 ; -- <0169> ram $ram_o2_been_rich = 1 -- av_ad_lo = 212
    0552 : 5601 ; -- <0169> ram $ram_o2_been_rich = 1 -- av_write_data = 1
-- callx  set_text_flag  :o2_rich_msg



    0553 : fc00 ; -- <0174> swapra = nop

-- ######## func init_o2_state -- = 0x0554

    0554 : 5e00 ; -- <0176> ram $ram_o2_state = $o2_state_init -- av_ad_hi = 0
    0555 : 62d2 ; -- <0176> ram $ram_o2_state = $o2_state_init -- av_ad_lo = 210
    0556 : 5600 ; -- <0176> ram $ram_o2_state = $o2_state_init -- av_write_data = 0
    0557 : 5e00 ; -- <0177> ram $ram_o2_been_lean = 0 -- av_ad_hi = 0
    0558 : 62d6 ; -- <0177> ram $ram_o2_been_lean = 0 -- av_ad_lo = 214
    0559 : 5600 ; -- <0177> ram $ram_o2_been_lean = 0 -- av_write_data = 0
    055a : 5e00 ; -- <0178> ram $ram_o2_been_rich = 0 -- av_ad_hi = 0
    055b : 62d4 ; -- <0178> ram $ram_o2_been_rich = 0 -- av_ad_lo = 212
    055c : 5600 ; -- <0178> ram $ram_o2_been_rich = 0 -- av_write_data = 0

    055d : fc00 ; -- <0180> swapra = nop

-- ######## func leave_learn_stoich -- = 0x055e
    055e : 303e ; -- <0183> push rtna -- func leave_learn_stoich

    055f : fba0 ; -- <0182> callx  check_engine_stop  pa
    0560 : 0a35 ; -- <0182> "
    0561 : fc00 ; -- <0182> "

    0562 : f80c ; -- <0184> pop rtna -- func leave_learn_stoich
    0563 : fc00 ; -- <0184> swapra = nop

-- ######## func find_rpm_cell -- = 0x0564
    0564 : 3002 ; -- <0201> push i -- func find_rpm_cell
    0565 : 3003 ; -- <0201> push j -- "

    0566 : 0a01 ; -- <0186> i = 1
    0567 : 0008 ; -- <0187> a = rpm
    0568 : 0760 ; -- <0188> b = 0xffff
    0569 : e007 ; -- <0189> br eq :found
    056a : 0578 ; -- <0189> "
-- :next_cell -- = 0x056b
    056b : 0fa0 ; -- <0191> j = :rpm_cells
    056c : 043b ; -- <0191> "
    056d : c800 ; -- <0192> fetch a from i+j
    056e : d310 ; -- <0192> "
    056f : 03b0 ; -- <0192> "
    0570 : 0408 ; -- <0193> b = rpm
    0571 : e006 ; -- <0194> br gt :found
    0572 : 0578 ; -- <0194> "
    0573 : 0e01 ; -- <0195> j = 1
    0574 : c800 ; -- <0196> i = i+j
    0575 : 0b10 ; -- <0196> "
    0576 : e00f ; -- <0197> jmp :next_cell
    0577 : 056b ; -- <0197> "
-- :found -- = 0x0578
    0578 : 0f60 ; -- <0199> j = -1
    0579 : c800 ; -- <0200> cell = i+j
    057a : 2310 ; -- <0200> "
    057b : 0c0c ; -- <0200> pop j -- rtn i+j
    057c : 080c ; -- <0200> pop i -- "
    057d : fc00 ; -- <0199> swapra = nop

    057e : 0c0c ; -- <0202> pop j -- func find_rpm_cell
    057f : 080c ; -- <0202> pop i -- "
    0580 : fc00 ; -- <0202> swapra = nop

-- ######## func dump_smap_cmd -- = 0x0581
    0581 : 3004 ; -- <0217> push x -- func dump_smap_cmd
    0582 : 303e ; -- <0217> push rtna -- "

    0583 : 5e00 ; -- <0204> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    0584 : 627e ; -- <0204> ram pa = $ram_avg_rpm -- av_ad_lo = 126
    0585 : 2015 ; -- <0204> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    0586 : 2016 ; -- <0204> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    0587 : fba0 ; -- <0205> callx  find_rpm_cell  pa  y
    0588 : 0564 ; -- <0205> "
    0589 : fc00 ; -- <0205> "
    058a : 1408 ; -- <0205> y = pa
    058b : 1200 ; -- <0215> x = 0
-- :loop_1419 -- = 0x058c

    058c : 0004 ; -- <0206> a = x

    058d : 0351 ; -- <0207> a = a<<1
    058e : 069a ; -- <0207> b = 154
    058f : 5e00 ; -- <0207> av_ad_hi = 0
    0590 : 6300 ; -- <0207> av_ad_lo = ad0
    0591 : 0415 ; -- <0207> b = av_write_data
    0592 : 0416 ; -- <0207> b = av_read_data

    0593 : 0001 ; -- <0208> a = b
    0594 : fba0 ; -- <0209> call put4x
    0595 : 00c3 ; -- <0209> "
    0596 : fc00 ; -- <0209> "

    0597 : 0004 ; -- <0212> a = x
    0598 : 0405 ; -- <0212> b = y

    0599 : e407 ; -- <0210> bn eq :else_1433
    059a : 059f ; -- <0210> "

    059b : 023c ; -- <0211> a = 60 -- putasc "<"
    059c : fba0 ; -- <0211> putasc "<"
    059d : 009b ; -- <0211> "
    059e : fc00 ; -- <0211> "

    059f : 0220 ; -- <0213> a = 32 -- putasc " "
    05a0 : fba0 ; -- <0213> putasc " "
    05a1 : 009b ; -- <0213> "
    05a2 : fc00 ; -- <0213> "


    05a3 : 0004 ; -- <0215> a = x
    05a4 : 0601 ; -- <0215> b = 1
    05a5 : c800 ; -- <0215> x = a+b
    05a6 : 1300 ; -- <0215> "


    05a7 : 0004 ; -- <0215> a = x
    05a8 : 060d ; -- <0215> b = $num_rpm_cells
    05a9 : e005 ; -- <0215> br lt :loop_1419
    05aa : 058c ; -- <0215> "

-- :end_1419 -- = 0x05ab
    05ab : 020d ; -- <0216> a = 13 -- puteol
    05ac : fba0 ; -- <0216> puteol
    05ad : 009b ; -- <0216> "
    05ae : fc00 ; -- <0216> "
    05af : 020a ; -- <0216> a = 10 -- puteol
    05b0 : fba0 ; -- <0216> puteol
    05b1 : 009b ; -- <0216> "
    05b2 : fc00 ; -- <0216> "

    05b3 : f80c ; -- <0218> pop rtna -- func dump_smap_cmd
    05b4 : 100c ; -- <0218> pop x -- "
    05b5 : fc00 ; -- <0218> swapra = nop

-- ######## func load_smap_cmd -- = 0x05b6
    05b6 : 3002 ; -- <0227> push i -- func load_smap_cmd
    05b7 : 303e ; -- <0227> push rtna -- "

    05b8 : 0a00 ; -- <0226> i = 0
-- :loop_1464 -- = 0x05b9

    05b9 : fba0 ; -- <0220> call  get4x
    05ba : 00fc ; -- <0220> "
    05bb : fc00 ; -- <0220> "
    05bc : 0400 ; -- <0221> b = a
    05bd : 0002 ; -- <0222> a = i

    05be : 0351 ; -- <0223> a = a<<1
    05bf : 3001 ; -- <0223> push b -- push b
    05c0 : 069a ; -- <0223> b = 154
    05c1 : 5e00 ; -- <0223> av_ad_hi = 0
    05c2 : 6300 ; -- <0223> av_ad_lo = ad0
    05c3 : 540c ; -- <0223> pop av_write_data -- pop av_write_data

    05c4 : fba0 ; -- <0224> getchar
    05c5 : 00a4 ; -- <0224> "
    05c6 : fc00 ; -- <0224> "


    05c7 : 0002 ; -- <0226> a = i
    05c8 : 0601 ; -- <0226> b = 1
    05c9 : c800 ; -- <0226> i = a+b
    05ca : 0b00 ; -- <0226> "


    05cb : 0002 ; -- <0226> a = i
    05cc : 060d ; -- <0226> b = $num_rpm_cells
    05cd : e005 ; -- <0226> br lt :loop_1464
    05ce : 05b9 ; -- <0226> "

-- :end_1464 -- = 0x05cf

    05cf : f80c ; -- <0228> pop rtna -- func load_smap_cmd
    05d0 : 080c ; -- <0228> pop i -- "
    05d1 : fc00 ; -- <0228> swapra = nop

-- ######## func clear_smap_cmd -- = 0x05d2
    05d2 : 3002 ; -- <0235> push i -- func clear_smap_cmd

    05d3 : 0a00 ; -- <0234> i = 0
-- :loop_1491 -- = 0x05d4

    05d4 : 0002 ; -- <0230> a = i
    05d5 : 07a0 ; -- <0231> b = 3000
    05d6 : 0bb8 ; -- <0231> "

    05d7 : 0351 ; -- <0232> a = a<<1
    05d8 : 3001 ; -- <0232> push b -- push b
    05d9 : 069a ; -- <0232> b = 154
    05da : 5e00 ; -- <0232> av_ad_hi = 0
    05db : 6300 ; -- <0232> av_ad_lo = ad0
    05dc : 540c ; -- <0232> pop av_write_data -- pop av_write_data



    05dd : 0002 ; -- <0234> a = i
    05de : 0601 ; -- <0234> b = 1
    05df : c800 ; -- <0234> i = a+b
    05e0 : 0b00 ; -- <0234> "


    05e1 : 0002 ; -- <0234> a = i
    05e2 : 060d ; -- <0234> b = $num_rpm_cells
    05e3 : e005 ; -- <0234> br lt :loop_1491
    05e4 : 05d4 ; -- <0234> "

-- :end_1491 -- = 0x05e5

    05e5 : 080c ; -- <0236> pop i -- func clear_smap_cmd
    05e6 : fc00 ; -- <0236> swapra = nop

-- :plan_name_run -- = 0x05e7
-- "RN\x0"
    05e7 : 4e52 ; -- <0002> NR
    05e8 : 0000 ; -- <0002>   


-- max trim is about 200 thou prior to multiplier overflow.
-- or more if the smap puff is below 8000.
-- trim resolution is 4 thou due to multiplier.
-- smap resolution for trimming is 16 us.
-- final trim enrichment us resolution is 16 us.

-- ######## func trim_lean_cmd -- = 0x05e9

    05e9 : 5e00 ; -- <0016> ram a = $run_manual_trim_thou -- av_ad_hi = 0
    05ea : 62d8 ; -- <0016> ram a = $run_manual_trim_thou -- av_ad_lo = 216
    05eb : 0015 ; -- <0016> ram a = $run_manual_trim_thou -- a = av_write_data -- start read cycle
    05ec : 0016 ; -- <0016> ram a = $run_manual_trim_thou -- a = av_read_data -- finish read cycle

    05ed : 0000 ; -- <0021> a = a
    05ee : 0600 ; -- <0021> b = 0

    05ef : e7a0 ; -- <0017> bn = :else_1519
    05f0 : 05f3 ; -- <0017> "


    05f1 : e00f ; -- <0019> jmp :end_1519
    05f2 : 05f9 ; -- <0019> "

    05f3 : 07a0 ; -- <0020> b = ($run_manual_trim_step_thou ^ 0xffff + 1)
    05f4 : 10004 ; -- <0020> "
    05f5 : 5e00 ; -- <0021> ram $run_manual_trim_thou = a+b -- av_ad_hi = 0
    05f6 : 62d8 ; -- <0021> ram $run_manual_trim_thou = a+b -- av_ad_lo = 216
    05f7 : c800 ; -- <0021> ram $run_manual_trim_thou = a+b -- av_write_data = a+b
    05f8 : 5700 ; -- <0021> "


    05f9 : fc00 ; -- <0023> swapra = nop

-- ######## func trim_rich_cmd -- = 0x05fa

    05fa : 5e00 ; -- <0025> ram a = $run_manual_trim_thou -- av_ad_hi = 0
    05fb : 62d8 ; -- <0025> ram a = $run_manual_trim_thou -- av_ad_lo = 216
    05fc : 0015 ; -- <0025> ram a = $run_manual_trim_thou -- a = av_write_data -- start read cycle
    05fd : 0016 ; -- <0025> ram a = $run_manual_trim_thou -- a = av_read_data -- finish read cycle

    05fe : 0000 ; -- <0030> a = a
    05ff : 07a0 ; -- <0030> b = 800
    0600 : 0320 ; -- <0030> "

    0601 : e406 ; -- <0026> bn gt :else_1537
    0602 : 0605 ; -- <0026> "


    0603 : e00f ; -- <0028> jmp :end_1537
    0604 : 060a ; -- <0028> "

    0605 : 0604 ; -- <0029> b = $run_manual_trim_step_thou
    0606 : 5e00 ; -- <0030> ram $run_manual_trim_thou = a+b -- av_ad_hi = 0
    0607 : 62d8 ; -- <0030> ram $run_manual_trim_thou = a+b -- av_ad_lo = 216
    0608 : c800 ; -- <0030> ram $run_manual_trim_thou = a+b -- av_write_data = a+b
    0609 : 5700 ; -- <0030> "


    060a : fc00 ; -- <0032> swapra = nop

-- ######## func trim_2lean_cmd -- = 0x060b

    060b : 5e00 ; -- <0034> ram a = $run_manual_trim_thou -- av_ad_hi = 0
    060c : 62d8 ; -- <0034> ram a = $run_manual_trim_thou -- av_ad_lo = 216
    060d : 0015 ; -- <0034> ram a = $run_manual_trim_thou -- a = av_write_data -- start read cycle
    060e : 0016 ; -- <0034> ram a = $run_manual_trim_thou -- a = av_read_data -- finish read cycle

    060f : 0000 ; -- <0039> a = a
    0610 : 0600 ; -- <0039> b = 0

    0611 : e7a0 ; -- <0035> bn = :else_1553
    0612 : 0615 ; -- <0035> "


    0613 : e00f ; -- <0037> jmp :end_1553
    0614 : 061b ; -- <0037> "

    0615 : 07a0 ; -- <0038> b = (($run_manual_trim_step_thou << 3) ^ 0xffff + 1)
    0616 : 10020 ; -- <0038> "
    0617 : 5e00 ; -- <0039> ram $run_manual_trim_thou = a+b -- av_ad_hi = 0
    0618 : 62d8 ; -- <0039> ram $run_manual_trim_thou = a+b -- av_ad_lo = 216
    0619 : c800 ; -- <0039> ram $run_manual_trim_thou = a+b -- av_write_data = a+b
    061a : 5700 ; -- <0039> "


    061b : fc00 ; -- <0041> swapra = nop

-- ######## func trim_2rich_cmd -- = 0x061c

    061c : 5e00 ; -- <0043> ram a = $run_manual_trim_thou -- av_ad_hi = 0
    061d : 62d8 ; -- <0043> ram a = $run_manual_trim_thou -- av_ad_lo = 216
    061e : 0015 ; -- <0043> ram a = $run_manual_trim_thou -- a = av_write_data -- start read cycle
    061f : 0016 ; -- <0043> ram a = $run_manual_trim_thou -- a = av_read_data -- finish read cycle

    0620 : 0000 ; -- <0048> a = a
    0621 : 07a0 ; -- <0048> b = 800
    0622 : 0320 ; -- <0048> "

    0623 : e406 ; -- <0044> bn gt :else_1571
    0624 : 0627 ; -- <0044> "


    0625 : e00f ; -- <0046> jmp :end_1571
    0626 : 062c ; -- <0046> "

    0627 : 0620 ; -- <0047> b = ($run_manual_trim_step_thou << 3)
    0628 : 5e00 ; -- <0048> ram $run_manual_trim_thou = a+b -- av_ad_hi = 0
    0629 : 62d8 ; -- <0048> ram $run_manual_trim_thou = a+b -- av_ad_lo = 216
    062a : c800 ; -- <0048> ram $run_manual_trim_thou = a+b -- av_write_data = a+b
    062b : 5700 ; -- <0048> "


    062c : fc00 ; -- <0050> swapra = nop

-- ######## func init_plan_run -- = 0x062d

-- set up the run plan.
    062d : 5e00 ; -- <0053> ram $run_manual_trim_thou = 0 -- av_ad_hi = 0
    062e : 62d8 ; -- <0053> ram $run_manual_trim_thou = 0 -- av_ad_lo = 216
    062f : 5600 ; -- <0053> ram $run_manual_trim_thou = 0 -- av_write_data = 0

-- memorize state.
    0630 : 5e00 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    0631 : 628a ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 138
    0632 : 57a0 ; -- <0056> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    0633 : 05e7 ; -- <0056> "
    0634 : 5e00 ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    0635 : 628c ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 140
    0636 : 57a0 ; -- <0057> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    0637 : 0642 ; -- <0057> "
    0638 : 5e00 ; -- <0058> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    0639 : 628e ; -- <0058> ram $ram_transition_func = :leave_run -- av_ad_lo = 142
    063a : 57a0 ; -- <0058> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    063b : 066f ; -- <0058> "
    063c : 5e00 ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    063d : 6290 ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 144
    063e : 57a0 ; -- <0059> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    063f : 0641 ; -- <0059> "

    0640 : fc00 ; -- <0061> swapra = nop

-- ######## func destroy_plan_run -- = 0x0641


    0641 : fc00 ; -- <0064> swapra = nop

-- ######## func puff_len_run -- = 0x0642
    0642 : 3006 ; -- <0087> push ga -- func puff_len_run
    0643 : 303e ; -- <0087> push rtna -- "

    0644 : 5e00 ; -- <0066> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0645 : 6280 ; -- <0066> ram a = $ram_rpm_valid -- av_ad_lo = 128
    0646 : 0015 ; -- <0066> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0647 : 0016 ; -- <0066> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0648 : 0000 ; -- <0086> a = a
    0649 : 0601 ; -- <0086> b = 1

    064a : e407 ; -- <0067> bn eq :else_1610
    064b : 066c ; -- <0067> "

-- read smap puff into ga
    064c : 5e00 ; -- <0069> ram pa = $ram_avg_rpm -- av_ad_hi = 0
    064d : 627e ; -- <0069> ram pa = $ram_avg_rpm -- av_ad_lo = 126
    064e : 2015 ; -- <0069> ram pa = $ram_avg_rpm -- pa = av_write_data -- start read cycle
    064f : 2016 ; -- <0069> ram pa = $ram_avg_rpm -- pa = av_read_data -- finish read cycle
    0650 : fba0 ; -- <0070> callx  find_rpm_cell  pa  a
    0651 : 0564 ; -- <0070> "
    0652 : fc00 ; -- <0070> "
    0653 : 0008 ; -- <0070> a = pa

    0654 : 0351 ; -- <0071> a = a<<1
    0655 : 069a ; -- <0071> b = 154
    0656 : 5e00 ; -- <0071> av_ad_hi = 0
    0657 : 6300 ; -- <0071> av_ad_lo = ad0
    0658 : 0415 ; -- <0071> b = av_write_data
    0659 : 0416 ; -- <0071> b = av_read_data

    065a : 1801 ; -- <0072> ga = b

-- calculate manual enrichment in us.  apply a total of 10 bits of right-shift to prevent overflow.
    065b : 5e00 ; -- <0075> ram a = $run_manual_trim_thou -- av_ad_hi = 0
    065c : 62d8 ; -- <0075> ram a = $run_manual_trim_thou -- av_ad_lo = 216
    065d : 0015 ; -- <0075> ram a = $run_manual_trim_thou -- a = av_write_data -- start read cycle
    065e : 0016 ; -- <0075> ram a = $run_manual_trim_thou -- a = av_read_data -- finish read cycle
    065f : 0350 ; -- <0076> a = a>>1
    0660 : 0750 ; -- <0077> b = a>>1
    0661 : 0006 ; -- <0078> a = ga
    0662 : 0353 ; -- <0079> a = a>>4
    0663 : fba0 ; -- <0080> call  multiply
    0664 : 0170 ; -- <0080> "
    0665 : fc00 ; -- <0080> "
    0666 : 0353 ; -- <0081> a = a>>4

-- add enrichment to smap puff.
    0667 : 0406 ; -- <0084> b = ga
    0668 : 5e00 ; -- <0085> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    0669 : 6292 ; -- <0085> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    066a : c800 ; -- <0085> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    066b : 5700 ; -- <0085> "


    066c : f80c ; -- <0088> pop rtna -- func puff_len_run
    066d : 180c ; -- <0088> pop ga -- "
    066e : fc00 ; -- <0088> swapra = nop

-- ######## func leave_run -- = 0x066f
    066f : 303e ; -- <0091> push rtna -- func leave_run

    0670 : fba0 ; -- <0090> callx  check_engine_stop  pa
    0671 : 0a35 ; -- <0090> "
    0672 : fc00 ; -- <0090> "

    0673 : f80c ; -- <0092> pop rtna -- func leave_run
    0674 : fc00 ; -- <0092> swapra = nop



-- #########################################################################
-- :main -- = 0x0675
    0675 : 03a0 ; -- <0215> a = :boot_msg
    0676 : 008b ; -- <0215> "
    0677 : fba0 ; -- <0216> call :print_nt
    0678 : 014f ; -- <0216> "
    0679 : fc00 ; -- <0216> "

-- clear the first 64k of RAM.
    067a : 5e00 ; -- <0219> av_ad_hi = 0
    067b : fba0 ; -- <0219> callx  clear_ram_page  0
    067c : 09bb ; -- <0219> "
    067d : fc00 ; -- <0219> "

-- init fuel injection.
    067e : fba0 ; -- <0222> callx  init_plan_stop
    067f : 0313 ; -- <0222> "
    0680 : fc00 ; -- <0222> "

-- power up FTDI USB board, and init any other special board control functions.
    0681 : 7280 ; -- <0225> board_ctrl = $ftdi_power_mask
    0682 : fba0 ; -- <0226> callx postpone_comm_restart
    0683 : 0992 ; -- <0226> "
    0684 : fc00 ; -- <0226> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    0685 : 7a00 ; -- <0233> power_duty = $power_duty_closing

    0686 : 001e ; -- <0237> a = power_duty
    0687 : 06c0 ; -- <0237> b = ( $power_lost_mask | $ign_switch_off_mask )

    0688 : e003 ; -- <0234> br and0z :else_1672
    0689 : 068f ; -- <0234> "

    068a : 7a32 ; -- <0235> power_duty = $power_duty_opening
    068b : 6fa0 ; -- <0236> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    068c : fffb ; -- <0236> "
    068d : e00f ; -- <0236> error_halt_code $err_power_lost_at_boot
    068e : 068d ; -- <0236> "

    068f : 5e00 ; -- <0238> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0690 : 623e ; -- <0238> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    0691 : 5760 ; -- <0238> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0692 : 5e00 ; -- <0239> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    0693 : 6240 ; -- <0239> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 64
    0694 : 5602 ; -- <0239> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    0695 : 3ba0 ; -- <0242> soft_event = $event_controller_reset_mask
    0696 : 8000 ; -- <0242> "
    0697 : 3a00 ; -- <0243> soft_event = 0
    0698 : 47a0 ; -- <0244> mstimer0 = 1000
    0699 : 03e8 ; -- <0244> "
    069a : 4e14 ; -- <0245> mstimer2 = $plan_tick_ms
    069b : e00f ; -- <0246> jmp :poll_events
    069c : 008e ; -- <0246> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x069d
    069d : 008e ; -- <0251> ([label :poll_events])
    069e : 08ed ; -- <0252> ([label :power_lost_handler])
    069f : 06b2 ; -- <0253> ([label :ign_capture_handler])
    06a0 : 0732 ; -- <0254> ([label :ign_capture_timeout_handler])
    06a1 : 0921 ; -- <0255> ([label :puff1_done_handler])
    06a2 : 0737 ; -- <0256> ([label :ustimer0_handler])
    06a3 : 087b ; -- <0257> ([label :spi_done_handler])
    06a4 : 0739 ; -- <0258> ([label :mstimer0_handler])
    06a5 : 0847 ; -- <0259> ([label :mstimer1_handler])
    06a6 : 0768 ; -- <0260> ([label :mstimer2_handler])
    06a7 : 0794 ; -- <0261> ([label :uart_rx_handler])
    06a8 : 07ad ; -- <0262> ([label :uart_rx_overflow_handler])
    06a9 : 07b3 ; -- <0263> ([label :uart_tx_overflow_handler])
    06aa : 07b9 ; -- <0264> ([label :key0_handler])
    06ab : 07c3 ; -- <0265> ([label :key1_handler])
    06ac : 0904 ; -- <0266> ([label :ign_switch_off_handler])
    06ad : 0917 ; -- <0267> ([label :ign_switch_on_handler])
    06ae : 07cd ; -- <0268> ([label :softevent3_handler])
    06af : 07cf ; -- <0269> ([label :softevent2_handler])
    06b0 : 07d1 ; -- <0270> ([label :softevent1_handler])
    06b1 : 07d3 ; -- <0271> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x06b2
-- discard outlier time.
    06b2 : 181f ; -- <0277> g6 = ign_capture_jf
    06b3 : 5e00 ; -- <0278> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    06b4 : 6284 ; -- <0278> ram b = $ram_ign_fastest_jf -- av_ad_lo = 132
    06b5 : 0415 ; -- <0278> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    06b6 : 0416 ; -- <0278> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle

    06b7 : 0006 ; -- <0281> a = g6
    06b8 : 0401 ; -- <0281> b = b

    06b9 : e405 ; -- <0279> bn lt :else_1721
    06ba : 06bc ; -- <0279> "

    06bb : 1a00 ; -- <0280> g6 = 0

    06bc : 5e00 ; -- <0282> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    06bd : 6286 ; -- <0282> ram b = $ram_ign_slowest_jf -- av_ad_lo = 134
    06be : 0415 ; -- <0282> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    06bf : 0416 ; -- <0282> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle

    06c0 : 0006 ; -- <0285> a = g6
    06c1 : 0401 ; -- <0285> b = b

    06c2 : e406 ; -- <0283> bn gt :else_1730
    06c3 : 06c5 ; -- <0283> "

    06c4 : 1a00 ; -- <0284> g6 = 0


-- increment buffer index and memorize time.
    06c5 : 5e00 ; -- <0288> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    06c6 : 625a ; -- <0288> ram a = $ram_ign_history_idx -- av_ad_lo = 90
    06c7 : 0015 ; -- <0288> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    06c8 : 0016 ; -- <0288> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    06c9 : 0601 ; -- <0289> b = 1
    06ca : c800 ; -- <0290> a = a+b
    06cb : 0300 ; -- <0290> "
    06cc : 060f ; -- <0291> b = $ign_history_idx_mask
    06cd : c800 ; -- <0292> a = and
    06ce : 0330 ; -- <0292> "
    06cf : 5e00 ; -- <0293> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    06d0 : 625a ; -- <0293> ram $ram_ign_history_idx = a -- av_ad_lo = 90
    06d1 : 5400 ; -- <0293> ram $ram_ign_history_idx = a -- av_write_data = a
    06d2 : 0406 ; -- <0294> b = g6

    06d3 : 0351 ; -- <0295> a = a<<1
    06d4 : 3001 ; -- <0295> push b -- push b
    06d5 : 065c ; -- <0295> b = 92
    06d6 : 5e00 ; -- <0295> av_ad_hi = 0
    06d7 : 6300 ; -- <0295> av_ad_lo = ad0
    06d8 : 540c ; -- <0295> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, y = sample, i = index = loop count, g6 = count of invalid samples.
    06d9 : 1200 ; -- <0300> x = 0
    06da : 1a00 ; -- <0301> g6 = 0
    06db : 0a00 ; -- <0317> i = 0
-- :loop_1755 -- = 0x06dc

    06dc : 0002 ; -- <0302> a = i

    06dd : 0351 ; -- <0303> a = a<<1
    06de : 065c ; -- <0303> b = 92
    06df : 5e00 ; -- <0303> av_ad_hi = 0
    06e0 : 6300 ; -- <0303> av_ad_lo = ad0
    06e1 : 0415 ; -- <0303> b = av_write_data
    06e2 : 0416 ; -- <0303> b = av_read_data

    06e3 : 1401 ; -- <0304> y = b

    06e4 : 0005 ; -- <0315> a = y
    06e5 : 0600 ; -- <0315> b = 0

    06e6 : e407 ; -- <0305> bn eq :else_1766
    06e7 : 06ee ; -- <0305> "

    06e8 : 0006 ; -- <0306> a = g6
    06e9 : 0601 ; -- <0307> b = 1
    06ea : c800 ; -- <0308> g6 = a+b
    06eb : 1b00 ; -- <0308> "

    06ec : e00f ; -- <0310> jmp :end_1766
    06ed : 06f5 ; -- <0310> "

    06ee : 0208 ; -- <0311> a = ($ign_history_len / 2)
    06ef : 0405 ; -- <0312> b = y
    06f0 : c800 ; -- <0313> a = a+b
    06f1 : 0300 ; -- <0313> "
    06f2 : 1753 ; -- <0314> y = a>>$ign_history_idx_bits
    06f3 : c800 ; -- <0315> x = x+y
    06f4 : 1320 ; -- <0315> "



    06f5 : 0002 ; -- <0317> a = i
    06f6 : 0601 ; -- <0317> b = 1
    06f7 : c800 ; -- <0317> i = a+b
    06f8 : 0b00 ; -- <0317> "


    06f9 : 0002 ; -- <0317> a = i
    06fa : 0610 ; -- <0317> b = $ign_history_len
    06fb : e005 ; -- <0317> br lt :loop_1755
    06fc : 06dc ; -- <0317> "

-- :end_1755 -- = 0x06fd
    06fd : 5e00 ; -- <0318> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    06fe : 627c ; -- <0318> ram $ram_ign_avg_jf = x -- av_ad_lo = 124
    06ff : 5404 ; -- <0318> ram $ram_ign_avg_jf = x -- av_write_data = x
    0700 : 5e00 ; -- <0319> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    0701 : 6282 ; -- <0319> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 130
    0702 : 5406 ; -- <0319> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.


    0703 : 0006 ; -- <0335> a = g6
    0704 : 0604 ; -- <0335> b = ( $ign_history_len / 4 )

    0705 : e406 ; -- <0328> bn gt :else_1797
    0706 : 070c ; -- <0328> "

    0707 : 5e00 ; -- <0329> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    0708 : 6280 ; -- <0329> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    0709 : 5600 ; -- <0329> ram $ram_rpm_valid = 0 -- av_write_data = 0

    070a : e00f ; -- <0331> jmp :end_1797
    070b : 0716 ; -- <0331> "

-- convert jiffies b to new RPM estimate.
    070c : 2004 ; -- <0333> pa = x
    070d : fba0 ; -- <0333> callx  jf_to_rpm  x  pa
    070e : 0a29 ; -- <0333> "
    070f : fc00 ; -- <0333> "
    0710 : 5e00 ; -- <0334> ram $ram_avg_rpm = pa -- av_ad_hi = 0
    0711 : 627e ; -- <0334> ram $ram_avg_rpm = pa -- av_ad_lo = 126
    0712 : 5408 ; -- <0334> ram $ram_avg_rpm = pa -- av_write_data = pa
    0713 : 5e00 ; -- <0335> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    0714 : 6280 ; -- <0335> ram $ram_rpm_valid = 1 -- av_ad_lo = 128
    0715 : 5601 ; -- <0335> ram $ram_rpm_valid = 1 -- av_write_data = 1

    0716 : e00f ; -- <0336> end_event
    0717 : 008e ; -- <0336> "

-- ######## func clear_ign_history -- = 0x0718
    0718 : 3002 ; -- <0349> push i -- func clear_ign_history

-- invalidate the RPM estimate.
    0719 : 5e00 ; -- <0340> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    071a : 6280 ; -- <0340> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    071b : 5600 ; -- <0340> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    071c : 5e00 ; -- <0343> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    071d : 6282 ; -- <0343> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 130
    071e : 5610 ; -- <0343> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    071f : 0a00 ; -- <0348> i = 0
-- :loop_1823 -- = 0x0720

    0720 : 0002 ; -- <0344> a = i
    0721 : 0600 ; -- <0345> b = 0

    0722 : 0351 ; -- <0346> a = a<<1
    0723 : 3001 ; -- <0346> push b -- push b
    0724 : 065c ; -- <0346> b = 92
    0725 : 5e00 ; -- <0346> av_ad_hi = 0
    0726 : 6300 ; -- <0346> av_ad_lo = ad0
    0727 : 540c ; -- <0346> pop av_write_data -- pop av_write_data



    0728 : 0002 ; -- <0348> a = i
    0729 : 0601 ; -- <0348> b = 1
    072a : c800 ; -- <0348> i = a+b
    072b : 0b00 ; -- <0348> "


    072c : 0002 ; -- <0348> a = i
    072d : 0610 ; -- <0348> b = $ign_history_len
    072e : e005 ; -- <0348> br lt :loop_1823
    072f : 0720 ; -- <0348> "

-- :end_1823 -- = 0x0730

    0730 : 080c ; -- <0350> pop i -- func clear_ign_history
    0731 : fc00 ; -- <0350> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x0732
-- it's been too long since the last ignition pulse detect.
    0732 : fba0 ; -- <0353> callx clear_ign_history
    0733 : 0718 ; -- <0353> "
    0734 : fc00 ; -- <0353> "
    0735 : e00f ; -- <0354> end_event
    0736 : 008e ; -- <0354> "

-- ######## event ustimer0_handler -- = 0x0737
    0737 : e00f ; -- <0357> end_event
    0738 : 008e ; -- <0357> "

-- ######## event mstimer0_handler -- = 0x0739
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    0739 : 47a0 ; -- <0363> mstimer0 = 1000
    073a : 03e8 ; -- <0363> "

-- realtime counters in RAM.
    073b : 5e00 ; -- <0366> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    073c : 6244 ; -- <0366> ram a = $ram_seconds_cnt -- av_ad_lo = 68
    073d : 0015 ; -- <0366> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    073e : 0016 ; -- <0366> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    073f : 0601 ; -- <0367> b = 1
    0740 : c800 ; -- <0368> a = a+b
    0741 : 0300 ; -- <0368> "

    0742 : 0000 ; -- <0377> a = a
    0743 : 063c ; -- <0377> b = 60

    0744 : e407 ; -- <0369> bn eq :else_1860
    0745 : 0757 ; -- <0369> "

    0746 : 5e00 ; -- <0370> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    0747 : 6244 ; -- <0370> ram $ram_seconds_cnt = 0 -- av_ad_lo = 68
    0748 : 5600 ; -- <0370> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    0749 : 5e00 ; -- <0371> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    074a : 6242 ; -- <0371> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    074b : 0015 ; -- <0371> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    074c : 0016 ; -- <0371> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    074d : 0601 ; -- <0372> b = 1
    074e : 5e00 ; -- <0373> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    074f : 6242 ; -- <0373> ram $ram_minutes_cnt = a+b -- av_ad_lo = 66
    0750 : c800 ; -- <0373> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    0751 : 5700 ; -- <0373> "
    0752 : fba0 ; -- <0374> callx minute_events
    0753 : 0930 ; -- <0374> "
    0754 : fc00 ; -- <0374> "

    0755 : e00f ; -- <0376> jmp :end_1860
    0756 : 075a ; -- <0376> "

    0757 : 5e00 ; -- <0377> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    0758 : 6244 ; -- <0377> ram $ram_seconds_cnt = a -- av_ad_lo = 68
    0759 : 5400 ; -- <0377> ram $ram_seconds_cnt = a -- av_write_data = a


-- all 1-second functions here.
    075a : fba0 ; -- <0380> callx check_power_relay
    075b : 0938 ; -- <0380> "
    075c : fc00 ; -- <0380> "
    075d : fba0 ; -- <0381> callx check_communication
    075e : 0965 ; -- <0381> "
    075f : fc00 ; -- <0381> "
    0760 : fba0 ; -- <0382> callx start_daq_pass
    0761 : 07e2 ; -- <0382> "
    0762 : fc00 ; -- <0382> "
    0763 : e00f ; -- <0383> end_event
    0764 : 008e ; -- <0383> "

-- :plan_transition_msg -- = 0x0765
-- "PLAN\x0"
    0765 : 4c50 ; -- <0386> LP
    0766 : 4e41 ; -- <0386> NA
    0767 : 0000 ; -- <0386>   

-- ######## event mstimer2_handler -- = 0x0768
-- engine management plan tick timer.

-- restart timer.
    0768 : 4e14 ; -- <0392> mstimer2 = $plan_tick_ms

-- start another TPS reading prior to every plan tick.
-- this will also invoke a o2 reading.  that's done last of all prior to plan_tick,
-- so there's minimal latency between that and the plan_tick utilizing it.
    0769 : 5e00 ; -- <0397> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    076a : 6238 ; -- <0397> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    076b : 0015 ; -- <0397> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    076c : 0016 ; -- <0397> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    076d : 0000 ; -- <0400> a = a
    076e : 0600 ; -- <0400> b = 0

    076f : e407 ; -- <0398> bn eq :else_1903
    0770 : 0775 ; -- <0398> "

    0771 : 2206 ; -- <0399> pa = 6
    0772 : fba0 ; -- <0399> callx  begin_adc_conversion  $tps_adc_channel
    0773 : 086d ; -- <0399> "
    0774 : fc00 ; -- <0399> "

    0775 : e00f ; -- <0401> end_event
    0776 : 008e ; -- <0401> "

-- ######## func plan_tick -- = 0x0777
    0777 : 3004 ; -- <0418> push x -- func plan_tick
    0778 : 303e ; -- <0418> push rtna -- "

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    0779 : 5e00 ; -- <0407> ram rtna = $ram_transition_func -- av_ad_hi = 0
    077a : 628e ; -- <0407> ram rtna = $ram_transition_func -- av_ad_lo = 142
    077b : f815 ; -- <0407> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    077c : f816 ; -- <0407> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    077d : 103e ; -- <0408> x = rtna
    077e : fc00 ; -- <0409> swapra = nop
    077f : 5e00 ; -- <0411> ram b = $ram_transition_func -- av_ad_hi = 0
    0780 : 628e ; -- <0411> ram b = $ram_transition_func -- av_ad_lo = 142
    0781 : 0415 ; -- <0411> ram b = $ram_transition_func -- b = av_write_data -- start read cycle
    0782 : 0416 ; -- <0411> ram b = $ram_transition_func -- b = av_read_data -- finish read cycle

    0783 : 0004 ; -- <0414> a = x
    0784 : 0401 ; -- <0414> b = b

    0785 : e007 ; -- <0412> br eq :else_1925
    0786 : 078c ; -- <0412> "

    0787 : 23a0 ; -- <0413> pa = :plan_transition_msg
    0788 : 0765 ; -- <0413> "
    0789 : fba0 ; -- <0413> callx  set_text_flag  :plan_transition_msg
    078a : 09c3 ; -- <0413> "
    078b : fc00 ; -- <0413> "

-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    078c : 5e00 ; -- <0417> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    078d : 628c ; -- <0417> ram rtna = $ram_puff_len_func -- av_ad_lo = 140
    078e : f815 ; -- <0417> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    078f : f816 ; -- <0417> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    0790 : fc00 ; -- <0418> swapra = nop

    0791 : f80c ; -- <0421> pop rtna -- func plan_tick
    0792 : 100c ; -- <0421> pop x -- "
    0793 : fc00 ; -- <0421> swapra = nop

-- ######## event uart_rx_handler -- = 0x0794
-- :again -- = 0x0794
    0794 : fba0 ; -- <0424> pollchar
    0795 : 00aa ; -- <0424> "
    0796 : fc00 ; -- <0424> "
    0797 : 1000 ; -- <0425> x = a

    0798 : 0004 ; -- <0428> a = x
    0799 : 0760 ; -- <0428> b = -1

    079a : e407 ; -- <0426> bn eq :else_1946
    079b : 079e ; -- <0426> "

    079c : e00f ; -- <0427> event_return
    079d : 008e ; -- <0427> "


    079e : 0004 ; -- <0431> a = x
    079f : 060a ; -- <0431> b = 10

    07a0 : e407 ; -- <0429> bn eq :else_1952
    07a1 : 07a5 ; -- <0429> "

    07a2 : fba0 ; -- <0430> callx  postpone_comm_restart
    07a3 : 0992 ; -- <0430> "
    07a4 : fc00 ; -- <0430> "

    07a5 : 2004 ; -- <0432> pa = x
    07a6 : fba0 ; -- <0432> callx  parse_key  x
    07a7 : 025f ; -- <0432> "
    07a8 : fc00 ; -- <0432> "
    07a9 : e00f ; -- <0433> jmp :again
    07aa : 0794 ; -- <0433> "
    07ab : e00f ; -- <0434> end_event
    07ac : 008e ; -- <0434> "

-- ######## event uart_rx_overflow_handler -- = 0x07ad
    07ad : 6fa0 ; -- <0437> error_halt_code $err_rx_overflow -- leds = 0xfffe
    07ae : fffe ; -- <0437> "
    07af : e00f ; -- <0437> error_halt_code $err_rx_overflow
    07b0 : 07af ; -- <0437> "
    07b1 : e00f ; -- <0438> end_event
    07b2 : 008e ; -- <0438> "

-- ######## event uart_tx_overflow_handler -- = 0x07b3
    07b3 : 6fa0 ; -- <0441> error_halt_code $err_tx_overflow -- leds = 0xfffd
    07b4 : fffd ; -- <0441> "
    07b5 : e00f ; -- <0441> error_halt_code $err_tx_overflow
    07b6 : 07b5 ; -- <0441> "
    07b7 : e00f ; -- <0442> end_event
    07b8 : 008e ; -- <0442> "

-- ######## event key0_handler -- = 0x07b9
    07b9 : 026b ; -- <0445> a = 107 -- putasc "k"
    07ba : fba0 ; -- <0445> putasc "k"
    07bb : 009b ; -- <0445> "
    07bc : fc00 ; -- <0445> "
    07bd : 0230 ; -- <0446> a = 48 -- putasc "0"
    07be : fba0 ; -- <0446> putasc "0"
    07bf : 009b ; -- <0446> "
    07c0 : fc00 ; -- <0446> "
    07c1 : e00f ; -- <0447> end_event
    07c2 : 008e ; -- <0447> "

-- ######## event key1_handler -- = 0x07c3
    07c3 : 026b ; -- <0450> a = 107 -- putasc "k"
    07c4 : fba0 ; -- <0450> putasc "k"
    07c5 : 009b ; -- <0450> "
    07c6 : fc00 ; -- <0450> "
    07c7 : 0231 ; -- <0451> a = 49 -- putasc "1"
    07c8 : fba0 ; -- <0451> putasc "1"
    07c9 : 009b ; -- <0451> "
    07ca : fc00 ; -- <0451> "
    07cb : e00f ; -- <0452> end_event
    07cc : 008e ; -- <0452> "

-- ######## event softevent3_handler -- = 0x07cd
    07cd : e00f ; -- <0455> end_event
    07ce : 008e ; -- <0455> "

-- ######## event softevent2_handler -- = 0x07cf
    07cf : e00f ; -- <0458> end_event
    07d0 : 008e ; -- <0458> "

-- ######## event softevent1_handler -- = 0x07d1
    07d1 : e00f ; -- <0461> end_event
    07d2 : 008e ; -- <0461> "

-- ######## event softevent0_handler -- = 0x07d3
    07d3 : e00f ; -- <0464> end_event
    07d4 : 008e ; -- <0464> "

-- :rpm_msg -- = 0x07d5
-- ": rpm=\x0"
    07d5 : 203a ; -- <0467>  :
    07d6 : 7072 ; -- <0467> pr
    07d7 : 3d6d ; -- <0467> =m
    07d8 : 0000 ; -- <0467>   

-- :puff_len_msg -- = 0x07d9
-- " pfl=\x0"
    07d9 : 7020 ; -- <0470> p 
    07da : 6c66 ; -- <0470> lf
    07db : 003d ; -- <0470>  =

-- :o2_msg -- = 0x07dc
-- " o2=\x0"
    07dc : 6f20 ; -- <0473> o 
    07dd : 3d32 ; -- <0473> =2
    07de : 0000 ; -- <0473>   

-- :tps_msg -- = 0x07df
-- " tp=\x0"
    07df : 7420 ; -- <0476> t 
    07e0 : 3d70 ; -- <0476> =p
    07e1 : 0000 ; -- <0476>   

-- ######## func start_daq_pass -- = 0x07e2
    07e2 : 3004 ; -- <0526> push x -- func start_daq_pass
    07e3 : 303e ; -- <0526> push rtna -- "

-- daq pass counter in RAM.
    07e4 : 5e00 ; -- <0480> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    07e5 : 6214 ; -- <0480> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    07e6 : 0015 ; -- <0480> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    07e7 : 0016 ; -- <0480> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    07e8 : 0601 ; -- <0481> b = 1
    07e9 : c800 ; -- <0482> a = a+b
    07ea : 0300 ; -- <0482> "
    07eb : 6c00 ; -- <0483> leds = a
    07ec : 5e00 ; -- <0484> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    07ed : 6214 ; -- <0484> ram $ram_daq_pass_cnt = a -- av_ad_lo = 20
    07ee : 5400 ; -- <0484> ram $ram_daq_pass_cnt = a -- av_write_data = a
    07ef : fba0 ; -- <0485> call :put4x
    07f0 : 00c3 ; -- <0485> "
    07f1 : fc00 ; -- <0485> "

    07f2 : 03a0 ; -- <0487> a = :rpm_msg
    07f3 : 07d5 ; -- <0487> "
    07f4 : fba0 ; -- <0488> call :print_nt
    07f5 : 014f ; -- <0488> "
    07f6 : fc00 ; -- <0488> "
    07f7 : 0200 ; -- <0489> a = 0
    07f8 : 5e00 ; -- <0490> ram x = $ram_rpm_valid -- av_ad_hi = 0
    07f9 : 6280 ; -- <0490> ram x = $ram_rpm_valid -- av_ad_lo = 128
    07fa : 1015 ; -- <0490> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    07fb : 1016 ; -- <0490> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle

    07fc : 0004 ; -- <0493> a = x
    07fd : 0600 ; -- <0493> b = 0

    07fe : e007 ; -- <0491> br eq :else_2046
    07ff : 0804 ; -- <0491> "

    0800 : 5e00 ; -- <0492> ram a = $ram_avg_rpm -- av_ad_hi = 0
    0801 : 627e ; -- <0492> ram a = $ram_avg_rpm -- av_ad_lo = 126
    0802 : 0015 ; -- <0492> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    0803 : 0016 ; -- <0492> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle

    0804 : fba0 ; -- <0494> call :put4x
    0805 : 00c3 ; -- <0494> "
    0806 : fc00 ; -- <0494> "

    0807 : 03a0 ; -- <0496> a = :puff_len_msg
    0808 : 07d9 ; -- <0496> "
    0809 : fba0 ; -- <0497> call :print_nt
    080a : 014f ; -- <0497> "
    080b : fc00 ; -- <0497> "
    080c : 0021 ; -- <0498> a = puff_len_us
    080d : fba0 ; -- <0499> call :put4x
    080e : 00c3 ; -- <0499> "
    080f : fc00 ; -- <0499> "
    0810 : 022c ; -- <0500> a = 44 -- putasc ","
    0811 : fba0 ; -- <0500> putasc ","
    0812 : 009b ; -- <0500> "
    0813 : fc00 ; -- <0500> "
    0814 : 5e00 ; -- <0501> ram a = $ram_puff_count -- av_ad_hi = 0
    0815 : 6294 ; -- <0501> ram a = $ram_puff_count -- av_ad_lo = 148
    0816 : 0015 ; -- <0501> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0817 : 0016 ; -- <0501> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0818 : fba0 ; -- <0502> call :put4x
    0819 : 00c3 ; -- <0502> "
    081a : fc00 ; -- <0502> "

    081b : 03a0 ; -- <0504> a = :o2_msg
    081c : 07dc ; -- <0504> "
    081d : fba0 ; -- <0505> call :print_nt
    081e : 014f ; -- <0505> "
    081f : fc00 ; -- <0505> "
    0820 : 0205 ; -- <0506> a = $o2_adc_channel

    0821 : 0351 ; -- <0507> a = a<<1
    0822 : 0628 ; -- <0507> b = 40
    0823 : 5e00 ; -- <0507> av_ad_hi = 0
    0824 : 6300 ; -- <0507> av_ad_lo = ad0
    0825 : 0415 ; -- <0507> b = av_write_data
    0826 : 0416 ; -- <0507> b = av_read_data

    0827 : 0001 ; -- <0508> a = b
    0828 : fba0 ; -- <0509> call :put4x
    0829 : 00c3 ; -- <0509> "
    082a : fc00 ; -- <0509> "

    082b : 03a0 ; -- <0511> a = :tps_msg
    082c : 07df ; -- <0511> "
    082d : fba0 ; -- <0512> call :print_nt
    082e : 014f ; -- <0512> "
    082f : fc00 ; -- <0512> "
    0830 : 0206 ; -- <0513> a = $tps_adc_channel

    0831 : 0351 ; -- <0514> a = a<<1
    0832 : 0628 ; -- <0514> b = 40
    0833 : 5e00 ; -- <0514> av_ad_hi = 0
    0834 : 6300 ; -- <0514> av_ad_lo = ad0
    0835 : 0415 ; -- <0514> b = av_write_data
    0836 : 0416 ; -- <0514> b = av_read_data

    0837 : 0001 ; -- <0515> a = b
    0838 : fba0 ; -- <0516> call :put4x
    0839 : 00c3 ; -- <0516> "
    083a : fc00 ; -- <0516> "

-- start to acquire & report all anmux channels.
    083b : 0207 ; -- <0519> a = ($anmux_num_channels - 1)
    083c : fba0 ; -- <0520> call :anmux_set_chn
    083d : 00b2 ; -- <0520> "
    083e : fc00 ; -- <0520> "
    083f : 4a05 ; -- <0521> mstimer1 = $anmux_settle_ms

-- observe MCU utilization.  this RAM variable can be seen by the debugger.
    0840 : 5e00 ; -- <0524> ram $ram_mcu_usage_cnt = usage_count -- av_ad_hi = 0
    0841 : 6246 ; -- <0524> ram $ram_mcu_usage_cnt = usage_count -- av_ad_lo = 70
    0842 : 540f ; -- <0524> ram $ram_mcu_usage_cnt = usage_count -- av_write_data = usage_count
    0843 : 3e00 ; -- <0525> usage_count = 0

    0844 : f80c ; -- <0527> pop rtna -- func start_daq_pass
    0845 : 100c ; -- <0527> pop x -- "
    0846 : fc00 ; -- <0527> swapra = nop

-- ######## event mstimer1_handler -- = 0x0847
-- anmux signal has settled.

    0847 : 5e00 ; -- <0531> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0848 : 6238 ; -- <0531> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    0849 : 0015 ; -- <0531> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    084a : 0016 ; -- <0531> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    084b : 0000 ; -- <0536> a = a
    084c : 0600 ; -- <0536> b = 0

    084d : e007 ; -- <0532> br eq :else_2125
    084e : 0852 ; -- <0532> "

-- ADC is busy right now.  wait a while & try again.
    084f : 4a02 ; -- <0534> mstimer1 = $anmux_retry_ms
    0850 : e00f ; -- <0535> event_return
    0851 : 008e ; -- <0535> "


-- start a reading from the current anmux channel.
    0852 : 0220 ; -- <0539> a = 32 -- putasc " "
    0853 : fba0 ; -- <0539> putasc " "
    0854 : 009b ; -- <0539> "
    0855 : fc00 ; -- <0539> "
    0856 : 0273 ; -- <0540> a = 115 -- putasc "s"
    0857 : fba0 ; -- <0540> putasc "s"
    0858 : 009b ; -- <0540> "
    0859 : fc00 ; -- <0540> "
    085a : fba0 ; -- <0541> call :anmux_get_chn
    085b : 00b6 ; -- <0541> "
    085c : fc00 ; -- <0541> "
    085d : 0630 ; -- <0542> b = 48 -- asc b = "0"
    085e : c800 ; -- <0543> a = a+b -- putchar a+b
    085f : 0300 ; -- <0543> "
    0860 : fba0 ; -- <0543> putchar a+b
    0861 : 009b ; -- <0543> "
    0862 : fc00 ; -- <0543> "
    0863 : 023d ; -- <0544> a = 61 -- putasc "="
    0864 : fba0 ; -- <0544> putasc "="
    0865 : 009b ; -- <0544> "
    0866 : fc00 ; -- <0544> "
    0867 : 2207 ; -- <0545> pa = 7
    0868 : fba0 ; -- <0545> callx  begin_adc_conversion  $anmux_adc_channel
    0869 : 086d ; -- <0545> "
    086a : fc00 ; -- <0545> "
    086b : e00f ; -- <0546> end_event
    086c : 008e ; -- <0546> "

-- ######## func begin_adc_conversion -- = 0x086d

-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.

    086d : 5e00 ; -- <0552> ram $ram_adc_chn_pending = next_channel -- av_ad_hi = 0
    086e : 6238 ; -- <0552> ram $ram_adc_chn_pending = next_channel -- av_ad_lo = 56
    086f : 5408 ; -- <0552> ram $ram_adc_chn_pending = next_channel -- av_write_data = next_channel
    0870 : 0008 ; -- <0553> a = next_channel
    0871 : 0352 ; -- <0554> a = a<<4
    0872 : 0352 ; -- <0555> a = a<<4
    0873 : 0351 ; -- <0556> a = a<<1
    0874 : 0351 ; -- <0557> a = a<<1
    0875 : 0351 ; -- <0558> a = a<<1
    0876 : 5000 ; -- <0559> spi_data = a
    0877 : 5e00 ; -- <0560> ram $ram_adc_junk = 1 -- av_ad_hi = 0
    0878 : 623a ; -- <0560> ram $ram_adc_junk = 1 -- av_ad_lo = 58
    0879 : 5601 ; -- <0560> ram $ram_adc_junk = 1 -- av_write_data = 1

    087a : fc00 ; -- <0562> swapra = nop

-- ######## event spi_done_handler -- = 0x087b
-- discard the results of the first SPI exchange with the ADC.  that's only for writing the channel num out to the ADC.
    087b : 5e00 ; -- <0565> ram a = $ram_adc_junk -- av_ad_hi = 0
    087c : 623a ; -- <0565> ram a = $ram_adc_junk -- av_ad_lo = 58
    087d : 0015 ; -- <0565> ram a = $ram_adc_junk -- a = av_write_data -- start read cycle
    087e : 0016 ; -- <0565> ram a = $ram_adc_junk -- a = av_read_data -- finish read cycle

    087f : 0000 ; -- <0577> a = a
    0880 : 0600 ; -- <0577> b = 0

    0881 : e007 ; -- <0566> br eq :else_2177
    0882 : 0892 ; -- <0566> "

-- start another SPI exchange to retrieve the actual reading.
    0883 : 5e00 ; -- <0568> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0884 : 6238 ; -- <0568> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    0885 : 0015 ; -- <0568> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0886 : 0016 ; -- <0568> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle
    0887 : 0352 ; -- <0569> a = a<<4
    0888 : 0352 ; -- <0570> a = a<<4
    0889 : 0351 ; -- <0571> a = a<<1
    088a : 0351 ; -- <0572> a = a<<1
    088b : 0351 ; -- <0573> a = a<<1
    088c : 5000 ; -- <0574> spi_data = a
    088d : 5e00 ; -- <0575> ram $ram_adc_junk = 0 -- av_ad_hi = 0
    088e : 623a ; -- <0575> ram $ram_adc_junk = 0 -- av_ad_lo = 58
    088f : 5600 ; -- <0575> ram $ram_adc_junk = 0 -- av_write_data = 0
    0890 : e00f ; -- <0576> event_return
    0891 : 008e ; -- <0576> "


-- memorize an actual ADC reading.
    0892 : 5e00 ; -- <0580> ram i = $ram_adc_chn_pending -- av_ad_hi = 0
    0893 : 6238 ; -- <0580> ram i = $ram_adc_chn_pending -- av_ad_lo = 56
    0894 : 0815 ; -- <0580> ram i = $ram_adc_chn_pending -- i = av_write_data -- start read cycle
    0895 : 0816 ; -- <0580> ram i = $ram_adc_chn_pending -- i = av_read_data -- finish read cycle
    0896 : 5e00 ; -- <0581> ram $ram_adc_chn_pending = 0 -- av_ad_hi = 0
    0897 : 6238 ; -- <0581> ram $ram_adc_chn_pending = 0 -- av_ad_lo = 56
    0898 : 5600 ; -- <0581> ram $ram_adc_chn_pending = 0 -- av_write_data = 0
    0899 : 0002 ; -- <0582> a = i
    089a : 0414 ; -- <0583> b = spi_data

    089b : 0351 ; -- <0584> a = a<<1
    089c : 3001 ; -- <0584> push b -- push b
    089d : 0628 ; -- <0584> b = 40
    089e : 5e00 ; -- <0584> av_ad_hi = 0
    089f : 6300 ; -- <0584> av_ad_lo = ad0
    08a0 : 540c ; -- <0584> pop av_write_data -- pop av_write_data


-- react to ADC reading.

    08a1 : 0002 ; -- <0590> a = i
    08a2 : 0606 ; -- <0590> b = 6

    08a3 : e407 ; -- <0587> bn eq :else_2211
    08a4 : 08ab ; -- <0587> "

    08a5 : 2205 ; -- <0588> pa = 5
    08a6 : fba0 ; -- <0588> callx  begin_adc_conversion  $o2_adc_channel
    08a7 : 086d ; -- <0588> "
    08a8 : fc00 ; -- <0588> "
    08a9 : e00f ; -- <0589> event_return
    08aa : 008e ; -- <0589> "


    08ab : 0002 ; -- <0594> a = i
    08ac : 0605 ; -- <0594> b = 5

    08ad : e407 ; -- <0591> bn eq :else_2221
    08ae : 08b4 ; -- <0591> "

    08af : fba0 ; -- <0592> callx  plan_tick
    08b0 : 0777 ; -- <0592> "
    08b1 : fc00 ; -- <0592> "
    08b2 : e00f ; -- <0593> event_return
    08b3 : 008e ; -- <0593> "


    08b4 : 0002 ; -- <0621> a = i
    08b5 : 0607 ; -- <0621> b = 7

    08b6 : e407 ; -- <0595> bn eq :else_2230
    08b7 : 08e9 ; -- <0595> "

-- report anmux reading.
    08b8 : 0014 ; -- <0597> a = spi_data
    08b9 : fba0 ; -- <0598> call :put4x
    08ba : 00c3 ; -- <0598> "
    08bb : fc00 ; -- <0598> "

-- memorize anmux reading.
    08bc : fba0 ; -- <0601> call :anmux_get_chn
    08bd : 00b6 ; -- <0601> "
    08be : fc00 ; -- <0601> "
    08bf : 0414 ; -- <0602> b = spi_data

    08c0 : 0351 ; -- <0603> a = a<<1
    08c1 : 3001 ; -- <0603> push b -- push b
    08c2 : 0618 ; -- <0603> b = 24
    08c3 : 5e00 ; -- <0603> av_ad_hi = 0
    08c4 : 6300 ; -- <0603> av_ad_lo = ad0
    08c5 : 540c ; -- <0603> pop av_write_data -- pop av_write_data


-- decrement anmux channel & start waiting again.
    08c6 : fba0 ; -- <0606> call :anmux_get_chn
    08c7 : 00b6 ; -- <0606> "
    08c8 : fc00 ; -- <0606> "

    08c9 : 0000 ; -- <0613> a = a
    08ca : 0600 ; -- <0613> b = 0

    08cb : e007 ; -- <0607> br eq :else_2251
    08cc : 08d6 ; -- <0607> "

    08cd : 0760 ; -- <0608> b = -1
    08ce : c800 ; -- <0609> a = a+b
    08cf : 0300 ; -- <0609> "
    08d0 : fba0 ; -- <0610> call :anmux_set_chn
    08d1 : 00b2 ; -- <0610> "
    08d2 : fc00 ; -- <0610> "
    08d3 : 4a05 ; -- <0611> mstimer1 = $anmux_settle_ms
    08d4 : e00f ; -- <0612> event_return
    08d5 : 008e ; -- <0612> "


-- end of temperature daq pass.
    08d6 : fba0 ; -- <0616> callx  report_plan
    08d7 : 0a0e ; -- <0616> "
    08d8 : fc00 ; -- <0616> "
    08d9 : fba0 ; -- <0617> callx  report_text_flags
    08da : 09db ; -- <0617> "
    08db : fc00 ; -- <0617> "
    08dc : 020d ; -- <0618> a = 13 -- puteol
    08dd : fba0 ; -- <0618> puteol
    08de : 009b ; -- <0618> "
    08df : fc00 ; -- <0618> "
    08e0 : 020a ; -- <0618> a = 10 -- puteol
    08e1 : fba0 ; -- <0618> puteol
    08e2 : 009b ; -- <0618> "
    08e3 : fc00 ; -- <0618> "
    08e4 : 5e00 ; -- <0619> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    08e5 : 623c ; -- <0619> ram $ram_dial_setting = spi_data -- av_ad_lo = 60
    08e6 : 5414 ; -- <0619> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    08e7 : e00f ; -- <0620> event_return
    08e8 : 008e ; -- <0620> "

    08e9 : e00f ; -- <0622> end_event
    08ea : 008e ; -- <0622> "

-- :power_lost_msg -- = 0x08eb
-- "PWL\x0"
    08eb : 5750 ; -- <0625> WP
    08ec : 004c ; -- <0625>  L

-- ######## event power_lost_handler -- = 0x08ed
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    08ed : 7a00 ; -- <0634> power_duty = $power_duty_closing
    08ee : 5e00 ; -- <0635> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    08ef : 6214 ; -- <0635> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    08f0 : 0015 ; -- <0635> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    08f1 : 0016 ; -- <0635> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    08f2 : 0602 ; -- <0636> b = $relay_hold_passes
    08f3 : 5e00 ; -- <0637> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    08f4 : 6240 ; -- <0637> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 64
    08f5 : c800 ; -- <0637> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    08f6 : 5700 ; -- <0637> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    08f7 : fba0 ; -- <0642> callx  save_persistent_data
    08f8 : 0964 ; -- <0642> "
    08f9 : fc00 ; -- <0642> "

    08fa : 23a0 ; -- <0644> pa = :power_lost_msg
    08fb : 08eb ; -- <0644> "
    08fc : fba0 ; -- <0644> callx  set_text_flag  :power_lost_msg
    08fd : 09c3 ; -- <0644> "
    08fe : fc00 ; -- <0644> "
    08ff : e00f ; -- <0645> end_event
    0900 : 008e ; -- <0645> "

-- :ign_off_msg -- = 0x0901
-- "IGOF\x0"
    0901 : 4749 ; -- <0648> GI
    0902 : 464f ; -- <0648> FO
    0903 : 0000 ; -- <0648>   

-- ######## event ign_switch_off_handler -- = 0x0904
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    0904 : 5e00 ; -- <0652> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0905 : 6242 ; -- <0652> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0906 : 0015 ; -- <0652> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0907 : 0016 ; -- <0652> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0908 : 060a ; -- <0653> b = $power_extend_minutes
    0909 : 5e00 ; -- <0654> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    090a : 623e ; -- <0654> ram $ram_power_down_at_min = a+b -- av_ad_lo = 62
    090b : c800 ; -- <0654> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    090c : 5700 ; -- <0654> "
    090d : 23a0 ; -- <0655> pa = :ign_off_msg
    090e : 0901 ; -- <0655> "
    090f : fba0 ; -- <0655> callx  set_text_flag   :ign_off_msg
    0910 : 09c3 ; -- <0655> "
    0911 : fc00 ; -- <0655> "
    0912 : e00f ; -- <0656> end_event
    0913 : 008e ; -- <0656> "

-- :ign_on_msg -- = 0x0914
-- "IGON\x0"
    0914 : 4749 ; -- <0659> GI
    0915 : 4e4f ; -- <0659> NO
    0916 : 0000 ; -- <0659>   

-- ######## event ign_switch_on_handler -- = 0x0917
    0917 : 5e00 ; -- <0662> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0918 : 623e ; -- <0662> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    0919 : 5760 ; -- <0662> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    091a : 23a0 ; -- <0663> pa = :ign_on_msg
    091b : 0914 ; -- <0663> "
    091c : fba0 ; -- <0663> callx  set_text_flag   :ign_on_msg
    091d : 09c3 ; -- <0663> "
    091e : fc00 ; -- <0663> "
    091f : e00f ; -- <0664> end_event
    0920 : 008e ; -- <0664> "

-- ######## event puff1_done_handler -- = 0x0921
-- puff just finished.  set length of next puff.
    0921 : 5e00 ; -- <0668> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    0922 : 6292 ; -- <0668> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 146
    0923 : 8415 ; -- <0668> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    0924 : 8416 ; -- <0668> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    0925 : 5e00 ; -- <0671> ram a = $ram_puff_count -- av_ad_hi = 0
    0926 : 6294 ; -- <0671> ram a = $ram_puff_count -- av_ad_lo = 148
    0927 : 0015 ; -- <0671> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0928 : 0016 ; -- <0671> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0929 : 0601 ; -- <0672> b = 1
    092a : 5e00 ; -- <0673> ram $ram_puff_count = a+b -- av_ad_hi = 0
    092b : 6294 ; -- <0673> ram $ram_puff_count = a+b -- av_ad_lo = 148
    092c : c800 ; -- <0673> ram $ram_puff_count = a+b -- av_write_data = a+b
    092d : 5700 ; -- <0673> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    092e : e00f ; -- <0684> end_event
    092f : 008e ; -- <0684> "

-- ######## func minute_events -- = 0x0930
    0930 : 303e ; -- <0688> push rtna -- func minute_events

    0931 : fba0 ; -- <0687> callx  check_power_down
    0932 : 094d ; -- <0687> "
    0933 : fc00 ; -- <0687> "

    0934 : f80c ; -- <0689> pop rtna -- func minute_events
    0935 : fc00 ; -- <0689> swapra = nop

-- :power_hold_msg -- = 0x0936
-- "PWH\x0"
    0936 : 5750 ; -- <0691> WP
    0937 : 0048 ; -- <0691>  H

-- ######## func check_power_relay -- = 0x0938
    0938 : 303e ; -- <0701> push rtna -- func check_power_relay

    0939 : 5e00 ; -- <0694> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    093a : 6214 ; -- <0694> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    093b : 0015 ; -- <0694> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    093c : 0016 ; -- <0694> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    093d : 5e00 ; -- <0695> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    093e : 6240 ; -- <0695> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 64
    093f : 0415 ; -- <0695> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    0940 : 0416 ; -- <0695> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle

    0941 : 0000 ; -- <0700> a = a
    0942 : 0401 ; -- <0700> b = b

    0943 : e407 ; -- <0696> bn eq :else_2371
    0944 : 094b ; -- <0696> "

-- time to begin "solenoid saver" coil power reduction by PWM.
    0945 : 7a19 ; -- <0698> power_duty = $power_duty_holding
    0946 : 23a0 ; -- <0699> pa = :power_hold_msg
    0947 : 0936 ; -- <0699> "
    0948 : fba0 ; -- <0699> callx  set_text_flag  :power_hold_msg
    0949 : 09c3 ; -- <0699> "
    094a : fc00 ; -- <0699> "


    094b : f80c ; -- <0702> pop rtna -- func check_power_relay
    094c : fc00 ; -- <0702> swapra = nop

-- ######## func check_power_down -- = 0x094d

-- check power-down deadline in RAM.
    094d : 5e00 ; -- <0705> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    094e : 6242 ; -- <0705> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    094f : 0015 ; -- <0705> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0950 : 0016 ; -- <0705> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0951 : 5e00 ; -- <0706> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    0952 : 623e ; -- <0706> ram b = $ram_power_down_at_min -- av_ad_lo = 62
    0953 : 0415 ; -- <0706> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    0954 : 0416 ; -- <0706> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle

    0955 : 0000 ; -- <0709> a = a
    0956 : 0401 ; -- <0709> b = b

    0957 : e407 ; -- <0707> bn eq :else_2391
    0958 : 095b ; -- <0707> "

    0959 : e00f ; -- <0708> jmp :power_down
    095a : 095c ; -- <0708> "


    095b : fc00 ; -- <0711> swapra = nop

-- :power_down -- = 0x095c
-- this code never returns.
    095c : fba0 ; -- <0714> callx  save_persistent_data
    095d : 0964 ; -- <0714> "
    095e : fc00 ; -- <0714> "
    095f : 7a32 ; -- <0715> power_duty = $power_duty_opening
    0960 : 6fa0 ; -- <0716> error_halt_code $err_power_down -- leds = 0xfffc
    0961 : fffc ; -- <0716> "
    0962 : e00f ; -- <0716> error_halt_code $err_power_down
    0963 : 0962 ; -- <0716> "

-- ######## func save_persistent_data -- = 0x0964


    0964 : fc00 ; -- <0720> swapra = nop

-- ######## func check_communication -- = 0x0965
    0965 : 303e ; -- <0740> push rtna -- func check_communication

    0966 : 5e00 ; -- <0722> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    0967 : 6212 ; -- <0722> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 18
    0968 : 0015 ; -- <0722> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    0969 : 0016 ; -- <0722> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle

    096a : 0000 ; -- <0730> a = a
    096b : 0600 ; -- <0730> b = 0

    096c : e007 ; -- <0723> br eq :else_2412
    096d : 097b ; -- <0723> "

    096e : 0760 ; -- <0724> b = -1
    096f : c800 ; -- <0725> a = a+b
    0970 : 0300 ; -- <0725> "
    0971 : 5e00 ; -- <0726> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0972 : 6212 ; -- <0726> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 18
    0973 : 5400 ; -- <0726> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a

    0974 : 0000 ; -- <0729> a = a
    0975 : 0600 ; -- <0729> b = 0

    0976 : e407 ; -- <0727> bn eq :else_2422
    0977 : 097b ; -- <0727> "

    0978 : fba0 ; -- <0728> callx  ftdi_power_on
    0979 : 09af ; -- <0728> "
    097a : fc00 ; -- <0728> "



    097b : 5e00 ; -- <0732> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    097c : 6242 ; -- <0732> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    097d : 0015 ; -- <0732> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    097e : 0016 ; -- <0732> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    097f : 5e00 ; -- <0733> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0980 : 6210 ; -- <0733> ram b = $ram_comm_restart_at_min -- av_ad_lo = 16
    0981 : 0415 ; -- <0733> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0982 : 0416 ; -- <0733> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle

    0983 : 0000 ; -- <0739> a = a
    0984 : 0401 ; -- <0739> b = b

    0985 : e407 ; -- <0734> bn eq :else_2437
    0986 : 0990 ; -- <0734> "

-- comm restart is required.
    0987 : fba0 ; -- <0736> callx  postpone_comm_restart
    0988 : 0992 ; -- <0736> "
    0989 : fc00 ; -- <0736> "
    098a : 5e00 ; -- <0737> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    098b : 6212 ; -- <0737> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 18
    098c : 5605 ; -- <0737> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    098d : fba0 ; -- <0738> callx  ftdi_power_off
    098e : 099f ; -- <0738> "
    098f : fc00 ; -- <0738> "


    0990 : f80c ; -- <0741> pop rtna -- func check_communication
    0991 : fc00 ; -- <0741> swapra = nop

-- ######## func postpone_comm_restart -- = 0x0992

    0992 : 5e00 ; -- <0743> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0993 : 6242 ; -- <0743> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0994 : 0015 ; -- <0743> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0995 : 0016 ; -- <0743> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0996 : 0602 ; -- <0744> b = $comm_grace_period_min
    0997 : 5e00 ; -- <0745> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    0998 : 6210 ; -- <0745> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 16
    0999 : c800 ; -- <0745> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    099a : 5700 ; -- <0745> "

    099b : fc00 ; -- <0747> swapra = nop

-- :ftdi_off_msg -- = 0x099c
-- "FTOF\x0"
    099c : 5446 ; -- <0749> TF
    099d : 464f ; -- <0749> FO
    099e : 0000 ; -- <0749>   

-- ######## func ftdi_power_off -- = 0x099f
    099f : 303e ; -- <0756> push rtna -- func ftdi_power_off

    09a0 : 001c ; -- <0752> a = board_ctrl
    09a1 : 07a0 ; -- <0753> b = $not_ftdi_power_mask
    09a2 : ff7f ; -- <0753> "
    09a3 : c800 ; -- <0754> board_ctrl = and
    09a4 : 7330 ; -- <0754> "
    09a5 : 23a0 ; -- <0755> pa = :ftdi_off_msg
    09a6 : 099c ; -- <0755> "
    09a7 : fba0 ; -- <0755> callx  set_text_flag  :ftdi_off_msg
    09a8 : 09c3 ; -- <0755> "
    09a9 : fc00 ; -- <0755> "

    09aa : f80c ; -- <0757> pop rtna -- func ftdi_power_off
    09ab : fc00 ; -- <0757> swapra = nop

-- :ftdi_on_msg -- = 0x09ac
-- "FTON\x0"
    09ac : 5446 ; -- <0759> TF
    09ad : 4e4f ; -- <0759> NO
    09ae : 0000 ; -- <0759>   

-- ######## func ftdi_power_on -- = 0x09af
    09af : 303e ; -- <0766> push rtna -- func ftdi_power_on

    09b0 : 001c ; -- <0762> a = board_ctrl
    09b1 : 0680 ; -- <0763> b = $ftdi_power_mask
    09b2 : c800 ; -- <0764> board_ctrl = or
    09b3 : 7334 ; -- <0764> "
    09b4 : 23a0 ; -- <0765> pa = :ftdi_on_msg
    09b5 : 09ac ; -- <0765> "
    09b6 : fba0 ; -- <0765> callx  set_text_flag  :ftdi_on_msg
    09b7 : 09c3 ; -- <0765> "
    09b8 : fc00 ; -- <0765> "

    09b9 : f80c ; -- <0767> pop rtna -- func ftdi_power_on
    09ba : fc00 ; -- <0767> swapra = nop

-- ######## func clear_ram_page -- = 0x09bb

    09bb : 0200 ; -- <0769> a = 0
    09bc : 0602 ; -- <0770> b = 2
-- :clear_next_word -- = 0x09bd
    09bd : 6000 ; -- <0772> av_ad_lo = a
    09be : 5600 ; -- <0773> av_write_data = 0
    09bf : 0300 ; -- <0774> a = ad0
    09c0 : e400 ; -- <0775> bn az :clear_next_word
    09c1 : 09bd ; -- <0775> "

    09c2 : fc00 ; -- <0777> swapra = nop

-- ######## func set_text_flag -- = 0x09c3

    09c3 : 0408 ; -- <0779> b = flag_addr
    09c4 : 5e00 ; -- <0780> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    09c5 : 6258 ; -- <0780> ram a = $ram_next_tfp_idx -- av_ad_lo = 88
    09c6 : 0015 ; -- <0780> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    09c7 : 0016 ; -- <0780> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle

    09c8 : 0351 ; -- <0781> a = a<<1
    09c9 : 3001 ; -- <0781> push b -- push b
    09ca : 0648 ; -- <0781> b = 72
    09cb : 5e00 ; -- <0781> av_ad_hi = 0
    09cc : 6300 ; -- <0781> av_ad_lo = ad0
    09cd : 540c ; -- <0781> pop av_write_data -- pop av_write_data

    09ce : 0008 ; -- <0782> a = flag_addr
    09cf : 0760 ; -- <0783> b = -1
    09d0 : c800 ; -- <0784> a = a+b
    09d1 : 0300 ; -- <0784> "
    09d2 : 0607 ; -- <0785> b = $tfp_mask
    09d3 : 5e00 ; -- <0786> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    09d4 : 6258 ; -- <0786> ram $ram_next_tfp_idx = and -- av_ad_lo = 88
    09d5 : c800 ; -- <0786> ram $ram_next_tfp_idx = and -- av_write_data = and
    09d6 : 5730 ; -- <0786> "

    09d7 : fc00 ; -- <0788> swapra = nop

-- :text_flags_msg -- = 0x09d8
-- " tf=\x0"
    09d8 : 7420 ; -- <0790> t 
    09d9 : 3d66 ; -- <0790> =f
    09da : 0000 ; -- <0790>   

-- ######## func report_text_flags -- = 0x09db
    09db : 3002 ; -- <0806> push i -- func report_text_flags
    09dc : 303e ; -- <0806> push rtna -- "

    09dd : 03a0 ; -- <0793> a = :text_flags_msg
    09de : 09d8 ; -- <0793> "
    09df : fba0 ; -- <0794> call :print_nt
    09e0 : 014f ; -- <0794> "
    09e1 : fc00 ; -- <0794> "
    09e2 : 0a00 ; -- <0805> i = 0
-- :loop_2530 -- = 0x09e3

    09e3 : 0002 ; -- <0795> a = i

    09e4 : 0351 ; -- <0796> a = a<<1
    09e5 : 0648 ; -- <0796> b = 72
    09e6 : 5e00 ; -- <0796> av_ad_hi = 0
    09e7 : 6300 ; -- <0796> av_ad_lo = ad0
    09e8 : 0415 ; -- <0796> b = av_write_data
    09e9 : 0416 ; -- <0796> b = av_read_data


    09ea : 0001 ; -- <0803> a = b
    09eb : 0600 ; -- <0803> b = 0

    09ec : e007 ; -- <0797> br eq :else_2540
    09ed : 09fd ; -- <0797> "

    09ee : fba0 ; -- <0798> call :print_nt
    09ef : 014f ; -- <0798> "
    09f0 : fc00 ; -- <0798> "
    09f1 : 022c ; -- <0799> a = 44 -- putasc ","
    09f2 : fba0 ; -- <0799> putasc ","
    09f3 : 009b ; -- <0799> "
    09f4 : fc00 ; -- <0799> "
    09f5 : 0002 ; -- <0800> a = i
    09f6 : 0600 ; -- <0801> b = 0

    09f7 : 0351 ; -- <0802> a = a<<1
    09f8 : 3001 ; -- <0802> push b -- push b
    09f9 : 0648 ; -- <0802> b = 72
    09fa : 5e00 ; -- <0802> av_ad_hi = 0
    09fb : 6300 ; -- <0802> av_ad_lo = ad0
    09fc : 540c ; -- <0802> pop av_write_data -- pop av_write_data




    09fd : 0002 ; -- <0805> a = i
    09fe : 0601 ; -- <0805> b = 1
    09ff : c800 ; -- <0805> i = a+b
    0a00 : 0b00 ; -- <0805> "


    0a01 : 0002 ; -- <0805> a = i
    0a02 : 0608 ; -- <0805> b = $num_text_flag_pointers
    0a03 : e005 ; -- <0805> br lt :loop_2530
    0a04 : 09e3 ; -- <0805> "

-- :end_2530 -- = 0x0a05

    0a05 : f80c ; -- <0807> pop rtna -- func report_text_flags
    0a06 : 080c ; -- <0807> pop i -- "
    0a07 : fc00 ; -- <0807> swapra = nop

-- :plan_msg -- = 0x0a08
-- " pl=\x0"
    0a08 : 7020 ; -- <0809> p 
    0a09 : 3d6c ; -- <0809> =l
    0a0a : 0000 ; -- <0809>   
-- :manual_trim_msg -- = 0x0a0b
-- " mt=\x0"
    0a0b : 6d20 ; -- <0811> m 
    0a0c : 3d74 ; -- <0811> =t
    0a0d : 0000 ; -- <0811>   

-- ######## func report_plan -- = 0x0a0e
    0a0e : 303e ; -- <0823> push rtna -- func report_plan

    0a0f : 03a0 ; -- <0814> a = :plan_msg
    0a10 : 0a08 ; -- <0814> "
    0a11 : fba0 ; -- <0815> call :print_nt
    0a12 : 014f ; -- <0815> "
    0a13 : fc00 ; -- <0815> "
    0a14 : 5e00 ; -- <0816> ram a = $ram_plan_name -- av_ad_hi = 0
    0a15 : 628a ; -- <0816> ram a = $ram_plan_name -- av_ad_lo = 138
    0a16 : 0015 ; -- <0816> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    0a17 : 0016 ; -- <0816> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    0a18 : fba0 ; -- <0817> call :print_nt
    0a19 : 014f ; -- <0817> "
    0a1a : fc00 ; -- <0817> "

    0a1b : 03a0 ; -- <0819> a = :manual_trim_msg
    0a1c : 0a0b ; -- <0819> "
    0a1d : fba0 ; -- <0820> call :print_nt
    0a1e : 014f ; -- <0820> "
    0a1f : fc00 ; -- <0820> "
    0a20 : 5e00 ; -- <0821> ram a = $run_manual_trim_thou -- av_ad_hi = 0
    0a21 : 62d8 ; -- <0821> ram a = $run_manual_trim_thou -- av_ad_lo = 216
    0a22 : 0015 ; -- <0821> ram a = $run_manual_trim_thou -- a = av_write_data -- start read cycle
    0a23 : 0016 ; -- <0821> ram a = $run_manual_trim_thou -- a = av_read_data -- finish read cycle
    0a24 : fba0 ; -- <0822> call :put4x
    0a25 : 00c3 ; -- <0822> "
    0a26 : fc00 ; -- <0822> "

    0a27 : f80c ; -- <0824> pop rtna -- func report_plan
    0a28 : fc00 ; -- <0824> swapra = nop

-- ######## func jf_to_rpm -- = 0x0a29
    0a29 : 303e ; -- <0834> push rtna -- func jf_to_rpm

-- resolution = 32 rpm.
    0a2a : 0408 ; -- <0827> b = jiffies
    0a2b : 03a0 ; -- <0828> a = 0x5573
    0a2c : 5573 ; -- <0828> "
-- = 700000 >> 5
    0a2d : fba0 ; -- <0830> call :divide
    0a2e : 018c ; -- <0830> "
    0a2f : fc00 ; -- <0830> "
    0a30 : 0001 ; -- <0831> a = b
    0a31 : 0352 ; -- <0832> a = a<<4
    0a32 : 2351 ; -- <0833> rpm = a<<1

    0a33 : f80c ; -- <0835> pop rtna -- func jf_to_rpm
    0a34 : fc00 ; -- <0835> swapra = nop

-- ######## func check_engine_stop -- = 0x0a35
    0a35 : 303e ; -- <0851> push rtna -- func check_engine_stop

-- returns 1 if transitioned to stop, else 0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.

    0a36 : 001e ; -- <0849> a = power_duty
    0a37 : 0680 ; -- <0849> b = ( 0x0080 )

    0a38 : e003 ; -- <0841> br and0z :else_2616
    0a39 : 0a4d ; -- <0841> "

    0a3a : 5e00 ; -- <0842> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0a3b : 6280 ; -- <0842> ram a = $ram_rpm_valid -- av_ad_lo = 128
    0a3c : 0015 ; -- <0842> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0a3d : 0016 ; -- <0842> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0a3e : 0000 ; -- <0848> a = a
    0a3f : 0600 ; -- <0848> b = 0

    0a40 : e407 ; -- <0843> bn eq :else_2624
    0a41 : 0a4d ; -- <0843> "

    0a42 : 5e00 ; -- <0844> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0a43 : 6290 ; -- <0844> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    0a44 : f815 ; -- <0844> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0a45 : f816 ; -- <0844> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0a46 : fc00 ; -- <0845> swapra = nop
    0a47 : fba0 ; -- <0847> callx  init_plan_stop
    0a48 : 0313 ; -- <0847> "
    0a49 : fc00 ; -- <0847> "
    0a4a : 2201 ; -- <0848> did_stop = 1
    0a4b : f80c ; -- <0848> pop rtna -- rtn 1
    0a4c : fc00 ; -- <0847> swapra = nop


    0a4d : 2200 ; -- <0850> did_stop = 0
    0a4e : f80c ; -- <0850> pop rtna -- rtn 0
    0a4f : fc00 ; -- <0849> swapra = nop

    0a50 : f80c ; -- <0852> pop rtna -- func check_engine_stop
    0a51 : fc00 ; -- <0852> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d event_priority
-- src reg 000e soft_event
-- src reg 000f usage_count
-- src reg 0010 ustimer0
-- src reg 0011 mstimer0
-- src reg 0012 mstimer1
-- src reg 0013 mstimer2
-- src reg 0014 spi_data
-- src reg 0015 av_write_data
-- src reg 0016 av_read_data
-- src reg 0017 av_ad_hi
-- src reg 0018 av_ad_lo
-- src reg 0019 fduart_data
-- src reg 001a fduart_status
-- src reg 001b leds
-- src reg 001c board_ctrl
-- src reg 001d anmux_ctrl
-- src reg 001e power_duty
-- src reg 001f ign_capture_jf
-- src reg 0020 ign_timeout_len_jf
-- src reg 0021 puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d event_priority
-- dest reg 000e soft_event
-- dest reg 000f usage_count
-- dest reg 0010 ustimer0
-- dest reg 0011 mstimer0
-- dest reg 0012 mstimer1
-- dest reg 0013 mstimer2
-- dest reg 0014 spi_data
-- dest reg 0015 av_write_data
-- dest reg 0017 av_ad_hi
-- dest reg 0018 av_ad_lo
-- dest reg 0019 fduart_data
-- dest reg 001a fduart_status
-- dest reg 001b leds
-- dest reg 001c board_ctrl
-- dest reg 001d anmux_ctrl
-- dest reg 001e power_duty
-- dest reg 0020 ign_timeout_len_jf
-- dest reg 0021 puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_daq_discard_cnt
-- ram 00000018 ram_last_anmux_data
-- ram 00000028 ram_last_adc_data
-- ram 00000038 ram_adc_chn_pending
-- ram 0000003a ram_adc_junk
-- ram 0000003c ram_dial_setting
-- ram 0000003e ram_power_down_at_min
-- ram 00000040 ram_relay_hold_at_pass
-- ram 00000042 ram_minutes_cnt
-- ram 00000044 ram_seconds_cnt
-- ram 00000046 ram_mcu_usage_cnt
-- ram 00000048 ram_text_flag_pointers
-- ram 00000058 ram_next_tfp_idx
-- ram 0000005a ram_ign_history_idx
-- ram 0000005c ram_ign_history_jf
-- ram 0000007c ram_ign_avg_jf
-- ram 0000007e ram_avg_rpm
-- ram 00000080 ram_rpm_valid
-- ram 00000082 ram_ign_bad_samples
-- ram 00000084 ram_ign_fastest_jf
-- ram 00000086 ram_ign_slowest_jf
-- ram 00000088 ram_next_puff_len_us
-- ram 0000008a ram_plan_name
-- ram 0000008c ram_puff_len_func
-- ram 0000008e ram_transition_func
-- ram 00000090 ram_destroy_plan_func
-- ram 00000092 ram_next_puff_len_us
-- ram 00000094 ram_puff_count
-- ram 00000096 ram_terminal_connected
-- ram 00000098 ram_warmup_timeout_at_pass
-- ram 0000009a ram_smap
-- ram 000000b4 ram_last_learn_second
-- ram 000000b6 ram_tps_reference
-- ram 000000d0 ram_lrns_ticks_remain
-- ram 000000d2 ram_o2_state
-- ram 000000d4 ram_o2_been_rich
-- ram 000000d6 ram_o2_been_lean
-- ram 000000d8 run_manual_trim_thou
        
        END;
    
