
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 0599 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.

-- application-specific register aliases.

-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.





-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in jf "jiffies" or "jf".
-- 5000 RPM = about 140 jf between rising edges on chevy ignition white wire.
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 001e ; -- <0181> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0181>   
    0004 : 2020 ; -- <0181>   
    0005 : 2020 ; -- <0181>   
    0006 : 6120 ; -- <0181> a 
-- "       b"
    0007 : 2020 ; -- <0181>   
    0008 : 2020 ; -- <0181>   
    0009 : 2020 ; -- <0181>   
    000a : 6220 ; -- <0181> b 
-- "       i"
    000b : 2020 ; -- <0181>   
    000c : 2020 ; -- <0181>   
    000d : 2020 ; -- <0181>   
    000e : 6920 ; -- <0181> i 
-- "       j"
    000f : 2020 ; -- <0181>   
    0010 : 2020 ; -- <0181>   
    0011 : 2020 ; -- <0181>   
    0012 : 6a20 ; -- <0181> j 
-- "       x"
    0013 : 2020 ; -- <0181>   
    0014 : 2020 ; -- <0181>   
    0015 : 2020 ; -- <0181>   
    0016 : 7820 ; -- <0181> x 
-- "       y"
    0017 : 2020 ; -- <0181>   
    0018 : 2020 ; -- <0181>   
    0019 : 2020 ; -- <0181>   
    001a : 7920 ; -- <0181> y 
-- "      g6"
    001b : 2020 ; -- <0181>   
    001c : 2020 ; -- <0181>   
    001d : 2020 ; -- <0181>   
    001e : 3667 ; -- <0181> 6g
-- "      g7"
    001f : 2020 ; -- <0181>   
    0020 : 2020 ; -- <0181>   
    0021 : 2020 ; -- <0181>   
    0022 : 3767 ; -- <0181> 7g
-- "--rstk  "
    0023 : 2f2f ; -- <0181> --
    0024 : 7372 ; -- <0181> sr
    0025 : 6b74 ; -- <0181> kt
    0026 : 2020 ; -- <0181>   
-- "  ev_pri"
    0027 : 2020 ; -- <0181>   
    0028 : 7665 ; -- <0181> ve
    0029 : 705f ; -- <0181> p_
    002a : 6972 ; -- <0181> ir
-- "softevnt"
    002b : 6f73 ; -- <0181> os
    002c : 7466 ; -- <0181> tf
    002d : 7665 ; -- <0181> ve
    002e : 746e ; -- <0181> tn
-- "   usage"
    002f : 2020 ; -- <0181>   
    0030 : 7520 ; -- <0181> u 
    0031 : 6173 ; -- <0181> as
    0032 : 6567 ; -- <0181> eg
-- "ustimer0"
    0033 : 7375 ; -- <0181> su
    0034 : 6974 ; -- <0181> it
    0035 : 656d ; -- <0181> em
    0036 : 3072 ; -- <0181> 0r
-- "mstimer0"
    0037 : 736d ; -- <0181> sm
    0038 : 6974 ; -- <0181> it
    0039 : 656d ; -- <0181> em
    003a : 3072 ; -- <0181> 0r
-- "mstimer1"
    003b : 736d ; -- <0181> sm
    003c : 6974 ; -- <0181> it
    003d : 656d ; -- <0181> em
    003e : 3172 ; -- <0181> 1r
-- "mstimer2"
    003f : 736d ; -- <0181> sm
    0040 : 6974 ; -- <0181> it
    0041 : 656d ; -- <0181> em
    0042 : 3272 ; -- <0181> 2r
-- "spi_data"
    0043 : 7073 ; -- <0181> ps
    0044 : 5f69 ; -- <0181> _i
    0045 : 6164 ; -- <0181> ad
    0046 : 6174 ; -- <0181> at
-- "--avwrdt"
    0047 : 2f2f ; -- <0181> --
    0048 : 7661 ; -- <0181> va
    0049 : 7277 ; -- <0181> rw
    004a : 7464 ; -- <0181> td
-- "av_rd_dt"
    004b : 7661 ; -- <0181> va
    004c : 725f ; -- <0181> r_
    004d : 5f64 ; -- <0181> _d
    004e : 7464 ; -- <0181> td
-- "av_ad_hi"
    004f : 7661 ; -- <0181> va
    0050 : 615f ; -- <0181> a_
    0051 : 5f64 ; -- <0181> _d
    0052 : 6968 ; -- <0181> ih
-- "av_ad_lo"
    0053 : 7661 ; -- <0181> va
    0054 : 615f ; -- <0181> a_
    0055 : 5f64 ; -- <0181> _d
    0056 : 6f6c ; -- <0181> ol
-- "--uartdt"
    0057 : 2f2f ; -- <0181> --
    0058 : 6175 ; -- <0181> au
    0059 : 7472 ; -- <0181> tr
    005a : 7464 ; -- <0181> td
-- "uartstat"
    005b : 6175 ; -- <0181> au
    005c : 7472 ; -- <0181> tr
    005d : 7473 ; -- <0181> ts
    005e : 7461 ; -- <0181> ta
-- "    leds"
    005f : 2020 ; -- <0181>   
    0060 : 2020 ; -- <0181>   
    0061 : 656c ; -- <0181> el
    0062 : 7364 ; -- <0181> sd
-- "brd_ctrl"
    0063 : 7262 ; -- <0181> rb
    0064 : 5f64 ; -- <0181> _d
    0065 : 7463 ; -- <0181> tc
    0066 : 6c72 ; -- <0181> lr
-- "   anmux"
    0067 : 2020 ; -- <0181>   
    0068 : 6120 ; -- <0181> a 
    0069 : 6d6e ; -- <0181> mn
    006a : 7875 ; -- <0181> xu
-- "pwr_duty"
    006b : 7770 ; -- <0181> wp
    006c : 5f72 ; -- <0181> _r
    006d : 7564 ; -- <0181> ud
    006e : 7974 ; -- <0181> yt
-- "igntmcap"
    006f : 6769 ; -- <0181> gi
    0070 : 746e ; -- <0181> tn
    0071 : 636d ; -- <0181> cm
    0072 : 7061 ; -- <0181> pa
-- "igntmout"
    0073 : 6769 ; -- <0181> gi
    0074 : 746e ; -- <0181> tn
    0075 : 6f6d ; -- <0181> om
    0076 : 7475 ; -- <0181> tu
-- "puflenus"
    0077 : 7570 ; -- <0181> up
    0078 : 6c66 ; -- <0181> lf
    0079 : 6e65 ; -- <0181> ne
    007a : 7375 ; -- <0181> su

-- string resources
-- :boot_msg -- = 0x007b
-- "TGT\r\n\x0"
    007b : 4754 ; -- <0185> GT
    007c : 0d54 ; -- <0185>  T
    007d : 000a ; -- <0185>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x007e
-- initialize prior to polling loop, for minimum latency.
    007e : 07a0 ; -- <0006> b = :event_table
    007f : 05db ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0080
    0080 : 0009 ; -- <0009> a = event_priority
    0081 : e000 ; -- <0010> br 0z :poll_events_again
    0082 : 0080 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0083 : 2400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    0084 : d300 ; -- <0015> fetch rtna from ad0
    0085 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    0086 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    0087 : 5fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    0088 : ffc0 ; -- <0021> "
    0089 : e00f ; -- <0021> error_halt_code 0xffc0
    008a : 0089 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x008b
    008b : 2004 ; -- <0046> push x -- func putchar_fduart

    008c : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    008d : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x008e
    008e : 0416 ; -- <0053> b = fduart_status
    008f : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    0090 : 008e ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    0091 : 5404 ; -- <0057> fduart_data = x
    0092 : 1008 ; -- <0058> pop x -- end_func
    0093 : fc00 ; -- <0058> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x0094
-- wait until FIFO is populated.
    0094 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x0095
    0095 : 0416 ; -- <0066> b = fduart_status
    0096 : e403 ; -- <0067> bn and0z :wait_for_busy
    0097 : 0095 ; -- <0067> "
    0098 : 0015 ; -- <0068> a = fduart_data
    0099 : fc00 ; -- <0069> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x009a
-- check for FIFO is populated.
    009a : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    009b : 0416 ; -- <0075> b = fduart_status
    009c : e403 ; -- <0076> bn and0z :none
    009d : 00a0 ; -- <0076> "
    009e : 0015 ; -- <0077> a = fduart_data
    009f : fc00 ; -- <0078> swapra = nop
-- :none -- = 0x00a0
    00a0 : 0360 ; -- <0080> a = -1
    00a1 : fc00 ; -- <0081> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00a2
-- set & enable analog muxer
    00a2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00a3 : c800 ; -- <0008> anmux_ctrl = or
    00a4 : 6734 ; -- <0008> "
    00a5 : fc00 ; -- <0009> swapra = nop

-- ######## func anmux_get_chn -- = 0x00a6
    00a6 : 0019 ; -- <0012> a = anmux_ctrl
    00a7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00a8 : c800 ; -- <0014> a = and
    00a9 : 0330 ; -- <0014> "
    00aa : fc00 ; -- <0015> swapra = nop


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00ab
-- "0123456789abcdef"
    00ab : 3130 ; -- <0050> 10
    00ac : 3332 ; -- <0050> 32
    00ad : 3534 ; -- <0050> 54
    00ae : 3736 ; -- <0050> 76
    00af : 3938 ; -- <0050> 98
    00b0 : 6261 ; -- <0050> ba
    00b1 : 6463 ; -- <0050> dc
    00b2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00b3
    00b3 : 2004 ; -- <0054> push x -- func put4x
    00b4 : 2006 ; -- <0054> push g6 -- "
    00b5 : 203e ; -- <0054> push rtna -- "
    00b6 : 13a0 ; -- <0055> x = :hexdigits
    00b7 : 00ab ; -- <0055> "

    00b8 : 1800 ; -- <0057> g6 = a
    00b9 : 07a0 ; -- <0058> b = 0xF000
    00ba : f000 ; -- <0058> "
    00bb : c800 ; -- <0059> a = and
    00bc : 0330 ; -- <0059> "
    00bd : 0353 ; -- <0060> a = a>>4
    00be : 0353 ; -- <0061> a = a>>4
    00bf : 0353 ; -- <0062> a = a>>4
    00c0 : fba0 ; -- <0063> call fetch_byte
    00c1 : 01cc ; -- <0063> "
    00c2 : fc00 ; -- <0063> "
    00c3 : fba0 ; -- <0064> putchar a
    00c4 : 008b ; -- <0064> "
    00c5 : fc00 ; -- <0064> "

    00c6 : 0006 ; -- <0066> a = g6
    00c7 : 07a0 ; -- <0067> b = 0x0F00
    00c8 : 0f00 ; -- <0067> "
    00c9 : c800 ; -- <0068> a = and
    00ca : 0330 ; -- <0068> "
    00cb : 0353 ; -- <0069> a = a>>4
    00cc : 0353 ; -- <0070> a = a>>4
    00cd : fba0 ; -- <0071> call fetch_byte
    00ce : 01cc ; -- <0071> "
    00cf : fc00 ; -- <0071> "
    00d0 : fba0 ; -- <0072> putchar a
    00d1 : 008b ; -- <0072> "
    00d2 : fc00 ; -- <0072> "

    00d3 : 0006 ; -- <0074> a = g6
    00d4 : 06f0 ; -- <0075> b = 0x00F0
    00d5 : c800 ; -- <0076> a = and
    00d6 : 0330 ; -- <0076> "
    00d7 : 0353 ; -- <0077> a = a>>4
    00d8 : fba0 ; -- <0078> call fetch_byte
    00d9 : 01cc ; -- <0078> "
    00da : fc00 ; -- <0078> "
    00db : fba0 ; -- <0079> putchar a
    00dc : 008b ; -- <0079> "
    00dd : fc00 ; -- <0079> "

    00de : 0006 ; -- <0081> a = g6
    00df : 060f ; -- <0082> b = 0x000F
    00e0 : c800 ; -- <0083> a = and
    00e1 : 0330 ; -- <0083> "
    00e2 : fba0 ; -- <0084> call fetch_byte
    00e3 : 01cc ; -- <0084> "
    00e4 : fc00 ; -- <0084> "
    00e5 : fba0 ; -- <0085> putchar a
    00e6 : 008b ; -- <0085> "
    00e7 : fc00 ; -- <0085> "

    00e8 : f808 ; -- <0087> pop rtna -- end_func
    00e9 : 1808 ; -- <0087> pop g6 -- "
    00ea : 1008 ; -- <0087> pop x -- "
    00eb : fc00 ; -- <0087> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00ec
    00ec : 2002 ; -- <0091> push i -- func get4x
    00ed : 2003 ; -- <0091> push j -- "
    00ee : 2004 ; -- <0091> push x -- "
    00ef : 2005 ; -- <0091> push y -- "
    00f0 : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    00f1 : 1604 ; -- <0094> y = 4
-- :again -- = 0x00f2
    00f2 : fba0 ; -- <0096> getchar
    00f3 : 0094 ; -- <0096> "
    00f4 : fc00 ; -- <0096> "
    00f5 : 13a0 ; -- <0097> x = :hexdigits
    00f6 : 00ab ; -- <0097> "
    00f7 : 0a10 ; -- <0098> i = 16
    00f8 : fba0 ; -- <0099> call :find_in_fetch
    00f9 : 01e0 ; -- <0099> "
    00fa : fc00 ; -- <0099> "
    00fb : 0760 ; -- <0100> b = -1
    00fc : e007 ; -- <0101> br eq :fail
    00fd : 0111 ; -- <0101> "
    00fe : 0400 ; -- <0102> b = a
    00ff : 0003 ; -- <0103> a = j
    0100 : 0352 ; -- <0104> a = a<<4
    0101 : c800 ; -- <0105> j = or
    0102 : 0f34 ; -- <0105> "
    0103 : 1360 ; -- <0106> x = -1
    0104 : c800 ; -- <0107> y = x+y
    0105 : 1720 ; -- <0107> "
    0106 : 0005 ; -- <0108> a = y
    0107 : e400 ; -- <0109> bn az :again
    0108 : 00f2 ; -- <0109> "
    0109 : 0003 ; -- <0110> a = j
    010a : 0600 ; -- <0111> b = 0
    010b : f808 ; -- <0112> pop rtna -- rtn
    010c : 1408 ; -- <0112> pop y -- "
    010d : 1008 ; -- <0112> pop x -- "
    010e : 0c08 ; -- <0112> pop j -- "
    010f : 0808 ; -- <0112> pop i -- "
    0110 : fc00 ; -- <0112> swapra = nop
-- :fail -- = 0x0111
    0111 : 0760 ; -- <0114> b = -1
    0112 : f808 ; -- <0115> pop rtna -- end_func
    0113 : 1408 ; -- <0115> pop y -- "
    0114 : 1008 ; -- <0115> pop x -- "
    0115 : 0c08 ; -- <0115> pop j -- "
    0116 : 0808 ; -- <0115> pop i -- "
    0117 : fc00 ; -- <0115> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0118
    0118 : 2002 ; -- <0121> push i -- func print_fixed
    0119 : 2003 ; -- <0121> push j -- "
    011a : 2004 ; -- <0121> push x -- "
    011b : 2005 ; -- <0121> push y -- "
    011c : 2006 ; -- <0121> push g6 -- "
    011d : 203e ; -- <0121> push rtna -- "
    011e : 0800 ; -- <0122> i = a
    011f : 0e01 ; -- <0123> j = 1
    0120 : 1001 ; -- <0124> x = b
    0121 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0122
    0122 : e002 ; -- <0127> br xz :done
    0123 : 0138 ; -- <0127> "
    0124 : 1320 ; -- <0128> x = ad2
    0125 : d002 ; -- <0129> fetch g6 from i
    0126 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    0127 : 0006 ; -- <0131> a = g6 -- putchar g6
    0128 : fba0 ; -- <0131> putchar g6
    0129 : 008b ; -- <0131> "
    012a : fc00 ; -- <0131> "
    012b : e002 ; -- <0132> br xz :done
    012c : 0138 ; -- <0132> "
    012d : 1320 ; -- <0133> x = ad2
    012e : 0006 ; -- <0134> a = g6
    012f : 0353 ; -- <0135> a = a>>4
    0130 : 0353 ; -- <0136> a = a>>4
    0131 : fba0 ; -- <0137> putchar a
    0132 : 008b ; -- <0137> "
    0133 : fc00 ; -- <0137> "
    0134 : c800 ; -- <0138> i = i+j
    0135 : 0b10 ; -- <0138> "
    0136 : e00f ; -- <0139> jmp :next_word
    0137 : 0122 ; -- <0139> "
-- :done -- = 0x0138
    0138 : f808 ; -- <0141> pop rtna -- end_func
    0139 : 1808 ; -- <0141> pop g6 -- "
    013a : 1408 ; -- <0141> pop y -- "
    013b : 1008 ; -- <0141> pop x -- "
    013c : 0c08 ; -- <0141> pop j -- "
    013d : 0808 ; -- <0141> pop i -- "
    013e : fc00 ; -- <0141> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x013f
    013f : 2002 ; -- <0147> push i -- func print_nt
    0140 : 2003 ; -- <0147> push j -- "
    0141 : 2004 ; -- <0147> push x -- "
    0142 : 203e ; -- <0147> push rtna -- "
    0143 : 0800 ; -- <0148> i = a
    0144 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0145
    0145 : d002 ; -- <0151> fetch x from i
    0146 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0147 : 0004 ; -- <0153> a = x
    0148 : 06ff ; -- <0154> b = 0xff
    0149 : e003 ; -- <0155> br and0z :done
    014a : 015b ; -- <0155> "
    014b : fba0 ; -- <0156> putchar a
    014c : 008b ; -- <0156> "
    014d : fc00 ; -- <0156> "
    014e : 0004 ; -- <0157> a = x
    014f : 0353 ; -- <0158> a = a>>4
    0150 : 0353 ; -- <0159> a = a>>4
    0151 : 06ff ; -- <0160> b = 0xff
    0152 : e003 ; -- <0161> br and0z :done
    0153 : 015b ; -- <0161> "
    0154 : fba0 ; -- <0162> putchar a
    0155 : 008b ; -- <0162> "
    0156 : fc00 ; -- <0162> "
    0157 : c800 ; -- <0163> i = i+j
    0158 : 0b10 ; -- <0163> "
    0159 : e00f ; -- <0164> jmp :next_word
    015a : 0145 ; -- <0164> "
-- :done -- = 0x015b
    015b : f808 ; -- <0166> pop rtna -- end_func
    015c : 1008 ; -- <0166> pop x -- "
    015d : 0c08 ; -- <0166> pop j -- "
    015e : 0808 ; -- <0166> pop i -- "
    015f : fc00 ; -- <0166> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0160
    0160 : 2002 ; -- <0004> push i -- func multiply
    0161 : 2003 ; -- <0004> push j -- "
    0162 : 2004 ; -- <0004> push x -- "
    0163 : 2005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

    0164 : 1000 ; -- <0009> x = a
    0165 : 1401 ; -- <0010> y = b
    0166 : 0a00 ; -- <0011> i = 0
-- :again -- = 0x0167
    0167 : e002 ; -- <0013> br xz :done
    0168 : 0176 ; -- <0013> "
    0169 : 0004 ; -- <0014> a = x
    016a : 0601 ; -- <0015> b = 1
    016b : e003 ; -- <0016> br and0z :skip_add
    016c : 0170 ; -- <0016> "
    016d : 0c05 ; -- <0017> j = y
    016e : c800 ; -- <0018> i = i+j
    016f : 0b10 ; -- <0018> "
-- :skip_add -- = 0x0170
    0170 : 0004 ; -- <0020> a = x
    0171 : 1350 ; -- <0021> x = a>>1
    0172 : 0005 ; -- <0022> a = y
    0173 : 1751 ; -- <0023> y = a<<1
    0174 : e00f ; -- <0024> jmp :again
    0175 : 0167 ; -- <0024> "
-- :done -- = 0x0176
    0176 : 0002 ; -- <0026> a = i
    0177 : 1408 ; -- <0027> pop y -- end_func
    0178 : 1008 ; -- <0027> pop x -- "
    0179 : 0c08 ; -- <0027> pop j -- "
    017a : 0808 ; -- <0027> pop i -- "
    017b : fc00 ; -- <0027> swapra = nop

-- ######## func divide -- = 0x017c
    017c : 2002 ; -- <0029> push i -- func divide
    017d : 2003 ; -- <0029> push j -- "
    017e : 2004 ; -- <0029> push x -- "
    017f : 2005 ; -- <0029> push y -- "
    0180 : 2006 ; -- <0029> push g6 -- "
    0181 : 2007 ; -- <0029> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    0182 : e005 ; -- <0037> br lt :zero
    0183 : 01bd ; -- <0037> "
    0184 : e000 ; -- <0038> br az :zero
    0185 : 01bd ; -- <0038> "
    0186 : 1000 ; -- <0039> x = a
--    g7 = x
    0187 : 0001 ; -- <0041> a = b
    0188 : e000 ; -- <0042> br az :zero
    0189 : 01bd ; -- <0042> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    018a : 0404 ; -- <0058> b = x
    018b : 0a00 ; -- <0059> i = 0
    018c : 0e01 ; -- <0060> j = 1
-- :shift_again -- = 0x018d
    018d : e006 ; -- <0062> br gt :shift_done
    018e : 0193 ; -- <0062> "
    018f : 0351 ; -- <0063> a = a<<1
    0190 : 0b10 ; -- <0064> i = ad1
    0191 : e00f ; -- <0065> jmp :shift_again
    0192 : 018d ; -- <0065> "
-- :shift_done -- = 0x0193
    0193 : 1b50 ; -- <0067> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    0194 : 1e00 ; -- <0078> g7 = 0
    0195 : 0f60 ; -- <0079> j = -1
-- :again -- = 0x0196
    0196 : e001 ; -- <0081> br iz :done
    0197 : 01b4 ; -- <0081> "
    0198 : 0006 ; -- <0082> a = g6
    0199 : 0404 ; -- <0083> b = x
    019a : e006 ; -- <0084> br gt :result0
    019b : 01ac ; -- <0084> "
-- temp does fit; output a 1.
    019c : 0007 ; -- <0086> a = g7
    019d : 0351 ; -- <0087> a = a<<1
    019e : 0601 ; -- <0088> b = 1
    019f : c800 ; -- <0089> g7 = or
    01a0 : 1f34 ; -- <0089> "
-- dividend = dividend - temp
    01a1 : 0006 ; -- <0091> a = g6
    01a2 : 0760 ; -- <0092> b = -1
    01a3 : c800 ; -- <0093> a = xor
    01a4 : 0338 ; -- <0093> "
    01a5 : 0601 ; -- <0094> b = 1
    01a6 : c800 ; -- <0095> y = a+b
    01a7 : 1700 ; -- <0095> "
    01a8 : c800 ; -- <0096> x = x+y
    01a9 : 1320 ; -- <0096> "
    01aa : e00f ; -- <0097> jmp :next
    01ab : 01ae ; -- <0097> "
-- :result0 -- = 0x01ac
-- temp does not fit; output a 0.
    01ac : 0007 ; -- <0100> a = g7
    01ad : 1f51 ; -- <0101> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01ae
    01ae : 0006 ; -- <0104> a = g6
    01af : 1b50 ; -- <0105> g6 = a>>1
    01b0 : c800 ; -- <0106> i = i+j
    01b1 : 0b10 ; -- <0106> "
    01b2 : e00f ; -- <0107> jmp :again
    01b3 : 0196 ; -- <0107> "

-- :done -- = 0x01b4
    01b4 : 0407 ; -- <0110> b = g7
    01b5 : 0004 ; -- <0111> a = x
    01b6 : 1c08 ; -- <0112> pop g7 -- rtn
    01b7 : 1808 ; -- <0112> pop g6 -- "
    01b8 : 1408 ; -- <0112> pop y -- "
    01b9 : 1008 ; -- <0112> pop x -- "
    01ba : 0c08 ; -- <0112> pop j -- "
    01bb : 0808 ; -- <0112> pop i -- "
    01bc : fc00 ; -- <0112> swapra = nop

-- :zero -- = 0x01bd
    01bd : 0600 ; -- <0115> b = 0
    01be : 1c08 ; -- <0116> pop g7 -- rtn
    01bf : 1808 ; -- <0116> pop g6 -- "
    01c0 : 1408 ; -- <0116> pop y -- "
    01c1 : 1008 ; -- <0116> pop x -- "
    01c2 : 0c08 ; -- <0116> pop j -- "
    01c3 : 0808 ; -- <0116> pop i -- "
    01c4 : fc00 ; -- <0116> swapra = nop
    01c5 : 1c08 ; -- <0117> pop g7 -- end_func
    01c6 : 1808 ; -- <0117> pop g6 -- "
    01c7 : 1408 ; -- <0117> pop y -- "
    01c8 : 1008 ; -- <0117> pop x -- "
    01c9 : 0c08 ; -- <0117> pop j -- "
    01ca : 0808 ; -- <0117> pop i -- "
    01cb : fc00 ; -- <0117> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01cc
    01cc : 0601 ; -- <0005> b = 1
    01cd : e003 ; -- <0006> br and0z :pick_byte_even
    01ce : 01d7 ; -- <0006> "
    01cf : 0350 ; -- <0007> a = a>>1
    01d0 : 0404 ; -- <0008> b = x
    01d1 : c800 ; -- <0009> fetch a from a+b
    01d2 : d300 ; -- <0009> "
    01d3 : 03b0 ; -- <0009> "
    01d4 : 0353 ; -- <0010> a = a>>4
    01d5 : 0353 ; -- <0011> a = a>>4
    01d6 : fc00 ; -- <0012> swapra = nop
-- :pick_byte_even -- = 0x01d7
    01d7 : 0350 ; -- <0014> a = a>>1
    01d8 : 0404 ; -- <0015> b = x
    01d9 : c800 ; -- <0016> fetch a from a+b
    01da : d300 ; -- <0016> "
    01db : 03b0 ; -- <0016> "
    01dc : 06ff ; -- <0017> b = 0xff
    01dd : c800 ; -- <0018> a = and
    01de : 0330 ; -- <0018> "
    01df : fc00 ; -- <0019> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x01e0
    01e0 : 2002 ; -- <0027> push i -- func find_in_fetch
    01e1 : 2003 ; -- <0027> push j -- "
    01e2 : 2005 ; -- <0027> push y -- "
    01e3 : 203e ; -- <0027> push rtna -- "
    01e4 : 1400 ; -- <0028> y = a
    01e5 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01e6
    01e6 : e001 ; -- <0031> br iz :fail
    01e7 : 01f6 ; -- <0031> "
    01e8 : 0b10 ; -- <0032> i = ad1
    01e9 : 0002 ; -- <0033> a = i
    01ea : fba0 ; -- <0034> call :fetch_byte
    01eb : 01cc ; -- <0034> "
    01ec : fc00 ; -- <0034> "
    01ed : 0405 ; -- <0035> b = y
    01ee : e407 ; -- <0036> bn eq :again
    01ef : 01e6 ; -- <0036> "
-- :found -- = 0x01f0
    01f0 : 0002 ; -- <0038> a = i
    01f1 : f808 ; -- <0039> pop rtna -- rtn
    01f2 : 1408 ; -- <0039> pop y -- "
    01f3 : 0c08 ; -- <0039> pop j -- "
    01f4 : 0808 ; -- <0039> pop i -- "
    01f5 : fc00 ; -- <0039> swapra = nop
-- :fail -- = 0x01f6
    01f6 : 0360 ; -- <0041> a = -1
    01f7 : f808 ; -- <0042> pop rtna -- end_func
    01f8 : 1408 ; -- <0042> pop y -- "
    01f9 : 0c08 ; -- <0042> pop j -- "
    01fa : 0808 ; -- <0042> pop i -- "
    01fb : fc00 ; -- <0042> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x01fc
    01fc : 2004 ; -- <0002> push x -- func spinwait
    01fd : 2005 ; -- <0002> push y -- "
--patch
--rtn
    01fe : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x01ff
    01ff : 13a0 ; -- <0007> x = 16666
    0200 : 411a ; -- <0007> "
    0201 : 1760 ; -- <0008> y = -1
    0202 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0203
-- use of the ad2 name overrides auto-nop here.
    0203 : 1320 ; -- <0012> x = ad2
    0204 : e402 ; -- <0013> bn xz :spinwait_inner
    0205 : 0203 ; -- <0013> "
    0206 : c800 ; -- <0014> a = a+b
    0207 : 0300 ; -- <0014> "
    0208 : e400 ; -- <0015> bn az :spinwait_outer
    0209 : 01ff ; -- <0015> "
    020a : 1408 ; -- <0016> pop y -- end_func
    020b : 1008 ; -- <0016> pop x -- "
    020c : fc00 ; -- <0016> swapra = nop




-- :cmd_table -- = 0x020d
-- "  hello"
    020d : 2020 ; -- <0005>   
    020e : 6568 ; -- <0005> eh
    020f : 6c6c ; -- <0005> ll
    0210 : 006f ; -- <0005>  o
    0211 : 02aa ; -- <0006> ([label hello_cmd])
-- "  plstp"
    0212 : 2020 ; -- <0007>   
    0213 : 6c70 ; -- <0007> lp
    0214 : 7473 ; -- <0007> ts
    0215 : 0070 ; -- <0007>  p
    0216 : 02ae ; -- <0008> ([label set_plan_stop_cmd])
-- "   plcr"
    0217 : 2020 ; -- <0009>   
    0218 : 7020 ; -- <0009> p 
    0219 : 636c ; -- <0009> cl
    021a : 0072 ; -- <0009>  r
    021b : 02b9 ; -- <0010> ([label set_plan_crank_cmd])
-- "   plwm"
    021c : 2020 ; -- <0011>   
    021d : 7020 ; -- <0011> p 
    021e : 776c ; -- <0011> wl
    021f : 006d ; -- <0011>  m
    0220 : 02c4 ; -- <0012> ([label set_plan_warmup_cmd])
-- "   plrn"
    0221 : 2020 ; -- <0013>   
    0222 : 7020 ; -- <0013> p 
    0223 : 726c ; -- <0013> rl
    0224 : 006e ; -- <0013>  n
    0225 : 02cf ; -- <0014> ([label set_plan_run_cmd])
-- "   plln"
    0226 : 2020 ; -- <0015>   
    0227 : 7020 ; -- <0015> p 
    0228 : 6c6c ; -- <0015> ll
    0229 : 006e ; -- <0015>  n
    022a : 02da ; -- <0016> ([label set_plan_learn_cmd])
-- "clstmap"
    022b : 6c63 ; -- <0017> lc
    022c : 7473 ; -- <0017> ts
    022d : 616d ; -- <0017> am
    022e : 0070 ; -- <0017>  p
    022f : 0584 ; -- <0018> ([label clear_smap_cmd])
-- "\x0\x0"
    0230 : 0000 ; -- <0019>   


-- ######## func parse_key -- = 0x0231
    0231 : 2002 ; -- <0022> push i -- func parse_key
    0232 : 2004 ; -- <0022> push x -- "
    0233 : 2005 ; -- <0022> push y -- "
    0234 : 203e ; -- <0022> push rtna -- "
-- memorize into ram_key_buf, pushing down existing content.
    0235 : 2000 ; -- <0024> push a -- push a
    0236 : 1000 ; -- <0025> x = a
    0237 : 0a07 ; -- <0034> i = $key_buf_max
-- :loop_567 -- = 0x0238

    0238 : 0002 ; -- <0034> a = i

    0239 : 0351 ; -- <0034> a = a<<1
    023a : 0600 ; -- <0034> b = 0
    023b : 4e00 ; -- <0034> av_ad_hi = 0
    023c : 5300 ; -- <0034> av_ad_lo = ad0
    023d : 0411 ; -- <0034> b = av_write_data
    023e : 0412 ; -- <0034> b = av_read_data

    023f : 1401 ; -- <0034> y = b
    0240 : 0002 ; -- <0034> a = i
    0241 : 0404 ; -- <0034> b = x

    0242 : 0351 ; -- <0034> a = a<<1
    0243 : 2001 ; -- <0034> push b -- push b
    0244 : 0600 ; -- <0034> b = 0
    0245 : 4e00 ; -- <0034> av_ad_hi = 0
    0246 : 5300 ; -- <0034> av_ad_lo = ad0
    0247 : 4408 ; -- <0034> pop av_write_data -- pop av_write_data

    0248 : 1005 ; -- <0034> x = y


    0249 : 0002 ; -- <0034> a = i
    024a : 0600 ; -- <0034> b = 0
    024b : e007 ; -- <0034> br eq :end_567
    024c : 0255 ; -- <0034> "


    024d : 0002 ; -- <0034> a = i
    024e : 0760 ; -- <0034> b = -1
    024f : c800 ; -- <0034> i = a+b
    0250 : 0b00 ; -- <0034> "


    0251 : 0002 ; -- <0034> a = i
    0252 : 0600 ; -- <0034> b = 0
    0253 : e405 ; -- <0034> bn lt :loop_567
    0254 : 0238 ; -- <0034> "

-- :end_567 -- = 0x0255
    0255 : 0008 ; -- <0035> pop a -- pop a

    0256 : 0000 ; -- <0038> a = a
    0257 : 060d ; -- <0038> b = 13


    0258 : e407 ; -- <0038> bn eq :else_600
    0259 : 025d ; -- <0038> "

    025a : fba0 ; -- <0038> call :parse_command
    025b : 0264 ; -- <0038> "
    025c : fc00 ; -- <0038> "


-- :else_600 -- = 0x025d

-- :end_600 -- = 0x025d

    025d : f808 ; -- <0039> pop rtna -- end_func
    025e : 1408 ; -- <0039> pop y -- "
    025f : 1008 ; -- <0039> pop x -- "
    0260 : 0808 ; -- <0039> pop i -- "
    0261 : fc00 ; -- <0039> swapra = nop

-- :cmd_ack_msg -- = 0x0262
-- "OK\x0"
    0262 : 4b4f ; -- <0042> KO
    0263 : 0000 ; -- <0042>   

-- ######## func parse_command -- = 0x0264
    0264 : 2002 ; -- <0044> push i -- func parse_command
    0265 : 2004 ; -- <0044> push x -- "
    0266 : 2005 ; -- <0044> push y -- "
    0267 : 203e ; -- <0044> push rtna -- "
    0268 : 13a0 ; -- <0045> x = :cmd_table
    0269 : 020d ; -- <0045> "
-- :next_cmd -- = 0x026a
    026a : d004 ; -- <0047> fetch a from x
    026b : 03b0 ; -- <0047> "
    026c : e000 ; -- <0048> br az :done
    026d : 02a5 ; -- <0048> "

    026e : 0a00 ; -- <0064> i = 0
-- :loop_622 -- = 0x026f

    026f : 0002 ; -- <0064> a = i
    0270 : fba0 ; -- <0064> call :fetch_byte
    0271 : 01cc ; -- <0064> "
    0272 : fc00 ; -- <0064> "
    0273 : 1400 ; -- <0064> y = a
    0274 : 0620 ; -- <0064> b = 32 -- asc b = " "

    0275 : 0000 ; -- <0064> a = a
    0276 : 0401 ; -- <0064> b = b


    0277 : e007 ; -- <0064> br eq :else_631
    0278 : 0286 ; -- <0064> "

    0279 : 062a ; -- <0064> b = 42 -- asc b = "*"
    027a : e007 ; -- <0064> br eq :matched
    027b : 028e ; -- <0064> "
-- parameter character.  succeed early.
    027c : 0002 ; -- <0064> a = i

    027d : 0351 ; -- <0064> a = a<<1
    027e : 0600 ; -- <0064> b = 0
    027f : 4e00 ; -- <0064> av_ad_hi = 0
    0280 : 5300 ; -- <0064> av_ad_lo = ad0
    0281 : 0411 ; -- <0064> b = av_write_data
    0282 : 0412 ; -- <0064> b = av_read_data

    0283 : 0005 ; -- <0064> a = y
    0284 : e407 ; -- <0064> bn eq :no_match
    0285 : 029a ; -- <0064> "


-- :else_631 -- = 0x0286

-- :end_631 -- = 0x0286



    0286 : 0002 ; -- <0064> a = i
    0287 : 0601 ; -- <0064> b = 1
    0288 : c800 ; -- <0064> i = a+b
    0289 : 0b00 ; -- <0064> "


    028a : 0002 ; -- <0064> a = i
    028b : 0607 ; -- <0064> b = $key_buf_max
    028c : e005 ; -- <0064> br lt :loop_622
    028d : 026f ; -- <0064> "

-- :end_622 -- = 0x028e

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x028e
    028e : 03a0 ; -- <0068> a = :cmd_ack_msg
    028f : 0262 ; -- <0068> "
    0290 : fba0 ; -- <0069> call :set_text_flag
    0291 : 08e1 ; -- <0069> "
    0292 : fc00 ; -- <0069> "
    0293 : 1604 ; -- <0070> y = ($key_buf_len / 2)
    0294 : c800 ; -- <0071> fetch rtna from x+y
    0295 : d320 ; -- <0071> "
    0296 : fbb0 ; -- <0071> "
    0297 : fc00 ; -- <0072> swapra = nop
    0298 : e00f ; -- <0073> jmp :done
    0299 : 02a5 ; -- <0073> "

-- :no_match -- = 0x029a
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    029a : 4e00 ; -- <0077> ram a = $ram_terminal_connected -- av_ad_hi = 0
    029b : 5296 ; -- <0077> ram a = $ram_terminal_connected -- av_ad_lo = 150
    029c : 0011 ; -- <0077> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    029d : 0012 ; -- <0077> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    029e : e000 ; -- <0078> br az :done
    029f : 02a5 ; -- <0078> "

    02a0 : 1605 ; -- <0080> y = (($key_buf_len / 2) + 1)
    02a1 : c800 ; -- <0081> x = x+y
    02a2 : 1320 ; -- <0081> "
    02a3 : e00f ; -- <0082> jmp :next_cmd
    02a4 : 026a ; -- <0082> "
-- :done -- = 0x02a5
    02a5 : f808 ; -- <0084> pop rtna -- end_func
    02a6 : 1408 ; -- <0084> pop y -- "
    02a7 : 1008 ; -- <0084> pop x -- "
    02a8 : 0808 ; -- <0084> pop i -- "
    02a9 : fc00 ; -- <0084> swapra = nop

-- ######## func hello_cmd -- = 0x02aa
    02aa : 4e00 ; -- <0087> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    02ab : 5296 ; -- <0087> ram $ram_terminal_connected = 1 -- av_ad_lo = 150
    02ac : 4601 ; -- <0087> ram $ram_terminal_connected = 1 -- av_write_data = 1
    02ad : fc00 ; -- <0088> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x02ae
    02ae : 203e ; -- <0090> push rtna -- func set_plan_stop_cmd
    02af : 4e00 ; -- <0091> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02b0 : 5290 ; -- <0091> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02b1 : f811 ; -- <0091> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02b2 : f812 ; -- <0091> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02b3 : fc00 ; -- <0092> swapra = nop
    02b4 : fba0 ; -- <0093> call :init_plan_stop
    02b5 : 02e7 ; -- <0093> "
    02b6 : fc00 ; -- <0093> "
    02b7 : f808 ; -- <0094> pop rtna -- end_func
    02b8 : fc00 ; -- <0094> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x02b9
    02b9 : 203e ; -- <0096> push rtna -- func set_plan_crank_cmd
    02ba : 4e00 ; -- <0097> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02bb : 5290 ; -- <0097> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02bc : f811 ; -- <0097> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02bd : f812 ; -- <0097> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02be : fc00 ; -- <0098> swapra = nop
    02bf : fba0 ; -- <0099> call :init_plan_crank
    02c0 : 0326 ; -- <0099> "
    02c1 : fc00 ; -- <0099> "
    02c2 : f808 ; -- <0100> pop rtna -- end_func
    02c3 : fc00 ; -- <0100> swapra = nop

-- ######## func set_plan_warmup_cmd -- = 0x02c4
    02c4 : 203e ; -- <0102> push rtna -- func set_plan_warmup_cmd
    02c5 : 4e00 ; -- <0103> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02c6 : 5290 ; -- <0103> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02c7 : f811 ; -- <0103> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02c8 : f812 ; -- <0103> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02c9 : fc00 ; -- <0104> swapra = nop
    02ca : fba0 ; -- <0105> call :init_plan_warmup
    02cb : 038b ; -- <0105> "
    02cc : fc00 ; -- <0105> "
    02cd : f808 ; -- <0106> pop rtna -- end_func
    02ce : fc00 ; -- <0106> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x02cf
    02cf : 203e ; -- <0108> push rtna -- func set_plan_run_cmd
    02d0 : 4e00 ; -- <0109> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02d1 : 5290 ; -- <0109> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02d2 : f811 ; -- <0109> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02d3 : f812 ; -- <0109> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02d4 : fc00 ; -- <0110> swapra = nop
    02d5 : fba0 ; -- <0111> call :init_plan_run
    02d6 : 040f ; -- <0111> "
    02d7 : fc00 ; -- <0111> "
    02d8 : f808 ; -- <0112> pop rtna -- end_func
    02d9 : fc00 ; -- <0112> swapra = nop

-- ######## func set_plan_learn_cmd -- = 0x02da
    02da : 203e ; -- <0114> push rtna -- func set_plan_learn_cmd
    02db : 4e00 ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    02dc : 5290 ; -- <0115> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    02dd : f811 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    02de : f812 ; -- <0115> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    02df : fc00 ; -- <0116> swapra = nop
    02e0 : fba0 ; -- <0117> call :init_plan_learn_stoich
    02e1 : 048e ; -- <0117> "
    02e2 : fc00 ; -- <0117> "
    02e3 : f808 ; -- <0118> pop rtna -- end_func
    02e4 : fc00 ; -- <0118> swapra = nop


-- :plan_name_stop -- = 0x02e5
-- "STP\x0"
    02e5 : 5453 ; -- <0002> TS
    02e6 : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x02e7
    02e7 : 203e ; -- <0004> push rtna -- func init_plan_stop
-- set up the stop plan.
    02e8 : fba0 ; -- <0006> call :clear_ign_history
    02e9 : 0656 ; -- <0006> "
    02ea : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    02eb : 4e00 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    02ec : 5284 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 132
    02ed : 47a0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    02ee : 025b ; -- <0008> "
    02ef : 4e00 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    02f0 : 5286 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    02f1 : 47a0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    02f2 : 36b0 ; -- <0009> "
    02f3 : 73a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    02f4 : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    02f5 : 4e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    02f6 : 5292 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    02f7 : 4600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    02f8 : 7600 ; -- <0016> puff_len_us = 0

-- memorize state.
    02f9 : 4e00 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    02fa : 528a ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 138
    02fb : 47a0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    02fc : 02e5 ; -- <0019> "
    02fd : 4e00 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    02fe : 528c ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 140
    02ff : 47a0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    0300 : 030c ; -- <0020> "
    0301 : 4e00 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    0302 : 528e ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 142
    0303 : 47a0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    0304 : 0310 ; -- <0021> "
    0305 : 4e00 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0306 : 5290 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 144
    0307 : 47a0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0308 : 030b ; -- <0022> "
    0309 : f808 ; -- <0023> pop rtna -- end_func
    030a : fc00 ; -- <0023> swapra = nop

-- ######## func destroy_plan_stop -- = 0x030b
    030b : fc00 ; -- <0026> swapra = nop

-- ######## func puff_len_stop -- = 0x030c
    030c : 4e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    030d : 5292 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    030e : 4600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    030f : fc00 ; -- <0030> swapra = nop

-- ######## func leave_stop -- = 0x0310
    0310 : 203e ; -- <0032> push rtna -- func leave_stop
-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    0311 : 001a ; -- <0035> a = power_duty
    0312 : 0680 ; -- <0036> b = $ign_switch_off_mask
    0313 : e403 ; -- <0037> bn and0z :stay
    0314 : 0322 ; -- <0037> "
    0315 : 4e00 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    0316 : 5282 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 130
    0317 : 0011 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0318 : 0012 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0319 : 0608 ; -- <0039> b = ($ign_history_len / 2)
    031a : e006 ; -- <0040> br gt :stay
    031b : 0322 ; -- <0040> "
    031c : fba0 ; -- <0041> call :destroy_plan_stop
    031d : 030b ; -- <0041> "
    031e : fc00 ; -- <0041> "
    031f : fba0 ; -- <0042> call :init_plan_crank
    0320 : 0326 ; -- <0042> "
    0321 : fc00 ; -- <0042> "
-- :stay -- = 0x0322
    0322 : f808 ; -- <0044> pop rtna -- end_func
    0323 : fc00 ; -- <0044> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 5000 to 20000 us length in about 7 seconds.

-- :plan_name_crank -- = 0x0324
-- "CR\x0"
    0324 : 5243 ; -- <0011> RC
    0325 : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x0326
    0326 : 203e ; -- <0013> push rtna -- func init_plan_crank
-- set up the crank plan.
    0327 : 4e00 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    0328 : 5294 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 148
    0329 : 4600 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    032a : 4e00 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    032b : 5284 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 132
    032c : 4657 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    032d : 4e00 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    032e : 5286 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    032f : 47a0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    0330 : 36b0 ; -- <0018> "
    0331 : 73a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    0332 : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    0333 : 4e00 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    0334 : 5292 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 146
    0335 : 47a0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 5000
    0336 : 1388 ; -- <0023> "
    0337 : 77a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    0338 : 1388 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    0339 : fba0 ; -- <0026> call :clear_ign_history
    033a : 0656 ; -- <0026> "
    033b : fc00 ; -- <0026> "

-- memorize state.
    033c : 4e00 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    033d : 528a ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 138
    033e : 47a0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    033f : 0324 ; -- <0029> "
    0340 : 4e00 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    0341 : 528c ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 140
    0342 : 47a0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    0343 : 034f ; -- <0030> "
    0344 : 4e00 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    0345 : 528e ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 142
    0346 : 47a0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    0347 : 036d ; -- <0031> "
    0348 : 4e00 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    0349 : 5290 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 144
    034a : 47a0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    034b : 034e ; -- <0032> "
    034c : f808 ; -- <0033> pop rtna -- end_func
    034d : fc00 ; -- <0033> swapra = nop

-- ######## func destroy_plan_crank -- = 0x034e
    034e : fc00 ; -- <0036> swapra = nop

-- ######## func puff_len_crank -- = 0x034f
    034f : 203e ; -- <0038> push rtna -- func puff_len_crank
    0350 : 4e00 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    0351 : 5294 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 148
    0352 : 0011 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0353 : 0012 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0354 : 060a ; -- <0040> b = $crank_max_puffs
    0355 : e006 ; -- <0041> br gt :puff_limit
    0356 : 0364 ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    0357 : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    0358 : 05dc ; -- <0043> "
    0359 : fba0 ; -- <0044> call :multiply
    035a : 0160 ; -- <0044> "
    035b : fc00 ; -- <0044> "
    035c : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    035d : 1388 ; -- <0045> "
    035e : 4e00 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    035f : 5292 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    0360 : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    0361 : 4700 ; -- <0046> "
    0362 : e00f ; -- <0047> jmp :done
    0363 : 036b ; -- <0047> "
-- :puff_limit -- = 0x0364
-- prevent the puff counter from going higher & eventually rolling over.
    0364 : 4e00 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    0365 : 5294 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 148
    0366 : 460a ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 10
-- accept max puff len.
    0367 : 4e00 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    0368 : 5292 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 146
    0369 : 47a0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    036a : 4e20 ; -- <0052> "
-- :done -- = 0x036b
    036b : f808 ; -- <0054> pop rtna -- end_func
    036c : fc00 ; -- <0054> swapra = nop

-- ######## func leave_crank -- = 0x036d
    036d : 203e ; -- <0056> push rtna -- func leave_crank
    036e : fba0 ; -- <0057> call :check_engine_stop
    036f : 0945 ; -- <0057> "
    0370 : fc00 ; -- <0057> "
    0371 : e400 ; -- <0058> bn az :done
    0372 : 0387 ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    0373 : 4e00 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0374 : 5280 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 128
    0375 : 0011 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0376 : 0012 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    0377 : e000 ; -- <0062> br az :stay
    0378 : 0387 ; -- <0062> "
    0379 : 4e00 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    037a : 527e ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 126
    037b : 0011 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    037c : 0012 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    037d : 07a0 ; -- <0064> b = $crank_success_rpm
    037e : 0320 ; -- <0064> "
    037f : e005 ; -- <0065> br lt :stay
    0380 : 0387 ; -- <0065> "
    0381 : fba0 ; -- <0066> call :destroy_plan_crank
    0382 : 034e ; -- <0066> "
    0383 : fc00 ; -- <0066> "
    0384 : fba0 ; -- <0067> call :init_plan_warmup
    0385 : 038b ; -- <0067> "
    0386 : fc00 ; -- <0067> "
-- :stay -- = 0x0387

-- :done -- = 0x0387
    0387 : f808 ; -- <0071> pop rtna -- end_func
    0388 : fc00 ; -- <0071> swapra = nop



-- 0x4c0 = 1216 = 120 degF at the sensor location outside the engine block.
-- 750 = 0 degF.
-- max 6000 & min 4500 over a temp range 750 to 0x4c0 gives 6900 us puff at 74 deg F.  program rev 594.
-- this is used if the engine temp is unavailable.

-- :plan_name_warmup -- = 0x0389
-- "WM\x0"
    0389 : 4d57 ; -- <0016> MW
    038a : 0000 ; -- <0016>   

-- ######## func init_plan_warmup -- = 0x038b
-- set up the warmup plan.
    038b : 4e00 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    038c : 5214 ; -- <0020> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    038d : 0011 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    038e : 0012 ; -- <0020> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    038f : 063c ; -- <0021> b = $warmup_timeout_sec
    0390 : 4e00 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_hi = 0
    0391 : 5298 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_ad_lo = 152
    0392 : c800 ; -- <0022> ram $ram_warmup_timeout_at_pass = a+b -- av_write_data = a+b
    0393 : 4700 ; -- <0022> "

-- memorize state.
    0394 : 4e00 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_hi = 0
    0395 : 528a ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_ad_lo = 138
    0396 : 47a0 ; -- <0025> ram $ram_plan_name = :plan_name_warmup -- av_write_data = :plan_name_warmup
    0397 : 0389 ; -- <0025> "
    0398 : 4e00 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_hi = 0
    0399 : 528c ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_ad_lo = 140
    039a : 47a0 ; -- <0026> ram $ram_puff_len_func = :puff_len_warmup -- av_write_data = :puff_len_warmup
    039b : 03a6 ; -- <0026> "
    039c : 4e00 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_hi = 0
    039d : 528e ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_ad_lo = 142
    039e : 47a0 ; -- <0027> ram $ram_transition_func = :leave_warmup -- av_write_data = :leave_warmup
    039f : 03d8 ; -- <0027> "
    03a0 : 4e00 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_hi = 0
    03a1 : 5290 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_ad_lo = 144
    03a2 : 47a0 ; -- <0028> ram $ram_destroy_plan_func = :destroy_plan_warmup -- av_write_data = :destroy_plan_warmup
    03a3 : 03a5 ; -- <0028> "
    03a4 : fc00 ; -- <0029> swapra = nop

-- ######## func destroy_plan_warmup -- = 0x03a5
    03a5 : fc00 ; -- <0032> swapra = nop

-- ######## func puff_len_warmup -- = 0x03a6
    03a6 : 2004 ; -- <0034> push x -- func puff_len_warmup
    03a7 : 203e ; -- <0034> push rtna -- "
-- x = enrichment us.
    03a8 : 13a0 ; -- <0036> x = $warmup_limping_enrichment_us
    03a9 : 07d0 ; -- <0036> "

-- check engine block temp sensor.  if valid, enrich by a linear function:
-- {warmup_min_temp_adc...warmup_success_temp_adc} -> {$warmup_max_enrichment_us...0}
    03aa : 0202 ; -- <0040> a = $anmux_engine_block_temp

    03ab : 0351 ; -- <0041> a = a<<1
    03ac : 0618 ; -- <0041> b = 24
    03ad : 4e00 ; -- <0041> av_ad_hi = 0
    03ae : 5300 ; -- <0041> av_ad_lo = ad0
    03af : 0411 ; -- <0041> b = av_write_data
    03b0 : 0412 ; -- <0041> b = av_read_data

-- b = sensor reading in adc counts.
    03b1 : 03a0 ; -- <0043> a = $temp_ceiling_adc
    03b2 : 0ff0 ; -- <0043> "
    03b3 : e005 ; -- <0044> br lt :temp_invalid
    03b4 : 03ce ; -- <0044> "
    03b5 : 03a0 ; -- <0045> a = $warmup_success_temp_adc
    03b6 : 04c0 ; -- <0045> "
    03b7 : e005 ; -- <0046> br lt :too_warm
    03b8 : 03ce ; -- <0046> "
    03b9 : 03a0 ; -- <0047> a = $warmup_min_temp_adc
    03ba : 02ee ; -- <0047> "
    03bb : e005 ; -- <0048> br lt :in_range
    03bc : 03bf ; -- <0048> "
    03bd : 07a0 ; -- <0049> b = $warmup_min_temp_adc
    03be : 02ee ; -- <0049> "
-- :in_range -- = 0x03bf
-- negate the sensor reading so as to subtract it from warmup_success_temp_adc.
    03bf : 0360 ; -- <0052> a = 0xffff
    03c0 : c800 ; -- <0053> b = xor
    03c1 : 0738 ; -- <0053> "
    03c2 : 0201 ; -- <0054> a = 1
    03c3 : c800 ; -- <0055> b = a+b
    03c4 : 0700 ; -- <0055> "
    03c5 : 03a0 ; -- <0056> a = $warmup_success_temp_adc
    03c6 : 04c0 ; -- <0056> "
    03c7 : c800 ; -- <0057> b = a+b
    03c8 : 0700 ; -- <0057> "
-- b = how many counts "cold" we are.  multiply that by the slope warmup_us_per_cold_adc.
    03c9 : 020c ; -- <0059> a = $warmup_us_per_cold_adc
    03ca : fba0 ; -- <0060> call :multiply
    03cb : 0160 ; -- <0060> "
    03cc : fc00 ; -- <0060> "
    03cd : 1000 ; -- <0061> x = a
-- :too_warm -- = 0x03ce
-- :temp_invalid -- = 0x03ce

-- apply total of base amount and enrichment.
-- $warmup_min_puff_len_us <= total <= ($warmup_min_puff_len_us + $warmup_max_enrichment_us)
    03ce : 03a0 ; -- <0067> a = $warmup_min_puff_len_us
    03cf : 09c4 ; -- <0067> "
    03d0 : 0404 ; -- <0068> b = x
    03d1 : 4e00 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    03d2 : 5292 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    03d3 : c800 ; -- <0069> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    03d4 : 4700 ; -- <0069> "
    03d5 : f808 ; -- <0070> pop rtna -- end_func
    03d6 : 1008 ; -- <0070> pop x -- "
    03d7 : fc00 ; -- <0070> swapra = nop

-- ######## func leave_warmup -- = 0x03d8
    03d8 : 203e ; -- <0072> push rtna -- func leave_warmup
    03d9 : fba0 ; -- <0073> call :check_engine_stop
    03da : 0945 ; -- <0073> "
    03db : fc00 ; -- <0073> "
    03dc : e400 ; -- <0074> bn az :done
    03dd : 040b ; -- <0074> "

-- transition to plan_run if warmup has expired.
    03de : 4e00 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    03df : 5214 ; -- <0077> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    03e0 : 0011 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    03e1 : 0012 ; -- <0077> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    03e2 : 4e00 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_hi = 0
    03e3 : 5298 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- av_ad_lo = 152
    03e4 : 0411 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_write_data -- start read cycle
    03e5 : 0412 ; -- <0078> ram b = $ram_warmup_timeout_at_pass -- b = av_read_data -- finish read cycle

    03e6 : 0000 ; -- <0083> a = a
    03e7 : 0401 ; -- <0083> b = b


    03e8 : e406 ; -- <0083> bn gt :else_1000
    03e9 : 03f2 ; -- <0083> "

    03ea : fba0 ; -- <0083> call :destroy_plan_warmup
    03eb : 03a5 ; -- <0083> "
    03ec : fc00 ; -- <0083> "
    03ed : fba0 ; -- <0083> call :init_plan_run
    03ee : 040f ; -- <0083> "
    03ef : fc00 ; -- <0083> "
    03f0 : e00f ; -- <0083> jmp :done
    03f1 : 040b ; -- <0083> "


-- :else_1000 -- = 0x03f2

-- :end_1000 -- = 0x03f2


-- transition to plan_run if engine block temp sensor is valid, and temp
-- exceeds warmup_success_temp_adc.
    03f2 : 0202 ; -- <0087> a = $anmux_engine_block_temp

    03f3 : 0351 ; -- <0088> a = a<<1
    03f4 : 0618 ; -- <0088> b = 24
    03f5 : 4e00 ; -- <0088> av_ad_hi = 0
    03f6 : 5300 ; -- <0088> av_ad_lo = ad0
    03f7 : 0411 ; -- <0088> b = av_write_data
    03f8 : 0412 ; -- <0088> b = av_read_data

    03f9 : 03a0 ; -- <0089> a = $temp_ceiling_adc
    03fa : 0ff0 ; -- <0089> "

    03fb : 0000 ; -- <0096> a = a
    03fc : 0401 ; -- <0096> b = b


    03fd : e406 ; -- <0096> bn gt :else_1021
    03fe : 040b ; -- <0096> "

    03ff : 03a0 ; -- <0096> a = $warmup_success_temp_adc
    0400 : 04c0 ; -- <0096> "

    0401 : 0000 ; -- <0096> a = a
    0402 : 0401 ; -- <0096> b = b


    0403 : e405 ; -- <0096> bn lt :else_1027
    0404 : 040b ; -- <0096> "

    0405 : fba0 ; -- <0096> call :destroy_plan_warmup
    0406 : 03a5 ; -- <0096> "
    0407 : fc00 ; -- <0096> "
    0408 : fba0 ; -- <0096> call :init_plan_run
    0409 : 040f ; -- <0096> "
    040a : fc00 ; -- <0096> "


-- :else_1027 -- = 0x040b

-- :end_1027 -- = 0x040b



-- :else_1021 -- = 0x040b

-- :end_1021 -- = 0x040b


-- :done -- = 0x040b
    040b : f808 ; -- <0099> pop rtna -- end_func
    040c : fc00 ; -- <0099> swapra = nop


-- :plan_name_run -- = 0x040d
-- "RN\x0"
    040d : 4e52 ; -- <0002> NR
    040e : 0000 ; -- <0002>   

-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed, by about 1000 us per second.



-- ######## func init_plan_run -- = 0x040f
-- set up the run plan.

-- memorize state.
    040f : 4e00 ; -- <0021> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    0410 : 528a ; -- <0021> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 138
    0411 : 47a0 ; -- <0021> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    0412 : 040d ; -- <0021> "
    0413 : 4e00 ; -- <0022> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    0414 : 528c ; -- <0022> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 140
    0415 : 47a0 ; -- <0022> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    0416 : 0421 ; -- <0022> "
    0417 : 4e00 ; -- <0023> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    0418 : 528e ; -- <0023> ram $ram_transition_func = :leave_run -- av_ad_lo = 142
    0419 : 47a0 ; -- <0023> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    041a : 045c ; -- <0023> "
    041b : 4e00 ; -- <0024> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    041c : 5290 ; -- <0024> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 144
    041d : 47a0 ; -- <0024> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    041e : 0420 ; -- <0024> "
    041f : fc00 ; -- <0025> swapra = nop

-- ######## func destroy_plan_run -- = 0x0420
    0420 : fc00 ; -- <0028> swapra = nop

-- ######## func puff_len_run -- = 0x0421
    0421 : 2002 ; -- <0030> push i -- func puff_len_run
    0422 : 2003 ; -- <0030> push j -- "
    0423 : 4e00 ; -- <0031> ram i = $ram_run_ticks_remain -- av_ad_hi = 0
    0424 : 529a ; -- <0031> ram i = $ram_run_ticks_remain -- av_ad_lo = 154
    0425 : 0811 ; -- <0031> ram i = $ram_run_ticks_remain -- i = av_write_data -- start read cycle
    0426 : 0812 ; -- <0031> ram i = $ram_run_ticks_remain -- i = av_read_data -- finish read cycle

    0427 : 0002 ; -- <0055> a = i
    0428 : 0600 ; -- <0055> b = 0


    0429 : e406 ; -- <0055> bn gt :else_1065
    042a : 0432 ; -- <0055> "

    042b : 0f60 ; -- <0055> j = -1
    042c : 4e00 ; -- <0055> ram $ram_run_ticks_remain = i+j -- av_ad_hi = 0
    042d : 529a ; -- <0055> ram $ram_run_ticks_remain = i+j -- av_ad_lo = 154
    042e : c800 ; -- <0055> ram $ram_run_ticks_remain = i+j -- av_write_data = i+j
    042f : 4710 ; -- <0055> "

    0430 : e00f ; -- <0055> jmp :end_1065
    0431 : 0459 ; -- <0055> "
-- :else_1065 -- = 0x0432

    0432 : 4e00 ; -- <0055> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_ad_hi = 0
    0433 : 529a ; -- <0055> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_ad_lo = 154
    0434 : 460a ; -- <0055> ram $ram_run_ticks_remain = $run_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    0435 : 4e00 ; -- <0055> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    0436 : 5292 ; -- <0055> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    0437 : 0811 ; -- <0055> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    0438 : 0812 ; -- <0055> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    0439 : 0e00 ; -- <0055> j = 0
    043a : 0205 ; -- <0055> a = $o2_adc_channel

    043b : 0351 ; -- <0055> a = a<<1
    043c : 0628 ; -- <0055> b = 40
    043d : 4e00 ; -- <0055> av_ad_hi = 0
    043e : 5300 ; -- <0055> av_ad_lo = ad0
    043f : 0411 ; -- <0055> b = av_write_data
    0440 : 0412 ; -- <0055> b = av_read_data


    0441 : 0001 ; -- <0055> a = b
    0442 : 07a0 ; -- <0055> b = 588
    0443 : 024c ; -- <0055> "


    0444 : e405 ; -- <0055> bn lt :else_1092
    0445 : 044e ; -- <0055> "

-- sensing a lean condition.  trim up to enrich.

    0446 : 0002 ; -- <0055> a = i
    0447 : 07a0 ; -- <0055> b = 10000
    0448 : 2710 ; -- <0055> "


    0449 : e405 ; -- <0055> bn lt :else_1097
    044a : 044c ; -- <0055> "

    044b : 0ec8 ; -- <0055> j = $run_puff_step_up_us


-- :else_1097 -- = 0x044c

-- :end_1097 -- = 0x044c


    044c : e00f ; -- <0055> jmp :end_1092
    044d : 0455 ; -- <0055> "
-- :else_1092 -- = 0x044e

-- sensing a rich condition.  trim down to lean it out.

    044e : 0002 ; -- <0055> a = i
    044f : 07a0 ; -- <0055> b = 2000
    0450 : 07d0 ; -- <0055> "


    0451 : e406 ; -- <0055> bn gt :else_1105
    0452 : 0455 ; -- <0055> "

    0453 : 0fa0 ; -- <0055> j = $run_puff_step_down_us
    0454 : ff9b ; -- <0055> "


-- :else_1105 -- = 0x0455

-- :end_1105 -- = 0x0455


-- :end_1092 -- = 0x0455

    0455 : 4e00 ; -- <0055> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    0456 : 5292 ; -- <0055> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 146
    0457 : c800 ; -- <0055> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    0458 : 4710 ; -- <0055> "

-- :end_1065 -- = 0x0459

    0459 : 0c08 ; -- <0056> pop j -- end_func
    045a : 0808 ; -- <0056> pop i -- "
    045b : fc00 ; -- <0056> swapra = nop

-- ######## func leave_run -- = 0x045c
    045c : 203e ; -- <0058> push rtna -- func leave_run
    045d : fba0 ; -- <0059> call :check_engine_stop
    045e : 0945 ; -- <0059> "
    045f : fc00 ; -- <0059> "
    0460 : f808 ; -- <0060> pop rtna -- end_func
    0461 : fc00 ; -- <0060> swapra = nop



-- :rpm_cells -- = 0x0462
    0462 : 01f4 ; -- <0004> 500
    0463 : 0271 ; -- <0005> 625
    0464 : 030d ; -- <0006> 781
    0465 : 03d1 ; -- <0007> 977
    0466 : 04c5 ; -- <0008> 1221
    0467 : 05f6 ; -- <0009> 1526
    0468 : 0773 ; -- <0010> 1907
    0469 : 0950 ; -- <0011> 2384
    046a : 0ba4 ; -- <0012> 2980
    046b : 0e8d ; -- <0013> 3725
    046c : 1231 ; -- <0014> 4657
    046d : 16bd ; -- <0015> 5821
    046e : 1c6c ; -- <0016> 7276
    046f : ffff ; -- <0017> 0xffff


-- trim puff length by o2 sensor every 200 ms.

-- trim puff length as needed.

-- o2 sensor interpetation & state machine.

-- ######## func find_rpm_cell -- = 0x0470
    0470 : 2002 ; -- <0042> push i -- func find_rpm_cell
    0471 : 2003 ; -- <0042> push j -- "
    0472 : 2005 ; -- <0042> push y -- "
    0473 : 1400 ; -- <0043> y = a
    0474 : 0a01 ; -- <0044> i = 1
    0475 : 0760 ; -- <0045> b = 0xffff
    0476 : e007 ; -- <0046> br eq :found
    0477 : 0485 ; -- <0046> "
-- :next_cell -- = 0x0478
    0478 : 0fa0 ; -- <0048> j = :rpm_cells
    0479 : 0462 ; -- <0048> "
    047a : c800 ; -- <0049> fetch a from i+j
    047b : d310 ; -- <0049> "
    047c : 03b0 ; -- <0049> "
    047d : 0405 ; -- <0050> b = y
    047e : e006 ; -- <0051> br gt :found
    047f : 0485 ; -- <0051> "
    0480 : 0e01 ; -- <0052> j = 1
    0481 : c800 ; -- <0053> i = i+j
    0482 : 0b10 ; -- <0053> "
    0483 : e00f ; -- <0054> jmp :next_cell
    0484 : 0478 ; -- <0054> "
-- :found -- = 0x0485
    0485 : 0f60 ; -- <0056> j = -1
    0486 : c800 ; -- <0057> a = i+j
    0487 : 0310 ; -- <0057> "
    0488 : 1408 ; -- <0058> pop y -- end_func
    0489 : 0c08 ; -- <0058> pop j -- "
    048a : 0808 ; -- <0058> pop i -- "
    048b : fc00 ; -- <0058> swapra = nop

-- :plan_name_learn_stoich -- = 0x048c
-- "LN\x0"
    048c : 4e4c ; -- <0061> NL
    048d : 0000 ; -- <0061>   

-- ######## func init_plan_learn_stoich -- = 0x048e
-- set up the learn_stoich plan.

-- memorize state.
    048e : 4e00 ; -- <0067> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_hi = 0
    048f : 528a ; -- <0067> ram $ram_plan_name = :plan_name_learn_stoich -- av_ad_lo = 138
    0490 : 47a0 ; -- <0067> ram $ram_plan_name = :plan_name_learn_stoich -- av_write_data = :plan_name_learn_stoich
    0491 : 048c ; -- <0067> "
    0492 : 4e00 ; -- <0068> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_hi = 0
    0493 : 528c ; -- <0068> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_ad_lo = 140
    0494 : 47a0 ; -- <0068> ram $ram_puff_len_func = :puff_len_learn_stoich -- av_write_data = :puff_len_learn_stoich
    0495 : 04a0 ; -- <0068> "
    0496 : 4e00 ; -- <0069> ram $ram_transition_func = :leave_learn_stoich -- av_ad_hi = 0
    0497 : 528e ; -- <0069> ram $ram_transition_func = :leave_learn_stoich -- av_ad_lo = 142
    0498 : 47a0 ; -- <0069> ram $ram_transition_func = :leave_learn_stoich -- av_write_data = :leave_learn_stoich
    0499 : 057e ; -- <0069> "
    049a : 4e00 ; -- <0070> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_hi = 0
    049b : 5290 ; -- <0070> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_ad_lo = 144
    049c : 47a0 ; -- <0070> ram $ram_destroy_plan_func = :destroy_plan_learn_stoich -- av_write_data = :destroy_plan_learn_stoich
    049d : 049f ; -- <0070> "
    049e : fc00 ; -- <0071> swapra = nop

-- ######## func destroy_plan_learn_stoich -- = 0x049f
    049f : fc00 ; -- <0074> swapra = nop


-- ######## func puff_len_learn_stoich -- = 0x04a0
    04a0 : 2002 ; -- <0077> push i -- func puff_len_learn_stoich
    04a1 : 2003 ; -- <0077> push j -- "
    04a2 : 2006 ; -- <0077> push g6 -- "
    04a3 : 2007 ; -- <0077> push g7 -- "
    04a4 : 203e ; -- <0077> push rtna -- "
    04a5 : 4e00 ; -- <0078> ram i = $ram_lrns_ticks_remain -- av_ad_hi = 0
    04a6 : 52b6 ; -- <0078> ram i = $ram_lrns_ticks_remain -- av_ad_lo = 182
    04a7 : 0811 ; -- <0078> ram i = $ram_lrns_ticks_remain -- i = av_write_data -- start read cycle
    04a8 : 0812 ; -- <0078> ram i = $ram_lrns_ticks_remain -- i = av_read_data -- finish read cycle

    04a9 : 0002 ; -- <0107> a = i
    04aa : 0600 ; -- <0107> b = 0


    04ab : e406 ; -- <0107> bn gt :else_1195
    04ac : 04b4 ; -- <0107> "

    04ad : 0f60 ; -- <0107> j = -1
    04ae : 4e00 ; -- <0107> ram $ram_lrns_ticks_remain = i+j -- av_ad_hi = 0
    04af : 52b6 ; -- <0107> ram $ram_lrns_ticks_remain = i+j -- av_ad_lo = 182
    04b0 : c800 ; -- <0107> ram $ram_lrns_ticks_remain = i+j -- av_write_data = i+j
    04b1 : 4710 ; -- <0107> "

    04b2 : e00f ; -- <0107> jmp :end_1195
    04b3 : 04e6 ; -- <0107> "
-- :else_1195 -- = 0x04b4

    04b4 : 4e00 ; -- <0107> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_hi = 0
    04b5 : 52b6 ; -- <0107> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_ad_lo = 182
    04b6 : 460a ; -- <0107> ram $ram_lrns_ticks_remain = $lrns_ticks_per_o2_trim -- av_write_data = 10

-- i = old puff length, j = puff length increment.
    04b7 : 4e00 ; -- <0107> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    04b8 : 5292 ; -- <0107> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    04b9 : 0811 ; -- <0107> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    04ba : 0812 ; -- <0107> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    04bb : 0e00 ; -- <0107> j = 0
    04bc : 4e00 ; -- <0107> ram g6 = $ram_o2_state -- av_ad_hi = 0
    04bd : 52b8 ; -- <0107> ram g6 = $ram_o2_state -- av_ad_lo = 184
    04be : 1811 ; -- <0107> ram g6 = $ram_o2_state -- g6 = av_write_data -- start read cycle
    04bf : 1812 ; -- <0107> ram g6 = $ram_o2_state -- g6 = av_read_data -- finish read cycle
    04c0 : fba0 ; -- <0107> call :interpret_o2
    04c1 : 0541 ; -- <0107> "
    04c2 : fc00 ; -- <0107> "
    04c3 : 4e00 ; -- <0107> ram g7 = $ram_o2_state -- av_ad_hi = 0
    04c4 : 52b8 ; -- <0107> ram g7 = $ram_o2_state -- av_ad_lo = 184
    04c5 : 1c11 ; -- <0107> ram g7 = $ram_o2_state -- g7 = av_write_data -- start read cycle
    04c6 : 1c12 ; -- <0107> ram g7 = $ram_o2_state -- g7 = av_read_data -- finish read cycle

    04c7 : 0007 ; -- <0107> a = g7
    04c8 : 0601 ; -- <0107> b = 1


    04c9 : e407 ; -- <0107> bn eq :else_1225
    04ca : 04db ; -- <0107> "

-- sensing a lean condition.  trim up to enrich.

    04cb : 0002 ; -- <0107> a = i
    04cc : 07a0 ; -- <0107> b = 10000
    04cd : 2710 ; -- <0107> "


    04ce : e405 ; -- <0107> bn lt :else_1230
    04cf : 04d2 ; -- <0107> "

    04d0 : 0fa0 ; -- <0107> j = $lrns_puff_step_up_us
    04d1 : 03e8 ; -- <0107> "


-- :else_1230 -- = 0x04d2

-- :end_1230 -- = 0x04d2


    04d2 : 0006 ; -- <0107> a = g6
    04d3 : 0602 ; -- <0107> b = 2


    04d4 : e407 ; -- <0107> bn eq :else_1236
    04d5 : 04d9 ; -- <0107> "

-- o2 state just switched to lean.  adjust map.
    04d6 : fba0 ; -- <0107> call :learn_smap
    04d7 : 04f2 ; -- <0107> "
    04d8 : fc00 ; -- <0107> "


-- :else_1236 -- = 0x04d9

-- :end_1236 -- = 0x04d9


    04d9 : e00f ; -- <0107> jmp :end_1225
    04da : 04e2 ; -- <0107> "
-- :else_1225 -- = 0x04db

-- sensing a rich condition.  trim down to lean it out.

    04db : 0002 ; -- <0107> a = i
    04dc : 07a0 ; -- <0107> b = 2000
    04dd : 07d0 ; -- <0107> "


    04de : e406 ; -- <0107> bn gt :else_1246
    04df : 04e2 ; -- <0107> "

    04e0 : 0fa0 ; -- <0107> j = $lrns_puff_step_down_us
    04e1 : ff9b ; -- <0107> "


-- :else_1246 -- = 0x04e2

-- :end_1246 -- = 0x04e2


-- :end_1225 -- = 0x04e2

    04e2 : 4e00 ; -- <0107> ram $ram_next_puff_len_us = i+j -- av_ad_hi = 0
    04e3 : 5292 ; -- <0107> ram $ram_next_puff_len_us = i+j -- av_ad_lo = 146
    04e4 : c800 ; -- <0107> ram $ram_next_puff_len_us = i+j -- av_write_data = i+j
    04e5 : 4710 ; -- <0107> "

-- :end_1195 -- = 0x04e6

    04e6 : f808 ; -- <0108> pop rtna -- end_func
    04e7 : 1c08 ; -- <0108> pop g7 -- "
    04e8 : 1808 ; -- <0108> pop g6 -- "
    04e9 : 0c08 ; -- <0108> pop j -- "
    04ea : 0808 ; -- <0108> pop i -- "
    04eb : fc00 ; -- <0108> swapra = nop

-- :lrns_enrich_msg -- = 0x04ec
-- "lrnR\x0"
    04ec : 726c ; -- <0111> rl
    04ed : 526e ; -- <0111> Rn
    04ee : 0000 ; -- <0111>   
-- :lrns_lean_msg -- = 0x04ef
-- "lrnL\x0"
    04ef : 726c ; -- <0113> rl
    04f0 : 4c6e ; -- <0113> Ln
    04f1 : 0000 ; -- <0113>   

-- ######## func learn_smap -- = 0x04f2
    04f2 : 2002 ; -- <0115> push i -- func learn_smap
    04f3 : 2004 ; -- <0115> push x -- "
    04f4 : 2005 ; -- <0115> push y -- "
    04f5 : 2006 ; -- <0115> push g6 -- "
    04f6 : 203e ; -- <0115> push rtna -- "
    04f7 : 4e00 ; -- <0116> ram a = $ram_rpm_valid -- av_ad_hi = 0
    04f8 : 5280 ; -- <0116> ram a = $ram_rpm_valid -- av_ad_lo = 128
    04f9 : 0011 ; -- <0116> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    04fa : 0012 ; -- <0116> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    04fb : 0000 ; -- <0143> a = a
    04fc : 0601 ; -- <0143> b = 1


    04fd : e407 ; -- <0143> bn eq :else_1277
    04fe : 053b ; -- <0143> "

-- let g6 = map cell num.  x = map puff len.  i = observed stoich puff len.
    04ff : 4e00 ; -- <0143> ram a = $ram_avg_rpm -- av_ad_hi = 0
    0500 : 527e ; -- <0143> ram a = $ram_avg_rpm -- av_ad_lo = 126
    0501 : 0011 ; -- <0143> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    0502 : 0012 ; -- <0143> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    0503 : fba0 ; -- <0143> call :find_rpm_cell
    0504 : 0470 ; -- <0143> "
    0505 : fc00 ; -- <0143> "
    0506 : 1800 ; -- <0143> g6 = a

    0507 : 0351 ; -- <0143> a = a<<1
    0508 : 069c ; -- <0143> b = 156
    0509 : 4e00 ; -- <0143> av_ad_hi = 0
    050a : 5300 ; -- <0143> av_ad_lo = ad0
    050b : 0411 ; -- <0143> b = av_write_data
    050c : 0412 ; -- <0143> b = av_read_data

    050d : 1001 ; -- <0143> x = b
    050e : 4e00 ; -- <0143> ram i = $ram_next_puff_len_us -- av_ad_hi = 0
    050f : 5292 ; -- <0143> ram i = $ram_next_puff_len_us -- av_ad_lo = 146
    0510 : 0811 ; -- <0143> ram i = $ram_next_puff_len_us -- i = av_write_data -- start read cycle
    0511 : 0812 ; -- <0143> ram i = $ram_next_puff_len_us -- i = av_read_data -- finish read cycle
    0512 : 17a0 ; -- <0143> y = (0xffff - $lrns_map_step + 1)
    0513 : ff38 ; -- <0143> "

    0514 : c800 ; -- <0143> a = x+y
    0515 : 0320 ; -- <0143> "
    0516 : 0402 ; -- <0143> b = i


    0517 : e406 ; -- <0143> bn gt :else_1303
    0518 : 0527 ; -- <0143> "

-- map is richer than observed stoich.  lean the map 1 step.
    0519 : 0006 ; -- <0143> a = g6
    051a : c800 ; -- <0143> b = x+y
    051b : 0720 ; -- <0143> "

    051c : 0351 ; -- <0143> a = a<<1
    051d : 2001 ; -- <0143> push b -- push b
    051e : 069c ; -- <0143> b = 156
    051f : 4e00 ; -- <0143> av_ad_hi = 0
    0520 : 5300 ; -- <0143> av_ad_lo = ad0
    0521 : 4408 ; -- <0143> pop av_write_data -- pop av_write_data

    0522 : 03a0 ; -- <0143> a = :lrns_enrich_msg
    0523 : 04ec ; -- <0143> "
    0524 : fba0 ; -- <0143> call :set_text_flag
    0525 : 08e1 ; -- <0143> "
    0526 : fc00 ; -- <0143> "


-- :else_1303 -- = 0x0527

-- :end_1303 -- = 0x0527

    0527 : 16c8 ; -- <0143> y = $lrns_map_step

    0528 : c800 ; -- <0143> a = x+y
    0529 : 0320 ; -- <0143> "
    052a : 0402 ; -- <0143> b = i


    052b : e405 ; -- <0143> bn lt :else_1323
    052c : 053b ; -- <0143> "

-- map is leaner than observed stoich.  rich the map 1 step.
    052d : 0006 ; -- <0143> a = g6
    052e : c800 ; -- <0143> b = x+y
    052f : 0720 ; -- <0143> "

    0530 : 0351 ; -- <0143> a = a<<1
    0531 : 2001 ; -- <0143> push b -- push b
    0532 : 069c ; -- <0143> b = 156
    0533 : 4e00 ; -- <0143> av_ad_hi = 0
    0534 : 5300 ; -- <0143> av_ad_lo = ad0
    0535 : 4408 ; -- <0143> pop av_write_data -- pop av_write_data

    0536 : 03a0 ; -- <0143> a = :lrns_lean_msg
    0537 : 04ef ; -- <0143> "
    0538 : fba0 ; -- <0143> call :set_text_flag
    0539 : 08e1 ; -- <0143> "
    053a : fc00 ; -- <0143> "


-- :else_1323 -- = 0x053b

-- :end_1323 -- = 0x053b



-- :else_1277 -- = 0x053b

-- :end_1277 -- = 0x053b

    053b : f808 ; -- <0144> pop rtna -- end_func
    053c : 1808 ; -- <0144> pop g6 -- "
    053d : 1408 ; -- <0144> pop y -- "
    053e : 1008 ; -- <0144> pop x -- "
    053f : 0808 ; -- <0144> pop i -- "
    0540 : fc00 ; -- <0144> swapra = nop

-- ######## func interpret_o2 -- = 0x0541
    0541 : 4e00 ; -- <0147> ram a = $ram_o2_state -- av_ad_hi = 0
    0542 : 52b8 ; -- <0147> ram a = $ram_o2_state -- av_ad_lo = 184
    0543 : 0011 ; -- <0147> ram a = $ram_o2_state -- a = av_write_data -- start read cycle
    0544 : 0012 ; -- <0147> ram a = $ram_o2_state -- a = av_read_data -- finish read cycle

    0545 : 0000 ; -- <0157> a = a
    0546 : 0601 ; -- <0157> b = 1


    0547 : e007 ; -- <0157> br eq :else_1351
    0548 : 055c ; -- <0157> "

-- check sensor for lean state.
    0549 : 0205 ; -- <0157> a = $o2_adc_channel

    054a : 0351 ; -- <0157> a = a<<1
    054b : 0628 ; -- <0157> b = 40
    054c : 4e00 ; -- <0157> av_ad_hi = 0
    054d : 5300 ; -- <0157> av_ad_lo = ad0
    054e : 0411 ; -- <0157> b = av_write_data
    054f : 0412 ; -- <0157> b = av_read_data

    0550 : 03a0 ; -- <0157> a = $o2_lean_thresh_adc
    0551 : 01c2 ; -- <0157> "

    0552 : 0000 ; -- <0157> a = a
    0553 : 0401 ; -- <0157> b = b


    0554 : e406 ; -- <0157> bn gt :else_1364
    0555 : 055c ; -- <0157> "

    0556 : 4e00 ; -- <0157> ram $ram_o2_state = $o2_state_lean -- av_ad_hi = 0
    0557 : 52b8 ; -- <0157> ram $ram_o2_state = $o2_state_lean -- av_ad_lo = 184
    0558 : 4601 ; -- <0157> ram $ram_o2_state = $o2_state_lean -- av_write_data = 1
    0559 : 4e00 ; -- <0157> ram $ram_o2_been_lean = 1 -- av_ad_hi = 0
    055a : 52bc ; -- <0157> ram $ram_o2_been_lean = 1 -- av_ad_lo = 188
    055b : 4601 ; -- <0157> ram $ram_o2_been_lean = 1 -- av_write_data = 1


-- :else_1364 -- = 0x055c

-- :end_1364 -- = 0x055c



-- :else_1351 -- = 0x055c

-- :end_1351 -- = 0x055c


    055c : 0000 ; -- <0167> a = a
    055d : 0602 ; -- <0167> b = 2


    055e : e007 ; -- <0167> br eq :else_1374
    055f : 0573 ; -- <0167> "

-- check sensor for rich state.
    0560 : 0205 ; -- <0167> a = $o2_adc_channel

    0561 : 0351 ; -- <0167> a = a<<1
    0562 : 0628 ; -- <0167> b = 40
    0563 : 4e00 ; -- <0167> av_ad_hi = 0
    0564 : 5300 ; -- <0167> av_ad_lo = ad0
    0565 : 0411 ; -- <0167> b = av_write_data
    0566 : 0412 ; -- <0167> b = av_read_data

    0567 : 03a0 ; -- <0167> a = $o2_rich_thresh_adc
    0568 : 02bc ; -- <0167> "

    0569 : 0000 ; -- <0167> a = a
    056a : 0401 ; -- <0167> b = b


    056b : e406 ; -- <0167> bn gt :else_1387
    056c : 0573 ; -- <0167> "

    056d : 4e00 ; -- <0167> ram $ram_o2_state = $o2_state_rich -- av_ad_hi = 0
    056e : 52b8 ; -- <0167> ram $ram_o2_state = $o2_state_rich -- av_ad_lo = 184
    056f : 4602 ; -- <0167> ram $ram_o2_state = $o2_state_rich -- av_write_data = 2
    0570 : 4e00 ; -- <0167> ram $ram_o2_been_rich = 1 -- av_ad_hi = 0
    0571 : 52ba ; -- <0167> ram $ram_o2_been_rich = 1 -- av_ad_lo = 186
    0572 : 4601 ; -- <0167> ram $ram_o2_been_rich = 1 -- av_write_data = 1


-- :else_1387 -- = 0x0573

-- :end_1387 -- = 0x0573



-- :else_1374 -- = 0x0573

-- :end_1374 -- = 0x0573

    0573 : fc00 ; -- <0168> swapra = nop

-- ######## func init_o2_state -- = 0x0574
    0574 : 4e00 ; -- <0171> ram $ram_o2_state = $o2_state_init -- av_ad_hi = 0
    0575 : 52b8 ; -- <0171> ram $ram_o2_state = $o2_state_init -- av_ad_lo = 184
    0576 : 4600 ; -- <0171> ram $ram_o2_state = $o2_state_init -- av_write_data = 0
    0577 : 4e00 ; -- <0172> ram $ram_o2_been_lean = 0 -- av_ad_hi = 0
    0578 : 52bc ; -- <0172> ram $ram_o2_been_lean = 0 -- av_ad_lo = 188
    0579 : 4600 ; -- <0172> ram $ram_o2_been_lean = 0 -- av_write_data = 0
    057a : 4e00 ; -- <0173> ram $ram_o2_been_rich = 0 -- av_ad_hi = 0
    057b : 52ba ; -- <0173> ram $ram_o2_been_rich = 0 -- av_ad_lo = 186
    057c : 4600 ; -- <0173> ram $ram_o2_been_rich = 0 -- av_write_data = 0
    057d : fc00 ; -- <0174> swapra = nop

-- ######## func leave_learn_stoich -- = 0x057e
    057e : 203e ; -- <0176> push rtna -- func leave_learn_stoich
    057f : fba0 ; -- <0177> call :check_engine_stop
    0580 : 0945 ; -- <0177> "
    0581 : fc00 ; -- <0177> "
    0582 : f808 ; -- <0178> pop rtna -- end_func
    0583 : fc00 ; -- <0178> swapra = nop

-- ######## func clear_smap_cmd -- = 0x0584
    0584 : 2002 ; -- <0180> push i -- func clear_smap_cmd
    0585 : 0a00 ; -- <0185> i = 0
-- :loop_1413 -- = 0x0586

    0586 : 0002 ; -- <0185> a = i
    0587 : 07a0 ; -- <0185> b = 3000
    0588 : 0bb8 ; -- <0185> "

    0589 : 0351 ; -- <0185> a = a<<1
    058a : 2001 ; -- <0185> push b -- push b
    058b : 069c ; -- <0185> b = 156
    058c : 4e00 ; -- <0185> av_ad_hi = 0
    058d : 5300 ; -- <0185> av_ad_lo = ad0
    058e : 4408 ; -- <0185> pop av_write_data -- pop av_write_data



    058f : 0002 ; -- <0185> a = i
    0590 : 0601 ; -- <0185> b = 1
    0591 : c800 ; -- <0185> i = a+b
    0592 : 0b00 ; -- <0185> "


    0593 : 0002 ; -- <0185> a = i
    0594 : 060d ; -- <0185> b = $num_rpm_cells
    0595 : e005 ; -- <0185> br lt :loop_1413
    0596 : 0586 ; -- <0185> "

-- :end_1413 -- = 0x0597
    0597 : 0808 ; -- <0186> pop i -- end_func
    0598 : fc00 ; -- <0186> swapra = nop


-- #########################################################################
-- :main -- = 0x0599
    0599 : 03a0 ; -- <0206> a = :boot_msg
    059a : 007b ; -- <0206> "
    059b : fba0 ; -- <0207> call :print_nt
    059c : 013f ; -- <0207> "
    059d : fc00 ; -- <0207> "

-- clear the first 64k of RAM.
    059e : 4e00 ; -- <0210> av_ad_hi = 0
    059f : fba0 ; -- <0211> call :clear_ram_page
    05a0 : 08d9 ; -- <0211> "
    05a1 : fc00 ; -- <0211> "


-- patch:  HACKED aliases won't produce correct code because they're stackable.
-- ########  -- = 0x05a2
    05a2 : 203e ; -- <0213> push rtna -- 

    05a3 : 0261 ; -- <0213> a = 97 -- putasc "a"
    05a4 : fba0 ; -- <0213> putasc "a"
    05a5 : 008b ; -- <0213> "
    05a6 : fc00 ; -- <0213> "

    05a7 : f808 ; -- <0213> pop rtna -- 
    05a8 : fc00 ; -- <0213> swapra = nop
-- ########  -- = 0x05a9
    05a9 : 203e ; -- <0213> push rtna -- 

    05aa : 0262 ; -- <0213> a = 98 -- putasc "b"
    05ab : fba0 ; -- <0213> putasc "b"
    05ac : 008b ; -- <0213> "
    05ad : fc00 ; -- <0213> "

    05ae : f808 ; -- <0213> pop rtna -- 
    05af : fc00 ; -- <0213> swapra = nop
-- ########  -- = 0x05b0
    05b0 : 203e ; -- <0213> push rtna -- 

    05b1 : 0263 ; -- <0213> a = 99 -- putasc "c"
    05b2 : fba0 ; -- <0213> putasc "c"
    05b3 : 008b ; -- <0213> "
    05b4 : fc00 ; -- <0213> "

    05b5 : f808 ; -- <0213> pop rtna -- 
    05b6 : fc00 ; -- <0213> swapra = nop
    05b7 : 1403 ; -- <0213> pb = j
    05b8 : fba0 ; -- <0213> callx find_cell_test {rpm in x} {tps in j} {cell out i}
    05b9 : 05b0 ; -- <0213> "
    05ba : fc00 ; -- <0213> "
    05bb : 0804 ; -- <0213> i = pa


-- init fuel injection.
    05bc : fba0 ; -- <0216> call :init_plan_stop
    05bd : 02e7 ; -- <0216> "
    05be : fc00 ; -- <0216> "

-- power up FTDI USB board, and init any other special board control functions.
    05bf : 6280 ; -- <0219> board_ctrl = $ftdi_power_mask
    05c0 : fba0 ; -- <0220> call :postpone_comm_restart
    05c1 : 08b0 ; -- <0220> "
    05c2 : fc00 ; -- <0220> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    05c3 : 6a00 ; -- <0227> power_duty = $power_duty_closing

    05c4 : 001a ; -- <0231> a = power_duty
    05c5 : 06c0 ; -- <0231> b = ( $power_lost_mask | $ign_switch_off_mask )


    05c6 : e003 ; -- <0231> br and0z :else_1478
    05c7 : 05cd ; -- <0231> "

    05c8 : 6a32 ; -- <0231> power_duty = $power_duty_opening
    05c9 : 5fa0 ; -- <0231> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    05ca : fffb ; -- <0231> "
    05cb : e00f ; -- <0231> error_halt_code $err_power_lost_at_boot
    05cc : 05cb ; -- <0231> "


-- :else_1478 -- = 0x05cd

-- :end_1478 -- = 0x05cd

    05cd : 4e00 ; -- <0232> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    05ce : 523e ; -- <0232> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    05cf : 4760 ; -- <0232> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    05d0 : 4e00 ; -- <0233> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    05d1 : 5240 ; -- <0233> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 64
    05d2 : 4602 ; -- <0233> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    05d3 : 2ba0 ; -- <0236> soft_event = $event_controller_reset_mask
    05d4 : 8000 ; -- <0236> "
    05d5 : 2a00 ; -- <0237> soft_event = 0
    05d6 : 37a0 ; -- <0238> mstimer0 = 1000
    05d7 : 03e8 ; -- <0238> "
    05d8 : 3e14 ; -- <0239> mstimer2 = $plan_tick_ms
    05d9 : e00f ; -- <0240> jmp :poll_events
    05da : 007e ; -- <0240> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x05db
    05db : 007e ; -- <0245> ([label :poll_events])
    05dc : 0805 ; -- <0246> ([label :power_lost_handler])
    05dd : 05f0 ; -- <0247> ([label :ign_capture_handler])
    05de : 0670 ; -- <0248> ([label :ign_capture_timeout_handler])
    05df : 0839 ; -- <0249> ([label :puff1_done_handler])
    05e0 : 0675 ; -- <0250> ([label :ustimer0_handler])
    05e1 : 07a0 ; -- <0251> ([label :spi_done_handler])
    05e2 : 0677 ; -- <0252> ([label :mstimer0_handler])
    05e3 : 076d ; -- <0253> ([label :mstimer1_handler])
    05e4 : 06a6 ; -- <0254> ([label :mstimer2_handler])
    05e5 : 06cd ; -- <0255> ([label :uart_rx_handler])
    05e6 : 06e6 ; -- <0256> ([label :uart_rx_overflow_handler])
    05e7 : 06ec ; -- <0257> ([label :uart_tx_overflow_handler])
    05e8 : 06f2 ; -- <0258> ([label :key0_handler])
    05e9 : 06fc ; -- <0259> ([label :key1_handler])
    05ea : 081c ; -- <0260> ([label :ign_switch_off_handler])
    05eb : 082f ; -- <0261> ([label :ign_switch_on_handler])
    05ec : 0706 ; -- <0262> ([label :softevent3_handler])
    05ed : 0708 ; -- <0263> ([label :softevent2_handler])
    05ee : 070a ; -- <0264> ([label :softevent1_handler])
    05ef : 070c ; -- <0265> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x05f0
-- discard outlier time.
    05f0 : 181b ; -- <0271> g6 = ign_capture_jf
    05f1 : 4e00 ; -- <0272> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    05f2 : 5284 ; -- <0272> ram b = $ram_ign_fastest_jf -- av_ad_lo = 132
    05f3 : 0411 ; -- <0272> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    05f4 : 0412 ; -- <0272> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle

    05f5 : 0006 ; -- <0275> a = g6
    05f6 : 0401 ; -- <0275> b = b


    05f7 : e405 ; -- <0275> bn lt :else_1527
    05f8 : 05fa ; -- <0275> "

    05f9 : 1a00 ; -- <0275> g6 = 0


-- :else_1527 -- = 0x05fa

-- :end_1527 -- = 0x05fa

    05fa : 4e00 ; -- <0276> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    05fb : 5286 ; -- <0276> ram b = $ram_ign_slowest_jf -- av_ad_lo = 134
    05fc : 0411 ; -- <0276> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    05fd : 0412 ; -- <0276> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle

    05fe : 0006 ; -- <0279> a = g6
    05ff : 0401 ; -- <0279> b = b


    0600 : e406 ; -- <0279> bn gt :else_1536
    0601 : 0603 ; -- <0279> "

    0602 : 1a00 ; -- <0279> g6 = 0


-- :else_1536 -- = 0x0603

-- :end_1536 -- = 0x0603


-- increment buffer index and memorize time.
    0603 : 4e00 ; -- <0282> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    0604 : 525a ; -- <0282> ram a = $ram_ign_history_idx -- av_ad_lo = 90
    0605 : 0011 ; -- <0282> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    0606 : 0012 ; -- <0282> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    0607 : 0601 ; -- <0283> b = 1
    0608 : c800 ; -- <0284> a = a+b
    0609 : 0300 ; -- <0284> "
    060a : 060f ; -- <0285> b = $ign_history_idx_mask
    060b : c800 ; -- <0286> a = and
    060c : 0330 ; -- <0286> "
    060d : 4e00 ; -- <0287> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    060e : 525a ; -- <0287> ram $ram_ign_history_idx = a -- av_ad_lo = 90
    060f : 4400 ; -- <0287> ram $ram_ign_history_idx = a -- av_write_data = a
    0610 : 0406 ; -- <0288> b = g6

    0611 : 0351 ; -- <0289> a = a<<1
    0612 : 2001 ; -- <0289> push b -- push b
    0613 : 065c ; -- <0289> b = 92
    0614 : 4e00 ; -- <0289> av_ad_hi = 0
    0615 : 5300 ; -- <0289> av_ad_lo = ad0
    0616 : 4408 ; -- <0289> pop av_write_data -- pop av_write_data


-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, y = sample, i = index = loop count, g6 = count of invalid samples.
    0617 : 1200 ; -- <0294> x = 0
    0618 : 1a00 ; -- <0295> g6 = 0
    0619 : 0a00 ; -- <0311> i = 0
-- :loop_1561 -- = 0x061a

    061a : 0002 ; -- <0311> a = i

    061b : 0351 ; -- <0311> a = a<<1
    061c : 065c ; -- <0311> b = 92
    061d : 4e00 ; -- <0311> av_ad_hi = 0
    061e : 5300 ; -- <0311> av_ad_lo = ad0
    061f : 0411 ; -- <0311> b = av_write_data
    0620 : 0412 ; -- <0311> b = av_read_data

    0621 : 1401 ; -- <0311> y = b

    0622 : 0005 ; -- <0311> a = y
    0623 : 0600 ; -- <0311> b = 0


    0624 : e407 ; -- <0311> bn eq :else_1572
    0625 : 062c ; -- <0311> "

    0626 : 0006 ; -- <0311> a = g6
    0627 : 0601 ; -- <0311> b = 1
    0628 : c800 ; -- <0311> g6 = a+b
    0629 : 1b00 ; -- <0311> "

    062a : e00f ; -- <0311> jmp :end_1572
    062b : 0633 ; -- <0311> "
-- :else_1572 -- = 0x062c

    062c : 0208 ; -- <0311> a = ($ign_history_len / 2)
    062d : 0405 ; -- <0311> b = y
    062e : c800 ; -- <0311> a = a+b
    062f : 0300 ; -- <0311> "
    0630 : 1753 ; -- <0311> y = a>>$ign_history_idx_bits
    0631 : c800 ; -- <0311> x = x+y
    0632 : 1320 ; -- <0311> "

-- :end_1572 -- = 0x0633



    0633 : 0002 ; -- <0311> a = i
    0634 : 0601 ; -- <0311> b = 1
    0635 : c800 ; -- <0311> i = a+b
    0636 : 0b00 ; -- <0311> "


    0637 : 0002 ; -- <0311> a = i
    0638 : 0610 ; -- <0311> b = $ign_history_len
    0639 : e005 ; -- <0311> br lt :loop_1561
    063a : 061a ; -- <0311> "

-- :end_1561 -- = 0x063b
    063b : 4e00 ; -- <0312> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    063c : 527c ; -- <0312> ram $ram_ign_avg_jf = x -- av_ad_lo = 124
    063d : 4404 ; -- <0312> ram $ram_ign_avg_jf = x -- av_write_data = x
    063e : 4e00 ; -- <0313> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    063f : 5282 ; -- <0313> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 130
    0640 : 4406 ; -- <0313> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.


    0641 : 0006 ; -- <0330> a = g6
    0642 : 0604 ; -- <0330> b = ( $ign_history_len / 4 )


    0643 : e406 ; -- <0330> bn gt :else_1603
    0644 : 064a ; -- <0330> "

    0645 : 4e00 ; -- <0330> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    0646 : 5280 ; -- <0330> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    0647 : 4600 ; -- <0330> ram $ram_rpm_valid = 0 -- av_write_data = 0

    0648 : e00f ; -- <0330> jmp :end_1603
    0649 : 0654 ; -- <0330> "
-- :else_1603 -- = 0x064a

-- convert jiffies b to new RPM estimate.
    064a : 0004 ; -- <0330> a = x
    064b : fba0 ; -- <0330> call :jf_to_rpm
    064c : 0939 ; -- <0330> "
    064d : fc00 ; -- <0330> "
    064e : 4e00 ; -- <0330> ram $ram_avg_rpm = a -- av_ad_hi = 0
    064f : 527e ; -- <0330> ram $ram_avg_rpm = a -- av_ad_lo = 126
    0650 : 4400 ; -- <0330> ram $ram_avg_rpm = a -- av_write_data = a
    0651 : 4e00 ; -- <0330> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    0652 : 5280 ; -- <0330> ram $ram_rpm_valid = 1 -- av_ad_lo = 128
    0653 : 4601 ; -- <0330> ram $ram_rpm_valid = 1 -- av_write_data = 1

-- :end_1603 -- = 0x0654

    0654 : e00f ; -- <0331> end_event
    0655 : 007e ; -- <0331> "

-- ######## func clear_ign_history -- = 0x0656
    0656 : 2002 ; -- <0333> push i -- func clear_ign_history
-- invalidate the RPM estimate.
    0657 : 4e00 ; -- <0335> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    0658 : 5280 ; -- <0335> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    0659 : 4600 ; -- <0335> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    065a : 4e00 ; -- <0338> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    065b : 5282 ; -- <0338> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 130
    065c : 4610 ; -- <0338> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    065d : 0a00 ; -- <0343> i = 0
-- :loop_1629 -- = 0x065e

    065e : 0002 ; -- <0343> a = i
    065f : 0600 ; -- <0343> b = 0

    0660 : 0351 ; -- <0343> a = a<<1
    0661 : 2001 ; -- <0343> push b -- push b
    0662 : 065c ; -- <0343> b = 92
    0663 : 4e00 ; -- <0343> av_ad_hi = 0
    0664 : 5300 ; -- <0343> av_ad_lo = ad0
    0665 : 4408 ; -- <0343> pop av_write_data -- pop av_write_data



    0666 : 0002 ; -- <0343> a = i
    0667 : 0601 ; -- <0343> b = 1
    0668 : c800 ; -- <0343> i = a+b
    0669 : 0b00 ; -- <0343> "


    066a : 0002 ; -- <0343> a = i
    066b : 0610 ; -- <0343> b = $ign_history_len
    066c : e005 ; -- <0343> br lt :loop_1629
    066d : 065e ; -- <0343> "

-- :end_1629 -- = 0x066e
    066e : 0808 ; -- <0344> pop i -- end_func
    066f : fc00 ; -- <0344> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x0670
-- it's been too long since the last ignition pulse detect.
    0670 : fba0 ; -- <0348> call :clear_ign_history
    0671 : 0656 ; -- <0348> "
    0672 : fc00 ; -- <0348> "
    0673 : e00f ; -- <0349> end_event
    0674 : 007e ; -- <0349> "

-- ######## event ustimer0_handler -- = 0x0675
    0675 : e00f ; -- <0352> end_event
    0676 : 007e ; -- <0352> "

-- ######## event mstimer0_handler -- = 0x0677
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    0677 : 37a0 ; -- <0358> mstimer0 = 1000
    0678 : 03e8 ; -- <0358> "

-- realtime counters in RAM.
    0679 : 4e00 ; -- <0361> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    067a : 5244 ; -- <0361> ram a = $ram_seconds_cnt -- av_ad_lo = 68
    067b : 0011 ; -- <0361> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    067c : 0012 ; -- <0361> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    067d : 0601 ; -- <0362> b = 1
    067e : c800 ; -- <0363> a = a+b
    067f : 0300 ; -- <0363> "

    0680 : 0000 ; -- <0372> a = a
    0681 : 063c ; -- <0372> b = 60


    0682 : e407 ; -- <0372> bn eq :else_1666
    0683 : 0695 ; -- <0372> "

    0684 : 4e00 ; -- <0372> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    0685 : 5244 ; -- <0372> ram $ram_seconds_cnt = 0 -- av_ad_lo = 68
    0686 : 4600 ; -- <0372> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    0687 : 4e00 ; -- <0372> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0688 : 5242 ; -- <0372> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0689 : 0011 ; -- <0372> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    068a : 0012 ; -- <0372> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    068b : 0601 ; -- <0372> b = 1
    068c : 4e00 ; -- <0372> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    068d : 5242 ; -- <0372> ram $ram_minutes_cnt = a+b -- av_ad_lo = 66
    068e : c800 ; -- <0372> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    068f : 4700 ; -- <0372> "
    0690 : fba0 ; -- <0372> call :minute_events
    0691 : 0848 ; -- <0372> "
    0692 : fc00 ; -- <0372> "

    0693 : e00f ; -- <0372> jmp :end_1666
    0694 : 0698 ; -- <0372> "
-- :else_1666 -- = 0x0695

    0695 : 4e00 ; -- <0372> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    0696 : 5244 ; -- <0372> ram $ram_seconds_cnt = a -- av_ad_lo = 68
    0697 : 4400 ; -- <0372> ram $ram_seconds_cnt = a -- av_write_data = a

-- :end_1666 -- = 0x0698


-- all 1-second functions here.
    0698 : fba0 ; -- <0375> call :check_power_relay
    0699 : 0850 ; -- <0375> "
    069a : fc00 ; -- <0375> "
    069b : fba0 ; -- <0376> call :check_communication
    069c : 0883 ; -- <0376> "
    069d : fc00 ; -- <0376> "
    069e : fba0 ; -- <0377> call :start_daq_pass
    069f : 0718 ; -- <0377> "
    06a0 : fc00 ; -- <0377> "
    06a1 : e00f ; -- <0378> end_event
    06a2 : 007e ; -- <0378> "

-- :plan_transition_msg -- = 0x06a3
-- "PLAN\x0"
    06a3 : 4c50 ; -- <0381> LP
    06a4 : 4e41 ; -- <0381> NA
    06a5 : 0000 ; -- <0381>   

-- ######## event mstimer2_handler -- = 0x06a6
-- engine management plan tick timer.

-- restart timer.
    06a6 : 3e14 ; -- <0387> mstimer2 = $plan_tick_ms

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    06a7 : 4e00 ; -- <0392> ram rtna = $ram_transition_func -- av_ad_hi = 0
    06a8 : 528e ; -- <0392> ram rtna = $ram_transition_func -- av_ad_lo = 142
    06a9 : f811 ; -- <0392> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    06aa : f812 ; -- <0392> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    06ab : 103e ; -- <0393> x = rtna
    06ac : fc00 ; -- <0394> swapra = nop
    06ad : 4e00 ; -- <0395> ram b = $ram_transition_func -- av_ad_hi = 0
    06ae : 528e ; -- <0395> ram b = $ram_transition_func -- av_ad_lo = 142
    06af : 0411 ; -- <0395> ram b = $ram_transition_func -- b = av_write_data -- start read cycle
    06b0 : 0412 ; -- <0395> ram b = $ram_transition_func -- b = av_read_data -- finish read cycle

    06b1 : 0004 ; -- <0399> a = x
    06b2 : 0401 ; -- <0399> b = b


    06b3 : e007 ; -- <0399> br eq :else_1715
    06b4 : 06ba ; -- <0399> "

    06b5 : 03a0 ; -- <0399> a = :plan_transition_msg
    06b6 : 06a3 ; -- <0399> "
    06b7 : fba0 ; -- <0399> call :set_text_flag
    06b8 : 08e1 ; -- <0399> "
    06b9 : fc00 ; -- <0399> "


-- :else_1715 -- = 0x06ba

-- :end_1715 -- = 0x06ba

-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    06ba : 4e00 ; -- <0402> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    06bb : 528c ; -- <0402> ram rtna = $ram_puff_len_func -- av_ad_lo = 140
    06bc : f811 ; -- <0402> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    06bd : f812 ; -- <0402> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    06be : fc00 ; -- <0403> swapra = nop

-- start another o2 reading every plan tick.
    06bf : 4e00 ; -- <0406> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    06c0 : 5238 ; -- <0406> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    06c1 : 0011 ; -- <0406> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    06c2 : 0012 ; -- <0406> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    06c3 : 0000 ; -- <0410> a = a
    06c4 : 0600 ; -- <0410> b = 0


    06c5 : e407 ; -- <0410> bn eq :else_1733
    06c6 : 06cb ; -- <0410> "

    06c7 : 0205 ; -- <0410> a = $o2_adc_channel
    06c8 : fba0 ; -- <0410> call :begin_adc_conversion
    06c9 : 0793 ; -- <0410> "
    06ca : fc00 ; -- <0410> "


-- :else_1733 -- = 0x06cb

-- :end_1733 -- = 0x06cb

    06cb : e00f ; -- <0411> end_event
    06cc : 007e ; -- <0411> "

-- ######## event uart_rx_handler -- = 0x06cd
-- :again -- = 0x06cd
    06cd : fba0 ; -- <0415> pollchar
    06ce : 009a ; -- <0415> "
    06cf : fc00 ; -- <0415> "
    06d0 : 1000 ; -- <0416> x = a

    06d1 : 0004 ; -- <0419> a = x
    06d2 : 0760 ; -- <0419> b = -1


    06d3 : e407 ; -- <0419> bn eq :else_1747
    06d4 : 06d7 ; -- <0419> "

    06d5 : e00f ; -- <0419> event_return
    06d6 : 007e ; -- <0419> "


-- :else_1747 -- = 0x06d7

-- :end_1747 -- = 0x06d7


    06d7 : 0004 ; -- <0422> a = x
    06d8 : 060a ; -- <0422> b = 10


    06d9 : e407 ; -- <0422> bn eq :else_1753
    06da : 06de ; -- <0422> "

    06db : fba0 ; -- <0422> call :postpone_comm_restart
    06dc : 08b0 ; -- <0422> "
    06dd : fc00 ; -- <0422> "


-- :else_1753 -- = 0x06de

-- :end_1753 -- = 0x06de

    06de : 0004 ; -- <0423> a = x
    06df : fba0 ; -- <0424> call :parse_key
    06e0 : 0231 ; -- <0424> "
    06e1 : fc00 ; -- <0424> "
    06e2 : e00f ; -- <0425> jmp :again
    06e3 : 06cd ; -- <0425> "
    06e4 : e00f ; -- <0426> end_event
    06e5 : 007e ; -- <0426> "

-- ######## event uart_rx_overflow_handler -- = 0x06e6
    06e6 : 5fa0 ; -- <0429> error_halt_code $err_rx_overflow -- leds = 0xfffe
    06e7 : fffe ; -- <0429> "
    06e8 : e00f ; -- <0429> error_halt_code $err_rx_overflow
    06e9 : 06e8 ; -- <0429> "
    06ea : e00f ; -- <0430> end_event
    06eb : 007e ; -- <0430> "

-- ######## event uart_tx_overflow_handler -- = 0x06ec
    06ec : 5fa0 ; -- <0433> error_halt_code $err_tx_overflow -- leds = 0xfffd
    06ed : fffd ; -- <0433> "
    06ee : e00f ; -- <0433> error_halt_code $err_tx_overflow
    06ef : 06ee ; -- <0433> "
    06f0 : e00f ; -- <0434> end_event
    06f1 : 007e ; -- <0434> "

-- ######## event key0_handler -- = 0x06f2
    06f2 : 026b ; -- <0437> a = 107 -- putasc "k"
    06f3 : fba0 ; -- <0437> putasc "k"
    06f4 : 008b ; -- <0437> "
    06f5 : fc00 ; -- <0437> "
    06f6 : 0230 ; -- <0438> a = 48 -- putasc "0"
    06f7 : fba0 ; -- <0438> putasc "0"
    06f8 : 008b ; -- <0438> "
    06f9 : fc00 ; -- <0438> "
    06fa : e00f ; -- <0439> end_event
    06fb : 007e ; -- <0439> "

-- ######## event key1_handler -- = 0x06fc
    06fc : 026b ; -- <0442> a = 107 -- putasc "k"
    06fd : fba0 ; -- <0442> putasc "k"
    06fe : 008b ; -- <0442> "
    06ff : fc00 ; -- <0442> "
    0700 : 0231 ; -- <0443> a = 49 -- putasc "1"
    0701 : fba0 ; -- <0443> putasc "1"
    0702 : 008b ; -- <0443> "
    0703 : fc00 ; -- <0443> "
    0704 : e00f ; -- <0444> end_event
    0705 : 007e ; -- <0444> "

-- ######## event softevent3_handler -- = 0x0706
    0706 : e00f ; -- <0447> end_event
    0707 : 007e ; -- <0447> "

-- ######## event softevent2_handler -- = 0x0708
    0708 : e00f ; -- <0450> end_event
    0709 : 007e ; -- <0450> "

-- ######## event softevent1_handler -- = 0x070a
    070a : e00f ; -- <0453> end_event
    070b : 007e ; -- <0453> "

-- ######## event softevent0_handler -- = 0x070c
    070c : e00f ; -- <0456> end_event
    070d : 007e ; -- <0456> "

-- :rpm_msg -- = 0x070e
-- ": rpm=\x0"
    070e : 203a ; -- <0459>  :
    070f : 7072 ; -- <0459> pr
    0710 : 3d6d ; -- <0459> =m
    0711 : 0000 ; -- <0459>   

-- :puff_len_msg -- = 0x0712
-- " pfl=\x0"
    0712 : 7020 ; -- <0462> p 
    0713 : 6c66 ; -- <0462> lf
    0714 : 003d ; -- <0462>  =

-- :o2_msg -- = 0x0715
-- " o2=\x0"
    0715 : 6f20 ; -- <0465> o 
    0716 : 3d32 ; -- <0465> =2
    0717 : 0000 ; -- <0465>   

-- ######## func start_daq_pass -- = 0x0718
    0718 : 2004 ; -- <0467> push x -- func start_daq_pass
    0719 : 203e ; -- <0467> push rtna -- "
-- daq pass counter in RAM.
    071a : 4e00 ; -- <0469> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    071b : 5214 ; -- <0469> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    071c : 0011 ; -- <0469> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    071d : 0012 ; -- <0469> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    071e : 0601 ; -- <0470> b = 1
    071f : c800 ; -- <0471> a = a+b
    0720 : 0300 ; -- <0471> "
    0721 : 5c00 ; -- <0472> leds = a
    0722 : 4e00 ; -- <0473> ram $ram_daq_pass_cnt = a -- av_ad_hi = 0
    0723 : 5214 ; -- <0473> ram $ram_daq_pass_cnt = a -- av_ad_lo = 20
    0724 : 4400 ; -- <0473> ram $ram_daq_pass_cnt = a -- av_write_data = a
    0725 : fba0 ; -- <0474> call :put4x
    0726 : 00b3 ; -- <0474> "
    0727 : fc00 ; -- <0474> "

    0728 : 03a0 ; -- <0476> a = :rpm_msg
    0729 : 070e ; -- <0476> "
    072a : fba0 ; -- <0477> call :print_nt
    072b : 013f ; -- <0477> "
    072c : fc00 ; -- <0477> "
    072d : 0200 ; -- <0478> a = 0
    072e : 4e00 ; -- <0479> ram x = $ram_rpm_valid -- av_ad_hi = 0
    072f : 5280 ; -- <0479> ram x = $ram_rpm_valid -- av_ad_lo = 128
    0730 : 1011 ; -- <0479> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    0731 : 1012 ; -- <0479> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle

    0732 : 0004 ; -- <0482> a = x
    0733 : 0600 ; -- <0482> b = 0


    0734 : e007 ; -- <0482> br eq :else_1844
    0735 : 073a ; -- <0482> "

    0736 : 4e00 ; -- <0482> ram a = $ram_avg_rpm -- av_ad_hi = 0
    0737 : 527e ; -- <0482> ram a = $ram_avg_rpm -- av_ad_lo = 126
    0738 : 0011 ; -- <0482> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    0739 : 0012 ; -- <0482> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle


-- :else_1844 -- = 0x073a

-- :end_1844 -- = 0x073a

    073a : fba0 ; -- <0483> call :put4x
    073b : 00b3 ; -- <0483> "
    073c : fc00 ; -- <0483> "

    073d : 03a0 ; -- <0485> a = :puff_len_msg
    073e : 0712 ; -- <0485> "
    073f : fba0 ; -- <0486> call :print_nt
    0740 : 013f ; -- <0486> "
    0741 : fc00 ; -- <0486> "
    0742 : 001d ; -- <0487> a = puff_len_us
    0743 : fba0 ; -- <0488> call :put4x
    0744 : 00b3 ; -- <0488> "
    0745 : fc00 ; -- <0488> "
    0746 : 022c ; -- <0489> a = 44 -- putasc ","
    0747 : fba0 ; -- <0489> putasc ","
    0748 : 008b ; -- <0489> "
    0749 : fc00 ; -- <0489> "
    074a : 4e00 ; -- <0490> ram a = $ram_puff_count -- av_ad_hi = 0
    074b : 5294 ; -- <0490> ram a = $ram_puff_count -- av_ad_lo = 148
    074c : 0011 ; -- <0490> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    074d : 0012 ; -- <0490> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    074e : fba0 ; -- <0491> call :put4x
    074f : 00b3 ; -- <0491> "
    0750 : fc00 ; -- <0491> "

    0751 : 03a0 ; -- <0493> a = :o2_msg
    0752 : 0715 ; -- <0493> "
    0753 : fba0 ; -- <0494> call :print_nt
    0754 : 013f ; -- <0494> "
    0755 : fc00 ; -- <0494> "
    0756 : 0205 ; -- <0495> a = $o2_adc_channel

    0757 : 0351 ; -- <0496> a = a<<1
    0758 : 0628 ; -- <0496> b = 40
    0759 : 4e00 ; -- <0496> av_ad_hi = 0
    075a : 5300 ; -- <0496> av_ad_lo = ad0
    075b : 0411 ; -- <0496> b = av_write_data
    075c : 0412 ; -- <0496> b = av_read_data

    075d : 0001 ; -- <0497> a = b
    075e : fba0 ; -- <0498> call :put4x
    075f : 00b3 ; -- <0498> "
    0760 : fc00 ; -- <0498> "

-- start to acquire & report all anmux channels.
    0761 : 0207 ; -- <0501> a = ($anmux_num_channels - 1)
    0762 : fba0 ; -- <0502> call :anmux_set_chn
    0763 : 00a2 ; -- <0502> "
    0764 : fc00 ; -- <0502> "
    0765 : 3a05 ; -- <0503> mstimer1 = $anmux_settle_ms

-- -- observe MCU utilization.  this RAM variable can be seen by the debugger.
    0766 : 4e00 ; -- <0506> ram $ram_mcu_usage_cnt = usage_count -- av_ad_hi = 0
    0767 : 5246 ; -- <0506> ram $ram_mcu_usage_cnt = usage_count -- av_ad_lo = 70
    0768 : 440b ; -- <0506> ram $ram_mcu_usage_cnt = usage_count -- av_write_data = usage_count
    0769 : 2e00 ; -- <0507> usage_count = 0
    076a : f808 ; -- <0508> pop rtna -- end_func
    076b : 1008 ; -- <0508> pop x -- "
    076c : fc00 ; -- <0508> swapra = nop

-- ######## event mstimer1_handler -- = 0x076d
-- anmux signal has settled.

    076d : 4e00 ; -- <0513> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    076e : 5238 ; -- <0513> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    076f : 0011 ; -- <0513> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0770 : 0012 ; -- <0513> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    0771 : 0000 ; -- <0518> a = a
    0772 : 0600 ; -- <0518> b = 0


    0773 : e007 ; -- <0518> br eq :else_1907
    0774 : 0778 ; -- <0518> "

-- ADC is busy right now.  wait a while & try again.
    0775 : 3a02 ; -- <0518> mstimer1 = $anmux_retry_ms
    0776 : e00f ; -- <0518> event_return
    0777 : 007e ; -- <0518> "


-- :else_1907 -- = 0x0778

-- :end_1907 -- = 0x0778


-- start a reading from the current anmux channel.
    0778 : 0220 ; -- <0521> a = 32 -- putasc " "
    0779 : fba0 ; -- <0521> putasc " "
    077a : 008b ; -- <0521> "
    077b : fc00 ; -- <0521> "
    077c : 0273 ; -- <0522> a = 115 -- putasc "s"
    077d : fba0 ; -- <0522> putasc "s"
    077e : 008b ; -- <0522> "
    077f : fc00 ; -- <0522> "
    0780 : fba0 ; -- <0523> call :anmux_get_chn
    0781 : 00a6 ; -- <0523> "
    0782 : fc00 ; -- <0523> "
    0783 : 0630 ; -- <0524> b = 48 -- asc b = "0"
    0784 : c800 ; -- <0525> a = a+b -- putchar a+b
    0785 : 0300 ; -- <0525> "
    0786 : fba0 ; -- <0525> putchar a+b
    0787 : 008b ; -- <0525> "
    0788 : fc00 ; -- <0525> "
    0789 : 023d ; -- <0526> a = 61 -- putasc "="
    078a : fba0 ; -- <0526> putasc "="
    078b : 008b ; -- <0526> "
    078c : fc00 ; -- <0526> "
    078d : 0207 ; -- <0527> a = $anmux_adc_channel
    078e : fba0 ; -- <0528> call :begin_adc_conversion
    078f : 0793 ; -- <0528> "
    0790 : fc00 ; -- <0528> "
    0791 : e00f ; -- <0529> end_event
    0792 : 007e ; -- <0529> "

-- ######## func begin_adc_conversion -- = 0x0793
-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.  pass that in a.

    0793 : 4e00 ; -- <0535> ram $ram_adc_chn_pending = a -- av_ad_hi = 0
    0794 : 5238 ; -- <0535> ram $ram_adc_chn_pending = a -- av_ad_lo = 56
    0795 : 4400 ; -- <0535> ram $ram_adc_chn_pending = a -- av_write_data = a
    0796 : 0352 ; -- <0536> a = a<<4
    0797 : 0352 ; -- <0537> a = a<<4
    0798 : 0351 ; -- <0538> a = a<<1
    0799 : 0351 ; -- <0539> a = a<<1
    079a : 0351 ; -- <0540> a = a<<1
    079b : 4000 ; -- <0541> spi_data = a
    079c : 4e00 ; -- <0542> ram $ram_adc_junk = 1 -- av_ad_hi = 0
    079d : 523a ; -- <0542> ram $ram_adc_junk = 1 -- av_ad_lo = 58
    079e : 4601 ; -- <0542> ram $ram_adc_junk = 1 -- av_write_data = 1
    079f : fc00 ; -- <0543> swapra = nop

-- ######## event spi_done_handler -- = 0x07a0
-- discard the results of the first SPI exchange with the ADC.  that's only for writing the channel num out to the ADC.
    07a0 : 4e00 ; -- <0547> ram a = $ram_adc_junk -- av_ad_hi = 0
    07a1 : 523a ; -- <0547> ram a = $ram_adc_junk -- av_ad_lo = 58
    07a2 : 0011 ; -- <0547> ram a = $ram_adc_junk -- a = av_write_data -- start read cycle
    07a3 : 0012 ; -- <0547> ram a = $ram_adc_junk -- a = av_read_data -- finish read cycle

    07a4 : 0000 ; -- <0559> a = a
    07a5 : 0600 ; -- <0559> b = 0


    07a6 : e007 ; -- <0559> br eq :else_1958
    07a7 : 07b7 ; -- <0559> "

-- start another SPI exchange to retrieve the actual reading.
    07a8 : 4e00 ; -- <0559> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    07a9 : 5238 ; -- <0559> ram a = $ram_adc_chn_pending -- av_ad_lo = 56
    07aa : 0011 ; -- <0559> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    07ab : 0012 ; -- <0559> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle
    07ac : 0352 ; -- <0559> a = a<<4
    07ad : 0352 ; -- <0559> a = a<<4
    07ae : 0351 ; -- <0559> a = a<<1
    07af : 0351 ; -- <0559> a = a<<1
    07b0 : 0351 ; -- <0559> a = a<<1
    07b1 : 4000 ; -- <0559> spi_data = a
    07b2 : 4e00 ; -- <0559> ram $ram_adc_junk = 0 -- av_ad_hi = 0
    07b3 : 523a ; -- <0559> ram $ram_adc_junk = 0 -- av_ad_lo = 58
    07b4 : 4600 ; -- <0559> ram $ram_adc_junk = 0 -- av_write_data = 0
    07b5 : e00f ; -- <0559> event_return
    07b6 : 007e ; -- <0559> "


-- :else_1958 -- = 0x07b7

-- :end_1958 -- = 0x07b7


-- memorize an actual ADC reading.
    07b7 : 4e00 ; -- <0562> ram i = $ram_adc_chn_pending -- av_ad_hi = 0
    07b8 : 5238 ; -- <0562> ram i = $ram_adc_chn_pending -- av_ad_lo = 56
    07b9 : 0811 ; -- <0562> ram i = $ram_adc_chn_pending -- i = av_write_data -- start read cycle
    07ba : 0812 ; -- <0562> ram i = $ram_adc_chn_pending -- i = av_read_data -- finish read cycle
    07bb : 4e00 ; -- <0563> ram $ram_adc_chn_pending = 0 -- av_ad_hi = 0
    07bc : 5238 ; -- <0563> ram $ram_adc_chn_pending = 0 -- av_ad_lo = 56
    07bd : 4600 ; -- <0563> ram $ram_adc_chn_pending = 0 -- av_write_data = 0
    07be : 0002 ; -- <0564> a = i
    07bf : 0410 ; -- <0565> b = spi_data

    07c0 : 0351 ; -- <0566> a = a<<1
    07c1 : 2001 ; -- <0566> push b -- push b
    07c2 : 0628 ; -- <0566> b = 40
    07c3 : 4e00 ; -- <0566> av_ad_hi = 0
    07c4 : 5300 ; -- <0566> av_ad_lo = ad0
    07c5 : 4408 ; -- <0566> pop av_write_data -- pop av_write_data


    07c6 : 0002 ; -- <0569> a = i
    07c7 : 0605 ; -- <0569> b = 5


    07c8 : e407 ; -- <0569> bn eq :else_1992
    07c9 : 07cc ; -- <0569> "

    07ca : e00f ; -- <0569> event_return
    07cb : 007e ; -- <0569> "


-- :else_1992 -- = 0x07cc

-- :end_1992 -- = 0x07cc


    07cc : 0002 ; -- <0596> a = i
    07cd : 0607 ; -- <0596> b = 7


    07ce : e407 ; -- <0596> bn eq :else_1998
    07cf : 0801 ; -- <0596> "

-- report anmux reading.
    07d0 : 0010 ; -- <0596> a = spi_data
    07d1 : fba0 ; -- <0596> call :put4x
    07d2 : 00b3 ; -- <0596> "
    07d3 : fc00 ; -- <0596> "

-- memorize anmux reading.
    07d4 : fba0 ; -- <0596> call :anmux_get_chn
    07d5 : 00a6 ; -- <0596> "
    07d6 : fc00 ; -- <0596> "
    07d7 : 0410 ; -- <0596> b = spi_data

    07d8 : 0351 ; -- <0596> a = a<<1
    07d9 : 2001 ; -- <0596> push b -- push b
    07da : 0618 ; -- <0596> b = 24
    07db : 4e00 ; -- <0596> av_ad_hi = 0
    07dc : 5300 ; -- <0596> av_ad_lo = ad0
    07dd : 4408 ; -- <0596> pop av_write_data -- pop av_write_data


-- decrement anmux channel & start waiting again.
    07de : fba0 ; -- <0596> call :anmux_get_chn
    07df : 00a6 ; -- <0596> "
    07e0 : fc00 ; -- <0596> "

    07e1 : 0000 ; -- <0596> a = a
    07e2 : 0600 ; -- <0596> b = 0


    07e3 : e007 ; -- <0596> br eq :else_2019
    07e4 : 07ee ; -- <0596> "

    07e5 : 0760 ; -- <0596> b = -1
    07e6 : c800 ; -- <0596> a = a+b
    07e7 : 0300 ; -- <0596> "
    07e8 : fba0 ; -- <0596> call :anmux_set_chn
    07e9 : 00a2 ; -- <0596> "
    07ea : fc00 ; -- <0596> "
    07eb : 3a05 ; -- <0596> mstimer1 = $anmux_settle_ms
    07ec : e00f ; -- <0596> event_return
    07ed : 007e ; -- <0596> "


-- :else_2019 -- = 0x07ee

-- :end_2019 -- = 0x07ee


-- end of temperature daq pass.
    07ee : fba0 ; -- <0596> call :report_plan
    07ef : 092a ; -- <0596> "
    07f0 : fc00 ; -- <0596> "
    07f1 : fba0 ; -- <0596> call :report_text_flags
    07f2 : 08fa ; -- <0596> "
    07f3 : fc00 ; -- <0596> "
    07f4 : 020d ; -- <0596> a = 13 -- puteol
    07f5 : fba0 ; -- <0596> puteol
    07f6 : 008b ; -- <0596> "
    07f7 : fc00 ; -- <0596> "
    07f8 : 020a ; -- <0596> a = 10 -- puteol
    07f9 : fba0 ; -- <0596> puteol
    07fa : 008b ; -- <0596> "
    07fb : fc00 ; -- <0596> "
    07fc : 4e00 ; -- <0596> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    07fd : 523c ; -- <0596> ram $ram_dial_setting = spi_data -- av_ad_lo = 60
    07fe : 4410 ; -- <0596> ram $ram_dial_setting = spi_data -- av_write_data = spi_data
    07ff : e00f ; -- <0596> event_return
    0800 : 007e ; -- <0596> "


-- :else_1998 -- = 0x0801

-- :end_1998 -- = 0x0801

    0801 : e00f ; -- <0597> end_event
    0802 : 007e ; -- <0597> "

-- :power_lost_msg -- = 0x0803
-- "PWL\x0"
    0803 : 5750 ; -- <0600> WP
    0804 : 004c ; -- <0600>  L

-- ######## event power_lost_handler -- = 0x0805
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    0805 : 6a00 ; -- <0609> power_duty = $power_duty_closing
    0806 : 4e00 ; -- <0610> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0807 : 5214 ; -- <0610> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0808 : 0011 ; -- <0610> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0809 : 0012 ; -- <0610> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    080a : 0602 ; -- <0611> b = $relay_hold_passes
    080b : 4e00 ; -- <0612> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    080c : 5240 ; -- <0612> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 64
    080d : c800 ; -- <0612> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    080e : 4700 ; -- <0612> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    080f : fba0 ; -- <0617> call :save_persistent_data
    0810 : 0882 ; -- <0617> "
    0811 : fc00 ; -- <0617> "

    0812 : 03a0 ; -- <0619> a = :power_lost_msg
    0813 : 0803 ; -- <0619> "
    0814 : fba0 ; -- <0620> call :set_text_flag
    0815 : 08e1 ; -- <0620> "
    0816 : fc00 ; -- <0620> "
    0817 : e00f ; -- <0621> end_event
    0818 : 007e ; -- <0621> "

-- :ign_off_msg -- = 0x0819
-- "IGOF\x0"
    0819 : 4749 ; -- <0624> GI
    081a : 464f ; -- <0624> FO
    081b : 0000 ; -- <0624>   

-- ######## event ign_switch_off_handler -- = 0x081c
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    081c : 4e00 ; -- <0628> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    081d : 5242 ; -- <0628> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    081e : 0011 ; -- <0628> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    081f : 0012 ; -- <0628> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0820 : 060a ; -- <0629> b = $power_extend_minutes
    0821 : 4e00 ; -- <0630> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    0822 : 523e ; -- <0630> ram $ram_power_down_at_min = a+b -- av_ad_lo = 62
    0823 : c800 ; -- <0630> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    0824 : 4700 ; -- <0630> "
    0825 : 03a0 ; -- <0631> a = :ign_off_msg
    0826 : 0819 ; -- <0631> "
    0827 : fba0 ; -- <0632> call :set_text_flag
    0828 : 08e1 ; -- <0632> "
    0829 : fc00 ; -- <0632> "
    082a : e00f ; -- <0633> end_event
    082b : 007e ; -- <0633> "

-- :ign_on_msg -- = 0x082c
-- "IGON\x0"
    082c : 4749 ; -- <0636> GI
    082d : 4e4f ; -- <0636> NO
    082e : 0000 ; -- <0636>   

-- ######## event ign_switch_on_handler -- = 0x082f
    082f : 4e00 ; -- <0639> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0830 : 523e ; -- <0639> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    0831 : 4760 ; -- <0639> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0832 : 03a0 ; -- <0640> a = :ign_on_msg
    0833 : 082c ; -- <0640> "
    0834 : fba0 ; -- <0641> call :set_text_flag
    0835 : 08e1 ; -- <0641> "
    0836 : fc00 ; -- <0641> "
    0837 : e00f ; -- <0642> end_event
    0838 : 007e ; -- <0642> "

-- ######## event puff1_done_handler -- = 0x0839
-- puff just finished.  set length of next puff.
    0839 : 4e00 ; -- <0646> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    083a : 5292 ; -- <0646> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 146
    083b : 7411 ; -- <0646> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    083c : 7412 ; -- <0646> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    083d : 4e00 ; -- <0649> ram a = $ram_puff_count -- av_ad_hi = 0
    083e : 5294 ; -- <0649> ram a = $ram_puff_count -- av_ad_lo = 148
    083f : 0011 ; -- <0649> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0840 : 0012 ; -- <0649> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0841 : 0601 ; -- <0650> b = 1
    0842 : 4e00 ; -- <0651> ram $ram_puff_count = a+b -- av_ad_hi = 0
    0843 : 5294 ; -- <0651> ram $ram_puff_count = a+b -- av_ad_lo = 148
    0844 : c800 ; -- <0651> ram $ram_puff_count = a+b -- av_write_data = a+b
    0845 : 4700 ; -- <0651> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    0846 : e00f ; -- <0662> end_event
    0847 : 007e ; -- <0662> "

-- ######## func minute_events -- = 0x0848
    0848 : 203e ; -- <0664> push rtna -- func minute_events
    0849 : fba0 ; -- <0665> call :check_power_down
    084a : 0865 ; -- <0665> "
    084b : fc00 ; -- <0665> "
    084c : f808 ; -- <0666> pop rtna -- end_func
    084d : fc00 ; -- <0666> swapra = nop

-- :power_hold_msg -- = 0x084e
-- "PWH\x0"
    084e : 5750 ; -- <0669> WP
    084f : 0048 ; -- <0669>  H

-- ######## func check_power_relay -- = 0x0850
    0850 : 203e ; -- <0671> push rtna -- func check_power_relay
    0851 : 4e00 ; -- <0672> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0852 : 5214 ; -- <0672> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0853 : 0011 ; -- <0672> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0854 : 0012 ; -- <0672> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0855 : 4e00 ; -- <0673> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    0856 : 5240 ; -- <0673> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 64
    0857 : 0411 ; -- <0673> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    0858 : 0412 ; -- <0673> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle

    0859 : 0000 ; -- <0679> a = a
    085a : 0401 ; -- <0679> b = b


    085b : e407 ; -- <0679> bn eq :else_2139
    085c : 0863 ; -- <0679> "

-- time to begin "solenoid saver" coil power reduction by PWM.
    085d : 6a19 ; -- <0679> power_duty = $power_duty_holding
    085e : 03a0 ; -- <0679> a = :power_hold_msg
    085f : 084e ; -- <0679> "
    0860 : fba0 ; -- <0679> call :set_text_flag
    0861 : 08e1 ; -- <0679> "
    0862 : fc00 ; -- <0679> "


-- :else_2139 -- = 0x0863

-- :end_2139 -- = 0x0863

    0863 : f808 ; -- <0680> pop rtna -- end_func
    0864 : fc00 ; -- <0680> swapra = nop

-- ######## func check_power_down -- = 0x0865
    0865 : 203e ; -- <0682> push rtna -- func check_power_down
-- check power-down deadline in RAM.
    0866 : 4e00 ; -- <0684> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0867 : 5242 ; -- <0684> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0868 : 0011 ; -- <0684> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0869 : 0012 ; -- <0684> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    086a : 4e00 ; -- <0685> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    086b : 523e ; -- <0685> ram b = $ram_power_down_at_min -- av_ad_lo = 62
    086c : 0411 ; -- <0685> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    086d : 0412 ; -- <0685> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle

    086e : 0000 ; -- <0688> a = a
    086f : 0401 ; -- <0688> b = b


    0870 : e407 ; -- <0688> bn eq :else_2160
    0871 : 0875 ; -- <0688> "

    0872 : fba0 ; -- <0688> call :power_down
    0873 : 0877 ; -- <0688> "
    0874 : fc00 ; -- <0688> "


-- :else_2160 -- = 0x0875

-- :end_2160 -- = 0x0875

    0875 : f808 ; -- <0689> pop rtna -- end_func
    0876 : fc00 ; -- <0689> swapra = nop

-- ######## func power_down -- = 0x0877
    0877 : 203e ; -- <0691> push rtna -- func power_down
-- this function never returns.
    0878 : fba0 ; -- <0693> call :save_persistent_data
    0879 : 0882 ; -- <0693> "
    087a : fc00 ; -- <0693> "
    087b : 6a32 ; -- <0694> power_duty = $power_duty_opening
    087c : 5fa0 ; -- <0695> error_halt_code $err_power_down -- leds = 0xfffc
    087d : fffc ; -- <0695> "
    087e : e00f ; -- <0695> error_halt_code $err_power_down
    087f : 087e ; -- <0695> "
    0880 : f808 ; -- <0696> pop rtna -- end_func
    0881 : fc00 ; -- <0696> swapra = nop

-- ######## func save_persistent_data -- = 0x0882
    0882 : fc00 ; -- <0699> swapra = nop

-- ######## func check_communication -- = 0x0883
    0883 : 203e ; -- <0701> push rtna -- func check_communication
    0884 : 4e00 ; -- <0702> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    0885 : 5212 ; -- <0702> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 18
    0886 : 0011 ; -- <0702> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    0887 : 0012 ; -- <0702> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle

    0888 : 0000 ; -- <0710> a = a
    0889 : 0600 ; -- <0710> b = 0


    088a : e007 ; -- <0710> br eq :else_2186
    088b : 0899 ; -- <0710> "

    088c : 0760 ; -- <0710> b = -1
    088d : c800 ; -- <0710> a = a+b
    088e : 0300 ; -- <0710> "
    088f : 4e00 ; -- <0710> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0890 : 5212 ; -- <0710> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 18
    0891 : 4400 ; -- <0710> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a

    0892 : 0000 ; -- <0710> a = a
    0893 : 0600 ; -- <0710> b = 0


    0894 : e407 ; -- <0710> bn eq :else_2196
    0895 : 0899 ; -- <0710> "

    0896 : fba0 ; -- <0710> call :ftdi_power_on
    0897 : 08cd ; -- <0710> "
    0898 : fc00 ; -- <0710> "


-- :else_2196 -- = 0x0899

-- :end_2196 -- = 0x0899



-- :else_2186 -- = 0x0899

-- :end_2186 -- = 0x0899


    0899 : 4e00 ; -- <0712> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    089a : 5242 ; -- <0712> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    089b : 0011 ; -- <0712> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    089c : 0012 ; -- <0712> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    089d : 4e00 ; -- <0713> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    089e : 5210 ; -- <0713> ram b = $ram_comm_restart_at_min -- av_ad_lo = 16
    089f : 0411 ; -- <0713> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    08a0 : 0412 ; -- <0713> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle

    08a1 : 0000 ; -- <0719> a = a
    08a2 : 0401 ; -- <0719> b = b


    08a3 : e407 ; -- <0719> bn eq :else_2211
    08a4 : 08ae ; -- <0719> "

-- comm restart is required.
    08a5 : fba0 ; -- <0719> call :postpone_comm_restart
    08a6 : 08b0 ; -- <0719> "
    08a7 : fc00 ; -- <0719> "
    08a8 : 4e00 ; -- <0719> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    08a9 : 5212 ; -- <0719> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 18
    08aa : 4605 ; -- <0719> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    08ab : fba0 ; -- <0719> call :ftdi_power_off
    08ac : 08bd ; -- <0719> "
    08ad : fc00 ; -- <0719> "


-- :else_2211 -- = 0x08ae

-- :end_2211 -- = 0x08ae

    08ae : f808 ; -- <0720> pop rtna -- end_func
    08af : fc00 ; -- <0720> swapra = nop

-- ######## func postpone_comm_restart -- = 0x08b0
    08b0 : 4e00 ; -- <0723> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    08b1 : 5242 ; -- <0723> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    08b2 : 0011 ; -- <0723> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    08b3 : 0012 ; -- <0723> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    08b4 : 0602 ; -- <0724> b = $comm_grace_period_min
    08b5 : 4e00 ; -- <0725> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    08b6 : 5210 ; -- <0725> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 16
    08b7 : c800 ; -- <0725> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    08b8 : 4700 ; -- <0725> "
    08b9 : fc00 ; -- <0726> swapra = nop

-- :ftdi_off_msg -- = 0x08ba
-- "FTOF\x0"
    08ba : 5446 ; -- <0729> TF
    08bb : 464f ; -- <0729> FO
    08bc : 0000 ; -- <0729>   

-- ######## func ftdi_power_off -- = 0x08bd
    08bd : 203e ; -- <0731> push rtna -- func ftdi_power_off
    08be : 0018 ; -- <0732> a = board_ctrl
    08bf : 07a0 ; -- <0733> b = $not_ftdi_power_mask
    08c0 : ff7f ; -- <0733> "
    08c1 : c800 ; -- <0734> board_ctrl = and
    08c2 : 6330 ; -- <0734> "
    08c3 : 03a0 ; -- <0735> a = :ftdi_off_msg
    08c4 : 08ba ; -- <0735> "
    08c5 : fba0 ; -- <0736> call :set_text_flag
    08c6 : 08e1 ; -- <0736> "
    08c7 : fc00 ; -- <0736> "
    08c8 : f808 ; -- <0737> pop rtna -- end_func
    08c9 : fc00 ; -- <0737> swapra = nop

-- :ftdi_on_msg -- = 0x08ca
-- "FTON\x0"
    08ca : 5446 ; -- <0740> TF
    08cb : 4e4f ; -- <0740> NO
    08cc : 0000 ; -- <0740>   

-- ######## func ftdi_power_on -- = 0x08cd
    08cd : 203e ; -- <0742> push rtna -- func ftdi_power_on
    08ce : 0018 ; -- <0743> a = board_ctrl
    08cf : 0680 ; -- <0744> b = $ftdi_power_mask
    08d0 : c800 ; -- <0745> board_ctrl = or
    08d1 : 6334 ; -- <0745> "
    08d2 : 03a0 ; -- <0746> a = :ftdi_on_msg
    08d3 : 08ca ; -- <0746> "
    08d4 : fba0 ; -- <0747> call :set_text_flag
    08d5 : 08e1 ; -- <0747> "
    08d6 : fc00 ; -- <0747> "
    08d7 : f808 ; -- <0748> pop rtna -- end_func
    08d8 : fc00 ; -- <0748> swapra = nop

-- ######## func clear_ram_page -- = 0x08d9
-- pass the page to be cleared in av_ad_hi.
    08d9 : 0200 ; -- <0752> a = 0
    08da : 0602 ; -- <0753> b = 2
-- :clear_next_word -- = 0x08db
    08db : 5000 ; -- <0755> av_ad_lo = a
    08dc : 4600 ; -- <0756> av_write_data = 0
    08dd : 0300 ; -- <0757> a = ad0
    08de : e400 ; -- <0758> bn az :clear_next_word
    08df : 08db ; -- <0758> "
    08e0 : fc00 ; -- <0759> swapra = nop

-- ######## func set_text_flag -- = 0x08e1
    08e1 : 0400 ; -- <0762> b = a
    08e2 : 4e00 ; -- <0763> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    08e3 : 5258 ; -- <0763> ram a = $ram_next_tfp_idx -- av_ad_lo = 88
    08e4 : 0011 ; -- <0763> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    08e5 : 0012 ; -- <0763> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle
    08e6 : 2000 ; -- <0764> push a -- push a

    08e7 : 0351 ; -- <0765> a = a<<1
    08e8 : 2001 ; -- <0765> push b -- push b
    08e9 : 0648 ; -- <0765> b = 72
    08ea : 4e00 ; -- <0765> av_ad_hi = 0
    08eb : 5300 ; -- <0765> av_ad_lo = ad0
    08ec : 4408 ; -- <0765> pop av_write_data -- pop av_write_data

    08ed : 0008 ; -- <0766> pop a -- pop a
    08ee : 0760 ; -- <0767> b = -1
    08ef : c800 ; -- <0768> a = a+b
    08f0 : 0300 ; -- <0768> "
    08f1 : 0607 ; -- <0769> b = $tfp_mask
    08f2 : 4e00 ; -- <0770> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    08f3 : 5258 ; -- <0770> ram $ram_next_tfp_idx = and -- av_ad_lo = 88
    08f4 : c800 ; -- <0770> ram $ram_next_tfp_idx = and -- av_write_data = and
    08f5 : 4730 ; -- <0770> "
    08f6 : fc00 ; -- <0771> swapra = nop

-- :text_flags_msg -- = 0x08f7
-- " tf=\x0"
    08f7 : 7420 ; -- <0774> t 
    08f8 : 3d66 ; -- <0774> =f
    08f9 : 0000 ; -- <0774>   

-- ######## func report_text_flags -- = 0x08fa
    08fa : 2002 ; -- <0776> push i -- func report_text_flags
    08fb : 203e ; -- <0776> push rtna -- "
    08fc : 03a0 ; -- <0777> a = :text_flags_msg
    08fd : 08f7 ; -- <0777> "
    08fe : fba0 ; -- <0778> call :print_nt
    08ff : 013f ; -- <0778> "
    0900 : fc00 ; -- <0778> "
    0901 : 0a00 ; -- <0789> i = 0
-- :loop_2305 -- = 0x0902

    0902 : 0002 ; -- <0789> a = i

    0903 : 0351 ; -- <0789> a = a<<1
    0904 : 0648 ; -- <0789> b = 72
    0905 : 4e00 ; -- <0789> av_ad_hi = 0
    0906 : 5300 ; -- <0789> av_ad_lo = ad0
    0907 : 0411 ; -- <0789> b = av_write_data
    0908 : 0412 ; -- <0789> b = av_read_data


    0909 : 0001 ; -- <0789> a = b
    090a : 0600 ; -- <0789> b = 0


    090b : e007 ; -- <0789> br eq :else_2315
    090c : 091c ; -- <0789> "

    090d : fba0 ; -- <0789> call :print_nt
    090e : 013f ; -- <0789> "
    090f : fc00 ; -- <0789> "
    0910 : 022c ; -- <0789> a = 44 -- putasc ","
    0911 : fba0 ; -- <0789> putasc ","
    0912 : 008b ; -- <0789> "
    0913 : fc00 ; -- <0789> "
    0914 : 0002 ; -- <0789> a = i
    0915 : 0600 ; -- <0789> b = 0

    0916 : 0351 ; -- <0789> a = a<<1
    0917 : 2001 ; -- <0789> push b -- push b
    0918 : 0648 ; -- <0789> b = 72
    0919 : 4e00 ; -- <0789> av_ad_hi = 0
    091a : 5300 ; -- <0789> av_ad_lo = ad0
    091b : 4408 ; -- <0789> pop av_write_data -- pop av_write_data



-- :else_2315 -- = 0x091c

-- :end_2315 -- = 0x091c



    091c : 0002 ; -- <0789> a = i
    091d : 0601 ; -- <0789> b = 1
    091e : c800 ; -- <0789> i = a+b
    091f : 0b00 ; -- <0789> "


    0920 : 0002 ; -- <0789> a = i
    0921 : 0608 ; -- <0789> b = $num_text_flag_pointers
    0922 : e005 ; -- <0789> br lt :loop_2305
    0923 : 0902 ; -- <0789> "

-- :end_2305 -- = 0x0924
    0924 : f808 ; -- <0790> pop rtna -- end_func
    0925 : 0808 ; -- <0790> pop i -- "
    0926 : fc00 ; -- <0790> swapra = nop

-- :plan_msg -- = 0x0927
-- " pl=\x0"
    0927 : 7020 ; -- <0793> p 
    0928 : 3d6c ; -- <0793> =l
    0929 : 0000 ; -- <0793>   

-- ######## func report_plan -- = 0x092a
    092a : 203e ; -- <0795> push rtna -- func report_plan
    092b : 03a0 ; -- <0796> a = :plan_msg
    092c : 0927 ; -- <0796> "
    092d : fba0 ; -- <0797> call :print_nt
    092e : 013f ; -- <0797> "
    092f : fc00 ; -- <0797> "
    0930 : 4e00 ; -- <0798> ram a = $ram_plan_name -- av_ad_hi = 0
    0931 : 528a ; -- <0798> ram a = $ram_plan_name -- av_ad_lo = 138
    0932 : 0011 ; -- <0798> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    0933 : 0012 ; -- <0798> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    0934 : fba0 ; -- <0799> call :print_nt
    0935 : 013f ; -- <0799> "
    0936 : fc00 ; -- <0799> "
    0937 : f808 ; -- <0800> pop rtna -- end_func
    0938 : fc00 ; -- <0800> swapra = nop

-- ######## func jf_to_rpm -- = 0x0939
    0939 : 203e ; -- <0802> push rtna -- func jf_to_rpm
-- pass jiffies in a.  return rpm in a.
-- resolution = 32 rpm.
    093a : 0400 ; -- <0805> b = a
    093b : 03a0 ; -- <0806> a = 0x5573
    093c : 5573 ; -- <0806> "
-- = 700000 >> 5
    093d : fba0 ; -- <0808> call :divide
    093e : 017c ; -- <0808> "
    093f : fc00 ; -- <0808> "
    0940 : 0001 ; -- <0809> a = b
    0941 : 0352 ; -- <0810> a = a<<4
    0942 : 0351 ; -- <0811> a = a<<1
    0943 : f808 ; -- <0812> pop rtna -- end_func
    0944 : fc00 ; -- <0812> swapra = nop

-- ######## func check_engine_stop -- = 0x0945
    0945 : 203e ; -- <0814> push rtna -- func check_engine_stop
-- returns a=1 if transitioned to stop, else a=0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.

    0946 : 001a ; -- <0828> a = power_duty
    0947 : 0680 ; -- <0828> b = ( 0x0080 )


    0948 : e003 ; -- <0828> br and0z :else_2376
    0949 : 095d ; -- <0828> "

    094a : 4e00 ; -- <0828> ram a = $ram_rpm_valid -- av_ad_hi = 0
    094b : 5280 ; -- <0828> ram a = $ram_rpm_valid -- av_ad_lo = 128
    094c : 0011 ; -- <0828> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    094d : 0012 ; -- <0828> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    094e : 0000 ; -- <0828> a = a
    094f : 0600 ; -- <0828> b = 0


    0950 : e407 ; -- <0828> bn eq :else_2384
    0951 : 095d ; -- <0828> "

    0952 : 4e00 ; -- <0828> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0953 : 5290 ; -- <0828> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    0954 : f811 ; -- <0828> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0955 : f812 ; -- <0828> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0956 : fc00 ; -- <0828> swapra = nop
    0957 : fba0 ; -- <0828> call :init_plan_stop
    0958 : 02e7 ; -- <0828> "
    0959 : fc00 ; -- <0828> "
    095a : 0201 ; -- <0828> a = 1
    095b : f808 ; -- <0828> pop rtna -- rtn
    095c : fc00 ; -- <0828> swapra = nop


-- :else_2384 -- = 0x095d

-- :end_2384 -- = 0x095d



-- :else_2376 -- = 0x095d

-- :end_2376 -- = 0x095d

    095d : 0200 ; -- <0829> a = 0
    095e : f808 ; -- <0830> pop rtna -- end_func
    095f : fc00 ; -- <0830> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 pa
-- src reg 0005 pb
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 oa
-- src reg 0007 ob
-- src reg 0008 rstk
-- src reg 0009 event_priority
-- src reg 000a soft_event
-- src reg 000b usage_count
-- src reg 000c ustimer0
-- src reg 000d mstimer0
-- src reg 000e mstimer1
-- src reg 000f mstimer2
-- src reg 0010 spi_data
-- src reg 0011 av_write_data
-- src reg 0012 av_read_data
-- src reg 0013 av_ad_hi
-- src reg 0014 av_ad_lo
-- src reg 0015 fduart_data
-- src reg 0016 fduart_status
-- src reg 0017 leds
-- src reg 0018 board_ctrl
-- src reg 0019 anmux_ctrl
-- src reg 001a power_duty
-- src reg 001b ign_capture_jf
-- src reg 001c ign_timeout_len_jf
-- src reg 001d puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 pa
-- dest reg 0005 pb
-- dest reg 0006 oa
-- dest reg 0007 ob
-- dest reg 0008 rstk
-- dest reg 0009 event_priority
-- dest reg 000a soft_event
-- dest reg 000b usage_count
-- dest reg 000c ustimer0
-- dest reg 000d mstimer0
-- dest reg 000e mstimer1
-- dest reg 000f mstimer2
-- dest reg 0010 spi_data
-- dest reg 0011 av_write_data
-- dest reg 0013 av_ad_hi
-- dest reg 0014 av_ad_lo
-- dest reg 0015 fduart_data
-- dest reg 0016 fduart_status
-- dest reg 0017 leds
-- dest reg 0018 board_ctrl
-- dest reg 0019 anmux_ctrl
-- dest reg 001a power_duty
-- dest reg 001c ign_timeout_len_jf
-- dest reg 001d puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_daq_discard_cnt
-- ram 00000018 ram_last_anmux_data
-- ram 00000028 ram_last_adc_data
-- ram 00000038 ram_adc_chn_pending
-- ram 0000003a ram_adc_junk
-- ram 0000003c ram_dial_setting
-- ram 0000003e ram_power_down_at_min
-- ram 00000040 ram_relay_hold_at_pass
-- ram 00000042 ram_minutes_cnt
-- ram 00000044 ram_seconds_cnt
-- ram 00000046 ram_mcu_usage_cnt
-- ram 00000048 ram_text_flag_pointers
-- ram 00000058 ram_next_tfp_idx
-- ram 0000005a ram_ign_history_idx
-- ram 0000005c ram_ign_history_jf
-- ram 0000007c ram_ign_avg_jf
-- ram 0000007e ram_avg_rpm
-- ram 00000080 ram_rpm_valid
-- ram 00000082 ram_ign_bad_samples
-- ram 00000084 ram_ign_fastest_jf
-- ram 00000086 ram_ign_slowest_jf
-- ram 00000088 ram_next_puff_len_us
-- ram 0000008a ram_plan_name
-- ram 0000008c ram_puff_len_func
-- ram 0000008e ram_transition_func
-- ram 00000090 ram_destroy_plan_func
-- ram 00000092 ram_next_puff_len_us
-- ram 00000094 ram_puff_count
-- ram 00000096 ram_terminal_connected
-- ram 00000098 ram_warmup_timeout_at_pass
-- ram 0000009a ram_run_ticks_remain
-- ram 0000009c smap
-- ram 000000b6 ram_lrns_ticks_remain
-- ram 000000b8 ram_o2_state
-- ram 000000ba ram_o2_been_rich
-- ram 000000bc ram_o2_been_lean
        
        END;
    
