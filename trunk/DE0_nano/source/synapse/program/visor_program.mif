
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- register file configuration

-- application-specific register aliases.





--alias_src  tg_debug_out	    [incr counter]  {}


    0000 : e00f ; -- <0052> jmp :main
    0001 : 00d7 ; -- <0052> "


-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
-- ######## func putchar_atx -- = 0x0002
    0002 : 2004 ; -- <0035> push x -- func putchar_atx

    0003 : 1000 ; -- <0037> x = a

-- wait for UART to be idle (not busy).
    0004 : 0202 ; -- <0040> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x0005
    0005 : 0412 ; -- <0042> b = atx_ctrl
    0006 : e403 ; -- <0043> bn and0z :pcatx_wait_for_idle
    0007 : 0005 ; -- <0043> "

-- push word to the UART.  its low byte is a character.
    0008 : 4404 ; -- <0046> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    0009 : 4a01 ; -- <0051> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    000a : 0202 ; -- <0054> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x000b
    000b : 0412 ; -- <0056> b = atx_ctrl
    000c : e003 ; -- <0057> br and0z :pcatx_wait_for_busy
    000d : 000b ; -- <0057> "
    000e : 4a00 ; -- <0058> atx_ctrl = 0
    000f : 1008 ; -- <0059> pop x -- end_func
    0010 : fc00 ; -- <0059> end_func

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_atx -- = 0x0011
-- wait until UART is busy, then idle.
    0011 : 0204 ; -- <0065> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0012
    0012 : 0412 ; -- <0067> b = atx_ctrl
    0013 : e003 ; -- <0068> br and0z :wait_for_busy
    0014 : 0012 ; -- <0068> "
-- :wait_for_idle -- = 0x0015
    0015 : 0412 ; -- <0070> b = atx_ctrl
    0016 : e403 ; -- <0071> bn and0z :wait_for_idle
    0017 : 0015 ; -- <0071> "
    0018 : 0011 ; -- <0072> a = atx_data
    0019 : fc00 ; -- <0073> end_func

-- returns a character in a, or -1 if none.
-- this version can miss characters if not polled while the character is arriving.
-- ######## func pollchar_atx -- = 0x001a
-- check for UART is busy, then idle.
    001a : 0204 ; -- <0079> a = $arx_busy_mask
    001b : 0412 ; -- <0080> b = atx_ctrl
    001c : e003 ; -- <0081> br and0z :none
    001d : 0023 ; -- <0081> "
-- :wait_for_idle -- = 0x001e
    001e : 0412 ; -- <0083> b = atx_ctrl
    001f : e403 ; -- <0084> bn and0z :wait_for_idle
    0020 : 001e ; -- <0084> "
    0021 : 0011 ; -- <0085> a = atx_data
    0022 : fc00 ; -- <0086> rtn
-- :none -- = 0x0023
    0023 : 0360 ; -- <0088> a = -1
    0024 : fc00 ; -- <0089> end_func



-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x0025
    0025 : 0601 ; -- <0005> b = 1
    0026 : e003 ; -- <0006> br and0z :pick_byte_even
    0027 : 0030 ; -- <0006> "
    0028 : 0350 ; -- <0007> a = a>>1
    0029 : 0404 ; -- <0008> b = x
    002a : c800 ; -- <0009> fetch a from a+b
    002b : d300 ; -- <0009> "
    002c : 03b0 ; -- <0009> "
    002d : 0353 ; -- <0010> a = a>>4
    002e : 0353 ; -- <0011> a = a>>4
    002f : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x0030
    0030 : 0350 ; -- <0014> a = a>>1
    0031 : 0404 ; -- <0015> b = x
    0032 : c800 ; -- <0016> fetch a from a+b
    0033 : d300 ; -- <0016> "
    0034 : 03b0 ; -- <0016> "
    0035 : 06ff ; -- <0017> b = 0xff
    0036 : c800 ; -- <0018> a = and
    0037 : 0330 ; -- <0018> "
    0038 : fc00 ; -- <0019> end_func

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x0039
    0039 : 2002 ; -- <0027> push i -- func find_in_fetch
    003a : 2003 ; -- <0027> push j -- "
    003b : 2005 ; -- <0027> push y -- "
    003c : 203e ; -- <0027> push rtna -- "
    003d : 1400 ; -- <0028> y = a
    003e : 0f60 ; -- <0029> j = -1
-- :again -- = 0x003f
    003f : e001 ; -- <0031> br iz :fail
    0040 : 004f ; -- <0031> "
    0041 : 0b10 ; -- <0032> i = ad1
    0042 : 0002 ; -- <0033> a = i
    0043 : fba0 ; -- <0034> call :fetch_byte
    0044 : 0025 ; -- <0034> "
    0045 : fc00 ; -- <0034> "
    0046 : 0405 ; -- <0035> b = y
    0047 : e407 ; -- <0036> bn eq :again
    0048 : 003f ; -- <0036> "
-- :found -- = 0x0049
    0049 : 0002 ; -- <0038> a = i
    004a : f808 ; -- <0039> pop rtna -- rtn
    004b : 1408 ; -- <0039> pop y -- "
    004c : 0c08 ; -- <0039> pop j -- "
    004d : 0808 ; -- <0039> pop i -- "
    004e : fc00 ; -- <0039> rtn
-- :fail -- = 0x004f
    004f : 0360 ; -- <0041> a = -1
    0050 : f808 ; -- <0042> pop rtna -- end_func
    0051 : 1408 ; -- <0042> pop y -- "
    0052 : 0c08 ; -- <0042> pop j -- "
    0053 : 0808 ; -- <0042> pop i -- "
    0054 : fc00 ; -- <0042> end_func



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0055
-- "0123456789abcdef"
    0055 : 3130 ; -- <0050> 10
    0056 : 3332 ; -- <0050> 32
    0057 : 3534 ; -- <0050> 54
    0058 : 3736 ; -- <0050> 76
    0059 : 3938 ; -- <0050> 98
    005a : 6261 ; -- <0050> ba
    005b : 6463 ; -- <0050> dc
    005c : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x005d
    005d : 2004 ; -- <0054> push x -- func put4x
    005e : 2006 ; -- <0054> push g6 -- "
    005f : 203e ; -- <0054> push rtna -- "
    0060 : 13a0 ; -- <0055> x = :hexdigits
    0061 : 0055 ; -- <0055> "

    0062 : 1800 ; -- <0057> g6 = a
    0063 : 07a0 ; -- <0058> b = 0xF000
    0064 : f000 ; -- <0058> "
    0065 : c800 ; -- <0059> a = and
    0066 : 0330 ; -- <0059> "
    0067 : 0353 ; -- <0060> a = a>>4
    0068 : 0353 ; -- <0061> a = a>>4
    0069 : 0353 ; -- <0062> a = a>>4
    006a : fba0 ; -- <0063> call fetch_byte
    006b : 0025 ; -- <0063> "
    006c : fc00 ; -- <0063> "
    006d : 0000 ; -- <0064> a = a -- putchar a
    006e : fba0 ; -- <0064> putchar a
    006f : 0002 ; -- <0064> "
    0070 : fc00 ; -- <0064> "

    0071 : 0006 ; -- <0066> a = g6
    0072 : 07a0 ; -- <0067> b = 0x0F00
    0073 : 0f00 ; -- <0067> "
    0074 : c800 ; -- <0068> a = and
    0075 : 0330 ; -- <0068> "
    0076 : 0353 ; -- <0069> a = a>>4
    0077 : 0353 ; -- <0070> a = a>>4
    0078 : fba0 ; -- <0071> call fetch_byte
    0079 : 0025 ; -- <0071> "
    007a : fc00 ; -- <0071> "
    007b : 0000 ; -- <0072> a = a -- putchar a
    007c : fba0 ; -- <0072> putchar a
    007d : 0002 ; -- <0072> "
    007e : fc00 ; -- <0072> "

    007f : 0006 ; -- <0074> a = g6
    0080 : 06f0 ; -- <0075> b = 0x00F0
    0081 : c800 ; -- <0076> a = and
    0082 : 0330 ; -- <0076> "
    0083 : 0353 ; -- <0077> a = a>>4
    0084 : fba0 ; -- <0078> call fetch_byte
    0085 : 0025 ; -- <0078> "
    0086 : fc00 ; -- <0078> "
    0087 : 0000 ; -- <0079> a = a -- putchar a
    0088 : fba0 ; -- <0079> putchar a
    0089 : 0002 ; -- <0079> "
    008a : fc00 ; -- <0079> "

    008b : 0006 ; -- <0081> a = g6
    008c : 060f ; -- <0082> b = 0x000F
    008d : c800 ; -- <0083> a = and
    008e : 0330 ; -- <0083> "
    008f : fba0 ; -- <0084> call fetch_byte
    0090 : 0025 ; -- <0084> "
    0091 : fc00 ; -- <0084> "
    0092 : 0000 ; -- <0085> a = a -- putchar a
    0093 : fba0 ; -- <0085> putchar a
    0094 : 0002 ; -- <0085> "
    0095 : fc00 ; -- <0085> "

    0096 : f808 ; -- <0087> pop rtna -- end_func
    0097 : 1808 ; -- <0087> pop g6 -- "
    0098 : 1008 ; -- <0087> pop x -- "
    0099 : fc00 ; -- <0087> end_func

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x009a
    009a : 2002 ; -- <0091> push i -- func get4x
    009b : 2003 ; -- <0091> push j -- "
    009c : 2004 ; -- <0091> push x -- "
    009d : 2005 ; -- <0091> push y -- "
    009e : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    009f : 1604 ; -- <0094> y = 4
-- :again -- = 0x00a0
    00a0 : fba0 ; -- <0096> getchar
    00a1 : 0011 ; -- <0096> "
    00a2 : fc00 ; -- <0096> "
    00a3 : 13a0 ; -- <0097> x = :hexdigits
    00a4 : 0055 ; -- <0097> "
    00a5 : 0a10 ; -- <0098> i = 16
    00a6 : fba0 ; -- <0099> call :find_in_fetch
    00a7 : 0039 ; -- <0099> "
    00a8 : fc00 ; -- <0099> "
    00a9 : 0760 ; -- <0100> b = -1
    00aa : e007 ; -- <0101> br eq :fail
    00ab : 00bf ; -- <0101> "
    00ac : 0400 ; -- <0102> b = a
    00ad : 0003 ; -- <0103> a = j
    00ae : 0352 ; -- <0104> a = a<<4
    00af : c800 ; -- <0105> j = or
    00b0 : 0f34 ; -- <0105> "
    00b1 : 1360 ; -- <0106> x = -1
    00b2 : c800 ; -- <0107> y = x+y
    00b3 : 1720 ; -- <0107> "
    00b4 : 0005 ; -- <0108> a = y
    00b5 : e400 ; -- <0109> bn az :again
    00b6 : 00a0 ; -- <0109> "
    00b7 : 0003 ; -- <0110> a = j
    00b8 : 0600 ; -- <0111> b = 0
    00b9 : f808 ; -- <0112> pop rtna -- rtn
    00ba : 1408 ; -- <0112> pop y -- "
    00bb : 1008 ; -- <0112> pop x -- "
    00bc : 0c08 ; -- <0112> pop j -- "
    00bd : 0808 ; -- <0112> pop i -- "
    00be : fc00 ; -- <0112> rtn
-- :fail -- = 0x00bf
    00bf : 0760 ; -- <0114> b = -1
    00c0 : f808 ; -- <0115> pop rtna -- end_func
    00c1 : 1408 ; -- <0115> pop y -- "
    00c2 : 1008 ; -- <0115> pop x -- "
    00c3 : 0c08 ; -- <0115> pop j -- "
    00c4 : 0808 ; -- <0115> pop i -- "
    00c5 : fc00 ; -- <0115> end_func

-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x00c6
    00c6 : 2004 ; -- <0002> push x -- func spinwait
    00c7 : 2005 ; -- <0002> push y -- "
--patch
--rtn
    00c8 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00c9
    00c9 : 13a0 ; -- <0007> x = 16666
    00ca : 411a ; -- <0007> "
    00cb : 1760 ; -- <0008> y = -1
    00cc : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00cd
-- use of the ad2 name overrides auto-nop here.
    00cd : 1320 ; -- <0012> x = ad2
    00ce : e402 ; -- <0013> bn xz :spinwait_inner
    00cf : 00cd ; -- <0013> "
    00d0 : c800 ; -- <0014> a = a+b
    00d1 : 0300 ; -- <0014> "
    00d2 : e400 ; -- <0015> bn az :spinwait_outer
    00d3 : 00c9 ; -- <0015> "
    00d4 : 1408 ; -- <0016> pop y -- end_func
    00d5 : 1008 ; -- <0016> pop x -- "
    00d6 : fc00 ; -- <0016> end_func




-- --------------------------------------------
-- :main -- = 0x00d7
-- put target into reset.
    00d7 : 3e02 ; -- <0070> bus_ctrl = $tg_reset_mask

-- init visor.
    00d8 : 3360 ; -- <0073> bp3_addr = $bp_disable
    00d9 : 2f60 ; -- <0074> bp2_addr = $bp_disable
    00da : 2b60 ; -- <0075> bp1_addr = $bp_disable
    00db : 2760 ; -- <0076> bp0_addr = $bp_disable

-- startup message
    00dc : 020d ; -- <0079> a = 13 -- puteol
    00dd : 0000 ; -- <0079> a = a -- puteol
    00de : fba0 ; -- <0079> puteol
    00df : 0002 ; -- <0079> "
    00e0 : fc00 ; -- <0079> "
    00e1 : 020a ; -- <0079> a = 10 -- puteol
    00e2 : 0000 ; -- <0079> a = a -- puteol
    00e3 : fba0 ; -- <0079> puteol
    00e4 : 0002 ; -- <0079> "
    00e5 : fc00 ; -- <0079> "
    00e6 : 0256 ; -- <0080> a = 86 -- putasc "V"
    00e7 : 0000 ; -- <0080> a = a -- putasc "V"
    00e8 : fba0 ; -- <0080> putasc "V"
    00e9 : 0002 ; -- <0080> "
    00ea : fc00 ; -- <0080> "
    00eb : 0249 ; -- <0081> a = 73 -- putasc "I"
    00ec : 0000 ; -- <0081> a = a -- putasc "I"
    00ed : fba0 ; -- <0081> putasc "I"
    00ee : 0002 ; -- <0081> "
    00ef : fc00 ; -- <0081> "
    00f0 : 0253 ; -- <0082> a = 83 -- putasc "S"
    00f1 : 0000 ; -- <0082> a = a -- putasc "S"
    00f2 : fba0 ; -- <0082> putasc "S"
    00f3 : 0002 ; -- <0082> "
    00f4 : fc00 ; -- <0082> "
    00f5 : 024f ; -- <0083> a = 79 -- putasc "O"
    00f6 : 0000 ; -- <0083> a = a -- putasc "O"
    00f7 : fba0 ; -- <0083> putasc "O"
    00f8 : 0002 ; -- <0083> "
    00f9 : fc00 ; -- <0083> "
    00fa : 0252 ; -- <0084> a = 82 -- putasc "R"
    00fb : 0000 ; -- <0084> a = a -- putasc "R"
    00fc : fba0 ; -- <0084> putasc "R"
    00fd : 0002 ; -- <0084> "
    00fe : fc00 ; -- <0084> "

-- check for bootloader signal.
    00ff : 0019 ; -- <0087> a = boot_break
    0100 : e400 ; -- <0088> bn az :boot_run
    0101 : 0108 ; -- <0088> "
-- ^^^ for press-to-debug; runs target by default.
-- br az :boot_run
-- ^^^ for press-to-run; debugs target by default.
-- step into the first target instruction.
    0102 : 3e08 ; -- <0093> bus_ctrl = $bp_step_mask
    0103 : fba0 ; -- <0094> call :wait_for_bp
    0104 : 01b8 ; -- <0094> "
    0105 : fc00 ; -- <0094> "
    0106 : e00f ; -- <0095> jmp :cmd_loop
    0107 : 0109 ; -- <0095> "
-- release target reset, to run.
-- :boot_run -- = 0x0108
    0108 : 3e00 ; -- <0098> bus_ctrl = 0

-- command prompt loop.
-- :cmd_loop -- = 0x0109
    0109 : 000f ; -- <0102> a = bus_ctrl
    010a : 0600 ; -- <0103> b = 0
    010b : e007 ; -- <0104> br eq :running_prompt
    010c : 0132 ; -- <0104> "

    010d : fba0 ; -- <0106> call :dump_target
    010e : 027f ; -- <0106> "
    010f : fc00 ; -- <0106> "
    0110 : 0016 ; -- <0107> a = tg_code_addr
    0111 : fba0 ; -- <0108> call :put4x
    0112 : 005d ; -- <0108> "
    0113 : fc00 ; -- <0108> "
    0114 : 022c ; -- <0109> a = 44 -- putasc ","
    0115 : 0000 ; -- <0109> a = a -- putasc ","
    0116 : fba0 ; -- <0109> putasc ","
    0117 : 0002 ; -- <0109> "
    0118 : fc00 ; -- <0109> "
    0119 : 0015 ; -- <0110> a = exr_shadow
    011a : fba0 ; -- <0111> call :put4x
    011b : 005d ; -- <0111> "
    011c : fc00 ; -- <0111> "
    011d : 0220 ; -- <0112> a = 32 -- putasc " "
    011e : 0000 ; -- <0112> a = a -- putasc " "
    011f : fba0 ; -- <0112> putasc " "
    0120 : 0002 ; -- <0112> "
    0121 : fc00 ; -- <0112> "
    0122 : 023e ; -- <0113> a = 62 -- putasc ">"
    0123 : 0000 ; -- <0113> a = a -- putasc ">"
    0124 : fba0 ; -- <0113> putasc ">"
    0125 : 0002 ; -- <0113> "
    0126 : fc00 ; -- <0113> "
    0127 : fba0 ; -- <0114> getchar_echo
    0128 : 0011 ; -- <0114> "
    0129 : fc00 ; -- <0114> "
    012a : 2000 ; -- <0114> push a -- "
    012b : 0000 ; -- <0114> a = a -- "
    012c : fba0 ; -- <0114> "
    012d : 0002 ; -- <0114> "
    012e : fc00 ; -- <0114> "
    012f : 0008 ; -- <0114> pop a -- "
    0130 : e00f ; -- <0115> jmp :parse_cmd
    0131 : 0161 ; -- <0115> "

-- :running_prompt -- = 0x0132
    0132 : 020d ; -- <0118> a = 13 -- puteol
    0133 : 0000 ; -- <0118> a = a -- puteol
    0134 : fba0 ; -- <0118> puteol
    0135 : 0002 ; -- <0118> "
    0136 : fc00 ; -- <0118> "
    0137 : 020a ; -- <0118> a = 10 -- puteol
    0138 : 0000 ; -- <0118> a = a -- puteol
    0139 : fba0 ; -- <0118> puteol
    013a : 0002 ; -- <0118> "
    013b : fc00 ; -- <0118> "
    013c : 0252 ; -- <0119> a = 82 -- putasc "R"
    013d : 0000 ; -- <0119> a = a -- putasc "R"
    013e : fba0 ; -- <0119> putasc "R"
    013f : 0002 ; -- <0119> "
    0140 : fc00 ; -- <0119> "
    0141 : 0255 ; -- <0120> a = 85 -- putasc "U"
    0142 : 0000 ; -- <0120> a = a -- putasc "U"
    0143 : fba0 ; -- <0120> putasc "U"
    0144 : 0002 ; -- <0120> "
    0145 : fc00 ; -- <0120> "
    0146 : 024e ; -- <0121> a = 78 -- putasc "N"
    0147 : 0000 ; -- <0121> a = a -- putasc "N"
    0148 : fba0 ; -- <0121> putasc "N"
    0149 : 0002 ; -- <0121> "
    014a : fc00 ; -- <0121> "
    014b : 0220 ; -- <0122> a = 32 -- putasc " "
    014c : 0000 ; -- <0122> a = a -- putasc " "
    014d : fba0 ; -- <0122> putasc " "
    014e : 0002 ; -- <0122> "
    014f : fc00 ; -- <0122> "
    0150 : 023e ; -- <0123> a = 62 -- putasc ">"
    0151 : 0000 ; -- <0123> a = a -- putasc ">"
    0152 : fba0 ; -- <0123> putasc ">"
    0153 : 0002 ; -- <0123> "
    0154 : fc00 ; -- <0123> "
-- :run_poll -- = 0x0155
    0155 : fba0 ; -- <0125> pollchar
    0156 : 001a ; -- <0125> "
    0157 : fc00 ; -- <0125> "
    0158 : 0760 ; -- <0126> b = -1
    0159 : e407 ; -- <0127> bn eq :parse_cmd
    015a : 0161 ; -- <0127> "
    015b : 0018 ; -- <0128> a = bp_status
    015c : e000 ; -- <0129> br az :run_poll
    015d : 0155 ; -- <0129> "
-- target hit a breakpoint; switch to stepping mode.
    015e : 3e08 ; -- <0131> bus_ctrl = $bp_step_mask
    015f : e00f ; -- <0132> jmp :cmd_loop
    0160 : 0109 ; -- <0132> "

-- :parse_cmd -- = 0x0161

-- command = step next instruction.
    0161 : 066e ; -- <0137> b = 110 -- asc b = "n"
    0162 : e407 ; -- <0138> bn eq :skip_step
    0163 : 016b ; -- <0138> "
    0164 : 3e08 ; -- <0139> bus_ctrl = $bp_step_mask
    0165 : 2409 ; -- <0140> bp0_addr = bp0_addr
    0166 : fba0 ; -- <0141> call :wait_for_bp
    0167 : 01b8 ; -- <0141> "
    0168 : fc00 ; -- <0141> "
    0169 : e00f ; -- <0142> jmp :cmd_loop
    016a : 0109 ; -- <0142> "
-- :skip_step -- = 0x016b

-- command = reset target.
    016b : 0652 ; -- <0146> b = 82 -- asc b = "R"
    016c : e407 ; -- <0147> bn eq :skip_reset
    016d : 0177 ; -- <0147> "
    016e : 3e02 ; -- <0148> bus_ctrl = $tg_reset_mask
    016f : c800 ; -- <0149> nop
    0170 : c800 ; -- <0150> nop
    0171 : 3e08 ; -- <0151> bus_ctrl = $bp_step_mask
    0172 : fba0 ; -- <0152> call :wait_for_bp
    0173 : 01b8 ; -- <0152> "
    0174 : fc00 ; -- <0152> "
    0175 : e00f ; -- <0153> jmp :cmd_loop
    0176 : 0109 ; -- <0153> "
-- :skip_reset -- = 0x0177

-- command = load program.
    0177 : 066c ; -- <0157> b = 108 -- asc b = "l"
    0178 : e407 ; -- <0158> bn eq :skip_load
    0179 : 017f ; -- <0158> "
    017a : fba0 ; -- <0159> call :load_program
    017b : 0212 ; -- <0159> "
    017c : fc00 ; -- <0159> "
    017d : e00f ; -- <0160> jmp :cmd_loop
    017e : 0109 ; -- <0160> "
-- :skip_load -- = 0x017f

-- command = run full speed.
    017f : 0672 ; -- <0164> b = 114 -- asc b = "r"
    0180 : e407 ; -- <0165> bn eq :skip_run
    0181 : 0186 ; -- <0165> "
-- release target reset, to run.
    0182 : 3e00 ; -- <0167> bus_ctrl = 0
    0183 : 2409 ; -- <0168> bp0_addr = bp0_addr
    0184 : e00f ; -- <0169> jmp :cmd_loop
    0185 : 0109 ; -- <0169> "
-- :skip_run -- = 0x0186

-- command = set breakpoint.
    0186 : 0662 ; -- <0173> b = 98 -- asc b = "b"
    0187 : e407 ; -- <0174> bn eq :skip_setbrk
    0188 : 018e ; -- <0174> "
    0189 : fba0 ; -- <0175> call :set_bp
    018a : 01bc ; -- <0175> "
    018b : fc00 ; -- <0175> "
    018c : e00f ; -- <0176> jmp :cmd_loop
    018d : 0109 ; -- <0176> "
-- :skip_setbrk -- = 0x018e

    018e : 023f ; -- <0179> a = 63 -- putasc "?"
    018f : 0000 ; -- <0179> a = a -- putasc "?"
    0190 : fba0 ; -- <0179> putasc "?"
    0191 : 0002 ; -- <0179> "
    0192 : fc00 ; -- <0179> "
    0193 : 020d ; -- <0180> a = 13 -- puteol
    0194 : 0000 ; -- <0180> a = a -- puteol
    0195 : fba0 ; -- <0180> puteol
    0196 : 0002 ; -- <0180> "
    0197 : fc00 ; -- <0180> "
    0198 : 020a ; -- <0180> a = 10 -- puteol
    0199 : 0000 ; -- <0180> a = a -- puteol
    019a : fba0 ; -- <0180> puteol
    019b : 0002 ; -- <0180> "
    019c : fc00 ; -- <0180> "
    019d : e00f ; -- <0181> jmp :cmd_loop
    019e : 0109 ; -- <0181> "

-- demonstrations ------------------------------

-- set a breakpoint, wait til it hits.
    019f : 2615 ; -- <0186> bp0_addr = 0x15
-- :main_loop -- = 0x01a0
    01a0 : fba0 ; -- <0188> call :wait_for_bp
    01a1 : 01b8 ; -- <0188> "
    01a2 : fc00 ; -- <0188> "

-- release target to run full speed.
    01a3 : 3e00 ; -- <0191> bus_ctrl = 0

-- interrupt the target and single step it a few times.
    01a4 : 3e08 ; -- <0194> bus_ctrl = $bp_step_mask
    01a5 : fba0 ; -- <0195> call :wait_for_bp
    01a6 : 01b8 ; -- <0195> "
    01a7 : fc00 ; -- <0195> "
    01a8 : 2409 ; -- <0196> bp0_addr = bp0_addr
    01a9 : fba0 ; -- <0197> call :wait_for_bp
    01aa : 01b8 ; -- <0197> "
    01ab : fc00 ; -- <0197> "
    01ac : 2409 ; -- <0198> bp0_addr = bp0_addr
    01ad : fba0 ; -- <0199> call :wait_for_bp
    01ae : 01b8 ; -- <0199> "
    01af : fc00 ; -- <0199> "
    01b0 : 2409 ; -- <0200> bp0_addr = bp0_addr
    01b1 : fba0 ; -- <0201> call :wait_for_bp
    01b2 : 01b8 ; -- <0201> "
    01b3 : fc00 ; -- <0201> "
    01b4 : 3e00 ; -- <0202> bus_ctrl = 0

-- release target to pass breakpoint once.
    01b5 : 2409 ; -- <0205> bp0_addr = bp0_addr

    01b6 : e00f ; -- <0207> jmp :main_loop
    01b7 : 01a0 ; -- <0207> "

-- ######## func wait_for_bp -- = 0x01b8
-- :poll -- = 0x01b8
    01b8 : 0018 ; -- <0211> a = bp_status
    01b9 : e000 ; -- <0212> br az :poll
    01ba : 01b8 ; -- <0212> "
    01bb : fc00 ; -- <0213> end_func

-- ######## func set_bp -- = 0x01bc
    01bc : 2004 ; -- <0215> push x -- func set_bp
    01bd : 2005 ; -- <0215> push y -- "
    01be : 203e ; -- <0215> push rtna -- "
    01bf : fba0 ; -- <0216> getchar_echo
    01c0 : 0011 ; -- <0216> "
    01c1 : fc00 ; -- <0216> "
    01c2 : 2000 ; -- <0216> push a -- "
    01c3 : 0000 ; -- <0216> a = a -- "
    01c4 : fba0 ; -- <0216> "
    01c5 : 0002 ; -- <0216> "
    01c6 : fc00 ; -- <0216> "
    01c7 : 0008 ; -- <0216> pop a -- "
    01c8 : 1000 ; -- <0217> x = a
    01c9 : fba0 ; -- <0218> getchar_echo
    01ca : 0011 ; -- <0218> "
    01cb : fc00 ; -- <0218> "
    01cc : 2000 ; -- <0218> push a -- "
    01cd : 0000 ; -- <0218> a = a -- "
    01ce : fba0 ; -- <0218> "
    01cf : 0002 ; -- <0218> "
    01d0 : fc00 ; -- <0218> "
    01d1 : 0008 ; -- <0218> pop a -- "
    01d2 : 063d ; -- <0219> b = 61 -- asc b = "="
    01d3 : e407 ; -- <0220> bn eq :fail
    01d4 : 01ff ; -- <0220> "
    01d5 : fba0 ; -- <0221> call :get4x
    01d6 : 009a ; -- <0221> "
    01d7 : fc00 ; -- <0221> "
    01d8 : 1400 ; -- <0222> y = a
    01d9 : 0200 ; -- <0223> a = 0
    01da : e407 ; -- <0224> bn eq :fail
    01db : 01ff ; -- <0224> "
    01dc : 0004 ; -- <0225> a = x
    01dd : 0630 ; -- <0226> b = 48 -- asc b = "0"
    01de : e007 ; -- <0227> br eq :b0
    01df : 01eb ; -- <0227> "
    01e0 : 0631 ; -- <0228> b = 49 -- asc b = "1"
    01e1 : e007 ; -- <0229> br eq :b1
    01e2 : 01f0 ; -- <0229> "
    01e3 : 0632 ; -- <0230> b = 50 -- asc b = "2"
    01e4 : e007 ; -- <0231> br eq :b2
    01e5 : 01f5 ; -- <0231> "
    01e6 : 0633 ; -- <0232> b = 51 -- asc b = "3"
    01e7 : e007 ; -- <0233> br eq :b3
    01e8 : 01fa ; -- <0233> "
    01e9 : e00f ; -- <0234> jmp :fail
    01ea : 01ff ; -- <0234> "
-- :b0 -- = 0x01eb
    01eb : 2405 ; -- <0236> bp0_addr = y
    01ec : f808 ; -- <0237> pop rtna -- rtn
    01ed : 1408 ; -- <0237> pop y -- "
    01ee : 1008 ; -- <0237> pop x -- "
    01ef : fc00 ; -- <0237> rtn
-- :b1 -- = 0x01f0
    01f0 : 2805 ; -- <0239> bp1_addr = y
    01f1 : f808 ; -- <0240> pop rtna -- rtn
    01f2 : 1408 ; -- <0240> pop y -- "
    01f3 : 1008 ; -- <0240> pop x -- "
    01f4 : fc00 ; -- <0240> rtn
-- :b2 -- = 0x01f5
    01f5 : 2c05 ; -- <0242> bp2_addr = y
    01f6 : f808 ; -- <0243> pop rtna -- rtn
    01f7 : 1408 ; -- <0243> pop y -- "
    01f8 : 1008 ; -- <0243> pop x -- "
    01f9 : fc00 ; -- <0243> rtn
-- :b3 -- = 0x01fa
    01fa : 3005 ; -- <0245> bp3_addr = y
    01fb : f808 ; -- <0246> pop rtna -- rtn
    01fc : 1408 ; -- <0246> pop y -- "
    01fd : 1008 ; -- <0246> pop x -- "
    01fe : fc00 ; -- <0246> rtn
-- :fail -- = 0x01ff
    01ff : 023f ; -- <0248> a = 63 -- putasc "?"
    0200 : 0000 ; -- <0248> a = a -- putasc "?"
    0201 : fba0 ; -- <0248> putasc "?"
    0202 : 0002 ; -- <0248> "
    0203 : fc00 ; -- <0248> "
    0204 : 020d ; -- <0249> a = 13 -- puteol
    0205 : 0000 ; -- <0249> a = a -- puteol
    0206 : fba0 ; -- <0249> puteol
    0207 : 0002 ; -- <0249> "
    0208 : fc00 ; -- <0249> "
    0209 : 020a ; -- <0249> a = 10 -- puteol
    020a : 0000 ; -- <0249> a = a -- puteol
    020b : fba0 ; -- <0249> puteol
    020c : 0002 ; -- <0249> "
    020d : fc00 ; -- <0249> "
    020e : f808 ; -- <0250> pop rtna -- end_func
    020f : 1408 ; -- <0250> pop y -- "
    0210 : 1008 ; -- <0250> pop x -- "
    0211 : fc00 ; -- <0250> end_func

-- ######## func load_program -- = 0x0212
    0212 : 2002 ; -- <0252> push i -- func load_program
    0213 : 2003 ; -- <0252> push j -- "
    0214 : 2004 ; -- <0252> push x -- "
    0215 : 2006 ; -- <0252> push g6 -- "
    0216 : 203e ; -- <0252> push rtna -- "
-- load target program from UART.
-- length, little-endian.  memorize in x.
    0217 : 024c ; -- <0255> a = 76 -- putasc L
    0218 : 0000 ; -- <0255> a = a -- putasc L
    0219 : fba0 ; -- <0255> putasc L
    021a : 0002 ; -- <0255> "
    021b : fc00 ; -- <0255> "
    021c : fba0 ; -- <0256> get16 x
    021d : 0011 ; -- <0256> "
    021e : fc00 ; -- <0256> "
    021f : 2000 ; -- <0256> push a -- "
    0220 : fba0 ; -- <0256> "
    0221 : 0011 ; -- <0256> "
    0222 : fc00 ; -- <0256> "
    0223 : 0352 ; -- <0256> "
    0224 : 0352 ; -- <0256> "
    0225 : 0408 ; -- <0256> pop b -- "
    0226 : c800 ; -- <0256> "
    0227 : 1334 ; -- <0256> "
    0228 : 0004 ; -- <0257> a = x
    0229 : fba0 ; -- <0258> call put4x
    022a : 005d ; -- <0258> "
    022b : fc00 ; -- <0258> "
-- put target into reset again, in case this is a target warm boot.
    022c : 3e02 ; -- <0260> bus_ctrl = $tg_reset_mask
-- load opcodes.  count up address in i.
    022d : 0a00 ; -- <0262> i = 0
    022e : 0e01 ; -- <0263> j = 1
-- :loadword -- = 0x022f
    022f : 0241 ; -- <0265> a = 65 -- putasc A
    0230 : 0000 ; -- <0265> a = a -- putasc A
    0231 : fba0 ; -- <0265> putasc A
    0232 : 0002 ; -- <0265> "
    0233 : fc00 ; -- <0265> "
    0234 : 0002 ; -- <0266> a = i
    0235 : fba0 ; -- <0267> call put4x
    0236 : 005d ; -- <0267> "
    0237 : fc00 ; -- <0267> "
    0238 : 023d ; -- <0268> a = 61 -- putasc "="
    0239 : 0000 ; -- <0268> a = a -- putasc "="
    023a : fba0 ; -- <0268> putasc "="
    023b : 0002 ; -- <0268> "
    023c : fc00 ; -- <0268> "
    023d : fba0 ; -- <0269> get16 g6
    023e : 0011 ; -- <0269> "
    023f : fc00 ; -- <0269> "
    0240 : 2000 ; -- <0269> push a -- "
    0241 : fba0 ; -- <0269> "
    0242 : 0011 ; -- <0269> "
    0243 : fc00 ; -- <0269> "
    0244 : 0352 ; -- <0269> "
    0245 : 0352 ; -- <0269> "
    0246 : 0408 ; -- <0269> pop b -- "
    0247 : c800 ; -- <0269> "
    0248 : 1b34 ; -- <0269> "
    0249 : 0006 ; -- <0270> a = g6
    024a : fba0 ; -- <0271> call put4x
    024b : 005d ; -- <0271> "
    024c : fc00 ; -- <0271> "
    024d : 023d ; -- <0272> a = 61 -- putasc "="
    024e : 0000 ; -- <0272> a = a -- putasc "="
    024f : fba0 ; -- <0272> putasc "="
    0250 : 0002 ; -- <0272> "
    0251 : fc00 ; -- <0272> "
    0252 : 4c02 ; -- <0273> m9k_addr = i
    0253 : 5006 ; -- <0274> m9k_data = g6
    0254 : 0014 ; -- <0275> a = m9k_data
    0255 : fba0 ; -- <0276> call put4x
    0256 : 005d ; -- <0276> "
    0257 : fc00 ; -- <0276> "
    0258 : 020d ; -- <0277> a = 13 -- puteol
    0259 : 0000 ; -- <0277> a = a -- puteol
    025a : fba0 ; -- <0277> puteol
    025b : 0002 ; -- <0277> "
    025c : fc00 ; -- <0277> "
    025d : 020a ; -- <0277> a = 10 -- puteol
    025e : 0000 ; -- <0277> a = a -- puteol
    025f : fba0 ; -- <0277> puteol
    0260 : 0002 ; -- <0277> "
    0261 : fc00 ; -- <0277> "
    0262 : c800 ; -- <0278> i = i+j
    0263 : 0b10 ; -- <0278> "
    0264 : 0002 ; -- <0279> a = i
    0265 : 0404 ; -- <0280> b = x
    0266 : e407 ; -- <0281> bn eq :loadword
    0267 : 022f ; -- <0281> "
    0268 : f808 ; -- <0282> pop rtna -- end_func
    0269 : 1808 ; -- <0282> pop g6 -- "
    026a : 1008 ; -- <0282> pop x -- "
    026b : 0c08 ; -- <0282> pop j -- "
    026c : 0808 ; -- <0282> pop i -- "
    026d : fc00 ; -- <0282> end_func

-- observe a register.  return its value in peek_data.
-- pass its register address in a.
-- ######## func peek -- = 0x026e
    026e : 07a0 ; -- <0287> b = 0x3ff
    026f : 03ff ; -- <0287> "
    0270 : c800 ; -- <0288> a = and
    0271 : 0330 ; -- <0288> "
-- debug_peek_reg = 31 << 10
    0272 : 07a0 ; -- <0290> b = 0x7c00
    0273 : 7c00 ; -- <0290> "
    0274 : c800 ; -- <0291> force_opcode = or
    0275 : 3734 ; -- <0291> "
    0276 : 3e04 ; -- <0292> bus_ctrl = $divert_code_bus_mask
    0277 : 4201 ; -- <0293> tg_force = $hold_state_mask
    0278 : 4203 ; -- <0294> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0279 : 4205 ; -- <0295> tg_force = ($hold_state_mask | $force_exec_mask)
    027a : 4201 ; -- <0296> tg_force = $hold_state_mask
-- target's register value is now in peek_data.
-- refill target exr so it can resume seamlessly.
    027b : 3415 ; -- <0299> force_opcode = exr_shadow
    027c : 4203 ; -- <0300> tg_force = ($hold_state_mask | $force_load_exr_mask)
    027d : 4200 ; -- <0301> tg_force = 0
    027e : fc00 ; -- <0302> end_func

-- show target status display.
-- ######## func dump_target -- = 0x027f
    027f : 2002 ; -- <0305> push i -- func dump_target
    0280 : 2003 ; -- <0305> push j -- "
    0281 : 2004 ; -- <0305> push x -- "
    0282 : 2005 ; -- <0305> push y -- "
    0283 : 203e ; -- <0305> push rtna -- "
    0284 : 020d ; -- <0306> a = 13 -- puteol
    0285 : 0000 ; -- <0306> a = a -- puteol
    0286 : fba0 ; -- <0306> puteol
    0287 : 0002 ; -- <0306> "
    0288 : fc00 ; -- <0306> "
    0289 : 020a ; -- <0306> a = 10 -- puteol
    028a : 0000 ; -- <0306> a = a -- puteol
    028b : fba0 ; -- <0306> puteol
    028c : 0002 ; -- <0306> "
    028d : fc00 ; -- <0306> "
    028e : 0a00 ; -- <0307> i = 0
-- :next_reg -- = 0x028f
-- fetch register name from table in target program.
-- i = register number.  x = 2-byte word index within each name string.
-- peek is skipped for any reg name starting with 2 slashes (good for read-sensitive regs).
    028f : 1200 ; -- <0312> x = 0
    0290 : 1601 ; -- <0313> y = 1
-- :next_chars -- = 0x0291
    0291 : 0002 ; -- <0315> a = i
    0292 : 0351 ; -- <0316> a = a<<1
    0293 : 0351 ; -- <0317> a = a<<1
    0294 : 0603 ; -- <0318> b = 3
    0295 : c800 ; -- <0319> a = a+b
    0296 : 0300 ; -- <0319> "
    0297 : 0404 ; -- <0320> b = x
    0298 : c800 ; -- <0321> m9k_addr = a+b
    0299 : 4f00 ; -- <0321> "
    029a : 0014 ; -- <0322> a = m9k_data
    029b : 07a0 ; -- <0323> b = 0x2f2f
    029c : 2f2f ; -- <0323> "
    029d : e007 ; -- <0324> br eq :no_peek
    029e : 02c7 ; -- <0324> "
    029f : 0014 ; -- <0325> a = m9k_data -- putchar m9k_data
    02a0 : fba0 ; -- <0325> putchar m9k_data
    02a1 : 0002 ; -- <0325> "
    02a2 : fc00 ; -- <0325> "
    02a3 : 0014 ; -- <0326> a = m9k_data
    02a4 : 0353 ; -- <0327> a = a>>4
    02a5 : 0353 ; -- <0328> a = a>>4
    02a6 : 0000 ; -- <0329> a = a -- putchar a
    02a7 : fba0 ; -- <0329> putchar a
    02a8 : 0002 ; -- <0329> "
    02a9 : fc00 ; -- <0329> "
    02aa : c800 ; -- <0330> x = x+y
    02ab : 1320 ; -- <0330> "
    02ac : 0004 ; -- <0331> a = x
    02ad : 0604 ; -- <0332> b = 4
    02ae : e407 ; -- <0333> bn eq :next_chars
    02af : 0291 ; -- <0333> "
    02b0 : 023d ; -- <0334> a = 61 -- putasc "="
    02b1 : 0000 ; -- <0334> a = a -- putasc "="
    02b2 : fba0 ; -- <0334> putasc "="
    02b3 : 0002 ; -- <0334> "
    02b4 : fc00 ; -- <0334> "
    02b5 : 0002 ; -- <0335> a = i
    02b6 : fba0 ; -- <0336> call :peek
    02b7 : 026e ; -- <0336> "
    02b8 : fc00 ; -- <0336> "
    02b9 : 0017 ; -- <0337> a = peek_data
    02ba : fba0 ; -- <0338> call :put4x
    02bb : 005d ; -- <0338> "
    02bc : fc00 ; -- <0338> "
    02bd : 020d ; -- <0339> a = 13 -- puteol
    02be : 0000 ; -- <0339> a = a -- puteol
    02bf : fba0 ; -- <0339> puteol
    02c0 : 0002 ; -- <0339> "
    02c1 : fc00 ; -- <0339> "
    02c2 : 020a ; -- <0339> a = 10 -- puteol
    02c3 : 0000 ; -- <0339> a = a -- puteol
    02c4 : fba0 ; -- <0339> puteol
    02c5 : 0002 ; -- <0339> "
    02c6 : fc00 ; -- <0339> "
-- :no_peek -- = 0x02c7
    02c7 : 0e01 ; -- <0341> j = 1
    02c8 : c800 ; -- <0342> i = i+j
    02c9 : 0b10 ; -- <0342> "
-- loop up to the number of registers in the target program's register name table.
    02ca : 4e02 ; -- <0344> m9k_addr = 2
    02cb : 0414 ; -- <0345> b = m9k_data
    02cc : 0002 ; -- <0346> a = i
    02cd : e407 ; -- <0347> bn eq :next_reg
    02ce : 028f ; -- <0347> "
    02cf : f808 ; -- <0348> pop rtna -- end_func
    02d0 : 1408 ; -- <0348> pop y -- "
    02d1 : 1008 ; -- <0348> pop x -- "
    02d2 : 0c08 ; -- <0348> pop j -- "
    02d3 : 0808 ; -- <0348> pop i -- "
    02d4 : fc00 ; -- <0348> end_func

        
        END;
    
