
        DEPTH = 2048 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- program code dimensions.

-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.

-- these are for the VISOR code, not the TARGET code.

-- register file configuration

-- application-specific register aliases.






-- Synapse instruction set architecture constants.


    0000 : e00f ; -- <0071> jmp :main
    0001 : 0138 ; -- <0071> "


-- driver library for my_uart_v2 simple async transceiver.



-- :eol_msg -- = 0x0002
-- "\r\n\x0"
    0002 : 0a0d ; -- <0011>   
    0003 : 0000 ; -- <0011>   


-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
-- ######## func putchar_atx -- = 0x0004
    0004 : 2004 ; -- <0038> push x -- func putchar_atx

    0005 : 1000 ; -- <0040> x = a

-- wait for UART to be idle (not busy).
    0006 : 0202 ; -- <0043> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x0007
    0007 : 0412 ; -- <0045> b = atx_ctrl
    0008 : e403 ; -- <0046> bn and0z :pcatx_wait_for_idle
    0009 : 0007 ; -- <0046> "

-- push word to the UART.  its low byte is a character.
    000a : 4404 ; -- <0049> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    000b : 4a01 ; -- <0054> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    000c : 0202 ; -- <0057> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x000d
    000d : 0412 ; -- <0059> b = atx_ctrl
    000e : e003 ; -- <0060> br and0z :pcatx_wait_for_busy
    000f : 000d ; -- <0060> "
    0010 : 4a00 ; -- <0061> atx_ctrl = 0
    0011 : 1008 ; -- <0062> pop x -- end_func
    0012 : fc00 ; -- <0062> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_atx -- = 0x0013
-- wait until UART is busy, then idle.
    0013 : 0204 ; -- <0068> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0014
    0014 : 0412 ; -- <0070> b = atx_ctrl
    0015 : e003 ; -- <0071> br and0z :wait_for_busy
    0016 : 0014 ; -- <0071> "
-- :wait_for_idle -- = 0x0017
    0017 : 0412 ; -- <0073> b = atx_ctrl
    0018 : e403 ; -- <0074> bn and0z :wait_for_idle
    0019 : 0017 ; -- <0074> "
    001a : 0011 ; -- <0075> a = atx_data
    001b : fc00 ; -- <0076> swapra = nop

-- returns a character in a, or -1 if none.
-- this version can miss characters if not polled while the character is arriving.
-- ######## func pollchar_atx -- = 0x001c
-- check for UART is busy, then idle.
    001c : 0204 ; -- <0082> a = $arx_busy_mask
    001d : 0412 ; -- <0083> b = atx_ctrl
    001e : e003 ; -- <0084> br and0z :none
    001f : 0025 ; -- <0084> "
-- :wait_for_idle -- = 0x0020
    0020 : 0412 ; -- <0086> b = atx_ctrl
    0021 : e403 ; -- <0087> bn and0z :wait_for_idle
    0022 : 0020 ; -- <0087> "
    0023 : 0011 ; -- <0088> a = atx_data
    0024 : fc00 ; -- <0089> swapra = nop
-- :none -- = 0x0025
    0025 : 0360 ; -- <0091> a = -1
    0026 : fc00 ; -- <0092> swapra = nop



-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x0027
    0027 : 0601 ; -- <0005> b = 1
    0028 : e003 ; -- <0006> br and0z :pick_byte_even
    0029 : 0032 ; -- <0006> "
    002a : 0350 ; -- <0007> a = a>>1
    002b : 0404 ; -- <0008> b = x
    002c : c800 ; -- <0009> fetch a from a+b
    002d : d300 ; -- <0009> "
    002e : 03b0 ; -- <0009> "
    002f : 0353 ; -- <0010> a = a>>4
    0030 : 0353 ; -- <0011> a = a>>4
    0031 : fc00 ; -- <0012> swapra = nop
-- :pick_byte_even -- = 0x0032
    0032 : 0350 ; -- <0014> a = a>>1
    0033 : 0404 ; -- <0015> b = x
    0034 : c800 ; -- <0016> fetch a from a+b
    0035 : d300 ; -- <0016> "
    0036 : 03b0 ; -- <0016> "
    0037 : 06ff ; -- <0017> b = 0xff
    0038 : c800 ; -- <0018> a = and
    0039 : 0330 ; -- <0018> "
    003a : fc00 ; -- <0019> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x003b
    003b : 2002 ; -- <0027> push i -- func find_in_fetch
    003c : 2003 ; -- <0027> push j -- "
    003d : 2005 ; -- <0027> push y -- "
    003e : 203e ; -- <0027> push rtna -- "
    003f : 1400 ; -- <0028> y = a
    0040 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0041
    0041 : e001 ; -- <0031> br iz :fail
    0042 : 0050 ; -- <0031> "
    0043 : 0b10 ; -- <0032> i = ad1
    0044 : 0002 ; -- <0033> a = i

    0045 : fa27 ; -- <0034> rtna = 39
    0046 : fc00 ; -- <0034> swapra = nop

    0047 : 0405 ; -- <0035> b = y
    0048 : e407 ; -- <0036> bn eq :again
    0049 : 0041 ; -- <0036> "
-- :found -- = 0x004a
    004a : 0002 ; -- <0038> a = i
    004b : f808 ; -- <0039> pop rtna -- rtn
    004c : 1408 ; -- <0039> pop y -- "
    004d : 0c08 ; -- <0039> pop j -- "
    004e : 0808 ; -- <0039> pop i -- "
    004f : fc00 ; -- <0039> swapra = nop
-- :fail -- = 0x0050
    0050 : 0360 ; -- <0041> a = -1
    0051 : f808 ; -- <0042> pop rtna -- end_func
    0052 : 1408 ; -- <0042> pop y -- "
    0053 : 0c08 ; -- <0042> pop j -- "
    0054 : 0808 ; -- <0042> pop i -- "
    0055 : fc00 ; -- <0042> swapra = nop



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0056
-- "0123456789abcdef"
    0056 : 3130 ; -- <0050> 10
    0057 : 3332 ; -- <0050> 32
    0058 : 3534 ; -- <0050> 54
    0059 : 3736 ; -- <0050> 76
    005a : 3938 ; -- <0050> 98
    005b : 6261 ; -- <0050> ba
    005c : 6463 ; -- <0050> dc
    005d : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x005e
    005e : 2004 ; -- <0054> push x -- func put4x
    005f : 2006 ; -- <0054> push g6 -- "
    0060 : 203e ; -- <0054> push rtna -- "
    0061 : 13a0 ; -- <0055> x = :hexdigits
    0062 : 0056 ; -- <0055> "

    0063 : 1800 ; -- <0057> g6 = a
    0064 : 07a0 ; -- <0058> b = 0xF000
    0065 : f000 ; -- <0058> "
    0066 : c800 ; -- <0059> a = and
    0067 : 0330 ; -- <0059> "
    0068 : 0353 ; -- <0060> a = a>>4
    0069 : 0353 ; -- <0061> a = a>>4
    006a : 0353 ; -- <0062> a = a>>4

    006b : fa27 ; -- <0063> rtna = 39
    006c : fc00 ; -- <0063> swapra = nop


    006d : fa04 ; -- <0064> rtna = 4
    006e : fc00 ; -- <0064> swapra = nop


    006f : 0006 ; -- <0066> a = g6
    0070 : 07a0 ; -- <0067> b = 0x0F00
    0071 : 0f00 ; -- <0067> "
    0072 : c800 ; -- <0068> a = and
    0073 : 0330 ; -- <0068> "
    0074 : 0353 ; -- <0069> a = a>>4
    0075 : 0353 ; -- <0070> a = a>>4

    0076 : fa27 ; -- <0071> rtna = 39
    0077 : fc00 ; -- <0071> swapra = nop


    0078 : fa04 ; -- <0072> rtna = 4
    0079 : fc00 ; -- <0072> swapra = nop


    007a : 0006 ; -- <0074> a = g6
    007b : 06f0 ; -- <0075> b = 0x00F0
    007c : c800 ; -- <0076> a = and
    007d : 0330 ; -- <0076> "
    007e : 0353 ; -- <0077> a = a>>4

    007f : fa27 ; -- <0078> rtna = 39
    0080 : fc00 ; -- <0078> swapra = nop


    0081 : fa04 ; -- <0079> rtna = 4
    0082 : fc00 ; -- <0079> swapra = nop


    0083 : 0006 ; -- <0081> a = g6
    0084 : 060f ; -- <0082> b = 0x000F
    0085 : c800 ; -- <0083> a = and
    0086 : 0330 ; -- <0083> "

    0087 : fa27 ; -- <0084> rtna = 39
    0088 : fc00 ; -- <0084> swapra = nop


    0089 : fa04 ; -- <0085> rtna = 4
    008a : fc00 ; -- <0085> swapra = nop


    008b : f808 ; -- <0087> pop rtna -- end_func
    008c : 1808 ; -- <0087> pop g6 -- "
    008d : 1008 ; -- <0087> pop x -- "
    008e : fc00 ; -- <0087> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x008f
    008f : 2002 ; -- <0091> push i -- func get4x
    0090 : 2003 ; -- <0091> push j -- "
    0091 : 2004 ; -- <0091> push x -- "
    0092 : 2005 ; -- <0091> push y -- "
    0093 : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    0094 : 1604 ; -- <0094> y = 4
-- :again -- = 0x0095

    0095 : fa13 ; -- <0096> rtna = 19
    0096 : fc00 ; -- <0096> swapra = nop

    0097 : 13a0 ; -- <0097> x = :hexdigits
    0098 : 0056 ; -- <0097> "
    0099 : 0a10 ; -- <0098> i = 16

    009a : fa3b ; -- <0099> rtna = 59
    009b : fc00 ; -- <0099> swapra = nop

    009c : 0760 ; -- <0100> b = -1
    009d : e007 ; -- <0101> br eq :fail
    009e : 00b2 ; -- <0101> "
    009f : 0400 ; -- <0102> b = a
    00a0 : 0003 ; -- <0103> a = j
    00a1 : 0352 ; -- <0104> a = a<<4
    00a2 : c800 ; -- <0105> j = or
    00a3 : 0f34 ; -- <0105> "
    00a4 : 1360 ; -- <0106> x = -1
    00a5 : c800 ; -- <0107> y = x+y
    00a6 : 1720 ; -- <0107> "
    00a7 : 0005 ; -- <0108> a = y
    00a8 : e400 ; -- <0109> bn az :again
    00a9 : 0095 ; -- <0109> "
    00aa : 0003 ; -- <0110> a = j
    00ab : 0600 ; -- <0111> b = 0
    00ac : f808 ; -- <0112> pop rtna -- rtn
    00ad : 1408 ; -- <0112> pop y -- "
    00ae : 1008 ; -- <0112> pop x -- "
    00af : 0c08 ; -- <0112> pop j -- "
    00b0 : 0808 ; -- <0112> pop i -- "
    00b1 : fc00 ; -- <0112> swapra = nop
-- :fail -- = 0x00b2
    00b2 : 0760 ; -- <0114> b = -1
    00b3 : f808 ; -- <0115> pop rtna -- end_func
    00b4 : 1408 ; -- <0115> pop y -- "
    00b5 : 1008 ; -- <0115> pop x -- "
    00b6 : 0c08 ; -- <0115> pop j -- "
    00b7 : 0808 ; -- <0115> pop i -- "
    00b8 : fc00 ; -- <0115> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x00b9
    00b9 : 2002 ; -- <0121> push i -- func print_fixed
    00ba : 2003 ; -- <0121> push j -- "
    00bb : 2004 ; -- <0121> push x -- "
    00bc : 2005 ; -- <0121> push y -- "
    00bd : 2006 ; -- <0121> push g6 -- "
    00be : 203e ; -- <0121> push rtna -- "
    00bf : 0800 ; -- <0122> i = a
    00c0 : 0e01 ; -- <0123> j = 1
    00c1 : 1001 ; -- <0124> x = b
    00c2 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x00c3
    00c3 : e002 ; -- <0127> br xz :done
    00c4 : 00d7 ; -- <0127> "
    00c5 : 1320 ; -- <0128> x = ad2
    00c6 : d002 ; -- <0129> fetch g6 from i
    00c7 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, g6 = data word.
    00c8 : 0006 ; -- <0131> a = g6 -- putchar g6

    00c9 : fa04 ; -- <0131> rtna = 4
    00ca : fc00 ; -- <0131> swapra = nop

    00cb : e002 ; -- <0132> br xz :done
    00cc : 00d7 ; -- <0132> "
    00cd : 1320 ; -- <0133> x = ad2
    00ce : 0006 ; -- <0134> a = g6
    00cf : 0353 ; -- <0135> a = a>>4
    00d0 : 0353 ; -- <0136> a = a>>4

    00d1 : fa04 ; -- <0137> rtna = 4
    00d2 : fc00 ; -- <0137> swapra = nop

    00d3 : c800 ; -- <0138> i = i+j
    00d4 : 0b10 ; -- <0138> "
    00d5 : e00f ; -- <0139> jmp :next_word
    00d6 : 00c3 ; -- <0139> "
-- :done -- = 0x00d7
    00d7 : f808 ; -- <0141> pop rtna -- end_func
    00d8 : 1808 ; -- <0141> pop g6 -- "
    00d9 : 1408 ; -- <0141> pop y -- "
    00da : 1008 ; -- <0141> pop x -- "
    00db : 0c08 ; -- <0141> pop j -- "
    00dc : 0808 ; -- <0141> pop i -- "
    00dd : fc00 ; -- <0141> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x00de
    00de : 2002 ; -- <0147> push i -- func print_nt
    00df : 2003 ; -- <0147> push j -- "
    00e0 : 2004 ; -- <0147> push x -- "
    00e1 : 203e ; -- <0147> push rtna -- "
    00e2 : 0800 ; -- <0148> i = a
    00e3 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x00e4
    00e4 : d002 ; -- <0151> fetch x from i
    00e5 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    00e6 : 0004 ; -- <0153> a = x
    00e7 : 06ff ; -- <0154> b = 0xff
    00e8 : e003 ; -- <0155> br and0z :done
    00e9 : 00f8 ; -- <0155> "

    00ea : fa04 ; -- <0156> rtna = 4
    00eb : fc00 ; -- <0156> swapra = nop

    00ec : 0004 ; -- <0157> a = x
    00ed : 0353 ; -- <0158> a = a>>4
    00ee : 0353 ; -- <0159> a = a>>4
    00ef : 06ff ; -- <0160> b = 0xff
    00f0 : e003 ; -- <0161> br and0z :done
    00f1 : 00f8 ; -- <0161> "

    00f2 : fa04 ; -- <0162> rtna = 4
    00f3 : fc00 ; -- <0162> swapra = nop

    00f4 : c800 ; -- <0163> i = i+j
    00f5 : 0b10 ; -- <0163> "
    00f6 : e00f ; -- <0164> jmp :next_word
    00f7 : 00e4 ; -- <0164> "
-- :done -- = 0x00f8
    00f8 : f808 ; -- <0166> pop rtna -- end_func
    00f9 : 1008 ; -- <0166> pop x -- "
    00fa : 0c08 ; -- <0166> pop j -- "
    00fb : 0808 ; -- <0166> pop i -- "
    00fc : fc00 ; -- <0166> swapra = nop




-- ######## func fletcher16_init -- = 0x00fd
    00fd : 1a00 ; -- <0005> $fletcher_sum1_reg = 0
    00fe : 1e00 ; -- <0006> $fletcher_sum2_reg = 0
    00ff : fc00 ; -- <0007> swapra = nop

-- compute the modulus(255) of a number given in a.  return remainder in a.
-- ######## func mod255 -- = 0x0100
-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x0100
    0100 : 06fe ; -- <0013> b = 0xfe
    0101 : e006 ; -- <0014> br gt :mod255_greater
    0102 : 0104 ; -- <0014> "
    0103 : fc00 ; -- <0015> swapra = nop
-- :mod255_greater -- = 0x0104
    0104 : 07a0 ; -- <0017> b = 0xff01
    0105 : ff01 ; -- <0017> "
    0106 : c800 ; -- <0018> a = a+b
    0107 : 0300 ; -- <0018> "
    0108 : e00f ; -- <0019> jmp :mod255_again
    0109 : 0100 ; -- <0019> "
    010a : fc00 ; -- <0020> swapra = nop

-- accumulate a Fletcher16 checksum, given the next byte of data in a.
-- ######## func fletcher16_input8 -- = 0x010b
    010b : 203e ; -- <0023> push rtna -- func fletcher16_input8
    010c : 0406 ; -- <0024> b = $fletcher_sum1_reg
    010d : c800 ; -- <0025> a = a+b
    010e : 0300 ; -- <0025> "

    010f : fba0 ; -- <0026> rtna = 256
    0110 : 0100 ; -- <0026> "
    0111 : fc00 ; -- <0026> swapra = nop

    0112 : 1800 ; -- <0027> $fletcher_sum1_reg = a

    0113 : 0407 ; -- <0029> b = $fletcher_sum2_reg
    0114 : c800 ; -- <0030> a = a+b
    0115 : 0300 ; -- <0030> "

    0116 : fba0 ; -- <0031> rtna = 256
    0117 : 0100 ; -- <0031> "
    0118 : fc00 ; -- <0031> swapra = nop

    0119 : 1c00 ; -- <0032> $fletcher_sum2_reg = a
    011a : f808 ; -- <0033> pop rtna -- end_func
    011b : fc00 ; -- <0033> swapra = nop

-- accumulate a Fletcher16 checksum, given the next word of data in a.
-- ######## func fletcher16_input16 -- = 0x011c
    011c : 2002 ; -- <0036> push i -- func fletcher16_input16
    011d : 203e ; -- <0036> push rtna -- "
    011e : 0b53 ; -- <0037> i = a>>4
    011f : 06ff ; -- <0038> b = 0xff
    0120 : c800 ; -- <0039> a = and
    0121 : 0330 ; -- <0039> "

    0122 : fba0 ; -- <0040> rtna = 267
    0123 : 010b ; -- <0040> "
    0124 : fc00 ; -- <0040> swapra = nop

    0125 : 0002 ; -- <0041> a = i
    0126 : 0353 ; -- <0042> a = a>>4

    0127 : fba0 ; -- <0043> rtna = 267
    0128 : 010b ; -- <0043> "
    0129 : fc00 ; -- <0043> swapra = nop

    012a : f808 ; -- <0044> pop rtna -- end_func
    012b : 0808 ; -- <0044> pop i -- "
    012c : fc00 ; -- <0044> swapra = nop

-- return the combined 16-bit result of Fletcher16 checksum in a.
-- ######## func fletcher16_result -- = 0x012d
    012d : 0007 ; -- <0048> a = $fletcher_sum2_reg
    012e : 0352 ; -- <0049> a = a<<4
    012f : 0352 ; -- <0050> a = a<<4
    0130 : 0406 ; -- <0051> b = $fletcher_sum1_reg
    0131 : c800 ; -- <0052> a = or
    0132 : 0334 ; -- <0052> "
    0133 : fc00 ; -- <0053> swapra = nop




-- :boot_msg -- = 0x0134
-- "\r\nVISOR\x0"
    0134 : 0a0d ; -- <0090>   
    0135 : 4956 ; -- <0090> IV
    0136 : 4f53 ; -- <0090> OS
    0137 : 0052 ; -- <0090>  R
-- :running_msg -- = 0x0138
-- "\r\nRUN >\x0"
    0138 : 0a0d ; -- <0092>   
    0139 : 5552 ; -- <0092> UR
    013a : 204e ; -- <0092>  N
    013b : 003e ; -- <0092>  >

-- --------------------------------------------
-- :main -- = 0x013c
-- put target into reset.
    013c : 3e02 ; -- <0097> bus_ctrl = $tg_reset_mask

-- init visor.
    013d : 3360 ; -- <0100> bp3_addr = $bp_disable
    013e : 2f60 ; -- <0101> bp2_addr = $bp_disable
    013f : 2b60 ; -- <0102> bp1_addr = $bp_disable
    0140 : 2760 ; -- <0103> bp0_addr = $bp_disable

-- startup message
    0141 : 03a0 ; -- <0106> a = :boot_msg
    0142 : 0134 ; -- <0106> "

    0143 : fade ; -- <0107> rtna = 222
    0144 : fc00 ; -- <0107> swapra = nop


-- check for bootloader signal.
    0145 : 0019 ; -- <0110> a = boot_break
    0146 : e400 ; -- <0111> bn az :boot_run
    0147 : 0149 ; -- <0111> "
-- ^^^ for press-to-debug; runs target by default.
-- br az :boot_run
-- ^^^ for press-to-run; debugs target by default.

-- step into the first target instruction.
    0148 : 3e08 ; -- <0117> bus_ctrl = $bp_step_mask

    0149 : fba0 ; -- <0118> rtna = 635
    014a : 027b ; -- <0118> "
    014b : fc00 ; -- <0118> swapra = nop

    014c : e00f ; -- <0119> jmp :cmd_loop
    014d : 014a ; -- <0119> "
-- :boot_run -- = 0x014e
-- release target reset, to run.
    014e : 3e00 ; -- <0122> bus_ctrl = 0

-- command prompt loop.
-- :cmd_loop -- = 0x014f
    014f : 000f ; -- <0126> a = bus_ctrl
    0150 : 0600 ; -- <0127> b = 0
    0151 : e007 ; -- <0128> br eq :running_prompt
    0152 : 0167 ; -- <0128> "


    0153 : fba0 ; -- <0130> rtna = 787
    0154 : 0313 ; -- <0130> "
    0155 : fc00 ; -- <0130> swapra = nop

    0156 : 0016 ; -- <0131> a = tg_code_addr

    0157 : fa5e ; -- <0132> rtna = 94
    0158 : fc00 ; -- <0132> swapra = nop

    0159 : 022c ; -- <0133> a = 44 -- putasc ","

    015a : fa04 ; -- <0133> rtna = 4
    015b : fc00 ; -- <0133> swapra = nop

    015c : 0015 ; -- <0134> a = exr_shadow

    015d : fa5e ; -- <0135> rtna = 94
    015e : fc00 ; -- <0135> swapra = nop

    015f : 0220 ; -- <0136> a = 32 -- putasc " "

    0160 : fa04 ; -- <0136> rtna = 4
    0161 : fc00 ; -- <0136> swapra = nop

    0162 : 023e ; -- <0137> a = 62 -- putasc ">"

    0163 : fa04 ; -- <0137> rtna = 4
    0164 : fc00 ; -- <0137> swapra = nop


    0165 : fa13 ; -- <0138> rtna = 19
    0166 : fc00 ; -- <0138> swapra = nop

    0167 : 2000 ; -- <0138> push a -- "

    0168 : fa04 ; -- <0138> rtna = 4
    0169 : fc00 ; -- <0138> swapra = nop

    016a : 0008 ; -- <0138> pop a -- "
    016b : e00f ; -- <0139> jmp :parse_cmd
    016c : 0176 ; -- <0139> "

-- :running_prompt -- = 0x016d
    016d : 03a0 ; -- <0142> a = :running_msg
    016e : 0138 ; -- <0142> "

    016f : fade ; -- <0143> rtna = 222
    0170 : fc00 ; -- <0143> swapra = nop

-- :run_poll -- = 0x0171

    0171 : fa1c ; -- <0145> rtna = 28
    0172 : fc00 ; -- <0145> swapra = nop

    0173 : 0760 ; -- <0146> b = -1
    0174 : e407 ; -- <0147> bn eq :parse_cmd
    0175 : 0176 ; -- <0147> "
    0176 : 0018 ; -- <0148> a = bp_status
    0177 : e000 ; -- <0149> br az :run_poll
    0178 : 0171 ; -- <0149> "
-- target hit a breakpoint; switch to stepping mode.
    0179 : 3e08 ; -- <0151> bus_ctrl = $bp_step_mask
    017a : e00f ; -- <0152> jmp :cmd_loop
    017b : 014f ; -- <0152> "

-- :parse_cmd -- = 0x017c

-- command = step next instruction.
    017c : 066e ; -- <0157> b = 110 -- asc b = "n"
    017d : e407 ; -- <0158> bn eq :skip_step
    017e : 017f ; -- <0158> "
    017f : 3e08 ; -- <0159> bus_ctrl = $bp_step_mask
    0180 : 2409 ; -- <0160> bp0_addr = bp0_addr

    0181 : fba0 ; -- <0161> rtna = 635
    0182 : 027b ; -- <0161> "
    0183 : fc00 ; -- <0161> swapra = nop

    0184 : e00f ; -- <0162> jmp :cmd_loop
    0185 : 014f ; -- <0162> "
-- :skip_step -- = 0x0186

-- command = reset target.
    0186 : 0652 ; -- <0166> b = 82 -- asc b = "R"
    0187 : e407 ; -- <0167> bn eq :skip_reset
    0188 : 018a ; -- <0167> "
    0189 : 3e02 ; -- <0168> bus_ctrl = $tg_reset_mask
    018a : c800 ; -- <0169> nop
    018b : c800 ; -- <0170> nop
    018c : 3e08 ; -- <0171> bus_ctrl = $bp_step_mask

    018d : fba0 ; -- <0172> rtna = 635
    018e : 027b ; -- <0172> "
    018f : fc00 ; -- <0172> swapra = nop

    0190 : e00f ; -- <0173> jmp :cmd_loop
    0191 : 014f ; -- <0173> "
-- :skip_reset -- = 0x0192

-- command = load program.
    0192 : 066c ; -- <0177> b = 108 -- asc b = "l"
    0193 : e407 ; -- <0178> bn eq :skip_load
    0194 : 0191 ; -- <0178> "

    0195 : fba0 ; -- <0179> rtna = 881
    0196 : 0371 ; -- <0179> "
    0197 : fc00 ; -- <0179> swapra = nop

    0198 : e00f ; -- <0180> jmp :cmd_loop
    0199 : 014f ; -- <0180> "
-- :skip_load -- = 0x019a

-- command = run full speed.
    019a : 0672 ; -- <0184> b = 114 -- asc b = "r"
    019b : e407 ; -- <0185> bn eq :skip_run
    019c : 0198 ; -- <0185> "
-- release target reset, to run.
    019d : 3e00 ; -- <0187> bus_ctrl = 0
    019e : 2409 ; -- <0188> bp0_addr = bp0_addr
    019f : e00f ; -- <0189> jmp :cmd_loop
    01a0 : 014f ; -- <0189> "
-- :skip_run -- = 0x01a1

-- command = set breakpoint.
    01a1 : 0662 ; -- <0193> b = 98 -- asc b = "b"
    01a2 : e407 ; -- <0194> bn eq :skip_setbrk
    01a3 : 019f ; -- <0194> "

    01a4 : fba0 ; -- <0195> rtna = 639
    01a5 : 027f ; -- <0195> "
    01a6 : fc00 ; -- <0195> swapra = nop

    01a7 : e00f ; -- <0196> jmp :cmd_loop
    01a8 : 014f ; -- <0196> "
-- :skip_setbrk -- = 0x01a9

-- command = poke register.
    01a9 : 066f ; -- <0200> b = 111 -- asc b = "o"
    01aa : e407 ; -- <0201> bn eq :skip_poke
    01ab : 01a6 ; -- <0201> "

    01ac : fba0 ; -- <0202> rtna = 710
    01ad : 02c6 ; -- <0202> "
    01ae : fc00 ; -- <0202> swapra = nop

    01af : e00f ; -- <0203> jmp :cmd_loop
    01b0 : 014f ; -- <0203> "
-- :skip_poke -- = 0x01b1

-- command = dump Avalon data e.g. from SDRAM.
    01b1 : 0675 ; -- <0207> b = 117 -- asc b = "u"
    01b2 : e407 ; -- <0208> bn eq :skip_dump
    01b3 : 01ad ; -- <0208> "

    01b4 : fba0 ; -- <0209> rtna = 438
    01b5 : 01b6 ; -- <0209> "
    01b6 : fc00 ; -- <0209> swapra = nop

    01b7 : e00f ; -- <0210> jmp :cmd_loop
    01b8 : 014f ; -- <0210> "
-- :skip_dump -- = 0x01b9

    01b9 : 023f ; -- <0213> a = 63 -- putasc "?"

    01ba : fa04 ; -- <0213> rtna = 4
    01bb : fc00 ; -- <0213> swapra = nop

    01bc : 03a0 ; -- <0214> a = :eol_msg -- puteol
    01bd : 0002 ; -- <0214> "

    01be : fade ; -- <0214> rtna = 222
    01bf : fc00 ; -- <0214> swapra = nop

    01c0 : e00f ; -- <0215> jmp :cmd_loop
    01c1 : 014f ; -- <0215> "


-- ######## func dump_avalon -- = 0x01c2
    01c2 : 2002 ; -- <0244> push i -- func dump_avalon
    01c3 : 2003 ; -- <0244> push j -- "
    01c4 : 2004 ; -- <0244> push x -- "
    01c5 : 2005 ; -- <0244> push y -- "
    01c6 : 2006 ; -- <0244> push g6 -- "
    01c7 : 2007 ; -- <0244> push g7 -- "
    01c8 : 203e ; -- <0244> push rtna -- "
-- test case: u0010 0011 0013 0012 0000 0000 0080.

-- this func may borrow some peripheral registers to hold temporary data.
-- but it can only borrow registers that don't have side effects that are relevant to this function.

-- parse av_write_data reg address into av_data_regs high byte.

    01c9 : fa8f ; -- <0253> rtna = 143
    01ca : fc00 ; -- <0253> swapra = nop

    01cb : 0801 ; -- <0254> i = b
    01cc : e401 ; -- <0255> bn iz :fail
    01cd : 0258 ; -- <0255> "
    01ce : 0352 ; -- <0256> a = a<<4
    01cf : 1b52 ; -- <0257> $av_data_regs = a<<4

    01d0 : fa13 ; -- <0258> rtna = 19
    01d1 : fc00 ; -- <0258> swapra = nop

    01d2 : 2000 ; -- <0258> push a -- "

    01d3 : fa04 ; -- <0258> rtna = 4
    01d4 : fc00 ; -- <0258> swapra = nop

    01d5 : 0008 ; -- <0258> pop a -- "

-- parse av_read_data reg address into av_data_regs low byte.

    01d6 : fa8f ; -- <0261> rtna = 143
    01d7 : fc00 ; -- <0261> swapra = nop

    01d8 : 0801 ; -- <0262> i = b
    01d9 : e401 ; -- <0263> bn iz :fail
    01da : 0258 ; -- <0263> "
    01db : 0406 ; -- <0264> b = $av_data_regs
    01dc : c800 ; -- <0265> $av_data_regs = or
    01dd : 1b34 ; -- <0265> "

    01de : fa13 ; -- <0266> rtna = 19
    01df : fc00 ; -- <0266> swapra = nop

    01e0 : 2000 ; -- <0266> push a -- "

    01e1 : fa04 ; -- <0266> rtna = 4
    01e2 : fc00 ; -- <0266> swapra = nop

    01e3 : 0008 ; -- <0266> pop a -- "

-- parse av_ad_lo reg address into av_ad_lo_reg.

    01e4 : fa8f ; -- <0269> rtna = 143
    01e5 : fc00 ; -- <0269> swapra = nop

    01e6 : 0801 ; -- <0270> i = b
    01e7 : e401 ; -- <0271> bn iz :fail
    01e8 : 0258 ; -- <0271> "
    01e9 : 1c00 ; -- <0272> $av_ad_lo_reg = a

    01ea : fa13 ; -- <0273> rtna = 19
    01eb : fc00 ; -- <0273> swapra = nop

    01ec : 2000 ; -- <0273> push a -- "

    01ed : fa04 ; -- <0273> rtna = 4
    01ee : fc00 ; -- <0273> swapra = nop

    01ef : 0008 ; -- <0273> pop a -- "

-- parse av_ad_hi reg address into x.

    01f0 : fa8f ; -- <0276> rtna = 143
    01f1 : fc00 ; -- <0276> swapra = nop

    01f2 : 0801 ; -- <0277> i = b
    01f3 : e401 ; -- <0278> bn iz :fail
    01f4 : 0258 ; -- <0278> "
    01f5 : 1000 ; -- <0279> x = a

    01f6 : fa13 ; -- <0280> rtna = 19
    01f7 : fc00 ; -- <0280> swapra = nop

    01f8 : 2000 ; -- <0280> push a -- "

    01f9 : fa04 ; -- <0280> rtna = 4
    01fa : fc00 ; -- <0280> swapra = nop

    01fb : 0008 ; -- <0280> pop a -- "

-- parse start byte address high word into target's avalon master.

    01fc : fa8f ; -- <0283> rtna = 143
    01fd : fc00 ; -- <0283> swapra = nop

    01fe : 0801 ; -- <0284> i = b
    01ff : e401 ; -- <0285> bn iz :fail
    0200 : 0258 ; -- <0285> "
    0201 : 3800 ; -- <0286> poke_data = a
    0202 : 0004 ; -- <0287> a = x

    0203 : fba0 ; -- <0288> rtna = 758
    0204 : 02f6 ; -- <0288> "
    0205 : fc00 ; -- <0288> swapra = nop


    0206 : fa13 ; -- <0289> rtna = 19
    0207 : fc00 ; -- <0289> swapra = nop

    0208 : 2000 ; -- <0289> push a -- "

    0209 : fa04 ; -- <0289> rtna = 4
    020a : fc00 ; -- <0289> swapra = nop

    020b : 0008 ; -- <0289> pop a -- "

-- parse start byte address low word into target's avalon master.

    020c : fa8f ; -- <0292> rtna = 143
    020d : fc00 ; -- <0292> swapra = nop

    020e : 0801 ; -- <0293> i = b
    020f : e401 ; -- <0294> bn iz :fail
    0210 : 0258 ; -- <0294> "
    0211 : 3800 ; -- <0295> poke_data = a
    0212 : 0007 ; -- <0296> a = $av_ad_lo_reg

    0213 : fba0 ; -- <0297> rtna = 758
    0214 : 02f6 ; -- <0297> "
    0215 : fc00 ; -- <0297> swapra = nop


    0216 : fa13 ; -- <0298> rtna = 19
    0217 : fc00 ; -- <0298> swapra = nop

    0218 : 2000 ; -- <0298> push a -- "

    0219 : fa04 ; -- <0298> rtna = 4
    021a : fc00 ; -- <0298> swapra = nop

    021b : 0008 ; -- <0298> pop a -- "

-- parse length (in bytes) into i.

    021c : fa8f ; -- <0301> rtna = 143
    021d : fc00 ; -- <0301> swapra = nop

    021e : 1001 ; -- <0302> x = b
    021f : e402 ; -- <0303> bn xz :fail
    0220 : 0258 ; -- <0303> "
    0221 : 0b50 ; -- <0304> i = a>>1
    0222 : e001 ; -- <0305> br iz :fail
    0223 : 0258 ; -- <0305> "


    0224 : fa13 ; -- <0307> rtna = 19
    0225 : fc00 ; -- <0307> swapra = nop

    0226 : 2000 ; -- <0307> push a -- "

    0227 : fa04 ; -- <0307> rtna = 4
    0228 : fc00 ; -- <0307> swapra = nop

    0229 : 0008 ; -- <0307> pop a -- "
    022a : 062e ; -- <0308> b = 46 -- asc b = "."
    022b : e407 ; -- <0309> bn eq :fail
    022c : 0258 ; -- <0309> "

-- :next_row -- = 0x022d
-- print row header.
    022d : 03a0 ; -- <0313> a = :eol_msg -- puteol
    022e : 0002 ; -- <0313> "

    022f : fade ; -- <0313> rtna = 222
    0230 : fc00 ; -- <0313> swapra = nop

    0231 : 0007 ; -- <0314> a = $av_ad_lo_reg

    0232 : fba0 ; -- <0315> rtna = 774
    0233 : 0306 ; -- <0315> "
    0234 : fc00 ; -- <0315> swapra = nop

    0235 : 0017 ; -- <0316> a = peek_data

    0236 : fa5e ; -- <0317> rtna = 94
    0237 : fc00 ; -- <0317> swapra = nop

    0238 : 023a ; -- <0318> a = 58 -- putasc ":"

    0239 : fa04 ; -- <0318> rtna = 4
    023a : fc00 ; -- <0318> swapra = nop


-- print 8 data words.
    023b : 1208 ; -- <0321> x = 8
-- :next_word -- = 0x023c
-- print data word from target's avalon master.
    023c : 0220 ; -- <0324> a = 32 -- putasc " "

    023d : fa04 ; -- <0324> rtna = 4
    023e : fc00 ; -- <0324> swapra = nop

    023f : 0006 ; -- <0325> a = $av_data_regs

    0240 : fba0 ; -- <0326> rtna = 615
    0241 : 0267 ; -- <0326> "
    0242 : fc00 ; -- <0326> swapra = nop

    0243 : 0017 ; -- <0327> a = peek_data

    0244 : fa5e ; -- <0328> rtna = 94
    0245 : fc00 ; -- <0328> swapra = nop


-- increment target's av_ad_lo.
    0246 : 0007 ; -- <0331> a = $av_ad_lo_reg

    0247 : fba0 ; -- <0332> rtna = 774
    0248 : 0306 ; -- <0332> "
    0249 : fc00 ; -- <0332> swapra = nop

    024a : 0017 ; -- <0333> a = peek_data
    024b : 0602 ; -- <0334> b = 2
    024c : c800 ; -- <0335> poke_data = a+b
    024d : 3b00 ; -- <0335> "
    024e : 0007 ; -- <0336> a = $av_ad_lo_reg

    024f : fba0 ; -- <0337> rtna = 758
    0250 : 02f6 ; -- <0337> "
    0251 : fc00 ; -- <0337> swapra = nop


-- check if all words have been dumped.
    0252 : 0f60 ; -- <0340> j = -1
    0253 : c800 ; -- <0341> i = i+j
    0254 : 0b10 ; -- <0341> "
    0255 : e001 ; -- <0342> br iz :done
    0256 : 024c ; -- <0342> "

-- check for end of row.
    0257 : 1760 ; -- <0345> y = -1
    0258 : c800 ; -- <0346> x = x+y
    0259 : 1320 ; -- <0346> "
    025a : e402 ; -- <0347> bn xz :next_word
    025b : 023c ; -- <0347> "
    025c : e00f ; -- <0348> jmp :next_row
    025d : 022d ; -- <0348> "

-- :done -- = 0x025e
    025e : 03a0 ; -- <0351> a = :eol_msg -- puteol
    025f : 0002 ; -- <0351> "

    0260 : fade ; -- <0351> rtna = 222
    0261 : fc00 ; -- <0351> swapra = nop

    0262 : f808 ; -- <0352> pop rtna -- rtn
    0263 : 1c08 ; -- <0352> pop g7 -- "
    0264 : 1808 ; -- <0352> pop g6 -- "
    0265 : 1408 ; -- <0352> pop y -- "
    0266 : 1008 ; -- <0352> pop x -- "
    0267 : 0c08 ; -- <0352> pop j -- "
    0268 : 0808 ; -- <0352> pop i -- "
    0269 : fc00 ; -- <0352> swapra = nop

-- :fail -- = 0x026a
    026a : 023f ; -- <0355> a = 63 -- putasc "?"

    026b : fa04 ; -- <0355> rtna = 4
    026c : fc00 ; -- <0355> swapra = nop

    026d : 03a0 ; -- <0356> a = :eol_msg -- puteol
    026e : 0002 ; -- <0356> "

    026f : fade ; -- <0356> rtna = 222
    0270 : fc00 ; -- <0356> swapra = nop

    0271 : f808 ; -- <0357> pop rtna -- end_func
    0272 : 1c08 ; -- <0357> pop g7 -- "
    0273 : 1808 ; -- <0357> pop g6 -- "
    0274 : 1408 ; -- <0357> pop y -- "
    0275 : 1008 ; -- <0357> pop x -- "
    0276 : 0c08 ; -- <0357> pop j -- "
    0277 : 0808 ; -- <0357> pop i -- "
    0278 : fc00 ; -- <0357> swapra = nop

-- trigger a read in the target's avalon master.  return the data in peek_data.
-- the 32-bit avalon address must already be poked into the target's avalon master.
-- pass av_data_regs in a.  av_write_data reg address in its high byte; av_read_data reg address in its low byte.
-- ######## func peek_avalon -- = 0x0279
    0279 : 203e ; -- <0362> push rtna -- func peek_avalon
-- peek the target's av_write_data register to trigger an avalon read as a side effect.
    027a : 2000 ; -- <0364> push a -- push a
    027b : 0353 ; -- <0365> a = a>>4
    027c : 0353 ; -- <0366> a = a>>4

    027d : fba0 ; -- <0367> rtna = 774
    027e : 0306 ; -- <0367> "
    027f : fc00 ; -- <0367> swapra = nop


-- wait for target's avalon master to receive data e.g. from SDRAM controller.
    0280 : 020f ; -- <0370> a = 15
    0281 : 0760 ; -- <0371> b = -1
-- :wait -- = 0x0282
    0282 : c800 ; -- <0373> a = a+b
    0283 : 0300 ; -- <0373> "
    0284 : e400 ; -- <0374> bn az :wait
    0285 : 0282 ; -- <0374> "

-- peek data word from target's avalon master.
    0286 : 0008 ; -- <0377> pop a -- pop a
    0287 : 06ff ; -- <0378> b = 0xff
    0288 : c800 ; -- <0379> a = and
    0289 : 0330 ; -- <0379> "

    028a : fba0 ; -- <0380> rtna = 774
    028b : 0306 ; -- <0380> "
    028c : fc00 ; -- <0380> swapra = nop

    028d : f808 ; -- <0381> pop rtna -- end_func
    028e : fc00 ; -- <0381> swapra = nop

-- ######## func wait_for_bp -- = 0x028f
-- :poll -- = 0x028f
    028f : 0018 ; -- <0385> a = bp_status
    0290 : e000 ; -- <0386> br az :poll
    0291 : 028f ; -- <0386> "
    0292 : fc00 ; -- <0387> swapra = nop

-- ######## func set_bp -- = 0x0293
    0293 : 2004 ; -- <0389> push x -- func set_bp
    0294 : 2005 ; -- <0389> push y -- "
    0295 : 203e ; -- <0389> push rtna -- "

    0296 : fa13 ; -- <0390> rtna = 19
    0297 : fc00 ; -- <0390> swapra = nop

    0298 : 2000 ; -- <0390> push a -- "

    0299 : fa04 ; -- <0390> rtna = 4
    029a : fc00 ; -- <0390> swapra = nop

    029b : 0008 ; -- <0390> pop a -- "
    029c : 1000 ; -- <0391> x = a

    029d : fa13 ; -- <0392> rtna = 19
    029e : fc00 ; -- <0392> swapra = nop

    029f : 2000 ; -- <0392> push a -- "

    02a0 : fa04 ; -- <0392> rtna = 4
    02a1 : fc00 ; -- <0392> swapra = nop

    02a2 : 0008 ; -- <0392> pop a -- "
    02a3 : 063d ; -- <0393> b = 61 -- asc b = "="
    02a4 : e407 ; -- <0394> bn eq :fail
    02a5 : 02bb ; -- <0394> "

    02a6 : fa8f ; -- <0395> rtna = 143
    02a7 : fc00 ; -- <0395> swapra = nop

    02a8 : 1400 ; -- <0396> y = a
    02a9 : 0200 ; -- <0397> a = 0
    02aa : e407 ; -- <0398> bn eq :fail
    02ab : 02bb ; -- <0398> "
    02ac : 0004 ; -- <0399> a = x
    02ad : 0630 ; -- <0400> b = 48 -- asc b = "0"
    02ae : e007 ; -- <0401> br eq :b0
    02af : 02a7 ; -- <0401> "
    02b0 : 0631 ; -- <0402> b = 49 -- asc b = "1"
    02b1 : e007 ; -- <0403> br eq :b1
    02b2 : 02ac ; -- <0403> "
    02b3 : 0632 ; -- <0404> b = 50 -- asc b = "2"
    02b4 : e007 ; -- <0405> br eq :b2
    02b5 : 02b1 ; -- <0405> "
    02b6 : 0633 ; -- <0406> b = 51 -- asc b = "3"
    02b7 : e007 ; -- <0407> br eq :b3
    02b8 : 02b6 ; -- <0407> "
    02b9 : e00f ; -- <0408> jmp :fail
    02ba : 02bb ; -- <0408> "
-- :b0 -- = 0x02bb
    02bb : 2405 ; -- <0410> bp0_addr = y
    02bc : f808 ; -- <0411> pop rtna -- rtn
    02bd : 1408 ; -- <0411> pop y -- "
    02be : 1008 ; -- <0411> pop x -- "
    02bf : fc00 ; -- <0411> swapra = nop
-- :b1 -- = 0x02c0
    02c0 : 2805 ; -- <0413> bp1_addr = y
    02c1 : f808 ; -- <0414> pop rtna -- rtn
    02c2 : 1408 ; -- <0414> pop y -- "
    02c3 : 1008 ; -- <0414> pop x -- "
    02c4 : fc00 ; -- <0414> swapra = nop
-- :b2 -- = 0x02c5
    02c5 : 2c05 ; -- <0416> bp2_addr = y
    02c6 : f808 ; -- <0417> pop rtna -- rtn
    02c7 : 1408 ; -- <0417> pop y -- "
    02c8 : 1008 ; -- <0417> pop x -- "
    02c9 : fc00 ; -- <0417> swapra = nop
-- :b3 -- = 0x02ca
    02ca : 3005 ; -- <0419> bp3_addr = y
    02cb : f808 ; -- <0420> pop rtna -- rtn
    02cc : 1408 ; -- <0420> pop y -- "
    02cd : 1008 ; -- <0420> pop x -- "
    02ce : fc00 ; -- <0420> swapra = nop

-- :fail -- = 0x02cf
    02cf : 023f ; -- <0423> a = 63 -- putasc "?"

    02d0 : fa04 ; -- <0423> rtna = 4
    02d1 : fc00 ; -- <0423> swapra = nop

    02d2 : 03a0 ; -- <0424> a = :eol_msg -- puteol
    02d3 : 0002 ; -- <0424> "

    02d4 : fade ; -- <0424> rtna = 222
    02d5 : fc00 ; -- <0424> swapra = nop

    02d6 : f808 ; -- <0425> pop rtna -- end_func
    02d7 : 1408 ; -- <0425> pop y -- "
    02d8 : 1008 ; -- <0425> pop x -- "
    02d9 : fc00 ; -- <0425> swapra = nop

-- ######## func poke_cmd -- = 0x02da
    02da : 2004 ; -- <0427> push x -- func poke_cmd
    02db : 203e ; -- <0427> push rtna -- "
-- x = destination register address to poke.

    02dc : fa8f ; -- <0429> rtna = 143
    02dd : fc00 ; -- <0429> swapra = nop

    02de : 1000 ; -- <0430> x = a
    02df : 0200 ; -- <0431> a = 0
    02e0 : e407 ; -- <0432> bn eq :fail
    02e1 : 02e3 ; -- <0432> "


    02e2 : fa13 ; -- <0434> rtna = 19
    02e3 : fc00 ; -- <0434> swapra = nop

    02e4 : 2000 ; -- <0434> push a -- "

    02e5 : fa04 ; -- <0434> rtna = 4
    02e6 : fc00 ; -- <0434> swapra = nop

    02e7 : 0008 ; -- <0434> pop a -- "
    02e8 : 063d ; -- <0435> b = 61 -- asc b = "="
    02e9 : e407 ; -- <0436> bn eq :fail
    02ea : 02e3 ; -- <0436> "

-- parse value to poke.

    02eb : fa8f ; -- <0439> rtna = 143
    02ec : fc00 ; -- <0439> swapra = nop

    02ed : 3800 ; -- <0440> poke_data = a
    02ee : 0200 ; -- <0441> a = 0
    02ef : e407 ; -- <0442> bn eq :fail
    02f0 : 02e3 ; -- <0442> "

    02f1 : 0004 ; -- <0444> a = x

    02f2 : fba0 ; -- <0445> rtna = 758
    02f3 : 02f6 ; -- <0445> "
    02f4 : fc00 ; -- <0445> swapra = nop

    02f5 : f808 ; -- <0446> pop rtna -- rtn
    02f6 : 1008 ; -- <0446> pop x -- "
    02f7 : fc00 ; -- <0446> swapra = nop

-- :fail -- = 0x02f8
    02f8 : 023f ; -- <0449> a = 63 -- putasc "?"

    02f9 : fa04 ; -- <0449> rtna = 4
    02fa : fc00 ; -- <0449> swapra = nop

    02fb : 03a0 ; -- <0450> a = :eol_msg -- puteol
    02fc : 0002 ; -- <0450> "

    02fd : fade ; -- <0450> rtna = 222
    02fe : fc00 ; -- <0450> swapra = nop

    02ff : f808 ; -- <0451> pop rtna -- end_func
    0300 : 1008 ; -- <0451> pop x -- "
    0301 : fc00 ; -- <0451> swapra = nop

-- force execution of the opcode passed in force_opcode.
-- ######## func force_instruction -- = 0x0302
    0302 : 3e04 ; -- <0455> bus_ctrl = $divert_code_bus_mask
    0303 : 4201 ; -- <0456> tg_force = $hold_state_mask
    0304 : 4203 ; -- <0457> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0305 : 4205 ; -- <0458> tg_force = ($hold_state_mask | $force_exec_mask)
    0306 : 4201 ; -- <0459> tg_force = $hold_state_mask
-- refill target exr so it can resume seamlessly.
    0307 : 3415 ; -- <0461> force_opcode = exr_shadow
    0308 : 4203 ; -- <0462> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0309 : 4200 ; -- <0463> tg_force = 0
    030a : fc00 ; -- <0464> swapra = nop

-- write to a register in the target MCU.  pass the value in poke_data.
-- pass its register address in a.
-- ######## func poke -- = 0x030b
    030b : 203e ; -- <0468> push rtna -- func poke
    030c : 063f ; -- <0469> b = $dest_mask
    030d : c800 ; -- <0470> a = and
    030e : 0330 ; -- <0470> "
    030f : 0352 ; -- <0471> a = a<<4
    0310 : 0352 ; -- <0472> a = a<<4
    0311 : 0351 ; -- <0473> a = a<<1
    0312 : 0351 ; -- <0474> a = a<<1
    0313 : 07a0 ; -- <0475> b = ([src dbgpoke])
    0314 : 03c0 ; -- <0475> "
    0315 : c800 ; -- <0476> force_opcode = or
    0316 : 3734 ; -- <0476> "

    0317 : fba0 ; -- <0477> rtna = 770
    0318 : 0302 ; -- <0477> "
    0319 : fc00 ; -- <0477> swapra = nop

    031a : f808 ; -- <0478> pop rtna -- end_func
    031b : fc00 ; -- <0478> swapra = nop

-- observe a register in the target MCU.  return its value in peek_data.
-- pass its register address in a.
-- ######## func peek -- = 0x031c
    031c : 203e ; -- <0482> push rtna -- func peek
    031d : 07a0 ; -- <0483> b = $src_mask
    031e : 03ff ; -- <0483> "
    031f : c800 ; -- <0484> a = and
    0320 : 0330 ; -- <0484> "
    0321 : 07a0 ; -- <0485> b = ([dest nop] << $dest_lsb)
    0322 : c800 ; -- <0485> "
    0323 : c800 ; -- <0486> force_opcode = or
    0324 : 3734 ; -- <0486> "

    0325 : fba0 ; -- <0487> rtna = 770
    0326 : 0302 ; -- <0487> "
    0327 : fc00 ; -- <0487> swapra = nop

-- target's register value is now in peek_data.
    0328 : f808 ; -- <0489> pop rtna -- end_func
    0329 : fc00 ; -- <0489> swapra = nop

-- show target status display.
-- ######## func dump_target -- = 0x032a
    032a : 2002 ; -- <0492> push i -- func dump_target
    032b : 2003 ; -- <0492> push j -- "
    032c : 203e ; -- <0492> push rtna -- "
    032d : 03a0 ; -- <0493> a = :eol_msg -- puteol
    032e : 0002 ; -- <0493> "

    032f : fade ; -- <0493> rtna = 222
    0330 : fc00 ; -- <0493> swapra = nop

    0331 : 0a00 ; -- <0494> i = 0
    0332 : 0e01 ; -- <0495> j = 1
-- :next_reg -- = 0x0333
-- fetch register name from table in target program.
-- i = register number.
-- peek is skipped for any reg name starting with 2 slashes (good for read-sensitive regs).
    0333 : 0002 ; -- <0500> a = i
    0334 : 0351 ; -- <0501> a = a<<1
    0335 : 0351 ; -- <0502> a = a<<1
    0336 : 0603 ; -- <0503> b = 3
    0337 : c800 ; -- <0504> a = a+b
    0338 : 0300 ; -- <0504> "
    0339 : 0404 ; -- <0505> b = x
    033a : c800 ; -- <0506> m9k_addr = a+b
    033b : 4f00 ; -- <0506> "
    033c : 0014 ; -- <0507> a = m9k_data
    033d : 07a0 ; -- <0508> b = 0x2f2f
    033e : 2f2f ; -- <0508> "
    033f : e007 ; -- <0509> br eq :no_peek
    0340 : 0341 ; -- <0509> "
    0341 : 0220 ; -- <0510> a = 32 -- putasc " "

    0342 : fa04 ; -- <0510> rtna = 4
    0343 : fc00 ; -- <0510> swapra = nop

    0344 : 0220 ; -- <0511> a = 32 -- putasc " "

    0345 : fa04 ; -- <0511> rtna = 4
    0346 : fc00 ; -- <0511> swapra = nop

    0347 : 0013 ; -- <0512> a = m9k_addr
    0348 : 0608 ; -- <0513> b = 8

    0349 : fba0 ; -- <0514> rtna = 844
    034a : 034c ; -- <0514> "
    034b : fc00 ; -- <0514> swapra = nop

    034c : 023d ; -- <0515> a = 61 -- putasc "="

    034d : fa04 ; -- <0515> rtna = 4
    034e : fc00 ; -- <0515> swapra = nop

    034f : 0002 ; -- <0516> a = i

    0350 : fba0 ; -- <0517> rtna = 796
    0351 : 031c ; -- <0517> "
    0352 : fc00 ; -- <0517> swapra = nop

    0353 : 0017 ; -- <0518> a = peek_data

    0354 : fa5e ; -- <0519> rtna = 94
    0355 : fc00 ; -- <0519> swapra = nop

    0356 : 03a0 ; -- <0520> a = :eol_msg -- puteol
    0357 : 0002 ; -- <0520> "

    0358 : fade ; -- <0520> rtna = 222
    0359 : fc00 ; -- <0520> swapra = nop

-- :no_peek -- = 0x035a
    035a : c800 ; -- <0522> i = i+j
    035b : 0b10 ; -- <0522> "
-- loop up to the number of registers in the target program's register name table.
    035c : 4e02 ; -- <0524> m9k_addr = 2
    035d : 0414 ; -- <0525> b = m9k_data
    035e : 0002 ; -- <0526> a = i
    035f : e407 ; -- <0527> bn eq :next_reg
    0360 : 0333 ; -- <0527> "
    0361 : f808 ; -- <0528> pop rtna -- end_func
    0362 : 0c08 ; -- <0528> pop j -- "
    0363 : 0808 ; -- <0528> pop i -- "
    0364 : fc00 ; -- <0528> swapra = nop

-- print a fixed-length string from packed words in TARGET program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed_target -- = 0x0365
    0365 : 2002 ; -- <0534> push i -- func print_fixed_target
    0366 : 2003 ; -- <0534> push j -- "
    0367 : 2004 ; -- <0534> push x -- "
    0368 : 2005 ; -- <0534> push y -- "
    0369 : 2006 ; -- <0534> push g6 -- "
    036a : 203e ; -- <0534> push rtna -- "
    036b : 0800 ; -- <0535> i = a
    036c : 0e01 ; -- <0536> j = 1
    036d : 1001 ; -- <0537> x = b
    036e : 1760 ; -- <0538> y = -1
-- :next_word -- = 0x036f
    036f : e002 ; -- <0540> br xz :done
    0370 : 036a ; -- <0540> "
    0371 : 1320 ; -- <0541> x = ad2
    0372 : 4c02 ; -- <0542> m9k_addr = i
    0373 : 1814 ; -- <0543> g6 = m9k_data
-- now x = bytes remaining, i = current word address, g6 = data word.
    0374 : 0006 ; -- <0545> a = g6 -- putchar g6

    0375 : fa04 ; -- <0545> rtna = 4
    0376 : fc00 ; -- <0545> swapra = nop

    0377 : e002 ; -- <0546> br xz :done
    0378 : 036a ; -- <0546> "
    0379 : 1320 ; -- <0547> x = ad2
    037a : 0006 ; -- <0548> a = g6
    037b : 0353 ; -- <0549> a = a>>4
    037c : 0353 ; -- <0550> a = a>>4

    037d : fa04 ; -- <0551> rtna = 4
    037e : fc00 ; -- <0551> swapra = nop

    037f : c800 ; -- <0552> i = i+j
    0380 : 0b10 ; -- <0552> "
    0381 : e00f ; -- <0553> jmp :next_word
    0382 : 036f ; -- <0553> "
-- :done -- = 0x0383
    0383 : f808 ; -- <0555> pop rtna -- end_func
    0384 : 1808 ; -- <0555> pop g6 -- "
    0385 : 1408 ; -- <0555> pop y -- "
    0386 : 1008 ; -- <0555> pop x -- "
    0387 : 0c08 ; -- <0555> pop j -- "
    0388 : 0808 ; -- <0555> pop i -- "
    0389 : fc00 ; -- <0555> swapra = nop

-- ######## func load_program -- = 0x038a
    038a : 2002 ; -- <0557> push i -- func load_program
    038b : 2003 ; -- <0557> push j -- "
    038c : 2004 ; -- <0557> push x -- "
    038d : 203e ; -- <0557> push rtna -- "
-- load target program from UART.

-- length, little-endian.  memorize in x.
    038e : 03a0 ; -- <0561> a = :eol_msg -- puteol
    038f : 0002 ; -- <0561> "

    0390 : fade ; -- <0561> rtna = 222
    0391 : fc00 ; -- <0561> swapra = nop

    0392 : 024c ; -- <0562> a = 76 -- putasc L

    0393 : fa04 ; -- <0562> rtna = 4
    0394 : fc00 ; -- <0562> swapra = nop


    0395 : fa13 ; -- <0563> rtna = 19
    0396 : fc00 ; -- <0563> swapra = nop

    0397 : 2000 ; -- <0563> push a -- "

    0398 : fa13 ; -- <0563> rtna = 19
    0399 : fc00 ; -- <0563> swapra = nop

    039a : 0352 ; -- <0563> "
    039b : 0352 ; -- <0563> "
    039c : 0408 ; -- <0563> pop b -- "
    039d : c800 ; -- <0563> "
    039e : 1334 ; -- <0563> "
    039f : 0004 ; -- <0564> a = x

    03a0 : fa5e ; -- <0565> rtna = 94
    03a1 : fc00 ; -- <0565> swapra = nop

    03a2 : 03a0 ; -- <0566> a = :eol_msg -- puteol
    03a3 : 0002 ; -- <0566> "

    03a4 : fade ; -- <0566> rtna = 222
    03a5 : fc00 ; -- <0566> swapra = nop


-- put target into reset again, in case this is a target warm boot.
    03a6 : 3e02 ; -- <0569> bus_ctrl = $tg_reset_mask

-- load opcodes.  count up address in i.
    03a7 : 0a00 ; -- <0572> i = 0
    03a8 : 0e01 ; -- <0573> j = 1

    03a9 : fafd ; -- <0574> rtna = 253
    03aa : fc00 ; -- <0574> swapra = nop

-- :loadword -- = 0x03ab
-- receive, store in RAM.

    03ab : fa13 ; -- <0577> rtna = 19
    03ac : fc00 ; -- <0577> swapra = nop

    03ad : 2000 ; -- <0577> push a -- "

    03ae : fa13 ; -- <0577> rtna = 19
    03af : fc00 ; -- <0577> swapra = nop

    03b0 : 0352 ; -- <0577> "
    03b1 : 0352 ; -- <0577> "
    03b2 : 0408 ; -- <0577> pop b -- "
    03b3 : c800 ; -- <0577> "
    03b4 : 0334 ; -- <0577> "
    03b5 : 4c02 ; -- <0578> m9k_addr = i
    03b6 : 5000 ; -- <0579> m9k_data = a

-- read back from RAM and build checksum.
    03b7 : 0014 ; -- <0582> a = m9k_data

    03b8 : fba0 ; -- <0583> rtna = 284
    03b9 : 011c ; -- <0583> "
    03ba : fc00 ; -- <0583> swapra = nop


--  show decimated feedback text, for more speed:
    03bb : 0002 ; -- <0586> a = i
    03bc : 061f ; -- <0587> b = 0x1f
    03bd : e403 ; -- <0588> bn and0z :skip_text
    03be : 03a8 ; -- <0588> "
    03bf : 022e ; -- <0589> a = 46 -- putasc "."

    03c0 : fa04 ; -- <0589> rtna = 4
    03c1 : fc00 ; -- <0589> swapra = nop

-- :skip_text -- = 0x03c2

    03c2 : c800 ; -- <0592> i = i+j
    03c3 : 0b10 ; -- <0592> "
    03c4 : 0002 ; -- <0593> a = i
    03c5 : 0404 ; -- <0594> b = x
    03c6 : e407 ; -- <0595> bn eq :loadword
    03c7 : 03ab ; -- <0595> "
    03c8 : 03a0 ; -- <0596> a = :eol_msg -- puteol
    03c9 : 0002 ; -- <0596> "

    03ca : fade ; -- <0596> rtna = 222
    03cb : fc00 ; -- <0596> swapra = nop


    03cc : fba0 ; -- <0597> rtna = 301
    03cd : 012d ; -- <0597> "
    03ce : fc00 ; -- <0597> swapra = nop


    03cf : fa5e ; -- <0598> rtna = 94
    03d0 : fc00 ; -- <0598> swapra = nop

    03d1 : 03a0 ; -- <0599> a = :eol_msg -- puteol
    03d2 : 0002 ; -- <0599> "

    03d3 : fade ; -- <0599> rtna = 222
    03d4 : fc00 ; -- <0599> swapra = nop

    03d5 : f808 ; -- <0600> pop rtna -- end_func
    03d6 : 1008 ; -- <0600> pop x -- "
    03d7 : 0c08 ; -- <0600> pop j -- "
    03d8 : 0808 ; -- <0600> pop i -- "
    03d9 : fc00 ; -- <0600> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 g6
-- src reg 0007 g7
-- src reg 0008 rstk
-- src reg 0009 bp0_addr
-- src reg 000a bp1_addr
-- src reg 000b bp2_addr
-- src reg 000c bp3_addr
-- src reg 000d force_opcode
-- src reg 000e poke_data
-- src reg 000f bus_ctrl
-- src reg 0010 tg_force
-- src reg 0011 atx_data
-- src reg 0012 atx_ctrl
-- src reg 0013 m9k_addr
-- src reg 0014 m9k_data
-- src reg 0015 exr_shadow
-- src reg 0016 tg_code_addr
-- src reg 0017 peek_data
-- src reg 0018 bp_status
-- src reg 0019 boot_break
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 g6
-- dest reg 0007 g7
-- dest reg 0008 rstk
-- dest reg 0009 bp0_addr
-- dest reg 000a bp1_addr
-- dest reg 000b bp2_addr
-- dest reg 000c bp3_addr
-- dest reg 000d force_opcode
-- dest reg 000e poke_data
-- dest reg 000f bus_ctrl
-- dest reg 0010 tg_force
-- dest reg 0011 atx_data
-- dest reg 0012 atx_ctrl
-- dest reg 0013 m9k_addr
-- dest reg 0014 m9k_data
        
        END;
    
