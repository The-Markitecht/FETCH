
        DEPTH = 1024 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- program code dimensions.

-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.

-- these are for the VISOR code, not the TARGET code.

-- register file configuration

-- application-specific register aliases.







    0000 : e00f ; -- <0065> jmp :main
    0001 : 0133 ; -- <0065> "


-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
-- ######## func putchar_atx -- = 0x0002
    0002 : 2004 ; -- <0037> push x -- func putchar_atx

    0003 : 1000 ; -- <0039> x = a

-- wait for UART to be idle (not busy).
    0004 : 0202 ; -- <0042> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x0005
    0005 : 0412 ; -- <0044> b = atx_ctrl
    0006 : e403 ; -- <0045> bn and0z :pcatx_wait_for_idle
    0007 : 0005 ; -- <0045> "

-- push word to the UART.  its low byte is a character.
    0008 : 4404 ; -- <0048> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    0009 : 4a01 ; -- <0053> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    000a : 0202 ; -- <0056> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x000b
    000b : 0412 ; -- <0058> b = atx_ctrl
    000c : e003 ; -- <0059> br and0z :pcatx_wait_for_busy
    000d : 000b ; -- <0059> "
    000e : 4a00 ; -- <0060> atx_ctrl = 0
    000f : 1008 ; -- <0061> pop x -- end_func
    0010 : fc00 ; -- <0061> end_func

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_atx -- = 0x0011
-- wait until UART is busy, then idle.
    0011 : 0204 ; -- <0067> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0012
    0012 : 0412 ; -- <0069> b = atx_ctrl
    0013 : e003 ; -- <0070> br and0z :wait_for_busy
    0014 : 0012 ; -- <0070> "
-- :wait_for_idle -- = 0x0015
    0015 : 0412 ; -- <0072> b = atx_ctrl
    0016 : e403 ; -- <0073> bn and0z :wait_for_idle
    0017 : 0015 ; -- <0073> "
    0018 : 0011 ; -- <0074> a = atx_data
    0019 : fc00 ; -- <0075> end_func

-- returns a character in a, or -1 if none.
-- this version can miss characters if not polled while the character is arriving.
-- ######## func pollchar_atx -- = 0x001a
-- check for UART is busy, then idle.
    001a : 0204 ; -- <0081> a = $arx_busy_mask
    001b : 0412 ; -- <0082> b = atx_ctrl
    001c : e003 ; -- <0083> br and0z :none
    001d : 0023 ; -- <0083> "
-- :wait_for_idle -- = 0x001e
    001e : 0412 ; -- <0085> b = atx_ctrl
    001f : e403 ; -- <0086> bn and0z :wait_for_idle
    0020 : 001e ; -- <0086> "
    0021 : 0011 ; -- <0087> a = atx_data
    0022 : fc00 ; -- <0088> rtn
-- :none -- = 0x0023
    0023 : 0360 ; -- <0090> a = -1
    0024 : fc00 ; -- <0091> end_func



-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x0025
    0025 : 0601 ; -- <0005> b = 1
    0026 : e003 ; -- <0006> br and0z :pick_byte_even
    0027 : 0030 ; -- <0006> "
    0028 : 0350 ; -- <0007> a = a>>1
    0029 : 0404 ; -- <0008> b = x
    002a : c800 ; -- <0009> fetch a from a+b
    002b : d300 ; -- <0009> "
    002c : 03b0 ; -- <0009> "
    002d : 0353 ; -- <0010> a = a>>4
    002e : 0353 ; -- <0011> a = a>>4
    002f : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x0030
    0030 : 0350 ; -- <0014> a = a>>1
    0031 : 0404 ; -- <0015> b = x
    0032 : c800 ; -- <0016> fetch a from a+b
    0033 : d300 ; -- <0016> "
    0034 : 03b0 ; -- <0016> "
    0035 : 06ff ; -- <0017> b = 0xff
    0036 : c800 ; -- <0018> a = and
    0037 : 0330 ; -- <0018> "
    0038 : fc00 ; -- <0019> end_func

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x0039
    0039 : 2002 ; -- <0027> push i -- func find_in_fetch
    003a : 2003 ; -- <0027> push j -- "
    003b : 2005 ; -- <0027> push y -- "
    003c : 203e ; -- <0027> push rtna -- "
    003d : 1400 ; -- <0028> y = a
    003e : 0f60 ; -- <0029> j = -1
-- :again -- = 0x003f
    003f : e001 ; -- <0031> br iz :fail
    0040 : 004f ; -- <0031> "
    0041 : 0b10 ; -- <0032> i = ad1
    0042 : 0002 ; -- <0033> a = i
    0043 : fba0 ; -- <0034> call :fetch_byte
    0044 : 0025 ; -- <0034> "
    0045 : fc00 ; -- <0034> "
    0046 : 0405 ; -- <0035> b = y
    0047 : e407 ; -- <0036> bn eq :again
    0048 : 003f ; -- <0036> "
-- :found -- = 0x0049
    0049 : 0002 ; -- <0038> a = i
    004a : f808 ; -- <0039> pop rtna -- rtn
    004b : 1408 ; -- <0039> pop y -- "
    004c : 0c08 ; -- <0039> pop j -- "
    004d : 0808 ; -- <0039> pop i -- "
    004e : fc00 ; -- <0039> rtn
-- :fail -- = 0x004f
    004f : 0360 ; -- <0041> a = -1
    0050 : f808 ; -- <0042> pop rtna -- end_func
    0051 : 1408 ; -- <0042> pop y -- "
    0052 : 0c08 ; -- <0042> pop j -- "
    0053 : 0808 ; -- <0042> pop i -- "
    0054 : fc00 ; -- <0042> end_func



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0055
-- "0123456789abcdef"
    0055 : 3130 ; -- <0050> 10
    0056 : 3332 ; -- <0050> 32
    0057 : 3534 ; -- <0050> 54
    0058 : 3736 ; -- <0050> 76
    0059 : 3938 ; -- <0050> 98
    005a : 6261 ; -- <0050> ba
    005b : 6463 ; -- <0050> dc
    005c : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x005d
    005d : 2004 ; -- <0054> push x -- func put4x
    005e : 2006 ; -- <0054> push g6 -- "
    005f : 203e ; -- <0054> push rtna -- "
    0060 : 13a0 ; -- <0055> x = :hexdigits
    0061 : 0055 ; -- <0055> "

    0062 : 1800 ; -- <0057> g6 = a
    0063 : 07a0 ; -- <0058> b = 0xF000
    0064 : f000 ; -- <0058> "
    0065 : c800 ; -- <0059> a = and
    0066 : 0330 ; -- <0059> "
    0067 : 0353 ; -- <0060> a = a>>4
    0068 : 0353 ; -- <0061> a = a>>4
    0069 : 0353 ; -- <0062> a = a>>4
    006a : fba0 ; -- <0063> call fetch_byte
    006b : 0025 ; -- <0063> "
    006c : fc00 ; -- <0063> "
    006d : fba0 ; -- <0064> putchar a
    006e : 0002 ; -- <0064> "
    006f : fc00 ; -- <0064> "

    0070 : 0006 ; -- <0066> a = g6
    0071 : 07a0 ; -- <0067> b = 0x0F00
    0072 : 0f00 ; -- <0067> "
    0073 : c800 ; -- <0068> a = and
    0074 : 0330 ; -- <0068> "
    0075 : 0353 ; -- <0069> a = a>>4
    0076 : 0353 ; -- <0070> a = a>>4
    0077 : fba0 ; -- <0071> call fetch_byte
    0078 : 0025 ; -- <0071> "
    0079 : fc00 ; -- <0071> "
    007a : fba0 ; -- <0072> putchar a
    007b : 0002 ; -- <0072> "
    007c : fc00 ; -- <0072> "

    007d : 0006 ; -- <0074> a = g6
    007e : 06f0 ; -- <0075> b = 0x00F0
    007f : c800 ; -- <0076> a = and
    0080 : 0330 ; -- <0076> "
    0081 : 0353 ; -- <0077> a = a>>4
    0082 : fba0 ; -- <0078> call fetch_byte
    0083 : 0025 ; -- <0078> "
    0084 : fc00 ; -- <0078> "
    0085 : fba0 ; -- <0079> putchar a
    0086 : 0002 ; -- <0079> "
    0087 : fc00 ; -- <0079> "

    0088 : 0006 ; -- <0081> a = g6
    0089 : 060f ; -- <0082> b = 0x000F
    008a : c800 ; -- <0083> a = and
    008b : 0330 ; -- <0083> "
    008c : fba0 ; -- <0084> call fetch_byte
    008d : 0025 ; -- <0084> "
    008e : fc00 ; -- <0084> "
    008f : fba0 ; -- <0085> putchar a
    0090 : 0002 ; -- <0085> "
    0091 : fc00 ; -- <0085> "

    0092 : f808 ; -- <0087> pop rtna -- end_func
    0093 : 1808 ; -- <0087> pop g6 -- "
    0094 : 1008 ; -- <0087> pop x -- "
    0095 : fc00 ; -- <0087> end_func

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x0096
    0096 : 2002 ; -- <0091> push i -- func get4x
    0097 : 2003 ; -- <0091> push j -- "
    0098 : 2004 ; -- <0091> push x -- "
    0099 : 2005 ; -- <0091> push y -- "
    009a : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    009b : 1604 ; -- <0094> y = 4
-- :again -- = 0x009c
    009c : fba0 ; -- <0096> getchar
    009d : 0011 ; -- <0096> "
    009e : fc00 ; -- <0096> "
    009f : 13a0 ; -- <0097> x = :hexdigits
    00a0 : 0055 ; -- <0097> "
    00a1 : 0a10 ; -- <0098> i = 16
    00a2 : fba0 ; -- <0099> call :find_in_fetch
    00a3 : 0039 ; -- <0099> "
    00a4 : fc00 ; -- <0099> "
    00a5 : 0760 ; -- <0100> b = -1
    00a6 : e007 ; -- <0101> br eq :fail
    00a7 : 00bb ; -- <0101> "
    00a8 : 0400 ; -- <0102> b = a
    00a9 : 0003 ; -- <0103> a = j
    00aa : 0352 ; -- <0104> a = a<<4
    00ab : c800 ; -- <0105> j = or
    00ac : 0f34 ; -- <0105> "
    00ad : 1360 ; -- <0106> x = -1
    00ae : c800 ; -- <0107> y = x+y
    00af : 1720 ; -- <0107> "
    00b0 : 0005 ; -- <0108> a = y
    00b1 : e400 ; -- <0109> bn az :again
    00b2 : 009c ; -- <0109> "
    00b3 : 0003 ; -- <0110> a = j
    00b4 : 0600 ; -- <0111> b = 0
    00b5 : f808 ; -- <0112> pop rtna -- rtn
    00b6 : 1408 ; -- <0112> pop y -- "
    00b7 : 1008 ; -- <0112> pop x -- "
    00b8 : 0c08 ; -- <0112> pop j -- "
    00b9 : 0808 ; -- <0112> pop i -- "
    00ba : fc00 ; -- <0112> rtn
-- :fail -- = 0x00bb
    00bb : 0760 ; -- <0114> b = -1
    00bc : f808 ; -- <0115> pop rtna -- end_func
    00bd : 1408 ; -- <0115> pop y -- "
    00be : 1008 ; -- <0115> pop x -- "
    00bf : 0c08 ; -- <0115> pop j -- "
    00c0 : 0808 ; -- <0115> pop i -- "
    00c1 : fc00 ; -- <0115> end_func

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x00c2
    00c2 : 2002 ; -- <0121> push i -- func print_nt
    00c3 : 2003 ; -- <0121> push j -- "
    00c4 : 2004 ; -- <0121> push x -- "
    00c5 : 203e ; -- <0121> push rtna -- "
    00c6 : 0800 ; -- <0122> i = a
    00c7 : 0e01 ; -- <0123> j = 1
-- :next_word -- = 0x00c8
    00c8 : d002 ; -- <0125> fetch x from i
    00c9 : 13b0 ; -- <0125> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    00ca : 0004 ; -- <0127> a = x
    00cb : 06ff ; -- <0128> b = 0xff
    00cc : e003 ; -- <0129> br and0z :done
    00cd : 00de ; -- <0129> "
    00ce : fba0 ; -- <0130> putchar a
    00cf : 0002 ; -- <0130> "
    00d0 : fc00 ; -- <0130> "
    00d1 : 0004 ; -- <0131> a = x
    00d2 : 0353 ; -- <0132> a = a>>4
    00d3 : 0353 ; -- <0133> a = a>>4
    00d4 : 06ff ; -- <0134> b = 0xff
    00d5 : e003 ; -- <0135> br and0z :done
    00d6 : 00de ; -- <0135> "
    00d7 : fba0 ; -- <0136> putchar a
    00d8 : 0002 ; -- <0136> "
    00d9 : fc00 ; -- <0136> "
    00da : c800 ; -- <0137> i = i+j
    00db : 0b10 ; -- <0137> "
    00dc : e00f ; -- <0138> jmp :next_word
    00dd : 00c8 ; -- <0138> "
-- :done -- = 0x00de
    00de : f808 ; -- <0140> pop rtna -- end_func
    00df : 1008 ; -- <0140> pop x -- "
    00e0 : 0c08 ; -- <0140> pop j -- "
    00e1 : 0808 ; -- <0140> pop i -- "
    00e2 : fc00 ; -- <0140> end_func
-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x00e3
    00e3 : 2004 ; -- <0002> push x -- func spinwait
    00e4 : 2005 ; -- <0002> push y -- "
--patch
--rtn
    00e5 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00e6
    00e6 : 13a0 ; -- <0007> x = 16666
    00e7 : 411a ; -- <0007> "
    00e8 : 1760 ; -- <0008> y = -1
    00e9 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00ea
-- use of the ad2 name overrides auto-nop here.
    00ea : 1320 ; -- <0012> x = ad2
    00eb : e402 ; -- <0013> bn xz :spinwait_inner
    00ec : 00ea ; -- <0013> "
    00ed : c800 ; -- <0014> a = a+b
    00ee : 0300 ; -- <0014> "
    00ef : e400 ; -- <0015> bn az :spinwait_outer
    00f0 : 00e6 ; -- <0015> "
    00f1 : 1408 ; -- <0016> pop y -- end_func
    00f2 : 1008 ; -- <0016> pop x -- "
    00f3 : fc00 ; -- <0016> end_func





-- ######## func fletcher16_init -- = 0x00f4
    00f4 : 1a00 ; -- <0005> $fletcher_sum1_reg = 0
    00f5 : 1e00 ; -- <0006> $fletcher_sum2_reg = 0
    00f6 : fc00 ; -- <0007> end_func

-- compute the modulus(255) of a number given in a.  return remainder in a.
-- ######## func mod255 -- = 0x00f7
-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x00f7
    00f7 : 06fe ; -- <0013> b = 0xfe
    00f8 : e006 ; -- <0014> br gt :mod255_greater
    00f9 : 00fb ; -- <0014> "
    00fa : fc00 ; -- <0015> rtn
-- :mod255_greater -- = 0x00fb
    00fb : 07a0 ; -- <0017> b = 0xff01
    00fc : ff01 ; -- <0017> "
    00fd : c800 ; -- <0018> a = a+b
    00fe : 0300 ; -- <0018> "
    00ff : e00f ; -- <0019> jmp :mod255_again
    0100 : 00f7 ; -- <0019> "
    0101 : fc00 ; -- <0020> end_func

-- accumulate a Fletcher16 checksum, given the next byte of data in a.
-- ######## func fletcher16_input8 -- = 0x0102
    0102 : 203e ; -- <0023> push rtna -- func fletcher16_input8
    0103 : 0406 ; -- <0024> b = $fletcher_sum1_reg
    0104 : c800 ; -- <0025> a = a+b
    0105 : 0300 ; -- <0025> "
    0106 : fba0 ; -- <0026> call :mod255
    0107 : 00f7 ; -- <0026> "
    0108 : fc00 ; -- <0026> "
    0109 : 1800 ; -- <0027> $fletcher_sum1_reg = a

    010a : 0407 ; -- <0029> b = $fletcher_sum2_reg
    010b : c800 ; -- <0030> a = a+b
    010c : 0300 ; -- <0030> "
    010d : fba0 ; -- <0031> call :mod255
    010e : 00f7 ; -- <0031> "
    010f : fc00 ; -- <0031> "
    0110 : 1c00 ; -- <0032> $fletcher_sum2_reg = a
    0111 : f808 ; -- <0033> pop rtna -- end_func
    0112 : fc00 ; -- <0033> end_func

-- accumulate a Fletcher16 checksum, given the next word of data in a.
-- ######## func fletcher16_input16 -- = 0x0113
    0113 : 2002 ; -- <0036> push i -- func fletcher16_input16
    0114 : 203e ; -- <0036> push rtna -- "
    0115 : 0b53 ; -- <0037> i = a>>4
    0116 : 06ff ; -- <0038> b = 0xff
    0117 : c800 ; -- <0039> a = and
    0118 : 0330 ; -- <0039> "
    0119 : fba0 ; -- <0040> call :fletcher16_input8
    011a : 0102 ; -- <0040> "
    011b : fc00 ; -- <0040> "
    011c : 0002 ; -- <0041> a = i
    011d : 0353 ; -- <0042> a = a>>4
    011e : fba0 ; -- <0043> call :fletcher16_input8
    011f : 0102 ; -- <0043> "
    0120 : fc00 ; -- <0043> "
    0121 : f808 ; -- <0044> pop rtna -- end_func
    0122 : 0808 ; -- <0044> pop i -- "
    0123 : fc00 ; -- <0044> end_func

-- return the combined 16-bit result of Fletcher16 checksum in a.
-- ######## func fletcher16_result -- = 0x0124
    0124 : 0007 ; -- <0048> a = $fletcher_sum2_reg
    0125 : 0352 ; -- <0049> a = a<<4
    0126 : 0352 ; -- <0050> a = a<<4
    0127 : 0406 ; -- <0051> b = $fletcher_sum1_reg
    0128 : c800 ; -- <0052> a = or
    0129 : 0334 ; -- <0052> "
    012a : fc00 ; -- <0053> end_func




-- :boot_msg -- = 0x012b
-- "\r\nVISOR\x0"
    012b : 0a0d ; -- <0085>   
    012c : 4956 ; -- <0085> IV
    012d : 4f53 ; -- <0085> OS
    012e : 0052 ; -- <0085>  R
-- :running_msg -- = 0x012f
-- "\r\nRUN >\x0"
    012f : 0a0d ; -- <0087>   
    0130 : 5552 ; -- <0087> UR
    0131 : 204e ; -- <0087>  N
    0132 : 003e ; -- <0087>  >

-- --------------------------------------------
-- :main -- = 0x0133
-- put target into reset.
    0133 : 3e02 ; -- <0092> bus_ctrl = $tg_reset_mask

-- init visor.
    0134 : 3360 ; -- <0095> bp3_addr = $bp_disable
    0135 : 2f60 ; -- <0096> bp2_addr = $bp_disable
    0136 : 2b60 ; -- <0097> bp1_addr = $bp_disable
    0137 : 2760 ; -- <0098> bp0_addr = $bp_disable

-- startup message
    0138 : 03a0 ; -- <0101> a = :boot_msg
    0139 : 012b ; -- <0101> "
    013a : fba0 ; -- <0102> call :print_nt
    013b : 00c2 ; -- <0102> "
    013c : fc00 ; -- <0102> "

-- check for bootloader signal.
    013d : 0019 ; -- <0105> a = boot_break
    013e : e400 ; -- <0106> bn az :boot_run
    013f : 0146 ; -- <0106> "
-- ^^^ for press-to-debug; runs target by default.
-- br az :boot_run
-- ^^^ for press-to-run; debugs target by default.
-- step into the first target instruction.
    0140 : 3e08 ; -- <0111> bus_ctrl = $bp_step_mask
    0141 : fba0 ; -- <0112> call :wait_for_bp
    0142 : 01b8 ; -- <0112> "
    0143 : fc00 ; -- <0112> "
    0144 : e00f ; -- <0113> jmp :cmd_loop
    0145 : 0147 ; -- <0113> "
-- release target reset, to run.
-- :boot_run -- = 0x0146
    0146 : 3e00 ; -- <0116> bus_ctrl = 0

-- command prompt loop.
-- :cmd_loop -- = 0x0147
    0147 : 000f ; -- <0120> a = bus_ctrl
    0148 : 0600 ; -- <0121> b = 0
    0149 : e007 ; -- <0122> br eq :running_prompt
    014a : 016c ; -- <0122> "

    014b : fba0 ; -- <0124> call :dump_target
    014c : 0287 ; -- <0124> "
    014d : fc00 ; -- <0124> "
    014e : 0016 ; -- <0125> a = tg_code_addr
    014f : fba0 ; -- <0126> call :put4x
    0150 : 005d ; -- <0126> "
    0151 : fc00 ; -- <0126> "
    0152 : 022c ; -- <0127> a = 44 -- putasc ","
    0153 : fba0 ; -- <0127> putasc ","
    0154 : 0002 ; -- <0127> "
    0155 : fc00 ; -- <0127> "
    0156 : 0015 ; -- <0128> a = exr_shadow
    0157 : fba0 ; -- <0129> call :put4x
    0158 : 005d ; -- <0129> "
    0159 : fc00 ; -- <0129> "
    015a : 0220 ; -- <0130> a = 32 -- putasc " "
    015b : fba0 ; -- <0130> putasc " "
    015c : 0002 ; -- <0130> "
    015d : fc00 ; -- <0130> "
    015e : 023e ; -- <0131> a = 62 -- putasc ">"
    015f : fba0 ; -- <0131> putasc ">"
    0160 : 0002 ; -- <0131> "
    0161 : fc00 ; -- <0131> "
    0162 : fba0 ; -- <0132> getchar_echo
    0163 : 0011 ; -- <0132> "
    0164 : fc00 ; -- <0132> "
    0165 : 2000 ; -- <0132> push a -- "
    0166 : fba0 ; -- <0132> "
    0167 : 0002 ; -- <0132> "
    0168 : fc00 ; -- <0132> "
    0169 : 0008 ; -- <0132> pop a -- "
    016a : e00f ; -- <0133> jmp :parse_cmd
    016b : 017d ; -- <0133> "

-- :running_prompt -- = 0x016c
    016c : 03a0 ; -- <0136> a = :running_msg
    016d : 012f ; -- <0136> "
    016e : fba0 ; -- <0137> call :print_nt
    016f : 00c2 ; -- <0137> "
    0170 : fc00 ; -- <0137> "
-- :run_poll -- = 0x0171
    0171 : fba0 ; -- <0139> pollchar
    0172 : 001a ; -- <0139> "
    0173 : fc00 ; -- <0139> "
    0174 : 0760 ; -- <0140> b = -1
    0175 : e407 ; -- <0141> bn eq :parse_cmd
    0176 : 017d ; -- <0141> "
    0177 : 0018 ; -- <0142> a = bp_status
    0178 : e000 ; -- <0143> br az :run_poll
    0179 : 0171 ; -- <0143> "
-- target hit a breakpoint; switch to stepping mode.
    017a : 3e08 ; -- <0145> bus_ctrl = $bp_step_mask
    017b : e00f ; -- <0146> jmp :cmd_loop
    017c : 0147 ; -- <0146> "

-- :parse_cmd -- = 0x017d

-- command = step next instruction.
    017d : 066e ; -- <0151> b = 110 -- asc b = "n"
    017e : e407 ; -- <0152> bn eq :skip_step
    017f : 0187 ; -- <0152> "
    0180 : 3e08 ; -- <0153> bus_ctrl = $bp_step_mask
    0181 : 2409 ; -- <0154> bp0_addr = bp0_addr
    0182 : fba0 ; -- <0155> call :wait_for_bp
    0183 : 01b8 ; -- <0155> "
    0184 : fc00 ; -- <0155> "
    0185 : e00f ; -- <0156> jmp :cmd_loop
    0186 : 0147 ; -- <0156> "
-- :skip_step -- = 0x0187

-- command = reset target.
    0187 : 0652 ; -- <0160> b = 82 -- asc b = "R"
    0188 : e407 ; -- <0161> bn eq :skip_reset
    0189 : 0193 ; -- <0161> "
    018a : 3e02 ; -- <0162> bus_ctrl = $tg_reset_mask
    018b : c800 ; -- <0163> nop
    018c : c800 ; -- <0164> nop
    018d : 3e08 ; -- <0165> bus_ctrl = $bp_step_mask
    018e : fba0 ; -- <0166> call :wait_for_bp
    018f : 01b8 ; -- <0166> "
    0190 : fc00 ; -- <0166> "
    0191 : e00f ; -- <0167> jmp :cmd_loop
    0192 : 0147 ; -- <0167> "
-- :skip_reset -- = 0x0193

-- command = load program.
    0193 : 066c ; -- <0171> b = 108 -- asc b = "l"
    0194 : e407 ; -- <0172> bn eq :skip_load
    0195 : 019b ; -- <0172> "
    0196 : fba0 ; -- <0173> call :load_program
    0197 : 020d ; -- <0173> "
    0198 : fc00 ; -- <0173> "
    0199 : e00f ; -- <0174> jmp :cmd_loop
    019a : 0147 ; -- <0174> "
-- :skip_load -- = 0x019b

-- command = run full speed.
    019b : 0672 ; -- <0178> b = 114 -- asc b = "r"
    019c : e407 ; -- <0179> bn eq :skip_run
    019d : 01a2 ; -- <0179> "
-- release target reset, to run.
    019e : 3e00 ; -- <0181> bus_ctrl = 0
    019f : 2409 ; -- <0182> bp0_addr = bp0_addr
    01a0 : e00f ; -- <0183> jmp :cmd_loop
    01a1 : 0147 ; -- <0183> "
-- :skip_run -- = 0x01a2

-- command = set breakpoint.
    01a2 : 0662 ; -- <0187> b = 98 -- asc b = "b"
    01a3 : e407 ; -- <0188> bn eq :skip_setbrk
    01a4 : 01aa ; -- <0188> "
    01a5 : fba0 ; -- <0189> call :set_bp
    01a6 : 01bc ; -- <0189> "
    01a7 : fc00 ; -- <0189> "
    01a8 : e00f ; -- <0190> jmp :cmd_loop
    01a9 : 0147 ; -- <0190> "
-- :skip_setbrk -- = 0x01aa

    01aa : 023f ; -- <0193> a = 63 -- putasc "?"
    01ab : fba0 ; -- <0193> putasc "?"
    01ac : 0002 ; -- <0193> "
    01ad : fc00 ; -- <0193> "
    01ae : 020d ; -- <0194> a = 13 -- puteol
    01af : fba0 ; -- <0194> puteol
    01b0 : 0002 ; -- <0194> "
    01b1 : fc00 ; -- <0194> "
    01b2 : 020a ; -- <0194> a = 10 -- puteol
    01b3 : fba0 ; -- <0194> puteol
    01b4 : 0002 ; -- <0194> "
    01b5 : fc00 ; -- <0194> "
    01b6 : e00f ; -- <0195> jmp :cmd_loop
    01b7 : 0147 ; -- <0195> "


-- ######## func wait_for_bp -- = 0x01b8
-- :poll -- = 0x01b8
    01b8 : 0018 ; -- <0226> a = bp_status
    01b9 : e000 ; -- <0227> br az :poll
    01ba : 01b8 ; -- <0227> "
    01bb : fc00 ; -- <0228> end_func

-- ######## func set_bp -- = 0x01bc
    01bc : 2004 ; -- <0230> push x -- func set_bp
    01bd : 2005 ; -- <0230> push y -- "
    01be : 203e ; -- <0230> push rtna -- "
    01bf : fba0 ; -- <0231> getchar_echo
    01c0 : 0011 ; -- <0231> "
    01c1 : fc00 ; -- <0231> "
    01c2 : 2000 ; -- <0231> push a -- "
    01c3 : fba0 ; -- <0231> "
    01c4 : 0002 ; -- <0231> "
    01c5 : fc00 ; -- <0231> "
    01c6 : 0008 ; -- <0231> pop a -- "
    01c7 : 1000 ; -- <0232> x = a
    01c8 : fba0 ; -- <0233> getchar_echo
    01c9 : 0011 ; -- <0233> "
    01ca : fc00 ; -- <0233> "
    01cb : 2000 ; -- <0233> push a -- "
    01cc : fba0 ; -- <0233> "
    01cd : 0002 ; -- <0233> "
    01ce : fc00 ; -- <0233> "
    01cf : 0008 ; -- <0233> pop a -- "
    01d0 : 063d ; -- <0234> b = 61 -- asc b = "="
    01d1 : e407 ; -- <0235> bn eq :fail
    01d2 : 01fd ; -- <0235> "
    01d3 : fba0 ; -- <0236> call :get4x
    01d4 : 0096 ; -- <0236> "
    01d5 : fc00 ; -- <0236> "
    01d6 : 1400 ; -- <0237> y = a
    01d7 : 0200 ; -- <0238> a = 0
    01d8 : e407 ; -- <0239> bn eq :fail
    01d9 : 01fd ; -- <0239> "
    01da : 0004 ; -- <0240> a = x
    01db : 0630 ; -- <0241> b = 48 -- asc b = "0"
    01dc : e007 ; -- <0242> br eq :b0
    01dd : 01e9 ; -- <0242> "
    01de : 0631 ; -- <0243> b = 49 -- asc b = "1"
    01df : e007 ; -- <0244> br eq :b1
    01e0 : 01ee ; -- <0244> "
    01e1 : 0632 ; -- <0245> b = 50 -- asc b = "2"
    01e2 : e007 ; -- <0246> br eq :b2
    01e3 : 01f3 ; -- <0246> "
    01e4 : 0633 ; -- <0247> b = 51 -- asc b = "3"
    01e5 : e007 ; -- <0248> br eq :b3
    01e6 : 01f8 ; -- <0248> "
    01e7 : e00f ; -- <0249> jmp :fail
    01e8 : 01fd ; -- <0249> "
-- :b0 -- = 0x01e9
    01e9 : 2405 ; -- <0251> bp0_addr = y
    01ea : f808 ; -- <0252> pop rtna -- rtn
    01eb : 1408 ; -- <0252> pop y -- "
    01ec : 1008 ; -- <0252> pop x -- "
    01ed : fc00 ; -- <0252> rtn
-- :b1 -- = 0x01ee
    01ee : 2805 ; -- <0254> bp1_addr = y
    01ef : f808 ; -- <0255> pop rtna -- rtn
    01f0 : 1408 ; -- <0255> pop y -- "
    01f1 : 1008 ; -- <0255> pop x -- "
    01f2 : fc00 ; -- <0255> rtn
-- :b2 -- = 0x01f3
    01f3 : 2c05 ; -- <0257> bp2_addr = y
    01f4 : f808 ; -- <0258> pop rtna -- rtn
    01f5 : 1408 ; -- <0258> pop y -- "
    01f6 : 1008 ; -- <0258> pop x -- "
    01f7 : fc00 ; -- <0258> rtn
-- :b3 -- = 0x01f8
    01f8 : 3005 ; -- <0260> bp3_addr = y
    01f9 : f808 ; -- <0261> pop rtna -- rtn
    01fa : 1408 ; -- <0261> pop y -- "
    01fb : 1008 ; -- <0261> pop x -- "
    01fc : fc00 ; -- <0261> rtn
-- :fail -- = 0x01fd
    01fd : 023f ; -- <0263> a = 63 -- putasc "?"
    01fe : fba0 ; -- <0263> putasc "?"
    01ff : 0002 ; -- <0263> "
    0200 : fc00 ; -- <0263> "
    0201 : 020d ; -- <0264> a = 13 -- puteol
    0202 : fba0 ; -- <0264> puteol
    0203 : 0002 ; -- <0264> "
    0204 : fc00 ; -- <0264> "
    0205 : 020a ; -- <0264> a = 10 -- puteol
    0206 : fba0 ; -- <0264> puteol
    0207 : 0002 ; -- <0264> "
    0208 : fc00 ; -- <0264> "
    0209 : f808 ; -- <0265> pop rtna -- end_func
    020a : 1408 ; -- <0265> pop y -- "
    020b : 1008 ; -- <0265> pop x -- "
    020c : fc00 ; -- <0265> end_func

-- ######## func load_program -- = 0x020d
    020d : 2002 ; -- <0267> push i -- func load_program
    020e : 2003 ; -- <0267> push j -- "
    020f : 2004 ; -- <0267> push x -- "
    0210 : 203e ; -- <0267> push rtna -- "
-- load target program from UART.

-- length, little-endian.  memorize in x.
    0211 : 020d ; -- <0271> a = 13 -- puteol
    0212 : fba0 ; -- <0271> puteol
    0213 : 0002 ; -- <0271> "
    0214 : fc00 ; -- <0271> "
    0215 : 020a ; -- <0271> a = 10 -- puteol
    0216 : fba0 ; -- <0271> puteol
    0217 : 0002 ; -- <0271> "
    0218 : fc00 ; -- <0271> "
    0219 : 024c ; -- <0272> a = 76 -- putasc L
    021a : fba0 ; -- <0272> putasc L
    021b : 0002 ; -- <0272> "
    021c : fc00 ; -- <0272> "
    021d : fba0 ; -- <0273> get16 x
    021e : 0011 ; -- <0273> "
    021f : fc00 ; -- <0273> "
    0220 : 2000 ; -- <0273> push a -- "
    0221 : fba0 ; -- <0273> "
    0222 : 0011 ; -- <0273> "
    0223 : fc00 ; -- <0273> "
    0224 : 0352 ; -- <0273> "
    0225 : 0352 ; -- <0273> "
    0226 : 0408 ; -- <0273> pop b -- "
    0227 : c800 ; -- <0273> "
    0228 : 1334 ; -- <0273> "
    0229 : 0004 ; -- <0274> a = x
    022a : fba0 ; -- <0275> call :put4x
    022b : 005d ; -- <0275> "
    022c : fc00 ; -- <0275> "
    022d : 020d ; -- <0276> a = 13 -- puteol
    022e : fba0 ; -- <0276> puteol
    022f : 0002 ; -- <0276> "
    0230 : fc00 ; -- <0276> "
    0231 : 020a ; -- <0276> a = 10 -- puteol
    0232 : fba0 ; -- <0276> puteol
    0233 : 0002 ; -- <0276> "
    0234 : fc00 ; -- <0276> "

-- put target into reset again, in case this is a target warm boot.
    0235 : 3e02 ; -- <0279> bus_ctrl = $tg_reset_mask

-- load opcodes.  count up address in i.
    0236 : 0a00 ; -- <0282> i = 0
    0237 : 0e01 ; -- <0283> j = 1
    0238 : fba0 ; -- <0284> call :fletcher16_init
    0239 : 00f4 ; -- <0284> "
    023a : fc00 ; -- <0284> "
-- :loadword -- = 0x023b
-- receive, store in RAM.
    023b : fba0 ; -- <0287> get16 a
    023c : 0011 ; -- <0287> "
    023d : fc00 ; -- <0287> "
    023e : 2000 ; -- <0287> push a -- "
    023f : fba0 ; -- <0287> "
    0240 : 0011 ; -- <0287> "
    0241 : fc00 ; -- <0287> "
    0242 : 0352 ; -- <0287> "
    0243 : 0352 ; -- <0287> "
    0244 : 0408 ; -- <0287> pop b -- "
    0245 : c800 ; -- <0287> "
    0246 : 0334 ; -- <0287> "
    0247 : 4c02 ; -- <0288> m9k_addr = i
    0248 : 5000 ; -- <0289> m9k_data = a

-- read back from RAM and build checksum.
    0249 : 0014 ; -- <0292> a = m9k_data
    024a : fba0 ; -- <0293> call :fletcher16_input16
    024b : 0113 ; -- <0293> "
    024c : fc00 ; -- <0293> "

--  show decimated feedback text, for more speed:
    024d : 0002 ; -- <0296> a = i
    024e : 061f ; -- <0297> b = 0x1f
    024f : e403 ; -- <0298> bn and0z :skip_text
    0250 : 0255 ; -- <0298> "
    0251 : 022e ; -- <0299> a = 46 -- putasc "."
    0252 : fba0 ; -- <0299> putasc "."
    0253 : 0002 ; -- <0299> "
    0254 : fc00 ; -- <0299> "
-- :skip_text -- = 0x0255

    0255 : c800 ; -- <0302> i = i+j
    0256 : 0b10 ; -- <0302> "
    0257 : 0002 ; -- <0303> a = i
    0258 : 0404 ; -- <0304> b = x
    0259 : e407 ; -- <0305> bn eq :loadword
    025a : 023b ; -- <0305> "
    025b : 020d ; -- <0306> a = 13 -- puteol
    025c : fba0 ; -- <0306> puteol
    025d : 0002 ; -- <0306> "
    025e : fc00 ; -- <0306> "
    025f : 020a ; -- <0306> a = 10 -- puteol
    0260 : fba0 ; -- <0306> puteol
    0261 : 0002 ; -- <0306> "
    0262 : fc00 ; -- <0306> "
    0263 : fba0 ; -- <0307> call :fletcher16_result
    0264 : 0124 ; -- <0307> "
    0265 : fc00 ; -- <0307> "
    0266 : fba0 ; -- <0308> call :put4x
    0267 : 005d ; -- <0308> "
    0268 : fc00 ; -- <0308> "
    0269 : 020d ; -- <0309> a = 13 -- puteol
    026a : fba0 ; -- <0309> puteol
    026b : 0002 ; -- <0309> "
    026c : fc00 ; -- <0309> "
    026d : 020a ; -- <0309> a = 10 -- puteol
    026e : fba0 ; -- <0309> puteol
    026f : 0002 ; -- <0309> "
    0270 : fc00 ; -- <0309> "
    0271 : f808 ; -- <0310> pop rtna -- end_func
    0272 : 1008 ; -- <0310> pop x -- "
    0273 : 0c08 ; -- <0310> pop j -- "
    0274 : 0808 ; -- <0310> pop i -- "
    0275 : fc00 ; -- <0310> end_func

-- observe a register.  return its value in peek_data.
-- pass its register address in a.
-- ######## func peek -- = 0x0276
    0276 : 07a0 ; -- <0316> b = $src_mask
    0277 : 03ff ; -- <0316> "
    0278 : c800 ; -- <0317> a = and
    0279 : 0330 ; -- <0317> "
    027a : 07a0 ; -- <0318> b = ([dest nop] << $dest_lsb)
    027b : c800 ; -- <0318> "
    027c : c800 ; -- <0319> force_opcode = or
    027d : 3734 ; -- <0319> "
    027e : 3e04 ; -- <0320> bus_ctrl = $divert_code_bus_mask
    027f : 4201 ; -- <0321> tg_force = $hold_state_mask
    0280 : 4203 ; -- <0322> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0281 : 4205 ; -- <0323> tg_force = ($hold_state_mask | $force_exec_mask)
    0282 : 4201 ; -- <0324> tg_force = $hold_state_mask
-- target's register value is now in peek_data.
-- refill target exr so it can resume seamlessly.
    0283 : 3415 ; -- <0327> force_opcode = exr_shadow
    0284 : 4203 ; -- <0328> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0285 : 4200 ; -- <0329> tg_force = 0
    0286 : fc00 ; -- <0330> end_func

-- show target status display.
-- ######## func dump_target -- = 0x0287
    0287 : 2002 ; -- <0333> push i -- func dump_target
    0288 : 2003 ; -- <0333> push j -- "
    0289 : 2004 ; -- <0333> push x -- "
    028a : 2005 ; -- <0333> push y -- "
    028b : 203e ; -- <0333> push rtna -- "
    028c : 020d ; -- <0334> a = 13 -- puteol
    028d : fba0 ; -- <0334> puteol
    028e : 0002 ; -- <0334> "
    028f : fc00 ; -- <0334> "
    0290 : 020a ; -- <0334> a = 10 -- puteol
    0291 : fba0 ; -- <0334> puteol
    0292 : 0002 ; -- <0334> "
    0293 : fc00 ; -- <0334> "
    0294 : 0a00 ; -- <0335> i = 0
-- :next_reg -- = 0x0295
-- fetch register name from table in target program.
-- i = register number.  x = 2-byte word index within each name string.
-- peek is skipped for any reg name starting with 2 slashes (good for read-sensitive regs).
    0295 : 0220 ; -- <0340> a = 32 -- putasc " "
    0296 : fba0 ; -- <0340> putasc " "
    0297 : 0002 ; -- <0340> "
    0298 : fc00 ; -- <0340> "
    0299 : 0220 ; -- <0341> a = 32 -- putasc " "
    029a : fba0 ; -- <0341> putasc " "
    029b : 0002 ; -- <0341> "
    029c : fc00 ; -- <0341> "
    029d : 1200 ; -- <0342> x = 0
    029e : 1601 ; -- <0343> y = 1
-- :next_chars -- = 0x029f
    029f : 0002 ; -- <0345> a = i
    02a0 : 0351 ; -- <0346> a = a<<1
    02a1 : 0351 ; -- <0347> a = a<<1
    02a2 : 0603 ; -- <0348> b = 3
    02a3 : c800 ; -- <0349> a = a+b
    02a4 : 0300 ; -- <0349> "
    02a5 : 0404 ; -- <0350> b = x
    02a6 : c800 ; -- <0351> m9k_addr = a+b
    02a7 : 4f00 ; -- <0351> "
    02a8 : 0014 ; -- <0352> a = m9k_data
    02a9 : 07a0 ; -- <0353> b = 0x2f2f
    02aa : 2f2f ; -- <0353> "
    02ab : e007 ; -- <0354> br eq :no_peek
    02ac : 02d1 ; -- <0354> "
    02ad : 0014 ; -- <0355> a = m9k_data -- putchar m9k_data
    02ae : fba0 ; -- <0355> putchar m9k_data
    02af : 0002 ; -- <0355> "
    02b0 : fc00 ; -- <0355> "
    02b1 : 0014 ; -- <0356> a = m9k_data
    02b2 : 0353 ; -- <0357> a = a>>4
    02b3 : 0353 ; -- <0358> a = a>>4
    02b4 : fba0 ; -- <0359> putchar a
    02b5 : 0002 ; -- <0359> "
    02b6 : fc00 ; -- <0359> "
    02b7 : c800 ; -- <0360> x = x+y
    02b8 : 1320 ; -- <0360> "
    02b9 : 0004 ; -- <0361> a = x
    02ba : 0604 ; -- <0362> b = 4
    02bb : e407 ; -- <0363> bn eq :next_chars
    02bc : 029f ; -- <0363> "
    02bd : 023d ; -- <0364> a = 61 -- putasc "="
    02be : fba0 ; -- <0364> putasc "="
    02bf : 0002 ; -- <0364> "
    02c0 : fc00 ; -- <0364> "
    02c1 : 0002 ; -- <0365> a = i
    02c2 : fba0 ; -- <0366> call :peek
    02c3 : 0276 ; -- <0366> "
    02c4 : fc00 ; -- <0366> "
    02c5 : 0017 ; -- <0367> a = peek_data
    02c6 : fba0 ; -- <0368> call :put4x
    02c7 : 005d ; -- <0368> "
    02c8 : fc00 ; -- <0368> "
    02c9 : 020d ; -- <0369> a = 13 -- puteol
    02ca : fba0 ; -- <0369> puteol
    02cb : 0002 ; -- <0369> "
    02cc : fc00 ; -- <0369> "
    02cd : 020a ; -- <0369> a = 10 -- puteol
    02ce : fba0 ; -- <0369> puteol
    02cf : 0002 ; -- <0369> "
    02d0 : fc00 ; -- <0369> "
-- :no_peek -- = 0x02d1
    02d1 : 0e01 ; -- <0371> j = 1
    02d2 : c800 ; -- <0372> i = i+j
    02d3 : 0b10 ; -- <0372> "
-- loop up to the number of registers in the target program's register name table.
    02d4 : 4e02 ; -- <0374> m9k_addr = 2
    02d5 : 0414 ; -- <0375> b = m9k_data
    02d6 : 0002 ; -- <0376> a = i
    02d7 : e407 ; -- <0377> bn eq :next_reg
    02d8 : 0295 ; -- <0377> "
    02d9 : f808 ; -- <0378> pop rtna -- end_func
    02da : 1408 ; -- <0378> pop y -- "
    02db : 1008 ; -- <0378> pop x -- "
    02dc : 0c08 ; -- <0378> pop j -- "
    02dd : 0808 ; -- <0378> pop i -- "
    02de : fc00 ; -- <0378> end_func

        
        END;
    
