
        DEPTH = 1024 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- program code dimensions.  these are for the VISOR code, not the TARGET code.
-- repeated for use in visor Verilog, where the target's code dimensions (above) override the visor's.

-- register file configuration

-- application-specific register aliases.





--alias_src  tg_debug_out	    [incr counter]  {}


    0000 : e00f ; -- <0061> jmp :main
    0001 : 010e ; -- <0061> "


-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
-- ######## func putchar_atx -- = 0x0002
    0002 : 2004 ; -- <0035> push x -- func putchar_atx

    0003 : 1000 ; -- <0037> x = a

-- wait for UART to be idle (not busy).
    0004 : 0202 ; -- <0040> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x0005
    0005 : 0412 ; -- <0042> b = atx_ctrl
    0006 : e403 ; -- <0043> bn and0z :pcatx_wait_for_idle
    0007 : 0005 ; -- <0043> "

-- push word to the UART.  its low byte is a character.
    0008 : 4404 ; -- <0046> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    0009 : 4a01 ; -- <0051> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    000a : 0202 ; -- <0054> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x000b
    000b : 0412 ; -- <0056> b = atx_ctrl
    000c : e003 ; -- <0057> br and0z :pcatx_wait_for_busy
    000d : 000b ; -- <0057> "
    000e : 4a00 ; -- <0058> atx_ctrl = 0
    000f : 1008 ; -- <0059> pop x -- end_func
    0010 : fc00 ; -- <0059> end_func

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_atx -- = 0x0011
-- wait until UART is busy, then idle.
    0011 : 0204 ; -- <0065> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0012
    0012 : 0412 ; -- <0067> b = atx_ctrl
    0013 : e003 ; -- <0068> br and0z :wait_for_busy
    0014 : 0012 ; -- <0068> "
-- :wait_for_idle -- = 0x0015
    0015 : 0412 ; -- <0070> b = atx_ctrl
    0016 : e403 ; -- <0071> bn and0z :wait_for_idle
    0017 : 0015 ; -- <0071> "
    0018 : 0011 ; -- <0072> a = atx_data
    0019 : fc00 ; -- <0073> end_func

-- returns a character in a, or -1 if none.
-- this version can miss characters if not polled while the character is arriving.
-- ######## func pollchar_atx -- = 0x001a
-- check for UART is busy, then idle.
    001a : 0204 ; -- <0079> a = $arx_busy_mask
    001b : 0412 ; -- <0080> b = atx_ctrl
    001c : e003 ; -- <0081> br and0z :none
    001d : 0023 ; -- <0081> "
-- :wait_for_idle -- = 0x001e
    001e : 0412 ; -- <0083> b = atx_ctrl
    001f : e403 ; -- <0084> bn and0z :wait_for_idle
    0020 : 001e ; -- <0084> "
    0021 : 0011 ; -- <0085> a = atx_data
    0022 : fc00 ; -- <0086> rtn
-- :none -- = 0x0023
    0023 : 0360 ; -- <0088> a = -1
    0024 : fc00 ; -- <0089> end_func



-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x0025
    0025 : 0601 ; -- <0005> b = 1
    0026 : e003 ; -- <0006> br and0z :pick_byte_even
    0027 : 0030 ; -- <0006> "
    0028 : 0350 ; -- <0007> a = a>>1
    0029 : 0404 ; -- <0008> b = x
    002a : c800 ; -- <0009> fetch a from a+b
    002b : d300 ; -- <0009> "
    002c : 03b0 ; -- <0009> "
    002d : 0353 ; -- <0010> a = a>>4
    002e : 0353 ; -- <0011> a = a>>4
    002f : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x0030
    0030 : 0350 ; -- <0014> a = a>>1
    0031 : 0404 ; -- <0015> b = x
    0032 : c800 ; -- <0016> fetch a from a+b
    0033 : d300 ; -- <0016> "
    0034 : 03b0 ; -- <0016> "
    0035 : 06ff ; -- <0017> b = 0xff
    0036 : c800 ; -- <0018> a = and
    0037 : 0330 ; -- <0018> "
    0038 : fc00 ; -- <0019> end_func

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x0039
    0039 : 2002 ; -- <0027> push i -- func find_in_fetch
    003a : 2003 ; -- <0027> push j -- "
    003b : 2005 ; -- <0027> push y -- "
    003c : 203e ; -- <0027> push rtna -- "
    003d : 1400 ; -- <0028> y = a
    003e : 0f60 ; -- <0029> j = -1
-- :again -- = 0x003f
    003f : e001 ; -- <0031> br iz :fail
    0040 : 004f ; -- <0031> "
    0041 : 0b10 ; -- <0032> i = ad1
    0042 : 0002 ; -- <0033> a = i
    0043 : fba0 ; -- <0034> call :fetch_byte
    0044 : 0025 ; -- <0034> "
    0045 : fc00 ; -- <0034> "
    0046 : 0405 ; -- <0035> b = y
    0047 : e407 ; -- <0036> bn eq :again
    0048 : 003f ; -- <0036> "
-- :found -- = 0x0049
    0049 : 0002 ; -- <0038> a = i
    004a : f808 ; -- <0039> pop rtna -- rtn
    004b : 1408 ; -- <0039> pop y -- "
    004c : 0c08 ; -- <0039> pop j -- "
    004d : 0808 ; -- <0039> pop i -- "
    004e : fc00 ; -- <0039> rtn
-- :fail -- = 0x004f
    004f : 0360 ; -- <0041> a = -1
    0050 : f808 ; -- <0042> pop rtna -- end_func
    0051 : 1408 ; -- <0042> pop y -- "
    0052 : 0c08 ; -- <0042> pop j -- "
    0053 : 0808 ; -- <0042> pop i -- "
    0054 : fc00 ; -- <0042> end_func



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0055
-- "0123456789abcdef"
    0055 : 3130 ; -- <0050> 10
    0056 : 3332 ; -- <0050> 32
    0057 : 3534 ; -- <0050> 54
    0058 : 3736 ; -- <0050> 76
    0059 : 3938 ; -- <0050> 98
    005a : 6261 ; -- <0050> ba
    005b : 6463 ; -- <0050> dc
    005c : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x005d
    005d : 2004 ; -- <0054> push x -- func put4x
    005e : 2006 ; -- <0054> push g6 -- "
    005f : 203e ; -- <0054> push rtna -- "
    0060 : 13a0 ; -- <0055> x = :hexdigits
    0061 : 0055 ; -- <0055> "

    0062 : 1800 ; -- <0057> g6 = a
    0063 : 07a0 ; -- <0058> b = 0xF000
    0064 : f000 ; -- <0058> "
    0065 : c800 ; -- <0059> a = and
    0066 : 0330 ; -- <0059> "
    0067 : 0353 ; -- <0060> a = a>>4
    0068 : 0353 ; -- <0061> a = a>>4
    0069 : 0353 ; -- <0062> a = a>>4
    006a : fba0 ; -- <0063> call fetch_byte
    006b : 0025 ; -- <0063> "
    006c : fc00 ; -- <0063> "
    006d : 0000 ; -- <0064> a = a -- putchar a
    006e : fba0 ; -- <0064> putchar a
    006f : 0002 ; -- <0064> "
    0070 : fc00 ; -- <0064> "

    0071 : 0006 ; -- <0066> a = g6
    0072 : 07a0 ; -- <0067> b = 0x0F00
    0073 : 0f00 ; -- <0067> "
    0074 : c800 ; -- <0068> a = and
    0075 : 0330 ; -- <0068> "
    0076 : 0353 ; -- <0069> a = a>>4
    0077 : 0353 ; -- <0070> a = a>>4
    0078 : fba0 ; -- <0071> call fetch_byte
    0079 : 0025 ; -- <0071> "
    007a : fc00 ; -- <0071> "
    007b : 0000 ; -- <0072> a = a -- putchar a
    007c : fba0 ; -- <0072> putchar a
    007d : 0002 ; -- <0072> "
    007e : fc00 ; -- <0072> "

    007f : 0006 ; -- <0074> a = g6
    0080 : 06f0 ; -- <0075> b = 0x00F0
    0081 : c800 ; -- <0076> a = and
    0082 : 0330 ; -- <0076> "
    0083 : 0353 ; -- <0077> a = a>>4
    0084 : fba0 ; -- <0078> call fetch_byte
    0085 : 0025 ; -- <0078> "
    0086 : fc00 ; -- <0078> "
    0087 : 0000 ; -- <0079> a = a -- putchar a
    0088 : fba0 ; -- <0079> putchar a
    0089 : 0002 ; -- <0079> "
    008a : fc00 ; -- <0079> "

    008b : 0006 ; -- <0081> a = g6
    008c : 060f ; -- <0082> b = 0x000F
    008d : c800 ; -- <0083> a = and
    008e : 0330 ; -- <0083> "
    008f : fba0 ; -- <0084> call fetch_byte
    0090 : 0025 ; -- <0084> "
    0091 : fc00 ; -- <0084> "
    0092 : 0000 ; -- <0085> a = a -- putchar a
    0093 : fba0 ; -- <0085> putchar a
    0094 : 0002 ; -- <0085> "
    0095 : fc00 ; -- <0085> "

    0096 : f808 ; -- <0087> pop rtna -- end_func
    0097 : 1808 ; -- <0087> pop g6 -- "
    0098 : 1008 ; -- <0087> pop x -- "
    0099 : fc00 ; -- <0087> end_func

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x009a
    009a : 2002 ; -- <0091> push i -- func get4x
    009b : 2003 ; -- <0091> push j -- "
    009c : 2004 ; -- <0091> push x -- "
    009d : 2005 ; -- <0091> push y -- "
    009e : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    009f : 1604 ; -- <0094> y = 4
-- :again -- = 0x00a0
    00a0 : fba0 ; -- <0096> getchar
    00a1 : 0011 ; -- <0096> "
    00a2 : fc00 ; -- <0096> "
    00a3 : 13a0 ; -- <0097> x = :hexdigits
    00a4 : 0055 ; -- <0097> "
    00a5 : 0a10 ; -- <0098> i = 16
    00a6 : fba0 ; -- <0099> call :find_in_fetch
    00a7 : 0039 ; -- <0099> "
    00a8 : fc00 ; -- <0099> "
    00a9 : 0760 ; -- <0100> b = -1
    00aa : e007 ; -- <0101> br eq :fail
    00ab : 00bf ; -- <0101> "
    00ac : 0400 ; -- <0102> b = a
    00ad : 0003 ; -- <0103> a = j
    00ae : 0352 ; -- <0104> a = a<<4
    00af : c800 ; -- <0105> j = or
    00b0 : 0f34 ; -- <0105> "
    00b1 : 1360 ; -- <0106> x = -1
    00b2 : c800 ; -- <0107> y = x+y
    00b3 : 1720 ; -- <0107> "
    00b4 : 0005 ; -- <0108> a = y
    00b5 : e400 ; -- <0109> bn az :again
    00b6 : 00a0 ; -- <0109> "
    00b7 : 0003 ; -- <0110> a = j
    00b8 : 0600 ; -- <0111> b = 0
    00b9 : f808 ; -- <0112> pop rtna -- rtn
    00ba : 1408 ; -- <0112> pop y -- "
    00bb : 1008 ; -- <0112> pop x -- "
    00bc : 0c08 ; -- <0112> pop j -- "
    00bd : 0808 ; -- <0112> pop i -- "
    00be : fc00 ; -- <0112> rtn
-- :fail -- = 0x00bf
    00bf : 0760 ; -- <0114> b = -1
    00c0 : f808 ; -- <0115> pop rtna -- end_func
    00c1 : 1408 ; -- <0115> pop y -- "
    00c2 : 1008 ; -- <0115> pop x -- "
    00c3 : 0c08 ; -- <0115> pop j -- "
    00c4 : 0808 ; -- <0115> pop i -- "
    00c5 : fc00 ; -- <0115> end_func

-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x00c6
    00c6 : 2004 ; -- <0002> push x -- func spinwait
    00c7 : 2005 ; -- <0002> push y -- "
--patch
--rtn
    00c8 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00c9
    00c9 : 13a0 ; -- <0007> x = 16666
    00ca : 411a ; -- <0007> "
    00cb : 1760 ; -- <0008> y = -1
    00cc : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00cd
-- use of the ad2 name overrides auto-nop here.
    00cd : 1320 ; -- <0012> x = ad2
    00ce : e402 ; -- <0013> bn xz :spinwait_inner
    00cf : 00cd ; -- <0013> "
    00d0 : c800 ; -- <0014> a = a+b
    00d1 : 0300 ; -- <0014> "
    00d2 : e400 ; -- <0015> bn az :spinwait_outer
    00d3 : 00c9 ; -- <0015> "
    00d4 : 1408 ; -- <0016> pop y -- end_func
    00d5 : 1008 ; -- <0016> pop x -- "
    00d6 : fc00 ; -- <0016> end_func





-- ######## func fletcher16_init -- = 0x00d7
    00d7 : 1a00 ; -- <0005> $fletcher_sum1_reg = 0
    00d8 : 1e00 ; -- <0006> $fletcher_sum2_reg = 0
    00d9 : fc00 ; -- <0007> end_func

-- compute the modulus(255) of a number given in a.  return remainder in a.
-- ######## func mod255 -- = 0x00da
-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x00da
    00da : 06fe ; -- <0013> b = 0xfe
    00db : e006 ; -- <0014> br gt :mod255_greater
    00dc : 00de ; -- <0014> "
    00dd : fc00 ; -- <0015> rtn
-- :mod255_greater -- = 0x00de
    00de : 07a0 ; -- <0017> b = 0xff01
    00df : ff01 ; -- <0017> "
    00e0 : c800 ; -- <0018> a = a+b
    00e1 : 0300 ; -- <0018> "
    00e2 : e00f ; -- <0019> jmp :mod255_again
    00e3 : 00da ; -- <0019> "
    00e4 : fc00 ; -- <0020> end_func

-- accumulate a Fletcher16 checksum, given the next byte of data in a.
-- ######## func fletcher16_input8 -- = 0x00e5
    00e5 : 203e ; -- <0023> push rtna -- func fletcher16_input8
    00e6 : 0406 ; -- <0024> b = $fletcher_sum1_reg
    00e7 : c800 ; -- <0025> a = a+b
    00e8 : 0300 ; -- <0025> "
    00e9 : fba0 ; -- <0026> call :mod255
    00ea : 00da ; -- <0026> "
    00eb : fc00 ; -- <0026> "
    00ec : 1800 ; -- <0027> $fletcher_sum1_reg = a

    00ed : 0407 ; -- <0029> b = $fletcher_sum2_reg
    00ee : c800 ; -- <0030> a = a+b
    00ef : 0300 ; -- <0030> "
    00f0 : fba0 ; -- <0031> call :mod255
    00f1 : 00da ; -- <0031> "
    00f2 : fc00 ; -- <0031> "
    00f3 : 1c00 ; -- <0032> $fletcher_sum2_reg = a
    00f4 : f808 ; -- <0033> pop rtna -- end_func
    00f5 : fc00 ; -- <0033> end_func

-- accumulate a Fletcher16 checksum, given the next word of data in a.
-- ######## func fletcher16_input16 -- = 0x00f6
    00f6 : 2002 ; -- <0036> push i -- func fletcher16_input16
    00f7 : 203e ; -- <0036> push rtna -- "
    00f8 : 0b53 ; -- <0037> i = a>>4
    00f9 : 06ff ; -- <0038> b = 0xff
    00fa : c800 ; -- <0039> a = and
    00fb : 0330 ; -- <0039> "
    00fc : fba0 ; -- <0040> call :fletcher16_input8
    00fd : 00e5 ; -- <0040> "
    00fe : fc00 ; -- <0040> "
    00ff : 0002 ; -- <0041> a = i
    0100 : 0353 ; -- <0042> a = a>>4
    0101 : fba0 ; -- <0043> call :fletcher16_input8
    0102 : 00e5 ; -- <0043> "
    0103 : fc00 ; -- <0043> "
    0104 : f808 ; -- <0044> pop rtna -- end_func
    0105 : 0808 ; -- <0044> pop i -- "
    0106 : fc00 ; -- <0044> end_func

-- return the combined 16-bit result of Fletcher16 checksum in a.
-- ######## func fletcher16_result -- = 0x0107
    0107 : 0007 ; -- <0048> a = $fletcher_sum2_reg
    0108 : 0352 ; -- <0049> a = a<<4
    0109 : 0352 ; -- <0050> a = a<<4
    010a : 0406 ; -- <0051> b = $fletcher_sum1_reg
    010b : c800 ; -- <0052> a = or
    010c : 0334 ; -- <0052> "
    010d : fc00 ; -- <0053> end_func




-- --------------------------------------------
-- :main -- = 0x010e
-- put target into reset.
    010e : 3e02 ; -- <0083> bus_ctrl = $tg_reset_mask

-- init visor.
    010f : 3360 ; -- <0086> bp3_addr = $bp_disable
    0110 : 2f60 ; -- <0087> bp2_addr = $bp_disable
    0111 : 2b60 ; -- <0088> bp1_addr = $bp_disable
    0112 : 2760 ; -- <0089> bp0_addr = $bp_disable

-- startup message
    0113 : 020d ; -- <0092> a = 13 -- puteol
    0114 : 0000 ; -- <0092> a = a -- puteol
    0115 : fba0 ; -- <0092> puteol
    0116 : 0002 ; -- <0092> "
    0117 : fc00 ; -- <0092> "
    0118 : 020a ; -- <0092> a = 10 -- puteol
    0119 : 0000 ; -- <0092> a = a -- puteol
    011a : fba0 ; -- <0092> puteol
    011b : 0002 ; -- <0092> "
    011c : fc00 ; -- <0092> "
    011d : 0256 ; -- <0093> a = 86 -- putasc "V"
    011e : 0000 ; -- <0093> a = a -- putasc "V"
    011f : fba0 ; -- <0093> putasc "V"
    0120 : 0002 ; -- <0093> "
    0121 : fc00 ; -- <0093> "
    0122 : 0249 ; -- <0094> a = 73 -- putasc "I"
    0123 : 0000 ; -- <0094> a = a -- putasc "I"
    0124 : fba0 ; -- <0094> putasc "I"
    0125 : 0002 ; -- <0094> "
    0126 : fc00 ; -- <0094> "
    0127 : 0253 ; -- <0095> a = 83 -- putasc "S"
    0128 : 0000 ; -- <0095> a = a -- putasc "S"
    0129 : fba0 ; -- <0095> putasc "S"
    012a : 0002 ; -- <0095> "
    012b : fc00 ; -- <0095> "
    012c : 024f ; -- <0096> a = 79 -- putasc "O"
    012d : 0000 ; -- <0096> a = a -- putasc "O"
    012e : fba0 ; -- <0096> putasc "O"
    012f : 0002 ; -- <0096> "
    0130 : fc00 ; -- <0096> "
    0131 : 0252 ; -- <0097> a = 82 -- putasc "R"
    0132 : 0000 ; -- <0097> a = a -- putasc "R"
    0133 : fba0 ; -- <0097> putasc "R"
    0134 : 0002 ; -- <0097> "
    0135 : fc00 ; -- <0097> "

-- check for bootloader signal.
    0136 : 0019 ; -- <0100> a = boot_break
    0137 : e400 ; -- <0101> bn az :boot_run
    0138 : 013f ; -- <0101> "
-- ^^^ for press-to-debug; runs target by default.
-- br az :boot_run
-- ^^^ for press-to-run; debugs target by default.
-- step into the first target instruction.
    0139 : 3e08 ; -- <0106> bus_ctrl = $bp_step_mask
    013a : fba0 ; -- <0107> call :wait_for_bp
    013b : 01ef ; -- <0107> "
    013c : fc00 ; -- <0107> "
    013d : e00f ; -- <0108> jmp :cmd_loop
    013e : 0140 ; -- <0108> "
-- release target reset, to run.
-- :boot_run -- = 0x013f
    013f : 3e00 ; -- <0111> bus_ctrl = 0

-- command prompt loop.
-- :cmd_loop -- = 0x0140
    0140 : 000f ; -- <0115> a = bus_ctrl
    0141 : 0600 ; -- <0116> b = 0
    0142 : e007 ; -- <0117> br eq :running_prompt
    0143 : 0169 ; -- <0117> "

    0144 : fba0 ; -- <0119> call :dump_target
    0145 : 02cd ; -- <0119> "
    0146 : fc00 ; -- <0119> "
    0147 : 0016 ; -- <0120> a = tg_code_addr
    0148 : fba0 ; -- <0121> call :put4x
    0149 : 005d ; -- <0121> "
    014a : fc00 ; -- <0121> "
    014b : 022c ; -- <0122> a = 44 -- putasc ","
    014c : 0000 ; -- <0122> a = a -- putasc ","
    014d : fba0 ; -- <0122> putasc ","
    014e : 0002 ; -- <0122> "
    014f : fc00 ; -- <0122> "
    0150 : 0015 ; -- <0123> a = exr_shadow
    0151 : fba0 ; -- <0124> call :put4x
    0152 : 005d ; -- <0124> "
    0153 : fc00 ; -- <0124> "
    0154 : 0220 ; -- <0125> a = 32 -- putasc " "
    0155 : 0000 ; -- <0125> a = a -- putasc " "
    0156 : fba0 ; -- <0125> putasc " "
    0157 : 0002 ; -- <0125> "
    0158 : fc00 ; -- <0125> "
    0159 : 023e ; -- <0126> a = 62 -- putasc ">"
    015a : 0000 ; -- <0126> a = a -- putasc ">"
    015b : fba0 ; -- <0126> putasc ">"
    015c : 0002 ; -- <0126> "
    015d : fc00 ; -- <0126> "
    015e : fba0 ; -- <0127> getchar_echo
    015f : 0011 ; -- <0127> "
    0160 : fc00 ; -- <0127> "
    0161 : 2000 ; -- <0127> push a -- "
    0162 : 0000 ; -- <0127> a = a -- "
    0163 : fba0 ; -- <0127> "
    0164 : 0002 ; -- <0127> "
    0165 : fc00 ; -- <0127> "
    0166 : 0008 ; -- <0127> pop a -- "
    0167 : e00f ; -- <0128> jmp :parse_cmd
    0168 : 0198 ; -- <0128> "

-- :running_prompt -- = 0x0169
    0169 : 020d ; -- <0131> a = 13 -- puteol
    016a : 0000 ; -- <0131> a = a -- puteol
    016b : fba0 ; -- <0131> puteol
    016c : 0002 ; -- <0131> "
    016d : fc00 ; -- <0131> "
    016e : 020a ; -- <0131> a = 10 -- puteol
    016f : 0000 ; -- <0131> a = a -- puteol
    0170 : fba0 ; -- <0131> puteol
    0171 : 0002 ; -- <0131> "
    0172 : fc00 ; -- <0131> "
    0173 : 0252 ; -- <0132> a = 82 -- putasc "R"
    0174 : 0000 ; -- <0132> a = a -- putasc "R"
    0175 : fba0 ; -- <0132> putasc "R"
    0176 : 0002 ; -- <0132> "
    0177 : fc00 ; -- <0132> "
    0178 : 0255 ; -- <0133> a = 85 -- putasc "U"
    0179 : 0000 ; -- <0133> a = a -- putasc "U"
    017a : fba0 ; -- <0133> putasc "U"
    017b : 0002 ; -- <0133> "
    017c : fc00 ; -- <0133> "
    017d : 024e ; -- <0134> a = 78 -- putasc "N"
    017e : 0000 ; -- <0134> a = a -- putasc "N"
    017f : fba0 ; -- <0134> putasc "N"
    0180 : 0002 ; -- <0134> "
    0181 : fc00 ; -- <0134> "
    0182 : 0220 ; -- <0135> a = 32 -- putasc " "
    0183 : 0000 ; -- <0135> a = a -- putasc " "
    0184 : fba0 ; -- <0135> putasc " "
    0185 : 0002 ; -- <0135> "
    0186 : fc00 ; -- <0135> "
    0187 : 023e ; -- <0136> a = 62 -- putasc ">"
    0188 : 0000 ; -- <0136> a = a -- putasc ">"
    0189 : fba0 ; -- <0136> putasc ">"
    018a : 0002 ; -- <0136> "
    018b : fc00 ; -- <0136> "
-- :run_poll -- = 0x018c
    018c : fba0 ; -- <0138> pollchar
    018d : 001a ; -- <0138> "
    018e : fc00 ; -- <0138> "
    018f : 0760 ; -- <0139> b = -1
    0190 : e407 ; -- <0140> bn eq :parse_cmd
    0191 : 0198 ; -- <0140> "
    0192 : 0018 ; -- <0141> a = bp_status
    0193 : e000 ; -- <0142> br az :run_poll
    0194 : 018c ; -- <0142> "
-- target hit a breakpoint; switch to stepping mode.
    0195 : 3e08 ; -- <0144> bus_ctrl = $bp_step_mask
    0196 : e00f ; -- <0145> jmp :cmd_loop
    0197 : 0140 ; -- <0145> "

-- :parse_cmd -- = 0x0198

-- command = step next instruction.
    0198 : 066e ; -- <0150> b = 110 -- asc b = "n"
    0199 : e407 ; -- <0151> bn eq :skip_step
    019a : 01a2 ; -- <0151> "
    019b : 3e08 ; -- <0152> bus_ctrl = $bp_step_mask
    019c : 2409 ; -- <0153> bp0_addr = bp0_addr
    019d : fba0 ; -- <0154> call :wait_for_bp
    019e : 01ef ; -- <0154> "
    019f : fc00 ; -- <0154> "
    01a0 : e00f ; -- <0155> jmp :cmd_loop
    01a1 : 0140 ; -- <0155> "
-- :skip_step -- = 0x01a2

-- command = reset target.
    01a2 : 0652 ; -- <0159> b = 82 -- asc b = "R"
    01a3 : e407 ; -- <0160> bn eq :skip_reset
    01a4 : 01ae ; -- <0160> "
    01a5 : 3e02 ; -- <0161> bus_ctrl = $tg_reset_mask
    01a6 : c800 ; -- <0162> nop
    01a7 : c800 ; -- <0163> nop
    01a8 : 3e08 ; -- <0164> bus_ctrl = $bp_step_mask
    01a9 : fba0 ; -- <0165> call :wait_for_bp
    01aa : 01ef ; -- <0165> "
    01ab : fc00 ; -- <0165> "
    01ac : e00f ; -- <0166> jmp :cmd_loop
    01ad : 0140 ; -- <0166> "
-- :skip_reset -- = 0x01ae

-- command = load program.
    01ae : 066c ; -- <0170> b = 108 -- asc b = "l"
    01af : e407 ; -- <0171> bn eq :skip_load
    01b0 : 01b6 ; -- <0171> "
    01b1 : fba0 ; -- <0172> call :load_program
    01b2 : 0249 ; -- <0172> "
    01b3 : fc00 ; -- <0172> "
    01b4 : e00f ; -- <0173> jmp :cmd_loop
    01b5 : 0140 ; -- <0173> "
-- :skip_load -- = 0x01b6

-- command = run full speed.
    01b6 : 0672 ; -- <0177> b = 114 -- asc b = "r"
    01b7 : e407 ; -- <0178> bn eq :skip_run
    01b8 : 01bd ; -- <0178> "
-- release target reset, to run.
    01b9 : 3e00 ; -- <0180> bus_ctrl = 0
    01ba : 2409 ; -- <0181> bp0_addr = bp0_addr
    01bb : e00f ; -- <0182> jmp :cmd_loop
    01bc : 0140 ; -- <0182> "
-- :skip_run -- = 0x01bd

-- command = set breakpoint.
    01bd : 0662 ; -- <0186> b = 98 -- asc b = "b"
    01be : e407 ; -- <0187> bn eq :skip_setbrk
    01bf : 01c5 ; -- <0187> "
    01c0 : fba0 ; -- <0188> call :set_bp
    01c1 : 01f3 ; -- <0188> "
    01c2 : fc00 ; -- <0188> "
    01c3 : e00f ; -- <0189> jmp :cmd_loop
    01c4 : 0140 ; -- <0189> "
-- :skip_setbrk -- = 0x01c5

    01c5 : 023f ; -- <0192> a = 63 -- putasc "?"
    01c6 : 0000 ; -- <0192> a = a -- putasc "?"
    01c7 : fba0 ; -- <0192> putasc "?"
    01c8 : 0002 ; -- <0192> "
    01c9 : fc00 ; -- <0192> "
    01ca : 020d ; -- <0193> a = 13 -- puteol
    01cb : 0000 ; -- <0193> a = a -- puteol
    01cc : fba0 ; -- <0193> puteol
    01cd : 0002 ; -- <0193> "
    01ce : fc00 ; -- <0193> "
    01cf : 020a ; -- <0193> a = 10 -- puteol
    01d0 : 0000 ; -- <0193> a = a -- puteol
    01d1 : fba0 ; -- <0193> puteol
    01d2 : 0002 ; -- <0193> "
    01d3 : fc00 ; -- <0193> "
    01d4 : e00f ; -- <0194> jmp :cmd_loop
    01d5 : 0140 ; -- <0194> "

-- demonstrations ------------------------------

-- set a breakpoint, wait til it hits.
    01d6 : 2615 ; -- <0199> bp0_addr = 0x15
-- :main_loop -- = 0x01d7
    01d7 : fba0 ; -- <0201> call :wait_for_bp
    01d8 : 01ef ; -- <0201> "
    01d9 : fc00 ; -- <0201> "

-- release target to run full speed.
    01da : 3e00 ; -- <0204> bus_ctrl = 0

-- interrupt the target and single step it a few times.
    01db : 3e08 ; -- <0207> bus_ctrl = $bp_step_mask
    01dc : fba0 ; -- <0208> call :wait_for_bp
    01dd : 01ef ; -- <0208> "
    01de : fc00 ; -- <0208> "
    01df : 2409 ; -- <0209> bp0_addr = bp0_addr
    01e0 : fba0 ; -- <0210> call :wait_for_bp
    01e1 : 01ef ; -- <0210> "
    01e2 : fc00 ; -- <0210> "
    01e3 : 2409 ; -- <0211> bp0_addr = bp0_addr
    01e4 : fba0 ; -- <0212> call :wait_for_bp
    01e5 : 01ef ; -- <0212> "
    01e6 : fc00 ; -- <0212> "
    01e7 : 2409 ; -- <0213> bp0_addr = bp0_addr
    01e8 : fba0 ; -- <0214> call :wait_for_bp
    01e9 : 01ef ; -- <0214> "
    01ea : fc00 ; -- <0214> "
    01eb : 3e00 ; -- <0215> bus_ctrl = 0

-- release target to pass breakpoint once.
    01ec : 2409 ; -- <0218> bp0_addr = bp0_addr

    01ed : e00f ; -- <0220> jmp :main_loop
    01ee : 01d7 ; -- <0220> "

-- ######## func wait_for_bp -- = 0x01ef
-- :poll -- = 0x01ef
    01ef : 0018 ; -- <0224> a = bp_status
    01f0 : e000 ; -- <0225> br az :poll
    01f1 : 01ef ; -- <0225> "
    01f2 : fc00 ; -- <0226> end_func

-- ######## func set_bp -- = 0x01f3
    01f3 : 2004 ; -- <0228> push x -- func set_bp
    01f4 : 2005 ; -- <0228> push y -- "
    01f5 : 203e ; -- <0228> push rtna -- "
    01f6 : fba0 ; -- <0229> getchar_echo
    01f7 : 0011 ; -- <0229> "
    01f8 : fc00 ; -- <0229> "
    01f9 : 2000 ; -- <0229> push a -- "
    01fa : 0000 ; -- <0229> a = a -- "
    01fb : fba0 ; -- <0229> "
    01fc : 0002 ; -- <0229> "
    01fd : fc00 ; -- <0229> "
    01fe : 0008 ; -- <0229> pop a -- "
    01ff : 1000 ; -- <0230> x = a
    0200 : fba0 ; -- <0231> getchar_echo
    0201 : 0011 ; -- <0231> "
    0202 : fc00 ; -- <0231> "
    0203 : 2000 ; -- <0231> push a -- "
    0204 : 0000 ; -- <0231> a = a -- "
    0205 : fba0 ; -- <0231> "
    0206 : 0002 ; -- <0231> "
    0207 : fc00 ; -- <0231> "
    0208 : 0008 ; -- <0231> pop a -- "
    0209 : 063d ; -- <0232> b = 61 -- asc b = "="
    020a : e407 ; -- <0233> bn eq :fail
    020b : 0236 ; -- <0233> "
    020c : fba0 ; -- <0234> call :get4x
    020d : 009a ; -- <0234> "
    020e : fc00 ; -- <0234> "
    020f : 1400 ; -- <0235> y = a
    0210 : 0200 ; -- <0236> a = 0
    0211 : e407 ; -- <0237> bn eq :fail
    0212 : 0236 ; -- <0237> "
    0213 : 0004 ; -- <0238> a = x
    0214 : 0630 ; -- <0239> b = 48 -- asc b = "0"
    0215 : e007 ; -- <0240> br eq :b0
    0216 : 0222 ; -- <0240> "
    0217 : 0631 ; -- <0241> b = 49 -- asc b = "1"
    0218 : e007 ; -- <0242> br eq :b1
    0219 : 0227 ; -- <0242> "
    021a : 0632 ; -- <0243> b = 50 -- asc b = "2"
    021b : e007 ; -- <0244> br eq :b2
    021c : 022c ; -- <0244> "
    021d : 0633 ; -- <0245> b = 51 -- asc b = "3"
    021e : e007 ; -- <0246> br eq :b3
    021f : 0231 ; -- <0246> "
    0220 : e00f ; -- <0247> jmp :fail
    0221 : 0236 ; -- <0247> "
-- :b0 -- = 0x0222
    0222 : 2405 ; -- <0249> bp0_addr = y
    0223 : f808 ; -- <0250> pop rtna -- rtn
    0224 : 1408 ; -- <0250> pop y -- "
    0225 : 1008 ; -- <0250> pop x -- "
    0226 : fc00 ; -- <0250> rtn
-- :b1 -- = 0x0227
    0227 : 2805 ; -- <0252> bp1_addr = y
    0228 : f808 ; -- <0253> pop rtna -- rtn
    0229 : 1408 ; -- <0253> pop y -- "
    022a : 1008 ; -- <0253> pop x -- "
    022b : fc00 ; -- <0253> rtn
-- :b2 -- = 0x022c
    022c : 2c05 ; -- <0255> bp2_addr = y
    022d : f808 ; -- <0256> pop rtna -- rtn
    022e : 1408 ; -- <0256> pop y -- "
    022f : 1008 ; -- <0256> pop x -- "
    0230 : fc00 ; -- <0256> rtn
-- :b3 -- = 0x0231
    0231 : 3005 ; -- <0258> bp3_addr = y
    0232 : f808 ; -- <0259> pop rtna -- rtn
    0233 : 1408 ; -- <0259> pop y -- "
    0234 : 1008 ; -- <0259> pop x -- "
    0235 : fc00 ; -- <0259> rtn
-- :fail -- = 0x0236
    0236 : 023f ; -- <0261> a = 63 -- putasc "?"
    0237 : 0000 ; -- <0261> a = a -- putasc "?"
    0238 : fba0 ; -- <0261> putasc "?"
    0239 : 0002 ; -- <0261> "
    023a : fc00 ; -- <0261> "
    023b : 020d ; -- <0262> a = 13 -- puteol
    023c : 0000 ; -- <0262> a = a -- puteol
    023d : fba0 ; -- <0262> puteol
    023e : 0002 ; -- <0262> "
    023f : fc00 ; -- <0262> "
    0240 : 020a ; -- <0262> a = 10 -- puteol
    0241 : 0000 ; -- <0262> a = a -- puteol
    0242 : fba0 ; -- <0262> puteol
    0243 : 0002 ; -- <0262> "
    0244 : fc00 ; -- <0262> "
    0245 : f808 ; -- <0263> pop rtna -- end_func
    0246 : 1408 ; -- <0263> pop y -- "
    0247 : 1008 ; -- <0263> pop x -- "
    0248 : fc00 ; -- <0263> end_func

-- ######## func load_program -- = 0x0249
    0249 : 2002 ; -- <0265> push i -- func load_program
    024a : 2003 ; -- <0265> push j -- "
    024b : 2004 ; -- <0265> push x -- "
    024c : 203e ; -- <0265> push rtna -- "
-- load target program from UART.

-- length, little-endian.  memorize in x.
    024d : 020d ; -- <0269> a = 13 -- puteol
    024e : 0000 ; -- <0269> a = a -- puteol
    024f : fba0 ; -- <0269> puteol
    0250 : 0002 ; -- <0269> "
    0251 : fc00 ; -- <0269> "
    0252 : 020a ; -- <0269> a = 10 -- puteol
    0253 : 0000 ; -- <0269> a = a -- puteol
    0254 : fba0 ; -- <0269> puteol
    0255 : 0002 ; -- <0269> "
    0256 : fc00 ; -- <0269> "
    0257 : 024c ; -- <0270> a = 76 -- putasc L
    0258 : 0000 ; -- <0270> a = a -- putasc L
    0259 : fba0 ; -- <0270> putasc L
    025a : 0002 ; -- <0270> "
    025b : fc00 ; -- <0270> "
    025c : fba0 ; -- <0271> get16 x
    025d : 0011 ; -- <0271> "
    025e : fc00 ; -- <0271> "
    025f : 2000 ; -- <0271> push a -- "
    0260 : fba0 ; -- <0271> "
    0261 : 0011 ; -- <0271> "
    0262 : fc00 ; -- <0271> "
    0263 : 0352 ; -- <0271> "
    0264 : 0352 ; -- <0271> "
    0265 : 0408 ; -- <0271> pop b -- "
    0266 : c800 ; -- <0271> "
    0267 : 1334 ; -- <0271> "
    0268 : 0004 ; -- <0272> a = x
    0269 : fba0 ; -- <0273> call :put4x
    026a : 005d ; -- <0273> "
    026b : fc00 ; -- <0273> "
    026c : 020d ; -- <0274> a = 13 -- puteol
    026d : 0000 ; -- <0274> a = a -- puteol
    026e : fba0 ; -- <0274> puteol
    026f : 0002 ; -- <0274> "
    0270 : fc00 ; -- <0274> "
    0271 : 020a ; -- <0274> a = 10 -- puteol
    0272 : 0000 ; -- <0274> a = a -- puteol
    0273 : fba0 ; -- <0274> puteol
    0274 : 0002 ; -- <0274> "
    0275 : fc00 ; -- <0274> "

-- put target into reset again, in case this is a target warm boot.
    0276 : 3e02 ; -- <0277> bus_ctrl = $tg_reset_mask

-- load opcodes.  count up address in i.
    0277 : 0a00 ; -- <0280> i = 0
    0278 : 0e01 ; -- <0281> j = 1
    0279 : fba0 ; -- <0282> call :fletcher16_init
    027a : 00d7 ; -- <0282> "
    027b : fc00 ; -- <0282> "
-- :loadword -- = 0x027c
-- receive, store in RAM.
    027c : fba0 ; -- <0285> get16 a
    027d : 0011 ; -- <0285> "
    027e : fc00 ; -- <0285> "
    027f : 2000 ; -- <0285> push a -- "
    0280 : fba0 ; -- <0285> "
    0281 : 0011 ; -- <0285> "
    0282 : fc00 ; -- <0285> "
    0283 : 0352 ; -- <0285> "
    0284 : 0352 ; -- <0285> "
    0285 : 0408 ; -- <0285> pop b -- "
    0286 : c800 ; -- <0285> "
    0287 : 0334 ; -- <0285> "
    0288 : 4c02 ; -- <0286> m9k_addr = i
    0289 : 5000 ; -- <0287> m9k_data = a

-- read back from RAM and build checksum.
    028a : 0014 ; -- <0290> a = m9k_data
    028b : fba0 ; -- <0291> call :fletcher16_input16
    028c : 00f6 ; -- <0291> "
    028d : fc00 ; -- <0291> "

--  show decimated feedback text, for more speed:
    028e : 0002 ; -- <0294> a = i
    028f : 061f ; -- <0295> b = 0x1f
    0290 : e403 ; -- <0296> bn and0z :skip_text
    0291 : 0297 ; -- <0296> "
    0292 : 022e ; -- <0297> a = 46 -- putasc "."
    0293 : 0000 ; -- <0297> a = a -- putasc "."
    0294 : fba0 ; -- <0297> putasc "."
    0295 : 0002 ; -- <0297> "
    0296 : fc00 ; -- <0297> "
-- :skip_text -- = 0x0297

    0297 : c800 ; -- <0300> i = i+j
    0298 : 0b10 ; -- <0300> "
    0299 : 0002 ; -- <0301> a = i
    029a : 0404 ; -- <0302> b = x
    029b : e407 ; -- <0303> bn eq :loadword
    029c : 027c ; -- <0303> "
    029d : 020d ; -- <0304> a = 13 -- puteol
    029e : 0000 ; -- <0304> a = a -- puteol
    029f : fba0 ; -- <0304> puteol
    02a0 : 0002 ; -- <0304> "
    02a1 : fc00 ; -- <0304> "
    02a2 : 020a ; -- <0304> a = 10 -- puteol
    02a3 : 0000 ; -- <0304> a = a -- puteol
    02a4 : fba0 ; -- <0304> puteol
    02a5 : 0002 ; -- <0304> "
    02a6 : fc00 ; -- <0304> "
    02a7 : fba0 ; -- <0305> call :fletcher16_result
    02a8 : 0107 ; -- <0305> "
    02a9 : fc00 ; -- <0305> "
    02aa : fba0 ; -- <0306> call :put4x
    02ab : 005d ; -- <0306> "
    02ac : fc00 ; -- <0306> "
    02ad : 020d ; -- <0307> a = 13 -- puteol
    02ae : 0000 ; -- <0307> a = a -- puteol
    02af : fba0 ; -- <0307> puteol
    02b0 : 0002 ; -- <0307> "
    02b1 : fc00 ; -- <0307> "
    02b2 : 020a ; -- <0307> a = 10 -- puteol
    02b3 : 0000 ; -- <0307> a = a -- puteol
    02b4 : fba0 ; -- <0307> puteol
    02b5 : 0002 ; -- <0307> "
    02b6 : fc00 ; -- <0307> "
    02b7 : f808 ; -- <0308> pop rtna -- end_func
    02b8 : 1008 ; -- <0308> pop x -- "
    02b9 : 0c08 ; -- <0308> pop j -- "
    02ba : 0808 ; -- <0308> pop i -- "
    02bb : fc00 ; -- <0308> end_func

-- observe a register.  return its value in peek_data.
-- pass its register address in a.
-- ######## func peek -- = 0x02bc
    02bc : 07a0 ; -- <0313> b = 0x3ff
    02bd : 03ff ; -- <0313> "
    02be : c800 ; -- <0314> a = and
    02bf : 0330 ; -- <0314> "
-- debug_peek_reg = 31 << 10
    02c0 : 07a0 ; -- <0316> b = 0x7c00
    02c1 : 7c00 ; -- <0316> "
    02c2 : c800 ; -- <0317> force_opcode = or
    02c3 : 3734 ; -- <0317> "
    02c4 : 3e04 ; -- <0318> bus_ctrl = $divert_code_bus_mask
    02c5 : 4201 ; -- <0319> tg_force = $hold_state_mask
    02c6 : 4203 ; -- <0320> tg_force = ($hold_state_mask | $force_load_exr_mask)
    02c7 : 4205 ; -- <0321> tg_force = ($hold_state_mask | $force_exec_mask)
    02c8 : 4201 ; -- <0322> tg_force = $hold_state_mask
-- target's register value is now in peek_data.
-- refill target exr so it can resume seamlessly.
    02c9 : 3415 ; -- <0325> force_opcode = exr_shadow
    02ca : 4203 ; -- <0326> tg_force = ($hold_state_mask | $force_load_exr_mask)
    02cb : 4200 ; -- <0327> tg_force = 0
    02cc : fc00 ; -- <0328> end_func

-- show target status display.
-- ######## func dump_target -- = 0x02cd
    02cd : 2002 ; -- <0331> push i -- func dump_target
    02ce : 2003 ; -- <0331> push j -- "
    02cf : 2004 ; -- <0331> push x -- "
    02d0 : 2005 ; -- <0331> push y -- "
    02d1 : 203e ; -- <0331> push rtna -- "
    02d2 : 020d ; -- <0332> a = 13 -- puteol
    02d3 : 0000 ; -- <0332> a = a -- puteol
    02d4 : fba0 ; -- <0332> puteol
    02d5 : 0002 ; -- <0332> "
    02d6 : fc00 ; -- <0332> "
    02d7 : 020a ; -- <0332> a = 10 -- puteol
    02d8 : 0000 ; -- <0332> a = a -- puteol
    02d9 : fba0 ; -- <0332> puteol
    02da : 0002 ; -- <0332> "
    02db : fc00 ; -- <0332> "
    02dc : 0a00 ; -- <0333> i = 0
-- :next_reg -- = 0x02dd
-- fetch register name from table in target program.
-- i = register number.  x = 2-byte word index within each name string.
-- peek is skipped for any reg name starting with 2 slashes (good for read-sensitive regs).
    02dd : 1200 ; -- <0338> x = 0
    02de : 1601 ; -- <0339> y = 1
-- :next_chars -- = 0x02df
    02df : 0002 ; -- <0341> a = i
    02e0 : 0351 ; -- <0342> a = a<<1
    02e1 : 0351 ; -- <0343> a = a<<1
    02e2 : 0603 ; -- <0344> b = 3
    02e3 : c800 ; -- <0345> a = a+b
    02e4 : 0300 ; -- <0345> "
    02e5 : 0404 ; -- <0346> b = x
    02e6 : c800 ; -- <0347> m9k_addr = a+b
    02e7 : 4f00 ; -- <0347> "
    02e8 : 0014 ; -- <0348> a = m9k_data
    02e9 : 07a0 ; -- <0349> b = 0x2f2f
    02ea : 2f2f ; -- <0349> "
    02eb : e007 ; -- <0350> br eq :no_peek
    02ec : 0315 ; -- <0350> "
    02ed : 0014 ; -- <0351> a = m9k_data -- putchar m9k_data
    02ee : fba0 ; -- <0351> putchar m9k_data
    02ef : 0002 ; -- <0351> "
    02f0 : fc00 ; -- <0351> "
    02f1 : 0014 ; -- <0352> a = m9k_data
    02f2 : 0353 ; -- <0353> a = a>>4
    02f3 : 0353 ; -- <0354> a = a>>4
    02f4 : 0000 ; -- <0355> a = a -- putchar a
    02f5 : fba0 ; -- <0355> putchar a
    02f6 : 0002 ; -- <0355> "
    02f7 : fc00 ; -- <0355> "
    02f8 : c800 ; -- <0356> x = x+y
    02f9 : 1320 ; -- <0356> "
    02fa : 0004 ; -- <0357> a = x
    02fb : 0604 ; -- <0358> b = 4
    02fc : e407 ; -- <0359> bn eq :next_chars
    02fd : 02df ; -- <0359> "
    02fe : 023d ; -- <0360> a = 61 -- putasc "="
    02ff : 0000 ; -- <0360> a = a -- putasc "="
    0300 : fba0 ; -- <0360> putasc "="
    0301 : 0002 ; -- <0360> "
    0302 : fc00 ; -- <0360> "
    0303 : 0002 ; -- <0361> a = i
    0304 : fba0 ; -- <0362> call :peek
    0305 : 02bc ; -- <0362> "
    0306 : fc00 ; -- <0362> "
    0307 : 0017 ; -- <0363> a = peek_data
    0308 : fba0 ; -- <0364> call :put4x
    0309 : 005d ; -- <0364> "
    030a : fc00 ; -- <0364> "
    030b : 020d ; -- <0365> a = 13 -- puteol
    030c : 0000 ; -- <0365> a = a -- puteol
    030d : fba0 ; -- <0365> puteol
    030e : 0002 ; -- <0365> "
    030f : fc00 ; -- <0365> "
    0310 : 020a ; -- <0365> a = 10 -- puteol
    0311 : 0000 ; -- <0365> a = a -- puteol
    0312 : fba0 ; -- <0365> puteol
    0313 : 0002 ; -- <0365> "
    0314 : fc00 ; -- <0365> "
-- :no_peek -- = 0x0315
    0315 : 0e01 ; -- <0367> j = 1
    0316 : c800 ; -- <0368> i = i+j
    0317 : 0b10 ; -- <0368> "
-- loop up to the number of registers in the target program's register name table.
    0318 : 4e02 ; -- <0370> m9k_addr = 2
    0319 : 0414 ; -- <0371> b = m9k_data
    031a : 0002 ; -- <0372> a = i
    031b : e407 ; -- <0373> bn eq :next_reg
    031c : 02dd ; -- <0373> "
    031d : f808 ; -- <0374> pop rtna -- end_func
    031e : 1408 ; -- <0374> pop y -- "
    031f : 1008 ; -- <0374> pop x -- "
    0320 : 0c08 ; -- <0374> pop j -- "
    0321 : 0808 ; -- <0374> pop i -- "
    0322 : fc00 ; -- <0374> end_func

        
        END;
    
