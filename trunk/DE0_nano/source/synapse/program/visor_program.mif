
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- register file configuration

-- application-specific register aliases.





--alias_src  tg_debug_out	    [incr counter]


    0000 : e00f ; -- <0052> jmp :main
    0001 : 00dd ; -- <0052> "


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0002 : 0601 ; -- <0005> b = 1
    0003 : e003 ; -- <0006> br and0z :pick_byte_even
    0004 : 000d ; -- <0006> "
    0005 : 0350 ; -- <0007> a = a>>1
    0006 : 0404 ; -- <0008> b = x
    0007 : c800 ; -- <0009> fetch a from a+b
    0008 : d300 ; -- <0009> "
    0009 : 03b0 ; -- <0009> "
    000a : 0353 ; -- <0010> a = a>>4
    000b : 0353 ; -- <0011> a = a>>4
    000c : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x000d
    000d : 0350 ; -- <0014> a = a>>1
    000e : 0404 ; -- <0015> b = x
    000f : c800 ; -- <0016> fetch a from a+b
    0010 : d300 ; -- <0016> "
    0011 : 03b0 ; -- <0016> "
    0012 : 06ff ; -- <0017> b = 0xff
    0013 : c800 ; -- <0018> a = and
    0014 : 0330 ; -- <0018> "
    0015 : fc00 ; -- <0019> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    0016 : 2002 ; -- <0027> push i -- func find_in_fetch
    0017 : 2003 ; -- <0027> push j -- "
    0018 : 2005 ; -- <0027> push y -- "
    0019 : 203e ; -- <0027> push rtna -- "
    001a : 1400 ; -- <0028> y = a
    001b : 0f60 ; -- <0029> j = -1
-- :again -- = 0x001c
    001c : e001 ; -- <0031> br iz :fail
    001d : 002c ; -- <0031> "
    001e : 0b10 ; -- <0032> i = ad1
    001f : 0002 ; -- <0033> a = i
    0020 : fba0 ; -- <0034> call :fetch_byte
    0021 : 0002 ; -- <0034> "
    0022 : fc00 ; -- <0034> "
    0023 : 0405 ; -- <0035> b = y
    0024 : e407 ; -- <0036> bn eq :again
    0025 : 001c ; -- <0036> "
-- :found -- = 0x0026
    0026 : 0002 ; -- <0038> a = i
    0027 : f808 ; -- <0039> pop rtna -- rtn
    0028 : 1408 ; -- <0039> pop y -- "
    0029 : 0c08 ; -- <0039> pop j -- "
    002a : 0808 ; -- <0039> pop i -- "
    002b : fc00 ; -- <0039> rtn
-- :fail -- = 0x002c
    002c : 0360 ; -- <0041> a = -1
    002d : f808 ; -- <0042> pop rtna -- rtn
    002e : 1408 ; -- <0042> pop y -- "
    002f : 0c08 ; -- <0042> pop j -- "
    0030 : 0808 ; -- <0042> pop i -- "
    0031 : fc00 ; -- <0042> rtn



-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
    0032 : 2004 ; -- <0035> push x -- func putchar_atx

    0033 : 1000 ; -- <0037> x = a

-- wait for UART to be idle (not busy).
    0034 : 0202 ; -- <0040> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x0035
    0035 : 0412 ; -- <0042> b = atx_ctrl
    0036 : e403 ; -- <0043> bn and0z :pcatx_wait_for_idle
    0037 : 0035 ; -- <0043> "

-- push word to the UART.  its low byte is a character.
    0038 : 4404 ; -- <0046> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    0039 : 4a01 ; -- <0051> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    003a : 0202 ; -- <0054> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x003b
    003b : 0412 ; -- <0056> b = atx_ctrl
    003c : e003 ; -- <0057> br and0z :pcatx_wait_for_busy
    003d : 003b ; -- <0057> "
    003e : 4a00 ; -- <0058> atx_ctrl = 0
    003f : 1008 ; -- <0059> pop x -- rtn
    0040 : fc00 ; -- <0059> rtn

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- wait until UART is busy, then idle.
    0041 : 0204 ; -- <0065> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0042
    0042 : 0412 ; -- <0067> b = atx_ctrl
    0043 : e003 ; -- <0068> br and0z :wait_for_busy
    0044 : 0042 ; -- <0068> "
-- :wait_for_idle -- = 0x0045
    0045 : 0412 ; -- <0070> b = atx_ctrl
    0046 : e403 ; -- <0071> bn and0z :wait_for_idle
    0047 : 0045 ; -- <0071> "
    0048 : 0011 ; -- <0072> a = atx_data
    0049 : fc00 ; -- <0073> rtn

-- returns a character in a, or -1 if none.
-- this version can miss characters if not polled while the character is arriving.
-- check for UART is busy, then idle.
    004a : 0204 ; -- <0079> a = $arx_busy_mask
    004b : 0412 ; -- <0080> b = atx_ctrl
    004c : e003 ; -- <0081> br and0z :none
    004d : 0053 ; -- <0081> "
-- :wait_for_idle -- = 0x004e
    004e : 0412 ; -- <0083> b = atx_ctrl
    004f : e403 ; -- <0084> bn and0z :wait_for_idle
    0050 : 004e ; -- <0084> "
    0051 : 0011 ; -- <0085> a = atx_data
    0052 : fc00 ; -- <0086> rtn
-- :none -- = 0x0053
    0053 : 0360 ; -- <0088> a = -1
    0054 : fc00 ; -- <0089> rtn



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0055
-- "0123456789abcdef"
    0055 : 3130 ; -- <0054> 10
    0056 : 3332 ; -- <0054> 32
    0057 : 3534 ; -- <0054> 54
    0058 : 3736 ; -- <0054> 76
    0059 : 3938 ; -- <0054> 98
    005a : 6261 ; -- <0054> ba
    005b : 6463 ; -- <0054> dc
    005c : 6665 ; -- <0054> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    005d : 2004 ; -- <0058> push x -- func put4x
    005e : 2006 ; -- <0058> push g6 -- "
    005f : 203e ; -- <0058> push rtna -- "
    0060 : 13a0 ; -- <0059> x = :hexdigits
    0061 : 0055 ; -- <0059> "

    0062 : 1800 ; -- <0061> g6 = a
    0063 : 07a0 ; -- <0062> b = 0xF000
    0064 : f000 ; -- <0062> "
    0065 : c800 ; -- <0063> a = and
    0066 : 0330 ; -- <0063> "
    0067 : 0353 ; -- <0064> a = a>>4
    0068 : 0353 ; -- <0065> a = a>>4
    0069 : 0353 ; -- <0066> a = a>>4
    006a : fba0 ; -- <0067> call fetch_byte
    006b : 0002 ; -- <0067> "
    006c : fc00 ; -- <0067> "
    006d : 0000 ; -- <0068> a = a -- putchar a
    006e : fba0 ; -- <0068> putchar a
    006f : 0032 ; -- <0068> "
    0070 : fc00 ; -- <0068> "

    0071 : 0006 ; -- <0070> a = g6
    0072 : 07a0 ; -- <0071> b = 0x0F00
    0073 : 0f00 ; -- <0071> "
    0074 : c800 ; -- <0072> a = and
    0075 : 0330 ; -- <0072> "
    0076 : 0353 ; -- <0073> a = a>>4
    0077 : 0353 ; -- <0074> a = a>>4
    0078 : fba0 ; -- <0075> call fetch_byte
    0079 : 0002 ; -- <0075> "
    007a : fc00 ; -- <0075> "
    007b : 0000 ; -- <0076> a = a -- putchar a
    007c : fba0 ; -- <0076> putchar a
    007d : 0032 ; -- <0076> "
    007e : fc00 ; -- <0076> "

    007f : 0006 ; -- <0078> a = g6
    0080 : 06f0 ; -- <0079> b = 0x00F0
    0081 : c800 ; -- <0080> a = and
    0082 : 0330 ; -- <0080> "
    0083 : 0353 ; -- <0081> a = a>>4
    0084 : fba0 ; -- <0082> call fetch_byte
    0085 : 0002 ; -- <0082> "
    0086 : fc00 ; -- <0082> "
    0087 : 0000 ; -- <0083> a = a -- putchar a
    0088 : fba0 ; -- <0083> putchar a
    0089 : 0032 ; -- <0083> "
    008a : fc00 ; -- <0083> "

    008b : 0006 ; -- <0085> a = g6
    008c : 060f ; -- <0086> b = 0x000F
    008d : c800 ; -- <0087> a = and
    008e : 0330 ; -- <0087> "
    008f : fba0 ; -- <0088> call fetch_byte
    0090 : 0002 ; -- <0088> "
    0091 : fc00 ; -- <0088> "
    0092 : 0000 ; -- <0089> a = a -- putchar a
    0093 : fba0 ; -- <0089> putchar a
    0094 : 0032 ; -- <0089> "
    0095 : fc00 ; -- <0089> "

    0096 : f808 ; -- <0091> pop rtna -- rtn
    0097 : 1808 ; -- <0091> pop g6 -- "
    0098 : 1008 ; -- <0091> pop x -- "
    0099 : fc00 ; -- <0091> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    009a : 2002 ; -- <0095> push i -- func get4x
    009b : 2003 ; -- <0095> push j -- "
    009c : 2004 ; -- <0095> push x -- "
    009d : 2005 ; -- <0095> push y -- "
    009e : 203e ; -- <0095> push rtna -- "
-- y = digit counter
-- j = sum
    009f : 1604 ; -- <0098> y = 4
-- :again -- = 0x00a0
    00a0 : fba0 ; -- <0100> getchar
    00a1 : 0041 ; -- <0100> "
    00a2 : fc00 ; -- <0100> "
    00a3 : 2000 ; -- <0100> push a -- "
    00a4 : 0000 ; -- <0100> a = a -- "
    00a5 : fba0 ; -- <0100> "
    00a6 : 0032 ; -- <0100> "
    00a7 : fc00 ; -- <0100> "
    00a8 : 0008 ; -- <0100> pop a -- "
    00a9 : 13a0 ; -- <0101> x = :hexdigits
    00aa : 0055 ; -- <0101> "
    00ab : 0a10 ; -- <0102> i = 16
    00ac : fba0 ; -- <0103> call :find_in_fetch
    00ad : 0016 ; -- <0103> "
    00ae : fc00 ; -- <0103> "
    00af : 0760 ; -- <0104> b = -1
    00b0 : e007 ; -- <0105> br eq :fail
    00b1 : 00c5 ; -- <0105> "
    00b2 : 0400 ; -- <0106> b = a
    00b3 : 0003 ; -- <0107> a = j
    00b4 : 0352 ; -- <0108> a = a<<4
    00b5 : c800 ; -- <0109> j = or
    00b6 : 0f34 ; -- <0109> "
    00b7 : 1360 ; -- <0110> x = -1
    00b8 : c800 ; -- <0111> y = x+y
    00b9 : 1720 ; -- <0111> "
    00ba : 0005 ; -- <0112> a = y
    00bb : e400 ; -- <0113> bn az :again
    00bc : 00a0 ; -- <0113> "
    00bd : 0003 ; -- <0114> a = j
    00be : 0600 ; -- <0115> b = 0
    00bf : f808 ; -- <0116> pop rtna -- rtn
    00c0 : 1408 ; -- <0116> pop y -- "
    00c1 : 1008 ; -- <0116> pop x -- "
    00c2 : 0c08 ; -- <0116> pop j -- "
    00c3 : 0808 ; -- <0116> pop i -- "
    00c4 : fc00 ; -- <0116> rtn
-- :fail -- = 0x00c5
    00c5 : 0760 ; -- <0118> b = -1
    00c6 : f808 ; -- <0119> pop rtna -- rtn
    00c7 : 1408 ; -- <0119> pop y -- "
    00c8 : 1008 ; -- <0119> pop x -- "
    00c9 : 0c08 ; -- <0119> pop j -- "
    00ca : 0808 ; -- <0119> pop i -- "
    00cb : fc00 ; -- <0119> rtn

-- routine waits a number of milliseconds given in a.
    00cc : 2004 ; -- <0002> push x -- func spinwait
    00cd : 2005 ; -- <0002> push y -- "
--patch
--rtn
    00ce : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00cf
    00cf : 13a0 ; -- <0007> x = 16666
    00d0 : 411a ; -- <0007> "
    00d1 : 1760 ; -- <0008> y = -1
    00d2 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00d3
-- use of the ad2 name overrides auto-nop here.
    00d3 : 1320 ; -- <0012> x = ad2
    00d4 : e402 ; -- <0013> bn xz :spinwait_inner
    00d5 : 00d3 ; -- <0013> "
    00d6 : c800 ; -- <0014> a = a+b
    00d7 : 0300 ; -- <0014> "
    00d8 : e400 ; -- <0015> bn az :spinwait_outer
    00d9 : 00cf ; -- <0015> "
    00da : 1408 ; -- <0016> pop y -- rtn
    00db : 1008 ; -- <0016> pop x -- "
    00dc : fc00 ; -- <0016> rtn



-- --------------------------------------------
-- :main -- = 0x00dd
-- put target into reset.
    00dd : 3e02 ; -- <0062> bus_ctrl = $tg_reset_mask

-- init visor.
    00de : 3360 ; -- <0065> bp3_addr = $bp_disable
    00df : 2f60 ; -- <0066> bp2_addr = $bp_disable
    00e0 : 2b60 ; -- <0067> bp1_addr = $bp_disable
    00e1 : 2760 ; -- <0068> bp0_addr = $bp_disable

-- startup message
    00e2 : 020d ; -- <0071> a = 13 -- puteol
    00e3 : 0000 ; -- <0071> a = a -- puteol
    00e4 : fba0 ; -- <0071> puteol
    00e5 : 0032 ; -- <0071> "
    00e6 : fc00 ; -- <0071> "
    00e7 : 020a ; -- <0071> a = 10 -- puteol
    00e8 : 0000 ; -- <0071> a = a -- puteol
    00e9 : fba0 ; -- <0071> puteol
    00ea : 0032 ; -- <0071> "
    00eb : fc00 ; -- <0071> "
    00ec : 0256 ; -- <0072> a = 86 -- putasc "V"
    00ed : 0000 ; -- <0072> a = a -- putasc "V"
    00ee : fba0 ; -- <0072> putasc "V"
    00ef : 0032 ; -- <0072> "
    00f0 : fc00 ; -- <0072> "
    00f1 : 0249 ; -- <0073> a = 73 -- putasc "I"
    00f2 : 0000 ; -- <0073> a = a -- putasc "I"
    00f3 : fba0 ; -- <0073> putasc "I"
    00f4 : 0032 ; -- <0073> "
    00f5 : fc00 ; -- <0073> "
    00f6 : 0253 ; -- <0074> a = 83 -- putasc "S"
    00f7 : 0000 ; -- <0074> a = a -- putasc "S"
    00f8 : fba0 ; -- <0074> putasc "S"
    00f9 : 0032 ; -- <0074> "
    00fa : fc00 ; -- <0074> "
    00fb : 024f ; -- <0075> a = 79 -- putasc "O"
    00fc : 0000 ; -- <0075> a = a -- putasc "O"
    00fd : fba0 ; -- <0075> putasc "O"
    00fe : 0032 ; -- <0075> "
    00ff : fc00 ; -- <0075> "
    0100 : 0252 ; -- <0076> a = 82 -- putasc "R"
    0101 : 0000 ; -- <0076> a = a -- putasc "R"
    0102 : fba0 ; -- <0076> putasc "R"
    0103 : 0032 ; -- <0076> "
    0104 : fc00 ; -- <0076> "

-- check for bootloader signal.
    0105 : 0019 ; -- <0079> a = boot_break
    0106 : e400 ; -- <0080> bn az :boot_run
    0107 : 010e ; -- <0080> "
-- ^^^ for press-to-debug; runs target by default.
-- br az :boot_run
-- ^^^ for press-to-run; debugs target by default.
-- step into the first target instruction.
    0108 : 3e08 ; -- <0085> bus_ctrl = $bp_step_mask
    0109 : fba0 ; -- <0086> call :wait_for_bp
    010a : 01be ; -- <0086> "
    010b : fc00 ; -- <0086> "
    010c : e00f ; -- <0087> jmp :cmd_loop
    010d : 010f ; -- <0087> "
-- release target reset, to run.
-- :boot_run -- = 0x010e
    010e : 3e00 ; -- <0090> bus_ctrl = 0

-- command prompt loop.
-- :cmd_loop -- = 0x010f
    010f : 000f ; -- <0094> a = bus_ctrl
    0110 : 0600 ; -- <0095> b = 0
    0111 : e007 ; -- <0096> br eq :running_prompt
    0112 : 0138 ; -- <0096> "

    0113 : fba0 ; -- <0098> call :dump_target
    0114 : 0285 ; -- <0098> "
    0115 : fc00 ; -- <0098> "
    0116 : 0016 ; -- <0099> a = tg_code_addr
    0117 : fba0 ; -- <0100> call :put4x
    0118 : 005d ; -- <0100> "
    0119 : fc00 ; -- <0100> "
    011a : 022c ; -- <0101> a = 44 -- putasc ","
    011b : 0000 ; -- <0101> a = a -- putasc ","
    011c : fba0 ; -- <0101> putasc ","
    011d : 0032 ; -- <0101> "
    011e : fc00 ; -- <0101> "
    011f : 0015 ; -- <0102> a = exr_shadow
    0120 : fba0 ; -- <0103> call :put4x
    0121 : 005d ; -- <0103> "
    0122 : fc00 ; -- <0103> "
    0123 : 0220 ; -- <0104> a = 32 -- putasc " "
    0124 : 0000 ; -- <0104> a = a -- putasc " "
    0125 : fba0 ; -- <0104> putasc " "
    0126 : 0032 ; -- <0104> "
    0127 : fc00 ; -- <0104> "
    0128 : 023e ; -- <0105> a = 62 -- putasc ">"
    0129 : 0000 ; -- <0105> a = a -- putasc ">"
    012a : fba0 ; -- <0105> putasc ">"
    012b : 0032 ; -- <0105> "
    012c : fc00 ; -- <0105> "
    012d : fba0 ; -- <0106> getchar
    012e : 0041 ; -- <0106> "
    012f : fc00 ; -- <0106> "
    0130 : 2000 ; -- <0106> push a -- "
    0131 : 0000 ; -- <0106> a = a -- "
    0132 : fba0 ; -- <0106> "
    0133 : 0032 ; -- <0106> "
    0134 : fc00 ; -- <0106> "
    0135 : 0008 ; -- <0106> pop a -- "
    0136 : e00f ; -- <0107> jmp :parse_cmd
    0137 : 0167 ; -- <0107> "

-- :running_prompt -- = 0x0138
    0138 : 020d ; -- <0110> a = 13 -- puteol
    0139 : 0000 ; -- <0110> a = a -- puteol
    013a : fba0 ; -- <0110> puteol
    013b : 0032 ; -- <0110> "
    013c : fc00 ; -- <0110> "
    013d : 020a ; -- <0110> a = 10 -- puteol
    013e : 0000 ; -- <0110> a = a -- puteol
    013f : fba0 ; -- <0110> puteol
    0140 : 0032 ; -- <0110> "
    0141 : fc00 ; -- <0110> "
    0142 : 0252 ; -- <0111> a = 82 -- putasc "R"
    0143 : 0000 ; -- <0111> a = a -- putasc "R"
    0144 : fba0 ; -- <0111> putasc "R"
    0145 : 0032 ; -- <0111> "
    0146 : fc00 ; -- <0111> "
    0147 : 0255 ; -- <0112> a = 85 -- putasc "U"
    0148 : 0000 ; -- <0112> a = a -- putasc "U"
    0149 : fba0 ; -- <0112> putasc "U"
    014a : 0032 ; -- <0112> "
    014b : fc00 ; -- <0112> "
    014c : 024e ; -- <0113> a = 78 -- putasc "N"
    014d : 0000 ; -- <0113> a = a -- putasc "N"
    014e : fba0 ; -- <0113> putasc "N"
    014f : 0032 ; -- <0113> "
    0150 : fc00 ; -- <0113> "
    0151 : 0220 ; -- <0114> a = 32 -- putasc " "
    0152 : 0000 ; -- <0114> a = a -- putasc " "
    0153 : fba0 ; -- <0114> putasc " "
    0154 : 0032 ; -- <0114> "
    0155 : fc00 ; -- <0114> "
    0156 : 023e ; -- <0115> a = 62 -- putasc ">"
    0157 : 0000 ; -- <0115> a = a -- putasc ">"
    0158 : fba0 ; -- <0115> putasc ">"
    0159 : 0032 ; -- <0115> "
    015a : fc00 ; -- <0115> "
-- :run_poll -- = 0x015b
    015b : fba0 ; -- <0117> pollchar
    015c : 004a ; -- <0117> "
    015d : fc00 ; -- <0117> "
    015e : 0760 ; -- <0118> b = -1
    015f : e407 ; -- <0119> bn eq :parse_cmd
    0160 : 0167 ; -- <0119> "
    0161 : 0018 ; -- <0120> a = bp_status
    0162 : e000 ; -- <0121> br az :run_poll
    0163 : 015b ; -- <0121> "
-- target hit a breakpoint; switch to stepping mode.
    0164 : 3e08 ; -- <0123> bus_ctrl = $bp_step_mask
    0165 : e00f ; -- <0124> jmp :cmd_loop
    0166 : 010f ; -- <0124> "

-- :parse_cmd -- = 0x0167

-- command = step next instruction.
    0167 : 066e ; -- <0129> b = 110 -- asc b = "n"
    0168 : e407 ; -- <0130> bn eq :skip_step
    0169 : 0171 ; -- <0130> "
    016a : 3e08 ; -- <0131> bus_ctrl = $bp_step_mask
    016b : 2409 ; -- <0132> bp0_addr = bp0_addr
    016c : fba0 ; -- <0133> call :wait_for_bp
    016d : 01be ; -- <0133> "
    016e : fc00 ; -- <0133> "
    016f : e00f ; -- <0134> jmp :cmd_loop
    0170 : 010f ; -- <0134> "
-- :skip_step -- = 0x0171

-- command = reset target.
    0171 : 0652 ; -- <0138> b = 82 -- asc b = "R"
    0172 : e407 ; -- <0139> bn eq :skip_reset
    0173 : 017d ; -- <0139> "
    0174 : 3e02 ; -- <0140> bus_ctrl = $tg_reset_mask
    0175 : c800 ; -- <0141> nop
    0176 : c800 ; -- <0142> nop
    0177 : 3e08 ; -- <0143> bus_ctrl = $bp_step_mask
    0178 : fba0 ; -- <0144> call :wait_for_bp
    0179 : 01be ; -- <0144> "
    017a : fc00 ; -- <0144> "
    017b : e00f ; -- <0145> jmp :cmd_loop
    017c : 010f ; -- <0145> "
-- :skip_reset -- = 0x017d

-- command = load program.
    017d : 066c ; -- <0149> b = 108 -- asc b = "l"
    017e : e407 ; -- <0150> bn eq :skip_load
    017f : 0185 ; -- <0150> "
    0180 : fba0 ; -- <0151> call :load_program
    0181 : 0218 ; -- <0151> "
    0182 : fc00 ; -- <0151> "
    0183 : e00f ; -- <0152> jmp :cmd_loop
    0184 : 010f ; -- <0152> "
-- :skip_load -- = 0x0185

-- command = run full speed.
    0185 : 0672 ; -- <0156> b = 114 -- asc b = "r"
    0186 : e407 ; -- <0157> bn eq :skip_run
    0187 : 018c ; -- <0157> "
-- release target reset, to run.
    0188 : 3e00 ; -- <0159> bus_ctrl = 0
    0189 : 2409 ; -- <0160> bp0_addr = bp0_addr
    018a : e00f ; -- <0161> jmp :cmd_loop
    018b : 010f ; -- <0161> "
-- :skip_run -- = 0x018c

-- command = set breakpoint.
    018c : 0662 ; -- <0165> b = 98 -- asc b = "b"
    018d : e407 ; -- <0166> bn eq :skip_setbrk
    018e : 0194 ; -- <0166> "
    018f : fba0 ; -- <0167> call :set_bp
    0190 : 01c2 ; -- <0167> "
    0191 : fc00 ; -- <0167> "
    0192 : e00f ; -- <0168> jmp :cmd_loop
    0193 : 010f ; -- <0168> "
-- :skip_setbrk -- = 0x0194

    0194 : 023f ; -- <0171> a = 63 -- putasc "?"
    0195 : 0000 ; -- <0171> a = a -- putasc "?"
    0196 : fba0 ; -- <0171> putasc "?"
    0197 : 0032 ; -- <0171> "
    0198 : fc00 ; -- <0171> "
    0199 : 020d ; -- <0172> a = 13 -- puteol
    019a : 0000 ; -- <0172> a = a -- puteol
    019b : fba0 ; -- <0172> puteol
    019c : 0032 ; -- <0172> "
    019d : fc00 ; -- <0172> "
    019e : 020a ; -- <0172> a = 10 -- puteol
    019f : 0000 ; -- <0172> a = a -- puteol
    01a0 : fba0 ; -- <0172> puteol
    01a1 : 0032 ; -- <0172> "
    01a2 : fc00 ; -- <0172> "
    01a3 : e00f ; -- <0173> jmp :cmd_loop
    01a4 : 010f ; -- <0173> "

-- demonstrations ------------------------------

-- set a breakpoint, wait til it hits.
    01a5 : 2615 ; -- <0178> bp0_addr = 0x15
-- :main_loop -- = 0x01a6
    01a6 : fba0 ; -- <0180> call :wait_for_bp
    01a7 : 01be ; -- <0180> "
    01a8 : fc00 ; -- <0180> "

-- release target to run full speed.
    01a9 : 3e00 ; -- <0183> bus_ctrl = 0

-- interrupt the target and single step it a few times.
    01aa : 3e08 ; -- <0186> bus_ctrl = $bp_step_mask
    01ab : fba0 ; -- <0187> call :wait_for_bp
    01ac : 01be ; -- <0187> "
    01ad : fc00 ; -- <0187> "
    01ae : 2409 ; -- <0188> bp0_addr = bp0_addr
    01af : fba0 ; -- <0189> call :wait_for_bp
    01b0 : 01be ; -- <0189> "
    01b1 : fc00 ; -- <0189> "
    01b2 : 2409 ; -- <0190> bp0_addr = bp0_addr
    01b3 : fba0 ; -- <0191> call :wait_for_bp
    01b4 : 01be ; -- <0191> "
    01b5 : fc00 ; -- <0191> "
    01b6 : 2409 ; -- <0192> bp0_addr = bp0_addr
    01b7 : fba0 ; -- <0193> call :wait_for_bp
    01b8 : 01be ; -- <0193> "
    01b9 : fc00 ; -- <0193> "
    01ba : 3e00 ; -- <0194> bus_ctrl = 0

-- release target to pass breakpoint once.
    01bb : 2409 ; -- <0197> bp0_addr = bp0_addr

    01bc : e00f ; -- <0199> jmp :main_loop
    01bd : 01a6 ; -- <0199> "

-- :poll -- = 0x01be
    01be : 0018 ; -- <0203> a = bp_status
    01bf : e000 ; -- <0204> br az :poll
    01c0 : 01be ; -- <0204> "
    01c1 : fc00 ; -- <0205> rtn

    01c2 : 2004 ; -- <0207> push x -- func set_bp
    01c3 : 2005 ; -- <0207> push y -- "
    01c4 : 203e ; -- <0207> push rtna -- "
    01c5 : fba0 ; -- <0208> getchar
    01c6 : 0041 ; -- <0208> "
    01c7 : fc00 ; -- <0208> "
    01c8 : 2000 ; -- <0208> push a -- "
    01c9 : 0000 ; -- <0208> a = a -- "
    01ca : fba0 ; -- <0208> "
    01cb : 0032 ; -- <0208> "
    01cc : fc00 ; -- <0208> "
    01cd : 0008 ; -- <0208> pop a -- "
    01ce : 1000 ; -- <0209> x = a
    01cf : fba0 ; -- <0210> getchar
    01d0 : 0041 ; -- <0210> "
    01d1 : fc00 ; -- <0210> "
    01d2 : 2000 ; -- <0210> push a -- "
    01d3 : 0000 ; -- <0210> a = a -- "
    01d4 : fba0 ; -- <0210> "
    01d5 : 0032 ; -- <0210> "
    01d6 : fc00 ; -- <0210> "
    01d7 : 0008 ; -- <0210> pop a -- "
    01d8 : 063d ; -- <0211> b = 61 -- asc b = "="
    01d9 : e407 ; -- <0212> bn eq :fail
    01da : 0205 ; -- <0212> "
    01db : fba0 ; -- <0213> call :get4x
    01dc : 009a ; -- <0213> "
    01dd : fc00 ; -- <0213> "
    01de : 1400 ; -- <0214> y = a
    01df : 0200 ; -- <0215> a = 0
    01e0 : e407 ; -- <0216> bn eq :fail
    01e1 : 0205 ; -- <0216> "
    01e2 : 0004 ; -- <0217> a = x
    01e3 : 0630 ; -- <0218> b = 48 -- asc b = "0"
    01e4 : e007 ; -- <0219> br eq :b0
    01e5 : 01f1 ; -- <0219> "
    01e6 : 0631 ; -- <0220> b = 49 -- asc b = "1"
    01e7 : e007 ; -- <0221> br eq :b1
    01e8 : 01f6 ; -- <0221> "
    01e9 : 0632 ; -- <0222> b = 50 -- asc b = "2"
    01ea : e007 ; -- <0223> br eq :b2
    01eb : 01fb ; -- <0223> "
    01ec : 0633 ; -- <0224> b = 51 -- asc b = "3"
    01ed : e007 ; -- <0225> br eq :b3
    01ee : 0200 ; -- <0225> "
    01ef : e00f ; -- <0226> jmp :fail
    01f0 : 0205 ; -- <0226> "
-- :b0 -- = 0x01f1
    01f1 : 2405 ; -- <0228> bp0_addr = y
    01f2 : f808 ; -- <0229> pop rtna -- rtn
    01f3 : 1408 ; -- <0229> pop y -- "
    01f4 : 1008 ; -- <0229> pop x -- "
    01f5 : fc00 ; -- <0229> rtn
-- :b1 -- = 0x01f6
    01f6 : 2805 ; -- <0231> bp1_addr = y
    01f7 : f808 ; -- <0232> pop rtna -- rtn
    01f8 : 1408 ; -- <0232> pop y -- "
    01f9 : 1008 ; -- <0232> pop x -- "
    01fa : fc00 ; -- <0232> rtn
-- :b2 -- = 0x01fb
    01fb : 2c05 ; -- <0234> bp2_addr = y
    01fc : f808 ; -- <0235> pop rtna -- rtn
    01fd : 1408 ; -- <0235> pop y -- "
    01fe : 1008 ; -- <0235> pop x -- "
    01ff : fc00 ; -- <0235> rtn
-- :b3 -- = 0x0200
    0200 : 3005 ; -- <0237> bp3_addr = y
    0201 : f808 ; -- <0238> pop rtna -- rtn
    0202 : 1408 ; -- <0238> pop y -- "
    0203 : 1008 ; -- <0238> pop x -- "
    0204 : fc00 ; -- <0238> rtn
-- :fail -- = 0x0205
    0205 : 023f ; -- <0240> a = 63 -- putasc "?"
    0206 : 0000 ; -- <0240> a = a -- putasc "?"
    0207 : fba0 ; -- <0240> putasc "?"
    0208 : 0032 ; -- <0240> "
    0209 : fc00 ; -- <0240> "
    020a : 020d ; -- <0241> a = 13 -- puteol
    020b : 0000 ; -- <0241> a = a -- puteol
    020c : fba0 ; -- <0241> puteol
    020d : 0032 ; -- <0241> "
    020e : fc00 ; -- <0241> "
    020f : 020a ; -- <0241> a = 10 -- puteol
    0210 : 0000 ; -- <0241> a = a -- puteol
    0211 : fba0 ; -- <0241> puteol
    0212 : 0032 ; -- <0241> "
    0213 : fc00 ; -- <0241> "
    0214 : f808 ; -- <0242> pop rtna -- rtn
    0215 : 1408 ; -- <0242> pop y -- "
    0216 : 1008 ; -- <0242> pop x -- "
    0217 : fc00 ; -- <0242> rtn

    0218 : 2002 ; -- <0244> push i -- func load_program
    0219 : 2003 ; -- <0244> push j -- "
    021a : 2004 ; -- <0244> push x -- "
    021b : 2006 ; -- <0244> push g6 -- "
    021c : 203e ; -- <0244> push rtna -- "
-- load target program from UART.
-- length, little-endian.  memorize in x.
    021d : 024c ; -- <0247> a = 76 -- putasc L
    021e : 0000 ; -- <0247> a = a -- putasc L
    021f : fba0 ; -- <0247> putasc L
    0220 : 0032 ; -- <0247> "
    0221 : fc00 ; -- <0247> "
    0222 : fba0 ; -- <0248> get16 x
    0223 : 0041 ; -- <0248> "
    0224 : fc00 ; -- <0248> "
    0225 : 2000 ; -- <0248> push a -- "
    0226 : fba0 ; -- <0248> "
    0227 : 0041 ; -- <0248> "
    0228 : fc00 ; -- <0248> "
    0229 : 0352 ; -- <0248> "
    022a : 0352 ; -- <0248> "
    022b : 0408 ; -- <0248> pop b -- "
    022c : c800 ; -- <0248> "
    022d : 1334 ; -- <0248> "
    022e : 0004 ; -- <0249> a = x
    022f : fba0 ; -- <0250> call put4x
    0230 : 005d ; -- <0250> "
    0231 : fc00 ; -- <0250> "
-- put target into reset again, in case this is a target warm boot.
    0232 : 3e02 ; -- <0252> bus_ctrl = $tg_reset_mask
-- load opcodes.  count up address in i.
    0233 : 0a00 ; -- <0254> i = 0
    0234 : 0e01 ; -- <0255> j = 1
-- :loadword -- = 0x0235
    0235 : 0241 ; -- <0257> a = 65 -- putasc A
    0236 : 0000 ; -- <0257> a = a -- putasc A
    0237 : fba0 ; -- <0257> putasc A
    0238 : 0032 ; -- <0257> "
    0239 : fc00 ; -- <0257> "
    023a : 0002 ; -- <0258> a = i
    023b : fba0 ; -- <0259> call put4x
    023c : 005d ; -- <0259> "
    023d : fc00 ; -- <0259> "
    023e : 023d ; -- <0260> a = 61 -- putasc "="
    023f : 0000 ; -- <0260> a = a -- putasc "="
    0240 : fba0 ; -- <0260> putasc "="
    0241 : 0032 ; -- <0260> "
    0242 : fc00 ; -- <0260> "
    0243 : fba0 ; -- <0261> get16 g6
    0244 : 0041 ; -- <0261> "
    0245 : fc00 ; -- <0261> "
    0246 : 2000 ; -- <0261> push a -- "
    0247 : fba0 ; -- <0261> "
    0248 : 0041 ; -- <0261> "
    0249 : fc00 ; -- <0261> "
    024a : 0352 ; -- <0261> "
    024b : 0352 ; -- <0261> "
    024c : 0408 ; -- <0261> pop b -- "
    024d : c800 ; -- <0261> "
    024e : 1b34 ; -- <0261> "
    024f : 0006 ; -- <0262> a = g6
    0250 : fba0 ; -- <0263> call put4x
    0251 : 005d ; -- <0263> "
    0252 : fc00 ; -- <0263> "
    0253 : 023d ; -- <0264> a = 61 -- putasc "="
    0254 : 0000 ; -- <0264> a = a -- putasc "="
    0255 : fba0 ; -- <0264> putasc "="
    0256 : 0032 ; -- <0264> "
    0257 : fc00 ; -- <0264> "
    0258 : 4c02 ; -- <0265> m9k_addr = i
    0259 : 5006 ; -- <0266> m9k_data = g6
    025a : 0014 ; -- <0267> a = m9k_data
    025b : fba0 ; -- <0268> call put4x
    025c : 005d ; -- <0268> "
    025d : fc00 ; -- <0268> "
    025e : 020d ; -- <0269> a = 13 -- puteol
    025f : 0000 ; -- <0269> a = a -- puteol
    0260 : fba0 ; -- <0269> puteol
    0261 : 0032 ; -- <0269> "
    0262 : fc00 ; -- <0269> "
    0263 : 020a ; -- <0269> a = 10 -- puteol
    0264 : 0000 ; -- <0269> a = a -- puteol
    0265 : fba0 ; -- <0269> puteol
    0266 : 0032 ; -- <0269> "
    0267 : fc00 ; -- <0269> "
    0268 : c800 ; -- <0270> i = i+j
    0269 : 0b10 ; -- <0270> "
    026a : 0002 ; -- <0271> a = i
    026b : 0404 ; -- <0272> b = x
    026c : e407 ; -- <0273> bn eq :loadword
    026d : 0235 ; -- <0273> "
    026e : f808 ; -- <0274> pop rtna -- rtn
    026f : 1808 ; -- <0274> pop g6 -- "
    0270 : 1008 ; -- <0274> pop x -- "
    0271 : 0c08 ; -- <0274> pop j -- "
    0272 : 0808 ; -- <0274> pop i -- "
    0273 : fc00 ; -- <0274> rtn

-- observe a register.  return its value in peek_data.
-- pass its register address in a.
    0274 : 07a0 ; -- <0279> b = 0x3ff
    0275 : 03ff ; -- <0279> "
    0276 : c800 ; -- <0280> a = and
    0277 : 0330 ; -- <0280> "
-- debug_peek_reg = 31 << 10
    0278 : 07a0 ; -- <0282> b = 0x7c00
    0279 : 7c00 ; -- <0282> "
    027a : c800 ; -- <0283> force_opcode = or
    027b : 3734 ; -- <0283> "
    027c : 3e04 ; -- <0284> bus_ctrl = $divert_code_bus_mask
    027d : 4201 ; -- <0285> tg_force = $hold_state_mask
    027e : 4203 ; -- <0286> tg_force = ($hold_state_mask | $force_load_exr_mask)
    027f : 4205 ; -- <0287> tg_force = ($hold_state_mask | $force_exec_mask)
    0280 : 4201 ; -- <0288> tg_force = $hold_state_mask
-- target's register value is now in peek_data.
-- refill target exr so it can resume seamlessly.
    0281 : 3415 ; -- <0291> force_opcode = exr_shadow
    0282 : 4203 ; -- <0292> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0283 : 4200 ; -- <0293> tg_force = 0
    0284 : fc00 ; -- <0294> rtn

-- show target status display.
    0285 : 2002 ; -- <0297> push i -- func dump_target
    0286 : 2003 ; -- <0297> push j -- "
    0287 : 2004 ; -- <0297> push x -- "
    0288 : 2005 ; -- <0297> push y -- "
    0289 : 203e ; -- <0297> push rtna -- "
    028a : 020d ; -- <0298> a = 13 -- puteol
    028b : 0000 ; -- <0298> a = a -- puteol
    028c : fba0 ; -- <0298> puteol
    028d : 0032 ; -- <0298> "
    028e : fc00 ; -- <0298> "
    028f : 020a ; -- <0298> a = 10 -- puteol
    0290 : 0000 ; -- <0298> a = a -- puteol
    0291 : fba0 ; -- <0298> puteol
    0292 : 0032 ; -- <0298> "
    0293 : fc00 ; -- <0298> "
    0294 : 0a00 ; -- <0299> i = 0
-- :next_reg -- = 0x0295
-- fetch register name from table in target program.
-- i = register number.  x = 2-byte word index within each name string.
-- peek is skipped for any reg name starting with 2 slashes (good for read-sensitive regs).
    0295 : 1200 ; -- <0304> x = 0
    0296 : 1601 ; -- <0305> y = 1
-- :next_chars -- = 0x0297
    0297 : 0002 ; -- <0307> a = i
    0298 : 0351 ; -- <0308> a = a<<1
    0299 : 0351 ; -- <0309> a = a<<1
    029a : 0603 ; -- <0310> b = 3
    029b : c800 ; -- <0311> a = a+b
    029c : 0300 ; -- <0311> "
    029d : 0404 ; -- <0312> b = x
    029e : c800 ; -- <0313> m9k_addr = a+b
    029f : 4f00 ; -- <0313> "
    02a0 : 0014 ; -- <0314> a = m9k_data
    02a1 : 07a0 ; -- <0315> b = 0x2f2f
    02a2 : 2f2f ; -- <0315> "
    02a3 : e007 ; -- <0316> br eq :no_peek
    02a4 : 02cd ; -- <0316> "
    02a5 : 0014 ; -- <0317> a = m9k_data -- putchar m9k_data
    02a6 : fba0 ; -- <0317> putchar m9k_data
    02a7 : 0032 ; -- <0317> "
    02a8 : fc00 ; -- <0317> "
    02a9 : 0014 ; -- <0318> a = m9k_data
    02aa : 0353 ; -- <0319> a = a>>4
    02ab : 0353 ; -- <0320> a = a>>4
    02ac : 0000 ; -- <0321> a = a -- putchar a
    02ad : fba0 ; -- <0321> putchar a
    02ae : 0032 ; -- <0321> "
    02af : fc00 ; -- <0321> "
    02b0 : c800 ; -- <0322> x = x+y
    02b1 : 1320 ; -- <0322> "
    02b2 : 0004 ; -- <0323> a = x
    02b3 : 0604 ; -- <0324> b = 4
    02b4 : e407 ; -- <0325> bn eq :next_chars
    02b5 : 0297 ; -- <0325> "
    02b6 : 023d ; -- <0326> a = 61 -- putasc "="
    02b7 : 0000 ; -- <0326> a = a -- putasc "="
    02b8 : fba0 ; -- <0326> putasc "="
    02b9 : 0032 ; -- <0326> "
    02ba : fc00 ; -- <0326> "
    02bb : 0002 ; -- <0327> a = i
    02bc : fba0 ; -- <0328> call :peek
    02bd : 0274 ; -- <0328> "
    02be : fc00 ; -- <0328> "
    02bf : 0017 ; -- <0329> a = peek_data
    02c0 : fba0 ; -- <0330> call :put4x
    02c1 : 005d ; -- <0330> "
    02c2 : fc00 ; -- <0330> "
    02c3 : 020d ; -- <0331> a = 13 -- puteol
    02c4 : 0000 ; -- <0331> a = a -- puteol
    02c5 : fba0 ; -- <0331> puteol
    02c6 : 0032 ; -- <0331> "
    02c7 : fc00 ; -- <0331> "
    02c8 : 020a ; -- <0331> a = 10 -- puteol
    02c9 : 0000 ; -- <0331> a = a -- puteol
    02ca : fba0 ; -- <0331> puteol
    02cb : 0032 ; -- <0331> "
    02cc : fc00 ; -- <0331> "
-- :no_peek -- = 0x02cd
    02cd : 0e01 ; -- <0333> j = 1
    02ce : c800 ; -- <0334> i = i+j
    02cf : 0b10 ; -- <0334> "
-- loop up to the number of registers in the target program's register name table.
    02d0 : 4e02 ; -- <0336> m9k_addr = 2
    02d1 : 0414 ; -- <0337> b = m9k_data
    02d2 : 0002 ; -- <0338> a = i
    02d3 : e407 ; -- <0339> bn eq :next_reg
    02d4 : 0295 ; -- <0339> "
    02d5 : f808 ; -- <0340> pop rtna -- rtn
    02d6 : 1408 ; -- <0340> pop y -- "
    02d7 : 1008 ; -- <0340> pop x -- "
    02d8 : 0c08 ; -- <0340> pop j -- "
    02d9 : 0808 ; -- <0340> pop i -- "
    02da : fc00 ; -- <0340> rtn
        
        END;
    
