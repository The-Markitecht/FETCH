
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- register file configuration

-- application-specific register aliases.
--alias_src  tg_debug_out	    [incr counter]

-- equivalent of convention_gpx

-- :begin -- = 0x0000
-- put target into reset.
    0000 : 3a02 ; -- <0045> bus_ctrl = $tg_reset_mask

-- init visor.
    0001 : 2f60 ; -- <0048> bp3_addr = $bp_disable
    0002 : 2b60 ; -- <0049> bp2_addr = $bp_disable
    0003 : 2760 ; -- <0050> bp1_addr = $bp_disable
    0004 : 2360 ; -- <0051> bp0_addr = $bp_disable

-- release target reset, to run.
    0005 : 3a00 ; -- <0054> bus_ctrl = 0

-- :halt -- = 0x0006
    0006 : e00f ; -- <0057> jmp :halt
    0007 : 0006 ; -- <0057> "

-- set a breakpoint, wait til it hits.
    0008 : 2215 ; -- <0060> bp0_addr = 0x15
-- :main_loop -- = 0x0009
    0009 : fba0 ; -- <0062> call :wait_for_bp
    000a : 003b ; -- <0062> "
    000b : fc00 ; -- <0062> "

-- observe a register.
    000c : 3a04 ; -- <0065> bus_ctrl = $divert_code_bus_mask
    000d : 3e01 ; -- <0066> tg_force = $hold_state_mask
    000e : d232 ; -- <0067> fetch force_opcode from ([label observe] + 7)
    000f : 33b0 ; -- <0067> "
    0010 : 3e03 ; -- <0068> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0011 : 3e05 ; -- <0069> tg_force = ($hold_state_mask | $force_exec_mask)
    0012 : 3e01 ; -- <0070> tg_force = $hold_state_mask
-- target's r7 value is now in peek_data.

-- refill target exr so it can resume seamlessly.
    0013 : 3012 ; -- <0074> force_opcode = exr_shadow
    0014 : 3e03 ; -- <0075> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0015 : 3e00 ; -- <0076> tg_force = 0
    0016 : 3a00 ; -- <0077> bus_ctrl = 0

-- interrupt the target and single step it a few times.
    0017 : 3a08 ; -- <0080> bus_ctrl = $bp_step_mask
    0018 : fba0 ; -- <0081> call :wait_for_bp
    0019 : 003b ; -- <0081> "
    001a : fc00 ; -- <0081> "
    001b : 2008 ; -- <0082> bp0_addr = bp0_addr
    001c : fba0 ; -- <0083> call :wait_for_bp
    001d : 003b ; -- <0083> "
    001e : fc00 ; -- <0083> "
    001f : 2008 ; -- <0084> bp0_addr = bp0_addr
    0020 : fba0 ; -- <0085> call :wait_for_bp
    0021 : 003b ; -- <0085> "
    0022 : fc00 ; -- <0085> "
    0023 : 2008 ; -- <0086> bp0_addr = bp0_addr
    0024 : fba0 ; -- <0087> call :wait_for_bp
    0025 : 003b ; -- <0087> "
    0026 : fc00 ; -- <0087> "
    0027 : 3a00 ; -- <0088> bus_ctrl = 0

-- release target to pass breakpoint once.
    0028 : 2008 ; -- <0091> bp0_addr = bp0_addr

    0029 : e00f ; -- <0093> jmp :main_loop
    002a : 0009 ; -- <0093> "

-- :observe -- = 0x002b
-- these instructions are assembled in the visor program, but passed to the target to execute.
    002b : 7c00 ; -- <0098> debug_peek_reg = r0
    002c : 7c01 ; -- <0099> debug_peek_reg = r1
    002d : 7c02 ; -- <0100> debug_peek_reg = r2
    002e : 7c03 ; -- <0101> debug_peek_reg = r3
    002f : 7c04 ; -- <0102> debug_peek_reg = r4
    0030 : 7c05 ; -- <0103> debug_peek_reg = r5
    0031 : 7c06 ; -- <0104> debug_peek_reg = r6
    0032 : 7c07 ; -- <0105> debug_peek_reg = r7
    0033 : 7c08 ; -- <0106> debug_peek_reg = r8
    0034 : 7c09 ; -- <0107> debug_peek_reg = r9
    0035 : 7c0a ; -- <0108> debug_peek_reg = r10
    0036 : 7c0b ; -- <0109> debug_peek_reg = r11
    0037 : 7c0c ; -- <0110> debug_peek_reg = r12
    0038 : 7c0d ; -- <0111> debug_peek_reg = r13
    0039 : 7c0e ; -- <0112> debug_peek_reg = r14
    003a : 7c0f ; -- <0113> debug_peek_reg = r15

    003b : 0200 ; -- <0116> a = 0
    003c : 0415 ; -- <0117> b = bp_status
    003d : c800 ; -- <0118> nop
    003e : e004 ; -- <0119> br z :wait_for_bp
    003f : 003b ; -- <0119> "
    0040 : fc00 ; -- <0120> return
        
        END;
    
