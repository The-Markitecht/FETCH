
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- register file configuration

-- application-specific register aliases.





--alias_src  tg_debug_out	    [incr counter]


    0000 : e00f ; -- <0051> jmp :main
    0001 : 0088 ; -- <0051> "


-- pick a byte from an array of words.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0002 : 0601 ; -- <0005> b = 1
    0003 : c800 ; -- <0006> nop
    0004 : e002 ; -- <0007> br and0z :pick_byte_even
    0005 : 000e ; -- <0007> "
    0006 : 0350 ; -- <0008> a = a>>1
    0007 : 0404 ; -- <0009> b = x
    0008 : c800 ; -- <0010> nop
    0009 : d300 ; -- <0011> fetch a from a+b
    000a : 03b0 ; -- <0011> "
    000b : 0353 ; -- <0012> a = a>>4
    000c : 0353 ; -- <0013> a = a>>4
    000d : fc00 ; -- <0014> rtn
-- :pick_byte_even -- = 0x000e
    000e : 0350 ; -- <0016> a = a>>1
    000f : 0404 ; -- <0017> b = x
    0010 : c800 ; -- <0018> nop
    0011 : d300 ; -- <0019> fetch a from a+b
    0012 : 03b0 ; -- <0019> "
    0013 : 06ff ; -- <0020> b = 0xff
    0014 : c800 ; -- <0021> nop
    0015 : 0330 ; -- <0022> a = and
    0016 : fc00 ; -- <0023> rtn


-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
    0017 : 2004 ; -- <0024> push x -- func putchar_atx

    0018 : 1000 ; -- <0026> x = a

-- wait for UART to be idle (not busy).
    0019 : 0202 ; -- <0029> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x001a
    001a : 0412 ; -- <0031> b = atx_ctrl
    001b : c800 ; -- <0032> nop
    001c : e402 ; -- <0033> bn and0z :pcatx_wait_for_idle
    001d : 001a ; -- <0033> "

-- push word to the UART.  its low byte is a character.
    001e : 4404 ; -- <0036> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    001f : 4a01 ; -- <0041> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    0020 : 0202 ; -- <0044> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x0021
    0021 : 0412 ; -- <0046> b = atx_ctrl
    0022 : e002 ; -- <0047> br and0z :pcatx_wait_for_busy
    0023 : 0021 ; -- <0047> "

    0024 : 4a00 ; -- <0049> atx_ctrl = 0
    0025 : 1008 ; -- <0050> pop x -- rtn
    0026 : fc00 ; -- <0050> rtn

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- wait until UART is busy, then idle.
    0027 : 0204 ; -- <0056> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0028
    0028 : 0412 ; -- <0058> b = atx_ctrl
    0029 : e002 ; -- <0059> br and0z :wait_for_busy
    002a : 0028 ; -- <0059> "
-- :wait_for_idle -- = 0x002b
    002b : 0412 ; -- <0061> b = atx_ctrl
    002c : c800 ; -- <0062> nop
    002d : e402 ; -- <0063> bn and0z :wait_for_idle
    002e : 002b ; -- <0063> "
    002f : 0011 ; -- <0064> a = atx_data
    0030 : fc00 ; -- <0065> rtn


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0031 : 2004 ; -- <0038> push x -- func put4x
    0032 : 2006 ; -- <0038> push g6 -- "
    0033 : 203e ; -- <0038> push rtna -- "
    0034 : 13a0 ; -- <0039> x = :hexdigits
    0035 : 006e ; -- <0039> "

    0036 : 1800 ; -- <0041> g6 = a
    0037 : 07a0 ; -- <0042> b = 0xF000
    0038 : f000 ; -- <0042> "
    0039 : c800 ; -- <0043> nop
    003a : 0330 ; -- <0044> a = and
    003b : 0353 ; -- <0045> a = a>>4
    003c : 0353 ; -- <0046> a = a>>4
    003d : 0353 ; -- <0047> a = a>>4
    003e : fba0 ; -- <0048> call fetch_byte
    003f : 0002 ; -- <0048> "
    0040 : fc00 ; -- <0048> "
    0041 : 0000 ; -- <0049> a = a -- putchar a
    0042 : fba0 ; -- <0049> putchar a
    0043 : 0017 ; -- <0049> "
    0044 : fc00 ; -- <0049> "

    0045 : 0006 ; -- <0051> a = g6
    0046 : 07a0 ; -- <0052> b = 0x0F00
    0047 : 0f00 ; -- <0052> "
    0048 : c800 ; -- <0053> nop
    0049 : 0330 ; -- <0054> a = and
    004a : 0353 ; -- <0055> a = a>>4
    004b : 0353 ; -- <0056> a = a>>4
    004c : fba0 ; -- <0057> call fetch_byte
    004d : 0002 ; -- <0057> "
    004e : fc00 ; -- <0057> "
    004f : 0000 ; -- <0058> a = a -- putchar a
    0050 : fba0 ; -- <0058> putchar a
    0051 : 0017 ; -- <0058> "
    0052 : fc00 ; -- <0058> "

    0053 : 0006 ; -- <0060> a = g6
    0054 : 06f0 ; -- <0061> b = 0x00F0
    0055 : c800 ; -- <0062> nop
    0056 : 0330 ; -- <0063> a = and
    0057 : 0353 ; -- <0064> a = a>>4
    0058 : fba0 ; -- <0065> call fetch_byte
    0059 : 0002 ; -- <0065> "
    005a : fc00 ; -- <0065> "
    005b : 0000 ; -- <0066> a = a -- putchar a
    005c : fba0 ; -- <0066> putchar a
    005d : 0017 ; -- <0066> "
    005e : fc00 ; -- <0066> "

    005f : 0006 ; -- <0068> a = g6
    0060 : 060f ; -- <0069> b = 0x000F
    0061 : c800 ; -- <0070> nop
    0062 : 0330 ; -- <0071> a = and
    0063 : fba0 ; -- <0072> call fetch_byte
    0064 : 0002 ; -- <0072> "
    0065 : fc00 ; -- <0072> "
    0066 : 0000 ; -- <0073> a = a -- putchar a
    0067 : fba0 ; -- <0073> putchar a
    0068 : 0017 ; -- <0073> "
    0069 : fc00 ; -- <0073> "

    006a : f808 ; -- <0075> pop rtna -- rtn
    006b : 1808 ; -- <0075> pop g6 -- "
    006c : 1008 ; -- <0075> pop x -- "
    006d : fc00 ; -- <0075> rtn

-- :hexdigits -- = 0x006e
-- "0123456789abcdef"
    006e : 3130 ; -- <0078> 10
    006f : 3332 ; -- <0078> 32
    0070 : 3534 ; -- <0078> 54
    0071 : 3736 ; -- <0078> 76
    0072 : 3938 ; -- <0078> 98
    0073 : 6261 ; -- <0078> ba
    0074 : 6463 ; -- <0078> dc
    0075 : 6665 ; -- <0078> fe


-- routine waits a number of milliseconds given in a.
    0076 : 2004 ; -- <0002> push x -- func spinwait
    0077 : 2005 ; -- <0002> push y -- "
--patch
--return
    0078 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x0079
    0079 : 13a0 ; -- <0007> x = 12500
    007a : 30d4 ; -- <0007> "
    007b : 1760 ; -- <0008> y = -1
    007c : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x007d
    007d : 1320 ; -- <0011> x = x+y
    007e : c800 ; -- <0012> nop
    007f : e400 ; -- <0013> bn 2z :spinwait_inner
    0080 : 007d ; -- <0013> "
    0081 : 0300 ; -- <0014> a = a+b
    0082 : c800 ; -- <0015> nop
    0083 : e404 ; -- <0016> bn z :spinwait_outer
    0084 : 0079 ; -- <0016> "
    0085 : 1408 ; -- <0017> pop y -- rtn
    0086 : 1008 ; -- <0017> pop x -- "
    0087 : fc00 ; -- <0017> rtn



-- :main -- = 0x0088
-- put target into reset.
--    bus_ctrl = $tg_reset_mask

-- init visor.
    0088 : 3360 ; -- <0063> bp3_addr = $bp_disable
    0089 : 2f60 ; -- <0064> bp2_addr = $bp_disable
    008a : 2b60 ; -- <0065> bp1_addr = $bp_disable
    008b : 2760 ; -- <0066> bp0_addr = $bp_disable

-- -- UART test character
-- putasc T
-- getchar
-- b = 1
-- nop
-- a = a+b
-- putchar a

-- :next_load -- = 0x008c

-- load target program from UART.
-- length, little-endian.  memorize in x.
    008c : 024c ; -- <0080> a = 76 -- putasc L
    008d : 0000 ; -- <0080> a = a -- putasc L
    008e : fba0 ; -- <0080> putasc L
    008f : 0017 ; -- <0080> "
    0090 : fc00 ; -- <0080> "
    0091 : fba0 ; -- <0081> get16 x
    0092 : 0027 ; -- <0081> "
    0093 : fc00 ; -- <0081> "
    0094 : 2000 ; -- <0081> push a -- "
    0095 : fba0 ; -- <0081> "
    0096 : 0027 ; -- <0081> "
    0097 : fc00 ; -- <0081> "
    0098 : 0352 ; -- <0081> "
    0099 : 0352 ; -- <0081> "
    009a : 0408 ; -- <0081> pop b -- "
    009b : c800 ; -- <0081> "
    009c : 1334 ; -- <0081> "
    009d : 0004 ; -- <0082> a = x
    009e : fba0 ; -- <0083> call put4x
    009f : 0031 ; -- <0083> "
    00a0 : fc00 ; -- <0083> "
-- put target into reset again, in case this is a target warm boot.
    00a1 : 3e02 ; -- <0085> bus_ctrl = $tg_reset_mask
-- load opcodes.  count up address in i.
    00a2 : 0a00 ; -- <0087> i = 0
    00a3 : 0e01 ; -- <0088> j = 1
-- :loadword -- = 0x00a4
    00a4 : 0241 ; -- <0090> a = 65 -- putasc A
    00a5 : 0000 ; -- <0090> a = a -- putasc A
    00a6 : fba0 ; -- <0090> putasc A
    00a7 : 0017 ; -- <0090> "
    00a8 : fc00 ; -- <0090> "
    00a9 : 0002 ; -- <0091> a = i
    00aa : fba0 ; -- <0092> call put4x
    00ab : 0031 ; -- <0092> "
    00ac : fc00 ; -- <0092> "
    00ad : 023d ; -- <0093> a = 61 -- putasc "="
    00ae : 0000 ; -- <0093> a = a -- putasc "="
    00af : fba0 ; -- <0093> putasc "="
    00b0 : 0017 ; -- <0093> "
    00b1 : fc00 ; -- <0093> "
    00b2 : fba0 ; -- <0094> get16 g6
    00b3 : 0027 ; -- <0094> "
    00b4 : fc00 ; -- <0094> "
    00b5 : 2000 ; -- <0094> push a -- "
    00b6 : fba0 ; -- <0094> "
    00b7 : 0027 ; -- <0094> "
    00b8 : fc00 ; -- <0094> "
    00b9 : 0352 ; -- <0094> "
    00ba : 0352 ; -- <0094> "
    00bb : 0408 ; -- <0094> pop b -- "
    00bc : c800 ; -- <0094> "
    00bd : 1b34 ; -- <0094> "
    00be : 0006 ; -- <0095> a = g6
    00bf : fba0 ; -- <0096> call put4x
    00c0 : 0031 ; -- <0096> "
    00c1 : fc00 ; -- <0096> "
    00c2 : 023d ; -- <0097> a = 61 -- putasc "="
    00c3 : 0000 ; -- <0097> a = a -- putasc "="
    00c4 : fba0 ; -- <0097> putasc "="
    00c5 : 0017 ; -- <0097> "
    00c6 : fc00 ; -- <0097> "
    00c7 : 4c02 ; -- <0098> m9k_addr = i
    00c8 : 5006 ; -- <0099> m9k_data = g6
    00c9 : 0014 ; -- <0100> a = m9k_data
    00ca : fba0 ; -- <0101> call put4x
    00cb : 0031 ; -- <0101> "
    00cc : fc00 ; -- <0101> "
    00cd : 020d ; -- <0102> a = 13 -- putasc "\r"
    00ce : 0000 ; -- <0102> a = a -- putasc "\r"
    00cf : fba0 ; -- <0102> putasc "\r"
    00d0 : 0017 ; -- <0102> "
    00d1 : fc00 ; -- <0102> "
    00d2 : 020a ; -- <0103> a = 10 -- putasc "\n"
    00d3 : 0000 ; -- <0103> a = a -- putasc "\n"
    00d4 : fba0 ; -- <0103> putasc "\n"
    00d5 : 0017 ; -- <0103> "
    00d6 : fc00 ; -- <0103> "
    00d7 : 0b10 ; -- <0104> i = i+j
    00d8 : 0002 ; -- <0105> a = i
    00d9 : 0404 ; -- <0106> b = x
    00da : c800 ; -- <0107> nop
    00db : e407 ; -- <0108> bn eq :loadword
    00dc : 00a4 ; -- <0108> "

-- release target reset, to run.
    00dd : 0252 ; -- <0111> a = 82 -- putasc R
    00de : 0000 ; -- <0111> a = a -- putasc R
    00df : fba0 ; -- <0111> putasc R
    00e0 : 0017 ; -- <0111> "
    00e1 : fc00 ; -- <0111> "
    00e2 : 3e00 ; -- <0112> bus_ctrl = 0
    00e3 : e00f ; -- <0113> jmp :next_load
    00e4 : 008c ; -- <0113> "

-- :halt -- = 0x00e5
    00e5 : e00f ; -- <0116> jmp :halt
    00e6 : 00e5 ; -- <0116> "

-- set a breakpoint, wait til it hits.
    00e7 : 2615 ; -- <0119> bp0_addr = 0x15
-- :main_loop -- = 0x00e8
    00e8 : fba0 ; -- <0121> call :wait_for_bp
    00e9 : 011a ; -- <0121> "
    00ea : fc00 ; -- <0121> "

-- observe a register.
    00eb : 3e04 ; -- <0124> bus_ctrl = $divert_code_bus_mask
    00ec : 4201 ; -- <0125> tg_force = $hold_state_mask
    00ed : d3a0 ; -- <0126> fetch force_opcode from ([label observe] + 7)
    00ee : 0111 ; -- <0126> "
    00ef : 37b0 ; -- <0126> "
    00f0 : 4203 ; -- <0127> tg_force = ($hold_state_mask | $force_load_exr_mask)
    00f1 : 4205 ; -- <0128> tg_force = ($hold_state_mask | $force_exec_mask)
    00f2 : 4201 ; -- <0129> tg_force = $hold_state_mask
-- target's r7 value is now in peek_data.

-- refill target exr so it can resume seamlessly.
    00f3 : 3415 ; -- <0133> force_opcode = exr_shadow
    00f4 : 4203 ; -- <0134> tg_force = ($hold_state_mask | $force_load_exr_mask)
    00f5 : 4200 ; -- <0135> tg_force = 0
    00f6 : 3e00 ; -- <0136> bus_ctrl = 0

-- interrupt the target and single step it a few times.
    00f7 : 3e08 ; -- <0139> bus_ctrl = $bp_step_mask
    00f8 : fba0 ; -- <0140> call :wait_for_bp
    00f9 : 011a ; -- <0140> "
    00fa : fc00 ; -- <0140> "
    00fb : 2409 ; -- <0141> bp0_addr = bp0_addr
    00fc : fba0 ; -- <0142> call :wait_for_bp
    00fd : 011a ; -- <0142> "
    00fe : fc00 ; -- <0142> "
    00ff : 2409 ; -- <0143> bp0_addr = bp0_addr
    0100 : fba0 ; -- <0144> call :wait_for_bp
    0101 : 011a ; -- <0144> "
    0102 : fc00 ; -- <0144> "
    0103 : 2409 ; -- <0145> bp0_addr = bp0_addr
    0104 : fba0 ; -- <0146> call :wait_for_bp
    0105 : 011a ; -- <0146> "
    0106 : fc00 ; -- <0146> "
    0107 : 3e00 ; -- <0147> bus_ctrl = 0

-- release target to pass breakpoint once.
    0108 : 2409 ; -- <0150> bp0_addr = bp0_addr

    0109 : e00f ; -- <0152> jmp :main_loop
    010a : 00e8 ; -- <0152> "

-- :observe -- = 0x010b
-- these instructions are assembled in the visor program, but passed to the target to execute.
    010b : 7c00 ; -- <0157> debug_peek_reg = r0
    010c : 7c01 ; -- <0158> debug_peek_reg = r1
    010d : 7c02 ; -- <0159> debug_peek_reg = r2
    010e : 7c03 ; -- <0160> debug_peek_reg = r3
    010f : 7c04 ; -- <0161> debug_peek_reg = r4
    0110 : 7c05 ; -- <0162> debug_peek_reg = r5
    0111 : 7c06 ; -- <0163> debug_peek_reg = r6
    0112 : 7c07 ; -- <0164> debug_peek_reg = r7
    0113 : 7c08 ; -- <0165> debug_peek_reg = r8
    0114 : 7c09 ; -- <0166> debug_peek_reg = r9
    0115 : 7c0a ; -- <0167> debug_peek_reg = r10
    0116 : 7c0b ; -- <0168> debug_peek_reg = r11
    0117 : 7c0c ; -- <0169> debug_peek_reg = r12
    0118 : 7c0d ; -- <0170> debug_peek_reg = r13
    0119 : 7c0e ; -- <0171> debug_peek_reg = r14
    011a : 7c0f ; -- <0172> debug_peek_reg = r15

    011b : 0200 ; -- <0175> a = 0
    011c : 0418 ; -- <0176> b = bp_status
    011d : c800 ; -- <0177> nop
    011e : e004 ; -- <0178> br z :wait_for_bp
    011f : 011b ; -- <0178> "
    0120 : fc00 ; -- <0179> rtn

        
        END;
    
