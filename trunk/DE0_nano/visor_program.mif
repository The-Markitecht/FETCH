
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- register file configuration

-- application-specific register aliases.





--alias_src  tg_debug_out	    [incr counter]


    0000 : e00f ; -- <0051> jmp :main
    0001 : 00d2 ; -- <0051> "


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0002 : 0601 ; -- <0005> b = 1
    0003 : e003 ; -- <0006> br and0z :pick_byte_even
    0004 : 000d ; -- <0006> "
    0005 : 0350 ; -- <0007> a = a>>1
    0006 : 0404 ; -- <0008> b = x
    0007 : c800 ; -- <0009> nop
    0008 : d300 ; -- <0010> fetch a from a+b
    0009 : 03b0 ; -- <0010> "
    000a : 0353 ; -- <0011> a = a>>4
    000b : 0353 ; -- <0012> a = a>>4
    000c : fc00 ; -- <0013> rtn
-- :pick_byte_even -- = 0x000d
    000d : 0350 ; -- <0015> a = a>>1
    000e : 0404 ; -- <0016> b = x
    000f : c800 ; -- <0017> nop
    0010 : d300 ; -- <0018> fetch a from a+b
    0011 : 03b0 ; -- <0018> "
    0012 : 06ff ; -- <0019> b = 0xff
    0013 : c800 ; -- <0020> nop
    0014 : 0330 ; -- <0021> a = and
    0015 : fc00 ; -- <0022> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    0016 : 2002 ; -- <0030> push i -- func find_in_fetch
    0017 : 2003 ; -- <0030> push j -- "
    0018 : 2005 ; -- <0030> push y -- "
    0019 : 203e ; -- <0030> push rtna -- "
    001a : e001 ; -- <0031> br iz :fail
    001b : 002d ; -- <0031> "
    001c : 1400 ; -- <0032> y = a
    001d : 0f60 ; -- <0033> j = -1
    001e : c800 ; -- <0034> nop
-- :again -- = 0x001f
    001f : 0b10 ; -- <0036> i = i+j
    0020 : 0002 ; -- <0037> a = i
    0021 : fba0 ; -- <0038> call :fetch_byte
    0022 : 0002 ; -- <0038> "
    0023 : fc00 ; -- <0038> "
    0024 : 0405 ; -- <0039> b = y
    0025 : e407 ; -- <0040> bn eq :again
    0026 : 001f ; -- <0040> "
-- :found -- = 0x0027
    0027 : 0002 ; -- <0042> a = i
    0028 : f808 ; -- <0043> pop rtna -- rtn
    0029 : 1408 ; -- <0043> pop y -- "
    002a : 0c08 ; -- <0043> pop j -- "
    002b : 0808 ; -- <0043> pop i -- "
    002c : fc00 ; -- <0043> rtn
-- :fail -- = 0x002d
    002d : 0360 ; -- <0045> a = -1
    002e : f808 ; -- <0046> pop rtna -- rtn
    002f : 1408 ; -- <0046> pop y -- "
    0030 : 0c08 ; -- <0046> pop j -- "
    0031 : 0808 ; -- <0046> pop i -- "
    0032 : fc00 ; -- <0046> rtn



-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
    0033 : 2004 ; -- <0031> push x -- func putchar_atx

    0034 : 1000 ; -- <0033> x = a

-- wait for UART to be idle (not busy).
    0035 : 0202 ; -- <0036> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x0036
    0036 : 0412 ; -- <0038> b = atx_ctrl
    0037 : e403 ; -- <0039> bn and0z :pcatx_wait_for_idle
    0038 : 0036 ; -- <0039> "

-- push word to the UART.  its low byte is a character.
    0039 : 4404 ; -- <0042> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    003a : 4a01 ; -- <0047> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    003b : 0202 ; -- <0050> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x003c
    003c : 0412 ; -- <0052> b = atx_ctrl
    003d : e003 ; -- <0053> br and0z :pcatx_wait_for_busy
    003e : 003c ; -- <0053> "
    003f : 4a00 ; -- <0054> atx_ctrl = 0
    0040 : 1008 ; -- <0055> pop x -- rtn
    0041 : fc00 ; -- <0055> rtn

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- wait until UART is busy, then idle.
    0042 : 0204 ; -- <0061> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0043
    0043 : 0412 ; -- <0063> b = atx_ctrl
    0044 : e003 ; -- <0064> br and0z :wait_for_busy
    0045 : 0043 ; -- <0064> "
-- :wait_for_idle -- = 0x0046
    0046 : 0412 ; -- <0066> b = atx_ctrl
    0047 : e403 ; -- <0067> bn and0z :wait_for_idle
    0048 : 0046 ; -- <0067> "
    0049 : 0011 ; -- <0068> a = atx_data
    004a : fc00 ; -- <0069> rtn


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x004b
-- "0123456789abcdef"
    004b : 3130 ; -- <0051> 10
    004c : 3332 ; -- <0051> 32
    004d : 3534 ; -- <0051> 54
    004e : 3736 ; -- <0051> 76
    004f : 3938 ; -- <0051> 98
    0050 : 6261 ; -- <0051> ba
    0051 : 6463 ; -- <0051> dc
    0052 : 6665 ; -- <0051> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0053 : 2004 ; -- <0055> push x -- func put4x
    0054 : 2006 ; -- <0055> push g6 -- "
    0055 : 203e ; -- <0055> push rtna -- "
    0056 : 13a0 ; -- <0056> x = :hexdigits
    0057 : 004b ; -- <0056> "

    0058 : 1800 ; -- <0058> g6 = a
    0059 : 07a0 ; -- <0059> b = 0xF000
    005a : f000 ; -- <0059> "
    005b : c800 ; -- <0060> nop
    005c : 0330 ; -- <0061> a = and
    005d : 0353 ; -- <0062> a = a>>4
    005e : 0353 ; -- <0063> a = a>>4
    005f : 0353 ; -- <0064> a = a>>4
    0060 : fba0 ; -- <0065> call fetch_byte
    0061 : 0002 ; -- <0065> "
    0062 : fc00 ; -- <0065> "
    0063 : 0000 ; -- <0066> a = a -- putchar a
    0064 : fba0 ; -- <0066> putchar a
    0065 : 0033 ; -- <0066> "
    0066 : fc00 ; -- <0066> "

    0067 : 0006 ; -- <0068> a = g6
    0068 : 07a0 ; -- <0069> b = 0x0F00
    0069 : 0f00 ; -- <0069> "
    006a : c800 ; -- <0070> nop
    006b : 0330 ; -- <0071> a = and
    006c : 0353 ; -- <0072> a = a>>4
    006d : 0353 ; -- <0073> a = a>>4
    006e : fba0 ; -- <0074> call fetch_byte
    006f : 0002 ; -- <0074> "
    0070 : fc00 ; -- <0074> "
    0071 : 0000 ; -- <0075> a = a -- putchar a
    0072 : fba0 ; -- <0075> putchar a
    0073 : 0033 ; -- <0075> "
    0074 : fc00 ; -- <0075> "

    0075 : 0006 ; -- <0077> a = g6
    0076 : 06f0 ; -- <0078> b = 0x00F0
    0077 : c800 ; -- <0079> nop
    0078 : 0330 ; -- <0080> a = and
    0079 : 0353 ; -- <0081> a = a>>4
    007a : fba0 ; -- <0082> call fetch_byte
    007b : 0002 ; -- <0082> "
    007c : fc00 ; -- <0082> "
    007d : 0000 ; -- <0083> a = a -- putchar a
    007e : fba0 ; -- <0083> putchar a
    007f : 0033 ; -- <0083> "
    0080 : fc00 ; -- <0083> "

    0081 : 0006 ; -- <0085> a = g6
    0082 : 060f ; -- <0086> b = 0x000F
    0083 : c800 ; -- <0087> nop
    0084 : 0330 ; -- <0088> a = and
    0085 : fba0 ; -- <0089> call fetch_byte
    0086 : 0002 ; -- <0089> "
    0087 : fc00 ; -- <0089> "
    0088 : 0000 ; -- <0090> a = a -- putchar a
    0089 : fba0 ; -- <0090> putchar a
    008a : 0033 ; -- <0090> "
    008b : fc00 ; -- <0090> "

    008c : f808 ; -- <0092> pop rtna -- rtn
    008d : 1808 ; -- <0092> pop g6 -- "
    008e : 1008 ; -- <0092> pop x -- "
    008f : fc00 ; -- <0092> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    0090 : 2002 ; -- <0096> push i -- func get4x
    0091 : 2003 ; -- <0096> push j -- "
    0092 : 2004 ; -- <0096> push x -- "
    0093 : 2005 ; -- <0096> push y -- "
    0094 : 203e ; -- <0096> push rtna -- "
-- y = digit counter
-- j = sum
    0095 : 1604 ; -- <0099> y = 4
-- :again -- = 0x0096
    0096 : fba0 ; -- <0101> getchar
    0097 : 0042 ; -- <0101> "
    0098 : fc00 ; -- <0101> "
    0099 : 2000 ; -- <0101> push a -- "
    009a : 0000 ; -- <0101> a = a -- "
    009b : fba0 ; -- <0101> "
    009c : 0033 ; -- <0101> "
    009d : fc00 ; -- <0101> "
    009e : 0008 ; -- <0101> pop a -- "
    009f : 13a0 ; -- <0102> x = :hexdigits
    00a0 : 004b ; -- <0102> "
    00a1 : 0a10 ; -- <0103> i = 16
    00a2 : fba0 ; -- <0104> call :find_in_fetch
    00a3 : 0016 ; -- <0104> "
    00a4 : fc00 ; -- <0104> "
    00a5 : 0760 ; -- <0105> b = -1
    00a6 : e007 ; -- <0106> br eq :fail
    00a7 : 00bb ; -- <0106> "
    00a8 : 0400 ; -- <0107> b = a
    00a9 : 0003 ; -- <0108> a = j
    00aa : 0352 ; -- <0109> a = a<<4
    00ab : c800 ; -- <0110> nop
    00ac : 0f34 ; -- <0111> j = or
    00ad : 1360 ; -- <0112> x = -1
    00ae : c800 ; -- <0113> nop
    00af : 1720 ; -- <0114> y = x+y
    00b0 : 0005 ; -- <0115> a = y
    00b1 : e400 ; -- <0116> bn az :again
    00b2 : 0096 ; -- <0116> "
    00b3 : 0003 ; -- <0117> a = j
    00b4 : 0600 ; -- <0118> b = 0
    00b5 : f808 ; -- <0119> pop rtna -- rtn
    00b6 : 1408 ; -- <0119> pop y -- "
    00b7 : 1008 ; -- <0119> pop x -- "
    00b8 : 0c08 ; -- <0119> pop j -- "
    00b9 : 0808 ; -- <0119> pop i -- "
    00ba : fc00 ; -- <0119> rtn
-- :fail -- = 0x00bb
    00bb : 0760 ; -- <0121> b = -1
    00bc : f808 ; -- <0122> pop rtna -- rtn
    00bd : 1408 ; -- <0122> pop y -- "
    00be : 1008 ; -- <0122> pop x -- "
    00bf : 0c08 ; -- <0122> pop j -- "
    00c0 : 0808 ; -- <0122> pop i -- "
    00c1 : fc00 ; -- <0122> rtn

-- routine waits a number of milliseconds given in a.
    00c2 : 2004 ; -- <0002> push x -- func spinwait
    00c3 : 2005 ; -- <0002> push y -- "
--patch
--rtn
    00c4 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00c5
    00c5 : 13a0 ; -- <0007> x = 16666
    00c6 : 411a ; -- <0007> "
    00c7 : 1760 ; -- <0008> y = -1
    00c8 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00c9
    00c9 : 1320 ; -- <0011> x = x+y
    00ca : e402 ; -- <0012> bn xz :spinwait_inner
    00cb : 00c9 ; -- <0012> "
    00cc : 0300 ; -- <0013> a = a+b
    00cd : e400 ; -- <0014> bn az :spinwait_outer
    00ce : 00c5 ; -- <0014> "
    00cf : 1408 ; -- <0015> pop y -- rtn
    00d0 : 1008 ; -- <0015> pop x -- "
    00d1 : fc00 ; -- <0015> rtn



-- --------------------------------------------
-- :main -- = 0x00d2
-- put target into reset.
    00d2 : 3e02 ; -- <0061> bus_ctrl = $tg_reset_mask

-- init visor.
    00d3 : 3360 ; -- <0064> bp3_addr = $bp_disable
    00d4 : 2f60 ; -- <0065> bp2_addr = $bp_disable
    00d5 : 2b60 ; -- <0066> bp1_addr = $bp_disable
    00d6 : 2760 ; -- <0067> bp0_addr = $bp_disable

    00d7 : 0256 ; -- <0069> a = 86 -- putasc "V"
    00d8 : 0000 ; -- <0069> a = a -- putasc "V"
    00d9 : fba0 ; -- <0069> putasc "V"
    00da : 0033 ; -- <0069> "
    00db : fc00 ; -- <0069> "
    00dc : 0249 ; -- <0070> a = 73 -- putasc "I"
    00dd : 0000 ; -- <0070> a = a -- putasc "I"
    00de : fba0 ; -- <0070> putasc "I"
    00df : 0033 ; -- <0070> "
    00e0 : fc00 ; -- <0070> "
    00e1 : 0253 ; -- <0071> a = 83 -- putasc "S"
    00e2 : 0000 ; -- <0071> a = a -- putasc "S"
    00e3 : fba0 ; -- <0071> putasc "S"
    00e4 : 0033 ; -- <0071> "
    00e5 : fc00 ; -- <0071> "
    00e6 : 024f ; -- <0072> a = 79 -- putasc "O"
    00e7 : 0000 ; -- <0072> a = a -- putasc "O"
    00e8 : fba0 ; -- <0072> putasc "O"
    00e9 : 0033 ; -- <0072> "
    00ea : fc00 ; -- <0072> "
    00eb : 0252 ; -- <0073> a = 82 -- putasc "R"
    00ec : 0000 ; -- <0073> a = a -- putasc "R"
    00ed : fba0 ; -- <0073> putasc "R"
    00ee : 0033 ; -- <0073> "
    00ef : fc00 ; -- <0073> "

--call :load_program

-- step into the first target instruction.
    00f0 : 3e08 ; -- <0078> bus_ctrl = $bp_step_mask
    00f1 : fba0 ; -- <0079> call :wait_for_bp
    00f2 : 0183 ; -- <0079> "
    00f3 : fc00 ; -- <0079> "

-- :runagain
-- -- release target reset, to run.
-- bus_ctrl = 0
-- bp0_addr = bp0_addr
-- a = 1000
-- call :spinwait
-- bus_ctrl = $bp_step_mask
-- call :wait_for_bp
-- call :dump_target
-- a = tg_code_addr
-- call :put4x
-- putasc ","
-- a = exr_shadow
-- call :put4x
-- putasc " "
-- putasc ">"
-- getchar
-- a = 1000
-- call :spinwait
-- jmp :runagain

-- command prompt loop.
-- :cmd_loop -- = 0x00f4
    00f4 : 000f ; -- <0104> a = bus_ctrl
    00f5 : 0600 ; -- <0105> b = 0
    00f6 : e007 ; -- <0106> br eq :nodump
    00f7 : 010a ; -- <0106> "
    00f8 : fba0 ; -- <0107> call :dump_target
    00f9 : 0249 ; -- <0107> "
    00fa : fc00 ; -- <0107> "
    00fb : 0016 ; -- <0108> a = tg_code_addr
    00fc : fba0 ; -- <0109> call :put4x
    00fd : 0053 ; -- <0109> "
    00fe : fc00 ; -- <0109> "
    00ff : 022c ; -- <0110> a = 44 -- putasc ","
    0100 : 0000 ; -- <0110> a = a -- putasc ","
    0101 : fba0 ; -- <0110> putasc ","
    0102 : 0033 ; -- <0110> "
    0103 : fc00 ; -- <0110> "
    0104 : 0015 ; -- <0111> a = exr_shadow
    0105 : fba0 ; -- <0112> call :put4x
    0106 : 0053 ; -- <0112> "
    0107 : fc00 ; -- <0112> "
    0108 : e00f ; -- <0113> jmp :prompt_done
    0109 : 0119 ; -- <0113> "
-- :nodump -- = 0x010a
    010a : 0252 ; -- <0115> a = 82 -- putasc "R"
    010b : 0000 ; -- <0115> a = a -- putasc "R"
    010c : fba0 ; -- <0115> putasc "R"
    010d : 0033 ; -- <0115> "
    010e : fc00 ; -- <0115> "
    010f : 0255 ; -- <0116> a = 85 -- putasc "U"
    0110 : 0000 ; -- <0116> a = a -- putasc "U"
    0111 : fba0 ; -- <0116> putasc "U"
    0112 : 0033 ; -- <0116> "
    0113 : fc00 ; -- <0116> "
    0114 : 024e ; -- <0117> a = 78 -- putasc "N"
    0115 : 0000 ; -- <0117> a = a -- putasc "N"
    0116 : fba0 ; -- <0117> putasc "N"
    0117 : 0033 ; -- <0117> "
    0118 : fc00 ; -- <0117> "
-- :prompt_done -- = 0x0119
    0119 : 0220 ; -- <0119> a = 32 -- putasc " "
    011a : 0000 ; -- <0119> a = a -- putasc " "
    011b : fba0 ; -- <0119> putasc " "
    011c : 0033 ; -- <0119> "
    011d : fc00 ; -- <0119> "
    011e : 023e ; -- <0120> a = 62 -- putasc ">"
    011f : 0000 ; -- <0120> a = a -- putasc ">"
    0120 : fba0 ; -- <0120> putasc ">"
    0121 : 0033 ; -- <0120> "
    0122 : fc00 ; -- <0120> "
    0123 : fba0 ; -- <0121> getchar
    0124 : 0042 ; -- <0121> "
    0125 : fc00 ; -- <0121> "
    0126 : 2000 ; -- <0121> push a -- "
    0127 : 0000 ; -- <0121> a = a -- "
    0128 : fba0 ; -- <0121> "
    0129 : 0033 ; -- <0121> "
    012a : fc00 ; -- <0121> "
    012b : 0008 ; -- <0121> pop a -- "

-- command = step next instruction.
    012c : 066e ; -- <0124> b = 110 -- asc b = "n"
    012d : e407 ; -- <0125> bn eq :skip_step
    012e : 0136 ; -- <0125> "
    012f : 3e08 ; -- <0126> bus_ctrl = $bp_step_mask
    0130 : 2409 ; -- <0127> bp0_addr = bp0_addr
    0131 : fba0 ; -- <0128> call :wait_for_bp
    0132 : 0183 ; -- <0128> "
    0133 : fc00 ; -- <0128> "
    0134 : e00f ; -- <0129> jmp :cmd_loop
    0135 : 00f4 ; -- <0129> "
-- :skip_step -- = 0x0136

-- command = reset target.
    0136 : 0652 ; -- <0133> b = 82 -- asc b = "R"
    0137 : e407 ; -- <0134> bn eq :skip_reset
    0138 : 0142 ; -- <0134> "
    0139 : 3e02 ; -- <0135> bus_ctrl = $tg_reset_mask
    013a : c800 ; -- <0136> nop
    013b : c800 ; -- <0137> nop
    013c : 3e08 ; -- <0138> bus_ctrl = $bp_step_mask
    013d : fba0 ; -- <0139> call :wait_for_bp
    013e : 0183 ; -- <0139> "
    013f : fc00 ; -- <0139> "
    0140 : e00f ; -- <0140> jmp :cmd_loop
    0141 : 00f4 ; -- <0140> "
-- :skip_reset -- = 0x0142

-- command = load program.
    0142 : 066c ; -- <0144> b = 108 -- asc b = "l"
    0143 : e407 ; -- <0145> bn eq :skip_load
    0144 : 014a ; -- <0145> "
    0145 : fba0 ; -- <0146> call :load_program
    0146 : 01dd ; -- <0146> "
    0147 : fc00 ; -- <0146> "
    0148 : e00f ; -- <0147> jmp :cmd_loop
    0149 : 00f4 ; -- <0147> "
-- :skip_load -- = 0x014a

-- command = run full speed.
    014a : 0672 ; -- <0151> b = 114 -- asc b = "r"
    014b : e407 ; -- <0152> bn eq :skip_run
    014c : 0151 ; -- <0152> "
-- release target reset, to run.
    014d : 3e00 ; -- <0154> bus_ctrl = 0
    014e : 2409 ; -- <0155> bp0_addr = bp0_addr
    014f : e00f ; -- <0156> jmp :cmd_loop
    0150 : 00f4 ; -- <0156> "
-- :skip_run -- = 0x0151

-- -- command = interrupt / break target.
-- asc b = "i"
-- bn eq :skip_brk
-- bus_ctrl = 0
-- bus_ctrl = $bp_step_mask
-- call :wait_for_bp
-- jmp :cmd_loop
-- :skip_brk

-- command = set breakpoint.
    0151 : 0662 ; -- <0169> b = 98 -- asc b = "b"
    0152 : e407 ; -- <0170> bn eq :skip_setbrk
    0153 : 0159 ; -- <0170> "
    0154 : fba0 ; -- <0171> call :set_bp
    0155 : 0187 ; -- <0171> "
    0156 : fc00 ; -- <0171> "
    0157 : e00f ; -- <0172> jmp :cmd_loop
    0158 : 00f4 ; -- <0172> "
-- :skip_setbrk -- = 0x0159

    0159 : 023f ; -- <0175> a = 63 -- putasc "?"
    015a : 0000 ; -- <0175> a = a -- putasc "?"
    015b : fba0 ; -- <0175> putasc "?"
    015c : 0033 ; -- <0175> "
    015d : fc00 ; -- <0175> "
    015e : 020d ; -- <0176> a = 13 -- puteol
    015f : 0000 ; -- <0176> a = a -- puteol
    0160 : fba0 ; -- <0176> puteol
    0161 : 0033 ; -- <0176> "
    0162 : fc00 ; -- <0176> "
    0163 : 020a ; -- <0176> a = 10 -- puteol
    0164 : 0000 ; -- <0176> a = a -- puteol
    0165 : fba0 ; -- <0176> puteol
    0166 : 0033 ; -- <0176> "
    0167 : fc00 ; -- <0176> "
    0168 : e00f ; -- <0177> jmp :cmd_loop
    0169 : 00f4 ; -- <0177> "

-- demonstrations ------------------------------

-- set a breakpoint, wait til it hits.
    016a : 2615 ; -- <0182> bp0_addr = 0x15
-- :main_loop -- = 0x016b
    016b : fba0 ; -- <0184> call :wait_for_bp
    016c : 0183 ; -- <0184> "
    016d : fc00 ; -- <0184> "

-- release target to run full speed.
    016e : 3e00 ; -- <0187> bus_ctrl = 0

-- interrupt the target and single step it a few times.
    016f : 3e08 ; -- <0190> bus_ctrl = $bp_step_mask
    0170 : fba0 ; -- <0191> call :wait_for_bp
    0171 : 0183 ; -- <0191> "
    0172 : fc00 ; -- <0191> "
    0173 : 2409 ; -- <0192> bp0_addr = bp0_addr
    0174 : fba0 ; -- <0193> call :wait_for_bp
    0175 : 0183 ; -- <0193> "
    0176 : fc00 ; -- <0193> "
    0177 : 2409 ; -- <0194> bp0_addr = bp0_addr
    0178 : fba0 ; -- <0195> call :wait_for_bp
    0179 : 0183 ; -- <0195> "
    017a : fc00 ; -- <0195> "
    017b : 2409 ; -- <0196> bp0_addr = bp0_addr
    017c : fba0 ; -- <0197> call :wait_for_bp
    017d : 0183 ; -- <0197> "
    017e : fc00 ; -- <0197> "
    017f : 3e00 ; -- <0198> bus_ctrl = 0

-- release target to pass breakpoint once.
    0180 : 2409 ; -- <0201> bp0_addr = bp0_addr

    0181 : e00f ; -- <0203> jmp :main_loop
    0182 : 016b ; -- <0203> "

    0183 : 0018 ; -- <0206> a = bp_status
    0184 : e000 ; -- <0207> br az :wait_for_bp
    0185 : 0183 ; -- <0207> "
    0186 : fc00 ; -- <0208> rtn

    0187 : 2004 ; -- <0210> push x -- func set_bp
    0188 : 2005 ; -- <0210> push y -- "
    0189 : 203e ; -- <0210> push rtna -- "
    018a : fba0 ; -- <0211> getchar
    018b : 0042 ; -- <0211> "
    018c : fc00 ; -- <0211> "
    018d : 2000 ; -- <0211> push a -- "
    018e : 0000 ; -- <0211> a = a -- "
    018f : fba0 ; -- <0211> "
    0190 : 0033 ; -- <0211> "
    0191 : fc00 ; -- <0211> "
    0192 : 0008 ; -- <0211> pop a -- "
    0193 : 1000 ; -- <0212> x = a
    0194 : fba0 ; -- <0213> getchar
    0195 : 0042 ; -- <0213> "
    0196 : fc00 ; -- <0213> "
    0197 : 2000 ; -- <0213> push a -- "
    0198 : 0000 ; -- <0213> a = a -- "
    0199 : fba0 ; -- <0213> "
    019a : 0033 ; -- <0213> "
    019b : fc00 ; -- <0213> "
    019c : 0008 ; -- <0213> pop a -- "
    019d : 063d ; -- <0214> b = 61 -- asc b = "="
    019e : e407 ; -- <0215> bn eq :fail
    019f : 01ca ; -- <0215> "
    01a0 : fba0 ; -- <0216> call :get4x
    01a1 : 0090 ; -- <0216> "
    01a2 : fc00 ; -- <0216> "
    01a3 : 1400 ; -- <0217> y = a
    01a4 : 0200 ; -- <0218> a = 0
    01a5 : e407 ; -- <0219> bn eq :fail
    01a6 : 01ca ; -- <0219> "
    01a7 : 0004 ; -- <0220> a = x
    01a8 : 0600 ; -- <0221> b = 0
    01a9 : e007 ; -- <0222> br eq :b0
    01aa : 01b6 ; -- <0222> "
    01ab : 0601 ; -- <0223> b = 1
    01ac : e007 ; -- <0224> br eq :b1
    01ad : 01bb ; -- <0224> "
    01ae : 0602 ; -- <0225> b = 2
    01af : e007 ; -- <0226> br eq :b2
    01b0 : 01c0 ; -- <0226> "
    01b1 : 0603 ; -- <0227> b = 3
    01b2 : e007 ; -- <0228> br eq :b3
    01b3 : 01c5 ; -- <0228> "
    01b4 : e00f ; -- <0229> jmp :fail
    01b5 : 01ca ; -- <0229> "
-- :b0 -- = 0x01b6
    01b6 : 2405 ; -- <0231> bp0_addr = y
    01b7 : f808 ; -- <0232> pop rtna -- rtn
    01b8 : 1408 ; -- <0232> pop y -- "
    01b9 : 1008 ; -- <0232> pop x -- "
    01ba : fc00 ; -- <0232> rtn
-- :b1 -- = 0x01bb
    01bb : 2805 ; -- <0234> bp1_addr = y
    01bc : f808 ; -- <0235> pop rtna -- rtn
    01bd : 1408 ; -- <0235> pop y -- "
    01be : 1008 ; -- <0235> pop x -- "
    01bf : fc00 ; -- <0235> rtn
-- :b2 -- = 0x01c0
    01c0 : 2c05 ; -- <0237> bp2_addr = y
    01c1 : f808 ; -- <0238> pop rtna -- rtn
    01c2 : 1408 ; -- <0238> pop y -- "
    01c3 : 1008 ; -- <0238> pop x -- "
    01c4 : fc00 ; -- <0238> rtn
-- :b3 -- = 0x01c5
    01c5 : 3005 ; -- <0240> bp3_addr = y
    01c6 : f808 ; -- <0241> pop rtna -- rtn
    01c7 : 1408 ; -- <0241> pop y -- "
    01c8 : 1008 ; -- <0241> pop x -- "
    01c9 : fc00 ; -- <0241> rtn
-- :fail -- = 0x01ca
    01ca : 023f ; -- <0243> a = 63 -- putasc "?"
    01cb : 0000 ; -- <0243> a = a -- putasc "?"
    01cc : fba0 ; -- <0243> putasc "?"
    01cd : 0033 ; -- <0243> "
    01ce : fc00 ; -- <0243> "
    01cf : 020d ; -- <0244> a = 13 -- puteol
    01d0 : 0000 ; -- <0244> a = a -- puteol
    01d1 : fba0 ; -- <0244> puteol
    01d2 : 0033 ; -- <0244> "
    01d3 : fc00 ; -- <0244> "
    01d4 : 020a ; -- <0244> a = 10 -- puteol
    01d5 : 0000 ; -- <0244> a = a -- puteol
    01d6 : fba0 ; -- <0244> puteol
    01d7 : 0033 ; -- <0244> "
    01d8 : fc00 ; -- <0244> "
    01d9 : f808 ; -- <0245> pop rtna -- rtn
    01da : 1408 ; -- <0245> pop y -- "
    01db : 1008 ; -- <0245> pop x -- "
    01dc : fc00 ; -- <0245> rtn

    01dd : 2002 ; -- <0247> push i -- func load_program
    01de : 2003 ; -- <0247> push j -- "
    01df : 2004 ; -- <0247> push x -- "
    01e0 : 2006 ; -- <0247> push g6 -- "
    01e1 : 203e ; -- <0247> push rtna -- "
-- load target program from UART.
-- length, little-endian.  memorize in x.
    01e2 : 024c ; -- <0250> a = 76 -- putasc L
    01e3 : 0000 ; -- <0250> a = a -- putasc L
    01e4 : fba0 ; -- <0250> putasc L
    01e5 : 0033 ; -- <0250> "
    01e6 : fc00 ; -- <0250> "
    01e7 : fba0 ; -- <0251> get16 x
    01e8 : 0042 ; -- <0251> "
    01e9 : fc00 ; -- <0251> "
    01ea : 2000 ; -- <0251> push a -- "
    01eb : fba0 ; -- <0251> "
    01ec : 0042 ; -- <0251> "
    01ed : fc00 ; -- <0251> "
    01ee : 0352 ; -- <0251> "
    01ef : 0352 ; -- <0251> "
    01f0 : 0408 ; -- <0251> pop b -- "
    01f1 : c800 ; -- <0251> "
    01f2 : 1334 ; -- <0251> "
    01f3 : 0004 ; -- <0252> a = x
    01f4 : fba0 ; -- <0253> call put4x
    01f5 : 0053 ; -- <0253> "
    01f6 : fc00 ; -- <0253> "
-- put target into reset again, in case this is a target warm boot.
    01f7 : 3e02 ; -- <0255> bus_ctrl = $tg_reset_mask
-- load opcodes.  count up address in i.
    01f8 : 0a00 ; -- <0257> i = 0
    01f9 : 0e01 ; -- <0258> j = 1
-- :loadword -- = 0x01fa
    01fa : 0241 ; -- <0260> a = 65 -- putasc A
    01fb : 0000 ; -- <0260> a = a -- putasc A
    01fc : fba0 ; -- <0260> putasc A
    01fd : 0033 ; -- <0260> "
    01fe : fc00 ; -- <0260> "
    01ff : 0002 ; -- <0261> a = i
    0200 : fba0 ; -- <0262> call put4x
    0201 : 0053 ; -- <0262> "
    0202 : fc00 ; -- <0262> "
    0203 : 023d ; -- <0263> a = 61 -- putasc "="
    0204 : 0000 ; -- <0263> a = a -- putasc "="
    0205 : fba0 ; -- <0263> putasc "="
    0206 : 0033 ; -- <0263> "
    0207 : fc00 ; -- <0263> "
    0208 : fba0 ; -- <0264> get16 g6
    0209 : 0042 ; -- <0264> "
    020a : fc00 ; -- <0264> "
    020b : 2000 ; -- <0264> push a -- "
    020c : fba0 ; -- <0264> "
    020d : 0042 ; -- <0264> "
    020e : fc00 ; -- <0264> "
    020f : 0352 ; -- <0264> "
    0210 : 0352 ; -- <0264> "
    0211 : 0408 ; -- <0264> pop b -- "
    0212 : c800 ; -- <0264> "
    0213 : 1b34 ; -- <0264> "
    0214 : 0006 ; -- <0265> a = g6
    0215 : fba0 ; -- <0266> call put4x
    0216 : 0053 ; -- <0266> "
    0217 : fc00 ; -- <0266> "
    0218 : 023d ; -- <0267> a = 61 -- putasc "="
    0219 : 0000 ; -- <0267> a = a -- putasc "="
    021a : fba0 ; -- <0267> putasc "="
    021b : 0033 ; -- <0267> "
    021c : fc00 ; -- <0267> "
    021d : 4c02 ; -- <0268> m9k_addr = i
    021e : 5006 ; -- <0269> m9k_data = g6
    021f : 0014 ; -- <0270> a = m9k_data
    0220 : fba0 ; -- <0271> call put4x
    0221 : 0053 ; -- <0271> "
    0222 : fc00 ; -- <0271> "
    0223 : 020d ; -- <0272> a = 13 -- puteol
    0224 : 0000 ; -- <0272> a = a -- puteol
    0225 : fba0 ; -- <0272> puteol
    0226 : 0033 ; -- <0272> "
    0227 : fc00 ; -- <0272> "
    0228 : 020a ; -- <0272> a = 10 -- puteol
    0229 : 0000 ; -- <0272> a = a -- puteol
    022a : fba0 ; -- <0272> puteol
    022b : 0033 ; -- <0272> "
    022c : fc00 ; -- <0272> "
    022d : 0b10 ; -- <0273> i = i+j
    022e : 0002 ; -- <0274> a = i
    022f : 0404 ; -- <0275> b = x
    0230 : e407 ; -- <0276> bn eq :loadword
    0231 : 01fa ; -- <0276> "
    0232 : f808 ; -- <0277> pop rtna -- rtn
    0233 : 1808 ; -- <0277> pop g6 -- "
    0234 : 1008 ; -- <0277> pop x -- "
    0235 : 0c08 ; -- <0277> pop j -- "
    0236 : 0808 ; -- <0277> pop i -- "
    0237 : fc00 ; -- <0277> rtn

-- observe a register.  return its value in peek_data.
-- pass its register address in a.
    0238 : 07a0 ; -- <0282> b = 0x3ff
    0239 : 03ff ; -- <0282> "
    023a : c800 ; -- <0283> nop
    023b : 0330 ; -- <0284> a = and
-- debug_peek_reg = 31 << 10
    023c : 07a0 ; -- <0286> b = 0x7c00
    023d : 7c00 ; -- <0286> "
    023e : c800 ; -- <0287> nop
    023f : 3734 ; -- <0288> force_opcode = or
    0240 : 3e04 ; -- <0289> bus_ctrl = $divert_code_bus_mask
    0241 : 4201 ; -- <0290> tg_force = $hold_state_mask
    0242 : 4203 ; -- <0291> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0243 : 4205 ; -- <0292> tg_force = ($hold_state_mask | $force_exec_mask)
    0244 : 4201 ; -- <0293> tg_force = $hold_state_mask
-- target's register value is now in peek_data.
-- refill target exr so it can resume seamlessly.
    0245 : 3415 ; -- <0296> force_opcode = exr_shadow
    0246 : 4203 ; -- <0297> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0247 : 4200 ; -- <0298> tg_force = 0
    0248 : fc00 ; -- <0299> rtn

-- show target status display.
    0249 : 2002 ; -- <0302> push i -- func dump_target
    024a : 2003 ; -- <0302> push j -- "
    024b : 2004 ; -- <0302> push x -- "
    024c : 2005 ; -- <0302> push y -- "
    024d : 203e ; -- <0302> push rtna -- "
    024e : 020d ; -- <0303> a = 13 -- puteol
    024f : 0000 ; -- <0303> a = a -- puteol
    0250 : fba0 ; -- <0303> puteol
    0251 : 0033 ; -- <0303> "
    0252 : fc00 ; -- <0303> "
    0253 : 020a ; -- <0303> a = 10 -- puteol
    0254 : 0000 ; -- <0303> a = a -- puteol
    0255 : fba0 ; -- <0303> puteol
    0256 : 0033 ; -- <0303> "
    0257 : fc00 ; -- <0303> "
    0258 : 0a00 ; -- <0304> i = 0
-- :next_reg -- = 0x0259
-- fetch register name from table in target program.
    0259 : 1200 ; -- <0307> x = 0
    025a : 1601 ; -- <0308> y = 1
-- :next_chars -- = 0x025b
    025b : 0002 ; -- <0310> a = i
    025c : 0351 ; -- <0311> a = a<<1
    025d : 0351 ; -- <0312> a = a<<1
    025e : 0603 ; -- <0313> b = 3
    025f : c800 ; -- <0314> nop
    0260 : 0300 ; -- <0315> a = a+b
    0261 : 0404 ; -- <0316> b = x
    0262 : c800 ; -- <0317> nop
    0263 : 4f00 ; -- <0318> m9k_addr = a+b
    0264 : 0014 ; -- <0319> a = m9k_data -- putchar m9k_data
    0265 : fba0 ; -- <0319> putchar m9k_data
    0266 : 0033 ; -- <0319> "
    0267 : fc00 ; -- <0319> "
    0268 : 0014 ; -- <0320> a = m9k_data
    0269 : 0353 ; -- <0321> a = a>>4
    026a : 0353 ; -- <0322> a = a>>4
    026b : 0000 ; -- <0323> a = a -- putchar a
    026c : fba0 ; -- <0323> putchar a
    026d : 0033 ; -- <0323> "
    026e : fc00 ; -- <0323> "
    026f : 1320 ; -- <0324> x = x+y
    0270 : 0004 ; -- <0325> a = x
    0271 : 0604 ; -- <0326> b = 4
    0272 : e407 ; -- <0327> bn eq :next_chars
    0273 : 025b ; -- <0327> "
    0274 : 023d ; -- <0328> a = 61 -- putasc "="
    0275 : 0000 ; -- <0328> a = a -- putasc "="
    0276 : fba0 ; -- <0328> putasc "="
    0277 : 0033 ; -- <0328> "
    0278 : fc00 ; -- <0328> "
    0279 : 0002 ; -- <0329> a = i
    027a : fba0 ; -- <0330> call :peek
    027b : 0238 ; -- <0330> "
    027c : fc00 ; -- <0330> "
    027d : 0017 ; -- <0331> a = peek_data
    027e : fba0 ; -- <0332> call :put4x
    027f : 0053 ; -- <0332> "
    0280 : fc00 ; -- <0332> "
    0281 : 0220 ; -- <0333> a = 32 -- putasc " "
    0282 : 0000 ; -- <0333> a = a -- putasc " "
    0283 : fba0 ; -- <0333> putasc " "
    0284 : 0033 ; -- <0333> "
    0285 : fc00 ; -- <0333> "
    0286 : 0e01 ; -- <0334> j = 1
    0287 : c800 ; -- <0335> nop
    0288 : 0b10 ; -- <0336> i = i+j
-- loop up to the number of registers in the target program's register name table.
    0289 : 4e02 ; -- <0338> m9k_addr = 2
    028a : 0414 ; -- <0339> b = m9k_data
    028b : 0002 ; -- <0340> a = i
    028c : e407 ; -- <0341> bn eq :next_reg
    028d : 0259 ; -- <0341> "
    028e : 020d ; -- <0342> a = 13 -- puteol
    028f : 0000 ; -- <0342> a = a -- puteol
    0290 : fba0 ; -- <0342> puteol
    0291 : 0033 ; -- <0342> "
    0292 : fc00 ; -- <0342> "
    0293 : 020a ; -- <0342> a = 10 -- puteol
    0294 : 0000 ; -- <0342> a = a -- puteol
    0295 : fba0 ; -- <0342> puteol
    0296 : 0033 ; -- <0342> "
    0297 : fc00 ; -- <0342> "
    0298 : f808 ; -- <0343> pop rtna -- rtn
    0299 : 1408 ; -- <0343> pop y -- "
    029a : 1008 ; -- <0343> pop x -- "
    029b : 0c08 ; -- <0343> pop j -- "
    029c : 0808 ; -- <0343> pop i -- "
    029d : fc00 ; -- <0343> rtn
        
        END;
    
