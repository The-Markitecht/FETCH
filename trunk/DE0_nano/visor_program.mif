
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- register file configuration

-- application-specific register aliases.





--alias_src  tg_debug_out	    [incr counter]


    0000 : e00f ; -- <0051> jmp :main
    0001 : 0088 ; -- <0051> "


-- pick a byte from an array of words.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0002 : 0601 ; -- <0005> b = 1
    0003 : c800 ; -- <0006> nop
    0004 : e002 ; -- <0007> br and0z :pick_byte_even
    0005 : 000e ; -- <0007> "
    0006 : 0350 ; -- <0008> a = a>>1
    0007 : 0404 ; -- <0009> b = x
    0008 : c800 ; -- <0010> nop
    0009 : d300 ; -- <0011> fetch a from a+b
    000a : 03b0 ; -- <0011> "
    000b : 0353 ; -- <0012> a = a>>4
    000c : 0353 ; -- <0013> a = a>>4
    000d : fc00 ; -- <0014> rtn
-- :pick_byte_even -- = 0x000e
    000e : 0350 ; -- <0016> a = a>>1
    000f : 0404 ; -- <0017> b = x
    0010 : c800 ; -- <0018> nop
    0011 : d300 ; -- <0019> fetch a from a+b
    0012 : 03b0 ; -- <0019> "
    0013 : 06ff ; -- <0020> b = 0xff
    0014 : c800 ; -- <0021> nop
    0015 : 0330 ; -- <0022> a = and
    0016 : fc00 ; -- <0023> rtn


-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
    0017 : 2004 ; -- <0024> push x -- func putchar_atx

    0018 : 1000 ; -- <0026> x = a

-- wait for UART to be idle (not busy).
    0019 : 0202 ; -- <0029> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x001a
    001a : 0412 ; -- <0031> b = atx_ctrl
    001b : c800 ; -- <0032> nop
    001c : e402 ; -- <0033> bn and0z :pcatx_wait_for_idle
    001d : 001a ; -- <0033> "

-- push word to the UART.  its low byte is a character.
    001e : 4404 ; -- <0036> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    001f : 4a01 ; -- <0041> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    0020 : 0202 ; -- <0044> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x0021
    0021 : 0412 ; -- <0046> b = atx_ctrl
    0022 : e002 ; -- <0047> br and0z :pcatx_wait_for_busy
    0023 : 0021 ; -- <0047> "

    0024 : 4a00 ; -- <0049> atx_ctrl = 0
    0025 : 1008 ; -- <0050> pop x -- rtn
    0026 : fc00 ; -- <0050> rtn

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- wait until UART is busy, then idle.
    0027 : 0204 ; -- <0056> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0028
    0028 : 0412 ; -- <0058> b = atx_ctrl
    0029 : e002 ; -- <0059> br and0z :wait_for_busy
    002a : 0028 ; -- <0059> "
-- :wait_for_idle -- = 0x002b
    002b : 0412 ; -- <0061> b = atx_ctrl
    002c : c800 ; -- <0062> nop
    002d : e402 ; -- <0063> bn and0z :wait_for_idle
    002e : 002b ; -- <0063> "
    002f : 0011 ; -- <0064> a = atx_data
    0030 : fc00 ; -- <0065> rtn


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0031 : 2004 ; -- <0043> push x -- func put4x
    0032 : 2006 ; -- <0043> push g6 -- "
    0033 : 203e ; -- <0043> push rtna -- "
    0034 : 13a0 ; -- <0044> x = :hexdigits
    0035 : 006e ; -- <0044> "

    0036 : 1800 ; -- <0046> g6 = a
    0037 : 07a0 ; -- <0047> b = 0xF000
    0038 : f000 ; -- <0047> "
    0039 : c800 ; -- <0048> nop
    003a : 0330 ; -- <0049> a = and
    003b : 0353 ; -- <0050> a = a>>4
    003c : 0353 ; -- <0051> a = a>>4
    003d : 0353 ; -- <0052> a = a>>4
    003e : fba0 ; -- <0053> call fetch_byte
    003f : 0002 ; -- <0053> "
    0040 : fc00 ; -- <0053> "
    0041 : 0000 ; -- <0054> a = a -- putchar a
    0042 : fba0 ; -- <0054> putchar a
    0043 : 0017 ; -- <0054> "
    0044 : fc00 ; -- <0054> "

    0045 : 0006 ; -- <0056> a = g6
    0046 : 07a0 ; -- <0057> b = 0x0F00
    0047 : 0f00 ; -- <0057> "
    0048 : c800 ; -- <0058> nop
    0049 : 0330 ; -- <0059> a = and
    004a : 0353 ; -- <0060> a = a>>4
    004b : 0353 ; -- <0061> a = a>>4
    004c : fba0 ; -- <0062> call fetch_byte
    004d : 0002 ; -- <0062> "
    004e : fc00 ; -- <0062> "
    004f : 0000 ; -- <0063> a = a -- putchar a
    0050 : fba0 ; -- <0063> putchar a
    0051 : 0017 ; -- <0063> "
    0052 : fc00 ; -- <0063> "

    0053 : 0006 ; -- <0065> a = g6
    0054 : 06f0 ; -- <0066> b = 0x00F0
    0055 : c800 ; -- <0067> nop
    0056 : 0330 ; -- <0068> a = and
    0057 : 0353 ; -- <0069> a = a>>4
    0058 : fba0 ; -- <0070> call fetch_byte
    0059 : 0002 ; -- <0070> "
    005a : fc00 ; -- <0070> "
    005b : 0000 ; -- <0071> a = a -- putchar a
    005c : fba0 ; -- <0071> putchar a
    005d : 0017 ; -- <0071> "
    005e : fc00 ; -- <0071> "

    005f : 0006 ; -- <0073> a = g6
    0060 : 060f ; -- <0074> b = 0x000F
    0061 : c800 ; -- <0075> nop
    0062 : 0330 ; -- <0076> a = and
    0063 : fba0 ; -- <0077> call fetch_byte
    0064 : 0002 ; -- <0077> "
    0065 : fc00 ; -- <0077> "
    0066 : 0000 ; -- <0078> a = a -- putchar a
    0067 : fba0 ; -- <0078> putchar a
    0068 : 0017 ; -- <0078> "
    0069 : fc00 ; -- <0078> "

    006a : f808 ; -- <0080> pop rtna -- rtn
    006b : 1808 ; -- <0080> pop g6 -- "
    006c : 1008 ; -- <0080> pop x -- "
    006d : fc00 ; -- <0080> rtn

-- :hexdigits -- = 0x006e
-- "0123456789abcdef"
    006e : 3130 ; -- <0083> 10
    006f : 3332 ; -- <0083> 32
    0070 : 3534 ; -- <0083> 54
    0071 : 3736 ; -- <0083> 76
    0072 : 3938 ; -- <0083> 98
    0073 : 6261 ; -- <0083> ba
    0074 : 6463 ; -- <0083> dc
    0075 : 6665 ; -- <0083> fe


-- routine waits a number of milliseconds given in a.
    0076 : 2004 ; -- <0002> push x -- func spinwait
    0077 : 2005 ; -- <0002> push y -- "
--patch
--return
    0078 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x0079
    0079 : 13a0 ; -- <0007> x = 12500
    007a : 30d4 ; -- <0007> "
    007b : 1760 ; -- <0008> y = -1
    007c : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x007d
    007d : 1320 ; -- <0011> x = x+y
    007e : c800 ; -- <0012> nop
    007f : e400 ; -- <0013> bn 2z :spinwait_inner
    0080 : 007d ; -- <0013> "
    0081 : 0300 ; -- <0014> a = a+b
    0082 : c800 ; -- <0015> nop
    0083 : e404 ; -- <0016> bn z :spinwait_outer
    0084 : 0079 ; -- <0016> "
    0085 : 1408 ; -- <0017> pop y -- rtn
    0086 : 1008 ; -- <0017> pop x -- "
    0087 : fc00 ; -- <0017> rtn



-- --------------------------------------------
-- :main -- = 0x0088
-- put target into reset.
    0088 : 3e02 ; -- <0061> bus_ctrl = $tg_reset_mask

-- init visor.
    0089 : 3360 ; -- <0064> bp3_addr = $bp_disable
    008a : 2f60 ; -- <0065> bp2_addr = $bp_disable
    008b : 2b60 ; -- <0066> bp1_addr = $bp_disable
    008c : 2760 ; -- <0067> bp0_addr = $bp_disable

    008d : fba0 ; -- <0069> call :load_program
    008e : 0103 ; -- <0069> "
    008f : fc00 ; -- <0069> "

-- step into the first target instruction.
    0090 : 3e08 ; -- <0072> bus_ctrl = $bp_step_mask
    0091 : fba0 ; -- <0073> call :wait_for_bp
    0092 : 00fd ; -- <0073> "
    0093 : fc00 ; -- <0073> "

-- :cmd_loop -- = 0x0094
    0094 : fba0 ; -- <0076> call :dump_target
    0095 : 0159 ; -- <0076> "
    0096 : fc00 ; -- <0076> "
    0097 : fba0 ; -- <0077> getchar
    0098 : 0027 ; -- <0077> "
    0099 : fc00 ; -- <0077> "

    009a : 066e ; -- <0079> b = 110 -- asc b = "n"
    009b : c800 ; -- <0080> nop
    009c : e407 ; -- <0081> bn eq :skip_step
    009d : 00a4 ; -- <0081> "
    009e : 3e08 ; -- <0082> bus_ctrl = $bp_step_mask
    009f : fba0 ; -- <0083> call :wait_for_bp
    00a0 : 00fd ; -- <0083> "
    00a1 : fc00 ; -- <0083> "
    00a2 : e00f ; -- <0084> jmp :cmd_loop
    00a3 : 0094 ; -- <0084> "
-- :skip_step -- = 0x00a4

    00a4 : 0652 ; -- <0087> b = 82 -- asc b = "R"
    00a5 : c800 ; -- <0088> nop
    00a6 : e407 ; -- <0089> bn eq :skip_reset
    00a7 : 00b1 ; -- <0089> "
    00a8 : 3e02 ; -- <0090> bus_ctrl = $tg_reset_mask
    00a9 : c800 ; -- <0091> nop
    00aa : c800 ; -- <0092> nop
    00ab : 3e08 ; -- <0093> bus_ctrl = $bp_step_mask
    00ac : fba0 ; -- <0094> call :wait_for_bp
    00ad : 00fd ; -- <0094> "
    00ae : fc00 ; -- <0094> "
    00af : e00f ; -- <0095> jmp :cmd_loop
    00b0 : 0094 ; -- <0095> "
-- :skip_reset -- = 0x00b1

    00b1 : 066c ; -- <0098> b = 108 -- asc b = "l"
    00b2 : c800 ; -- <0099> nop
    00b3 : e407 ; -- <0100> bn eq :skip_load
    00b4 : 00ba ; -- <0100> "
    00b5 : fba0 ; -- <0101> call :load_program
    00b6 : 0103 ; -- <0101> "
    00b7 : fc00 ; -- <0101> "
    00b8 : e00f ; -- <0102> jmp :cmd_loop
    00b9 : 0094 ; -- <0102> "
-- :skip_load -- = 0x00ba

    00ba : 0672 ; -- <0105> b = 114 -- asc b = "r"
    00bb : c800 ; -- <0106> nop
    00bc : e407 ; -- <0107> bn eq :skip_run
    00bd : 00bf ; -- <0107> "
-- release target reset, to run.
    00be : 3e00 ; -- <0109> bus_ctrl = 0
-- :skip_run -- = 0x00bf

    00bf : 0669 ; -- <0112> b = 105 -- asc b = "i"
    00c0 : c800 ; -- <0113> nop
    00c1 : e407 ; -- <0114> bn eq :skip_brk
    00c2 : 00c8 ; -- <0114> "
    00c3 : 3e00 ; -- <0115> bus_ctrl = 0
    00c4 : 3e08 ; -- <0116> bus_ctrl = $bp_step_mask
    00c5 : fba0 ; -- <0117> call :wait_for_bp
    00c6 : 00fd ; -- <0117> "
    00c7 : fc00 ; -- <0117> "
-- :skip_brk -- = 0x00c8

    00c8 : e00f ; -- <0120> jmp :cmd_loop
    00c9 : 0094 ; -- <0120> "

-- demonstrations ------------------------------

-- set a breakpoint, wait til it hits.
    00ca : 2615 ; -- <0125> bp0_addr = 0x15
-- :main_loop -- = 0x00cb
    00cb : fba0 ; -- <0127> call :wait_for_bp
    00cc : 00fd ; -- <0127> "
    00cd : fc00 ; -- <0127> "

-- observe a register.
    00ce : 3e04 ; -- <0130> bus_ctrl = $divert_code_bus_mask
    00cf : 4201 ; -- <0131> tg_force = $hold_state_mask
    00d0 : d2f4 ; -- <0132> fetch force_opcode from ([label observe] + 7)
    00d1 : 37b0 ; -- <0132> "
    00d2 : 4203 ; -- <0133> tg_force = ($hold_state_mask | $force_load_exr_mask)
    00d3 : 4205 ; -- <0134> tg_force = ($hold_state_mask | $force_exec_mask)
    00d4 : 4201 ; -- <0135> tg_force = $hold_state_mask
-- target's r7 value is now in peek_data.

-- refill target exr so it can resume seamlessly.
    00d5 : 3415 ; -- <0139> force_opcode = exr_shadow
    00d6 : 4203 ; -- <0140> tg_force = ($hold_state_mask | $force_load_exr_mask)
    00d7 : 4200 ; -- <0141> tg_force = 0
    00d8 : 3e00 ; -- <0142> bus_ctrl = 0

-- interrupt the target and single step it a few times.
    00d9 : 3e08 ; -- <0145> bus_ctrl = $bp_step_mask
    00da : fba0 ; -- <0146> call :wait_for_bp
    00db : 00fd ; -- <0146> "
    00dc : fc00 ; -- <0146> "
    00dd : 2409 ; -- <0147> bp0_addr = bp0_addr
    00de : fba0 ; -- <0148> call :wait_for_bp
    00df : 00fd ; -- <0148> "
    00e0 : fc00 ; -- <0148> "
    00e1 : 2409 ; -- <0149> bp0_addr = bp0_addr
    00e2 : fba0 ; -- <0150> call :wait_for_bp
    00e3 : 00fd ; -- <0150> "
    00e4 : fc00 ; -- <0150> "
    00e5 : 2409 ; -- <0151> bp0_addr = bp0_addr
    00e6 : fba0 ; -- <0152> call :wait_for_bp
    00e7 : 00fd ; -- <0152> "
    00e8 : fc00 ; -- <0152> "
    00e9 : 3e00 ; -- <0153> bus_ctrl = 0

-- release target to pass breakpoint once.
    00ea : 2409 ; -- <0156> bp0_addr = bp0_addr

    00eb : e00f ; -- <0158> jmp :main_loop
    00ec : 00cb ; -- <0158> "

-- :observe -- = 0x00ed
-- these instructions are assembled in the visor program, but passed to the target to execute.
    00ed : 7c00 ; -- <0163> debug_peek_reg = r0
    00ee : 7c01 ; -- <0164> debug_peek_reg = r1
    00ef : 7c02 ; -- <0165> debug_peek_reg = r2
    00f0 : 7c03 ; -- <0166> debug_peek_reg = r3
    00f1 : 7c04 ; -- <0167> debug_peek_reg = r4
    00f2 : 7c05 ; -- <0168> debug_peek_reg = r5
    00f3 : 7c06 ; -- <0169> debug_peek_reg = r6
    00f4 : 7c07 ; -- <0170> debug_peek_reg = r7
    00f5 : 7c08 ; -- <0171> debug_peek_reg = r8
    00f6 : 7c09 ; -- <0172> debug_peek_reg = r9
    00f7 : 7c0a ; -- <0173> debug_peek_reg = r10
    00f8 : 7c0b ; -- <0174> debug_peek_reg = r11
    00f9 : 7c0c ; -- <0175> debug_peek_reg = r12
    00fa : 7c0d ; -- <0176> debug_peek_reg = r13
    00fb : 7c0e ; -- <0177> debug_peek_reg = r14
    00fc : 7c0f ; -- <0178> debug_peek_reg = r15

    00fd : 0200 ; -- <0181> a = 0
    00fe : 0418 ; -- <0182> b = bp_status
    00ff : c800 ; -- <0183> nop
    0100 : e004 ; -- <0184> br z :wait_for_bp
    0101 : 00fd ; -- <0184> "
    0102 : fc00 ; -- <0185> rtn

    0103 : 2002 ; -- <0187> push i -- func load_program
    0104 : 2003 ; -- <0187> push j -- "
    0105 : 2004 ; -- <0187> push x -- "
    0106 : 2006 ; -- <0187> push g6 -- "
    0107 : 203e ; -- <0187> push rtna -- "
-- load target program from UART.
-- length, little-endian.  memorize in x.
    0108 : 024c ; -- <0190> a = 76 -- putasc L
    0109 : 0000 ; -- <0190> a = a -- putasc L
    010a : fba0 ; -- <0190> putasc L
    010b : 0017 ; -- <0190> "
    010c : fc00 ; -- <0190> "
    010d : fba0 ; -- <0191> get16 x
    010e : 0027 ; -- <0191> "
    010f : fc00 ; -- <0191> "
    0110 : 2000 ; -- <0191> push a -- "
    0111 : fba0 ; -- <0191> "
    0112 : 0027 ; -- <0191> "
    0113 : fc00 ; -- <0191> "
    0114 : 0352 ; -- <0191> "
    0115 : 0352 ; -- <0191> "
    0116 : 0408 ; -- <0191> pop b -- "
    0117 : c800 ; -- <0191> "
    0118 : 1334 ; -- <0191> "
    0119 : 0004 ; -- <0192> a = x
    011a : fba0 ; -- <0193> call put4x
    011b : 0031 ; -- <0193> "
    011c : fc00 ; -- <0193> "
-- put target into reset again, in case this is a target warm boot.
    011d : 3e02 ; -- <0195> bus_ctrl = $tg_reset_mask
-- load opcodes.  count up address in i.
    011e : 0a00 ; -- <0197> i = 0
    011f : 0e01 ; -- <0198> j = 1
-- :loadword -- = 0x0120
    0120 : 0241 ; -- <0200> a = 65 -- putasc A
    0121 : 0000 ; -- <0200> a = a -- putasc A
    0122 : fba0 ; -- <0200> putasc A
    0123 : 0017 ; -- <0200> "
    0124 : fc00 ; -- <0200> "
    0125 : 0002 ; -- <0201> a = i
    0126 : fba0 ; -- <0202> call put4x
    0127 : 0031 ; -- <0202> "
    0128 : fc00 ; -- <0202> "
    0129 : 023d ; -- <0203> a = 61 -- putasc "="
    012a : 0000 ; -- <0203> a = a -- putasc "="
    012b : fba0 ; -- <0203> putasc "="
    012c : 0017 ; -- <0203> "
    012d : fc00 ; -- <0203> "
    012e : fba0 ; -- <0204> get16 g6
    012f : 0027 ; -- <0204> "
    0130 : fc00 ; -- <0204> "
    0131 : 2000 ; -- <0204> push a -- "
    0132 : fba0 ; -- <0204> "
    0133 : 0027 ; -- <0204> "
    0134 : fc00 ; -- <0204> "
    0135 : 0352 ; -- <0204> "
    0136 : 0352 ; -- <0204> "
    0137 : 0408 ; -- <0204> pop b -- "
    0138 : c800 ; -- <0204> "
    0139 : 1b34 ; -- <0204> "
    013a : 0006 ; -- <0205> a = g6
    013b : fba0 ; -- <0206> call put4x
    013c : 0031 ; -- <0206> "
    013d : fc00 ; -- <0206> "
    013e : 023d ; -- <0207> a = 61 -- putasc "="
    013f : 0000 ; -- <0207> a = a -- putasc "="
    0140 : fba0 ; -- <0207> putasc "="
    0141 : 0017 ; -- <0207> "
    0142 : fc00 ; -- <0207> "
    0143 : 4c02 ; -- <0208> m9k_addr = i
    0144 : 5006 ; -- <0209> m9k_data = g6
    0145 : 0014 ; -- <0210> a = m9k_data
    0146 : fba0 ; -- <0211> call put4x
    0147 : 0031 ; -- <0211> "
    0148 : fc00 ; -- <0211> "
    0149 : 020d ; -- <0212> a = 13 -- putasc "\r"
    014a : 0000 ; -- <0212> a = a -- putasc "\r"
    014b : fba0 ; -- <0212> putasc "\r"
    014c : 0017 ; -- <0212> "
    014d : fc00 ; -- <0212> "
    014e : 020a ; -- <0213> a = 10 -- putasc "\n"
    014f : 0000 ; -- <0213> a = a -- putasc "\n"
    0150 : fba0 ; -- <0213> putasc "\n"
    0151 : 0017 ; -- <0213> "
    0152 : fc00 ; -- <0213> "
    0153 : 0b10 ; -- <0214> i = i+j
    0154 : 0002 ; -- <0215> a = i
    0155 : 0404 ; -- <0216> b = x
    0156 : c800 ; -- <0217> nop
    0157 : e407 ; -- <0218> bn eq :loadword
    0158 : 0120 ; -- <0218> "

--patch: need code
    0159 : fc00 ; -- <0222> rtn
        
        END;
    
