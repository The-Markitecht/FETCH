
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- register file configuration

-- application-specific register aliases.





--alias_src  tg_debug_out	    [incr counter]


    0000 : e00f ; -- <0051> jmp :main
    0001 : 00d9 ; -- <0051> "


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0002 : 0601 ; -- <0005> b = 1
    0003 : c800 ; -- <0006> nop
    0004 : e002 ; -- <0007> br and0z :pick_byte_even
    0005 : 000e ; -- <0007> "
    0006 : 0350 ; -- <0008> a = a>>1
    0007 : 0404 ; -- <0009> b = x
    0008 : c800 ; -- <0010> nop
    0009 : d300 ; -- <0011> fetch a from a+b
    000a : 03b0 ; -- <0011> "
    000b : 0353 ; -- <0012> a = a>>4
    000c : 0353 ; -- <0013> a = a>>4
    000d : fc00 ; -- <0014> rtn
-- :pick_byte_even -- = 0x000e
    000e : 0350 ; -- <0016> a = a>>1
    000f : 0404 ; -- <0017> b = x
    0010 : c800 ; -- <0018> nop
    0011 : d300 ; -- <0019> fetch a from a+b
    0012 : 03b0 ; -- <0019> "
    0013 : 06ff ; -- <0020> b = 0xff
    0014 : c800 ; -- <0021> nop
    0015 : 0330 ; -- <0022> a = and
    0016 : fc00 ; -- <0023> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    0017 : 2002 ; -- <0031> push i -- func find_in_fetch
    0018 : 2003 ; -- <0031> push j -- "
    0019 : 2005 ; -- <0031> push y -- "
    001a : 203e ; -- <0031> push rtna -- "
    001b : 1400 ; -- <0032> y = a
    001c : 0e00 ; -- <0033> j = 0
    001d : c800 ; -- <0034> nop
    001e : e001 ; -- <0035> br 1z :fail
    001f : 0031 ; -- <0035> "
    0020 : 0f60 ; -- <0036> j = -1
    0021 : c800 ; -- <0037> nop
-- :again -- = 0x0022
    0022 : 0b10 ; -- <0039> i = i+j
    0023 : 0002 ; -- <0040> a = i
    0024 : fba0 ; -- <0041> call :fetch_byte
    0025 : 0002 ; -- <0041> "
    0026 : fc00 ; -- <0041> "
    0027 : 0405 ; -- <0042> b = y
    0028 : c800 ; -- <0043> nop
    0029 : e407 ; -- <0044> bn eq :again
    002a : 0022 ; -- <0044> "
-- :found -- = 0x002b
    002b : 0002 ; -- <0046> a = i
    002c : f808 ; -- <0047> pop rtna -- rtn
    002d : 1408 ; -- <0047> pop y -- "
    002e : 0c08 ; -- <0047> pop j -- "
    002f : 0808 ; -- <0047> pop i -- "
    0030 : fc00 ; -- <0047> rtn
-- :fail -- = 0x0031
    0031 : 0360 ; -- <0049> a = -1
    0032 : f808 ; -- <0050> pop rtna -- rtn
    0033 : 1408 ; -- <0050> pop y -- "
    0034 : 0c08 ; -- <0050> pop j -- "
    0035 : 0808 ; -- <0050> pop i -- "
    0036 : fc00 ; -- <0050> rtn



-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
    0037 : 2004 ; -- <0031> push x -- func putchar_atx

    0038 : 1000 ; -- <0033> x = a

-- wait for UART to be idle (not busy).
    0039 : 0202 ; -- <0036> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x003a
    003a : 0412 ; -- <0038> b = atx_ctrl
    003b : c800 ; -- <0039> nop
    003c : e402 ; -- <0040> bn and0z :pcatx_wait_for_idle
    003d : 003a ; -- <0040> "

-- push word to the UART.  its low byte is a character.
    003e : 4404 ; -- <0043> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    003f : 4a01 ; -- <0048> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    0040 : 0202 ; -- <0051> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x0041
    0041 : 0412 ; -- <0053> b = atx_ctrl
    0042 : e002 ; -- <0054> br and0z :pcatx_wait_for_busy
    0043 : 0041 ; -- <0054> "

    0044 : 4a00 ; -- <0056> atx_ctrl = 0
    0045 : 1008 ; -- <0057> pop x -- rtn
    0046 : fc00 ; -- <0057> rtn

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- wait until UART is busy, then idle.
    0047 : 0204 ; -- <0063> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0048
    0048 : 0412 ; -- <0065> b = atx_ctrl
    0049 : e002 ; -- <0066> br and0z :wait_for_busy
    004a : 0048 ; -- <0066> "
-- :wait_for_idle -- = 0x004b
    004b : 0412 ; -- <0068> b = atx_ctrl
    004c : c800 ; -- <0069> nop
    004d : e402 ; -- <0070> bn and0z :wait_for_idle
    004e : 004b ; -- <0070> "
    004f : 0011 ; -- <0071> a = atx_data
    0050 : fc00 ; -- <0072> rtn


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0051
-- "0123456789abcdef"
    0051 : 3130 ; -- <0051> 10
    0052 : 3332 ; -- <0051> 32
    0053 : 3534 ; -- <0051> 54
    0054 : 3736 ; -- <0051> 76
    0055 : 3938 ; -- <0051> 98
    0056 : 6261 ; -- <0051> ba
    0057 : 6463 ; -- <0051> dc
    0058 : 6665 ; -- <0051> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0059 : 2004 ; -- <0055> push x -- func put4x
    005a : 2006 ; -- <0055> push g6 -- "
    005b : 203e ; -- <0055> push rtna -- "
    005c : 13a0 ; -- <0056> x = :hexdigits
    005d : 0051 ; -- <0056> "

    005e : 1800 ; -- <0058> g6 = a
    005f : 07a0 ; -- <0059> b = 0xF000
    0060 : f000 ; -- <0059> "
    0061 : c800 ; -- <0060> nop
    0062 : 0330 ; -- <0061> a = and
    0063 : 0353 ; -- <0062> a = a>>4
    0064 : 0353 ; -- <0063> a = a>>4
    0065 : 0353 ; -- <0064> a = a>>4
    0066 : fba0 ; -- <0065> call fetch_byte
    0067 : 0002 ; -- <0065> "
    0068 : fc00 ; -- <0065> "
    0069 : 0000 ; -- <0066> a = a -- putchar a
    006a : fba0 ; -- <0066> putchar a
    006b : 0037 ; -- <0066> "
    006c : fc00 ; -- <0066> "

    006d : 0006 ; -- <0068> a = g6
    006e : 07a0 ; -- <0069> b = 0x0F00
    006f : 0f00 ; -- <0069> "
    0070 : c800 ; -- <0070> nop
    0071 : 0330 ; -- <0071> a = and
    0072 : 0353 ; -- <0072> a = a>>4
    0073 : 0353 ; -- <0073> a = a>>4
    0074 : fba0 ; -- <0074> call fetch_byte
    0075 : 0002 ; -- <0074> "
    0076 : fc00 ; -- <0074> "
    0077 : 0000 ; -- <0075> a = a -- putchar a
    0078 : fba0 ; -- <0075> putchar a
    0079 : 0037 ; -- <0075> "
    007a : fc00 ; -- <0075> "

    007b : 0006 ; -- <0077> a = g6
    007c : 06f0 ; -- <0078> b = 0x00F0
    007d : c800 ; -- <0079> nop
    007e : 0330 ; -- <0080> a = and
    007f : 0353 ; -- <0081> a = a>>4
    0080 : fba0 ; -- <0082> call fetch_byte
    0081 : 0002 ; -- <0082> "
    0082 : fc00 ; -- <0082> "
    0083 : 0000 ; -- <0083> a = a -- putchar a
    0084 : fba0 ; -- <0083> putchar a
    0085 : 0037 ; -- <0083> "
    0086 : fc00 ; -- <0083> "

    0087 : 0006 ; -- <0085> a = g6
    0088 : 060f ; -- <0086> b = 0x000F
    0089 : c800 ; -- <0087> nop
    008a : 0330 ; -- <0088> a = and
    008b : fba0 ; -- <0089> call fetch_byte
    008c : 0002 ; -- <0089> "
    008d : fc00 ; -- <0089> "
    008e : 0000 ; -- <0090> a = a -- putchar a
    008f : fba0 ; -- <0090> putchar a
    0090 : 0037 ; -- <0090> "
    0091 : fc00 ; -- <0090> "

    0092 : f808 ; -- <0092> pop rtna -- rtn
    0093 : 1808 ; -- <0092> pop g6 -- "
    0094 : 1008 ; -- <0092> pop x -- "
    0095 : fc00 ; -- <0092> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    0096 : 2002 ; -- <0096> push i -- func get4x
    0097 : 2003 ; -- <0096> push j -- "
    0098 : 2004 ; -- <0096> push x -- "
    0099 : 2005 ; -- <0096> push y -- "
    009a : 203e ; -- <0096> push rtna -- "
-- y = digit counter
-- j = sum
    009b : 1604 ; -- <0099> y = 4
-- :again -- = 0x009c
    009c : fba0 ; -- <0101> getchar
    009d : 0047 ; -- <0101> "
    009e : fc00 ; -- <0101> "
    009f : 2000 ; -- <0101> push a -- "
    00a0 : 0000 ; -- <0101> a = a -- "
    00a1 : fba0 ; -- <0101> "
    00a2 : 0037 ; -- <0101> "
    00a3 : fc00 ; -- <0101> "
    00a4 : 0008 ; -- <0101> pop a -- "
    00a5 : 13a0 ; -- <0102> x = :hexdigits
    00a6 : 0051 ; -- <0102> "
    00a7 : 0a10 ; -- <0103> i = 16
    00a8 : fba0 ; -- <0104> call :find_in_fetch
    00a9 : 0017 ; -- <0104> "
    00aa : fc00 ; -- <0104> "
    00ab : 0760 ; -- <0105> b = -1
    00ac : e007 ; -- <0106> br eq :fail
    00ad : 00c0 ; -- <0106> "
    00ae : 0400 ; -- <0107> b = a
    00af : 0003 ; -- <0108> a = j
    00b0 : 0352 ; -- <0109> a = a<<4
    00b1 : c800 ; -- <0110> nop
    00b2 : 0f34 ; -- <0111> j = or
    00b3 : 1360 ; -- <0112> x = -1
    00b4 : c800 ; -- <0113> nop
    00b5 : 1720 ; -- <0114> y = x+y
    00b6 : e400 ; -- <0115> bn 2z :again
    00b7 : 009c ; -- <0115> "
    00b8 : 0003 ; -- <0116> a = j
    00b9 : 0600 ; -- <0117> b = 0
    00ba : f808 ; -- <0118> pop rtna -- rtn
    00bb : 1408 ; -- <0118> pop y -- "
    00bc : 1008 ; -- <0118> pop x -- "
    00bd : 0c08 ; -- <0118> pop j -- "
    00be : 0808 ; -- <0118> pop i -- "
    00bf : fc00 ; -- <0118> rtn
-- :fail -- = 0x00c0
    00c0 : 0760 ; -- <0120> b = -1
    00c1 : f808 ; -- <0121> pop rtna -- rtn
    00c2 : 1408 ; -- <0121> pop y -- "
    00c3 : 1008 ; -- <0121> pop x -- "
    00c4 : 0c08 ; -- <0121> pop j -- "
    00c5 : 0808 ; -- <0121> pop i -- "
    00c6 : fc00 ; -- <0121> rtn

-- routine waits a number of milliseconds given in a.
    00c7 : 2004 ; -- <0002> push x -- func spinwait
    00c8 : 2005 ; -- <0002> push y -- "
--patch
--return
    00c9 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00ca
    00ca : 13a0 ; -- <0007> x = 12500
    00cb : 30d4 ; -- <0007> "
    00cc : 1760 ; -- <0008> y = -1
    00cd : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00ce
    00ce : 1320 ; -- <0011> x = x+y
    00cf : c800 ; -- <0012> nop
    00d0 : e400 ; -- <0013> bn 2z :spinwait_inner
    00d1 : 00ce ; -- <0013> "
    00d2 : 0300 ; -- <0014> a = a+b
    00d3 : c800 ; -- <0015> nop
    00d4 : e404 ; -- <0016> bn z :spinwait_outer
    00d5 : 00ca ; -- <0016> "
    00d6 : 1408 ; -- <0017> pop y -- rtn
    00d7 : 1008 ; -- <0017> pop x -- "
    00d8 : fc00 ; -- <0017> rtn



-- --------------------------------------------
-- :main -- = 0x00d9
-- put target into reset.
    00d9 : 3e02 ; -- <0061> bus_ctrl = $tg_reset_mask

-- init visor.
    00da : 3360 ; -- <0064> bp3_addr = $bp_disable
    00db : 2f60 ; -- <0065> bp2_addr = $bp_disable
    00dc : 2b60 ; -- <0066> bp1_addr = $bp_disable
    00dd : 2760 ; -- <0067> bp0_addr = $bp_disable

    00de : 0256 ; -- <0069> a = 86 -- putasc "V"
    00df : 0000 ; -- <0069> a = a -- putasc "V"
    00e0 : fba0 ; -- <0069> putasc "V"
    00e1 : 0037 ; -- <0069> "
    00e2 : fc00 ; -- <0069> "
    00e3 : 0249 ; -- <0070> a = 73 -- putasc "I"
    00e4 : 0000 ; -- <0070> a = a -- putasc "I"
    00e5 : fba0 ; -- <0070> putasc "I"
    00e6 : 0037 ; -- <0070> "
    00e7 : fc00 ; -- <0070> "
    00e8 : 0253 ; -- <0071> a = 83 -- putasc "S"
    00e9 : 0000 ; -- <0071> a = a -- putasc "S"
    00ea : fba0 ; -- <0071> putasc "S"
    00eb : 0037 ; -- <0071> "
    00ec : fc00 ; -- <0071> "
    00ed : 024f ; -- <0072> a = 79 -- putasc "O"
    00ee : 0000 ; -- <0072> a = a -- putasc "O"
    00ef : fba0 ; -- <0072> putasc "O"
    00f0 : 0037 ; -- <0072> "
    00f1 : fc00 ; -- <0072> "
    00f2 : 0252 ; -- <0073> a = 82 -- putasc "R"
    00f3 : 0000 ; -- <0073> a = a -- putasc "R"
    00f4 : fba0 ; -- <0073> putasc "R"
    00f5 : 0037 ; -- <0073> "
    00f6 : fc00 ; -- <0073> "

--call :load_program

-- step into the first target instruction.
    00f7 : 3e08 ; -- <0078> bus_ctrl = $bp_step_mask
    00f8 : fba0 ; -- <0079> call :wait_for_bp
    00f9 : 0185 ; -- <0079> "
    00fa : fc00 ; -- <0079> "

-- command prompt loop.
-- :cmd_loop -- = 0x00fb
    00fb : fba0 ; -- <0083> call :dump_target
    00fc : 024e ; -- <0083> "
    00fd : fc00 ; -- <0083> "
    00fe : 0016 ; -- <0084> a = tg_code_addr
    00ff : fba0 ; -- <0085> call :put4x
    0100 : 0059 ; -- <0085> "
    0101 : fc00 ; -- <0085> "
    0102 : 022c ; -- <0086> a = 44 -- putasc ","
    0103 : 0000 ; -- <0086> a = a -- putasc ","
    0104 : fba0 ; -- <0086> putasc ","
    0105 : 0037 ; -- <0086> "
    0106 : fc00 ; -- <0086> "
    0107 : 0015 ; -- <0087> a = exr_shadow
    0108 : fba0 ; -- <0088> call :put4x
    0109 : 0059 ; -- <0088> "
    010a : fc00 ; -- <0088> "
    010b : 0220 ; -- <0089> a = 32 -- putasc " "
    010c : 0000 ; -- <0089> a = a -- putasc " "
    010d : fba0 ; -- <0089> putasc " "
    010e : 0037 ; -- <0089> "
    010f : fc00 ; -- <0089> "
    0110 : 023e ; -- <0090> a = 62 -- putasc ">"
    0111 : 0000 ; -- <0090> a = a -- putasc ">"
    0112 : fba0 ; -- <0090> putasc ">"
    0113 : 0037 ; -- <0090> "
    0114 : fc00 ; -- <0090> "
    0115 : fba0 ; -- <0091> getchar
    0116 : 0047 ; -- <0091> "
    0117 : fc00 ; -- <0091> "
    0118 : 2000 ; -- <0091> push a -- "
    0119 : 0000 ; -- <0091> a = a -- "
    011a : fba0 ; -- <0091> "
    011b : 0037 ; -- <0091> "
    011c : fc00 ; -- <0091> "
    011d : 0008 ; -- <0091> pop a -- "

-- command = step next instruction.
    011e : 066e ; -- <0094> b = 110 -- asc b = "n"
    011f : c800 ; -- <0095> nop
    0120 : e407 ; -- <0096> bn eq :skip_step
    0121 : 0129 ; -- <0096> "
    0122 : 3e08 ; -- <0097> bus_ctrl = $bp_step_mask
    0123 : 2409 ; -- <0098> bp0_addr = bp0_addr
    0124 : fba0 ; -- <0099> call :wait_for_bp
    0125 : 0185 ; -- <0099> "
    0126 : fc00 ; -- <0099> "
    0127 : e00f ; -- <0100> jmp :cmd_loop
    0128 : 00fb ; -- <0100> "
-- :skip_step -- = 0x0129

-- command = reset target.
    0129 : 0652 ; -- <0104> b = 82 -- asc b = "R"
    012a : c800 ; -- <0105> nop
    012b : e407 ; -- <0106> bn eq :skip_reset
    012c : 0136 ; -- <0106> "
    012d : 3e02 ; -- <0107> bus_ctrl = $tg_reset_mask
    012e : c800 ; -- <0108> nop
    012f : c800 ; -- <0109> nop
    0130 : 3e08 ; -- <0110> bus_ctrl = $bp_step_mask
    0131 : fba0 ; -- <0111> call :wait_for_bp
    0132 : 0185 ; -- <0111> "
    0133 : fc00 ; -- <0111> "
    0134 : e00f ; -- <0112> jmp :cmd_loop
    0135 : 00fb ; -- <0112> "
-- :skip_reset -- = 0x0136

-- command = load program.
    0136 : 066c ; -- <0116> b = 108 -- asc b = "l"
    0137 : c800 ; -- <0117> nop
    0138 : e407 ; -- <0118> bn eq :skip_load
    0139 : 013f ; -- <0118> "
    013a : fba0 ; -- <0119> call :load_program
    013b : 01e7 ; -- <0119> "
    013c : fc00 ; -- <0119> "
    013d : e00f ; -- <0120> jmp :cmd_loop
    013e : 00fb ; -- <0120> "
-- :skip_load -- = 0x013f

-- command = run full speed.
    013f : 0672 ; -- <0124> b = 114 -- asc b = "r"
    0140 : c800 ; -- <0125> nop
    0141 : e407 ; -- <0126> bn eq :skip_run
    0142 : 0147 ; -- <0126> "
-- release target reset, to run.
    0143 : 3e00 ; -- <0128> bus_ctrl = 0
    0144 : 2409 ; -- <0129> bp0_addr = bp0_addr
    0145 : e00f ; -- <0130> jmp :cmd_loop
    0146 : 00fb ; -- <0130> "
-- :skip_run -- = 0x0147

-- command = interrupt / break target.
    0147 : 0669 ; -- <0134> b = 105 -- asc b = "i"
    0148 : c800 ; -- <0135> nop
    0149 : e407 ; -- <0136> bn eq :skip_brk
    014a : 0152 ; -- <0136> "
    014b : 3e00 ; -- <0137> bus_ctrl = 0
    014c : 3e08 ; -- <0138> bus_ctrl = $bp_step_mask
    014d : fba0 ; -- <0139> call :wait_for_bp
    014e : 0185 ; -- <0139> "
    014f : fc00 ; -- <0139> "
    0150 : e00f ; -- <0140> jmp :cmd_loop
    0151 : 00fb ; -- <0140> "
-- :skip_brk -- = 0x0152

-- command = set breakpoint.
    0152 : 0662 ; -- <0144> b = 98 -- asc b = "b"
    0153 : c800 ; -- <0145> nop
    0154 : e407 ; -- <0146> bn eq :skip_setbrk
    0155 : 015b ; -- <0146> "
    0156 : fba0 ; -- <0147> call :set_bp
    0157 : 018b ; -- <0147> "
    0158 : fc00 ; -- <0147> "
    0159 : e00f ; -- <0148> jmp :cmd_loop
    015a : 00fb ; -- <0148> "
-- :skip_setbrk -- = 0x015b

    015b : 023f ; -- <0151> a = 63 -- putasc "?"
    015c : 0000 ; -- <0151> a = a -- putasc "?"
    015d : fba0 ; -- <0151> putasc "?"
    015e : 0037 ; -- <0151> "
    015f : fc00 ; -- <0151> "
    0160 : 020d ; -- <0152> a = 13 -- puteol
    0161 : 0000 ; -- <0152> a = a -- puteol
    0162 : fba0 ; -- <0152> puteol
    0163 : 0037 ; -- <0152> "
    0164 : fc00 ; -- <0152> "
    0165 : 020a ; -- <0152> a = 10 -- puteol
    0166 : 0000 ; -- <0152> a = a -- puteol
    0167 : fba0 ; -- <0152> puteol
    0168 : 0037 ; -- <0152> "
    0169 : fc00 ; -- <0152> "
    016a : e00f ; -- <0153> jmp :cmd_loop
    016b : 00fb ; -- <0153> "

-- demonstrations ------------------------------

-- set a breakpoint, wait til it hits.
    016c : 2615 ; -- <0158> bp0_addr = 0x15
-- :main_loop -- = 0x016d
    016d : fba0 ; -- <0160> call :wait_for_bp
    016e : 0185 ; -- <0160> "
    016f : fc00 ; -- <0160> "

-- release target to run full speed.
    0170 : 3e00 ; -- <0163> bus_ctrl = 0

-- interrupt the target and single step it a few times.
    0171 : 3e08 ; -- <0166> bus_ctrl = $bp_step_mask
    0172 : fba0 ; -- <0167> call :wait_for_bp
    0173 : 0185 ; -- <0167> "
    0174 : fc00 ; -- <0167> "
    0175 : 2409 ; -- <0168> bp0_addr = bp0_addr
    0176 : fba0 ; -- <0169> call :wait_for_bp
    0177 : 0185 ; -- <0169> "
    0178 : fc00 ; -- <0169> "
    0179 : 2409 ; -- <0170> bp0_addr = bp0_addr
    017a : fba0 ; -- <0171> call :wait_for_bp
    017b : 0185 ; -- <0171> "
    017c : fc00 ; -- <0171> "
    017d : 2409 ; -- <0172> bp0_addr = bp0_addr
    017e : fba0 ; -- <0173> call :wait_for_bp
    017f : 0185 ; -- <0173> "
    0180 : fc00 ; -- <0173> "
    0181 : 3e00 ; -- <0174> bus_ctrl = 0

-- release target to pass breakpoint once.
    0182 : 2409 ; -- <0177> bp0_addr = bp0_addr

    0183 : e00f ; -- <0179> jmp :main_loop
    0184 : 016d ; -- <0179> "

    0185 : 0200 ; -- <0182> a = 0
    0186 : 0418 ; -- <0183> b = bp_status
    0187 : c800 ; -- <0184> nop
    0188 : e004 ; -- <0185> br z :wait_for_bp
    0189 : 0185 ; -- <0185> "
    018a : fc00 ; -- <0186> rtn

    018b : 2004 ; -- <0188> push x -- func set_bp
    018c : 2005 ; -- <0188> push y -- "
    018d : 203e ; -- <0188> push rtna -- "
    018e : fba0 ; -- <0189> getchar
    018f : 0047 ; -- <0189> "
    0190 : fc00 ; -- <0189> "
    0191 : 2000 ; -- <0189> push a -- "
    0192 : 0000 ; -- <0189> a = a -- "
    0193 : fba0 ; -- <0189> "
    0194 : 0037 ; -- <0189> "
    0195 : fc00 ; -- <0189> "
    0196 : 0008 ; -- <0189> pop a -- "
    0197 : 1000 ; -- <0190> x = a
    0198 : fba0 ; -- <0191> getchar
    0199 : 0047 ; -- <0191> "
    019a : fc00 ; -- <0191> "
    019b : 2000 ; -- <0191> push a -- "
    019c : 0000 ; -- <0191> a = a -- "
    019d : fba0 ; -- <0191> "
    019e : 0037 ; -- <0191> "
    019f : fc00 ; -- <0191> "
    01a0 : 0008 ; -- <0191> pop a -- "
    01a1 : 063d ; -- <0192> b = 61 -- asc b = "="
    01a2 : c800 ; -- <0193> nop
    01a3 : e407 ; -- <0194> bn eq :fail
    01a4 : 01d4 ; -- <0194> "
    01a5 : fba0 ; -- <0195> call :get4x
    01a6 : 0096 ; -- <0195> "
    01a7 : fc00 ; -- <0195> "
    01a8 : 1400 ; -- <0196> y = a
    01a9 : 0200 ; -- <0197> a = 0
    01aa : c800 ; -- <0198> nop
    01ab : e407 ; -- <0199> bn eq :fail
    01ac : 01d4 ; -- <0199> "
    01ad : 0004 ; -- <0200> a = x
    01ae : 0600 ; -- <0201> b = 0
    01af : c800 ; -- <0202> nop
    01b0 : e007 ; -- <0203> br eq :b0
    01b1 : 01c0 ; -- <0203> "
    01b2 : 0601 ; -- <0204> b = 1
    01b3 : c800 ; -- <0205> nop
    01b4 : e007 ; -- <0206> br eq :b1
    01b5 : 01c5 ; -- <0206> "
    01b6 : 0602 ; -- <0207> b = 2
    01b7 : c800 ; -- <0208> nop
    01b8 : e007 ; -- <0209> br eq :b2
    01b9 : 01ca ; -- <0209> "
    01ba : 0603 ; -- <0210> b = 3
    01bb : c800 ; -- <0211> nop
    01bc : e007 ; -- <0212> br eq :b3
    01bd : 01cf ; -- <0212> "
    01be : e00f ; -- <0213> jmp :fail
    01bf : 01d4 ; -- <0213> "
-- :b0 -- = 0x01c0
    01c0 : 2405 ; -- <0215> bp0_addr = y
    01c1 : f808 ; -- <0216> pop rtna -- rtn
    01c2 : 1408 ; -- <0216> pop y -- "
    01c3 : 1008 ; -- <0216> pop x -- "
    01c4 : fc00 ; -- <0216> rtn
-- :b1 -- = 0x01c5
    01c5 : 2805 ; -- <0218> bp1_addr = y
    01c6 : f808 ; -- <0219> pop rtna -- rtn
    01c7 : 1408 ; -- <0219> pop y -- "
    01c8 : 1008 ; -- <0219> pop x -- "
    01c9 : fc00 ; -- <0219> rtn
-- :b2 -- = 0x01ca
    01ca : 2c05 ; -- <0221> bp2_addr = y
    01cb : f808 ; -- <0222> pop rtna -- rtn
    01cc : 1408 ; -- <0222> pop y -- "
    01cd : 1008 ; -- <0222> pop x -- "
    01ce : fc00 ; -- <0222> rtn
-- :b3 -- = 0x01cf
    01cf : 3005 ; -- <0224> bp3_addr = y
    01d0 : f808 ; -- <0225> pop rtna -- rtn
    01d1 : 1408 ; -- <0225> pop y -- "
    01d2 : 1008 ; -- <0225> pop x -- "
    01d3 : fc00 ; -- <0225> rtn
-- :fail -- = 0x01d4
    01d4 : 023f ; -- <0227> a = 63 -- putasc "?"
    01d5 : 0000 ; -- <0227> a = a -- putasc "?"
    01d6 : fba0 ; -- <0227> putasc "?"
    01d7 : 0037 ; -- <0227> "
    01d8 : fc00 ; -- <0227> "
    01d9 : 020d ; -- <0228> a = 13 -- puteol
    01da : 0000 ; -- <0228> a = a -- puteol
    01db : fba0 ; -- <0228> puteol
    01dc : 0037 ; -- <0228> "
    01dd : fc00 ; -- <0228> "
    01de : 020a ; -- <0228> a = 10 -- puteol
    01df : 0000 ; -- <0228> a = a -- puteol
    01e0 : fba0 ; -- <0228> puteol
    01e1 : 0037 ; -- <0228> "
    01e2 : fc00 ; -- <0228> "
    01e3 : f808 ; -- <0229> pop rtna -- rtn
    01e4 : 1408 ; -- <0229> pop y -- "
    01e5 : 1008 ; -- <0229> pop x -- "
    01e6 : fc00 ; -- <0229> rtn

    01e7 : 2002 ; -- <0231> push i -- func load_program
    01e8 : 2003 ; -- <0231> push j -- "
    01e9 : 2004 ; -- <0231> push x -- "
    01ea : 2006 ; -- <0231> push g6 -- "
    01eb : 203e ; -- <0231> push rtna -- "
-- load target program from UART.
-- length, little-endian.  memorize in x.
    01ec : 024c ; -- <0234> a = 76 -- putasc L
    01ed : 0000 ; -- <0234> a = a -- putasc L
    01ee : fba0 ; -- <0234> putasc L
    01ef : 0037 ; -- <0234> "
    01f0 : fc00 ; -- <0234> "
    01f1 : fba0 ; -- <0235> get16 x
    01f2 : 0047 ; -- <0235> "
    01f3 : fc00 ; -- <0235> "
    01f4 : 2000 ; -- <0235> push a -- "
    01f5 : fba0 ; -- <0235> "
    01f6 : 0047 ; -- <0235> "
    01f7 : fc00 ; -- <0235> "
    01f8 : 0352 ; -- <0235> "
    01f9 : 0352 ; -- <0235> "
    01fa : 0408 ; -- <0235> pop b -- "
    01fb : c800 ; -- <0235> "
    01fc : 1334 ; -- <0235> "
    01fd : 0004 ; -- <0236> a = x
    01fe : fba0 ; -- <0237> call put4x
    01ff : 0059 ; -- <0237> "
    0200 : fc00 ; -- <0237> "
-- put target into reset again, in case this is a target warm boot.
    0201 : 3e02 ; -- <0239> bus_ctrl = $tg_reset_mask
-- load opcodes.  count up address in i.
    0202 : 0a00 ; -- <0241> i = 0
    0203 : 0e01 ; -- <0242> j = 1
-- :loadword -- = 0x0204
    0204 : 0241 ; -- <0244> a = 65 -- putasc A
    0205 : 0000 ; -- <0244> a = a -- putasc A
    0206 : fba0 ; -- <0244> putasc A
    0207 : 0037 ; -- <0244> "
    0208 : fc00 ; -- <0244> "
    0209 : 0002 ; -- <0245> a = i
    020a : fba0 ; -- <0246> call put4x
    020b : 0059 ; -- <0246> "
    020c : fc00 ; -- <0246> "
    020d : 023d ; -- <0247> a = 61 -- putasc "="
    020e : 0000 ; -- <0247> a = a -- putasc "="
    020f : fba0 ; -- <0247> putasc "="
    0210 : 0037 ; -- <0247> "
    0211 : fc00 ; -- <0247> "
    0212 : fba0 ; -- <0248> get16 g6
    0213 : 0047 ; -- <0248> "
    0214 : fc00 ; -- <0248> "
    0215 : 2000 ; -- <0248> push a -- "
    0216 : fba0 ; -- <0248> "
    0217 : 0047 ; -- <0248> "
    0218 : fc00 ; -- <0248> "
    0219 : 0352 ; -- <0248> "
    021a : 0352 ; -- <0248> "
    021b : 0408 ; -- <0248> pop b -- "
    021c : c800 ; -- <0248> "
    021d : 1b34 ; -- <0248> "
    021e : 0006 ; -- <0249> a = g6
    021f : fba0 ; -- <0250> call put4x
    0220 : 0059 ; -- <0250> "
    0221 : fc00 ; -- <0250> "
    0222 : 023d ; -- <0251> a = 61 -- putasc "="
    0223 : 0000 ; -- <0251> a = a -- putasc "="
    0224 : fba0 ; -- <0251> putasc "="
    0225 : 0037 ; -- <0251> "
    0226 : fc00 ; -- <0251> "
    0227 : 4c02 ; -- <0252> m9k_addr = i
    0228 : 5006 ; -- <0253> m9k_data = g6
    0229 : 0014 ; -- <0254> a = m9k_data
    022a : fba0 ; -- <0255> call put4x
    022b : 0059 ; -- <0255> "
    022c : fc00 ; -- <0255> "
    022d : 020d ; -- <0256> a = 13 -- puteol
    022e : 0000 ; -- <0256> a = a -- puteol
    022f : fba0 ; -- <0256> puteol
    0230 : 0037 ; -- <0256> "
    0231 : fc00 ; -- <0256> "
    0232 : 020a ; -- <0256> a = 10 -- puteol
    0233 : 0000 ; -- <0256> a = a -- puteol
    0234 : fba0 ; -- <0256> puteol
    0235 : 0037 ; -- <0256> "
    0236 : fc00 ; -- <0256> "
    0237 : 0b10 ; -- <0257> i = i+j
    0238 : 0002 ; -- <0258> a = i
    0239 : 0404 ; -- <0259> b = x
    023a : c800 ; -- <0260> nop
    023b : e407 ; -- <0261> bn eq :loadword
    023c : 0204 ; -- <0261> "

-- observe a register.  return its value in peek_data.
-- pass its register address in a.
    023d : 07a0 ; -- <0266> b = 0x3ff
    023e : 03ff ; -- <0266> "
    023f : c800 ; -- <0267> nop
    0240 : 0330 ; -- <0268> a = and
-- debug_peek_reg = 31 << 10
    0241 : 07a0 ; -- <0270> b = 0x7c00
    0242 : 7c00 ; -- <0270> "
    0243 : c800 ; -- <0271> nop
    0244 : 3734 ; -- <0272> force_opcode = or
    0245 : 3e04 ; -- <0273> bus_ctrl = $divert_code_bus_mask
    0246 : 4201 ; -- <0274> tg_force = $hold_state_mask
    0247 : 4203 ; -- <0275> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0248 : 4205 ; -- <0276> tg_force = ($hold_state_mask | $force_exec_mask)
    0249 : 4201 ; -- <0277> tg_force = $hold_state_mask
-- target's register value is now in peek_data.
-- refill target exr so it can resume seamlessly.
    024a : 3415 ; -- <0280> force_opcode = exr_shadow
    024b : 4203 ; -- <0281> tg_force = ($hold_state_mask | $force_load_exr_mask)
    024c : 4200 ; -- <0282> tg_force = 0
    024d : fc00 ; -- <0283> rtn

-- show target status display.
    024e : 2002 ; -- <0286> push i -- func dump_target
    024f : 2003 ; -- <0286> push j -- "
    0250 : 2004 ; -- <0286> push x -- "
    0251 : 2005 ; -- <0286> push y -- "
    0252 : 203e ; -- <0286> push rtna -- "
    0253 : 020d ; -- <0287> a = 13 -- puteol
    0254 : 0000 ; -- <0287> a = a -- puteol
    0255 : fba0 ; -- <0287> puteol
    0256 : 0037 ; -- <0287> "
    0257 : fc00 ; -- <0287> "
    0258 : 020a ; -- <0287> a = 10 -- puteol
    0259 : 0000 ; -- <0287> a = a -- puteol
    025a : fba0 ; -- <0287> puteol
    025b : 0037 ; -- <0287> "
    025c : fc00 ; -- <0287> "
    025d : 0a00 ; -- <0288> i = 0
-- :next_reg -- = 0x025e
-- fetch register name from table in target program.
    025e : 1200 ; -- <0291> x = 0
    025f : 1601 ; -- <0292> y = 1
-- :next_chars -- = 0x0260
    0260 : 0002 ; -- <0294> a = i
    0261 : 0351 ; -- <0295> a = a<<1
    0262 : 0351 ; -- <0296> a = a<<1
    0263 : 0603 ; -- <0297> b = 3
    0264 : c800 ; -- <0298> nop
    0265 : 0300 ; -- <0299> a = a+b
    0266 : 0404 ; -- <0300> b = x
    0267 : c800 ; -- <0301> nop
    0268 : 4f00 ; -- <0302> m9k_addr = a+b
    0269 : 0014 ; -- <0303> a = m9k_data -- putchar m9k_data
    026a : fba0 ; -- <0303> putchar m9k_data
    026b : 0037 ; -- <0303> "
    026c : fc00 ; -- <0303> "
    026d : 0014 ; -- <0304> a = m9k_data
    026e : 0353 ; -- <0305> a = a>>4
    026f : 0353 ; -- <0306> a = a>>4
    0270 : 0000 ; -- <0307> a = a -- putchar a
    0271 : fba0 ; -- <0307> putchar a
    0272 : 0037 ; -- <0307> "
    0273 : fc00 ; -- <0307> "
    0274 : 1320 ; -- <0308> x = x+y
    0275 : 0004 ; -- <0309> a = x
    0276 : 0604 ; -- <0310> b = 4
    0277 : c800 ; -- <0311> nop
    0278 : e407 ; -- <0312> bn eq :next_chars
    0279 : 0260 ; -- <0312> "
    027a : 023d ; -- <0313> a = 61 -- putasc "="
    027b : 0000 ; -- <0313> a = a -- putasc "="
    027c : fba0 ; -- <0313> putasc "="
    027d : 0037 ; -- <0313> "
    027e : fc00 ; -- <0313> "
    027f : 0002 ; -- <0314> a = i
    0280 : fba0 ; -- <0315> call :peek
    0281 : 023d ; -- <0315> "
    0282 : fc00 ; -- <0315> "
    0283 : 0017 ; -- <0316> a = peek_data
    0284 : fba0 ; -- <0317> call :put4x
    0285 : 0059 ; -- <0317> "
    0286 : fc00 ; -- <0317> "
    0287 : 0220 ; -- <0318> a = 32 -- putasc " "
    0288 : 0000 ; -- <0318> a = a -- putasc " "
    0289 : fba0 ; -- <0318> putasc " "
    028a : 0037 ; -- <0318> "
    028b : fc00 ; -- <0318> "
    028c : 0e01 ; -- <0319> j = 1
    028d : c800 ; -- <0320> nop
    028e : 0b10 ; -- <0321> i = i+j
-- loop up to the number of registers in the target program's register name table.
    028f : 4e02 ; -- <0323> m9k_addr = 2
    0290 : 0414 ; -- <0324> b = m9k_data
    0291 : 0002 ; -- <0325> a = i
    0292 : c800 ; -- <0326> nop
    0293 : e407 ; -- <0327> bn eq :next_reg
    0294 : 025e ; -- <0327> "
    0295 : 020d ; -- <0328> a = 13 -- puteol
    0296 : 0000 ; -- <0328> a = a -- puteol
    0297 : fba0 ; -- <0328> puteol
    0298 : 0037 ; -- <0328> "
    0299 : fc00 ; -- <0328> "
    029a : 020a ; -- <0328> a = 10 -- puteol
    029b : 0000 ; -- <0328> a = a -- puteol
    029c : fba0 ; -- <0328> puteol
    029d : 0037 ; -- <0328> "
    029e : fc00 ; -- <0328> "
    029f : f808 ; -- <0329> pop rtna -- rtn
    02a0 : 1408 ; -- <0329> pop y -- "
    02a1 : 1008 ; -- <0329> pop x -- "
    02a2 : 0c08 ; -- <0329> pop j -- "
    02a3 : 0808 ; -- <0329> pop i -- "
    02a4 : fc00 ; -- <0329> rtn
        
        END;
    
