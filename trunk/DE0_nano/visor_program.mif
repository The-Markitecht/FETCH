
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- register file configuration

-- application-specific register aliases.





--alias_src  tg_debug_out	    [incr counter]


    0000 : e00f ; -- <0051> jmp :main
    0001 : 00d9 ; -- <0051> "


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0002 : 0601 ; -- <0005> b = 1
    0003 : c800 ; -- <0006> nop
    0004 : e002 ; -- <0007> br and0z :pick_byte_even
    0005 : 000e ; -- <0007> "
    0006 : 0350 ; -- <0008> a = a>>1
    0007 : 0404 ; -- <0009> b = x
    0008 : c800 ; -- <0010> nop
    0009 : d300 ; -- <0011> fetch a from a+b
    000a : 03b0 ; -- <0011> "
    000b : 0353 ; -- <0012> a = a>>4
    000c : 0353 ; -- <0013> a = a>>4
    000d : fc00 ; -- <0014> rtn
-- :pick_byte_even -- = 0x000e
    000e : 0350 ; -- <0016> a = a>>1
    000f : 0404 ; -- <0017> b = x
    0010 : c800 ; -- <0018> nop
    0011 : d300 ; -- <0019> fetch a from a+b
    0012 : 03b0 ; -- <0019> "
    0013 : 06ff ; -- <0020> b = 0xff
    0014 : c800 ; -- <0021> nop
    0015 : 0330 ; -- <0022> a = and
    0016 : fc00 ; -- <0023> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    0017 : 2002 ; -- <0031> push i -- func find_in_fetch
    0018 : 2003 ; -- <0031> push j -- "
    0019 : 2005 ; -- <0031> push y -- "
    001a : 203e ; -- <0031> push rtna -- "
    001b : 1400 ; -- <0032> y = a
    001c : 0e00 ; -- <0033> j = 0
    001d : c800 ; -- <0034> nop
    001e : e001 ; -- <0035> br 1z :fail
    001f : 0031 ; -- <0035> "
    0020 : 0f60 ; -- <0036> j = -1
    0021 : c800 ; -- <0037> nop
-- :again -- = 0x0022
    0022 : 0b10 ; -- <0039> i = i+j
    0023 : 0002 ; -- <0040> a = i
    0024 : fba0 ; -- <0041> call :fetch_byte
    0025 : 0002 ; -- <0041> "
    0026 : fc00 ; -- <0041> "
    0027 : 0405 ; -- <0042> b = y
    0028 : c800 ; -- <0043> nop
    0029 : e407 ; -- <0044> bn eq :again
    002a : 0022 ; -- <0044> "
-- :found -- = 0x002b
    002b : 0002 ; -- <0046> a = i
    002c : f808 ; -- <0047> pop rtna -- rtn
    002d : 1408 ; -- <0047> pop y -- "
    002e : 0c08 ; -- <0047> pop j -- "
    002f : 0808 ; -- <0047> pop i -- "
    0030 : fc00 ; -- <0047> rtn
-- :fail -- = 0x0031
    0031 : 0360 ; -- <0049> a = -1
    0032 : f808 ; -- <0050> pop rtna -- rtn
    0033 : 1408 ; -- <0050> pop y -- "
    0034 : 0c08 ; -- <0050> pop j -- "
    0035 : 0808 ; -- <0050> pop i -- "
    0036 : fc00 ; -- <0050> rtn



-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
    0037 : 2004 ; -- <0031> push x -- func putchar_atx

    0038 : 1000 ; -- <0033> x = a

-- wait for UART to be idle (not busy).
    0039 : 0202 ; -- <0036> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x003a
    003a : 0412 ; -- <0038> b = atx_ctrl
    003b : c800 ; -- <0039> nop
    003c : e402 ; -- <0040> bn and0z :pcatx_wait_for_idle
    003d : 003a ; -- <0040> "

-- push word to the UART.  its low byte is a character.
    003e : 4404 ; -- <0043> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    003f : 4a01 ; -- <0048> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    0040 : 0202 ; -- <0051> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x0041
    0041 : 0412 ; -- <0053> b = atx_ctrl
    0042 : e002 ; -- <0054> br and0z :pcatx_wait_for_busy
    0043 : 0041 ; -- <0054> "

    0044 : 4a00 ; -- <0056> atx_ctrl = 0
    0045 : 1008 ; -- <0057> pop x -- rtn
    0046 : fc00 ; -- <0057> rtn

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- wait until UART is busy, then idle.
    0047 : 0204 ; -- <0063> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0048
    0048 : 0412 ; -- <0065> b = atx_ctrl
    0049 : e002 ; -- <0066> br and0z :wait_for_busy
    004a : 0048 ; -- <0066> "
-- :wait_for_idle -- = 0x004b
    004b : 0412 ; -- <0068> b = atx_ctrl
    004c : c800 ; -- <0069> nop
    004d : e402 ; -- <0070> bn and0z :wait_for_idle
    004e : 004b ; -- <0070> "
    004f : 0011 ; -- <0071> a = atx_data
    0050 : fc00 ; -- <0072> rtn


-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0051
-- "0123456789abcdef"
    0051 : 3130 ; -- <0051> 10
    0052 : 3332 ; -- <0051> 32
    0053 : 3534 ; -- <0051> 54
    0054 : 3736 ; -- <0051> 76
    0055 : 3938 ; -- <0051> 98
    0056 : 6261 ; -- <0051> ba
    0057 : 6463 ; -- <0051> dc
    0058 : 6665 ; -- <0051> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0059 : 2004 ; -- <0055> push x -- func put4x
    005a : 2006 ; -- <0055> push g6 -- "
    005b : 203e ; -- <0055> push rtna -- "
    005c : 13a0 ; -- <0056> x = :hexdigits
    005d : 0051 ; -- <0056> "

    005e : 1800 ; -- <0058> g6 = a
    005f : 07a0 ; -- <0059> b = 0xF000
    0060 : f000 ; -- <0059> "
    0061 : c800 ; -- <0060> nop
    0062 : 0330 ; -- <0061> a = and
    0063 : 0353 ; -- <0062> a = a>>4
    0064 : 0353 ; -- <0063> a = a>>4
    0065 : 0353 ; -- <0064> a = a>>4
    0066 : fba0 ; -- <0065> call fetch_byte
    0067 : 0002 ; -- <0065> "
    0068 : fc00 ; -- <0065> "
    0069 : 0000 ; -- <0066> a = a -- putchar a
    006a : fba0 ; -- <0066> putchar a
    006b : 0037 ; -- <0066> "
    006c : fc00 ; -- <0066> "

    006d : 0006 ; -- <0068> a = g6
    006e : 07a0 ; -- <0069> b = 0x0F00
    006f : 0f00 ; -- <0069> "
    0070 : c800 ; -- <0070> nop
    0071 : 0330 ; -- <0071> a = and
    0072 : 0353 ; -- <0072> a = a>>4
    0073 : 0353 ; -- <0073> a = a>>4
    0074 : fba0 ; -- <0074> call fetch_byte
    0075 : 0002 ; -- <0074> "
    0076 : fc00 ; -- <0074> "
    0077 : 0000 ; -- <0075> a = a -- putchar a
    0078 : fba0 ; -- <0075> putchar a
    0079 : 0037 ; -- <0075> "
    007a : fc00 ; -- <0075> "

    007b : 0006 ; -- <0077> a = g6
    007c : 06f0 ; -- <0078> b = 0x00F0
    007d : c800 ; -- <0079> nop
    007e : 0330 ; -- <0080> a = and
    007f : 0353 ; -- <0081> a = a>>4
    0080 : fba0 ; -- <0082> call fetch_byte
    0081 : 0002 ; -- <0082> "
    0082 : fc00 ; -- <0082> "
    0083 : 0000 ; -- <0083> a = a -- putchar a
    0084 : fba0 ; -- <0083> putchar a
    0085 : 0037 ; -- <0083> "
    0086 : fc00 ; -- <0083> "

    0087 : 0006 ; -- <0085> a = g6
    0088 : 060f ; -- <0086> b = 0x000F
    0089 : c800 ; -- <0087> nop
    008a : 0330 ; -- <0088> a = and
    008b : fba0 ; -- <0089> call fetch_byte
    008c : 0002 ; -- <0089> "
    008d : fc00 ; -- <0089> "
    008e : 0000 ; -- <0090> a = a -- putchar a
    008f : fba0 ; -- <0090> putchar a
    0090 : 0037 ; -- <0090> "
    0091 : fc00 ; -- <0090> "

    0092 : f808 ; -- <0092> pop rtna -- rtn
    0093 : 1808 ; -- <0092> pop g6 -- "
    0094 : 1008 ; -- <0092> pop x -- "
    0095 : fc00 ; -- <0092> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    0096 : 2002 ; -- <0096> push i -- func get4x
    0097 : 2003 ; -- <0096> push j -- "
    0098 : 2004 ; -- <0096> push x -- "
    0099 : 2005 ; -- <0096> push y -- "
    009a : 203e ; -- <0096> push rtna -- "
-- y = digit counter
-- j = sum
    009b : 1604 ; -- <0099> y = 4
-- :again -- = 0x009c
    009c : fba0 ; -- <0101> getchar
    009d : 0047 ; -- <0101> "
    009e : fc00 ; -- <0101> "
    009f : 2000 ; -- <0101> push a -- "
    00a0 : 0000 ; -- <0101> a = a -- "
    00a1 : fba0 ; -- <0101> "
    00a2 : 0037 ; -- <0101> "
    00a3 : fc00 ; -- <0101> "
    00a4 : 0008 ; -- <0101> pop a -- "
    00a5 : 13a0 ; -- <0102> x = :hexdigits
    00a6 : 0051 ; -- <0102> "
    00a7 : 0a10 ; -- <0103> i = 16
    00a8 : fba0 ; -- <0104> call :find_in_fetch
    00a9 : 0017 ; -- <0104> "
    00aa : fc00 ; -- <0104> "
    00ab : 0760 ; -- <0105> b = -1
    00ac : e007 ; -- <0106> br eq :fail
    00ad : 00c0 ; -- <0106> "
    00ae : 0400 ; -- <0107> b = a
    00af : 0003 ; -- <0108> a = j
    00b0 : 0352 ; -- <0109> a = a<<4
    00b1 : c800 ; -- <0110> nop
    00b2 : 0f34 ; -- <0111> j = or
    00b3 : 1360 ; -- <0112> x = -1
    00b4 : c800 ; -- <0113> nop
    00b5 : 1720 ; -- <0114> y = x+y
    00b6 : e400 ; -- <0115> bn 2z :again
    00b7 : 009c ; -- <0115> "
    00b8 : 0003 ; -- <0116> a = j
    00b9 : 0600 ; -- <0117> b = 0
    00ba : f808 ; -- <0118> pop rtna -- rtn
    00bb : 1408 ; -- <0118> pop y -- "
    00bc : 1008 ; -- <0118> pop x -- "
    00bd : 0c08 ; -- <0118> pop j -- "
    00be : 0808 ; -- <0118> pop i -- "
    00bf : fc00 ; -- <0118> rtn
-- :fail -- = 0x00c0
    00c0 : 0760 ; -- <0120> b = -1
    00c1 : f808 ; -- <0121> pop rtna -- rtn
    00c2 : 1408 ; -- <0121> pop y -- "
    00c3 : 1008 ; -- <0121> pop x -- "
    00c4 : 0c08 ; -- <0121> pop j -- "
    00c5 : 0808 ; -- <0121> pop i -- "
    00c6 : fc00 ; -- <0121> rtn

-- routine waits a number of milliseconds given in a.
    00c7 : 2004 ; -- <0002> push x -- func spinwait
    00c8 : 2005 ; -- <0002> push y -- "
--patch
--return
    00c9 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00ca
    00ca : 13a0 ; -- <0007> x = 12500
    00cb : 30d4 ; -- <0007> "
    00cc : 1760 ; -- <0008> y = -1
    00cd : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00ce
    00ce : 1320 ; -- <0011> x = x+y
    00cf : c800 ; -- <0012> nop
    00d0 : e400 ; -- <0013> bn 2z :spinwait_inner
    00d1 : 00ce ; -- <0013> "
    00d2 : 0300 ; -- <0014> a = a+b
    00d3 : c800 ; -- <0015> nop
    00d4 : e404 ; -- <0016> bn z :spinwait_outer
    00d5 : 00ca ; -- <0016> "
    00d6 : 1408 ; -- <0017> pop y -- rtn
    00d7 : 1008 ; -- <0017> pop x -- "
    00d8 : fc00 ; -- <0017> rtn



-- --------------------------------------------
-- :main -- = 0x00d9
-- put target into reset.
    00d9 : 3e02 ; -- <0061> bus_ctrl = $tg_reset_mask

-- init visor.
    00da : 3360 ; -- <0064> bp3_addr = $bp_disable
    00db : 2f60 ; -- <0065> bp2_addr = $bp_disable
    00dc : 2b60 ; -- <0066> bp1_addr = $bp_disable
    00dd : 2760 ; -- <0067> bp0_addr = $bp_disable

    00de : 0256 ; -- <0069> a = 86 -- putasc "V"
    00df : 0000 ; -- <0069> a = a -- putasc "V"
    00e0 : fba0 ; -- <0069> putasc "V"
    00e1 : 0037 ; -- <0069> "
    00e2 : fc00 ; -- <0069> "
    00e3 : 0249 ; -- <0070> a = 73 -- putasc "I"
    00e4 : 0000 ; -- <0070> a = a -- putasc "I"
    00e5 : fba0 ; -- <0070> putasc "I"
    00e6 : 0037 ; -- <0070> "
    00e7 : fc00 ; -- <0070> "
    00e8 : 0253 ; -- <0071> a = 83 -- putasc "S"
    00e9 : 0000 ; -- <0071> a = a -- putasc "S"
    00ea : fba0 ; -- <0071> putasc "S"
    00eb : 0037 ; -- <0071> "
    00ec : fc00 ; -- <0071> "
    00ed : 024f ; -- <0072> a = 79 -- putasc "O"
    00ee : 0000 ; -- <0072> a = a -- putasc "O"
    00ef : fba0 ; -- <0072> putasc "O"
    00f0 : 0037 ; -- <0072> "
    00f1 : fc00 ; -- <0072> "
    00f2 : 0252 ; -- <0073> a = 82 -- putasc "R"
    00f3 : 0000 ; -- <0073> a = a -- putasc "R"
    00f4 : fba0 ; -- <0073> putasc "R"
    00f5 : 0037 ; -- <0073> "
    00f6 : fc00 ; -- <0073> "

--call :load_program

-- step into the first target instruction.
    00f7 : 3e08 ; -- <0078> bus_ctrl = $bp_step_mask
    00f8 : fba0 ; -- <0079> call :wait_for_bp
    00f9 : 0190 ; -- <0079> "
    00fa : fc00 ; -- <0079> "

-- :runagain
-- -- release target reset, to run.
-- bus_ctrl = 0
-- bp0_addr = bp0_addr
-- a = 1000
-- call :spinwait
-- bus_ctrl = $bp_step_mask
-- call :wait_for_bp
-- call :dump_target
-- a = tg_code_addr
-- call :put4x
-- putasc ","
-- a = exr_shadow
-- call :put4x
-- putasc " "
-- putasc ">"
-- getchar
-- a = 1000
-- call :spinwait
-- jmp :runagain

-- command prompt loop.
-- :cmd_loop -- = 0x00fb
    00fb : 000f ; -- <0104> a = bus_ctrl
    00fc : 0600 ; -- <0105> b = 0
    00fd : c800 ; -- <0106> nop
    00fe : e007 ; -- <0107> br eq :nodump
    00ff : 0112 ; -- <0107> "
    0100 : fba0 ; -- <0108> call :dump_target
    0101 : 025f ; -- <0108> "
    0102 : fc00 ; -- <0108> "
    0103 : 0016 ; -- <0109> a = tg_code_addr
    0104 : fba0 ; -- <0110> call :put4x
    0105 : 0059 ; -- <0110> "
    0106 : fc00 ; -- <0110> "
    0107 : 022c ; -- <0111> a = 44 -- putasc ","
    0108 : 0000 ; -- <0111> a = a -- putasc ","
    0109 : fba0 ; -- <0111> putasc ","
    010a : 0037 ; -- <0111> "
    010b : fc00 ; -- <0111> "
    010c : 0015 ; -- <0112> a = exr_shadow
    010d : fba0 ; -- <0113> call :put4x
    010e : 0059 ; -- <0113> "
    010f : fc00 ; -- <0113> "
    0110 : e00f ; -- <0114> jmp :prompt_done
    0111 : 0121 ; -- <0114> "
-- :nodump -- = 0x0112
    0112 : 0252 ; -- <0116> a = 82 -- putasc "R"
    0113 : 0000 ; -- <0116> a = a -- putasc "R"
    0114 : fba0 ; -- <0116> putasc "R"
    0115 : 0037 ; -- <0116> "
    0116 : fc00 ; -- <0116> "
    0117 : 0255 ; -- <0117> a = 85 -- putasc "U"
    0118 : 0000 ; -- <0117> a = a -- putasc "U"
    0119 : fba0 ; -- <0117> putasc "U"
    011a : 0037 ; -- <0117> "
    011b : fc00 ; -- <0117> "
    011c : 024e ; -- <0118> a = 78 -- putasc "N"
    011d : 0000 ; -- <0118> a = a -- putasc "N"
    011e : fba0 ; -- <0118> putasc "N"
    011f : 0037 ; -- <0118> "
    0120 : fc00 ; -- <0118> "
-- :prompt_done -- = 0x0121
    0121 : 0220 ; -- <0120> a = 32 -- putasc " "
    0122 : 0000 ; -- <0120> a = a -- putasc " "
    0123 : fba0 ; -- <0120> putasc " "
    0124 : 0037 ; -- <0120> "
    0125 : fc00 ; -- <0120> "
    0126 : 023e ; -- <0121> a = 62 -- putasc ">"
    0127 : 0000 ; -- <0121> a = a -- putasc ">"
    0128 : fba0 ; -- <0121> putasc ">"
    0129 : 0037 ; -- <0121> "
    012a : fc00 ; -- <0121> "
    012b : fba0 ; -- <0122> getchar
    012c : 0047 ; -- <0122> "
    012d : fc00 ; -- <0122> "
    012e : 2000 ; -- <0122> push a -- "
    012f : 0000 ; -- <0122> a = a -- "
    0130 : fba0 ; -- <0122> "
    0131 : 0037 ; -- <0122> "
    0132 : fc00 ; -- <0122> "
    0133 : 0008 ; -- <0122> pop a -- "

-- command = step next instruction.
    0134 : 066e ; -- <0125> b = 110 -- asc b = "n"
    0135 : c800 ; -- <0126> nop
    0136 : e407 ; -- <0127> bn eq :skip_step
    0137 : 013f ; -- <0127> "
    0138 : 3e08 ; -- <0128> bus_ctrl = $bp_step_mask
    0139 : 2409 ; -- <0129> bp0_addr = bp0_addr
    013a : fba0 ; -- <0130> call :wait_for_bp
    013b : 0190 ; -- <0130> "
    013c : fc00 ; -- <0130> "
    013d : e00f ; -- <0131> jmp :cmd_loop
    013e : 00fb ; -- <0131> "
-- :skip_step -- = 0x013f

-- command = reset target.
    013f : 0652 ; -- <0135> b = 82 -- asc b = "R"
    0140 : c800 ; -- <0136> nop
    0141 : e407 ; -- <0137> bn eq :skip_reset
    0142 : 014c ; -- <0137> "
    0143 : 3e02 ; -- <0138> bus_ctrl = $tg_reset_mask
    0144 : c800 ; -- <0139> nop
    0145 : c800 ; -- <0140> nop
    0146 : 3e08 ; -- <0141> bus_ctrl = $bp_step_mask
    0147 : fba0 ; -- <0142> call :wait_for_bp
    0148 : 0190 ; -- <0142> "
    0149 : fc00 ; -- <0142> "
    014a : e00f ; -- <0143> jmp :cmd_loop
    014b : 00fb ; -- <0143> "
-- :skip_reset -- = 0x014c

-- command = load program.
    014c : 066c ; -- <0147> b = 108 -- asc b = "l"
    014d : c800 ; -- <0148> nop
    014e : e407 ; -- <0149> bn eq :skip_load
    014f : 0155 ; -- <0149> "
    0150 : fba0 ; -- <0150> call :load_program
    0151 : 01f2 ; -- <0150> "
    0152 : fc00 ; -- <0150> "
    0153 : e00f ; -- <0151> jmp :cmd_loop
    0154 : 00fb ; -- <0151> "
-- :skip_load -- = 0x0155

-- command = run full speed.
    0155 : 0672 ; -- <0155> b = 114 -- asc b = "r"
    0156 : c800 ; -- <0156> nop
    0157 : e407 ; -- <0157> bn eq :skip_run
    0158 : 015d ; -- <0157> "
-- release target reset, to run.
    0159 : 3e00 ; -- <0159> bus_ctrl = 0
    015a : 2409 ; -- <0160> bp0_addr = bp0_addr
    015b : e00f ; -- <0161> jmp :cmd_loop
    015c : 00fb ; -- <0161> "
-- :skip_run -- = 0x015d

-- -- command = interrupt / break target.
-- asc b = "i"
-- nop
-- bn eq :skip_brk
-- bus_ctrl = 0
-- bus_ctrl = $bp_step_mask
-- call :wait_for_bp
-- jmp :cmd_loop
-- :skip_brk

-- command = set breakpoint.
    015d : 0662 ; -- <0175> b = 98 -- asc b = "b"
    015e : c800 ; -- <0176> nop
    015f : e407 ; -- <0177> bn eq :skip_setbrk
    0160 : 0166 ; -- <0177> "
    0161 : fba0 ; -- <0178> call :set_bp
    0162 : 0196 ; -- <0178> "
    0163 : fc00 ; -- <0178> "
    0164 : e00f ; -- <0179> jmp :cmd_loop
    0165 : 00fb ; -- <0179> "
-- :skip_setbrk -- = 0x0166

    0166 : 023f ; -- <0182> a = 63 -- putasc "?"
    0167 : 0000 ; -- <0182> a = a -- putasc "?"
    0168 : fba0 ; -- <0182> putasc "?"
    0169 : 0037 ; -- <0182> "
    016a : fc00 ; -- <0182> "
    016b : 020d ; -- <0183> a = 13 -- puteol
    016c : 0000 ; -- <0183> a = a -- puteol
    016d : fba0 ; -- <0183> puteol
    016e : 0037 ; -- <0183> "
    016f : fc00 ; -- <0183> "
    0170 : 020a ; -- <0183> a = 10 -- puteol
    0171 : 0000 ; -- <0183> a = a -- puteol
    0172 : fba0 ; -- <0183> puteol
    0173 : 0037 ; -- <0183> "
    0174 : fc00 ; -- <0183> "
    0175 : e00f ; -- <0184> jmp :cmd_loop
    0176 : 00fb ; -- <0184> "

-- demonstrations ------------------------------

-- set a breakpoint, wait til it hits.
    0177 : 2615 ; -- <0189> bp0_addr = 0x15
-- :main_loop -- = 0x0178
    0178 : fba0 ; -- <0191> call :wait_for_bp
    0179 : 0190 ; -- <0191> "
    017a : fc00 ; -- <0191> "

-- release target to run full speed.
    017b : 3e00 ; -- <0194> bus_ctrl = 0

-- interrupt the target and single step it a few times.
    017c : 3e08 ; -- <0197> bus_ctrl = $bp_step_mask
    017d : fba0 ; -- <0198> call :wait_for_bp
    017e : 0190 ; -- <0198> "
    017f : fc00 ; -- <0198> "
    0180 : 2409 ; -- <0199> bp0_addr = bp0_addr
    0181 : fba0 ; -- <0200> call :wait_for_bp
    0182 : 0190 ; -- <0200> "
    0183 : fc00 ; -- <0200> "
    0184 : 2409 ; -- <0201> bp0_addr = bp0_addr
    0185 : fba0 ; -- <0202> call :wait_for_bp
    0186 : 0190 ; -- <0202> "
    0187 : fc00 ; -- <0202> "
    0188 : 2409 ; -- <0203> bp0_addr = bp0_addr
    0189 : fba0 ; -- <0204> call :wait_for_bp
    018a : 0190 ; -- <0204> "
    018b : fc00 ; -- <0204> "
    018c : 3e00 ; -- <0205> bus_ctrl = 0

-- release target to pass breakpoint once.
    018d : 2409 ; -- <0208> bp0_addr = bp0_addr

    018e : e00f ; -- <0210> jmp :main_loop
    018f : 0178 ; -- <0210> "

    0190 : 0200 ; -- <0213> a = 0
    0191 : 0418 ; -- <0214> b = bp_status
    0192 : c800 ; -- <0215> nop
    0193 : e004 ; -- <0216> br z :wait_for_bp
    0194 : 0190 ; -- <0216> "
    0195 : fc00 ; -- <0217> rtn

    0196 : 2004 ; -- <0219> push x -- func set_bp
    0197 : 2005 ; -- <0219> push y -- "
    0198 : 203e ; -- <0219> push rtna -- "
    0199 : fba0 ; -- <0220> getchar
    019a : 0047 ; -- <0220> "
    019b : fc00 ; -- <0220> "
    019c : 2000 ; -- <0220> push a -- "
    019d : 0000 ; -- <0220> a = a -- "
    019e : fba0 ; -- <0220> "
    019f : 0037 ; -- <0220> "
    01a0 : fc00 ; -- <0220> "
    01a1 : 0008 ; -- <0220> pop a -- "
    01a2 : 1000 ; -- <0221> x = a
    01a3 : fba0 ; -- <0222> getchar
    01a4 : 0047 ; -- <0222> "
    01a5 : fc00 ; -- <0222> "
    01a6 : 2000 ; -- <0222> push a -- "
    01a7 : 0000 ; -- <0222> a = a -- "
    01a8 : fba0 ; -- <0222> "
    01a9 : 0037 ; -- <0222> "
    01aa : fc00 ; -- <0222> "
    01ab : 0008 ; -- <0222> pop a -- "
    01ac : 063d ; -- <0223> b = 61 -- asc b = "="
    01ad : c800 ; -- <0224> nop
    01ae : e407 ; -- <0225> bn eq :fail
    01af : 01df ; -- <0225> "
    01b0 : fba0 ; -- <0226> call :get4x
    01b1 : 0096 ; -- <0226> "
    01b2 : fc00 ; -- <0226> "
    01b3 : 1400 ; -- <0227> y = a
    01b4 : 0200 ; -- <0228> a = 0
    01b5 : c800 ; -- <0229> nop
    01b6 : e407 ; -- <0230> bn eq :fail
    01b7 : 01df ; -- <0230> "
    01b8 : 0004 ; -- <0231> a = x
    01b9 : 0600 ; -- <0232> b = 0
    01ba : c800 ; -- <0233> nop
    01bb : e007 ; -- <0234> br eq :b0
    01bc : 01cb ; -- <0234> "
    01bd : 0601 ; -- <0235> b = 1
    01be : c800 ; -- <0236> nop
    01bf : e007 ; -- <0237> br eq :b1
    01c0 : 01d0 ; -- <0237> "
    01c1 : 0602 ; -- <0238> b = 2
    01c2 : c800 ; -- <0239> nop
    01c3 : e007 ; -- <0240> br eq :b2
    01c4 : 01d5 ; -- <0240> "
    01c5 : 0603 ; -- <0241> b = 3
    01c6 : c800 ; -- <0242> nop
    01c7 : e007 ; -- <0243> br eq :b3
    01c8 : 01da ; -- <0243> "
    01c9 : e00f ; -- <0244> jmp :fail
    01ca : 01df ; -- <0244> "
-- :b0 -- = 0x01cb
    01cb : 2405 ; -- <0246> bp0_addr = y
    01cc : f808 ; -- <0247> pop rtna -- rtn
    01cd : 1408 ; -- <0247> pop y -- "
    01ce : 1008 ; -- <0247> pop x -- "
    01cf : fc00 ; -- <0247> rtn
-- :b1 -- = 0x01d0
    01d0 : 2805 ; -- <0249> bp1_addr = y
    01d1 : f808 ; -- <0250> pop rtna -- rtn
    01d2 : 1408 ; -- <0250> pop y -- "
    01d3 : 1008 ; -- <0250> pop x -- "
    01d4 : fc00 ; -- <0250> rtn
-- :b2 -- = 0x01d5
    01d5 : 2c05 ; -- <0252> bp2_addr = y
    01d6 : f808 ; -- <0253> pop rtna -- rtn
    01d7 : 1408 ; -- <0253> pop y -- "
    01d8 : 1008 ; -- <0253> pop x -- "
    01d9 : fc00 ; -- <0253> rtn
-- :b3 -- = 0x01da
    01da : 3005 ; -- <0255> bp3_addr = y
    01db : f808 ; -- <0256> pop rtna -- rtn
    01dc : 1408 ; -- <0256> pop y -- "
    01dd : 1008 ; -- <0256> pop x -- "
    01de : fc00 ; -- <0256> rtn
-- :fail -- = 0x01df
    01df : 023f ; -- <0258> a = 63 -- putasc "?"
    01e0 : 0000 ; -- <0258> a = a -- putasc "?"
    01e1 : fba0 ; -- <0258> putasc "?"
    01e2 : 0037 ; -- <0258> "
    01e3 : fc00 ; -- <0258> "
    01e4 : 020d ; -- <0259> a = 13 -- puteol
    01e5 : 0000 ; -- <0259> a = a -- puteol
    01e6 : fba0 ; -- <0259> puteol
    01e7 : 0037 ; -- <0259> "
    01e8 : fc00 ; -- <0259> "
    01e9 : 020a ; -- <0259> a = 10 -- puteol
    01ea : 0000 ; -- <0259> a = a -- puteol
    01eb : fba0 ; -- <0259> puteol
    01ec : 0037 ; -- <0259> "
    01ed : fc00 ; -- <0259> "
    01ee : f808 ; -- <0260> pop rtna -- rtn
    01ef : 1408 ; -- <0260> pop y -- "
    01f0 : 1008 ; -- <0260> pop x -- "
    01f1 : fc00 ; -- <0260> rtn

    01f2 : 2002 ; -- <0262> push i -- func load_program
    01f3 : 2003 ; -- <0262> push j -- "
    01f4 : 2004 ; -- <0262> push x -- "
    01f5 : 2006 ; -- <0262> push g6 -- "
    01f6 : 203e ; -- <0262> push rtna -- "
-- load target program from UART.
-- length, little-endian.  memorize in x.
    01f7 : 024c ; -- <0265> a = 76 -- putasc L
    01f8 : 0000 ; -- <0265> a = a -- putasc L
    01f9 : fba0 ; -- <0265> putasc L
    01fa : 0037 ; -- <0265> "
    01fb : fc00 ; -- <0265> "
    01fc : fba0 ; -- <0266> get16 x
    01fd : 0047 ; -- <0266> "
    01fe : fc00 ; -- <0266> "
    01ff : 2000 ; -- <0266> push a -- "
    0200 : fba0 ; -- <0266> "
    0201 : 0047 ; -- <0266> "
    0202 : fc00 ; -- <0266> "
    0203 : 0352 ; -- <0266> "
    0204 : 0352 ; -- <0266> "
    0205 : 0408 ; -- <0266> pop b -- "
    0206 : c800 ; -- <0266> "
    0207 : 1334 ; -- <0266> "
    0208 : 0004 ; -- <0267> a = x
    0209 : fba0 ; -- <0268> call put4x
    020a : 0059 ; -- <0268> "
    020b : fc00 ; -- <0268> "
-- put target into reset again, in case this is a target warm boot.
    020c : 3e02 ; -- <0270> bus_ctrl = $tg_reset_mask
-- load opcodes.  count up address in i.
    020d : 0a00 ; -- <0272> i = 0
    020e : 0e01 ; -- <0273> j = 1
-- :loadword -- = 0x020f
    020f : 0241 ; -- <0275> a = 65 -- putasc A
    0210 : 0000 ; -- <0275> a = a -- putasc A
    0211 : fba0 ; -- <0275> putasc A
    0212 : 0037 ; -- <0275> "
    0213 : fc00 ; -- <0275> "
    0214 : 0002 ; -- <0276> a = i
    0215 : fba0 ; -- <0277> call put4x
    0216 : 0059 ; -- <0277> "
    0217 : fc00 ; -- <0277> "
    0218 : 023d ; -- <0278> a = 61 -- putasc "="
    0219 : 0000 ; -- <0278> a = a -- putasc "="
    021a : fba0 ; -- <0278> putasc "="
    021b : 0037 ; -- <0278> "
    021c : fc00 ; -- <0278> "
    021d : fba0 ; -- <0279> get16 g6
    021e : 0047 ; -- <0279> "
    021f : fc00 ; -- <0279> "
    0220 : 2000 ; -- <0279> push a -- "
    0221 : fba0 ; -- <0279> "
    0222 : 0047 ; -- <0279> "
    0223 : fc00 ; -- <0279> "
    0224 : 0352 ; -- <0279> "
    0225 : 0352 ; -- <0279> "
    0226 : 0408 ; -- <0279> pop b -- "
    0227 : c800 ; -- <0279> "
    0228 : 1b34 ; -- <0279> "
    0229 : 0006 ; -- <0280> a = g6
    022a : fba0 ; -- <0281> call put4x
    022b : 0059 ; -- <0281> "
    022c : fc00 ; -- <0281> "
    022d : 023d ; -- <0282> a = 61 -- putasc "="
    022e : 0000 ; -- <0282> a = a -- putasc "="
    022f : fba0 ; -- <0282> putasc "="
    0230 : 0037 ; -- <0282> "
    0231 : fc00 ; -- <0282> "
    0232 : 4c02 ; -- <0283> m9k_addr = i
    0233 : 5006 ; -- <0284> m9k_data = g6
    0234 : 0014 ; -- <0285> a = m9k_data
    0235 : fba0 ; -- <0286> call put4x
    0236 : 0059 ; -- <0286> "
    0237 : fc00 ; -- <0286> "
    0238 : 020d ; -- <0287> a = 13 -- puteol
    0239 : 0000 ; -- <0287> a = a -- puteol
    023a : fba0 ; -- <0287> puteol
    023b : 0037 ; -- <0287> "
    023c : fc00 ; -- <0287> "
    023d : 020a ; -- <0287> a = 10 -- puteol
    023e : 0000 ; -- <0287> a = a -- puteol
    023f : fba0 ; -- <0287> puteol
    0240 : 0037 ; -- <0287> "
    0241 : fc00 ; -- <0287> "
    0242 : 0b10 ; -- <0288> i = i+j
    0243 : 0002 ; -- <0289> a = i
    0244 : 0404 ; -- <0290> b = x
    0245 : c800 ; -- <0291> nop
    0246 : e407 ; -- <0292> bn eq :loadword
    0247 : 020f ; -- <0292> "
    0248 : f808 ; -- <0293> pop rtna -- rtn
    0249 : 1808 ; -- <0293> pop g6 -- "
    024a : 1008 ; -- <0293> pop x -- "
    024b : 0c08 ; -- <0293> pop j -- "
    024c : 0808 ; -- <0293> pop i -- "
    024d : fc00 ; -- <0293> rtn

-- observe a register.  return its value in peek_data.
-- pass its register address in a.
    024e : 07a0 ; -- <0298> b = 0x3ff
    024f : 03ff ; -- <0298> "
    0250 : c800 ; -- <0299> nop
    0251 : 0330 ; -- <0300> a = and
-- debug_peek_reg = 31 << 10
    0252 : 07a0 ; -- <0302> b = 0x7c00
    0253 : 7c00 ; -- <0302> "
    0254 : c800 ; -- <0303> nop
    0255 : 3734 ; -- <0304> force_opcode = or
    0256 : 3e04 ; -- <0305> bus_ctrl = $divert_code_bus_mask
    0257 : 4201 ; -- <0306> tg_force = $hold_state_mask
    0258 : 4203 ; -- <0307> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0259 : 4205 ; -- <0308> tg_force = ($hold_state_mask | $force_exec_mask)
    025a : 4201 ; -- <0309> tg_force = $hold_state_mask
-- target's register value is now in peek_data.
-- refill target exr so it can resume seamlessly.
    025b : 3415 ; -- <0312> force_opcode = exr_shadow
    025c : 4203 ; -- <0313> tg_force = ($hold_state_mask | $force_load_exr_mask)
    025d : 4200 ; -- <0314> tg_force = 0
    025e : fc00 ; -- <0315> rtn

-- show target status display.
    025f : 2002 ; -- <0318> push i -- func dump_target
    0260 : 2003 ; -- <0318> push j -- "
    0261 : 2004 ; -- <0318> push x -- "
    0262 : 2005 ; -- <0318> push y -- "
    0263 : 203e ; -- <0318> push rtna -- "
    0264 : 020d ; -- <0319> a = 13 -- puteol
    0265 : 0000 ; -- <0319> a = a -- puteol
    0266 : fba0 ; -- <0319> puteol
    0267 : 0037 ; -- <0319> "
    0268 : fc00 ; -- <0319> "
    0269 : 020a ; -- <0319> a = 10 -- puteol
    026a : 0000 ; -- <0319> a = a -- puteol
    026b : fba0 ; -- <0319> puteol
    026c : 0037 ; -- <0319> "
    026d : fc00 ; -- <0319> "
    026e : 0a00 ; -- <0320> i = 0
-- :next_reg -- = 0x026f
-- fetch register name from table in target program.
    026f : 1200 ; -- <0323> x = 0
    0270 : 1601 ; -- <0324> y = 1
-- :next_chars -- = 0x0271
    0271 : 0002 ; -- <0326> a = i
    0272 : 0351 ; -- <0327> a = a<<1
    0273 : 0351 ; -- <0328> a = a<<1
    0274 : 0603 ; -- <0329> b = 3
    0275 : c800 ; -- <0330> nop
    0276 : 0300 ; -- <0331> a = a+b
    0277 : 0404 ; -- <0332> b = x
    0278 : c800 ; -- <0333> nop
    0279 : 4f00 ; -- <0334> m9k_addr = a+b
    027a : 0014 ; -- <0335> a = m9k_data -- putchar m9k_data
    027b : fba0 ; -- <0335> putchar m9k_data
    027c : 0037 ; -- <0335> "
    027d : fc00 ; -- <0335> "
    027e : 0014 ; -- <0336> a = m9k_data
    027f : 0353 ; -- <0337> a = a>>4
    0280 : 0353 ; -- <0338> a = a>>4
    0281 : 0000 ; -- <0339> a = a -- putchar a
    0282 : fba0 ; -- <0339> putchar a
    0283 : 0037 ; -- <0339> "
    0284 : fc00 ; -- <0339> "
    0285 : 1320 ; -- <0340> x = x+y
    0286 : 0004 ; -- <0341> a = x
    0287 : 0604 ; -- <0342> b = 4
    0288 : c800 ; -- <0343> nop
    0289 : e407 ; -- <0344> bn eq :next_chars
    028a : 0271 ; -- <0344> "
    028b : 023d ; -- <0345> a = 61 -- putasc "="
    028c : 0000 ; -- <0345> a = a -- putasc "="
    028d : fba0 ; -- <0345> putasc "="
    028e : 0037 ; -- <0345> "
    028f : fc00 ; -- <0345> "
    0290 : 0002 ; -- <0346> a = i
    0291 : fba0 ; -- <0347> call :peek
    0292 : 024e ; -- <0347> "
    0293 : fc00 ; -- <0347> "
    0294 : 0017 ; -- <0348> a = peek_data
    0295 : fba0 ; -- <0349> call :put4x
    0296 : 0059 ; -- <0349> "
    0297 : fc00 ; -- <0349> "
    0298 : 0220 ; -- <0350> a = 32 -- putasc " "
    0299 : 0000 ; -- <0350> a = a -- putasc " "
    029a : fba0 ; -- <0350> putasc " "
    029b : 0037 ; -- <0350> "
    029c : fc00 ; -- <0350> "
    029d : 0e01 ; -- <0351> j = 1
    029e : c800 ; -- <0352> nop
    029f : 0b10 ; -- <0353> i = i+j
-- loop up to the number of registers in the target program's register name table.
    02a0 : 4e02 ; -- <0355> m9k_addr = 2
    02a1 : 0414 ; -- <0356> b = m9k_data
    02a2 : 0002 ; -- <0357> a = i
    02a3 : c800 ; -- <0358> nop
    02a4 : e407 ; -- <0359> bn eq :next_reg
    02a5 : 026f ; -- <0359> "
    02a6 : 020d ; -- <0360> a = 13 -- puteol
    02a7 : 0000 ; -- <0360> a = a -- puteol
    02a8 : fba0 ; -- <0360> puteol
    02a9 : 0037 ; -- <0360> "
    02aa : fc00 ; -- <0360> "
    02ab : 020a ; -- <0360> a = 10 -- puteol
    02ac : 0000 ; -- <0360> a = a -- puteol
    02ad : fba0 ; -- <0360> puteol
    02ae : 0037 ; -- <0360> "
    02af : fc00 ; -- <0360> "
    02b0 : f808 ; -- <0361> pop rtna -- rtn
    02b1 : 1408 ; -- <0361> pop y -- "
    02b2 : 1008 ; -- <0361> pop x -- "
    02b3 : 0c08 ; -- <0361> pop j -- "
    02b4 : 0808 ; -- <0361> pop i -- "
    02b5 : fc00 ; -- <0361> rtn
        
        END;
    
