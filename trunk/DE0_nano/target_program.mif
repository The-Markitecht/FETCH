
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.


-- I/O expansion bus.




    0000 : e00f ; -- <0054> jmp :main
    0001 : 015a ; -- <0054> "

-- register names for use by debugger.
    0002 : 0008 ; -- <0057> ([src rstk])
-- "\r\n     a"
    0003 : 0a0d ; -- <0058>   
    0004 : 2020 ; -- <0058>   
    0005 : 2020 ; -- <0058>   
    0006 : 6120 ; -- <0058> a 
-- "       b"
    0007 : 2020 ; -- <0059>   
    0008 : 2020 ; -- <0059>   
    0009 : 2020 ; -- <0059>   
    000a : 6220 ; -- <0059> b 
-- "       i"
    000b : 2020 ; -- <0060>   
    000c : 2020 ; -- <0060>   
    000d : 2020 ; -- <0060>   
    000e : 6920 ; -- <0060> i 
-- "       j"
    000f : 2020 ; -- <0061>   
    0010 : 2020 ; -- <0061>   
    0011 : 2020 ; -- <0061>   
    0012 : 6a20 ; -- <0061> j 
-- "\r\n     x"
    0013 : 0a0d ; -- <0062>   
    0014 : 2020 ; -- <0062>   
    0015 : 2020 ; -- <0062>   
    0016 : 7820 ; -- <0062> x 
-- "       y"
    0017 : 2020 ; -- <0063>   
    0018 : 2020 ; -- <0063>   
    0019 : 2020 ; -- <0063>   
    001a : 7920 ; -- <0063> y 
-- "      g6"
    001b : 2020 ; -- <0064>   
    001c : 2020 ; -- <0064>   
    001d : 2020 ; -- <0064>   
    001e : 3667 ; -- <0064> 6g
-- "      g7"
    001f : 2020 ; -- <0065>   
    0020 : 2020 ; -- <0065>   
    0021 : 2020 ; -- <0065>   
    0022 : 3767 ; -- <0065> 7g
-- "\r\n  keys"
    0023 : 0a0d ; -- <0066>   
    0024 : 2020 ; -- <0066>   
    0025 : 656b ; -- <0066> ek
    0026 : 7379 ; -- <0066> sy
-- "    leds"
    0027 : 2020 ; -- <0067>   
    0028 : 2020 ; -- <0067>   
    0029 : 656c ; -- <0067> el
    002a : 7364 ; -- <0067> sd

-- libraries

-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    002b : 0601 ; -- <0005> b = 1
    002c : e003 ; -- <0006> br and0z :pick_byte_even
    002d : 0036 ; -- <0006> "
    002e : 0350 ; -- <0007> a = a>>1
    002f : 0404 ; -- <0008> b = x
    0030 : c800 ; -- <0009> fetch a from a+b
    0031 : d300 ; -- <0009> "
    0032 : 03b0 ; -- <0009> "
    0033 : 0353 ; -- <0010> a = a>>4
    0034 : 0353 ; -- <0011> a = a>>4
    0035 : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x0036
    0036 : 0350 ; -- <0014> a = a>>1
    0037 : 0404 ; -- <0015> b = x
    0038 : c800 ; -- <0016> fetch a from a+b
    0039 : d300 ; -- <0016> "
    003a : 03b0 ; -- <0016> "
    003b : 06ff ; -- <0017> b = 0xff
    003c : c800 ; -- <0018> a = and
    003d : 0330 ; -- <0018> "
    003e : fc00 ; -- <0019> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    003f : 2002 ; -- <0027> push i -- func find_in_fetch
    0040 : 2003 ; -- <0027> push j -- "
    0041 : 2005 ; -- <0027> push y -- "
    0042 : 203e ; -- <0027> push rtna -- "
    0043 : 1400 ; -- <0028> y = a
    0044 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0045
    0045 : e001 ; -- <0031> br iz :fail
    0046 : 0055 ; -- <0031> "
    0047 : 0b10 ; -- <0032> i = ad1
    0048 : 0002 ; -- <0033> a = i
    0049 : fba0 ; -- <0034> call :fetch_byte
    004a : 002b ; -- <0034> "
    004b : fc00 ; -- <0034> "
    004c : 0405 ; -- <0035> b = y
    004d : e407 ; -- <0036> bn eq :again
    004e : 0045 ; -- <0036> "
-- :found -- = 0x004f
    004f : 0002 ; -- <0038> a = i
    0050 : f808 ; -- <0039> pop rtna -- rtn
    0051 : 1408 ; -- <0039> pop y -- "
    0052 : 0c08 ; -- <0039> pop j -- "
    0053 : 0808 ; -- <0039> pop i -- "
    0054 : fc00 ; -- <0039> rtn
-- :fail -- = 0x0055
    0055 : 0360 ; -- <0041> a = -1
    0056 : f808 ; -- <0042> pop rtna -- rtn
    0057 : 1408 ; -- <0042> pop y -- "
    0058 : 0c08 ; -- <0042> pop j -- "
    0059 : 0808 ; -- <0042> pop i -- "
    005a : fc00 ; -- <0042> rtn



-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
    005b : 2004 ; -- <0035> push x -- func putchar_atx

    005c : 1000 ; -- <0037> x = a

-- wait for UART to be idle (not busy).
    005d : 0202 ; -- <0040> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x005e
    005e : 040f ; -- <0042> b = atx_ctrl
    005f : e403 ; -- <0043> bn and0z :pcatx_wait_for_idle
    0060 : 005e ; -- <0043> "

-- push word to the UART.  its low byte is a character.
    0061 : 3804 ; -- <0046> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    0062 : 3e01 ; -- <0051> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    0063 : 0202 ; -- <0054> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x0064
    0064 : 040f ; -- <0056> b = atx_ctrl
    0065 : e003 ; -- <0057> br and0z :pcatx_wait_for_busy
    0066 : 0064 ; -- <0057> "
    0067 : 3e00 ; -- <0058> atx_ctrl = 0
    0068 : 1008 ; -- <0059> pop x -- rtn
    0069 : fc00 ; -- <0059> rtn

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- wait until UART is busy, then idle.
    006a : 0204 ; -- <0065> a = $arx_busy_mask
-- :wait_for_busy -- = 0x006b
    006b : 040f ; -- <0067> b = atx_ctrl
    006c : e003 ; -- <0068> br and0z :wait_for_busy
    006d : 006b ; -- <0068> "
-- :wait_for_idle -- = 0x006e
    006e : 040f ; -- <0070> b = atx_ctrl
    006f : e403 ; -- <0071> bn and0z :wait_for_idle
    0070 : 006e ; -- <0071> "
    0071 : 000e ; -- <0072> a = atx_data
    0072 : fc00 ; -- <0073> rtn

-- returns a character in a, or -1 if none.
-- this version can miss characters if not polled while the character is arriving.
-- check for UART is busy, then idle.
    0073 : 0204 ; -- <0079> a = $arx_busy_mask
    0074 : 040f ; -- <0080> b = atx_ctrl
    0075 : e003 ; -- <0081> br and0z :none
    0076 : 007c ; -- <0081> "
-- :wait_for_idle -- = 0x0077
    0077 : 040f ; -- <0083> b = atx_ctrl
    0078 : e403 ; -- <0084> bn and0z :wait_for_idle
    0079 : 0077 ; -- <0084> "
    007a : 000e ; -- <0085> a = atx_data
    007b : fc00 ; -- <0086> rtn
-- :none -- = 0x007c
    007c : 0360 ; -- <0088> a = -1
    007d : fc00 ; -- <0089> rtn



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x007e
-- "0123456789abcdef"
    007e : 3130 ; -- <0054> 10
    007f : 3332 ; -- <0054> 32
    0080 : 3534 ; -- <0054> 54
    0081 : 3736 ; -- <0054> 76
    0082 : 3938 ; -- <0054> 98
    0083 : 6261 ; -- <0054> ba
    0084 : 6463 ; -- <0054> dc
    0085 : 6665 ; -- <0054> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0086 : 2004 ; -- <0058> push x -- func put4x
    0087 : 2006 ; -- <0058> push g6 -- "
    0088 : 203e ; -- <0058> push rtna -- "
    0089 : 13a0 ; -- <0059> x = :hexdigits
    008a : 007e ; -- <0059> "

    008b : 1800 ; -- <0061> g6 = a
    008c : 07a0 ; -- <0062> b = 0xF000
    008d : f000 ; -- <0062> "
    008e : c800 ; -- <0063> a = and
    008f : 0330 ; -- <0063> "
    0090 : 0353 ; -- <0064> a = a>>4
    0091 : 0353 ; -- <0065> a = a>>4
    0092 : 0353 ; -- <0066> a = a>>4
    0093 : fba0 ; -- <0067> call fetch_byte
    0094 : 002b ; -- <0067> "
    0095 : fc00 ; -- <0067> "
    0096 : 0000 ; -- <0068> a = a -- putchar a
    0097 : fba0 ; -- <0068> putchar a
    0098 : 005b ; -- <0068> "
    0099 : fc00 ; -- <0068> "

    009a : 0006 ; -- <0070> a = g6
    009b : 07a0 ; -- <0071> b = 0x0F00
    009c : 0f00 ; -- <0071> "
    009d : c800 ; -- <0072> a = and
    009e : 0330 ; -- <0072> "
    009f : 0353 ; -- <0073> a = a>>4
    00a0 : 0353 ; -- <0074> a = a>>4
    00a1 : fba0 ; -- <0075> call fetch_byte
    00a2 : 002b ; -- <0075> "
    00a3 : fc00 ; -- <0075> "
    00a4 : 0000 ; -- <0076> a = a -- putchar a
    00a5 : fba0 ; -- <0076> putchar a
    00a6 : 005b ; -- <0076> "
    00a7 : fc00 ; -- <0076> "

    00a8 : 0006 ; -- <0078> a = g6
    00a9 : 06f0 ; -- <0079> b = 0x00F0
    00aa : c800 ; -- <0080> a = and
    00ab : 0330 ; -- <0080> "
    00ac : 0353 ; -- <0081> a = a>>4
    00ad : fba0 ; -- <0082> call fetch_byte
    00ae : 002b ; -- <0082> "
    00af : fc00 ; -- <0082> "
    00b0 : 0000 ; -- <0083> a = a -- putchar a
    00b1 : fba0 ; -- <0083> putchar a
    00b2 : 005b ; -- <0083> "
    00b3 : fc00 ; -- <0083> "

    00b4 : 0006 ; -- <0085> a = g6
    00b5 : 060f ; -- <0086> b = 0x000F
    00b6 : c800 ; -- <0087> a = and
    00b7 : 0330 ; -- <0087> "
    00b8 : fba0 ; -- <0088> call fetch_byte
    00b9 : 002b ; -- <0088> "
    00ba : fc00 ; -- <0088> "
    00bb : 0000 ; -- <0089> a = a -- putchar a
    00bc : fba0 ; -- <0089> putchar a
    00bd : 005b ; -- <0089> "
    00be : fc00 ; -- <0089> "

    00bf : f808 ; -- <0091> pop rtna -- rtn
    00c0 : 1808 ; -- <0091> pop g6 -- "
    00c1 : 1008 ; -- <0091> pop x -- "
    00c2 : fc00 ; -- <0091> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    00c3 : 2002 ; -- <0095> push i -- func get4x
    00c4 : 2003 ; -- <0095> push j -- "
    00c5 : 2004 ; -- <0095> push x -- "
    00c6 : 2005 ; -- <0095> push y -- "
    00c7 : 203e ; -- <0095> push rtna -- "
-- y = digit counter
-- j = sum
    00c8 : 1604 ; -- <0098> y = 4
-- :again -- = 0x00c9
    00c9 : fba0 ; -- <0100> getchar
    00ca : 006a ; -- <0100> "
    00cb : fc00 ; -- <0100> "
    00cc : 2000 ; -- <0100> push a -- "
    00cd : 0000 ; -- <0100> a = a -- "
    00ce : fba0 ; -- <0100> "
    00cf : 005b ; -- <0100> "
    00d0 : fc00 ; -- <0100> "
    00d1 : 0008 ; -- <0100> pop a -- "
    00d2 : 13a0 ; -- <0101> x = :hexdigits
    00d3 : 007e ; -- <0101> "
    00d4 : 0a10 ; -- <0102> i = 16
    00d5 : fba0 ; -- <0103> call :find_in_fetch
    00d6 : 003f ; -- <0103> "
    00d7 : fc00 ; -- <0103> "
    00d8 : 0760 ; -- <0104> b = -1
    00d9 : e007 ; -- <0105> br eq :fail
    00da : 00ee ; -- <0105> "
    00db : 0400 ; -- <0106> b = a
    00dc : 0003 ; -- <0107> a = j
    00dd : 0352 ; -- <0108> a = a<<4
    00de : c800 ; -- <0109> j = or
    00df : 0f34 ; -- <0109> "
    00e0 : 1360 ; -- <0110> x = -1
    00e1 : c800 ; -- <0111> y = x+y
    00e2 : 1720 ; -- <0111> "
    00e3 : 0005 ; -- <0112> a = y
    00e4 : e400 ; -- <0113> bn az :again
    00e5 : 00c9 ; -- <0113> "
    00e6 : 0003 ; -- <0114> a = j
    00e7 : 0600 ; -- <0115> b = 0
    00e8 : f808 ; -- <0116> pop rtna -- rtn
    00e9 : 1408 ; -- <0116> pop y -- "
    00ea : 1008 ; -- <0116> pop x -- "
    00eb : 0c08 ; -- <0116> pop j -- "
    00ec : 0808 ; -- <0116> pop i -- "
    00ed : fc00 ; -- <0116> rtn
-- :fail -- = 0x00ee
    00ee : 0760 ; -- <0118> b = -1
    00ef : f808 ; -- <0119> pop rtna -- rtn
    00f0 : 1408 ; -- <0119> pop y -- "
    00f1 : 1008 ; -- <0119> pop x -- "
    00f2 : 0c08 ; -- <0119> pop j -- "
    00f3 : 0808 ; -- <0119> pop i -- "
    00f4 : fc00 ; -- <0119> rtn

-- routine waits a number of milliseconds given in a.
    00f5 : 2004 ; -- <0002> push x -- func spinwait
    00f6 : 2005 ; -- <0002> push y -- "
--patch
--rtn
    00f7 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00f8
    00f8 : 13a0 ; -- <0007> x = 16666
    00f9 : 411a ; -- <0007> "
    00fa : 1760 ; -- <0008> y = -1
    00fb : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00fc
-- use of the ad2 name overrides auto-nop here.
    00fc : 1320 ; -- <0012> x = ad2
    00fd : e402 ; -- <0013> bn xz :spinwait_inner
    00fe : 00fc ; -- <0013> "
    00ff : c800 ; -- <0014> a = a+b
    0100 : 0300 ; -- <0014> "
    0101 : e400 ; -- <0015> bn az :spinwait_outer
    0102 : 00f8 ; -- <0015> "
    0103 : 1408 ; -- <0016> pop y -- rtn
    0104 : 1008 ; -- <0016> pop x -- "
    0105 : fc00 ; -- <0016> rtn



-- bit-bang a complete SPI transaction.
-- pass mo data in a, transaction width (# of bits) in b.
-- returns mi data in a
    0106 : 2002 ; -- <0005> push i -- func spi_exchange
    0107 : 2003 ; -- <0005> push j -- "
    0108 : 2004 ; -- <0005> push x -- "
    0109 : 2005 ; -- <0005> push y -- "
    010a : 2006 ; -- <0005> push g6 -- "
    010b : 2007 ; -- <0005> push g7 -- "
-- keeping mo data in g6, mi data in g7.
    010c : 1800 ; -- <0007> g6 = a
    010d : 1e00 ; -- <0008> g7 = 0
-- keeping bit counter in i.
    010e : 0801 ; -- <0010> i = b
    010f : 0f60 ; -- <0011> j = -1
    0110 : 1760 ; -- <0012> y = -1
-- :next_bit -- = 0x0111
-- output the msb of mo, along with a low clock phase and low csn.
    0111 : 0006 ; -- <0015> a = g6
    0112 : 0350 ; -- <0016> a = a>>1
    0113 : 0350 ; -- <0017> a = a>>1
    0114 : 0350 ; -- <0018> a = a>>1
    0115 : 0353 ; -- <0019> a = a>>4
    0116 : 0353 ; -- <0020> a = a>>4
    0117 : 0353 ; -- <0021> a = a>>4
    0118 : 2400 ; -- <0022> de0nano_adc_ctrl = a
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    0119 : 1206 ; -- <0024> x = 6
-- :wait1 -- = 0x011a
    011a : c800 ; -- <0026> x = x+y
    011b : 1320 ; -- <0026> "
    011c : e402 ; -- <0027> bn xz :wait1
    011d : 011a ; -- <0027> "
-- output a high clock phase.
    011e : 0602 ; -- <0029> b = $de0nano_adc_sck_mask
    011f : c800 ; -- <0030> de0nano_adc_ctrl = or
    0120 : 2734 ; -- <0030> "
-- sample mi.
    0121 : 0007 ; -- <0032> a = g7
    0122 : 0351 ; -- <0033> a = a<<1
    0123 : 0409 ; -- <0034> b = de0nano_adc_ctrl
    0124 : c800 ; -- <0035> g7 = or
    0125 : 1f34 ; -- <0035> "
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    0126 : 1206 ; -- <0037> x = 6
-- :wait2 -- = 0x0127
    0127 : c800 ; -- <0039> x = x+y
    0128 : 1320 ; -- <0039> "
    0129 : e402 ; -- <0040> bn xz :wait2
    012a : 0127 ; -- <0040> "
-- shift mo bits.
    012b : 0006 ; -- <0042> a = g6
    012c : 0351 ; -- <0043> a = a<<1
    012d : 1800 ; -- <0044> g6 = a
-- count bits
    012e : c800 ; -- <0046> i = i+j
    012f : 0b10 ; -- <0046> "
    0130 : e401 ; -- <0047> bn iz :next_bit
    0131 : 0111 ; -- <0047> "
-- idle the SPI bus with a high clock phase and high csn.
    0132 : 2606 ; -- <0049> de0nano_adc_ctrl = ($de0nano_adc_csn_mask | $de0nano_adc_sck_mask)
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    0133 : 1206 ; -- <0051> x = 6
-- :wait3 -- = 0x0134
    0134 : c800 ; -- <0053> x = x+y
    0135 : 1320 ; -- <0053> "
    0136 : e402 ; -- <0054> bn xz :wait3
    0137 : 0134 ; -- <0054> "
    0138 : 0007 ; -- <0055> a = g7
    0139 : 1c08 ; -- <0056> pop g7 -- rtn
    013a : 1808 ; -- <0056> pop g6 -- "
    013b : 1408 ; -- <0056> pop y -- "
    013c : 1008 ; -- <0056> pop x -- "
    013d : 0c08 ; -- <0056> pop j -- "
    013e : 0808 ; -- <0056> pop i -- "
    013f : fc00 ; -- <0056> rtn

-- pass desired ADC channel in a.
-- returns ADC reading in a.
    0140 : 203e ; -- <0060> push rtna -- func de0nano_adc_read
    0141 : 0352 ; -- <0061> a = a<<4
    0142 : 0352 ; -- <0062> a = a<<4
    0143 : 0351 ; -- <0063> a = a<<1
    0144 : 0351 ; -- <0064> a = a<<1
    0145 : 0351 ; -- <0065> a = a<<1
    0146 : 0610 ; -- <0066> b = 16
    0147 : fba0 ; -- <0067> call :spi_exchange
    0148 : 0106 ; -- <0067> "
    0149 : fc00 ; -- <0067> "
    014a : f808 ; -- <0068> pop rtna -- rtn
    014b : fc00 ; -- <0068> rtn

-- pass desired anmux channel in a.
-- return ADC reading in a.
    014c : 203e ; -- <0072> push rtna -- func anmux_read_chn
-- set & enable analog muxer
    014d : 0608 ; -- <0074> b = $anmux_enable_mask
    014e : 4402 ; -- <0075> anmux_ctrl = or
    014f : 4334 ; -- <0075> "
-- wait for muxer & current driver to settle down.  some delay here is absolutely required (per testing).
    0150 : 020a ; -- <0077> a = 10
    0151 : fba0 ; -- <0078> call :spinwait
    0152 : 00f5 ; -- <0078> "
    0153 : fc00 ; -- <0078> "

-- read ADC channel 7.  12 bits resolution.
    0154 : 0207 ; -- <0081> a = 7
    0155 : fba0 ; -- <0082> call :de0nano_adc_read
    0156 : 0140 ; -- <0082> "
    0157 : fc00 ; -- <0082> "
    0158 : f808 ; -- <0083> pop rtna -- rtn
    0159 : fc00 ; -- <0083> rtn

-- --------------------------------------------
-- :main -- = 0x015a

-- pass counter in x.  anmux channel number in i.
    015a : 1200 ; -- <0080> x = 0
    015b : 1601 ; -- <0081> y = 1

-- :next_pass -- = 0x015c
    015c : 4401 ; -- <0084> leds = x
    015d : 4004 ; -- <0084> "
    015e : 0004 ; -- <0085> a = x
    015f : fba0 ; -- <0086> call :put4x
    0160 : 0086 ; -- <0086> "
    0161 : fc00 ; -- <0086> "
    0162 : 023a ; -- <0087> a = 58 -- putasc ":"
    0163 : 0000 ; -- <0087> a = a -- putasc ":"
    0164 : fba0 ; -- <0087> putasc ":"
    0165 : 005b ; -- <0087> "
    0166 : fc00 ; -- <0087> "
    0167 : 0a08 ; -- <0088> i = 8
    0168 : 0f60 ; -- <0089> j = -1

-- :next_anmux -- = 0x0169
    0169 : c800 ; -- <0092> i = i+j
    016a : 0b10 ; -- <0092> "
    016b : 0220 ; -- <0093> a = 32 -- putasc " "
    016c : 0000 ; -- <0093> a = a -- putasc " "
    016d : fba0 ; -- <0093> putasc " "
    016e : 005b ; -- <0093> "
    016f : fc00 ; -- <0093> "
    0170 : 0273 ; -- <0094> a = 115 -- putasc "s"
    0171 : 0000 ; -- <0094> a = a -- putasc "s"
    0172 : fba0 ; -- <0094> putasc "s"
    0173 : 005b ; -- <0094> "
    0174 : fc00 ; -- <0094> "
    0175 : 0402 ; -- <0095> b = i
    0176 : 0230 ; -- <0096> a = 48 -- asc a = "0"
    0177 : c800 ; -- <0097> a = a+b -- putchar a+b
    0178 : 0300 ; -- <0097> "
    0179 : fba0 ; -- <0097> putchar a+b
    017a : 005b ; -- <0097> "
    017b : fc00 ; -- <0097> "
    017c : 023d ; -- <0098> a = 61 -- putasc "="
    017d : 0000 ; -- <0098> a = a -- putasc "="
    017e : fba0 ; -- <0098> putasc "="
    017f : 005b ; -- <0098> "
    0180 : fc00 ; -- <0098> "
    0181 : 0002 ; -- <0099> a = i
    0182 : fba0 ; -- <0100> call :anmux_read_chn
    0183 : 014c ; -- <0100> "
    0184 : fc00 ; -- <0100> "
    0185 : fba0 ; -- <0101> call :put4x
    0186 : 0086 ; -- <0101> "
    0187 : fc00 ; -- <0101> "
    0188 : e401 ; -- <0102> bn iz :next_anmux
    0189 : 0169 ; -- <0102> "

    018a : 020d ; -- <0104> a = 13 -- puteol
    018b : 0000 ; -- <0104> a = a -- puteol
    018c : fba0 ; -- <0104> puteol
    018d : 005b ; -- <0104> "
    018e : fc00 ; -- <0104> "
    018f : 020a ; -- <0104> a = 10 -- puteol
    0190 : 0000 ; -- <0104> a = a -- puteol
    0191 : fba0 ; -- <0104> puteol
    0192 : 005b ; -- <0104> "
    0193 : fc00 ; -- <0104> "
    0194 : 03a0 ; -- <0105> a = 900
    0195 : 0384 ; -- <0105> "
    0196 : fba0 ; -- <0106> call :spinwait
    0197 : 00f5 ; -- <0106> "
    0198 : fc00 ; -- <0106> "

    0199 : c800 ; -- <0108> x = x+y
    019a : 1320 ; -- <0108> "
    019b : e00f ; -- <0109> jmp :next_pass
    019c : 015c ; -- <0109> "
        
        END;
    
