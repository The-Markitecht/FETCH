
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.



-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- JTAG UART notes:
-- - on read, program MUST test bit 15 of jtag_uart_data_lsw.  jtag uart continues to
-- report the same data byte on subsequent reads when no further data has arrived.
-- bit 15 RVALID = 1 is the only indication of proper data.
-- - reading jtag_uart_data_msw also counts as a FIFO read, causing loss of a data byte,
-- probably because jtag uart has no byteenable wires.
-- - on write, the data is lost if the write FIFO is full.  Avalon is not stalled.


    0000 : e00f ; -- <0055> jmp :main
    0001 : 015d ; -- <0055> "

-- register names for use by debugger.
    0002 : 000a ; -- <0058> ([src rstk])
-- "\r\n     a"
    0003 : 0a0d ; -- <0059>   
    0004 : 2020 ; -- <0059>   
    0005 : 2020 ; -- <0059>   
    0006 : 6120 ; -- <0059> a 
-- "       b"
    0007 : 2020 ; -- <0060>   
    0008 : 2020 ; -- <0060>   
    0009 : 2020 ; -- <0060>   
    000a : 6220 ; -- <0060> b 
-- "       i"
    000b : 2020 ; -- <0061>   
    000c : 2020 ; -- <0061>   
    000d : 2020 ; -- <0061>   
    000e : 6920 ; -- <0061> i 
-- "       j"
    000f : 2020 ; -- <0062>   
    0010 : 2020 ; -- <0062>   
    0011 : 2020 ; -- <0062>   
    0012 : 6a20 ; -- <0062> j 
-- "\r\n     x"
    0013 : 0a0d ; -- <0063>   
    0014 : 2020 ; -- <0063>   
    0015 : 2020 ; -- <0063>   
    0016 : 7820 ; -- <0063> x 
-- "       y"
    0017 : 2020 ; -- <0064>   
    0018 : 2020 ; -- <0064>   
    0019 : 2020 ; -- <0064>   
    001a : 7920 ; -- <0064> y 
-- "      g6"
    001b : 2020 ; -- <0065>   
    001c : 2020 ; -- <0065>   
    001d : 2020 ; -- <0065>   
    001e : 3667 ; -- <0065> 6g
-- "      g7"
    001f : 2020 ; -- <0066>   
    0020 : 2020 ; -- <0066>   
    0021 : 2020 ; -- <0066>   
    0022 : 3767 ; -- <0066> 7g
-- "\r\n  keys"
    0023 : 0a0d ; -- <0067>   
    0024 : 2020 ; -- <0067>   
    0025 : 656b ; -- <0067> ek
    0026 : 7379 ; -- <0067> sy
-- "    leds"
    0027 : 2020 ; -- <0068>   
    0028 : 2020 ; -- <0068>   
    0029 : 656c ; -- <0068> el
    002a : 7364 ; -- <0068> sd

-- libraries

-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    002b : 0601 ; -- <0005> b = 1
    002c : e003 ; -- <0006> br and0z :pick_byte_even
    002d : 0036 ; -- <0006> "
    002e : 0350 ; -- <0007> a = a>>1
    002f : 0404 ; -- <0008> b = x
    0030 : c800 ; -- <0009> fetch a from a+b
    0031 : d300 ; -- <0009> "
    0032 : 03b0 ; -- <0009> "
    0033 : 0353 ; -- <0010> a = a>>4
    0034 : 0353 ; -- <0011> a = a>>4
    0035 : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x0036
    0036 : 0350 ; -- <0014> a = a>>1
    0037 : 0404 ; -- <0015> b = x
    0038 : c800 ; -- <0016> fetch a from a+b
    0039 : d300 ; -- <0016> "
    003a : 03b0 ; -- <0016> "
    003b : 06ff ; -- <0017> b = 0xff
    003c : c800 ; -- <0018> a = and
    003d : 0330 ; -- <0018> "
    003e : fc00 ; -- <0019> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    003f : 2802 ; -- <0027> push i -- func find_in_fetch
    0040 : 2803 ; -- <0027> push j -- "
    0041 : 2805 ; -- <0027> push y -- "
    0042 : 283e ; -- <0027> push rtna -- "
    0043 : 1400 ; -- <0028> y = a
    0044 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0045
    0045 : e001 ; -- <0031> br iz :fail
    0046 : 0055 ; -- <0031> "
    0047 : 0b10 ; -- <0032> i = ad1
    0048 : 0002 ; -- <0033> a = i
    0049 : fba0 ; -- <0034> call :fetch_byte
    004a : 002b ; -- <0034> "
    004b : fc00 ; -- <0034> "
    004c : 0405 ; -- <0035> b = y
    004d : e407 ; -- <0036> bn eq :again
    004e : 0045 ; -- <0036> "
-- :found -- = 0x004f
    004f : 0002 ; -- <0038> a = i
    0050 : f80a ; -- <0039> pop rtna -- rtn
    0051 : 140a ; -- <0039> pop y -- "
    0052 : 0c0a ; -- <0039> pop j -- "
    0053 : 080a ; -- <0039> pop i -- "
    0054 : fc00 ; -- <0039> rtn
-- :fail -- = 0x0055
    0055 : 0360 ; -- <0041> a = -1
    0056 : f80a ; -- <0042> pop rtna -- rtn
    0057 : 140a ; -- <0042> pop y -- "
    0058 : 0c0a ; -- <0042> pop j -- "
    0059 : 080a ; -- <0042> pop i -- "
    005a : fc00 ; -- <0042> rtn



-- driver library for JTAG UART accessed by my hardware-assisted Avalon MM master.



    005b : 3fa0 ; -- <0028> av_ad_hi = $jtag_uart_ctrl_msw_hi
    005c : 0200 ; -- <0028> "
    005d : 4206 ; -- <0029> av_ad_lo = $jtag_uart_ctrl_msw_lo
-- :poll_fifo -- = 0x005e
    005e : 000d ; -- <0031> a = av_write_data
    005f : 000e ; -- <0032> a = av_read_data
    0060 : e000 ; -- <0033> br az :poll_fifo
    0061 : 005e ; -- <0033> "
--av_ad_hi = $jtag_uart_data_lsw_hi
    0062 : 4200 ; -- <0035> av_ad_lo = $jtag_uart_data_lsw_lo
    0063 : 3401 ; -- <0036> av_write_data = b
    0064 : fc00 ; -- <0037> rtn

    0065 : 07a0 ; -- <0040> b = 0x8000
    0066 : 8000 ; -- <0040> "
    0067 : 3fa0 ; -- <0041> av_ad_hi = $::asm::jtag_uart_data_lsw_hi
    0068 : 0200 ; -- <0041> "
    0069 : 4200 ; -- <0042> av_ad_lo = $::asm::jtag_uart_data_lsw_lo
-- :poll -- = 0x006a
    006a : 000d ; -- <0044> a = av_write_data
    006b : 000e ; -- <0045> a = av_read_data
    006c : e003 ; -- <0046> br and0z :poll
    006d : 006a ; -- <0046> "
    006e : 06ff ; -- <0047> b = 0xff
    006f : c800 ; -- <0048> a = and
    0070 : 0330 ; -- <0048> "
    0071 : fc00 ; -- <0049> rtn

-- returns a character in a, or -1 if none.
    0072 : 07a0 ; -- <0053> b = 0x8000
    0073 : 8000 ; -- <0053> "
    0074 : 3fa0 ; -- <0054> av_ad_hi = $::asm::jtag_uart_data_lsw_hi
    0075 : 0200 ; -- <0054> "
    0076 : 4200 ; -- <0055> av_ad_lo = $::asm::jtag_uart_data_lsw_lo
    0077 : 000d ; -- <0056> a = av_write_data
    0078 : 000e ; -- <0057> a = av_read_data
    0079 : e403 ; -- <0058> bn and0z :gotchar
    007a : 007f ; -- <0058> "
    007b : 06ff ; -- <0059> b = 0xff
    007c : c800 ; -- <0060> a = and
    007d : 0330 ; -- <0060> "
    007e : fc00 ; -- <0061> rtn
-- :gotchar -- = 0x007f
    007f : 0360 ; -- <0063> a = -1
    0080 : fc00 ; -- <0064> rtn

-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0081
-- "0123456789abcdef"
    0081 : 3130 ; -- <0054> 10
    0082 : 3332 ; -- <0054> 32
    0083 : 3534 ; -- <0054> 54
    0084 : 3736 ; -- <0054> 76
    0085 : 3938 ; -- <0054> 98
    0086 : 6261 ; -- <0054> ba
    0087 : 6463 ; -- <0054> dc
    0088 : 6665 ; -- <0054> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0089 : 2804 ; -- <0058> push x -- func put4x
    008a : 2806 ; -- <0058> push g6 -- "
    008b : 283e ; -- <0058> push rtna -- "
    008c : 13a0 ; -- <0059> x = :hexdigits
    008d : 0081 ; -- <0059> "

    008e : 1800 ; -- <0061> g6 = a
    008f : 07a0 ; -- <0062> b = 0xF000
    0090 : f000 ; -- <0062> "
    0091 : c800 ; -- <0063> a = and
    0092 : 0330 ; -- <0063> "
    0093 : 0353 ; -- <0064> a = a>>4
    0094 : 0353 ; -- <0065> a = a>>4
    0095 : 0353 ; -- <0066> a = a>>4
    0096 : fba0 ; -- <0067> call fetch_byte
    0097 : 002b ; -- <0067> "
    0098 : fc00 ; -- <0067> "
    0099 : 0400 ; -- <0068> putchar a
    009a : fba0 ; -- <0068> "
    009b : 005b ; -- <0068> "
    009c : fc00 ; -- <0068> "

    009d : 0006 ; -- <0070> a = g6
    009e : 07a0 ; -- <0071> b = 0x0F00
    009f : 0f00 ; -- <0071> "
    00a0 : c800 ; -- <0072> a = and
    00a1 : 0330 ; -- <0072> "
    00a2 : 0353 ; -- <0073> a = a>>4
    00a3 : 0353 ; -- <0074> a = a>>4
    00a4 : fba0 ; -- <0075> call fetch_byte
    00a5 : 002b ; -- <0075> "
    00a6 : fc00 ; -- <0075> "
    00a7 : 0400 ; -- <0076> putchar a
    00a8 : fba0 ; -- <0076> "
    00a9 : 005b ; -- <0076> "
    00aa : fc00 ; -- <0076> "

    00ab : 0006 ; -- <0078> a = g6
    00ac : 06f0 ; -- <0079> b = 0x00F0
    00ad : c800 ; -- <0080> a = and
    00ae : 0330 ; -- <0080> "
    00af : 0353 ; -- <0081> a = a>>4
    00b0 : fba0 ; -- <0082> call fetch_byte
    00b1 : 002b ; -- <0082> "
    00b2 : fc00 ; -- <0082> "
    00b3 : 0400 ; -- <0083> putchar a
    00b4 : fba0 ; -- <0083> "
    00b5 : 005b ; -- <0083> "
    00b6 : fc00 ; -- <0083> "

    00b7 : 0006 ; -- <0085> a = g6
    00b8 : 060f ; -- <0086> b = 0x000F
    00b9 : c800 ; -- <0087> a = and
    00ba : 0330 ; -- <0087> "
    00bb : fba0 ; -- <0088> call fetch_byte
    00bc : 002b ; -- <0088> "
    00bd : fc00 ; -- <0088> "
    00be : 0400 ; -- <0089> putchar a
    00bf : fba0 ; -- <0089> "
    00c0 : 005b ; -- <0089> "
    00c1 : fc00 ; -- <0089> "

    00c2 : f80a ; -- <0091> pop rtna -- rtn
    00c3 : 180a ; -- <0091> pop g6 -- "
    00c4 : 100a ; -- <0091> pop x -- "
    00c5 : fc00 ; -- <0091> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    00c6 : 2802 ; -- <0095> push i -- func get4x
    00c7 : 2803 ; -- <0095> push j -- "
    00c8 : 2804 ; -- <0095> push x -- "
    00c9 : 2805 ; -- <0095> push y -- "
    00ca : 283e ; -- <0095> push rtna -- "
-- y = digit counter
-- j = sum
    00cb : 1604 ; -- <0098> y = 4
-- :again -- = 0x00cc
    00cc : fba0 ; -- <0100> getchar
    00cd : 0065 ; -- <0100> "
    00ce : fc00 ; -- <0100> "
    00cf : 2800 ; -- <0100> push a -- "
    00d0 : 0400 ; -- <0100> "
    00d1 : fba0 ; -- <0100> "
    00d2 : 005b ; -- <0100> "
    00d3 : fc00 ; -- <0100> "
    00d4 : 000a ; -- <0100> pop a -- "
    00d5 : 13a0 ; -- <0101> x = :hexdigits
    00d6 : 0081 ; -- <0101> "
    00d7 : 0a10 ; -- <0102> i = 16
    00d8 : fba0 ; -- <0103> call :find_in_fetch
    00d9 : 003f ; -- <0103> "
    00da : fc00 ; -- <0103> "
    00db : 0760 ; -- <0104> b = -1
    00dc : e007 ; -- <0105> br eq :fail
    00dd : 00f1 ; -- <0105> "
    00de : 0400 ; -- <0106> b = a
    00df : 0003 ; -- <0107> a = j
    00e0 : 0352 ; -- <0108> a = a<<4
    00e1 : c800 ; -- <0109> j = or
    00e2 : 0f34 ; -- <0109> "
    00e3 : 1360 ; -- <0110> x = -1
    00e4 : c800 ; -- <0111> y = x+y
    00e5 : 1720 ; -- <0111> "
    00e6 : 0005 ; -- <0112> a = y
    00e7 : e400 ; -- <0113> bn az :again
    00e8 : 00cc ; -- <0113> "
    00e9 : 0003 ; -- <0114> a = j
    00ea : 0600 ; -- <0115> b = 0
    00eb : f80a ; -- <0116> pop rtna -- rtn
    00ec : 140a ; -- <0116> pop y -- "
    00ed : 100a ; -- <0116> pop x -- "
    00ee : 0c0a ; -- <0116> pop j -- "
    00ef : 080a ; -- <0116> pop i -- "
    00f0 : fc00 ; -- <0116> rtn
-- :fail -- = 0x00f1
    00f1 : 0760 ; -- <0118> b = -1
    00f2 : f80a ; -- <0119> pop rtna -- rtn
    00f3 : 140a ; -- <0119> pop y -- "
    00f4 : 100a ; -- <0119> pop x -- "
    00f5 : 0c0a ; -- <0119> pop j -- "
    00f6 : 080a ; -- <0119> pop i -- "
    00f7 : fc00 ; -- <0119> rtn

-- routine waits a number of milliseconds given in a.
    00f8 : 2804 ; -- <0002> push x -- func spinwait
    00f9 : 2805 ; -- <0002> push y -- "
--patch
--rtn
    00fa : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00fb
    00fb : 13a0 ; -- <0007> x = 16666
    00fc : 411a ; -- <0007> "
    00fd : 1760 ; -- <0008> y = -1
    00fe : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00ff
-- use of the ad2 name overrides auto-nop here.
    00ff : 1320 ; -- <0012> x = ad2
    0100 : e402 ; -- <0013> bn xz :spinwait_inner
    0101 : 00ff ; -- <0013> "
    0102 : c800 ; -- <0014> a = a+b
    0103 : 0300 ; -- <0014> "
    0104 : e400 ; -- <0015> bn az :spinwait_outer
    0105 : 00fb ; -- <0015> "
    0106 : 140a ; -- <0016> pop y -- rtn
    0107 : 100a ; -- <0016> pop x -- "
    0108 : fc00 ; -- <0016> rtn



-- bit-bang a complete SPI transaction.
-- pass mo data in a, transaction width (# of bits) in b.
-- returns mi data in a
    0109 : 2802 ; -- <0005> push i -- func spi_exchange
    010a : 2803 ; -- <0005> push j -- "
    010b : 2804 ; -- <0005> push x -- "
    010c : 2805 ; -- <0005> push y -- "
    010d : 2806 ; -- <0005> push g6 -- "
    010e : 2807 ; -- <0005> push g7 -- "
-- keeping mo data in g6, mi data in g7.
    010f : 1800 ; -- <0007> g6 = a
    0110 : 1e00 ; -- <0008> g7 = 0
-- keeping bit counter in i.
    0111 : 0801 ; -- <0010> i = b
    0112 : 0f60 ; -- <0011> j = -1
    0113 : 1760 ; -- <0012> y = -1
-- :next_bit -- = 0x0114
-- output the msb of mo, along with a low clock phase and low csn.
    0114 : 0006 ; -- <0015> a = g6
    0115 : 0350 ; -- <0016> a = a>>1
    0116 : 0350 ; -- <0017> a = a>>1
    0117 : 0350 ; -- <0018> a = a>>1
    0118 : 0353 ; -- <0019> a = a>>4
    0119 : 0353 ; -- <0020> a = a>>4
    011a : 0353 ; -- <0021> a = a>>4
    011b : 3000 ; -- <0022> de0nano_adc_ctrl = a
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    011c : 1206 ; -- <0024> x = 6
-- :wait1 -- = 0x011d
    011d : c800 ; -- <0026> x = x+y
    011e : 1320 ; -- <0026> "
    011f : e402 ; -- <0027> bn xz :wait1
    0120 : 011d ; -- <0027> "
-- output a high clock phase.
    0121 : 0602 ; -- <0029> b = $de0nano_adc_sck_mask
    0122 : c800 ; -- <0030> de0nano_adc_ctrl = or
    0123 : 3334 ; -- <0030> "
-- sample mi.
    0124 : 0007 ; -- <0032> a = g7
    0125 : 0351 ; -- <0033> a = a<<1
    0126 : 040c ; -- <0034> b = de0nano_adc_ctrl
    0127 : c800 ; -- <0035> g7 = or
    0128 : 1f34 ; -- <0035> "
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    0129 : 1206 ; -- <0037> x = 6
-- :wait2 -- = 0x012a
    012a : c800 ; -- <0039> x = x+y
    012b : 1320 ; -- <0039> "
    012c : e402 ; -- <0040> bn xz :wait2
    012d : 012a ; -- <0040> "
-- shift mo bits.
    012e : 0006 ; -- <0042> a = g6
    012f : 0351 ; -- <0043> a = a<<1
    0130 : 1800 ; -- <0044> g6 = a
-- count bits
    0131 : c800 ; -- <0046> i = i+j
    0132 : 0b10 ; -- <0046> "
    0133 : e401 ; -- <0047> bn iz :next_bit
    0134 : 0114 ; -- <0047> "
-- idle the SPI bus with a high clock phase and high csn.
    0135 : 3206 ; -- <0049> de0nano_adc_ctrl = ($de0nano_adc_csn_mask | $de0nano_adc_sck_mask)
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    0136 : 1206 ; -- <0051> x = 6
-- :wait3 -- = 0x0137
    0137 : c800 ; -- <0053> x = x+y
    0138 : 1320 ; -- <0053> "
    0139 : e402 ; -- <0054> bn xz :wait3
    013a : 0137 ; -- <0054> "
    013b : 0007 ; -- <0055> a = g7
    013c : 1c0a ; -- <0056> pop g7 -- rtn
    013d : 180a ; -- <0056> pop g6 -- "
    013e : 140a ; -- <0056> pop y -- "
    013f : 100a ; -- <0056> pop x -- "
    0140 : 0c0a ; -- <0056> pop j -- "
    0141 : 080a ; -- <0056> pop i -- "
    0142 : fc00 ; -- <0056> rtn

-- pass desired ADC channel in a.
-- returns ADC reading in a.
    0143 : 283e ; -- <0060> push rtna -- func de0nano_adc_read
    0144 : 0352 ; -- <0061> a = a<<4
    0145 : 0352 ; -- <0062> a = a<<4
    0146 : 0351 ; -- <0063> a = a<<1
    0147 : 0351 ; -- <0064> a = a<<1
    0148 : 0351 ; -- <0065> a = a<<1
    0149 : 0610 ; -- <0066> b = 16
    014a : fba0 ; -- <0067> call :spi_exchange
    014b : 0109 ; -- <0067> "
    014c : fc00 ; -- <0067> "
    014d : f80a ; -- <0068> pop rtna -- rtn
    014e : fc00 ; -- <0068> rtn

-- pass desired anmux channel in a.
-- return ADC reading in a.
    014f : 283e ; -- <0072> push rtna -- func anmux_read_chn
-- set & enable analog muxer
    0150 : 0608 ; -- <0074> b = $anmux_enable_mask
    0151 : c800 ; -- <0075> anmux_ctrl = or
    0152 : 2f34 ; -- <0075> "
-- wait for muxer & current driver to settle down.  some delay here is absolutely required (per testing).
    0153 : 020a ; -- <0077> a = 10
    0154 : fba0 ; -- <0078> call :spinwait
    0155 : 00f8 ; -- <0078> "
    0156 : fc00 ; -- <0078> "

-- read ADC channel 7.  12 bits resolution.
    0157 : 0207 ; -- <0081> a = 7
    0158 : fba0 ; -- <0082> call :de0nano_adc_read
    0159 : 0143 ; -- <0082> "
    015a : fc00 ; -- <0082> "
    015b : f80a ; -- <0083> pop rtna -- rtn
    015c : fc00 ; -- <0083> rtn

-- --------------------------------------------
-- :main -- = 0x015d

-- pass counter in x.
    015d : 1200 ; -- <0081> x = 0
    015e : 1601 ; -- <0082> y = 1

-- :next_pass -- = 0x015f
    015f : 2404 ; -- <0085> leds = x
    0160 : 0004 ; -- <0086> a = x
    0161 : fba0 ; -- <0087> call :put4x
    0162 : 0089 ; -- <0087> "
    0163 : fc00 ; -- <0087> "
    0164 : 023a ; -- <0088> a = 58 -- putasc ":"
    0165 : 0400 ; -- <0088> putasc ":"
    0166 : fba0 ; -- <0088> "
    0167 : 005b ; -- <0088> "
    0168 : fc00 ; -- <0088> "
    0169 : 0220 ; -- <0089> a = 32 -- putasc " "
    016a : 0400 ; -- <0089> putasc " "
    016b : fba0 ; -- <0089> "
    016c : 005b ; -- <0089> "
    016d : fc00 ; -- <0089> "

-- unit 2 (better built sensor)
    016e : 0273 ; -- <0092> a = 115 -- putasc "s"
    016f : 0400 ; -- <0092> putasc "s"
    0170 : fba0 ; -- <0092> "
    0171 : 005b ; -- <0092> "
    0172 : fc00 ; -- <0092> "
    0173 : 0232 ; -- <0093> a = 50 -- putasc "2"
    0174 : 0400 ; -- <0093> putasc "2"
    0175 : fba0 ; -- <0093> "
    0176 : 005b ; -- <0093> "
    0177 : fc00 ; -- <0093> "
    0178 : 023d ; -- <0094> a = 61 -- putasc "="
    0179 : 0400 ; -- <0094> putasc "="
    017a : fba0 ; -- <0094> "
    017b : 005b ; -- <0094> "
    017c : fc00 ; -- <0094> "
    017d : 0200 ; -- <0095> a = 0
    017e : fba0 ; -- <0096> call :anmux_read_chn
    017f : 014f ; -- <0096> "
    0180 : fc00 ; -- <0096> "
    0181 : fba0 ; -- <0097> call :put4x
    0182 : 0089 ; -- <0097> "
    0183 : fc00 ; -- <0097> "

-- unit 1 (shoddy built sensor)
    0184 : 0220 ; -- <0100> a = 32 -- putasc " "
    0185 : 0400 ; -- <0100> putasc " "
    0186 : fba0 ; -- <0100> "
    0187 : 005b ; -- <0100> "
    0188 : fc00 ; -- <0100> "
    0189 : 0273 ; -- <0101> a = 115 -- putasc "s"
    018a : 0400 ; -- <0101> putasc "s"
    018b : fba0 ; -- <0101> "
    018c : 005b ; -- <0101> "
    018d : fc00 ; -- <0101> "
    018e : 0231 ; -- <0102> a = 49 -- putasc "1"
    018f : 0400 ; -- <0102> putasc "1"
    0190 : fba0 ; -- <0102> "
    0191 : 005b ; -- <0102> "
    0192 : fc00 ; -- <0102> "
    0193 : 023d ; -- <0103> a = 61 -- putasc "="
    0194 : 0400 ; -- <0103> putasc "="
    0195 : fba0 ; -- <0103> "
    0196 : 005b ; -- <0103> "
    0197 : fc00 ; -- <0103> "
    0198 : 0201 ; -- <0104> a = 1
    0199 : fba0 ; -- <0105> call :anmux_read_chn
    019a : 014f ; -- <0105> "
    019b : fc00 ; -- <0105> "
    019c : fba0 ; -- <0106> call :put4x
    019d : 0089 ; -- <0106> "
    019e : fc00 ; -- <0106> "

-- dead channel
    019f : 0220 ; -- <0109> a = 32 -- putasc " "
    01a0 : 0400 ; -- <0109> putasc " "
    01a1 : fba0 ; -- <0109> "
    01a2 : 005b ; -- <0109> "
    01a3 : fc00 ; -- <0109> "
    01a4 : 0272 ; -- <0110> a = 114 -- putasc "r"
    01a5 : 0400 ; -- <0110> putasc "r"
    01a6 : fba0 ; -- <0110> "
    01a7 : 005b ; -- <0110> "
    01a8 : fc00 ; -- <0110> "
    01a9 : 0265 ; -- <0111> a = 101 -- putasc "e"
    01aa : 0400 ; -- <0111> putasc "e"
    01ab : fba0 ; -- <0111> "
    01ac : 005b ; -- <0111> "
    01ad : fc00 ; -- <0111> "
    01ae : 0266 ; -- <0112> a = 102 -- putasc "f"
    01af : 0400 ; -- <0112> putasc "f"
    01b0 : fba0 ; -- <0112> "
    01b1 : 005b ; -- <0112> "
    01b2 : fc00 ; -- <0112> "
    01b3 : 023d ; -- <0113> a = 61 -- putasc "="
    01b4 : 0400 ; -- <0113> putasc "="
    01b5 : fba0 ; -- <0113> "
    01b6 : 005b ; -- <0113> "
    01b7 : fc00 ; -- <0113> "
    01b8 : 0202 ; -- <0114> a = 2
    01b9 : fba0 ; -- <0115> call :anmux_read_chn
    01ba : 014f ; -- <0115> "
    01bb : fc00 ; -- <0115> "
    01bc : fba0 ; -- <0116> call :put4x
    01bd : 0089 ; -- <0116> "
    01be : fc00 ; -- <0116> "

    01bf : 020a ; -- <0118> a = 10 -- puteol
    01c0 : 0400 ; -- <0118> puteol
    01c1 : fba0 ; -- <0118> "
    01c2 : 005b ; -- <0118> "
    01c3 : fc00 ; -- <0118> "
    01c4 : 03a0 ; -- <0119> a = 1000
    01c5 : 03e8 ; -- <0119> "
    01c6 : fba0 ; -- <0120> call :spinwait
    01c7 : 00f8 ; -- <0120> "
    01c8 : fc00 ; -- <0120> "

    01c9 : c800 ; -- <0122> x = x+y
    01ca : 1320 ; -- <0122> "
    01cb : e00f ; -- <0123> jmp :next_pass
    01cc : 015f ; -- <0123> "
        
        END;
    
