
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.

-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- JTAG UART notes:
-- - on read, program MUST test bit 15 of jtag_uart_data_lsw.  jtag uart continues to
-- report the same data byte on subsequent reads when no further data has arrived.
-- bit 15 RVALID = 1 is the only indication of proper data.
-- - reading jtag_uart_data_msw also counts as a FIFO read, causing loss of a data byte,
-- probably because jtag uart has no byteenable wires.
-- - on write, the data is lost if the write FIFO is full.  Avalon is not stalled.
-- alias_both av_ctrl          [incr counter]
--    vdefine av_write_mask                   0x0001
-- alias_src  av_waitrequest   [incr counter]



    0000 : e00f ; -- <0050> jmp :main
    0001 : 00b6 ; -- <0050> "


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0002 : 0601 ; -- <0005> b = 1
    0003 : c800 ; -- <0006> nop
    0004 : e002 ; -- <0007> br and0z :pick_byte_even
    0005 : 000e ; -- <0007> "
    0006 : 0350 ; -- <0008> a = a>>1
    0007 : 0404 ; -- <0009> b = x
    0008 : c800 ; -- <0010> nop
    0009 : d300 ; -- <0011> fetch a from a+b
    000a : 03b0 ; -- <0011> "
    000b : 0353 ; -- <0012> a = a>>4
    000c : 0353 ; -- <0013> a = a>>4
    000d : fc00 ; -- <0014> rtn
-- :pick_byte_even -- = 0x000e
    000e : 0350 ; -- <0016> a = a>>1
    000f : 0404 ; -- <0017> b = x
    0010 : c800 ; -- <0018> nop
    0011 : d300 ; -- <0019> fetch a from a+b
    0012 : 03b0 ; -- <0019> "
    0013 : 06ff ; -- <0020> b = 0xff
    0014 : c800 ; -- <0021> nop
    0015 : 0330 ; -- <0022> a = and
    0016 : fc00 ; -- <0023> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    0017 : 2002 ; -- <0031> push i -- func find_in_fetch
    0018 : 2003 ; -- <0031> push j -- "
    0019 : 2005 ; -- <0031> push y -- "
    001a : 203e ; -- <0031> push rtna -- "
    001b : 1400 ; -- <0032> y = a
    001c : 0e00 ; -- <0033> j = 0
    001d : c800 ; -- <0034> nop
    001e : e001 ; -- <0035> br 1z :fail
    001f : 0031 ; -- <0035> "
    0020 : 0f60 ; -- <0036> j = -1
    0021 : c800 ; -- <0037> nop
-- :again -- = 0x0022
    0022 : 0b10 ; -- <0039> i = i+j
    0023 : 0002 ; -- <0040> a = i
    0024 : fba0 ; -- <0041> call :fetch_byte
    0025 : 0002 ; -- <0041> "
    0026 : fc00 ; -- <0041> "
    0027 : 0405 ; -- <0042> b = y
    0028 : c800 ; -- <0043> nop
    0029 : e407 ; -- <0044> bn eq :again
    002a : 0022 ; -- <0044> "
-- :found -- = 0x002b
    002b : 0002 ; -- <0046> a = i
    002c : f808 ; -- <0047> pop rtna -- rtn
    002d : 1408 ; -- <0047> pop y -- "
    002e : 0c08 ; -- <0047> pop j -- "
    002f : 0808 ; -- <0047> pop i -- "
    0030 : fc00 ; -- <0047> rtn
-- :fail -- = 0x0031
    0031 : 0360 ; -- <0049> a = -1
    0032 : f808 ; -- <0050> pop rtna -- rtn
    0033 : 1408 ; -- <0050> pop y -- "
    0034 : 0c08 ; -- <0050> pop j -- "
    0035 : 0808 ; -- <0050> pop i -- "
    0036 : fc00 ; -- <0050> rtn



-- driver library for JTAG UART accessed by my hardware-assisted Avalon MM master.





-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0037
-- "0123456789abcdef"
    0037 : 3130 ; -- <0042> 10
    0038 : 3332 ; -- <0042> 32
    0039 : 3534 ; -- <0042> 54
    003a : 3736 ; -- <0042> 76
    003b : 3938 ; -- <0042> 98
    003c : 6261 ; -- <0042> ba
    003d : 6463 ; -- <0042> dc
    003e : 6665 ; -- <0042> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    003f : 2004 ; -- <0046> push x -- func put4x
    0040 : 2006 ; -- <0046> push g6 -- "
    0041 : 203e ; -- <0046> push rtna -- "
    0042 : 13a0 ; -- <0047> x = :hexdigits
    0043 : 0037 ; -- <0047> "

    0044 : 1800 ; -- <0049> g6 = a
    0045 : 07a0 ; -- <0050> b = 0xF000
    0046 : f000 ; -- <0050> "
    0047 : c800 ; -- <0051> nop
    0048 : 0330 ; -- <0052> a = and
    0049 : 0353 ; -- <0053> a = a>>4
    004a : 0353 ; -- <0054> a = a>>4
    004b : 0353 ; -- <0055> a = a>>4
    004c : fba0 ; -- <0056> call fetch_byte
    004d : 0002 ; -- <0056> "
    004e : fc00 ; -- <0056> "
    004f : 33a0 ; -- <0057> putchar a
    0050 : 0200 ; -- <0057> "
    0051 : 3600 ; -- <0057> "
    0052 : 2800 ; -- <0057> "

    0053 : 0006 ; -- <0059> a = g6
    0054 : 07a0 ; -- <0060> b = 0x0F00
    0055 : 0f00 ; -- <0060> "
    0056 : c800 ; -- <0061> nop
    0057 : 0330 ; -- <0062> a = and
    0058 : 0353 ; -- <0063> a = a>>4
    0059 : 0353 ; -- <0064> a = a>>4
    005a : fba0 ; -- <0065> call fetch_byte
    005b : 0002 ; -- <0065> "
    005c : fc00 ; -- <0065> "
    005d : 33a0 ; -- <0066> putchar a
    005e : 0200 ; -- <0066> "
    005f : 3600 ; -- <0066> "
    0060 : 2800 ; -- <0066> "

    0061 : 0006 ; -- <0068> a = g6
    0062 : 06f0 ; -- <0069> b = 0x00F0
    0063 : c800 ; -- <0070> nop
    0064 : 0330 ; -- <0071> a = and
    0065 : 0353 ; -- <0072> a = a>>4
    0066 : fba0 ; -- <0073> call fetch_byte
    0067 : 0002 ; -- <0073> "
    0068 : fc00 ; -- <0073> "
    0069 : 33a0 ; -- <0074> putchar a
    006a : 0200 ; -- <0074> "
    006b : 3600 ; -- <0074> "
    006c : 2800 ; -- <0074> "

    006d : 0006 ; -- <0076> a = g6
    006e : 060f ; -- <0077> b = 0x000F
    006f : c800 ; -- <0078> nop
    0070 : 0330 ; -- <0079> a = and
    0071 : fba0 ; -- <0080> call fetch_byte
    0072 : 0002 ; -- <0080> "
    0073 : fc00 ; -- <0080> "
    0074 : 33a0 ; -- <0081> putchar a
    0075 : 0200 ; -- <0081> "
    0076 : 3600 ; -- <0081> "
    0077 : 2800 ; -- <0081> "

    0078 : f808 ; -- <0083> pop rtna -- rtn
    0079 : 1808 ; -- <0083> pop g6 -- "
    007a : 1008 ; -- <0083> pop x -- "
    007b : fc00 ; -- <0083> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    007c : 2002 ; -- <0087> push i -- func get4x
    007d : 2003 ; -- <0087> push j -- "
    007e : 2004 ; -- <0087> push x -- "
    007f : 2005 ; -- <0087> push y -- "
    0080 : 203e ; -- <0087> push rtna -- "
-- y = digit counter
-- j = sum
    0081 : 1604 ; -- <0090> y = 4
-- :again -- = 0x0082
    0082 : 13a0 ; -- <0093> x = :hexdigits
    0083 : 0037 ; -- <0093> "
    0084 : 0a10 ; -- <0094> i = 16
    0085 : fba0 ; -- <0095> call :find_in_fetch
    0086 : 0017 ; -- <0095> "
    0087 : fc00 ; -- <0095> "
    0088 : 0760 ; -- <0096> b = -1
    0089 : e007 ; -- <0097> br eq :fail
    008a : 009d ; -- <0097> "
    008b : 0400 ; -- <0098> b = a
    008c : 0003 ; -- <0099> a = j
    008d : 0352 ; -- <0100> a = a<<4
    008e : c800 ; -- <0101> nop
    008f : 0f34 ; -- <0102> j = or
    0090 : 1360 ; -- <0103> x = -1
    0091 : c800 ; -- <0104> nop
    0092 : 1720 ; -- <0105> y = x+y
    0093 : e400 ; -- <0106> bn 2z :again
    0094 : 0082 ; -- <0106> "
    0095 : 0003 ; -- <0107> a = j
    0096 : 0600 ; -- <0108> b = 0
    0097 : f808 ; -- <0109> pop rtna -- rtn
    0098 : 1408 ; -- <0109> pop y -- "
    0099 : 1008 ; -- <0109> pop x -- "
    009a : 0c08 ; -- <0109> pop j -- "
    009b : 0808 ; -- <0109> pop i -- "
    009c : fc00 ; -- <0109> rtn
-- :fail -- = 0x009d
    009d : 0760 ; -- <0111> b = -1
    009e : f808 ; -- <0112> pop rtna -- rtn
    009f : 1408 ; -- <0112> pop y -- "
    00a0 : 1008 ; -- <0112> pop x -- "
    00a1 : 0c08 ; -- <0112> pop j -- "
    00a2 : 0808 ; -- <0112> pop i -- "
    00a3 : fc00 ; -- <0112> rtn

-- routine waits a number of milliseconds given in a.
    00a4 : 2004 ; -- <0002> push x -- func spinwait
    00a5 : 2005 ; -- <0002> push y -- "
--patch
--return
    00a6 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00a7
    00a7 : 13a0 ; -- <0007> x = 12500
    00a8 : 30d4 ; -- <0007> "
    00a9 : 1760 ; -- <0008> y = -1
    00aa : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00ab
    00ab : 1320 ; -- <0011> x = x+y
    00ac : c800 ; -- <0012> nop
    00ad : e400 ; -- <0013> bn 2z :spinwait_inner
    00ae : 00ab ; -- <0013> "
    00af : 0300 ; -- <0014> a = a+b
    00b0 : c800 ; -- <0015> nop
    00b1 : e404 ; -- <0016> bn z :spinwait_outer
    00b2 : 00a7 ; -- <0016> "
    00b3 : 1408 ; -- <0017> pop y -- rtn
    00b4 : 1008 ; -- <0017> pop x -- "
    00b5 : fc00 ; -- <0017> rtn



-- :main -- = 0x00b6
    00b6 : 2601 ; -- <0058> leds = 1
-- atx_ctrl = 0

-- a = 65
-- push a
-- a = 66
-- push a
-- a = 67
-- push a
-- a = 68
-- push a
-- a = 69
-- push a

-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b

-- a = 0x1234
-- call put4x

-- x = 0x1234
-- y = 1
-- a = 0
-- :nextwrite
-- m9k_addr = a
-- m9k_data = x
-- x = x+y
-- b = 1
-- nop
-- a = a+b
-- b = 1024
-- nop
-- br lt :nextwrite

--patch
    00b7 : 1200 ; -- <0101> x = 0
    00b8 : 1601 ; -- <0102> y = 1
-- :patch -- = 0x00b9

    00b9 : 0009 ; -- <0105> a = leds
    00ba : 0601 ; -- <0106> b = 1
    00bb : c800 ; -- <0107> nop
    00bc : 2700 ; -- <0108> leds = a+b

-- -- Avalon write to JTAG UART.
-- putasc A
-- putasc B
-- putasc C
-- putasc D
-- putasc E
-- putasc F
-- putasc G
-- putasc H
-- putasc I
-- putasc J
-- putasc K
-- putasc L
-- putasc M
-- putasc N

-- -- Avalon read from JTAG UART.
-- :poll_jtag_uart
-- a = 0x1234
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "/"
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_data_lsw_hi
-- av_ad_lo = $jtag_uart_data_lsw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_data_msw_hi
-- av_ad_lo = $jtag_uart_data_msw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_ctrl_lsw_hi
-- av_ad_lo = $jtag_uart_ctrl_lsw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_ctrl_msw_hi
-- av_ad_lo = $jtag_uart_ctrl_msw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "/"
-- a = 1000
-- call :spinwait
-- a = 0x5678
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "\r"
-- putasc "\n"
-- a = 1000
-- call :spinwait
-- jmp :poll_jtag_uart

-- Avalon write to SDRAM.
    00bd : 3200 ; -- <0186> av_ad_hi = 0
    00be : 3620 ; -- <0187> av_ad_lo = 0x20
    00bf : 2ba0 ; -- <0188> av_write_data = 0x6789
    00c0 : 6789 ; -- <0188> "
-- Avalon read from SDRAM.
    00c1 : 000a ; -- <0190> a = av_write_data
    00c2 : 000b ; -- <0191> a = av_read_data
    00c3 : fba0 ; -- <0192> call put4x
    00c4 : 003f ; -- <0192> "
    00c5 : fc00 ; -- <0192> "
    00c6 : 03a0 ; -- <0193> a = 1000
    00c7 : 03e8 ; -- <0193> "
    00c8 : fba0 ; -- <0194> call :spinwait
    00c9 : 00a4 ; -- <0194> "
    00ca : fc00 ; -- <0194> "

-- :verify_all -- = 0x00cb
    00cb : 03a0 ; -- <0197> a = 1000
    00cc : 03e8 ; -- <0197> "
    00cd : fba0 ; -- <0198> call :spinwait
    00ce : 00a4 ; -- <0198> "
    00cf : fc00 ; -- <0198> "
    00d0 : 022d ; -- <0199> a = 45 -- putasc {-}
    00d1 : 33a0 ; -- <0199> putasc {-}
    00d2 : 0200 ; -- <0199> "
    00d3 : 3600 ; -- <0199> "
    00d4 : 2800 ; -- <0199> "
    00d5 : 0ba0 ; -- <0200> i = 0x200
    00d6 : 0200 ; -- <0200> "
    00d7 : 0f60 ; -- <0201> j = -1
    00d8 : c800 ; -- <0202> nop
-- :next_page -- = 0x00d9
    00d9 : 0b10 ; -- <0204> i = i+j
    00da : 3002 ; -- <0205> av_ad_hi = i

-- fill SDRAM page with a pattern.
    00db : 0257 ; -- <0208> a = 87 -- putasc W
    00dc : 33a0 ; -- <0208> putasc W
    00dd : 0200 ; -- <0208> "
    00de : 3600 ; -- <0208> "
    00df : 2800 ; -- <0208> "
    00e0 : 1200 ; -- <0209> x = 0x0000
-- :fill_more -- = 0x00e1
    00e1 : 0004 ; -- <0211> a = x
    00e2 : 0760 ; -- <0212> b = 0xffff
    00e3 : c800 ; -- <0213> nop
    00e4 : 1b38 ; -- <0214> g6 = xor
    00e5 : 3002 ; -- <0215> av_ad_hi = i
    00e6 : 3404 ; -- <0216> av_ad_lo = x
    00e7 : 2806 ; -- <0217> av_write_data = g6
    00e8 : 1602 ; -- <0218> y = 2
    00e9 : c800 ; -- <0219> nop
    00ea : 1320 ; -- <0220> x = x+y
    00eb : e400 ; -- <0221> bn 2z :fill_more
    00ec : 00e1 ; -- <0221> "

-- verify pattern in SDRAM.
    00ed : 1200 ; -- <0224> x = 0x0000
-- :verify_more -- = 0x00ee
    00ee : 3002 ; -- <0226> av_ad_hi = i
    00ef : 3404 ; -- <0227> av_ad_lo = x
    00f0 : 180a ; -- <0228> g6 = av_write_data
    00f1 : 180b ; -- <0229> g6 = av_read_data
-- a = x
-- call put4x
-- putasc "="
-- a = 500
-- call :spinwait
-- a = g6
-- call put4x
-- putasc "\r"
-- putasc "\n"
-- a = 500
-- call :spinwait
    00f2 : 0004 ; -- <0241> a = x
    00f3 : 0760 ; -- <0242> b = 0xffff
    00f4 : c800 ; -- <0243> nop
    00f5 : 0338 ; -- <0244> a = xor
    00f6 : 0406 ; -- <0245> b = g6
    00f7 : c800 ; -- <0246> nop
    00f8 : e407 ; -- <0247> bn eq :sdram_err
    00f9 : 0106 ; -- <0247> "
    00fa : 1602 ; -- <0248> y = 2
    00fb : c800 ; -- <0249> nop
    00fc : 1320 ; -- <0250> x = x+y
    00fd : e400 ; -- <0251> bn 2z :verify_more
    00fe : 00ee ; -- <0251> "

    00ff : 0002 ; -- <0253> a = i
    0100 : 0600 ; -- <0254> b = 0
    0101 : c800 ; -- <0255> nop
    0102 : e404 ; -- <0256> bn z :next_page
    0103 : 00d9 ; -- <0256> "
    0104 : e00f ; -- <0257> jmp :verify_all
    0105 : 00cb ; -- <0257> "

-- :sdram_err -- = 0x0106
    0106 : 1400 ; -- <0260> y = a
    0107 : 03a0 ; -- <0261> a = 1000
    0108 : 03e8 ; -- <0261> "
    0109 : fba0 ; -- <0262> call :spinwait
    010a : 00a4 ; -- <0262> "
    010b : fc00 ; -- <0262> "
    010c : 0006 ; -- <0263> a = g6
    010d : fba0 ; -- <0264> call :put4x
    010e : 003f ; -- <0264> "
    010f : fc00 ; -- <0264> "
    0110 : 03a0 ; -- <0265> a = 1000
    0111 : 03e8 ; -- <0265> "
    0112 : fba0 ; -- <0266> call :spinwait
    0113 : 00a4 ; -- <0266> "
    0114 : fc00 ; -- <0266> "
    0115 : 0221 ; -- <0267> a = 33 -- putasc "!"
    0116 : 33a0 ; -- <0267> putasc "!"
    0117 : 0200 ; -- <0267> "
    0118 : 3600 ; -- <0267> "
    0119 : 2800 ; -- <0267> "
    011a : 023d ; -- <0268> a = 61 -- putasc "="
    011b : 33a0 ; -- <0268> putasc "="
    011c : 0200 ; -- <0268> "
    011d : 3600 ; -- <0268> "
    011e : 2800 ; -- <0268> "
    011f : 0005 ; -- <0269> a = y
    0120 : fba0 ; -- <0270> call :put4x
    0121 : 003f ; -- <0270> "
    0122 : fc00 ; -- <0270> "
    0123 : 03a0 ; -- <0271> a = 1000
    0124 : 03e8 ; -- <0271> "
    0125 : fba0 ; -- <0272> call :spinwait
    0126 : 00a4 ; -- <0272> "
    0127 : fc00 ; -- <0272> "
    0128 : 0240 ; -- <0273> a = 64 -- putasc "@"
    0129 : 33a0 ; -- <0273> putasc "@"
    012a : 0200 ; -- <0273> "
    012b : 3600 ; -- <0273> "
    012c : 2800 ; -- <0273> "
    012d : 000c ; -- <0274> a = av_ad_hi
    012e : fba0 ; -- <0275> call :put4x
    012f : 003f ; -- <0275> "
    0130 : fc00 ; -- <0275> "
    0131 : 03a0 ; -- <0276> a = 1000
    0132 : 03e8 ; -- <0276> "
    0133 : fba0 ; -- <0277> call :spinwait
    0134 : 00a4 ; -- <0277> "
    0135 : fc00 ; -- <0277> "
    0136 : 000d ; -- <0278> a = av_ad_lo
    0137 : fba0 ; -- <0279> call put4x
    0138 : 003f ; -- <0279> "
    0139 : fc00 ; -- <0279> "
-- :halt -- = 0x013a
    013a : e00f ; -- <0281> jmp :halt
    013b : 013a ; -- <0281> "

-- :wait_key_press
-- a = 0x03
-- b = keys
-- nop
-- br eq :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn eq :wait_key_release

-- getchar
-- b = 1
-- nop
-- putchar a+b

-- b = 85
-- putchar b

-- x = x+y
-- nop
-- a = x
-- call put4x

    013c : 0264 ; -- <0306> a = 100
    013d : fba0 ; -- <0307> call :spinwait
    013e : 00a4 ; -- <0307> "
    013f : fc00 ; -- <0307> "

-- b = 32
-- putchar b
-- m9k_addr = x
-- a = m9k_data
-- call put4x

-- b = 13
-- putchar b
-- b = 10
-- putchar b

    0140 : e00f ; -- <0320> jmp :patch
    0141 : 00b9 ; -- <0320> "





-- using i as index into string.
    0142 : 0a00 ; -- <0327> i = 0

-- cache the string limit in g6.
    0143 : 0210 ; -- <0330> a = 16
    0144 : 0760 ; -- <0331> b = 0xffff
    0145 : c800 ; -- <0332> nop
    0146 : 1b38 ; -- <0333> g6 = xor

-- :again -- = 0x0147
-- -- wait for keypress.
-- :wait_key_press
-- a = 0
-- b = keys
-- nop
-- br z :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn z :wait_key_release

    0147 : 0264 ; -- <0347> a = 100
    0148 : fba0 ; -- <0348> call :spinwait
    0149 : 00a4 ; -- <0348> "
    014a : fc00 ; -- <0348> "

-- increment LEDs
    014b : 0009 ; -- <0351> a = leds
    014c : 0601 ; -- <0352> b = 1
    014d : c800 ; -- <0353> nop
    014e : 2700 ; -- <0354> leds = a+b

-- fetch a word from test pattern to the UART.  its low byte is a character.
    014f : 0fa0 ; -- <0357> j = :msg
    0150 : 015e ; -- <0357> "
    0151 : c800 ; -- <0358> nop
    0152 : d310 ; -- <0359> fetch a from i+j
    0153 : 03b0 ; -- <0359> "
--    putchar a

-- increment index & wrap around end of pattern.
    0154 : 0e01 ; -- <0363> j = 1
    0155 : c800 ; -- <0364> nop
    0156 : 0b10 ; -- <0365> i = i+j
    0157 : 0c06 ; -- <0366> j = g6
    0158 : c800 ; -- <0367> nop
    0159 : e401 ; -- <0368> bn 1z :no_wrap
    015a : 015c ; -- <0368> "
    015b : 0a00 ; -- <0369> i = 0
-- :no_wrap -- = 0x015c

-- repeat forever.
    015c : e00f ; -- <0373> jmp :again
    015d : 0147 ; -- <0373> "

-- :msg -- = 0x015e
-- "1234567890abcdef\n\x00"
    015e : 3231 ; -- <0376> 21
    015f : 3433 ; -- <0376> 43
    0160 : 3635 ; -- <0376> 65
    0161 : 3837 ; -- <0376> 87
    0162 : 3039 ; -- <0376> 09
    0163 : 6261 ; -- <0376> ba
    0164 : 6463 ; -- <0376> dc
    0165 : 6665 ; -- <0376> fe
    0166 : 000a ; -- <0376>   


        
        END;
    
