
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.

-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- JTAG UART notes:
-- - on read, program MUST test bit 15 of jtag_uart_data_lsw.  jtag uart continues to
-- report the same data byte on subsequent reads when no further data has arrived.
-- bit 15 RVALID = 1 is the only indication of proper data.
-- - reading jtag_uart_data_msw also counts as a FIFO read, causing loss of a data byte,
-- probably because jtag uart has no byteenable wires.
-- - on write, the data is lost if the write FIFO is full.  Avalon is not stalled.


    0000 : e00f ; -- <0046> jmp :main
    0001 : 0136 ; -- <0046> "

-- register names for use by debugger.
    0002 : 000a ; -- <0049> ([src rstk])
-- "\r\n     a"
    0003 : 0a0d ; -- <0050>   
    0004 : 2020 ; -- <0050>   
    0005 : 2020 ; -- <0050>   
    0006 : 6120 ; -- <0050> a 
-- "       b"
    0007 : 2020 ; -- <0051>   
    0008 : 2020 ; -- <0051>   
    0009 : 2020 ; -- <0051>   
    000a : 6220 ; -- <0051> b 
-- "       i"
    000b : 2020 ; -- <0052>   
    000c : 2020 ; -- <0052>   
    000d : 2020 ; -- <0052>   
    000e : 6920 ; -- <0052> i 
-- "       j"
    000f : 2020 ; -- <0053>   
    0010 : 2020 ; -- <0053>   
    0011 : 2020 ; -- <0053>   
    0012 : 6a20 ; -- <0053> j 
-- "\r\n     x"
    0013 : 0a0d ; -- <0054>   
    0014 : 2020 ; -- <0054>   
    0015 : 2020 ; -- <0054>   
    0016 : 7820 ; -- <0054> x 
-- "       y"
    0017 : 2020 ; -- <0055>   
    0018 : 2020 ; -- <0055>   
    0019 : 2020 ; -- <0055>   
    001a : 7920 ; -- <0055> y 
-- "      g6"
    001b : 2020 ; -- <0056>   
    001c : 2020 ; -- <0056>   
    001d : 2020 ; -- <0056>   
    001e : 3667 ; -- <0056> 6g
-- "      g7"
    001f : 2020 ; -- <0057>   
    0020 : 2020 ; -- <0057>   
    0021 : 2020 ; -- <0057>   
    0022 : 3767 ; -- <0057> 7g
-- "\r\n  keys"
    0023 : 0a0d ; -- <0058>   
    0024 : 2020 ; -- <0058>   
    0025 : 656b ; -- <0058> ek
    0026 : 7379 ; -- <0058> sy
-- "    leds"
    0027 : 2020 ; -- <0059>   
    0028 : 2020 ; -- <0059>   
    0029 : 656c ; -- <0059> el
    002a : 7364 ; -- <0059> sd

-- libraries

-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    002b : 0601 ; -- <0005> b = 1
    002c : e003 ; -- <0006> br and0z :pick_byte_even
    002d : 0036 ; -- <0006> "
    002e : 0350 ; -- <0007> a = a>>1
    002f : 0404 ; -- <0008> b = x
    0030 : c800 ; -- <0009> fetch a from a+b
    0031 : d300 ; -- <0009> "
    0032 : 03b0 ; -- <0009> "
    0033 : 0353 ; -- <0010> a = a>>4
    0034 : 0353 ; -- <0011> a = a>>4
    0035 : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x0036
    0036 : 0350 ; -- <0014> a = a>>1
    0037 : 0404 ; -- <0015> b = x
    0038 : c800 ; -- <0016> fetch a from a+b
    0039 : d300 ; -- <0016> "
    003a : 03b0 ; -- <0016> "
    003b : 06ff ; -- <0017> b = 0xff
    003c : c800 ; -- <0018> a = and
    003d : 0330 ; -- <0018> "
    003e : fc00 ; -- <0019> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    003f : 2802 ; -- <0027> push i -- func find_in_fetch
    0040 : 2803 ; -- <0027> push j -- "
    0041 : 2805 ; -- <0027> push y -- "
    0042 : 283e ; -- <0027> push rtna -- "
    0043 : 1400 ; -- <0028> y = a
    0044 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0045
    0045 : e001 ; -- <0031> br iz :fail
    0046 : 0055 ; -- <0031> "
    0047 : 0b10 ; -- <0032> i = ad1
    0048 : 0002 ; -- <0033> a = i
    0049 : fba0 ; -- <0034> call :fetch_byte
    004a : 002b ; -- <0034> "
    004b : fc00 ; -- <0034> "
    004c : 0405 ; -- <0035> b = y
    004d : e407 ; -- <0036> bn eq :again
    004e : 0045 ; -- <0036> "
-- :found -- = 0x004f
    004f : 0002 ; -- <0038> a = i
    0050 : f80a ; -- <0039> pop rtna -- rtn
    0051 : 140a ; -- <0039> pop y -- "
    0052 : 0c0a ; -- <0039> pop j -- "
    0053 : 080a ; -- <0039> pop i -- "
    0054 : fc00 ; -- <0039> rtn
-- :fail -- = 0x0055
    0055 : 0360 ; -- <0041> a = -1
    0056 : f80a ; -- <0042> pop rtna -- rtn
    0057 : 140a ; -- <0042> pop y -- "
    0058 : 0c0a ; -- <0042> pop j -- "
    0059 : 080a ; -- <0042> pop i -- "
    005a : fc00 ; -- <0042> rtn



-- driver library for JTAG UART accessed by my hardware-assisted Avalon MM master.



    005b : 07a0 ; -- <0031> b = 0x8000
    005c : 8000 ; -- <0031> "
    005d : 37a0 ; -- <0032> av_ad_hi = $::asm::jtag_uart_data_lsw_hi
    005e : 0200 ; -- <0032> "
    005f : 3a00 ; -- <0033> av_ad_lo = $::asm::jtag_uart_data_lsw_lo
-- :poll -- = 0x0060
    0060 : 000b ; -- <0035> a = av_write_data
    0061 : 000c ; -- <0036> a = av_read_data
    0062 : e003 ; -- <0037> br and0z :poll
    0063 : 0060 ; -- <0037> "
    0064 : 06ff ; -- <0038> b = 0xff
    0065 : c800 ; -- <0039> a = and
    0066 : 0330 ; -- <0039> "
    0067 : fc00 ; -- <0040> rtn

-- returns a character in a, or -1 if none.
    0068 : 07a0 ; -- <0044> b = 0x8000
    0069 : 8000 ; -- <0044> "
    006a : 37a0 ; -- <0045> av_ad_hi = $::asm::jtag_uart_data_lsw_hi
    006b : 0200 ; -- <0045> "
    006c : 3a00 ; -- <0046> av_ad_lo = $::asm::jtag_uart_data_lsw_lo
    006d : 000b ; -- <0047> a = av_write_data
    006e : 000c ; -- <0048> a = av_read_data
    006f : e403 ; -- <0049> bn and0z :gotchar
    0070 : 0075 ; -- <0049> "
    0071 : 06ff ; -- <0050> b = 0xff
    0072 : c800 ; -- <0051> a = and
    0073 : 0330 ; -- <0051> "
    0074 : fc00 ; -- <0052> rtn
-- :gotchar -- = 0x0075
    0075 : 0360 ; -- <0054> a = -1
    0076 : fc00 ; -- <0055> rtn

-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0077
-- "0123456789abcdef"
    0077 : 3130 ; -- <0054> 10
    0078 : 3332 ; -- <0054> 32
    0079 : 3534 ; -- <0054> 54
    007a : 3736 ; -- <0054> 76
    007b : 3938 ; -- <0054> 98
    007c : 6261 ; -- <0054> ba
    007d : 6463 ; -- <0054> dc
    007e : 6665 ; -- <0054> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    007f : 2804 ; -- <0058> push x -- func put4x
    0080 : 2806 ; -- <0058> push g6 -- "
    0081 : 283e ; -- <0058> push rtna -- "
    0082 : 13a0 ; -- <0059> x = :hexdigits
    0083 : 0077 ; -- <0059> "

    0084 : 1800 ; -- <0061> g6 = a
    0085 : 07a0 ; -- <0062> b = 0xF000
    0086 : f000 ; -- <0062> "
    0087 : c800 ; -- <0063> a = and
    0088 : 0330 ; -- <0063> "
    0089 : 0353 ; -- <0064> a = a>>4
    008a : 0353 ; -- <0065> a = a>>4
    008b : 0353 ; -- <0066> a = a>>4
    008c : fba0 ; -- <0067> call fetch_byte
    008d : 002b ; -- <0067> "
    008e : fc00 ; -- <0067> "
    008f : 37a0 ; -- <0068> putchar a
    0090 : 0200 ; -- <0068> "
    0091 : 3a00 ; -- <0068> "
    0092 : 2c00 ; -- <0068> "

    0093 : 0006 ; -- <0070> a = g6
    0094 : 07a0 ; -- <0071> b = 0x0F00
    0095 : 0f00 ; -- <0071> "
    0096 : c800 ; -- <0072> a = and
    0097 : 0330 ; -- <0072> "
    0098 : 0353 ; -- <0073> a = a>>4
    0099 : 0353 ; -- <0074> a = a>>4
    009a : fba0 ; -- <0075> call fetch_byte
    009b : 002b ; -- <0075> "
    009c : fc00 ; -- <0075> "
    009d : 37a0 ; -- <0076> putchar a
    009e : 0200 ; -- <0076> "
    009f : 3a00 ; -- <0076> "
    00a0 : 2c00 ; -- <0076> "

    00a1 : 0006 ; -- <0078> a = g6
    00a2 : 06f0 ; -- <0079> b = 0x00F0
    00a3 : c800 ; -- <0080> a = and
    00a4 : 0330 ; -- <0080> "
    00a5 : 0353 ; -- <0081> a = a>>4
    00a6 : fba0 ; -- <0082> call fetch_byte
    00a7 : 002b ; -- <0082> "
    00a8 : fc00 ; -- <0082> "
    00a9 : 37a0 ; -- <0083> putchar a
    00aa : 0200 ; -- <0083> "
    00ab : 3a00 ; -- <0083> "
    00ac : 2c00 ; -- <0083> "

    00ad : 0006 ; -- <0085> a = g6
    00ae : 060f ; -- <0086> b = 0x000F
    00af : c800 ; -- <0087> a = and
    00b0 : 0330 ; -- <0087> "
    00b1 : fba0 ; -- <0088> call fetch_byte
    00b2 : 002b ; -- <0088> "
    00b3 : fc00 ; -- <0088> "
    00b4 : 37a0 ; -- <0089> putchar a
    00b5 : 0200 ; -- <0089> "
    00b6 : 3a00 ; -- <0089> "
    00b7 : 2c00 ; -- <0089> "

    00b8 : f80a ; -- <0091> pop rtna -- rtn
    00b9 : 180a ; -- <0091> pop g6 -- "
    00ba : 100a ; -- <0091> pop x -- "
    00bb : fc00 ; -- <0091> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    00bc : 2802 ; -- <0095> push i -- func get4x
    00bd : 2803 ; -- <0095> push j -- "
    00be : 2804 ; -- <0095> push x -- "
    00bf : 2805 ; -- <0095> push y -- "
    00c0 : 283e ; -- <0095> push rtna -- "
-- y = digit counter
-- j = sum
    00c1 : 1604 ; -- <0098> y = 4
-- :again -- = 0x00c2
    00c2 : fba0 ; -- <0100> getchar
    00c3 : 005b ; -- <0100> "
    00c4 : fc00 ; -- <0100> "
    00c5 : 2800 ; -- <0100> push a -- "
    00c6 : 37a0 ; -- <0100> "
    00c7 : 0200 ; -- <0100> "
    00c8 : 3a00 ; -- <0100> "
    00c9 : 2c00 ; -- <0100> "
    00ca : 000a ; -- <0100> pop a -- "
    00cb : 13a0 ; -- <0101> x = :hexdigits
    00cc : 0077 ; -- <0101> "
    00cd : 0a10 ; -- <0102> i = 16
    00ce : fba0 ; -- <0103> call :find_in_fetch
    00cf : 003f ; -- <0103> "
    00d0 : fc00 ; -- <0103> "
    00d1 : 0760 ; -- <0104> b = -1
    00d2 : e007 ; -- <0105> br eq :fail
    00d3 : 00e7 ; -- <0105> "
    00d4 : 0400 ; -- <0106> b = a
    00d5 : 0003 ; -- <0107> a = j
    00d6 : 0352 ; -- <0108> a = a<<4
    00d7 : c800 ; -- <0109> j = or
    00d8 : 0f34 ; -- <0109> "
    00d9 : 1360 ; -- <0110> x = -1
    00da : c800 ; -- <0111> y = x+y
    00db : 1720 ; -- <0111> "
    00dc : 0005 ; -- <0112> a = y
    00dd : e400 ; -- <0113> bn az :again
    00de : 00c2 ; -- <0113> "
    00df : 0003 ; -- <0114> a = j
    00e0 : 0600 ; -- <0115> b = 0
    00e1 : f80a ; -- <0116> pop rtna -- rtn
    00e2 : 140a ; -- <0116> pop y -- "
    00e3 : 100a ; -- <0116> pop x -- "
    00e4 : 0c0a ; -- <0116> pop j -- "
    00e5 : 080a ; -- <0116> pop i -- "
    00e6 : fc00 ; -- <0116> rtn
-- :fail -- = 0x00e7
    00e7 : 0760 ; -- <0118> b = -1
    00e8 : f80a ; -- <0119> pop rtna -- rtn
    00e9 : 140a ; -- <0119> pop y -- "
    00ea : 100a ; -- <0119> pop x -- "
    00eb : 0c0a ; -- <0119> pop j -- "
    00ec : 080a ; -- <0119> pop i -- "
    00ed : fc00 ; -- <0119> rtn

-- routine waits a number of milliseconds given in a.
    00ee : 2804 ; -- <0002> push x -- func spinwait
    00ef : 2805 ; -- <0002> push y -- "
--patch
--rtn
    00f0 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00f1
    00f1 : 13a0 ; -- <0007> x = 16666
    00f2 : 411a ; -- <0007> "
    00f3 : 1760 ; -- <0008> y = -1
    00f4 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00f5
-- use of the ad2 name overrides auto-nop here.
    00f5 : 1320 ; -- <0012> x = ad2
    00f6 : e402 ; -- <0013> bn xz :spinwait_inner
    00f7 : 00f5 ; -- <0013> "
    00f8 : c800 ; -- <0014> a = a+b
    00f9 : 0300 ; -- <0014> "
    00fa : e400 ; -- <0015> bn az :spinwait_outer
    00fb : 00f1 ; -- <0015> "
    00fc : 140a ; -- <0016> pop y -- rtn
    00fd : 100a ; -- <0016> pop x -- "
    00fe : fc00 ; -- <0016> rtn





    00ff : 1a00 ; -- <0005> $fletcher_sum1_reg = 0
    0100 : 1e00 ; -- <0006> $fletcher_sum2_reg = 0
    0101 : fc00 ; -- <0007> rtn

-- compute the modulus(255) of a number given in a.  return remainder in a.
-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x0102
    0102 : 06fe ; -- <0013> b = 0xfe
    0103 : e006 ; -- <0014> br gt :mod255_greater
    0104 : 0106 ; -- <0014> "
    0105 : fc00 ; -- <0015> rtn
-- :mod255_greater -- = 0x0106
    0106 : 07a0 ; -- <0017> b = 0xff01
    0107 : ff01 ; -- <0017> "
    0108 : c800 ; -- <0018> a = a+b
    0109 : 0300 ; -- <0018> "
    010a : e00f ; -- <0019> jmp :mod255_again
    010b : 0102 ; -- <0019> "
    010c : fc00 ; -- <0020> rtn

-- accumulate a Fletcher16 checksum, given the next byte of data in a.
    010d : 283e ; -- <0023> push rtna -- func fletcher16_input8
    010e : 0406 ; -- <0024> b = $fletcher_sum1_reg
    010f : c800 ; -- <0025> a = a+b
    0110 : 0300 ; -- <0025> "
    0111 : fba0 ; -- <0026> call :mod255
    0112 : 0102 ; -- <0026> "
    0113 : fc00 ; -- <0026> "
    0114 : 1800 ; -- <0027> $fletcher_sum1_reg = a

    0115 : 0407 ; -- <0029> b = $fletcher_sum2_reg
    0116 : c800 ; -- <0030> a = a+b
    0117 : 0300 ; -- <0030> "
    0118 : fba0 ; -- <0031> call :mod255
    0119 : 0102 ; -- <0031> "
    011a : fc00 ; -- <0031> "
    011b : 1c00 ; -- <0032> $fletcher_sum2_reg = a
    011c : f80a ; -- <0033> pop rtna -- rtn
    011d : fc00 ; -- <0033> rtn

-- accumulate a Fletcher16 checksum, given the next word of data in a.
    011e : 2802 ; -- <0036> push i -- func fletcher16_input16
    011f : 283e ; -- <0036> push rtna -- "
    0120 : 0b53 ; -- <0037> i = a>>4
    0121 : 06ff ; -- <0038> b = 0xff
    0122 : c800 ; -- <0039> a = and
    0123 : 0330 ; -- <0039> "
    0124 : fba0 ; -- <0040> call :fletcher16_input8
    0125 : 010d ; -- <0040> "
    0126 : fc00 ; -- <0040> "
    0127 : 0002 ; -- <0041> a = i
    0128 : 0353 ; -- <0042> a = a>>4
    0129 : fba0 ; -- <0043> call :fletcher16_input8
    012a : 010d ; -- <0043> "
    012b : fc00 ; -- <0043> "
    012c : f80a ; -- <0044> pop rtna -- rtn
    012d : 080a ; -- <0044> pop i -- "
    012e : fc00 ; -- <0044> rtn

-- return the combined 16-bit result of Fletcher16 checksum in a.
    012f : 0007 ; -- <0048> a = $fletcher_sum2_reg
    0130 : 0352 ; -- <0049> a = a<<4
    0131 : 0352 ; -- <0050> a = a<<4
    0132 : 0406 ; -- <0051> b = $fletcher_sum1_reg
    0133 : c800 ; -- <0052> a = or
    0134 : 0334 ; -- <0052> "
    0135 : fc00 ; -- <0053> rtn



-- --------------------------------------------
-- :main -- = 0x0136

-- copy 203 words of program over and over, to all of SDRAM.
-- x = program pointer
    0136 : fba0 ; -- <0076> call :fletcher16_init
    0137 : 00ff ; -- <0076> "
    0138 : fc00 ; -- <0076> "
    0139 : 1200 ; -- <0077> x = 0
    013a : 1601 ; -- <0078> y = 1
    013b : 3600 ; -- <0079> av_ad_hi = 0
    013c : 3a00 ; -- <0080> av_ad_lo = 0
-- :nextword -- = 0x013d
    013d : d004 ; -- <0083> fetch a from x
    013e : 03b0 ; -- <0083> "
    013f : 2c00 ; -- <0084> av_write_data = a
    0140 : fba0 ; -- <0085> call :fletcher16_input16
    0141 : 011e ; -- <0085> "
    0142 : fc00 ; -- <0085> "
    0143 : 000e ; -- <0086> a = av_ad_lo
    0144 : 0602 ; -- <0087> b = 2
    0145 : c800 ; -- <0088> a = a+b
    0146 : 0300 ; -- <0088> "
    0147 : 3800 ; -- <0089> av_ad_lo = a
    0148 : e400 ; -- <0090> bn az :same_page
    0149 : 0153 ; -- <0090> "
    014a : 000d ; -- <0091> a = av_ad_hi
    014b : 0601 ; -- <0092> b = 1
    014c : c800 ; -- <0093> a = a+b
    014d : 0300 ; -- <0093> "
    014e : 3400 ; -- <0094> av_ad_hi = a
    014f : 07a0 ; -- <0095> b = $sdram_page_beyond
    0150 : 0200 ; -- <0095> "
    0151 : e007 ; -- <0096> br eq :ram_full
    0152 : 015c ; -- <0096> "
-- :same_page -- = 0x0153
    0153 : c800 ; -- <0098> x = x+y
    0154 : 1320 ; -- <0098> "
    0155 : 0004 ; -- <0099> a = x
    0156 : 06cb ; -- <0100> b = 203
    0157 : e407 ; -- <0101> bn eq :nextword
    0158 : 013d ; -- <0101> "
    0159 : 1200 ; -- <0102> x = 0
    015a : e00f ; -- <0103> jmp :nextword
    015b : 013d ; -- <0103> "
-- :ram_full -- = 0x015c
    015c : 020a ; -- <0105> a = 10 -- puteol
    015d : 37a0 ; -- <0105> puteol
    015e : 0200 ; -- <0105> "
    015f : 3a00 ; -- <0105> "
    0160 : 2c00 ; -- <0105> "
    0161 : 0257 ; -- <0106> a = 87 -- putasc "W"
    0162 : 37a0 ; -- <0106> putasc "W"
    0163 : 0200 ; -- <0106> "
    0164 : 3a00 ; -- <0106> "
    0165 : 2c00 ; -- <0106> "
    0166 : 0252 ; -- <0107> a = 82 -- putasc "R"
    0167 : 37a0 ; -- <0107> putasc "R"
    0168 : 0200 ; -- <0107> "
    0169 : 3a00 ; -- <0107> "
    016a : 2c00 ; -- <0107> "
    016b : fba0 ; -- <0108> call :fletcher16_result
    016c : 012f ; -- <0108> "
    016d : fc00 ; -- <0108> "
    016e : fba0 ; -- <0109> call :put4x
    016f : 007f ; -- <0109> "
    0170 : fc00 ; -- <0109> "

-- read back all of SDRAM.
    0171 : fba0 ; -- <0112> call :fletcher16_init
    0172 : 00ff ; -- <0112> "
    0173 : fc00 ; -- <0112> "
    0174 : 3600 ; -- <0113> av_ad_hi = 0
    0175 : 3a00 ; -- <0114> av_ad_lo = 0
-- :read_nextword -- = 0x0176
    0176 : 000b ; -- <0116> a = av_write_data
    0177 : 000c ; -- <0117> a = av_read_data
    0178 : fba0 ; -- <0118> call :fletcher16_input16
    0179 : 011e ; -- <0118> "
    017a : fc00 ; -- <0118> "
    017b : 000e ; -- <0119> a = av_ad_lo
    017c : 0602 ; -- <0120> b = 2
    017d : c800 ; -- <0121> a = a+b
    017e : 0300 ; -- <0121> "
    017f : 3800 ; -- <0122> av_ad_lo = a
    0180 : e400 ; -- <0123> bn az :read_same_page
    0181 : 018b ; -- <0123> "
    0182 : 000d ; -- <0124> a = av_ad_hi
    0183 : 0601 ; -- <0125> b = 1
    0184 : c800 ; -- <0126> a = a+b
    0185 : 0300 ; -- <0126> "
    0186 : 3400 ; -- <0127> av_ad_hi = a
    0187 : 07a0 ; -- <0128> b = $sdram_page_beyond
    0188 : 0200 ; -- <0128> "
    0189 : e007 ; -- <0129> br eq :read_ram_full
    018a : 018d ; -- <0129> "
-- :read_same_page -- = 0x018b
    018b : e00f ; -- <0131> jmp :read_nextword
    018c : 0176 ; -- <0131> "
-- :read_ram_full -- = 0x018d
    018d : 020a ; -- <0133> a = 10 -- puteol
    018e : 37a0 ; -- <0133> puteol
    018f : 0200 ; -- <0133> "
    0190 : 3a00 ; -- <0133> "
    0191 : 2c00 ; -- <0133> "
    0192 : 0252 ; -- <0134> a = 82 -- putasc "R"
    0193 : 37a0 ; -- <0134> putasc "R"
    0194 : 0200 ; -- <0134> "
    0195 : 3a00 ; -- <0134> "
    0196 : 2c00 ; -- <0134> "
    0197 : 0244 ; -- <0135> a = 68 -- putasc "D"
    0198 : 37a0 ; -- <0135> putasc "D"
    0199 : 0200 ; -- <0135> "
    019a : 3a00 ; -- <0135> "
    019b : 2c00 ; -- <0135> "
    019c : fba0 ; -- <0136> call :fletcher16_result
    019d : 012f ; -- <0136> "
    019e : fc00 ; -- <0136> "
    019f : fba0 ; -- <0137> call :put4x
    01a0 : 007f ; -- <0137> "
    01a1 : fc00 ; -- <0137> "
    01a2 : e00f ; -- <0138> jmp :main
    01a3 : 0136 ; -- <0138> "

-- -- Avalon write to SDRAM.
-- av_ad_hi = 0
-- av_ad_lo = 0x20
-- av_write_data = 0x6789
-- -- Avalon read from SDRAM.
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait

-- :verify_all
-- a = 1000
-- call :spinwait
-- putasc {-}
-- i = 0x200
-- j = -1
-- :next_page
-- i = i+j
-- av_ad_hi = i

-- -- fill SDRAM page with a pattern.
-- putasc W
-- x = 0x0000
-- :fill_more
-- a = x
-- b = 0xffff
-- g6 = xor
-- av_ad_hi = i
-- av_ad_lo = x
-- av_write_data = g6
-- y = 2
-- x = x+y
-- bn xz :fill_more

-- -- verify pattern in SDRAM.
-- x = 0x0000
-- :verify_more
-- av_ad_hi = i
-- av_ad_lo = x
-- g6 = av_write_data
-- g6 = av_read_data
-- -- a = x
-- -- call put4x
-- -- putasc "="
-- -- a = 500
-- -- call :spinwait
-- -- a = g6
-- -- call put4x
-- -- putasc "\r"
-- -- putasc "\n"
-- -- a = 500
-- -- call :spinwait
-- a = x
-- b = 0xffff
-- a = xor
-- b = g6
-- bn eq :sdram_err
-- y = 2
-- x = x+y
-- bn xz :verify_more

-- a = i
-- b = 0
-- bn z :next_page
-- jmp :verify_all

-- :sdram_err
-- y = a
-- a = 1000
-- call :spinwait
-- a = g6
-- call :put4x
-- a = 1000
-- call :spinwait
-- putasc "!"
-- putasc "="
-- a = y
-- call :put4x
-- a = 1000
-- call :spinwait
-- putasc "@"
-- a = av_ad_hi
-- call :put4x
-- a = 1000
-- call :spinwait
-- a = av_ad_lo
-- call put4x
-- :halt
-- jmp :halt

-- -- :wait_key_press
-- -- a = 0x03
-- -- b = keys
-- -- br eq :wait_key_press
-- -- :wait_key_release
-- -- b = keys
-- -- bn eq :wait_key_release



        
        END;
    
