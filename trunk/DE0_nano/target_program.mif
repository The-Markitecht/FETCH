
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.

-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- JTAG UART notes:
-- - on read, program MUST test bit 15 of jtag_uart_data_lsw.  jtag uart continues to
-- report the same data byte on subsequent reads when no further data has arrived.
-- bit 15 RVALID = 1 is the only indication of proper data.
-- - reading jtag_uart_data_msw also counts as a FIFO read, causing loss of a data byte,
-- probably because jtag uart has no byteenable wires.
-- - on write, the data is lost if the write FIFO is full.  Avalon is not stalled.
-- alias_both av_ctrl          [incr counter]
--    vdefine av_write_mask                   0x0001
-- alias_src  av_waitrequest   [incr counter]


    0000 : e00f ; -- <0049> jmp :main
    0001 : 00df ; -- <0049> "

-- register names for use by debugger.
    0002 : 000a ; -- <0052> ([src rstk])
-- "\r      a"
    0003 : 200d ; -- <0053>   
    0004 : 2020 ; -- <0053>   
    0005 : 2020 ; -- <0053>   
    0006 : 6120 ; -- <0053> a 
-- "       b"
    0007 : 2020 ; -- <0054>   
    0008 : 2020 ; -- <0054>   
    0009 : 2020 ; -- <0054>   
    000a : 6220 ; -- <0054> b 
-- "       i"
    000b : 2020 ; -- <0055>   
    000c : 2020 ; -- <0055>   
    000d : 2020 ; -- <0055>   
    000e : 6920 ; -- <0055> i 
-- "       j"
    000f : 2020 ; -- <0056>   
    0010 : 2020 ; -- <0056>   
    0011 : 2020 ; -- <0056>   
    0012 : 6a20 ; -- <0056> j 
-- "\r      x"
    0013 : 200d ; -- <0057>   
    0014 : 2020 ; -- <0057>   
    0015 : 2020 ; -- <0057>   
    0016 : 7820 ; -- <0057> x 
-- "       y"
    0017 : 2020 ; -- <0058>   
    0018 : 2020 ; -- <0058>   
    0019 : 2020 ; -- <0058>   
    001a : 7920 ; -- <0058> y 
-- "      g6"
    001b : 2020 ; -- <0059>   
    001c : 2020 ; -- <0059>   
    001d : 2020 ; -- <0059>   
    001e : 3667 ; -- <0059> 6g
-- "      g7"
    001f : 2020 ; -- <0060>   
    0020 : 2020 ; -- <0060>   
    0021 : 2020 ; -- <0060>   
    0022 : 3767 ; -- <0060> 7g
-- "\r   keys"
    0023 : 200d ; -- <0061>   
    0024 : 2020 ; -- <0061>   
    0025 : 656b ; -- <0061> ek
    0026 : 7379 ; -- <0061> sy
-- "    leds"
    0027 : 2020 ; -- <0062>   
    0028 : 2020 ; -- <0062>   
    0029 : 656c ; -- <0062> el
    002a : 7364 ; -- <0062> sd

-- libraries

-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    002b : 0601 ; -- <0005> b = 1
    002c : c800 ; -- <0006> nop
    002d : e002 ; -- <0007> br and0z :pick_byte_even
    002e : 0037 ; -- <0007> "
    002f : 0350 ; -- <0008> a = a>>1
    0030 : 0404 ; -- <0009> b = x
    0031 : c800 ; -- <0010> nop
    0032 : d300 ; -- <0011> fetch a from a+b
    0033 : 03b0 ; -- <0011> "
    0034 : 0353 ; -- <0012> a = a>>4
    0035 : 0353 ; -- <0013> a = a>>4
    0036 : fc00 ; -- <0014> rtn
-- :pick_byte_even -- = 0x0037
    0037 : 0350 ; -- <0016> a = a>>1
    0038 : 0404 ; -- <0017> b = x
    0039 : c800 ; -- <0018> nop
    003a : d300 ; -- <0019> fetch a from a+b
    003b : 03b0 ; -- <0019> "
    003c : 06ff ; -- <0020> b = 0xff
    003d : c800 ; -- <0021> nop
    003e : 0330 ; -- <0022> a = and
    003f : fc00 ; -- <0023> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    0040 : 2802 ; -- <0031> push i -- func find_in_fetch
    0041 : 2803 ; -- <0031> push j -- "
    0042 : 2805 ; -- <0031> push y -- "
    0043 : 283e ; -- <0031> push rtna -- "
    0044 : 1400 ; -- <0032> y = a
    0045 : 0e00 ; -- <0033> j = 0
    0046 : c800 ; -- <0034> nop
    0047 : e001 ; -- <0035> br 1z :fail
    0048 : 005a ; -- <0035> "
    0049 : 0f60 ; -- <0036> j = -1
    004a : c800 ; -- <0037> nop
-- :again -- = 0x004b
    004b : 0b10 ; -- <0039> i = i+j
    004c : 0002 ; -- <0040> a = i
    004d : fba0 ; -- <0041> call :fetch_byte
    004e : 002b ; -- <0041> "
    004f : fc00 ; -- <0041> "
    0050 : 0405 ; -- <0042> b = y
    0051 : c800 ; -- <0043> nop
    0052 : e407 ; -- <0044> bn eq :again
    0053 : 004b ; -- <0044> "
-- :found -- = 0x0054
    0054 : 0002 ; -- <0046> a = i
    0055 : f80a ; -- <0047> pop rtna -- rtn
    0056 : 140a ; -- <0047> pop y -- "
    0057 : 0c0a ; -- <0047> pop j -- "
    0058 : 080a ; -- <0047> pop i -- "
    0059 : fc00 ; -- <0047> rtn
-- :fail -- = 0x005a
    005a : 0360 ; -- <0049> a = -1
    005b : f80a ; -- <0050> pop rtna -- rtn
    005c : 140a ; -- <0050> pop y -- "
    005d : 0c0a ; -- <0050> pop j -- "
    005e : 080a ; -- <0050> pop i -- "
    005f : fc00 ; -- <0050> rtn



-- driver library for JTAG UART accessed by my hardware-assisted Avalon MM master.





-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0060
-- "0123456789abcdef"
    0060 : 3130 ; -- <0047> 10
    0061 : 3332 ; -- <0047> 32
    0062 : 3534 ; -- <0047> 54
    0063 : 3736 ; -- <0047> 76
    0064 : 3938 ; -- <0047> 98
    0065 : 6261 ; -- <0047> ba
    0066 : 6463 ; -- <0047> dc
    0067 : 6665 ; -- <0047> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0068 : 2804 ; -- <0051> push x -- func put4x
    0069 : 2806 ; -- <0051> push g6 -- "
    006a : 283e ; -- <0051> push rtna -- "
    006b : 13a0 ; -- <0052> x = :hexdigits
    006c : 0060 ; -- <0052> "

    006d : 1800 ; -- <0054> g6 = a
    006e : 07a0 ; -- <0055> b = 0xF000
    006f : f000 ; -- <0055> "
    0070 : c800 ; -- <0056> nop
    0071 : 0330 ; -- <0057> a = and
    0072 : 0353 ; -- <0058> a = a>>4
    0073 : 0353 ; -- <0059> a = a>>4
    0074 : 0353 ; -- <0060> a = a>>4
    0075 : fba0 ; -- <0061> call fetch_byte
    0076 : 002b ; -- <0061> "
    0077 : fc00 ; -- <0061> "
    0078 : 37a0 ; -- <0062> putchar a
    0079 : 0200 ; -- <0062> "
    007a : 3a00 ; -- <0062> "
    007b : 2c00 ; -- <0062> "

    007c : 0006 ; -- <0064> a = g6
    007d : 07a0 ; -- <0065> b = 0x0F00
    007e : 0f00 ; -- <0065> "
    007f : c800 ; -- <0066> nop
    0080 : 0330 ; -- <0067> a = and
    0081 : 0353 ; -- <0068> a = a>>4
    0082 : 0353 ; -- <0069> a = a>>4
    0083 : fba0 ; -- <0070> call fetch_byte
    0084 : 002b ; -- <0070> "
    0085 : fc00 ; -- <0070> "
    0086 : 37a0 ; -- <0071> putchar a
    0087 : 0200 ; -- <0071> "
    0088 : 3a00 ; -- <0071> "
    0089 : 2c00 ; -- <0071> "

    008a : 0006 ; -- <0073> a = g6
    008b : 06f0 ; -- <0074> b = 0x00F0
    008c : c800 ; -- <0075> nop
    008d : 0330 ; -- <0076> a = and
    008e : 0353 ; -- <0077> a = a>>4
    008f : fba0 ; -- <0078> call fetch_byte
    0090 : 002b ; -- <0078> "
    0091 : fc00 ; -- <0078> "
    0092 : 37a0 ; -- <0079> putchar a
    0093 : 0200 ; -- <0079> "
    0094 : 3a00 ; -- <0079> "
    0095 : 2c00 ; -- <0079> "

    0096 : 0006 ; -- <0081> a = g6
    0097 : 060f ; -- <0082> b = 0x000F
    0098 : c800 ; -- <0083> nop
    0099 : 0330 ; -- <0084> a = and
    009a : fba0 ; -- <0085> call fetch_byte
    009b : 002b ; -- <0085> "
    009c : fc00 ; -- <0085> "
    009d : 37a0 ; -- <0086> putchar a
    009e : 0200 ; -- <0086> "
    009f : 3a00 ; -- <0086> "
    00a0 : 2c00 ; -- <0086> "

    00a1 : f80a ; -- <0088> pop rtna -- rtn
    00a2 : 180a ; -- <0088> pop g6 -- "
    00a3 : 100a ; -- <0088> pop x -- "
    00a4 : fc00 ; -- <0088> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    00a5 : 2802 ; -- <0092> push i -- func get4x
    00a6 : 2803 ; -- <0092> push j -- "
    00a7 : 2804 ; -- <0092> push x -- "
    00a8 : 2805 ; -- <0092> push y -- "
    00a9 : 283e ; -- <0092> push rtna -- "
-- y = digit counter
-- j = sum
    00aa : 1604 ; -- <0095> y = 4
-- :again -- = 0x00ab
    00ab : 13a0 ; -- <0098> x = :hexdigits
    00ac : 0060 ; -- <0098> "
    00ad : 0a10 ; -- <0099> i = 16
    00ae : fba0 ; -- <0100> call :find_in_fetch
    00af : 0040 ; -- <0100> "
    00b0 : fc00 ; -- <0100> "
    00b1 : 0760 ; -- <0101> b = -1
    00b2 : e007 ; -- <0102> br eq :fail
    00b3 : 00c6 ; -- <0102> "
    00b4 : 0400 ; -- <0103> b = a
    00b5 : 0003 ; -- <0104> a = j
    00b6 : 0352 ; -- <0105> a = a<<4
    00b7 : c800 ; -- <0106> nop
    00b8 : 0f34 ; -- <0107> j = or
    00b9 : 1360 ; -- <0108> x = -1
    00ba : c800 ; -- <0109> nop
    00bb : 1720 ; -- <0110> y = x+y
    00bc : e400 ; -- <0111> bn 2z :again
    00bd : 00ab ; -- <0111> "
    00be : 0003 ; -- <0112> a = j
    00bf : 0600 ; -- <0113> b = 0
    00c0 : f80a ; -- <0114> pop rtna -- rtn
    00c1 : 140a ; -- <0114> pop y -- "
    00c2 : 100a ; -- <0114> pop x -- "
    00c3 : 0c0a ; -- <0114> pop j -- "
    00c4 : 080a ; -- <0114> pop i -- "
    00c5 : fc00 ; -- <0114> rtn
-- :fail -- = 0x00c6
    00c6 : 0760 ; -- <0116> b = -1
    00c7 : f80a ; -- <0117> pop rtna -- rtn
    00c8 : 140a ; -- <0117> pop y -- "
    00c9 : 100a ; -- <0117> pop x -- "
    00ca : 0c0a ; -- <0117> pop j -- "
    00cb : 080a ; -- <0117> pop i -- "
    00cc : fc00 ; -- <0117> rtn

-- routine waits a number of milliseconds given in a.
    00cd : 2804 ; -- <0002> push x -- func spinwait
    00ce : 2805 ; -- <0002> push y -- "
--patch
--return
    00cf : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00d0
    00d0 : 13a0 ; -- <0007> x = 12500
    00d1 : 30d4 ; -- <0007> "
    00d2 : 1760 ; -- <0008> y = -1
    00d3 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00d4
    00d4 : 1320 ; -- <0011> x = x+y
    00d5 : c800 ; -- <0012> nop
    00d6 : e400 ; -- <0013> bn 2z :spinwait_inner
    00d7 : 00d4 ; -- <0013> "
    00d8 : 0300 ; -- <0014> a = a+b
    00d9 : c800 ; -- <0015> nop
    00da : e404 ; -- <0016> bn z :spinwait_outer
    00db : 00d0 ; -- <0016> "
    00dc : 140a ; -- <0017> pop y -- rtn
    00dd : 100a ; -- <0017> pop x -- "
    00de : fc00 ; -- <0017> rtn



-- --------------------------------------------
-- :main -- = 0x00df
    00df : 2601 ; -- <0072> leds = 1
-- atx_ctrl = 0

-- a = 65
-- push a
-- a = 66
-- push a
-- a = 67
-- push a
-- a = 68
-- push a
-- a = 69
-- push a

-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b

-- a = 0x1234
-- call put4x

-- x = 0x1234
-- y = 1
-- a = 0
-- :nextwrite
-- m9k_addr = a
-- m9k_data = x
-- x = x+y
-- b = 1
-- nop
-- a = a+b
-- b = 1024
-- nop
-- br lt :nextwrite

--patch
    00e0 : 1200 ; -- <0115> x = 0
    00e1 : 1601 ; -- <0116> y = 1
-- :patch -- = 0x00e2

    00e2 : 0009 ; -- <0119> a = leds
    00e3 : 0601 ; -- <0120> b = 1
    00e4 : c800 ; -- <0121> nop
    00e5 : 2700 ; -- <0122> leds = a+b

-- -- Avalon write to JTAG UART.
-- putasc A
-- putasc B
-- putasc C
-- putasc D
-- putasc E
-- putasc F
-- putasc G
-- putasc H
-- putasc I
-- putasc J
-- putasc K
-- putasc L
-- putasc M
-- putasc N

-- -- Avalon read from JTAG UART.
-- :poll_jtag_uart
-- a = 0x1234
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "/"
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_data_lsw_hi
-- av_ad_lo = $jtag_uart_data_lsw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_data_msw_hi
-- av_ad_lo = $jtag_uart_data_msw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_ctrl_lsw_hi
-- av_ad_lo = $jtag_uart_ctrl_lsw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_ctrl_msw_hi
-- av_ad_lo = $jtag_uart_ctrl_msw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "/"
-- a = 1000
-- call :spinwait
-- a = 0x5678
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "\r"
-- putasc "\n"
-- a = 1000
-- call :spinwait
-- jmp :poll_jtag_uart

-- Avalon write to SDRAM.
    00e6 : 3600 ; -- <0200> av_ad_hi = 0
    00e7 : 3a20 ; -- <0201> av_ad_lo = 0x20
    00e8 : 2fa0 ; -- <0202> av_write_data = 0x6789
    00e9 : 6789 ; -- <0202> "
-- Avalon read from SDRAM.
    00ea : 000b ; -- <0204> a = av_write_data
    00eb : 000c ; -- <0205> a = av_read_data
    00ec : fba0 ; -- <0206> call put4x
    00ed : 0068 ; -- <0206> "
    00ee : fc00 ; -- <0206> "
    00ef : 03a0 ; -- <0207> a = 1000
    00f0 : 03e8 ; -- <0207> "
    00f1 : fba0 ; -- <0208> call :spinwait
    00f2 : 00cd ; -- <0208> "
    00f3 : fc00 ; -- <0208> "

-- :verify_all -- = 0x00f4
    00f4 : 03a0 ; -- <0211> a = 1000
    00f5 : 03e8 ; -- <0211> "
    00f6 : fba0 ; -- <0212> call :spinwait
    00f7 : 00cd ; -- <0212> "
    00f8 : fc00 ; -- <0212> "
    00f9 : 022d ; -- <0213> a = 45 -- putasc {-}
    00fa : 37a0 ; -- <0213> putasc {-}
    00fb : 0200 ; -- <0213> "
    00fc : 3a00 ; -- <0213> "
    00fd : 2c00 ; -- <0213> "
    00fe : 0ba0 ; -- <0214> i = 0x200
    00ff : 0200 ; -- <0214> "
    0100 : 0f60 ; -- <0215> j = -1
    0101 : c800 ; -- <0216> nop
-- :next_page -- = 0x0102
    0102 : 0b10 ; -- <0218> i = i+j
    0103 : 3402 ; -- <0219> av_ad_hi = i

-- fill SDRAM page with a pattern.
    0104 : 0257 ; -- <0222> a = 87 -- putasc W
    0105 : 37a0 ; -- <0222> putasc W
    0106 : 0200 ; -- <0222> "
    0107 : 3a00 ; -- <0222> "
    0108 : 2c00 ; -- <0222> "
    0109 : 1200 ; -- <0223> x = 0x0000
-- :fill_more -- = 0x010a
    010a : 0004 ; -- <0225> a = x
    010b : 0760 ; -- <0226> b = 0xffff
    010c : c800 ; -- <0227> nop
    010d : 1b38 ; -- <0228> g6 = xor
    010e : 3402 ; -- <0229> av_ad_hi = i
    010f : 3804 ; -- <0230> av_ad_lo = x
    0110 : 2c06 ; -- <0231> av_write_data = g6
    0111 : 1602 ; -- <0232> y = 2
    0112 : c800 ; -- <0233> nop
    0113 : 1320 ; -- <0234> x = x+y
    0114 : e400 ; -- <0235> bn 2z :fill_more
    0115 : 010a ; -- <0235> "

-- verify pattern in SDRAM.
    0116 : 1200 ; -- <0238> x = 0x0000
-- :verify_more -- = 0x0117
    0117 : 3402 ; -- <0240> av_ad_hi = i
    0118 : 3804 ; -- <0241> av_ad_lo = x
    0119 : 180b ; -- <0242> g6 = av_write_data
    011a : 180c ; -- <0243> g6 = av_read_data
-- a = x
-- call put4x
-- putasc "="
-- a = 500
-- call :spinwait
-- a = g6
-- call put4x
-- putasc "\r"
-- putasc "\n"
-- a = 500
-- call :spinwait
    011b : 0004 ; -- <0255> a = x
    011c : 0760 ; -- <0256> b = 0xffff
    011d : c800 ; -- <0257> nop
    011e : 0338 ; -- <0258> a = xor
    011f : 0406 ; -- <0259> b = g6
    0120 : c800 ; -- <0260> nop
    0121 : e407 ; -- <0261> bn eq :sdram_err
    0122 : 012f ; -- <0261> "
    0123 : 1602 ; -- <0262> y = 2
    0124 : c800 ; -- <0263> nop
    0125 : 1320 ; -- <0264> x = x+y
    0126 : e400 ; -- <0265> bn 2z :verify_more
    0127 : 0117 ; -- <0265> "

    0128 : 0002 ; -- <0267> a = i
    0129 : 0600 ; -- <0268> b = 0
    012a : c800 ; -- <0269> nop
    012b : e404 ; -- <0270> bn z :next_page
    012c : 0102 ; -- <0270> "
    012d : e00f ; -- <0271> jmp :verify_all
    012e : 00f4 ; -- <0271> "

-- :sdram_err -- = 0x012f
    012f : 1400 ; -- <0274> y = a
    0130 : 03a0 ; -- <0275> a = 1000
    0131 : 03e8 ; -- <0275> "
    0132 : fba0 ; -- <0276> call :spinwait
    0133 : 00cd ; -- <0276> "
    0134 : fc00 ; -- <0276> "
    0135 : 0006 ; -- <0277> a = g6
    0136 : fba0 ; -- <0278> call :put4x
    0137 : 0068 ; -- <0278> "
    0138 : fc00 ; -- <0278> "
    0139 : 03a0 ; -- <0279> a = 1000
    013a : 03e8 ; -- <0279> "
    013b : fba0 ; -- <0280> call :spinwait
    013c : 00cd ; -- <0280> "
    013d : fc00 ; -- <0280> "
    013e : 0221 ; -- <0281> a = 33 -- putasc "!"
    013f : 37a0 ; -- <0281> putasc "!"
    0140 : 0200 ; -- <0281> "
    0141 : 3a00 ; -- <0281> "
    0142 : 2c00 ; -- <0281> "
    0143 : 023d ; -- <0282> a = 61 -- putasc "="
    0144 : 37a0 ; -- <0282> putasc "="
    0145 : 0200 ; -- <0282> "
    0146 : 3a00 ; -- <0282> "
    0147 : 2c00 ; -- <0282> "
    0148 : 0005 ; -- <0283> a = y
    0149 : fba0 ; -- <0284> call :put4x
    014a : 0068 ; -- <0284> "
    014b : fc00 ; -- <0284> "
    014c : 03a0 ; -- <0285> a = 1000
    014d : 03e8 ; -- <0285> "
    014e : fba0 ; -- <0286> call :spinwait
    014f : 00cd ; -- <0286> "
    0150 : fc00 ; -- <0286> "
    0151 : 0240 ; -- <0287> a = 64 -- putasc "@"
    0152 : 37a0 ; -- <0287> putasc "@"
    0153 : 0200 ; -- <0287> "
    0154 : 3a00 ; -- <0287> "
    0155 : 2c00 ; -- <0287> "
    0156 : 000d ; -- <0288> a = av_ad_hi
    0157 : fba0 ; -- <0289> call :put4x
    0158 : 0068 ; -- <0289> "
    0159 : fc00 ; -- <0289> "
    015a : 03a0 ; -- <0290> a = 1000
    015b : 03e8 ; -- <0290> "
    015c : fba0 ; -- <0291> call :spinwait
    015d : 00cd ; -- <0291> "
    015e : fc00 ; -- <0291> "
    015f : 000e ; -- <0292> a = av_ad_lo
    0160 : fba0 ; -- <0293> call put4x
    0161 : 0068 ; -- <0293> "
    0162 : fc00 ; -- <0293> "
-- :halt -- = 0x0163
    0163 : e00f ; -- <0295> jmp :halt
    0164 : 0163 ; -- <0295> "

-- :wait_key_press
-- a = 0x03
-- b = keys
-- nop
-- br eq :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn eq :wait_key_release

-- getchar
-- b = 1
-- nop
-- putchar a+b

-- b = 85
-- putchar b

-- x = x+y
-- nop
-- a = x
-- call put4x

    0165 : 0264 ; -- <0320> a = 100
    0166 : fba0 ; -- <0321> call :spinwait
    0167 : 00cd ; -- <0321> "
    0168 : fc00 ; -- <0321> "

-- b = 32
-- putchar b
-- m9k_addr = x
-- a = m9k_data
-- call put4x

-- b = 13
-- putchar b
-- b = 10
-- putchar b

    0169 : e00f ; -- <0334> jmp :patch
    016a : 00e2 ; -- <0334> "





-- using i as index into string.
    016b : 0a00 ; -- <0341> i = 0

-- cache the string limit in g6.
    016c : 0210 ; -- <0344> a = 16
    016d : 0760 ; -- <0345> b = 0xffff
    016e : c800 ; -- <0346> nop
    016f : 1b38 ; -- <0347> g6 = xor

-- :again -- = 0x0170
-- -- wait for keypress.
-- :wait_key_press
-- a = 0
-- b = keys
-- nop
-- br z :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn z :wait_key_release

    0170 : 0264 ; -- <0361> a = 100
    0171 : fba0 ; -- <0362> call :spinwait
    0172 : 00cd ; -- <0362> "
    0173 : fc00 ; -- <0362> "

-- increment LEDs
    0174 : 0009 ; -- <0365> a = leds
    0175 : 0601 ; -- <0366> b = 1
    0176 : c800 ; -- <0367> nop
    0177 : 2700 ; -- <0368> leds = a+b

-- fetch a word from test pattern to the UART.  its low byte is a character.
    0178 : 0fa0 ; -- <0371> j = :msg
    0179 : 0187 ; -- <0371> "
    017a : c800 ; -- <0372> nop
    017b : d310 ; -- <0373> fetch a from i+j
    017c : 03b0 ; -- <0373> "
--    putchar a

-- increment index & wrap around end of pattern.
    017d : 0e01 ; -- <0377> j = 1
    017e : c800 ; -- <0378> nop
    017f : 0b10 ; -- <0379> i = i+j
    0180 : 0c06 ; -- <0380> j = g6
    0181 : c800 ; -- <0381> nop
    0182 : e401 ; -- <0382> bn 1z :no_wrap
    0183 : 0185 ; -- <0382> "
    0184 : 0a00 ; -- <0383> i = 0
-- :no_wrap -- = 0x0185

-- repeat forever.
    0185 : e00f ; -- <0387> jmp :again
    0186 : 0170 ; -- <0387> "

-- :msg -- = 0x0187
-- "1234567890abcdef\n\x00"
    0187 : 3231 ; -- <0390> 21
    0188 : 3433 ; -- <0390> 43
    0189 : 3635 ; -- <0390> 65
    018a : 3837 ; -- <0390> 87
    018b : 3039 ; -- <0390> 09
    018c : 6261 ; -- <0390> ba
    018d : 6463 ; -- <0390> dc
    018e : 6665 ; -- <0390> fe
    018f : 000a ; -- <0390>   


        
        END;
    
