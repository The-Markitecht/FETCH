
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.


-- I/O expansion bus.




    0000 : e00f ; -- <0056> jmp :main
    0001 : 0182 ; -- <0056> "

-- register names for use by debugger.
    0002 : 0014 ; -- <0059> ($counter + 1)
-- "       a"
    0003 : 2020 ; -- <0060>   
    0004 : 2020 ; -- <0060>   
    0005 : 2020 ; -- <0060>   
    0006 : 6120 ; -- <0060> a 
-- "       b"
    0007 : 2020 ; -- <0061>   
    0008 : 2020 ; -- <0061>   
    0009 : 2020 ; -- <0061>   
    000a : 6220 ; -- <0061> b 
-- "       i"
    000b : 2020 ; -- <0062>   
    000c : 2020 ; -- <0062>   
    000d : 2020 ; -- <0062>   
    000e : 6920 ; -- <0062> i 
-- "       j"
    000f : 2020 ; -- <0063>   
    0010 : 2020 ; -- <0063>   
    0011 : 2020 ; -- <0063>   
    0012 : 6a20 ; -- <0063> j 
-- "       x"
    0013 : 2020 ; -- <0064>   
    0014 : 2020 ; -- <0064>   
    0015 : 2020 ; -- <0064>   
    0016 : 7820 ; -- <0064> x 
-- "       y"
    0017 : 2020 ; -- <0065>   
    0018 : 2020 ; -- <0065>   
    0019 : 2020 ; -- <0065>   
    001a : 7920 ; -- <0065> y 
-- "      g6"
    001b : 2020 ; -- <0066>   
    001c : 2020 ; -- <0066>   
    001d : 2020 ; -- <0066>   
    001e : 3667 ; -- <0066> 6g
-- "      g7"
    001f : 2020 ; -- <0067>   
    0020 : 2020 ; -- <0067>   
    0021 : 2020 ; -- <0067>   
    0022 : 3767 ; -- <0067> 7g
-- "--  rstk"
    0023 : 2f2f ; -- <0068> --
    0024 : 2020 ; -- <0068>   
    0025 : 7372 ; -- <0068> sr
    0026 : 6b74 ; -- <0068> kt
-- "--adcctl"
    0027 : 2f2f ; -- <0069> --
    0028 : 6461 ; -- <0069> da
    0029 : 6363 ; -- <0069> cc
    002a : 6c74 ; -- <0069> lt
-- "  ev_pri"
    002b : 2020 ; -- <0070>   
    002c : 7665 ; -- <0070> ve
    002d : 705f ; -- <0070> p_
    002e : 6972 ; -- <0070> ir
-- " timer_0"
    002f : 7420 ; -- <0071> t 
    0030 : 6d69 ; -- <0071> mi
    0031 : 7265 ; -- <0071> re
    0032 : 305f ; -- <0071> 0_
-- "av_wr_dt"
    0033 : 7661 ; -- <0072> va
    0034 : 775f ; -- <0072> w_
    0035 : 5f72 ; -- <0072> _r
    0036 : 7464 ; -- <0072> td
-- "--avrddt"
    0037 : 2f2f ; -- <0073> --
    0038 : 7661 ; -- <0073> va
    0039 : 6472 ; -- <0073> dr
    003a : 7464 ; -- <0073> td
-- "av_ad_hi"
    003b : 7661 ; -- <0074> va
    003c : 615f ; -- <0074> a_
    003d : 5f64 ; -- <0074> _d
    003e : 6968 ; -- <0074> ih
-- "av_ad_lo"
    003f : 7661 ; -- <0075> va
    0040 : 615f ; -- <0075> a_
    0041 : 5f64 ; -- <0075> _d
    0042 : 6f6c ; -- <0075> ol
-- "atx_data"
    0043 : 7461 ; -- <0076> ta
    0044 : 5f78 ; -- <0076> _x
    0045 : 6164 ; -- <0076> ad
    0046 : 6174 ; -- <0076> at
-- "atx_ctrl"
    0047 : 7461 ; -- <0077> ta
    0048 : 5f78 ; -- <0077> _x
    0049 : 7463 ; -- <0077> tc
    004a : 6c72 ; -- <0077> lr
-- "exp_data"
    004b : 7865 ; -- <0078> xe
    004c : 5f70 ; -- <0078> _p
    004d : 6164 ; -- <0078> ad
    004e : 6174 ; -- <0078> at
-- "exp_addr"
    004f : 7865 ; -- <0079> xe
    0050 : 5f70 ; -- <0079> _p
    0051 : 6461 ; -- <0079> da
    0052 : 7264 ; -- <0079> rd

-- libraries

-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0053 : 0601 ; -- <0005> b = 1
    0054 : e003 ; -- <0006> br and0z :pick_byte_even
    0055 : 005e ; -- <0006> "
    0056 : 0350 ; -- <0007> a = a>>1
    0057 : 0404 ; -- <0008> b = x
    0058 : c800 ; -- <0009> fetch a from a+b
    0059 : d300 ; -- <0009> "
    005a : 03b0 ; -- <0009> "
    005b : 0353 ; -- <0010> a = a>>4
    005c : 0353 ; -- <0011> a = a>>4
    005d : fc00 ; -- <0012> rtn
-- :pick_byte_even -- = 0x005e
    005e : 0350 ; -- <0014> a = a>>1
    005f : 0404 ; -- <0015> b = x
    0060 : c800 ; -- <0016> fetch a from a+b
    0061 : d300 ; -- <0016> "
    0062 : 03b0 ; -- <0016> "
    0063 : 06ff ; -- <0017> b = 0xff
    0064 : c800 ; -- <0018> a = and
    0065 : 0330 ; -- <0018> "
    0066 : fc00 ; -- <0019> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    0067 : 2002 ; -- <0027> push i -- func find_in_fetch
    0068 : 2003 ; -- <0027> push j -- "
    0069 : 2005 ; -- <0027> push y -- "
    006a : 203e ; -- <0027> push rtna -- "
    006b : 1400 ; -- <0028> y = a
    006c : 0f60 ; -- <0029> j = -1
-- :again -- = 0x006d
    006d : e001 ; -- <0031> br iz :fail
    006e : 007d ; -- <0031> "
    006f : 0b10 ; -- <0032> i = ad1
    0070 : 0002 ; -- <0033> a = i
    0071 : fba0 ; -- <0034> call :fetch_byte
    0072 : 0053 ; -- <0034> "
    0073 : fc00 ; -- <0034> "
    0074 : 0405 ; -- <0035> b = y
    0075 : e407 ; -- <0036> bn eq :again
    0076 : 006d ; -- <0036> "
-- :found -- = 0x0077
    0077 : 0002 ; -- <0038> a = i
    0078 : f808 ; -- <0039> pop rtna -- rtn
    0079 : 1408 ; -- <0039> pop y -- "
    007a : 0c08 ; -- <0039> pop j -- "
    007b : 0808 ; -- <0039> pop i -- "
    007c : fc00 ; -- <0039> rtn
-- :fail -- = 0x007d
    007d : 0360 ; -- <0041> a = -1
    007e : f808 ; -- <0042> pop rtna -- rtn
    007f : 1408 ; -- <0042> pop y -- "
    0080 : 0c08 ; -- <0042> pop j -- "
    0081 : 0808 ; -- <0042> pop i -- "
    0082 : fc00 ; -- <0042> rtn



-- driver library for my_uart_v2 simple async transceiver.




-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
    0083 : 2004 ; -- <0035> push x -- func putchar_atx

    0084 : 1000 ; -- <0037> x = a

-- wait for UART to be idle (not busy).
    0085 : 0202 ; -- <0040> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x0086
    0086 : 0411 ; -- <0042> b = atx_ctrl
    0087 : e403 ; -- <0043> bn and0z :pcatx_wait_for_idle
    0088 : 0086 ; -- <0043> "

-- push word to the UART.  its low byte is a character.
    0089 : 4004 ; -- <0046> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    008a : 4601 ; -- <0051> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    008b : 0202 ; -- <0054> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x008c
    008c : 0411 ; -- <0056> b = atx_ctrl
    008d : e003 ; -- <0057> br and0z :pcatx_wait_for_busy
    008e : 008c ; -- <0057> "
    008f : 4600 ; -- <0058> atx_ctrl = 0
    0090 : 1008 ; -- <0059> pop x -- rtn
    0091 : fc00 ; -- <0059> rtn

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- wait until UART is busy, then idle.
    0092 : 0204 ; -- <0065> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0093
    0093 : 0411 ; -- <0067> b = atx_ctrl
    0094 : e003 ; -- <0068> br and0z :wait_for_busy
    0095 : 0093 ; -- <0068> "
-- :wait_for_idle -- = 0x0096
    0096 : 0411 ; -- <0070> b = atx_ctrl
    0097 : e403 ; -- <0071> bn and0z :wait_for_idle
    0098 : 0096 ; -- <0071> "
    0099 : 0010 ; -- <0072> a = atx_data
    009a : fc00 ; -- <0073> rtn

-- returns a character in a, or -1 if none.
-- this version can miss characters if not polled while the character is arriving.
-- check for UART is busy, then idle.
    009b : 0204 ; -- <0079> a = $arx_busy_mask
    009c : 0411 ; -- <0080> b = atx_ctrl
    009d : e003 ; -- <0081> br and0z :none
    009e : 00a4 ; -- <0081> "
-- :wait_for_idle -- = 0x009f
    009f : 0411 ; -- <0083> b = atx_ctrl
    00a0 : e403 ; -- <0084> bn and0z :wait_for_idle
    00a1 : 009f ; -- <0084> "
    00a2 : 0010 ; -- <0085> a = atx_data
    00a3 : fc00 ; -- <0086> rtn
-- :none -- = 0x00a4
    00a4 : 0360 ; -- <0088> a = -1
    00a5 : fc00 ; -- <0089> rtn



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00a6
-- "0123456789abcdef"
    00a6 : 3130 ; -- <0054> 10
    00a7 : 3332 ; -- <0054> 32
    00a8 : 3534 ; -- <0054> 54
    00a9 : 3736 ; -- <0054> 76
    00aa : 3938 ; -- <0054> 98
    00ab : 6261 ; -- <0054> ba
    00ac : 6463 ; -- <0054> dc
    00ad : 6665 ; -- <0054> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    00ae : 2004 ; -- <0058> push x -- func put4x
    00af : 2006 ; -- <0058> push g6 -- "
    00b0 : 203e ; -- <0058> push rtna -- "
    00b1 : 13a0 ; -- <0059> x = :hexdigits
    00b2 : 00a6 ; -- <0059> "

    00b3 : 1800 ; -- <0061> g6 = a
    00b4 : 07a0 ; -- <0062> b = 0xF000
    00b5 : f000 ; -- <0062> "
    00b6 : c800 ; -- <0063> a = and
    00b7 : 0330 ; -- <0063> "
    00b8 : 0353 ; -- <0064> a = a>>4
    00b9 : 0353 ; -- <0065> a = a>>4
    00ba : 0353 ; -- <0066> a = a>>4
    00bb : fba0 ; -- <0067> call fetch_byte
    00bc : 0053 ; -- <0067> "
    00bd : fc00 ; -- <0067> "
    00be : 0000 ; -- <0068> a = a -- putchar a
    00bf : fba0 ; -- <0068> putchar a
    00c0 : 0083 ; -- <0068> "
    00c1 : fc00 ; -- <0068> "

    00c2 : 0006 ; -- <0070> a = g6
    00c3 : 07a0 ; -- <0071> b = 0x0F00
    00c4 : 0f00 ; -- <0071> "
    00c5 : c800 ; -- <0072> a = and
    00c6 : 0330 ; -- <0072> "
    00c7 : 0353 ; -- <0073> a = a>>4
    00c8 : 0353 ; -- <0074> a = a>>4
    00c9 : fba0 ; -- <0075> call fetch_byte
    00ca : 0053 ; -- <0075> "
    00cb : fc00 ; -- <0075> "
    00cc : 0000 ; -- <0076> a = a -- putchar a
    00cd : fba0 ; -- <0076> putchar a
    00ce : 0083 ; -- <0076> "
    00cf : fc00 ; -- <0076> "

    00d0 : 0006 ; -- <0078> a = g6
    00d1 : 06f0 ; -- <0079> b = 0x00F0
    00d2 : c800 ; -- <0080> a = and
    00d3 : 0330 ; -- <0080> "
    00d4 : 0353 ; -- <0081> a = a>>4
    00d5 : fba0 ; -- <0082> call fetch_byte
    00d6 : 0053 ; -- <0082> "
    00d7 : fc00 ; -- <0082> "
    00d8 : 0000 ; -- <0083> a = a -- putchar a
    00d9 : fba0 ; -- <0083> putchar a
    00da : 0083 ; -- <0083> "
    00db : fc00 ; -- <0083> "

    00dc : 0006 ; -- <0085> a = g6
    00dd : 060f ; -- <0086> b = 0x000F
    00de : c800 ; -- <0087> a = and
    00df : 0330 ; -- <0087> "
    00e0 : fba0 ; -- <0088> call fetch_byte
    00e1 : 0053 ; -- <0088> "
    00e2 : fc00 ; -- <0088> "
    00e3 : 0000 ; -- <0089> a = a -- putchar a
    00e4 : fba0 ; -- <0089> putchar a
    00e5 : 0083 ; -- <0089> "
    00e6 : fc00 ; -- <0089> "

    00e7 : f808 ; -- <0091> pop rtna -- rtn
    00e8 : 1808 ; -- <0091> pop g6 -- "
    00e9 : 1008 ; -- <0091> pop x -- "
    00ea : fc00 ; -- <0091> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    00eb : 2002 ; -- <0095> push i -- func get4x
    00ec : 2003 ; -- <0095> push j -- "
    00ed : 2004 ; -- <0095> push x -- "
    00ee : 2005 ; -- <0095> push y -- "
    00ef : 203e ; -- <0095> push rtna -- "
-- y = digit counter
-- j = sum
    00f0 : 1604 ; -- <0098> y = 4
-- :again -- = 0x00f1
    00f1 : fba0 ; -- <0100> getchar
    00f2 : 0092 ; -- <0100> "
    00f3 : fc00 ; -- <0100> "
    00f4 : 2000 ; -- <0100> push a -- "
    00f5 : 0000 ; -- <0100> a = a -- "
    00f6 : fba0 ; -- <0100> "
    00f7 : 0083 ; -- <0100> "
    00f8 : fc00 ; -- <0100> "
    00f9 : 0008 ; -- <0100> pop a -- "
    00fa : 13a0 ; -- <0101> x = :hexdigits
    00fb : 00a6 ; -- <0101> "
    00fc : 0a10 ; -- <0102> i = 16
    00fd : fba0 ; -- <0103> call :find_in_fetch
    00fe : 0067 ; -- <0103> "
    00ff : fc00 ; -- <0103> "
    0100 : 0760 ; -- <0104> b = -1
    0101 : e007 ; -- <0105> br eq :fail
    0102 : 0116 ; -- <0105> "
    0103 : 0400 ; -- <0106> b = a
    0104 : 0003 ; -- <0107> a = j
    0105 : 0352 ; -- <0108> a = a<<4
    0106 : c800 ; -- <0109> j = or
    0107 : 0f34 ; -- <0109> "
    0108 : 1360 ; -- <0110> x = -1
    0109 : c800 ; -- <0111> y = x+y
    010a : 1720 ; -- <0111> "
    010b : 0005 ; -- <0112> a = y
    010c : e400 ; -- <0113> bn az :again
    010d : 00f1 ; -- <0113> "
    010e : 0003 ; -- <0114> a = j
    010f : 0600 ; -- <0115> b = 0
    0110 : f808 ; -- <0116> pop rtna -- rtn
    0111 : 1408 ; -- <0116> pop y -- "
    0112 : 1008 ; -- <0116> pop x -- "
    0113 : 0c08 ; -- <0116> pop j -- "
    0114 : 0808 ; -- <0116> pop i -- "
    0115 : fc00 ; -- <0116> rtn
-- :fail -- = 0x0116
    0116 : 0760 ; -- <0118> b = -1
    0117 : f808 ; -- <0119> pop rtna -- rtn
    0118 : 1408 ; -- <0119> pop y -- "
    0119 : 1008 ; -- <0119> pop x -- "
    011a : 0c08 ; -- <0119> pop j -- "
    011b : 0808 ; -- <0119> pop i -- "
    011c : fc00 ; -- <0119> rtn

-- routine waits a number of milliseconds given in a.
    011d : 2004 ; -- <0002> push x -- func spinwait
    011e : 2005 ; -- <0002> push y -- "
--patch
--rtn
    011f : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x0120
    0120 : 13a0 ; -- <0007> x = 16666
    0121 : 411a ; -- <0007> "
    0122 : 1760 ; -- <0008> y = -1
    0123 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0124
-- use of the ad2 name overrides auto-nop here.
    0124 : 1320 ; -- <0012> x = ad2
    0125 : e402 ; -- <0013> bn xz :spinwait_inner
    0126 : 0124 ; -- <0013> "
    0127 : c800 ; -- <0014> a = a+b
    0128 : 0300 ; -- <0014> "
    0129 : e400 ; -- <0015> bn az :spinwait_outer
    012a : 0120 ; -- <0015> "
    012b : 1408 ; -- <0016> pop y -- rtn
    012c : 1008 ; -- <0016> pop x -- "
    012d : fc00 ; -- <0016> rtn



-- bit-bang a complete SPI transaction.
-- pass mo data in a, transaction width (# of bits) in b.
-- returns mi data in a
    012e : 2002 ; -- <0005> push i -- func spi_exchange
    012f : 2003 ; -- <0005> push j -- "
    0130 : 2004 ; -- <0005> push x -- "
    0131 : 2005 ; -- <0005> push y -- "
    0132 : 2006 ; -- <0005> push g6 -- "
    0133 : 2007 ; -- <0005> push g7 -- "
-- keeping mo data in g6, mi data in g7.
    0134 : 1800 ; -- <0007> g6 = a
    0135 : 1e00 ; -- <0008> g7 = 0
-- keeping bit counter in i.
    0136 : 0801 ; -- <0010> i = b
    0137 : 0f60 ; -- <0011> j = -1
    0138 : 1760 ; -- <0012> y = -1
-- :next_bit -- = 0x0139
-- output the msb of mo, along with a low clock phase and low csn.
    0139 : 0006 ; -- <0015> a = g6
    013a : 0350 ; -- <0016> a = a>>1
    013b : 0350 ; -- <0017> a = a>>1
    013c : 0350 ; -- <0018> a = a>>1
    013d : 0353 ; -- <0019> a = a>>4
    013e : 0353 ; -- <0020> a = a>>4
    013f : 0353 ; -- <0021> a = a>>4
    0140 : 2c00 ; -- <0022> de0nano_adc_ctrl = a
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    0141 : 1206 ; -- <0024> x = 6
-- :wait1 -- = 0x0142
    0142 : c800 ; -- <0026> x = x+y
    0143 : 1320 ; -- <0026> "
    0144 : e402 ; -- <0027> bn xz :wait1
    0145 : 0142 ; -- <0027> "
-- output a high clock phase.
    0146 : 0602 ; -- <0029> b = $de0nano_adc_sck_mask
    0147 : c800 ; -- <0030> de0nano_adc_ctrl = or
    0148 : 2f34 ; -- <0030> "
-- sample mi.
    0149 : 0007 ; -- <0032> a = g7
    014a : 0351 ; -- <0033> a = a<<1
    014b : 040b ; -- <0034> b = de0nano_adc_ctrl
    014c : c800 ; -- <0035> g7 = or
    014d : 1f34 ; -- <0035> "
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    014e : 1206 ; -- <0037> x = 6
-- :wait2 -- = 0x014f
    014f : c800 ; -- <0039> x = x+y
    0150 : 1320 ; -- <0039> "
    0151 : e402 ; -- <0040> bn xz :wait2
    0152 : 014f ; -- <0040> "
-- shift mo bits.
    0153 : 0006 ; -- <0042> a = g6
    0154 : 0351 ; -- <0043> a = a<<1
    0155 : 1800 ; -- <0044> g6 = a
-- count bits
    0156 : c800 ; -- <0046> i = i+j
    0157 : 0b10 ; -- <0046> "
    0158 : e401 ; -- <0047> bn iz :next_bit
    0159 : 0139 ; -- <0047> "
-- idle the SPI bus with a high clock phase and high csn.
    015a : 2e06 ; -- <0049> de0nano_adc_ctrl = ($de0nano_adc_csn_mask | $de0nano_adc_sck_mask)
-- wait about 500 ns (for about 1 Mhz sck) assuming 50 MHz sysclk.
    015b : 1206 ; -- <0051> x = 6
-- :wait3 -- = 0x015c
    015c : c800 ; -- <0053> x = x+y
    015d : 1320 ; -- <0053> "
    015e : e402 ; -- <0054> bn xz :wait3
    015f : 015c ; -- <0054> "
    0160 : 0007 ; -- <0055> a = g7
    0161 : 1c08 ; -- <0056> pop g7 -- rtn
    0162 : 1808 ; -- <0056> pop g6 -- "
    0163 : 1408 ; -- <0056> pop y -- "
    0164 : 1008 ; -- <0056> pop x -- "
    0165 : 0c08 ; -- <0056> pop j -- "
    0166 : 0808 ; -- <0056> pop i -- "
    0167 : fc00 ; -- <0056> rtn

-- pass desired ADC channel in a.
-- returns ADC reading in a.
    0168 : 203e ; -- <0060> push rtna -- func de0nano_adc_read
    0169 : 0352 ; -- <0061> a = a<<4
    016a : 0352 ; -- <0062> a = a<<4
    016b : 0351 ; -- <0063> a = a<<1
    016c : 0351 ; -- <0064> a = a<<1
    016d : 0351 ; -- <0065> a = a<<1
    016e : 0610 ; -- <0066> b = 16
    016f : fba0 ; -- <0067> call :spi_exchange
    0170 : 012e ; -- <0067> "
    0171 : fc00 ; -- <0067> "
    0172 : f808 ; -- <0068> pop rtna -- rtn
    0173 : fc00 ; -- <0068> rtn

-- pass desired anmux channel in a.
-- return ADC reading in a.
    0174 : 203e ; -- <0072> push rtna -- func anmux_read_chn
-- set & enable analog muxer
    0175 : 0608 ; -- <0074> b = $anmux_enable_mask
    0176 : 4e02 ; -- <0075> anmux_ctrl = or
    0177 : 4b34 ; -- <0075> "
-- wait for muxer & current driver to settle down.  some delay here is absolutely required (per testing).
    0178 : 020a ; -- <0077> a = 10
    0179 : fba0 ; -- <0078> call :spinwait
    017a : 011d ; -- <0078> "
    017b : fc00 ; -- <0078> "

-- read ADC channel 7.  12 bits resolution.
    017c : 0207 ; -- <0081> a = 7
    017d : fba0 ; -- <0082> call :de0nano_adc_read
    017e : 0168 ; -- <0082> "
    017f : fc00 ; -- <0082> "
    0180 : f808 ; -- <0083> pop rtna -- rtn
    0181 : fc00 ; -- <0083> rtn

-- --------------------------------------------
-- :main -- = 0x0182

-- -- pass counter in x.  anmux channel number in i.
-- x = 0
-- y = 1

-- :next_pass
-- leds = x
-- a = x
-- call :put4x
-- putasc ":"
-- i = 8
-- j = -1

-- :next_anmux
-- i = i+j
-- putasc " "
-- putasc "s"
-- b = i
-- asc a = "0"
-- putchar a+b
-- putasc "="
-- a = i
-- call :anmux_read_chn
-- call :put4x
-- bn iz :next_anmux

-- puteol
-- a = 900
-- call :spinwait

-- x = x+y
-- jmp :next_pass

-- ----------------------------------------------------------

    0182 : 2ba0 ; -- <0126> timer0 = $TICKS_PER_SEC
    0183 : 02fb ; -- <0126> "

-- event loop prototype.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller.
-- :poll_events -- = 0x0184
-- initialize prior to polling loop, for minimum latency.
    0184 : 07a0 ; -- <0132> b = :event_table
    0185 : 018e ; -- <0132> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x0186
    0186 : 0009 ; -- <0135> a = event_priority
    0187 : e000 ; -- <0136> br 0z :poll_events_again
    0188 : 0186 ; -- <0136> "
-- acknowledge the event to clear its register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    0189 : 2400 ; -- <0139> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    018a : fb00 ; -- <0141> rtna = ad0
-- jump into the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    018b : fc00 ; -- <0145> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
-- :events_error_halt -- = 0x018c
    018c : e00f ; -- <0148> jmp :events_error_halt
    018d : 018c ; -- <0148> "

-- event table;  begins with a null handler because that's the event 0 position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x018e
    018e : e00f ; -- <0153> jmp :poll_events
    018f : 0184 ; -- <0153> "
    0190 : e00f ; -- <0154> jmp :uart_rx_char_handler
    0191 : 019a ; -- <0154> "
    0192 : e00f ; -- <0155> jmp :uart_tx_char_handler
    0193 : 019c ; -- <0155> "
    0194 : e00f ; -- <0156> jmp :key0_handler
    0195 : 019e ; -- <0156> "
    0196 : e00f ; -- <0157> jmp :key1_handler
    0197 : 01a0 ; -- <0157> "
    0198 : e00f ; -- <0158> jmp :timer0_handler
    0199 : 01a2 ; -- <0158> "

-- patch: call event loop as if it were a func, but don't declare it func.
-- instead let it jmp to a handler, which does an unmatched rtn?
-- no, don't allow handlers to call back to event loop.

-- handle data here
    019a : e00f ; -- <0166> end_event
    019b : 0184 ; -- <0166> "

-- handle data here
    019c : e00f ; -- <0170> end_event
    019d : 0184 ; -- <0170> "

-- handle data here
    019e : e00f ; -- <0174> end_event
    019f : 0184 ; -- <0174> "

-- handle data here
    01a0 : e00f ; -- <0178> end_event
    01a1 : 0184 ; -- <0178> "

    01a2 : 2ba0 ; -- <0181> timer0 = $TICKS_PER_SEC
    01a3 : 02fb ; -- <0181> "
    01a4 : 4e01 ; -- <0182> a = leds
    01a5 : 0012 ; -- <0182> "
    01a6 : 0601 ; -- <0183> b = 1
    01a7 : 4e01 ; -- <0184> leds = a+b
    01a8 : 4b00 ; -- <0184> "
    01a9 : e00f ; -- <0185> end_event
    01aa : 0184 ; -- <0185> "


        
        END;
    
