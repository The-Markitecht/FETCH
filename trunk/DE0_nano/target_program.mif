
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.

-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- JTAG UART notes:
-- - on read, program MUST test bit 15 of jtag_uart_data_lsw.  jtag uart continues to
-- report the same data byte on subsequent reads when no further data has arrived.
-- bit 15 RVALID = 1 is the only indication of proper data.
-- - reading jtag_uart_data_msw also counts as a FIFO read, causing loss of a data byte,
-- probably because jtag uart has no byteenable wires.
-- - on write, the data is lost if the write FIFO is full.  Avalon is not stalled.
-- alias_both av_ctrl          [incr counter]
--    vdefine av_write_mask                   0x0001
-- alias_src  av_waitrequest   [incr counter]



-- :begin -- = 0x0000
    0000 : 2601 ; -- <0048> leds = 1
-- atx_ctrl = 0

-- a = 65
-- push a
-- a = 66
-- push a
-- a = 67
-- push a
-- a = 68
-- push a
-- a = 69
-- push a

-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b

-- a = 0x1234
-- call put4x

-- x = 0x1234
-- y = 1
-- a = 0
-- :nextwrite
-- m9k_addr = a
-- m9k_data = x
-- x = x+y
-- b = 1
-- nop
-- a = a+b
-- b = 1024
-- nop
-- br lt :nextwrite

--patch
    0001 : 1200 ; -- <0091> x = 0
    0002 : 1601 ; -- <0092> y = 1
-- :patch -- = 0x0003

    0003 : 0009 ; -- <0095> a = leds
    0004 : 0601 ; -- <0096> b = 1
    0005 : c800 ; -- <0097> nop
    0006 : 2700 ; -- <0098> leds = a+b

-- -- Avalon write to JTAG UART.
-- putasc A
-- putasc B
-- putasc C
-- putasc D
-- putasc E
-- putasc F
-- putasc G
-- putasc H
-- putasc I
-- putasc J
-- putasc K
-- putasc L
-- putasc M
-- putasc N

-- -- Avalon read from JTAG UART.
-- :poll_jtag_uart
-- a = 0x1234
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "/"
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_data_lsw_hi
-- av_ad_lo = $jtag_uart_data_lsw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_data_msw_hi
-- av_ad_lo = $jtag_uart_data_msw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_ctrl_lsw_hi
-- av_ad_lo = $jtag_uart_ctrl_lsw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_ctrl_msw_hi
-- av_ad_lo = $jtag_uart_ctrl_msw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "/"
-- a = 1000
-- call :spinwait
-- a = 0x5678
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "\r"
-- putasc "\n"
-- a = 1000
-- call :spinwait
-- jmp :poll_jtag_uart

-- Avalon write to SDRAM.
    0007 : 3200 ; -- <0176> av_ad_hi = 0
    0008 : 3620 ; -- <0177> av_ad_lo = 0x20
    0009 : 2ba0 ; -- <0178> av_write_data = 0x6789
    000a : 6789 ; -- <0178> "
-- Avalon read from SDRAM.
    000b : 000a ; -- <0180> a = av_write_data
    000c : 000b ; -- <0181> a = av_read_data
    000d : fba0 ; -- <0182> call put4x
    000e : 00bc ; -- <0182> "
    000f : fc00 ; -- <0182> "
    0010 : 03a0 ; -- <0183> a = 1000
    0011 : 03e8 ; -- <0183> "
    0012 : fba0 ; -- <0184> call :spinwait
    0013 : 007d ; -- <0184> "
    0014 : fc00 ; -- <0184> "

-- fill SDRAM first page with a pattern.
    0015 : 0257 ; -- <0187> a = 87 -- putasc W
    0016 : 33a0 ; -- <0187> putasc W
    0017 : 0200 ; -- <0187> "
    0018 : 3600 ; -- <0187> "
    0019 : 2800 ; -- <0187> "
    001a : 1200 ; -- <0188> x = 0x0000
-- :fill_more -- = 0x001b
    001b : 3200 ; -- <0190> av_ad_hi = 0
    001c : 3404 ; -- <0191> av_ad_lo = x
    001d : 0004 ; -- <0192> a = x
    001e : 0760 ; -- <0193> b = 0xffff
    001f : c800 ; -- <0194> nop
    0020 : 1b38 ; -- <0195> g6 = xor
    0021 : 2806 ; -- <0196> av_write_data = g6
    0022 : 1602 ; -- <0197> y = 2
    0023 : c800 ; -- <0198> nop
    0024 : 1320 ; -- <0199> x = x+y
    0025 : e400 ; -- <0200> bn 2z :fill_more
    0026 : 001b ; -- <0200> "

-- verify pattern in SDRAM.
    0027 : 1200 ; -- <0203> x = 0x0000
-- :verify_more -- = 0x0028
    0028 : 3200 ; -- <0205> av_ad_hi = 0
    0029 : 3404 ; -- <0206> av_ad_lo = x
    002a : 180a ; -- <0207> g6 = av_write_data
    002b : 180b ; -- <0208> g6 = av_read_data
    002c : 0004 ; -- <0209> a = x
    002d : fba0 ; -- <0210> call put4x
    002e : 00bc ; -- <0210> "
    002f : fc00 ; -- <0210> "
    0030 : 023d ; -- <0211> a = 61 -- putasc "="
    0031 : 33a0 ; -- <0211> putasc "="
    0032 : 0200 ; -- <0211> "
    0033 : 3600 ; -- <0211> "
    0034 : 2800 ; -- <0211> "
    0035 : 03a0 ; -- <0212> a = 500
    0036 : 01f4 ; -- <0212> "
    0037 : fba0 ; -- <0213> call :spinwait
    0038 : 007d ; -- <0213> "
    0039 : fc00 ; -- <0213> "
    003a : 0006 ; -- <0214> a = g6
    003b : fba0 ; -- <0215> call put4x
    003c : 00bc ; -- <0215> "
    003d : fc00 ; -- <0215> "
    003e : 020d ; -- <0216> a = 13 -- putasc "\r"
    003f : 33a0 ; -- <0216> putasc "\r"
    0040 : 0200 ; -- <0216> "
    0041 : 3600 ; -- <0216> "
    0042 : 2800 ; -- <0216> "
    0043 : 020a ; -- <0217> a = 10 -- putasc "\n"
    0044 : 33a0 ; -- <0217> putasc "\n"
    0045 : 0200 ; -- <0217> "
    0046 : 3600 ; -- <0217> "
    0047 : 2800 ; -- <0217> "
    0048 : 03a0 ; -- <0218> a = 500
    0049 : 01f4 ; -- <0218> "
    004a : fba0 ; -- <0219> call :spinwait
    004b : 007d ; -- <0219> "
    004c : fc00 ; -- <0219> "
    004d : 1602 ; -- <0220> y = 2
    004e : c800 ; -- <0221> nop
    004f : 1320 ; -- <0222> x = x+y
    0050 : e400 ; -- <0223> bn 2z :verify_more
    0051 : 0028 ; -- <0223> "


-- :wait_key_press
-- a = 0x03
-- b = keys
-- nop
-- br eq :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn eq :wait_key_release

-- getchar
-- b = 1
-- nop
-- putchar a+b

-- b = 85
-- putchar b

-- x = x+y
-- nop
-- a = x
-- call put4x

    0052 : 0264 ; -- <0249> a = 100
    0053 : fba0 ; -- <0250> call :spinwait
    0054 : 007d ; -- <0250> "
    0055 : fc00 ; -- <0250> "

-- b = 32
-- putchar b
-- m9k_addr = x
-- a = m9k_data
-- call put4x

-- b = 13
-- putchar b
-- b = 10
-- putchar b

    0056 : e00f ; -- <0263> jmp :patch
    0057 : 0003 ; -- <0263> "





-- using i as index into string.
    0058 : 0a00 ; -- <0270> i = 0

-- cache the string limit in g6.
    0059 : 0210 ; -- <0273> a = 16
    005a : 0760 ; -- <0274> b = 0xffff
    005b : c800 ; -- <0275> nop
    005c : 1b38 ; -- <0276> g6 = xor

-- :again -- = 0x005d
-- -- wait for keypress.
-- :wait_key_press
-- a = 0
-- b = keys
-- nop
-- br z :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn z :wait_key_release

    005d : 0264 ; -- <0290> a = 100
    005e : fba0 ; -- <0291> call :spinwait
    005f : 007d ; -- <0291> "
    0060 : fc00 ; -- <0291> "

-- increment LEDs
    0061 : 0009 ; -- <0294> a = leds
    0062 : 0601 ; -- <0295> b = 1
    0063 : c800 ; -- <0296> nop
    0064 : 2700 ; -- <0297> leds = a+b

-- fetch a word from test pattern to the UART.  its low byte is a character.
    0065 : 0fa0 ; -- <0300> j = :msg
    0066 : 0074 ; -- <0300> "
    0067 : c800 ; -- <0301> nop
    0068 : d310 ; -- <0302> fetch a from i+j
    0069 : 03b0 ; -- <0302> "
--    putchar a

-- increment index & wrap around end of pattern.
    006a : 0e01 ; -- <0306> j = 1
    006b : c800 ; -- <0307> nop
    006c : 0b10 ; -- <0308> i = i+j
    006d : 0c06 ; -- <0309> j = g6
    006e : c800 ; -- <0310> nop
    006f : e401 ; -- <0311> bn 1z :no_wrap
    0070 : 0072 ; -- <0311> "
    0071 : 0a00 ; -- <0312> i = 0
-- :no_wrap -- = 0x0072

-- repeat forever.
    0072 : e00f ; -- <0316> jmp :again
    0073 : 005d ; -- <0316> "

-- :msg -- = 0x0074
-- "1234567890abcdef\n\x00"
    0074 : 3231 ; -- <0319> 21
    0075 : 3433 ; -- <0319> 43
    0076 : 3635 ; -- <0319> 65
    0077 : 3837 ; -- <0319> 87
    0078 : 3039 ; -- <0319> 09
    0079 : 6261 ; -- <0319> ba
    007a : 6463 ; -- <0319> dc
    007b : 6665 ; -- <0319> fe
    007c : 000a ; -- <0319>   

-- routine waits a number of milliseconds given in a.
    007d : 2004 ; -- <0322> push x -- func spinwait
    007e : 2005 ; -- <0322> push y -- "
--patch
--return
    007f : 0760 ; -- <0325> b = -1
-- :spinwait_outer -- = 0x0080
    0080 : 13a0 ; -- <0327> x = 12500
    0081 : 30d4 ; -- <0327> "
    0082 : 1760 ; -- <0328> y = -1
    0083 : c800 ; -- <0329> nop
-- :spinwait_inner -- = 0x0084
    0084 : 1320 ; -- <0331> x = x+y
    0085 : c800 ; -- <0332> nop
    0086 : e400 ; -- <0333> bn 2z :spinwait_inner
    0087 : 0084 ; -- <0333> "
    0088 : 0300 ; -- <0334> a = a+b
    0089 : c800 ; -- <0335> nop
    008a : e404 ; -- <0336> bn z :spinwait_outer
    008b : 0080 ; -- <0336> "
    008c : 1408 ; -- <0337> pop y -- return
    008d : 1008 ; -- <0337> pop x -- "
    008e : fc00 ; -- <0337> return

-- compute the modulus(255) of a number given in a.  return remainder in a.
    008f : 2006 ; -- <0340> push g6 -- func mod255
    0090 : 2007 ; -- <0340> push g7 -- "
-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x0091
    0091 : 06fe ; -- <0343> b = 0xfe
    0092 : c800 ; -- <0344> nop
    0093 : e006 ; -- <0345> br gt :mod255_greater
    0094 : 0098 ; -- <0345> "
    0095 : 1c08 ; -- <0346> pop g7 -- return
    0096 : 1808 ; -- <0346> pop g6 -- "
    0097 : fc00 ; -- <0346> return
-- :mod255_greater -- = 0x0098
    0098 : 07a0 ; -- <0348> b = 0xff01
    0099 : ff01 ; -- <0348> "
    009a : c800 ; -- <0349> nop
    009b : 0300 ; -- <0350> a = a+b
    009c : e00f ; -- <0351> jmp :mod255_again
    009d : 0091 ; -- <0351> "

-- set up Fletcher16 checksum algorithm to accumulate in the 2 given register names.

    009e : 1a00 ; -- <0361> fletcher16_init g6 g7
    009f : 1e00 ; -- <0361> "

-- accumulate a Fletcher16 checksum in g6 and g7,
-- given the next byte of data in a.
    00a0 : 2006 ; -- <0365> push g6 -- func fletcher16_input
    00a1 : 2007 ; -- <0365> push g7 -- "
    00a2 : 203e ; -- <0365> push rtna -- "
--patch: need a way to declare summing registers as "static" or "preserve" so they're not auto-stacked.
    00a3 : 0406 ; -- <0367> b = $fletcher_sum1_reg
    00a4 : c800 ; -- <0368> nop
    00a5 : 0300 ; -- <0369> a = a+b
    00a6 : fba0 ; -- <0370> call :mod255
    00a7 : 008f ; -- <0370> "
    00a8 : fc00 ; -- <0370> "
    00a9 : 1800 ; -- <0371> $fletcher_sum1_reg = a

    00aa : 0407 ; -- <0373> b = $fletcher_sum2_reg
    00ab : c800 ; -- <0374> nop
    00ac : 0300 ; -- <0375> a = a+b
    00ad : fba0 ; -- <0376> call :mod255
    00ae : 008f ; -- <0376> "
    00af : fc00 ; -- <0376> "
    00b0 : 1c00 ; -- <0377> $fletcher_sum2_reg = a
    00b1 : f808 ; -- <0378> pop rtna -- return
    00b2 : 1c08 ; -- <0378> pop g7 -- "
    00b3 : 1808 ; -- <0378> pop g6 -- "
    00b4 : fc00 ; -- <0378> return

-- return the combined 16-bit result of Fletcher16 checksum in a.
    00b5 : 0007 ; -- <0382> a = $fletcher_sum2_reg
    00b6 : 0352 ; -- <0383> a = a<<4
    00b7 : 0352 ; -- <0384> a = a<<4
    00b8 : 0406 ; -- <0385> b = $fletcher_sum1_reg
    00b9 : c800 ; -- <0386> nop
    00ba : 0334 ; -- <0387> a = or
    00bb : fc00 ; -- <0388> return

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    00bc : 2004 ; -- <0392> push x -- func put4x
    00bd : 2006 ; -- <0392> push g6 -- "
    00be : 203e ; -- <0392> push rtna -- "
    00bf : 13a0 ; -- <0393> x = :hexdigits
    00c0 : 00f9 ; -- <0393> "

    00c1 : 1800 ; -- <0395> g6 = a
    00c2 : 07a0 ; -- <0396> b = 0xF000
    00c3 : f000 ; -- <0396> "
    00c4 : c800 ; -- <0397> nop
    00c5 : 0330 ; -- <0398> a = and
    00c6 : 0353 ; -- <0399> a = a>>4
    00c7 : 0353 ; -- <0400> a = a>>4
    00c8 : 0353 ; -- <0401> a = a>>4
    00c9 : fba0 ; -- <0402> call fetch_byte
    00ca : 0101 ; -- <0402> "
    00cb : fc00 ; -- <0402> "
    00cc : 33a0 ; -- <0403> putchar a
    00cd : 0200 ; -- <0403> "
    00ce : 3600 ; -- <0403> "
    00cf : 2800 ; -- <0403> "

    00d0 : 0006 ; -- <0405> a = g6
    00d1 : 07a0 ; -- <0406> b = 0x0F00
    00d2 : 0f00 ; -- <0406> "
    00d3 : c800 ; -- <0407> nop
    00d4 : 0330 ; -- <0408> a = and
    00d5 : 0353 ; -- <0409> a = a>>4
    00d6 : 0353 ; -- <0410> a = a>>4
    00d7 : fba0 ; -- <0411> call fetch_byte
    00d8 : 0101 ; -- <0411> "
    00d9 : fc00 ; -- <0411> "
    00da : 33a0 ; -- <0412> putchar a
    00db : 0200 ; -- <0412> "
    00dc : 3600 ; -- <0412> "
    00dd : 2800 ; -- <0412> "

    00de : 0006 ; -- <0414> a = g6
    00df : 06f0 ; -- <0415> b = 0x00F0
    00e0 : c800 ; -- <0416> nop
    00e1 : 0330 ; -- <0417> a = and
    00e2 : 0353 ; -- <0418> a = a>>4
    00e3 : fba0 ; -- <0419> call fetch_byte
    00e4 : 0101 ; -- <0419> "
    00e5 : fc00 ; -- <0419> "
    00e6 : 33a0 ; -- <0420> putchar a
    00e7 : 0200 ; -- <0420> "
    00e8 : 3600 ; -- <0420> "
    00e9 : 2800 ; -- <0420> "

    00ea : 0006 ; -- <0422> a = g6
    00eb : 060f ; -- <0423> b = 0x000F
    00ec : c800 ; -- <0424> nop
    00ed : 0330 ; -- <0425> a = and
    00ee : fba0 ; -- <0426> call fetch_byte
    00ef : 0101 ; -- <0426> "
    00f0 : fc00 ; -- <0426> "
    00f1 : 33a0 ; -- <0427> putchar a
    00f2 : 0200 ; -- <0427> "
    00f3 : 3600 ; -- <0427> "
    00f4 : 2800 ; -- <0427> "

    00f5 : f808 ; -- <0429> pop rtna -- return
    00f6 : 1808 ; -- <0429> pop g6 -- "
    00f7 : 1008 ; -- <0429> pop x -- "
    00f8 : fc00 ; -- <0429> return

-- :hexdigits -- = 0x00f9
-- "0123456789abcdef"
    00f9 : 3130 ; -- <0432> 10
    00fa : 3332 ; -- <0432> 32
    00fb : 3534 ; -- <0432> 54
    00fc : 3736 ; -- <0432> 76
    00fd : 3938 ; -- <0432> 98
    00fe : 6261 ; -- <0432> ba
    00ff : 6463 ; -- <0432> dc
    0100 : 6665 ; -- <0432> fe

-- pick a byte from an array of words.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0101 : 0601 ; -- <0437> b = 1
    0102 : c800 ; -- <0438> nop
    0103 : e002 ; -- <0439> br and0z :pick_byte_even
    0104 : 010d ; -- <0439> "
    0105 : 0350 ; -- <0440> a = a>>1
    0106 : 0404 ; -- <0441> b = x
    0107 : c800 ; -- <0442> nop
    0108 : d300 ; -- <0443> fetch a from a+b
    0109 : 03b0 ; -- <0443> "
    010a : 0353 ; -- <0444> a = a>>4
    010b : 0353 ; -- <0445> a = a>>4
    010c : fc00 ; -- <0446> return
-- :pick_byte_even -- = 0x010d
    010d : 0350 ; -- <0448> a = a>>1
    010e : 0404 ; -- <0449> b = x
    010f : c800 ; -- <0450> nop
    0110 : d300 ; -- <0451> fetch a from a+b
    0111 : 03b0 ; -- <0451> "
    0112 : 06ff ; -- <0452> b = 0xff
    0113 : c800 ; -- <0453> nop
    0114 : 0330 ; -- <0454> a = and
    0115 : fc00 ; -- <0455> return

        
        END;
    
