
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.

-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- JTAG UART notes:
-- - on read, program MUST test bit 15 of jtag_uart_data_lsw.  jtag uart continues to
-- report the same data byte on subsequent reads when no further data has arrived.
-- bit 15 RVALID = 1 is the only indication of proper data.
-- - reading jtag_uart_data_msw also counts as a FIFO read, causing loss of a data byte,
-- probably because jtag uart has no byteenable wires.
-- - on write, the data is lost if the write FIFO is full.  Avalon is not stalled.
-- alias_both av_ctrl          [incr counter]
--    vdefine av_write_mask                   0x0001
-- alias_src  av_waitrequest   [incr counter]



    0000 : e00f ; -- <0050> jmp :main
    0001 : 006e ; -- <0050> "


-- pick a byte from an array of words.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    0002 : 0601 ; -- <0005> b = 1
    0003 : c800 ; -- <0006> nop
    0004 : e002 ; -- <0007> br and0z :pick_byte_even
    0005 : 000e ; -- <0007> "
    0006 : 0350 ; -- <0008> a = a>>1
    0007 : 0404 ; -- <0009> b = x
    0008 : c800 ; -- <0010> nop
    0009 : d300 ; -- <0011> fetch a from a+b
    000a : 03b0 ; -- <0011> "
    000b : 0353 ; -- <0012> a = a>>4
    000c : 0353 ; -- <0013> a = a>>4
    000d : fc00 ; -- <0014> rtn
-- :pick_byte_even -- = 0x000e
    000e : 0350 ; -- <0016> a = a>>1
    000f : 0404 ; -- <0017> b = x
    0010 : c800 ; -- <0018> nop
    0011 : d300 ; -- <0019> fetch a from a+b
    0012 : 03b0 ; -- <0019> "
    0013 : 06ff ; -- <0020> b = 0xff
    0014 : c800 ; -- <0021> nop
    0015 : 0330 ; -- <0022> a = and
    0016 : fc00 ; -- <0023> rtn


-- driver library for JTAG UART accessed by my hardware-assisted Avalon MM master.





-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0017 : 2004 ; -- <0038> push x -- func put4x
    0018 : 2006 ; -- <0038> push g6 -- "
    0019 : 203e ; -- <0038> push rtna -- "
    001a : 13a0 ; -- <0039> x = :hexdigits
    001b : 0054 ; -- <0039> "

    001c : 1800 ; -- <0041> g6 = a
    001d : 07a0 ; -- <0042> b = 0xF000
    001e : f000 ; -- <0042> "
    001f : c800 ; -- <0043> nop
    0020 : 0330 ; -- <0044> a = and
    0021 : 0353 ; -- <0045> a = a>>4
    0022 : 0353 ; -- <0046> a = a>>4
    0023 : 0353 ; -- <0047> a = a>>4
    0024 : fba0 ; -- <0048> call fetch_byte
    0025 : 0002 ; -- <0048> "
    0026 : fc00 ; -- <0048> "
    0027 : 33a0 ; -- <0049> putchar a
    0028 : 0200 ; -- <0049> "
    0029 : 3600 ; -- <0049> "
    002a : 2800 ; -- <0049> "

    002b : 0006 ; -- <0051> a = g6
    002c : 07a0 ; -- <0052> b = 0x0F00
    002d : 0f00 ; -- <0052> "
    002e : c800 ; -- <0053> nop
    002f : 0330 ; -- <0054> a = and
    0030 : 0353 ; -- <0055> a = a>>4
    0031 : 0353 ; -- <0056> a = a>>4
    0032 : fba0 ; -- <0057> call fetch_byte
    0033 : 0002 ; -- <0057> "
    0034 : fc00 ; -- <0057> "
    0035 : 33a0 ; -- <0058> putchar a
    0036 : 0200 ; -- <0058> "
    0037 : 3600 ; -- <0058> "
    0038 : 2800 ; -- <0058> "

    0039 : 0006 ; -- <0060> a = g6
    003a : 06f0 ; -- <0061> b = 0x00F0
    003b : c800 ; -- <0062> nop
    003c : 0330 ; -- <0063> a = and
    003d : 0353 ; -- <0064> a = a>>4
    003e : fba0 ; -- <0065> call fetch_byte
    003f : 0002 ; -- <0065> "
    0040 : fc00 ; -- <0065> "
    0041 : 33a0 ; -- <0066> putchar a
    0042 : 0200 ; -- <0066> "
    0043 : 3600 ; -- <0066> "
    0044 : 2800 ; -- <0066> "

    0045 : 0006 ; -- <0068> a = g6
    0046 : 060f ; -- <0069> b = 0x000F
    0047 : c800 ; -- <0070> nop
    0048 : 0330 ; -- <0071> a = and
    0049 : fba0 ; -- <0072> call fetch_byte
    004a : 0002 ; -- <0072> "
    004b : fc00 ; -- <0072> "
    004c : 33a0 ; -- <0073> putchar a
    004d : 0200 ; -- <0073> "
    004e : 3600 ; -- <0073> "
    004f : 2800 ; -- <0073> "

    0050 : f808 ; -- <0075> pop rtna -- rtn
    0051 : 1808 ; -- <0075> pop g6 -- "
    0052 : 1008 ; -- <0075> pop x -- "
    0053 : fc00 ; -- <0075> rtn

-- :hexdigits -- = 0x0054
-- "0123456789abcdef"
    0054 : 3130 ; -- <0078> 10
    0055 : 3332 ; -- <0078> 32
    0056 : 3534 ; -- <0078> 54
    0057 : 3736 ; -- <0078> 76
    0058 : 3938 ; -- <0078> 98
    0059 : 6261 ; -- <0078> ba
    005a : 6463 ; -- <0078> dc
    005b : 6665 ; -- <0078> fe


-- routine waits a number of milliseconds given in a.
    005c : 2004 ; -- <0002> push x -- func spinwait
    005d : 2005 ; -- <0002> push y -- "
--patch
--return
    005e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x005f
    005f : 13a0 ; -- <0007> x = 12500
    0060 : 30d4 ; -- <0007> "
    0061 : 1760 ; -- <0008> y = -1
    0062 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0063
    0063 : 1320 ; -- <0011> x = x+y
    0064 : c800 ; -- <0012> nop
    0065 : e400 ; -- <0013> bn 2z :spinwait_inner
    0066 : 0063 ; -- <0013> "
    0067 : 0300 ; -- <0014> a = a+b
    0068 : c800 ; -- <0015> nop
    0069 : e404 ; -- <0016> bn z :spinwait_outer
    006a : 005f ; -- <0016> "
    006b : 1408 ; -- <0017> pop y -- rtn
    006c : 1008 ; -- <0017> pop x -- "
    006d : fc00 ; -- <0017> rtn



-- :main -- = 0x006e
    006e : 2601 ; -- <0058> leds = 1
-- atx_ctrl = 0

-- a = 65
-- push a
-- a = 66
-- push a
-- a = 67
-- push a
-- a = 68
-- push a
-- a = 69
-- push a

-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b
-- pop b
-- putchar b

-- a = 0x1234
-- call put4x

-- x = 0x1234
-- y = 1
-- a = 0
-- :nextwrite
-- m9k_addr = a
-- m9k_data = x
-- x = x+y
-- b = 1
-- nop
-- a = a+b
-- b = 1024
-- nop
-- br lt :nextwrite

--patch
    006f : 1200 ; -- <0101> x = 0
    0070 : 1601 ; -- <0102> y = 1
-- :patch -- = 0x0071

    0071 : 0009 ; -- <0105> a = leds
    0072 : 0601 ; -- <0106> b = 1
    0073 : c800 ; -- <0107> nop
    0074 : 2700 ; -- <0108> leds = a+b

-- -- Avalon write to JTAG UART.
-- putasc A
-- putasc B
-- putasc C
-- putasc D
-- putasc E
-- putasc F
-- putasc G
-- putasc H
-- putasc I
-- putasc J
-- putasc K
-- putasc L
-- putasc M
-- putasc N

-- -- Avalon read from JTAG UART.
-- :poll_jtag_uart
-- a = 0x1234
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "/"
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_data_lsw_hi
-- av_ad_lo = $jtag_uart_data_lsw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_data_msw_hi
-- av_ad_lo = $jtag_uart_data_msw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_ctrl_lsw_hi
-- av_ad_lo = $jtag_uart_ctrl_lsw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc ","
-- a = 1000
-- call :spinwait
-- av_ad_hi = $jtag_uart_ctrl_msw_hi
-- av_ad_lo = $jtag_uart_ctrl_msw_lo
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "/"
-- a = 1000
-- call :spinwait
-- a = 0x5678
-- call put4x
-- a = 1000
-- call :spinwait
-- putasc "\r"
-- putasc "\n"
-- a = 1000
-- call :spinwait
-- jmp :poll_jtag_uart

-- Avalon write to SDRAM.
    0075 : 3200 ; -- <0186> av_ad_hi = 0
    0076 : 3620 ; -- <0187> av_ad_lo = 0x20
    0077 : 2ba0 ; -- <0188> av_write_data = 0x6789
    0078 : 6789 ; -- <0188> "
-- Avalon read from SDRAM.
    0079 : 000a ; -- <0190> a = av_write_data
    007a : 000b ; -- <0191> a = av_read_data
    007b : fba0 ; -- <0192> call put4x
    007c : 0017 ; -- <0192> "
    007d : fc00 ; -- <0192> "
    007e : 03a0 ; -- <0193> a = 1000
    007f : 03e8 ; -- <0193> "
    0080 : fba0 ; -- <0194> call :spinwait
    0081 : 005c ; -- <0194> "
    0082 : fc00 ; -- <0194> "

-- :verify_all -- = 0x0083
    0083 : 03a0 ; -- <0197> a = 1000
    0084 : 03e8 ; -- <0197> "
    0085 : fba0 ; -- <0198> call :spinwait
    0086 : 005c ; -- <0198> "
    0087 : fc00 ; -- <0198> "
    0088 : 022d ; -- <0199> a = 45 -- putasc {-}
    0089 : 33a0 ; -- <0199> putasc {-}
    008a : 0200 ; -- <0199> "
    008b : 3600 ; -- <0199> "
    008c : 2800 ; -- <0199> "
    008d : 0ba0 ; -- <0200> i = 0x200
    008e : 0200 ; -- <0200> "
    008f : 0f60 ; -- <0201> j = -1
    0090 : c800 ; -- <0202> nop
-- :next_page -- = 0x0091
    0091 : 0b10 ; -- <0204> i = i+j
    0092 : 3002 ; -- <0205> av_ad_hi = i

-- fill SDRAM page with a pattern.
    0093 : 0257 ; -- <0208> a = 87 -- putasc W
    0094 : 33a0 ; -- <0208> putasc W
    0095 : 0200 ; -- <0208> "
    0096 : 3600 ; -- <0208> "
    0097 : 2800 ; -- <0208> "
    0098 : 1200 ; -- <0209> x = 0x0000
-- :fill_more -- = 0x0099
    0099 : 0004 ; -- <0211> a = x
    009a : 0760 ; -- <0212> b = 0xffff
    009b : c800 ; -- <0213> nop
    009c : 1b38 ; -- <0214> g6 = xor
    009d : 3002 ; -- <0215> av_ad_hi = i
    009e : 3404 ; -- <0216> av_ad_lo = x
    009f : 2806 ; -- <0217> av_write_data = g6
    00a0 : 1602 ; -- <0218> y = 2
    00a1 : c800 ; -- <0219> nop
    00a2 : 1320 ; -- <0220> x = x+y
    00a3 : e400 ; -- <0221> bn 2z :fill_more
    00a4 : 0099 ; -- <0221> "

-- verify pattern in SDRAM.
    00a5 : 1200 ; -- <0224> x = 0x0000
-- :verify_more -- = 0x00a6
    00a6 : 3002 ; -- <0226> av_ad_hi = i
    00a7 : 3404 ; -- <0227> av_ad_lo = x
    00a8 : 180a ; -- <0228> g6 = av_write_data
    00a9 : 180b ; -- <0229> g6 = av_read_data
-- a = x
-- call put4x
-- putasc "="
-- a = 500
-- call :spinwait
-- a = g6
-- call put4x
-- putasc "\r"
-- putasc "\n"
-- a = 500
-- call :spinwait
    00aa : 0004 ; -- <0241> a = x
    00ab : 0760 ; -- <0242> b = 0xffff
    00ac : c800 ; -- <0243> nop
    00ad : 0338 ; -- <0244> a = xor
    00ae : 0406 ; -- <0245> b = g6
    00af : c800 ; -- <0246> nop
    00b0 : e407 ; -- <0247> bn eq :sdram_err
    00b1 : 00be ; -- <0247> "
    00b2 : 1602 ; -- <0248> y = 2
    00b3 : c800 ; -- <0249> nop
    00b4 : 1320 ; -- <0250> x = x+y
    00b5 : e400 ; -- <0251> bn 2z :verify_more
    00b6 : 00a6 ; -- <0251> "

    00b7 : 0002 ; -- <0253> a = i
    00b8 : 0600 ; -- <0254> b = 0
    00b9 : c800 ; -- <0255> nop
    00ba : e404 ; -- <0256> bn z :next_page
    00bb : 0091 ; -- <0256> "
    00bc : e00f ; -- <0257> jmp :verify_all
    00bd : 0083 ; -- <0257> "

-- :sdram_err -- = 0x00be
    00be : 1400 ; -- <0260> y = a
    00bf : 03a0 ; -- <0261> a = 1000
    00c0 : 03e8 ; -- <0261> "
    00c1 : fba0 ; -- <0262> call :spinwait
    00c2 : 005c ; -- <0262> "
    00c3 : fc00 ; -- <0262> "
    00c4 : 0006 ; -- <0263> a = g6
    00c5 : fba0 ; -- <0264> call :put4x
    00c6 : 0017 ; -- <0264> "
    00c7 : fc00 ; -- <0264> "
    00c8 : 03a0 ; -- <0265> a = 1000
    00c9 : 03e8 ; -- <0265> "
    00ca : fba0 ; -- <0266> call :spinwait
    00cb : 005c ; -- <0266> "
    00cc : fc00 ; -- <0266> "
    00cd : 0221 ; -- <0267> a = 33 -- putasc "!"
    00ce : 33a0 ; -- <0267> putasc "!"
    00cf : 0200 ; -- <0267> "
    00d0 : 3600 ; -- <0267> "
    00d1 : 2800 ; -- <0267> "
    00d2 : 023d ; -- <0268> a = 61 -- putasc "="
    00d3 : 33a0 ; -- <0268> putasc "="
    00d4 : 0200 ; -- <0268> "
    00d5 : 3600 ; -- <0268> "
    00d6 : 2800 ; -- <0268> "
    00d7 : 0005 ; -- <0269> a = y
    00d8 : fba0 ; -- <0270> call :put4x
    00d9 : 0017 ; -- <0270> "
    00da : fc00 ; -- <0270> "
    00db : 03a0 ; -- <0271> a = 1000
    00dc : 03e8 ; -- <0271> "
    00dd : fba0 ; -- <0272> call :spinwait
    00de : 005c ; -- <0272> "
    00df : fc00 ; -- <0272> "
    00e0 : 0240 ; -- <0273> a = 64 -- putasc "@"
    00e1 : 33a0 ; -- <0273> putasc "@"
    00e2 : 0200 ; -- <0273> "
    00e3 : 3600 ; -- <0273> "
    00e4 : 2800 ; -- <0273> "
    00e5 : 000c ; -- <0274> a = av_ad_hi
    00e6 : fba0 ; -- <0275> call :put4x
    00e7 : 0017 ; -- <0275> "
    00e8 : fc00 ; -- <0275> "
    00e9 : 03a0 ; -- <0276> a = 1000
    00ea : 03e8 ; -- <0276> "
    00eb : fba0 ; -- <0277> call :spinwait
    00ec : 005c ; -- <0277> "
    00ed : fc00 ; -- <0277> "
    00ee : 000d ; -- <0278> a = av_ad_lo
    00ef : fba0 ; -- <0279> call put4x
    00f0 : 0017 ; -- <0279> "
    00f1 : fc00 ; -- <0279> "
-- :halt -- = 0x00f2
    00f2 : e00f ; -- <0281> jmp :halt
    00f3 : 00f2 ; -- <0281> "

-- :wait_key_press
-- a = 0x03
-- b = keys
-- nop
-- br eq :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn eq :wait_key_release

-- getchar
-- b = 1
-- nop
-- putchar a+b

-- b = 85
-- putchar b

-- x = x+y
-- nop
-- a = x
-- call put4x

    00f4 : 0264 ; -- <0306> a = 100
    00f5 : fba0 ; -- <0307> call :spinwait
    00f6 : 005c ; -- <0307> "
    00f7 : fc00 ; -- <0307> "

-- b = 32
-- putchar b
-- m9k_addr = x
-- a = m9k_data
-- call put4x

-- b = 13
-- putchar b
-- b = 10
-- putchar b

    00f8 : e00f ; -- <0320> jmp :patch
    00f9 : 0071 ; -- <0320> "





-- using i as index into string.
    00fa : 0a00 ; -- <0327> i = 0

-- cache the string limit in g6.
    00fb : 0210 ; -- <0330> a = 16
    00fc : 0760 ; -- <0331> b = 0xffff
    00fd : c800 ; -- <0332> nop
    00fe : 1b38 ; -- <0333> g6 = xor

-- :again -- = 0x00ff
-- -- wait for keypress.
-- :wait_key_press
-- a = 0
-- b = keys
-- nop
-- br z :wait_key_press
-- :wait_key_release
-- b = keys
-- nop
-- bn z :wait_key_release

    00ff : 0264 ; -- <0347> a = 100
    0100 : fba0 ; -- <0348> call :spinwait
    0101 : 005c ; -- <0348> "
    0102 : fc00 ; -- <0348> "

-- increment LEDs
    0103 : 0009 ; -- <0351> a = leds
    0104 : 0601 ; -- <0352> b = 1
    0105 : c800 ; -- <0353> nop
    0106 : 2700 ; -- <0354> leds = a+b

-- fetch a word from test pattern to the UART.  its low byte is a character.
    0107 : 0fa0 ; -- <0357> j = :msg
    0108 : 0116 ; -- <0357> "
    0109 : c800 ; -- <0358> nop
    010a : d310 ; -- <0359> fetch a from i+j
    010b : 03b0 ; -- <0359> "
--    putchar a

-- increment index & wrap around end of pattern.
    010c : 0e01 ; -- <0363> j = 1
    010d : c800 ; -- <0364> nop
    010e : 0b10 ; -- <0365> i = i+j
    010f : 0c06 ; -- <0366> j = g6
    0110 : c800 ; -- <0367> nop
    0111 : e401 ; -- <0368> bn 1z :no_wrap
    0112 : 0114 ; -- <0368> "
    0113 : 0a00 ; -- <0369> i = 0
-- :no_wrap -- = 0x0114

-- repeat forever.
    0114 : e00f ; -- <0373> jmp :again
    0115 : 00ff ; -- <0373> "

-- :msg -- = 0x0116
-- "1234567890abcdef\n\x00"
    0116 : 3231 ; -- <0376> 21
    0117 : 3433 ; -- <0376> 43
    0118 : 3635 ; -- <0376> 65
    0119 : 3837 ; -- <0376> 87
    011a : 3039 ; -- <0376> 09
    011b : 6261 ; -- <0376> ba
    011c : 6463 ; -- <0376> dc
    011d : 6665 ; -- <0376> fe
    011e : 000a ; -- <0376>   


        
        END;
    
