
        DEPTH = 1024 ;               -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- to write some data on the UART.

-- register file configuration

-- application-specific register aliases.

-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- JTAG UART notes:
-- - on read, program MUST test bit 15 of jtag_uart_data_lsw.  jtag uart continues to
-- report the same data byte on subsequent reads when no further data has arrived.
-- bit 15 RVALID = 1 is the only indication of proper data.
-- - reading jtag_uart_data_msw also counts as a FIFO read, causing loss of a data byte,
-- probably because jtag uart has no byteenable wires.
-- - on write, the data is lost if the write FIFO is full.  Avalon is not stalled.
-- alias_both av_ctrl          [incr counter]
--    vdefine av_write_mask                   0x0001
-- alias_src  av_waitrequest   [incr counter]


    0000 : e00f ; -- <0049> jmp :main
    0001 : 00e0 ; -- <0049> "

-- register names for use by debugger.
    0002 : 000a ; -- <0052> ([src rstk])
-- "\r\n     a"
    0003 : 0a0d ; -- <0053>   
    0004 : 2020 ; -- <0053>   
    0005 : 2020 ; -- <0053>   
    0006 : 6120 ; -- <0053> a 
-- "       b"
    0007 : 2020 ; -- <0054>   
    0008 : 2020 ; -- <0054>   
    0009 : 2020 ; -- <0054>   
    000a : 6220 ; -- <0054> b 
-- "       i"
    000b : 2020 ; -- <0055>   
    000c : 2020 ; -- <0055>   
    000d : 2020 ; -- <0055>   
    000e : 6920 ; -- <0055> i 
-- "       j"
    000f : 2020 ; -- <0056>   
    0010 : 2020 ; -- <0056>   
    0011 : 2020 ; -- <0056>   
    0012 : 6a20 ; -- <0056> j 
-- "\r\n     x"
    0013 : 0a0d ; -- <0057>   
    0014 : 2020 ; -- <0057>   
    0015 : 2020 ; -- <0057>   
    0016 : 7820 ; -- <0057> x 
-- "       y"
    0017 : 2020 ; -- <0058>   
    0018 : 2020 ; -- <0058>   
    0019 : 2020 ; -- <0058>   
    001a : 7920 ; -- <0058> y 
-- "      g6"
    001b : 2020 ; -- <0059>   
    001c : 2020 ; -- <0059>   
    001d : 2020 ; -- <0059>   
    001e : 3667 ; -- <0059> 6g
-- "      g7"
    001f : 2020 ; -- <0060>   
    0020 : 2020 ; -- <0060>   
    0021 : 2020 ; -- <0060>   
    0022 : 3767 ; -- <0060> 7g
-- "\r\n  keys"
    0023 : 0a0d ; -- <0061>   
    0024 : 2020 ; -- <0061>   
    0025 : 656b ; -- <0061> ek
    0026 : 7379 ; -- <0061> sy
-- "    leds"
    0027 : 2020 ; -- <0062>   
    0028 : 2020 ; -- <0062>   
    0029 : 656c ; -- <0062> el
    002a : 7364 ; -- <0062> sd

-- libraries

-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
    002b : 0601 ; -- <0005> b = 1
    002c : e003 ; -- <0006> br and0z :pick_byte_even
    002d : 0036 ; -- <0006> "
    002e : 0350 ; -- <0007> a = a>>1
    002f : 0404 ; -- <0008> b = x
    0030 : c800 ; -- <0009> nop
    0031 : d300 ; -- <0010> fetch a from a+b
    0032 : 03b0 ; -- <0010> "
    0033 : 0353 ; -- <0011> a = a>>4
    0034 : 0353 ; -- <0012> a = a>>4
    0035 : fc00 ; -- <0013> rtn
-- :pick_byte_even -- = 0x0036
    0036 : 0350 ; -- <0015> a = a>>1
    0037 : 0404 ; -- <0016> b = x
    0038 : c800 ; -- <0017> nop
    0039 : d300 ; -- <0018> fetch a from a+b
    003a : 03b0 ; -- <0018> "
    003b : 06ff ; -- <0019> b = 0xff
    003c : c800 ; -- <0020> nop
    003d : 0330 ; -- <0021> a = and
    003e : fc00 ; -- <0022> rtn

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
    003f : 2802 ; -- <0030> push i -- func find_in_fetch
    0040 : 2803 ; -- <0030> push j -- "
    0041 : 2805 ; -- <0030> push y -- "
    0042 : 283e ; -- <0030> push rtna -- "
    0043 : e001 ; -- <0031> br iz :fail
    0044 : 0056 ; -- <0031> "
    0045 : 1400 ; -- <0032> y = a
    0046 : 0f60 ; -- <0033> j = -1
    0047 : c800 ; -- <0034> nop
-- :again -- = 0x0048
    0048 : 0b10 ; -- <0036> i = i+j
    0049 : 0002 ; -- <0037> a = i
    004a : fba0 ; -- <0038> call :fetch_byte
    004b : 002b ; -- <0038> "
    004c : fc00 ; -- <0038> "
    004d : 0405 ; -- <0039> b = y
    004e : e407 ; -- <0040> bn eq :again
    004f : 0048 ; -- <0040> "
-- :found -- = 0x0050
    0050 : 0002 ; -- <0042> a = i
    0051 : f80a ; -- <0043> pop rtna -- rtn
    0052 : 140a ; -- <0043> pop y -- "
    0053 : 0c0a ; -- <0043> pop j -- "
    0054 : 080a ; -- <0043> pop i -- "
    0055 : fc00 ; -- <0043> rtn
-- :fail -- = 0x0056
    0056 : 0360 ; -- <0045> a = -1
    0057 : f80a ; -- <0046> pop rtna -- rtn
    0058 : 140a ; -- <0046> pop y -- "
    0059 : 0c0a ; -- <0046> pop j -- "
    005a : 080a ; -- <0046> pop i -- "
    005b : fc00 ; -- <0046> rtn



-- driver library for JTAG UART accessed by my hardware-assisted Avalon MM master.





-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x005c
-- "0123456789abcdef"
    005c : 3130 ; -- <0051> 10
    005d : 3332 ; -- <0051> 32
    005e : 3534 ; -- <0051> 54
    005f : 3736 ; -- <0051> 76
    0060 : 3938 ; -- <0051> 98
    0061 : 6261 ; -- <0051> ba
    0062 : 6463 ; -- <0051> dc
    0063 : 6665 ; -- <0051> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
    0064 : 2804 ; -- <0055> push x -- func put4x
    0065 : 2806 ; -- <0055> push g6 -- "
    0066 : 283e ; -- <0055> push rtna -- "
    0067 : 13a0 ; -- <0056> x = :hexdigits
    0068 : 005c ; -- <0056> "

    0069 : 1800 ; -- <0058> g6 = a
    006a : 07a0 ; -- <0059> b = 0xF000
    006b : f000 ; -- <0059> "
    006c : c800 ; -- <0060> nop
    006d : 0330 ; -- <0061> a = and
    006e : 0353 ; -- <0062> a = a>>4
    006f : 0353 ; -- <0063> a = a>>4
    0070 : 0353 ; -- <0064> a = a>>4
    0071 : fba0 ; -- <0065> call fetch_byte
    0072 : 002b ; -- <0065> "
    0073 : fc00 ; -- <0065> "
    0074 : 37a0 ; -- <0066> putchar a
    0075 : 0200 ; -- <0066> "
    0076 : 3a00 ; -- <0066> "
    0077 : 2c00 ; -- <0066> "

    0078 : 0006 ; -- <0068> a = g6
    0079 : 07a0 ; -- <0069> b = 0x0F00
    007a : 0f00 ; -- <0069> "
    007b : c800 ; -- <0070> nop
    007c : 0330 ; -- <0071> a = and
    007d : 0353 ; -- <0072> a = a>>4
    007e : 0353 ; -- <0073> a = a>>4
    007f : fba0 ; -- <0074> call fetch_byte
    0080 : 002b ; -- <0074> "
    0081 : fc00 ; -- <0074> "
    0082 : 37a0 ; -- <0075> putchar a
    0083 : 0200 ; -- <0075> "
    0084 : 3a00 ; -- <0075> "
    0085 : 2c00 ; -- <0075> "

    0086 : 0006 ; -- <0077> a = g6
    0087 : 06f0 ; -- <0078> b = 0x00F0
    0088 : c800 ; -- <0079> nop
    0089 : 0330 ; -- <0080> a = and
    008a : 0353 ; -- <0081> a = a>>4
    008b : fba0 ; -- <0082> call fetch_byte
    008c : 002b ; -- <0082> "
    008d : fc00 ; -- <0082> "
    008e : 37a0 ; -- <0083> putchar a
    008f : 0200 ; -- <0083> "
    0090 : 3a00 ; -- <0083> "
    0091 : 2c00 ; -- <0083> "

    0092 : 0006 ; -- <0085> a = g6
    0093 : 060f ; -- <0086> b = 0x000F
    0094 : c800 ; -- <0087> nop
    0095 : 0330 ; -- <0088> a = and
    0096 : fba0 ; -- <0089> call fetch_byte
    0097 : 002b ; -- <0089> "
    0098 : fc00 ; -- <0089> "
    0099 : 37a0 ; -- <0090> putchar a
    009a : 0200 ; -- <0090> "
    009b : 3a00 ; -- <0090> "
    009c : 2c00 ; -- <0090> "

    009d : f80a ; -- <0092> pop rtna -- rtn
    009e : 180a ; -- <0092> pop g6 -- "
    009f : 100a ; -- <0092> pop x -- "
    00a0 : fc00 ; -- <0092> rtn

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
    00a1 : 2802 ; -- <0096> push i -- func get4x
    00a2 : 2803 ; -- <0096> push j -- "
    00a3 : 2804 ; -- <0096> push x -- "
    00a4 : 2805 ; -- <0096> push y -- "
    00a5 : 283e ; -- <0096> push rtna -- "
-- y = digit counter
-- j = sum
    00a6 : 1604 ; -- <0099> y = 4
-- :again -- = 0x00a7
    00a7 : 2800 ; -- <0101> push a -- "
    00a8 : 37a0 ; -- <0101> "
    00a9 : 0200 ; -- <0101> "
    00aa : 3a00 ; -- <0101> "
    00ab : 2c00 ; -- <0101> "
    00ac : 000a ; -- <0101> pop a -- "
    00ad : 13a0 ; -- <0102> x = :hexdigits
    00ae : 005c ; -- <0102> "
    00af : 0a10 ; -- <0103> i = 16
    00b0 : fba0 ; -- <0104> call :find_in_fetch
    00b1 : 003f ; -- <0104> "
    00b2 : fc00 ; -- <0104> "
    00b3 : 0760 ; -- <0105> b = -1
    00b4 : e007 ; -- <0106> br eq :fail
    00b5 : 00c9 ; -- <0106> "
    00b6 : 0400 ; -- <0107> b = a
    00b7 : 0003 ; -- <0108> a = j
    00b8 : 0352 ; -- <0109> a = a<<4
    00b9 : c800 ; -- <0110> nop
    00ba : 0f34 ; -- <0111> j = or
    00bb : 1360 ; -- <0112> x = -1
    00bc : c800 ; -- <0113> nop
    00bd : 1720 ; -- <0114> y = x+y
    00be : 0005 ; -- <0115> a = y
    00bf : e400 ; -- <0116> bn az :again
    00c0 : 00a7 ; -- <0116> "
    00c1 : 0003 ; -- <0117> a = j
    00c2 : 0600 ; -- <0118> b = 0
    00c3 : f80a ; -- <0119> pop rtna -- rtn
    00c4 : 140a ; -- <0119> pop y -- "
    00c5 : 100a ; -- <0119> pop x -- "
    00c6 : 0c0a ; -- <0119> pop j -- "
    00c7 : 080a ; -- <0119> pop i -- "
    00c8 : fc00 ; -- <0119> rtn
-- :fail -- = 0x00c9
    00c9 : 0760 ; -- <0121> b = -1
    00ca : f80a ; -- <0122> pop rtna -- rtn
    00cb : 140a ; -- <0122> pop y -- "
    00cc : 100a ; -- <0122> pop x -- "
    00cd : 0c0a ; -- <0122> pop j -- "
    00ce : 080a ; -- <0122> pop i -- "
    00cf : fc00 ; -- <0122> rtn

-- routine waits a number of milliseconds given in a.
    00d0 : 2804 ; -- <0002> push x -- func spinwait
    00d1 : 2805 ; -- <0002> push y -- "
--patch
--rtn
    00d2 : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x00d3
    00d3 : 13a0 ; -- <0007> x = 16666
    00d4 : 411a ; -- <0007> "
    00d5 : 1760 ; -- <0008> y = -1
    00d6 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x00d7
    00d7 : 1320 ; -- <0011> x = x+y
    00d8 : e402 ; -- <0012> bn xz :spinwait_inner
    00d9 : 00d7 ; -- <0012> "
    00da : 0300 ; -- <0013> a = a+b
    00db : e400 ; -- <0014> bn az :spinwait_outer
    00dc : 00d3 ; -- <0014> "
    00dd : 140a ; -- <0015> pop y -- rtn
    00de : 100a ; -- <0015> pop x -- "
    00df : fc00 ; -- <0015> rtn



-- --------------------------------------------
-- :main -- = 0x00e0
    00e0 : 0006 ; -- <0072> a = g6
    00e1 : 0601 ; -- <0073> b = 1
    00e2 : c800 ; -- <0074> nop
    00e3 : 0300 ; -- <0075> a = a+b
    00e4 : 1800 ; -- <0076> g6 = a
    00e5 : 0353 ; -- <0077> a = a>>4
    00e6 : 2753 ; -- <0078> leds = a>>4
-- atx_ctrl = 0

-- debugging version of get4x
-- y = digit counter
-- j = sum
    00e7 : 1604 ; -- <0084> y = 4
-- :again -- = 0x00e8
    00e8 : 0266 ; -- <0086> a = 102 -- asc a = "f"
    00e9 : 13a0 ; -- <0087> x = :hexdigits
    00ea : 005c ; -- <0087> "
    00eb : 0a10 ; -- <0088> i = 16
    00ec : fba0 ; -- <0089> call :find_in_fetch
    00ed : 003f ; -- <0089> "
    00ee : fc00 ; -- <0089> "
    00ef : 0760 ; -- <0090> b = -1
    00f0 : e007 ; -- <0091> br eq :fail
    00f1 : 0101 ; -- <0091> "
    00f2 : 0400 ; -- <0092> b = a
    00f3 : 0003 ; -- <0093> a = j
    00f4 : 0352 ; -- <0094> a = a<<4
    00f5 : c800 ; -- <0095> nop
    00f6 : 0f34 ; -- <0096> j = or
    00f7 : 1360 ; -- <0097> x = -1
    00f8 : c800 ; -- <0098> nop
    00f9 : 1720 ; -- <0099> y = x+y
    00fa : 0005 ; -- <0100> a = y
    00fb : e400 ; -- <0101> bn az :again
    00fc : 00e8 ; -- <0101> "
    00fd : 0003 ; -- <0102> a = j
    00fe : 0600 ; -- <0103> b = 0
    00ff : e00f ; -- <0104> jmp :main
    0100 : 00e0 ; -- <0104> "
-- :fail -- = 0x0101
    0101 : 0760 ; -- <0106> b = -1
    0102 : e00f ; -- <0107> jmp :main
    0103 : 00e0 ; -- <0107> "

-- -- a = 65
-- -- push a
-- -- a = 66
-- -- push a
-- -- a = 67
-- -- push a
-- -- a = 68
-- -- push a
-- -- a = 69
-- -- push a

-- -- pop b
-- -- putchar b
-- -- pop b
-- -- putchar b
-- -- pop b
-- -- putchar b
-- -- pop b
-- -- putchar b
-- -- pop b
-- -- putchar b

-- -- a = 0x1234
-- -- call put4x

-- -- x = 0x1234
-- -- y = 1
-- -- a = 0
-- -- :nextwrite
-- -- m9k_addr = a
-- -- m9k_data = x
-- -- x = x+y
-- -- b = 1
-- -- nop
-- -- a = a+b
-- -- b = 1024
-- -- br lt :nextwrite

-- --patch
-- x = 0
-- y = 1
-- :patch

-- a = leds
-- b = 1
-- nop
-- leds = a+b

-- -- -- Avalon write to JTAG UART.
-- -- putasc A
-- -- putasc B
-- -- putasc C
-- -- putasc D
-- -- putasc E
-- -- putasc F
-- -- putasc G
-- -- putasc H
-- -- putasc I
-- -- putasc J
-- -- putasc K
-- -- putasc L
-- -- putasc M
-- -- putasc N

-- -- -- Avalon read from JTAG UART.
-- -- :poll_jtag_uart
-- -- a = 0x1234
-- -- call put4x
-- -- a = 1000
-- -- call :spinwait
-- -- putasc "/"
-- -- a = 1000
-- -- call :spinwait
-- -- av_ad_hi = $jtag_uart_data_lsw_hi
-- -- av_ad_lo = $jtag_uart_data_lsw_lo
-- -- a = av_write_data
-- -- a = av_read_data
-- -- call put4x
-- -- a = 1000
-- -- call :spinwait
-- -- putasc ","
-- -- a = 1000
-- -- call :spinwait
-- -- av_ad_hi = $jtag_uart_data_msw_hi
-- -- av_ad_lo = $jtag_uart_data_msw_lo
-- -- a = av_write_data
-- -- a = av_read_data
-- -- call put4x
-- -- a = 1000
-- -- call :spinwait
-- -- putasc ","
-- -- a = 1000
-- -- call :spinwait
-- -- av_ad_hi = $jtag_uart_ctrl_lsw_hi
-- -- av_ad_lo = $jtag_uart_ctrl_lsw_lo
-- -- a = av_write_data
-- -- a = av_read_data
-- -- call put4x
-- -- a = 1000
-- -- call :spinwait
-- -- putasc ","
-- -- a = 1000
-- -- call :spinwait
-- -- av_ad_hi = $jtag_uart_ctrl_msw_hi
-- -- av_ad_lo = $jtag_uart_ctrl_msw_lo
-- -- a = av_write_data
-- -- a = av_read_data
-- -- call put4x
-- -- a = 1000
-- -- call :spinwait
-- -- putasc "/"
-- -- a = 1000
-- -- call :spinwait
-- -- a = 0x5678
-- -- call put4x
-- -- a = 1000
-- -- call :spinwait
-- -- putasc "\r"
-- -- putasc "\n"
-- -- a = 1000
-- -- call :spinwait
-- -- jmp :poll_jtag_uart

-- -- Avalon write to SDRAM.
-- av_ad_hi = 0
-- av_ad_lo = 0x20
-- av_write_data = 0x6789
-- -- Avalon read from SDRAM.
-- a = av_write_data
-- a = av_read_data
-- call put4x
-- a = 1000
-- call :spinwait

-- :verify_all
-- a = 1000
-- call :spinwait
-- putasc {-}
-- i = 0x200
-- j = -1
-- nop
-- :next_page
-- i = i+j
-- av_ad_hi = i

-- -- fill SDRAM page with a pattern.
-- putasc W
-- x = 0x0000
-- :fill_more
-- a = x
-- b = 0xffff
-- nop
-- g6 = xor
-- av_ad_hi = i
-- av_ad_lo = x
-- av_write_data = g6
-- y = 2
-- nop
-- x = x+y
-- bn xz :fill_more

-- -- verify pattern in SDRAM.
-- x = 0x0000
-- :verify_more
-- av_ad_hi = i
-- av_ad_lo = x
-- g6 = av_write_data
-- g6 = av_read_data
-- -- a = x
-- -- call put4x
-- -- putasc "="
-- -- a = 500
-- -- call :spinwait
-- -- a = g6
-- -- call put4x
-- -- putasc "\r"
-- -- putasc "\n"
-- -- a = 500
-- -- call :spinwait
-- a = x
-- b = 0xffff
-- nop
-- a = xor
-- b = g6
-- bn eq :sdram_err
-- y = 2
-- nop
-- x = x+y
-- bn xz :verify_more

-- a = i
-- b = 0
-- bn z :next_page
-- jmp :verify_all

-- :sdram_err
-- y = a
-- a = 1000
-- call :spinwait
-- a = g6
-- call :put4x
-- a = 1000
-- call :spinwait
-- putasc "!"
-- putasc "="
-- a = y
-- call :put4x
-- a = 1000
-- call :spinwait
-- putasc "@"
-- a = av_ad_hi
-- call :put4x
-- a = 1000
-- call :spinwait
-- a = av_ad_lo
-- call put4x
-- :halt
-- jmp :halt

-- -- :wait_key_press
-- -- a = 0x03
-- -- b = keys
-- -- br eq :wait_key_press
-- -- :wait_key_release
-- -- b = keys
-- -- bn eq :wait_key_release

-- -- getchar
-- -- b = 1
-- -- nop
-- -- putchar a+b

-- -- b = 85
-- -- putchar b

-- -- x = x+y
-- -- nop
-- -- a = x
-- -- call put4x

-- a = 100
-- call :spinwait

-- -- b = 32
-- -- putchar b
-- -- m9k_addr = x
-- -- a = m9k_data
-- -- call put4x

-- -- b = 13
-- -- putchar b
-- -- b = 10
-- -- putchar b

-- jmp :patch





-- -- using i as index into string.
-- i = 0

-- -- cache the string limit in g6.
-- a = 16
-- b = 0xffff
-- nop
-- g6 = xor

-- :again
-- -- -- wait for keypress.
-- -- :wait_key_press
-- -- a = 0
-- -- b = keys
-- -- br z :wait_key_press
-- -- :wait_key_release
-- -- b = keys
-- -- bn z :wait_key_release

-- a = 100
-- call :spinwait

-- -- increment LEDs
-- a = leds
-- b = 1
-- nop
-- leds = a+b

-- -- fetch a word from test pattern to the UART.  its low byte is a character.
-- j = :msg
-- nop
-- fetch a from i+j
-- --    putchar a

-- -- increment index & wrap around end of pattern.
-- j = 1
-- nop
-- i = i+j
-- j = g6
-- nop
-- i = i+j
-- bn iz :no_wrap
-- i = 0
-- :no_wrap

-- -- repeat forever.
-- jmp :again

-- :msg
-- "1234567890abcdef\n\x00"


        
        END;
    
