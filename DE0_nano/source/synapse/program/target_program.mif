
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 015d ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.
-- num_gp should include the p registers and the operators.  everything beneath the peripherals.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.



-- I/O expansion bus.

    0002 : 0011 ; -- <0039> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0039>   
    0004 : 2020 ; -- <0039>   
    0005 : 2020 ; -- <0039>   
    0006 : 6120 ; -- <0039> a 
-- "       b"
    0007 : 2020 ; -- <0039>   
    0008 : 2020 ; -- <0039>   
    0009 : 2020 ; -- <0039>   
    000a : 6220 ; -- <0039> b 
-- "       i"
    000b : 2020 ; -- <0039>   
    000c : 2020 ; -- <0039>   
    000d : 2020 ; -- <0039>   
    000e : 6920 ; -- <0039> i 
-- "       j"
    000f : 2020 ; -- <0039>   
    0010 : 2020 ; -- <0039>   
    0011 : 2020 ; -- <0039>   
    0012 : 6a20 ; -- <0039> j 
-- "       x"
    0013 : 2020 ; -- <0039>   
    0014 : 2020 ; -- <0039>   
    0015 : 2020 ; -- <0039>   
    0016 : 7820 ; -- <0039> x 
-- "       y"
    0017 : 2020 ; -- <0039>   
    0018 : 2020 ; -- <0039>   
    0019 : 2020 ; -- <0039>   
    001a : 7920 ; -- <0039> y 
-- "      ga"
    001b : 2020 ; -- <0039>   
    001c : 2020 ; -- <0039>   
    001d : 2020 ; -- <0039>   
    001e : 6167 ; -- <0039> ag
-- "      gb"
    001f : 2020 ; -- <0039>   
    0020 : 2020 ; -- <0039>   
    0021 : 2020 ; -- <0039>   
    0022 : 6267 ; -- <0039> bg
-- "      pa"
    0023 : 2020 ; -- <0039>   
    0024 : 2020 ; -- <0039>   
    0025 : 2020 ; -- <0039>   
    0026 : 6170 ; -- <0039> ap
-- "      pb"
    0027 : 2020 ; -- <0039>   
    0028 : 2020 ; -- <0039>   
    0029 : 2020 ; -- <0039>   
    002a : 6270 ; -- <0039> bp
-- "      pc"
    002b : 2020 ; -- <0039>   
    002c : 2020 ; -- <0039>   
    002d : 2020 ; -- <0039>   
    002e : 6370 ; -- <0039> cp
-- "      pd"
    002f : 2020 ; -- <0039>   
    0030 : 2020 ; -- <0039>   
    0031 : 2020 ; -- <0039>   
    0032 : 6470 ; -- <0039> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0039> --
    0034 : 7372 ; -- <0039> sr
    0035 : 6b74 ; -- <0039> kt
    0036 : 2020 ; -- <0039>   
-- "--uartdt"
    0037 : 2f2f ; -- <0039> --
    0038 : 6175 ; -- <0039> au
    0039 : 7472 ; -- <0039> tr
    003a : 7464 ; -- <0039> td
-- "uartstat"
    003b : 6175 ; -- <0039> au
    003c : 7472 ; -- <0039> tr
    003d : 7473 ; -- <0039> ts
    003e : 7461 ; -- <0039> ta
-- "--edata "
    003f : 2f2f ; -- <0039> --
    0040 : 6465 ; -- <0039> de
    0041 : 7461 ; -- <0039> ta
    0042 : 2061 ; -- <0039>  a
-- "   eaddr"
    0043 : 2020 ; -- <0039>   
    0044 : 6520 ; -- <0039> e 
    0045 : 6461 ; -- <0039> da
    0046 : 7264 ; -- <0039> rd

-- string resources
-- :boot_msg -- = 0x0047
-- "TGT\r\n\x0"
    0047 : 4754 ; -- <0043> GT
    0048 : 0d54 ; -- <0043>  T
    0049 : 000a ; -- <0043>   
-- :fail_msg -- = 0x004a
-- "FAIL TEST \x0"
    004a : 4146 ; -- <0045> AF
    004b : 4c49 ; -- <0045> LI
    004c : 5420 ; -- <0045> T 
    004d : 5345 ; -- <0045> SE
    004e : 2054 ; -- <0045>  T
    004f : 0000 ; -- <0045>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x0050
    0050 : 3004 ; -- <0046> push x -- func putchar_fduart

    0051 : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    0052 : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x0053
    0053 : 040e ; -- <0053> b = fduart_status
    0054 : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    0055 : 0053 ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    0056 : 3404 ; -- <0057> fduart_data = x
    0057 : 100c ; -- <0058> pop x -- end_func
    0058 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x0059
-- wait until FIFO is populated.
    0059 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x005a
    005a : 040e ; -- <0066> b = fduart_status
    005b : e403 ; -- <0067> bn and0z :wait_for_busy
    005c : 005a ; -- <0067> "
    005d : 000d ; -- <0068> a = fduart_data
    005e : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x005f
-- check for FIFO is populated.
    005f : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    0060 : 040e ; -- <0075> b = fduart_status
    0061 : e403 ; -- <0076> bn and0z :none
    0062 : 0065 ; -- <0076> "
    0063 : 000d ; -- <0077> a = fduart_data
    0064 : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x0065
    0065 : 0360 ; -- <0080> a = -1
    0066 : fc00 ; -- <0080> swapra = nop



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0067
-- "0123456789abcdef"
    0067 : 3130 ; -- <0050> 10
    0068 : 3332 ; -- <0050> 32
    0069 : 3534 ; -- <0050> 54
    006a : 3736 ; -- <0050> 76
    006b : 3938 ; -- <0050> 98
    006c : 6261 ; -- <0050> ba
    006d : 6463 ; -- <0050> dc
    006e : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x006f
    006f : 3004 ; -- <0054> push x -- func put4x
    0070 : 3006 ; -- <0054> push ga -- "
    0071 : 303e ; -- <0054> push rtna -- "
    0072 : 13a0 ; -- <0055> x = :hexdigits
    0073 : 0067 ; -- <0055> "

    0074 : 1800 ; -- <0057> ga = a
    0075 : 07a0 ; -- <0058> b = 0xF000
    0076 : f000 ; -- <0058> "
    0077 : c800 ; -- <0059> a = and
    0078 : 0330 ; -- <0059> "
    0079 : 0353 ; -- <0060> a = a>>4
    007a : 0353 ; -- <0061> a = a>>4
    007b : 0353 ; -- <0062> a = a>>4
    007c : fba0 ; -- <0063> call fetch_byte
    007d : 011c ; -- <0063> "
    007e : fc00 ; -- <0063> "
    007f : fba0 ; -- <0064> putchar a
    0080 : 0050 ; -- <0064> "
    0081 : fc00 ; -- <0064> "

    0082 : 0006 ; -- <0066> a = ga
    0083 : 07a0 ; -- <0067> b = 0x0F00
    0084 : 0f00 ; -- <0067> "
    0085 : c800 ; -- <0068> a = and
    0086 : 0330 ; -- <0068> "
    0087 : 0353 ; -- <0069> a = a>>4
    0088 : 0353 ; -- <0070> a = a>>4
    0089 : fba0 ; -- <0071> call fetch_byte
    008a : 011c ; -- <0071> "
    008b : fc00 ; -- <0071> "
    008c : fba0 ; -- <0072> putchar a
    008d : 0050 ; -- <0072> "
    008e : fc00 ; -- <0072> "

    008f : 0006 ; -- <0074> a = ga
    0090 : 06f0 ; -- <0075> b = 0x00F0
    0091 : c800 ; -- <0076> a = and
    0092 : 0330 ; -- <0076> "
    0093 : 0353 ; -- <0077> a = a>>4
    0094 : fba0 ; -- <0078> call fetch_byte
    0095 : 011c ; -- <0078> "
    0096 : fc00 ; -- <0078> "
    0097 : fba0 ; -- <0079> putchar a
    0098 : 0050 ; -- <0079> "
    0099 : fc00 ; -- <0079> "

    009a : 0006 ; -- <0081> a = ga
    009b : 060f ; -- <0082> b = 0x000F
    009c : c800 ; -- <0083> a = and
    009d : 0330 ; -- <0083> "
    009e : fba0 ; -- <0084> call fetch_byte
    009f : 011c ; -- <0084> "
    00a0 : fc00 ; -- <0084> "
    00a1 : fba0 ; -- <0085> putchar a
    00a2 : 0050 ; -- <0085> "
    00a3 : fc00 ; -- <0085> "

    00a4 : f80c ; -- <0087> pop rtna -- end_func
    00a5 : 180c ; -- <0087> pop ga -- "
    00a6 : 100c ; -- <0087> pop x -- "
    00a7 : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00a8
    00a8 : 3002 ; -- <0091> push i -- func get4x
    00a9 : 3003 ; -- <0091> push j -- "
    00aa : 3004 ; -- <0091> push x -- "
    00ab : 3005 ; -- <0091> push y -- "
    00ac : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    00ad : 1604 ; -- <0094> y = 4
-- :again -- = 0x00ae
    00ae : fba0 ; -- <0096> getchar
    00af : 0059 ; -- <0096> "
    00b0 : fc00 ; -- <0096> "
    00b1 : 13a0 ; -- <0097> x = :hexdigits
    00b2 : 0067 ; -- <0097> "
    00b3 : 0a10 ; -- <0098> i = 16
    00b4 : fba0 ; -- <0099> call :find_in_fetch
    00b5 : 0130 ; -- <0099> "
    00b6 : fc00 ; -- <0099> "
    00b7 : 0760 ; -- <0100> b = -1
    00b8 : e007 ; -- <0101> br eq :fail
    00b9 : 00cd ; -- <0101> "
    00ba : 0400 ; -- <0102> b = a
    00bb : 0003 ; -- <0103> a = j
    00bc : 0352 ; -- <0104> a = a<<4
    00bd : c800 ; -- <0105> j = or
    00be : 0f34 ; -- <0105> "
    00bf : 1360 ; -- <0106> x = -1
    00c0 : c800 ; -- <0107> y = x+y
    00c1 : 1720 ; -- <0107> "
    00c2 : 0005 ; -- <0108> a = y
    00c3 : e400 ; -- <0109> bn az :again
    00c4 : 00ae ; -- <0109> "
    00c5 : 0003 ; -- <0110> a = j
    00c6 : 0600 ; -- <0111> b = 0
    00c7 : f80c ; -- <0112> pop rtna -- rtn
    00c8 : 140c ; -- <0112> pop y -- "
    00c9 : 100c ; -- <0112> pop x -- "
    00ca : 0c0c ; -- <0112> pop j -- "
    00cb : 080c ; -- <0112> pop i -- "
    00cc : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x00cd
    00cd : 0760 ; -- <0114> b = -1
    00ce : f80c ; -- <0115> pop rtna -- end_func
    00cf : 140c ; -- <0115> pop y -- "
    00d0 : 100c ; -- <0115> pop x -- "
    00d1 : 0c0c ; -- <0115> pop j -- "
    00d2 : 080c ; -- <0115> pop i -- "
    00d3 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x00d4
    00d4 : 3002 ; -- <0121> push i -- func print_fixed
    00d5 : 3003 ; -- <0121> push j -- "
    00d6 : 3004 ; -- <0121> push x -- "
    00d7 : 3005 ; -- <0121> push y -- "
    00d8 : 3006 ; -- <0121> push ga -- "
    00d9 : 303e ; -- <0121> push rtna -- "
    00da : 0800 ; -- <0122> i = a
    00db : 0e01 ; -- <0123> j = 1
    00dc : 1001 ; -- <0124> x = b
    00dd : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x00de
    00de : e002 ; -- <0127> br xz :done
    00df : 00f4 ; -- <0127> "
    00e0 : 1320 ; -- <0128> x = ad2
    00e1 : d002 ; -- <0129> fetch ga from i
    00e2 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, ga = data word.
    00e3 : 0006 ; -- <0131> a = ga -- putchar ga
    00e4 : fba0 ; -- <0131> putchar ga
    00e5 : 0050 ; -- <0131> "
    00e6 : fc00 ; -- <0131> "
    00e7 : e002 ; -- <0132> br xz :done
    00e8 : 00f4 ; -- <0132> "
    00e9 : 1320 ; -- <0133> x = ad2
    00ea : 0006 ; -- <0134> a = ga
    00eb : 0353 ; -- <0135> a = a>>4
    00ec : 0353 ; -- <0136> a = a>>4
    00ed : fba0 ; -- <0137> putchar a
    00ee : 0050 ; -- <0137> "
    00ef : fc00 ; -- <0137> "
    00f0 : c800 ; -- <0138> i = i+j
    00f1 : 0b10 ; -- <0138> "
    00f2 : e00f ; -- <0139> jmp :next_word
    00f3 : 00de ; -- <0139> "
-- :done -- = 0x00f4
    00f4 : f80c ; -- <0141> pop rtna -- end_func
    00f5 : 180c ; -- <0141> pop ga -- "
    00f6 : 140c ; -- <0141> pop y -- "
    00f7 : 100c ; -- <0141> pop x -- "
    00f8 : 0c0c ; -- <0141> pop j -- "
    00f9 : 080c ; -- <0141> pop i -- "
    00fa : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x00fb
    00fb : 3002 ; -- <0147> push i -- func print_nt
    00fc : 3003 ; -- <0147> push j -- "
    00fd : 3004 ; -- <0147> push x -- "
    00fe : 303e ; -- <0147> push rtna -- "
    00ff : 0800 ; -- <0148> i = a
    0100 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0101
    0101 : d002 ; -- <0151> fetch x from i
    0102 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0103 : 0004 ; -- <0153> a = x
    0104 : 06ff ; -- <0154> b = 0xff
    0105 : e003 ; -- <0155> br and0z :done
    0106 : 0117 ; -- <0155> "
    0107 : fba0 ; -- <0156> putchar a
    0108 : 0050 ; -- <0156> "
    0109 : fc00 ; -- <0156> "
    010a : 0004 ; -- <0157> a = x
    010b : 0353 ; -- <0158> a = a>>4
    010c : 0353 ; -- <0159> a = a>>4
    010d : 06ff ; -- <0160> b = 0xff
    010e : e003 ; -- <0161> br and0z :done
    010f : 0117 ; -- <0161> "
    0110 : fba0 ; -- <0162> putchar a
    0111 : 0050 ; -- <0162> "
    0112 : fc00 ; -- <0162> "
    0113 : c800 ; -- <0163> i = i+j
    0114 : 0b10 ; -- <0163> "
    0115 : e00f ; -- <0164> jmp :next_word
    0116 : 0101 ; -- <0164> "
-- :done -- = 0x0117
    0117 : f80c ; -- <0166> pop rtna -- end_func
    0118 : 100c ; -- <0166> pop x -- "
    0119 : 0c0c ; -- <0166> pop j -- "
    011a : 080c ; -- <0166> pop i -- "
    011b : fc00 ; -- <0165> swapra = nop


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x011c
    011c : 0601 ; -- <0005> b = 1
    011d : e003 ; -- <0006> br and0z :pick_byte_even
    011e : 0127 ; -- <0006> "
    011f : 0350 ; -- <0007> a = a>>1
    0120 : 0404 ; -- <0008> b = x
    0121 : c800 ; -- <0009> fetch a from a+b
    0122 : d300 ; -- <0009> "
    0123 : 03b0 ; -- <0009> "
    0124 : 0353 ; -- <0010> a = a>>4
    0125 : 0353 ; -- <0011> a = a>>4
    0126 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x0127
    0127 : 0350 ; -- <0014> a = a>>1
    0128 : 0404 ; -- <0015> b = x
    0129 : c800 ; -- <0016> fetch a from a+b
    012a : d300 ; -- <0016> "
    012b : 03b0 ; -- <0016> "
    012c : 06ff ; -- <0017> b = 0xff
    012d : c800 ; -- <0018> a = and
    012e : 0330 ; -- <0018> "
    012f : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x0130
    0130 : 3002 ; -- <0027> push i -- func find_in_fetch
    0131 : 3003 ; -- <0027> push j -- "
    0132 : 3005 ; -- <0027> push y -- "
    0133 : 303e ; -- <0027> push rtna -- "
    0134 : 1400 ; -- <0028> y = a
    0135 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0136
    0136 : e001 ; -- <0031> br iz :fail
    0137 : 0146 ; -- <0031> "
    0138 : 0b10 ; -- <0032> i = ad1
    0139 : 0002 ; -- <0033> a = i
    013a : fba0 ; -- <0034> call :fetch_byte
    013b : 011c ; -- <0034> "
    013c : fc00 ; -- <0034> "
    013d : 0405 ; -- <0035> b = y
    013e : e407 ; -- <0036> bn eq :again
    013f : 0136 ; -- <0036> "
-- :found -- = 0x0140
    0140 : 0002 ; -- <0038> a = i
    0141 : f80c ; -- <0039> pop rtna -- rtn
    0142 : 140c ; -- <0039> pop y -- "
    0143 : 0c0c ; -- <0039> pop j -- "
    0144 : 080c ; -- <0039> pop i -- "
    0145 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0146
    0146 : 0360 ; -- <0041> a = -1
    0147 : f80c ; -- <0042> pop rtna -- end_func
    0148 : 140c ; -- <0042> pop y -- "
    0149 : 0c0c ; -- <0042> pop j -- "
    014a : 080c ; -- <0042> pop i -- "
    014b : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x014c
    014c : 3004 ; -- <0002> push x -- func spinwait
    014d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    014e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x014f
    014f : 13a0 ; -- <0007> x = 16666
    0150 : 411a ; -- <0007> "
    0151 : 1760 ; -- <0008> y = -1
    0152 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0153
-- use of the ad2 name overrides auto-nop here.
    0153 : 1320 ; -- <0012> x = ad2
    0154 : e402 ; -- <0013> bn xz :spinwait_inner
    0155 : 0153 ; -- <0013> "
    0156 : c800 ; -- <0014> a = a+b
    0157 : 0300 ; -- <0014> "
    0158 : e400 ; -- <0015> bn az :spinwait_outer
    0159 : 014f ; -- <0015> "
    015a : 140c ; -- <0016> pop y -- end_func
    015b : 100c ; -- <0016> pop x -- "
    015c : fc00 ; -- <0015> swapra = nop




-- #########################################################################
-- :main -- = 0x015d

    015d : 03a0 ; -- <0100> a = :boot_msg
    015e : 0047 ; -- <0100> "
    015f : fba0 ; -- <0101> call print_nt
    0160 : 00fb ; -- <0101> "
    0161 : fc00 ; -- <0101> "

-- :begin_test -- = 0x0162

-- clear out contents
    0162 : 4200 ; -- <0106> ewrite 0 0
    0163 : 3e00 ; -- <0106> "
    0164 : 4201 ; -- <0107> ewrite 1 0
    0165 : 3e00 ; -- <0107> "
    0166 : 4202 ; -- <0108> ewrite 2 0
    0167 : 3e00 ; -- <0108> "
    0168 : 4203 ; -- <0109> ewrite 3 0
    0169 : 3e00 ; -- <0109> "
-- etest  0 0 0x00

    016a : 0200 ; -- <0110> a = 0
    016b : fba0 ; -- <0110> call put4x
    016c : 006f ; -- <0110> "
    016d : fc00 ; -- <0110> "
    016e : 023a ; -- <0110> a = 58 -- putasc :
    016f : fba0 ; -- <0110> putasc :
    0170 : 0050 ; -- <0110> "
    0171 : fc00 ; -- <0110> "
    0172 : 0220 ; -- <0110> a = 32 -- putasc { }
    0173 : fba0 ; -- <0110> putasc { }
    0174 : 0050 ; -- <0110> "
    0175 : fc00 ; -- <0110> "
    0176 : 4200 ; -- <0110> eread 0 ga
    0177 : 180f ; -- <0110> "
    0178 : 180f ; -- <0110> "
    0179 : 0006 ; -- <0110> a = ga
    017a : fba0 ; -- <0110> call put4x
    017b : 006f ; -- <0110> "
    017c : fc00 ; -- <0110> "
    017d : 020d ; -- <0110> a = 13 -- puteol
    017e : fba0 ; -- <0110> puteol
    017f : 0050 ; -- <0110> "
    0180 : fc00 ; -- <0110> "
    0181 : 020a ; -- <0110> a = 10 -- puteol
    0182 : fba0 ; -- <0110> puteol
    0183 : 0050 ; -- <0110> "
    0184 : fc00 ; -- <0110> "



    0185 : 0006 ; -- <0110> a = ga
    0186 : 0600 ; -- <0110> b = 0

    0187 : e007 ; -- <0108> br eq :else_391
    0188 : 018d ; -- <0108> "

    0189 : 2200 ; -- <0109> pa = 0x00
    018a : fba0 ; -- <0109> callx fail 0x00
    018b : 04e3 ; -- <0109> "
    018c : fc00 ; -- <0109> "


-- etest  1 0 0x01

    018d : 0201 ; -- <0111> a = 1
    018e : fba0 ; -- <0111> call put4x
    018f : 006f ; -- <0111> "
    0190 : fc00 ; -- <0111> "
    0191 : 023a ; -- <0111> a = 58 -- putasc :
    0192 : fba0 ; -- <0111> putasc :
    0193 : 0050 ; -- <0111> "
    0194 : fc00 ; -- <0111> "
    0195 : 0220 ; -- <0111> a = 32 -- putasc { }
    0196 : fba0 ; -- <0111> putasc { }
    0197 : 0050 ; -- <0111> "
    0198 : fc00 ; -- <0111> "
    0199 : 4201 ; -- <0111> eread 1 ga
    019a : 180f ; -- <0111> "
    019b : 180f ; -- <0111> "
    019c : 0006 ; -- <0111> a = ga
    019d : fba0 ; -- <0111> call put4x
    019e : 006f ; -- <0111> "
    019f : fc00 ; -- <0111> "
    01a0 : 020d ; -- <0111> a = 13 -- puteol
    01a1 : fba0 ; -- <0111> puteol
    01a2 : 0050 ; -- <0111> "
    01a3 : fc00 ; -- <0111> "
    01a4 : 020a ; -- <0111> a = 10 -- puteol
    01a5 : fba0 ; -- <0111> puteol
    01a6 : 0050 ; -- <0111> "
    01a7 : fc00 ; -- <0111> "



    01a8 : 0006 ; -- <0111> a = ga
    01a9 : 0600 ; -- <0111> b = 0

    01aa : e007 ; -- <0109> br eq :else_426
    01ab : 01b0 ; -- <0109> "

    01ac : 2201 ; -- <0110> pa = 0x01
    01ad : fba0 ; -- <0110> callx fail 0x01
    01ae : 04e3 ; -- <0110> "
    01af : fc00 ; -- <0110> "


-- etest  2 0 0x02

    01b0 : 0202 ; -- <0112> a = 2
    01b1 : fba0 ; -- <0112> call put4x
    01b2 : 006f ; -- <0112> "
    01b3 : fc00 ; -- <0112> "
    01b4 : 023a ; -- <0112> a = 58 -- putasc :
    01b5 : fba0 ; -- <0112> putasc :
    01b6 : 0050 ; -- <0112> "
    01b7 : fc00 ; -- <0112> "
    01b8 : 0220 ; -- <0112> a = 32 -- putasc { }
    01b9 : fba0 ; -- <0112> putasc { }
    01ba : 0050 ; -- <0112> "
    01bb : fc00 ; -- <0112> "
    01bc : 4202 ; -- <0112> eread 2 ga
    01bd : 180f ; -- <0112> "
    01be : 180f ; -- <0112> "
    01bf : 0006 ; -- <0112> a = ga
    01c0 : fba0 ; -- <0112> call put4x
    01c1 : 006f ; -- <0112> "
    01c2 : fc00 ; -- <0112> "
    01c3 : 020d ; -- <0112> a = 13 -- puteol
    01c4 : fba0 ; -- <0112> puteol
    01c5 : 0050 ; -- <0112> "
    01c6 : fc00 ; -- <0112> "
    01c7 : 020a ; -- <0112> a = 10 -- puteol
    01c8 : fba0 ; -- <0112> puteol
    01c9 : 0050 ; -- <0112> "
    01ca : fc00 ; -- <0112> "



    01cb : 0006 ; -- <0112> a = ga
    01cc : 0600 ; -- <0112> b = 0

    01cd : e007 ; -- <0110> br eq :else_461
    01ce : 01d3 ; -- <0110> "

    01cf : 2202 ; -- <0111> pa = 0x02
    01d0 : fba0 ; -- <0111> callx fail 0x02
    01d1 : 04e3 ; -- <0111> "
    01d2 : fc00 ; -- <0111> "


-- etest  3 0 0x03

    01d3 : 0203 ; -- <0113> a = 3
    01d4 : fba0 ; -- <0113> call put4x
    01d5 : 006f ; -- <0113> "
    01d6 : fc00 ; -- <0113> "
    01d7 : 023a ; -- <0113> a = 58 -- putasc :
    01d8 : fba0 ; -- <0113> putasc :
    01d9 : 0050 ; -- <0113> "
    01da : fc00 ; -- <0113> "
    01db : 0220 ; -- <0113> a = 32 -- putasc { }
    01dc : fba0 ; -- <0113> putasc { }
    01dd : 0050 ; -- <0113> "
    01de : fc00 ; -- <0113> "
    01df : 4203 ; -- <0113> eread 3 ga
    01e0 : 180f ; -- <0113> "
    01e1 : 180f ; -- <0113> "
    01e2 : 0006 ; -- <0113> a = ga
    01e3 : fba0 ; -- <0113> call put4x
    01e4 : 006f ; -- <0113> "
    01e5 : fc00 ; -- <0113> "
    01e6 : 020d ; -- <0113> a = 13 -- puteol
    01e7 : fba0 ; -- <0113> puteol
    01e8 : 0050 ; -- <0113> "
    01e9 : fc00 ; -- <0113> "
    01ea : 020a ; -- <0113> a = 10 -- puteol
    01eb : fba0 ; -- <0113> puteol
    01ec : 0050 ; -- <0113> "
    01ed : fc00 ; -- <0113> "



    01ee : 0006 ; -- <0113> a = ga
    01ef : 0600 ; -- <0113> b = 0

    01f0 : e007 ; -- <0111> br eq :else_496
    01f1 : 01f6 ; -- <0111> "

    01f2 : 2203 ; -- <0112> pa = 0x03
    01f3 : fba0 ; -- <0112> callx fail 0x03
    01f4 : 04e3 ; -- <0112> "
    01f5 : fc00 ; -- <0112> "



-- test for sufficient wait states on read.
    01f6 : 4201 ; -- <0116> ewrite 1 0x18
    01f7 : 3e18 ; -- <0116> "
    01f8 : 4201 ; -- <0117> eread 1 ga
    01f9 : 180f ; -- <0117> "
    01fa : 180f ; -- <0117> "
-- another read after some cycles have elapsed.
    01fb : 4201 ; -- <0119> eread 1 gb
    01fc : 1c0f ; -- <0119> "
    01fd : 1c0f ; -- <0119> "
    01fe : 0006 ; -- <0120> a = ga
    01ff : fba0 ; -- <0121> call put4x
    0200 : 006f ; -- <0121> "
    0201 : fc00 ; -- <0121> "
    0202 : 020d ; -- <0122> a = 13 -- puteol
    0203 : fba0 ; -- <0122> puteol
    0204 : 0050 ; -- <0122> "
    0205 : fc00 ; -- <0122> "
    0206 : 020a ; -- <0122> a = 10 -- puteol
    0207 : fba0 ; -- <0122> puteol
    0208 : 0050 ; -- <0122> "
    0209 : fc00 ; -- <0122> "
    020a : 0007 ; -- <0123> a = gb
    020b : fba0 ; -- <0124> call put4x
    020c : 006f ; -- <0124> "
    020d : fc00 ; -- <0124> "
    020e : 020d ; -- <0125> a = 13 -- puteol
    020f : fba0 ; -- <0125> puteol
    0210 : 0050 ; -- <0125> "
    0211 : fc00 ; -- <0125> "
    0212 : 020a ; -- <0125> a = 10 -- puteol
    0213 : fba0 ; -- <0125> puteol
    0214 : 0050 ; -- <0125> "
    0215 : fc00 ; -- <0125> "

    0216 : 0006 ; -- <0128> a = ga
    0217 : 0407 ; -- <0128> b = gb

    0218 : e007 ; -- <0126> br eq :else_536
    0219 : 021e ; -- <0126> "

    021a : 220f ; -- <0127> pa = 0x0f
    021b : fba0 ; -- <0127> callx fail 0x0f
    021c : 04e3 ; -- <0127> "
    021d : fc00 ; -- <0127> "


-- basic function test.
-- consecutive writes, different addresses.
-- consecutive reads, different addresses.
    021e : 4200 ; -- <0133> ewrite 0 0x40
    021f : 3e40 ; -- <0133> "
    0220 : 4201 ; -- <0134> ewrite 1 0x41
    0221 : 3e41 ; -- <0134> "
    0222 : 4202 ; -- <0135> ewrite 2 0x42
    0223 : 3e42 ; -- <0135> "
    0224 : 4203 ; -- <0136> ewrite 3 0x43
    0225 : 3e43 ; -- <0136> "
-- etest  0 0x40 0x10

    0226 : 0200 ; -- <0137> a = 0
    0227 : fba0 ; -- <0137> call put4x
    0228 : 006f ; -- <0137> "
    0229 : fc00 ; -- <0137> "
    022a : 023a ; -- <0137> a = 58 -- putasc :
    022b : fba0 ; -- <0137> putasc :
    022c : 0050 ; -- <0137> "
    022d : fc00 ; -- <0137> "
    022e : 0220 ; -- <0137> a = 32 -- putasc { }
    022f : fba0 ; -- <0137> putasc { }
    0230 : 0050 ; -- <0137> "
    0231 : fc00 ; -- <0137> "
    0232 : 4200 ; -- <0137> eread 0 ga
    0233 : 180f ; -- <0137> "
    0234 : 180f ; -- <0137> "
    0235 : 0006 ; -- <0137> a = ga
    0236 : fba0 ; -- <0137> call put4x
    0237 : 006f ; -- <0137> "
    0238 : fc00 ; -- <0137> "
    0239 : 020d ; -- <0137> a = 13 -- puteol
    023a : fba0 ; -- <0137> puteol
    023b : 0050 ; -- <0137> "
    023c : fc00 ; -- <0137> "
    023d : 020a ; -- <0137> a = 10 -- puteol
    023e : fba0 ; -- <0137> puteol
    023f : 0050 ; -- <0137> "
    0240 : fc00 ; -- <0137> "



    0241 : 0006 ; -- <0137> a = ga
    0242 : 0640 ; -- <0137> b = 0x40

    0243 : e007 ; -- <0135> br eq :else_579
    0244 : 0249 ; -- <0135> "

    0245 : 2210 ; -- <0136> pa = 0x10
    0246 : fba0 ; -- <0136> callx fail 0x10
    0247 : 04e3 ; -- <0136> "
    0248 : fc00 ; -- <0136> "


-- etest  1 0x41 0x11

    0249 : 0201 ; -- <0138> a = 1
    024a : fba0 ; -- <0138> call put4x
    024b : 006f ; -- <0138> "
    024c : fc00 ; -- <0138> "
    024d : 023a ; -- <0138> a = 58 -- putasc :
    024e : fba0 ; -- <0138> putasc :
    024f : 0050 ; -- <0138> "
    0250 : fc00 ; -- <0138> "
    0251 : 0220 ; -- <0138> a = 32 -- putasc { }
    0252 : fba0 ; -- <0138> putasc { }
    0253 : 0050 ; -- <0138> "
    0254 : fc00 ; -- <0138> "
    0255 : 4201 ; -- <0138> eread 1 ga
    0256 : 180f ; -- <0138> "
    0257 : 180f ; -- <0138> "
    0258 : 0006 ; -- <0138> a = ga
    0259 : fba0 ; -- <0138> call put4x
    025a : 006f ; -- <0138> "
    025b : fc00 ; -- <0138> "
    025c : 020d ; -- <0138> a = 13 -- puteol
    025d : fba0 ; -- <0138> puteol
    025e : 0050 ; -- <0138> "
    025f : fc00 ; -- <0138> "
    0260 : 020a ; -- <0138> a = 10 -- puteol
    0261 : fba0 ; -- <0138> puteol
    0262 : 0050 ; -- <0138> "
    0263 : fc00 ; -- <0138> "



    0264 : 0006 ; -- <0138> a = ga
    0265 : 0641 ; -- <0138> b = 0x41

    0266 : e007 ; -- <0136> br eq :else_614
    0267 : 026c ; -- <0136> "

    0268 : 2211 ; -- <0137> pa = 0x11
    0269 : fba0 ; -- <0137> callx fail 0x11
    026a : 04e3 ; -- <0137> "
    026b : fc00 ; -- <0137> "


-- etest  2 0x42 0x12

    026c : 0202 ; -- <0139> a = 2
    026d : fba0 ; -- <0139> call put4x
    026e : 006f ; -- <0139> "
    026f : fc00 ; -- <0139> "
    0270 : 023a ; -- <0139> a = 58 -- putasc :
    0271 : fba0 ; -- <0139> putasc :
    0272 : 0050 ; -- <0139> "
    0273 : fc00 ; -- <0139> "
    0274 : 0220 ; -- <0139> a = 32 -- putasc { }
    0275 : fba0 ; -- <0139> putasc { }
    0276 : 0050 ; -- <0139> "
    0277 : fc00 ; -- <0139> "
    0278 : 4202 ; -- <0139> eread 2 ga
    0279 : 180f ; -- <0139> "
    027a : 180f ; -- <0139> "
    027b : 0006 ; -- <0139> a = ga
    027c : fba0 ; -- <0139> call put4x
    027d : 006f ; -- <0139> "
    027e : fc00 ; -- <0139> "
    027f : 020d ; -- <0139> a = 13 -- puteol
    0280 : fba0 ; -- <0139> puteol
    0281 : 0050 ; -- <0139> "
    0282 : fc00 ; -- <0139> "
    0283 : 020a ; -- <0139> a = 10 -- puteol
    0284 : fba0 ; -- <0139> puteol
    0285 : 0050 ; -- <0139> "
    0286 : fc00 ; -- <0139> "



    0287 : 0006 ; -- <0139> a = ga
    0288 : 0642 ; -- <0139> b = 0x42

    0289 : e007 ; -- <0137> br eq :else_649
    028a : 028f ; -- <0137> "

    028b : 2212 ; -- <0138> pa = 0x12
    028c : fba0 ; -- <0138> callx fail 0x12
    028d : 04e3 ; -- <0138> "
    028e : fc00 ; -- <0138> "


-- etest  3 0x43 0x13

    028f : 0203 ; -- <0140> a = 3
    0290 : fba0 ; -- <0140> call put4x
    0291 : 006f ; -- <0140> "
    0292 : fc00 ; -- <0140> "
    0293 : 023a ; -- <0140> a = 58 -- putasc :
    0294 : fba0 ; -- <0140> putasc :
    0295 : 0050 ; -- <0140> "
    0296 : fc00 ; -- <0140> "
    0297 : 0220 ; -- <0140> a = 32 -- putasc { }
    0298 : fba0 ; -- <0140> putasc { }
    0299 : 0050 ; -- <0140> "
    029a : fc00 ; -- <0140> "
    029b : 4203 ; -- <0140> eread 3 ga
    029c : 180f ; -- <0140> "
    029d : 180f ; -- <0140> "
    029e : 0006 ; -- <0140> a = ga
    029f : fba0 ; -- <0140> call put4x
    02a0 : 006f ; -- <0140> "
    02a1 : fc00 ; -- <0140> "
    02a2 : 020d ; -- <0140> a = 13 -- puteol
    02a3 : fba0 ; -- <0140> puteol
    02a4 : 0050 ; -- <0140> "
    02a5 : fc00 ; -- <0140> "
    02a6 : 020a ; -- <0140> a = 10 -- puteol
    02a7 : fba0 ; -- <0140> puteol
    02a8 : 0050 ; -- <0140> "
    02a9 : fc00 ; -- <0140> "



    02aa : 0006 ; -- <0140> a = ga
    02ab : 0643 ; -- <0140> b = 0x43

    02ac : e007 ; -- <0138> br eq :else_684
    02ad : 02b2 ; -- <0138> "

    02ae : 2213 ; -- <0139> pa = 0x13
    02af : fba0 ; -- <0139> callx fail 0x13
    02b0 : 04e3 ; -- <0139> "
    02b1 : fc00 ; -- <0139> "



-- consecutive writes, same address.
    02b2 : 4203 ; -- <0143> ewrite 3 0x51
    02b3 : 3e51 ; -- <0143> "
    02b4 : 4203 ; -- <0144> ewrite 3 0x52
    02b5 : 3e52 ; -- <0144> "
    02b6 : 4203 ; -- <0145> ewrite 3 0x53
    02b7 : 3e53 ; -- <0145> "
    02b8 : 4203 ; -- <0146> ewrite 3 0x54
    02b9 : 3e54 ; -- <0146> "
    02ba : 4203 ; -- <0147> ewrite 3 0x55
    02bb : 3e55 ; -- <0147> "
-- etest  3 0x55 0x20

    02bc : 0203 ; -- <0148> a = 3
    02bd : fba0 ; -- <0148> call put4x
    02be : 006f ; -- <0148> "
    02bf : fc00 ; -- <0148> "
    02c0 : 023a ; -- <0148> a = 58 -- putasc :
    02c1 : fba0 ; -- <0148> putasc :
    02c2 : 0050 ; -- <0148> "
    02c3 : fc00 ; -- <0148> "
    02c4 : 0220 ; -- <0148> a = 32 -- putasc { }
    02c5 : fba0 ; -- <0148> putasc { }
    02c6 : 0050 ; -- <0148> "
    02c7 : fc00 ; -- <0148> "
    02c8 : 4203 ; -- <0148> eread 3 ga
    02c9 : 180f ; -- <0148> "
    02ca : 180f ; -- <0148> "
    02cb : 0006 ; -- <0148> a = ga
    02cc : fba0 ; -- <0148> call put4x
    02cd : 006f ; -- <0148> "
    02ce : fc00 ; -- <0148> "
    02cf : 020d ; -- <0148> a = 13 -- puteol
    02d0 : fba0 ; -- <0148> puteol
    02d1 : 0050 ; -- <0148> "
    02d2 : fc00 ; -- <0148> "
    02d3 : 020a ; -- <0148> a = 10 -- puteol
    02d4 : fba0 ; -- <0148> puteol
    02d5 : 0050 ; -- <0148> "
    02d6 : fc00 ; -- <0148> "



    02d7 : 0006 ; -- <0148> a = ga
    02d8 : 0655 ; -- <0148> b = 0x55

    02d9 : e007 ; -- <0146> br eq :else_729
    02da : 02df ; -- <0146> "

    02db : 2220 ; -- <0147> pa = 0x20
    02dc : fba0 ; -- <0147> callx fail 0x20
    02dd : 04e3 ; -- <0147> "
    02de : fc00 ; -- <0147> "



-- consecutive write/read write/read turarounds, same address.
    02df : 4203 ; -- <0151> ewrite 3 0x30
    02e0 : 3e30 ; -- <0151> "
-- etest  3 0x30 0x30

    02e1 : 0203 ; -- <0152> a = 3
    02e2 : fba0 ; -- <0152> call put4x
    02e3 : 006f ; -- <0152> "
    02e4 : fc00 ; -- <0152> "
    02e5 : 023a ; -- <0152> a = 58 -- putasc :
    02e6 : fba0 ; -- <0152> putasc :
    02e7 : 0050 ; -- <0152> "
    02e8 : fc00 ; -- <0152> "
    02e9 : 0220 ; -- <0152> a = 32 -- putasc { }
    02ea : fba0 ; -- <0152> putasc { }
    02eb : 0050 ; -- <0152> "
    02ec : fc00 ; -- <0152> "
    02ed : 4203 ; -- <0152> eread 3 ga
    02ee : 180f ; -- <0152> "
    02ef : 180f ; -- <0152> "
    02f0 : 0006 ; -- <0152> a = ga
    02f1 : fba0 ; -- <0152> call put4x
    02f2 : 006f ; -- <0152> "
    02f3 : fc00 ; -- <0152> "
    02f4 : 020d ; -- <0152> a = 13 -- puteol
    02f5 : fba0 ; -- <0152> puteol
    02f6 : 0050 ; -- <0152> "
    02f7 : fc00 ; -- <0152> "
    02f8 : 020a ; -- <0152> a = 10 -- puteol
    02f9 : fba0 ; -- <0152> puteol
    02fa : 0050 ; -- <0152> "
    02fb : fc00 ; -- <0152> "



    02fc : 0006 ; -- <0152> a = ga
    02fd : 0630 ; -- <0152> b = 0x30

    02fe : e007 ; -- <0150> br eq :else_766
    02ff : 0304 ; -- <0150> "

    0300 : 2230 ; -- <0151> pa = 0x30
    0301 : fba0 ; -- <0151> callx fail 0x30
    0302 : 04e3 ; -- <0151> "
    0303 : fc00 ; -- <0151> "


    0304 : 4203 ; -- <0153> ewrite 3 0x31
    0305 : 3e31 ; -- <0153> "
-- etest  3 0x31 0x31

    0306 : 0203 ; -- <0154> a = 3
    0307 : fba0 ; -- <0154> call put4x
    0308 : 006f ; -- <0154> "
    0309 : fc00 ; -- <0154> "
    030a : 023a ; -- <0154> a = 58 -- putasc :
    030b : fba0 ; -- <0154> putasc :
    030c : 0050 ; -- <0154> "
    030d : fc00 ; -- <0154> "
    030e : 0220 ; -- <0154> a = 32 -- putasc { }
    030f : fba0 ; -- <0154> putasc { }
    0310 : 0050 ; -- <0154> "
    0311 : fc00 ; -- <0154> "
    0312 : 4203 ; -- <0154> eread 3 ga
    0313 : 180f ; -- <0154> "
    0314 : 180f ; -- <0154> "
    0315 : 0006 ; -- <0154> a = ga
    0316 : fba0 ; -- <0154> call put4x
    0317 : 006f ; -- <0154> "
    0318 : fc00 ; -- <0154> "
    0319 : 020d ; -- <0154> a = 13 -- puteol
    031a : fba0 ; -- <0154> puteol
    031b : 0050 ; -- <0154> "
    031c : fc00 ; -- <0154> "
    031d : 020a ; -- <0154> a = 10 -- puteol
    031e : fba0 ; -- <0154> puteol
    031f : 0050 ; -- <0154> "
    0320 : fc00 ; -- <0154> "



    0321 : 0006 ; -- <0154> a = ga
    0322 : 0631 ; -- <0154> b = 0x31

    0323 : e007 ; -- <0152> br eq :else_803
    0324 : 0329 ; -- <0152> "

    0325 : 2231 ; -- <0153> pa = 0x31
    0326 : fba0 ; -- <0153> callx fail 0x31
    0327 : 04e3 ; -- <0153> "
    0328 : fc00 ; -- <0153> "


    0329 : 4203 ; -- <0155> ewrite 3 0x32
    032a : 3e32 ; -- <0155> "
-- etest  3 0x32 0x32

    032b : 0203 ; -- <0156> a = 3
    032c : fba0 ; -- <0156> call put4x
    032d : 006f ; -- <0156> "
    032e : fc00 ; -- <0156> "
    032f : 023a ; -- <0156> a = 58 -- putasc :
    0330 : fba0 ; -- <0156> putasc :
    0331 : 0050 ; -- <0156> "
    0332 : fc00 ; -- <0156> "
    0333 : 0220 ; -- <0156> a = 32 -- putasc { }
    0334 : fba0 ; -- <0156> putasc { }
    0335 : 0050 ; -- <0156> "
    0336 : fc00 ; -- <0156> "
    0337 : 4203 ; -- <0156> eread 3 ga
    0338 : 180f ; -- <0156> "
    0339 : 180f ; -- <0156> "
    033a : 0006 ; -- <0156> a = ga
    033b : fba0 ; -- <0156> call put4x
    033c : 006f ; -- <0156> "
    033d : fc00 ; -- <0156> "
    033e : 020d ; -- <0156> a = 13 -- puteol
    033f : fba0 ; -- <0156> puteol
    0340 : 0050 ; -- <0156> "
    0341 : fc00 ; -- <0156> "
    0342 : 020a ; -- <0156> a = 10 -- puteol
    0343 : fba0 ; -- <0156> puteol
    0344 : 0050 ; -- <0156> "
    0345 : fc00 ; -- <0156> "



    0346 : 0006 ; -- <0156> a = ga
    0347 : 0632 ; -- <0156> b = 0x32

    0348 : e007 ; -- <0154> br eq :else_840
    0349 : 034e ; -- <0154> "

    034a : 2232 ; -- <0155> pa = 0x32
    034b : fba0 ; -- <0155> callx fail 0x32
    034c : 04e3 ; -- <0155> "
    034d : fc00 ; -- <0155> "



-- consecutive write/read write/read turarounds, different addresses.
    034e : 4200 ; -- <0159> ewrite 0 0x40
    034f : 3e40 ; -- <0159> "
-- etest  0 0x40 0x40

    0350 : 0200 ; -- <0160> a = 0
    0351 : fba0 ; -- <0160> call put4x
    0352 : 006f ; -- <0160> "
    0353 : fc00 ; -- <0160> "
    0354 : 023a ; -- <0160> a = 58 -- putasc :
    0355 : fba0 ; -- <0160> putasc :
    0356 : 0050 ; -- <0160> "
    0357 : fc00 ; -- <0160> "
    0358 : 0220 ; -- <0160> a = 32 -- putasc { }
    0359 : fba0 ; -- <0160> putasc { }
    035a : 0050 ; -- <0160> "
    035b : fc00 ; -- <0160> "
    035c : 4200 ; -- <0160> eread 0 ga
    035d : 180f ; -- <0160> "
    035e : 180f ; -- <0160> "
    035f : 0006 ; -- <0160> a = ga
    0360 : fba0 ; -- <0160> call put4x
    0361 : 006f ; -- <0160> "
    0362 : fc00 ; -- <0160> "
    0363 : 020d ; -- <0160> a = 13 -- puteol
    0364 : fba0 ; -- <0160> puteol
    0365 : 0050 ; -- <0160> "
    0366 : fc00 ; -- <0160> "
    0367 : 020a ; -- <0160> a = 10 -- puteol
    0368 : fba0 ; -- <0160> puteol
    0369 : 0050 ; -- <0160> "
    036a : fc00 ; -- <0160> "



    036b : 0006 ; -- <0160> a = ga
    036c : 0640 ; -- <0160> b = 0x40

    036d : e007 ; -- <0158> br eq :else_877
    036e : 0373 ; -- <0158> "

    036f : 2240 ; -- <0159> pa = 0x40
    0370 : fba0 ; -- <0159> callx fail 0x40
    0371 : 04e3 ; -- <0159> "
    0372 : fc00 ; -- <0159> "


    0373 : 4201 ; -- <0161> ewrite 1 0x41
    0374 : 3e41 ; -- <0161> "
-- etest  1 0x41 0x41

    0375 : 0201 ; -- <0162> a = 1
    0376 : fba0 ; -- <0162> call put4x
    0377 : 006f ; -- <0162> "
    0378 : fc00 ; -- <0162> "
    0379 : 023a ; -- <0162> a = 58 -- putasc :
    037a : fba0 ; -- <0162> putasc :
    037b : 0050 ; -- <0162> "
    037c : fc00 ; -- <0162> "
    037d : 0220 ; -- <0162> a = 32 -- putasc { }
    037e : fba0 ; -- <0162> putasc { }
    037f : 0050 ; -- <0162> "
    0380 : fc00 ; -- <0162> "
    0381 : 4201 ; -- <0162> eread 1 ga
    0382 : 180f ; -- <0162> "
    0383 : 180f ; -- <0162> "
    0384 : 0006 ; -- <0162> a = ga
    0385 : fba0 ; -- <0162> call put4x
    0386 : 006f ; -- <0162> "
    0387 : fc00 ; -- <0162> "
    0388 : 020d ; -- <0162> a = 13 -- puteol
    0389 : fba0 ; -- <0162> puteol
    038a : 0050 ; -- <0162> "
    038b : fc00 ; -- <0162> "
    038c : 020a ; -- <0162> a = 10 -- puteol
    038d : fba0 ; -- <0162> puteol
    038e : 0050 ; -- <0162> "
    038f : fc00 ; -- <0162> "



    0390 : 0006 ; -- <0162> a = ga
    0391 : 0641 ; -- <0162> b = 0x41

    0392 : e007 ; -- <0160> br eq :else_914
    0393 : 0398 ; -- <0160> "

    0394 : 2241 ; -- <0161> pa = 0x41
    0395 : fba0 ; -- <0161> callx fail 0x41
    0396 : 04e3 ; -- <0161> "
    0397 : fc00 ; -- <0161> "


    0398 : 4202 ; -- <0163> ewrite 2 0x42
    0399 : 3e42 ; -- <0163> "
-- etest  2 0x42 0x42

    039a : 0202 ; -- <0164> a = 2
    039b : fba0 ; -- <0164> call put4x
    039c : 006f ; -- <0164> "
    039d : fc00 ; -- <0164> "
    039e : 023a ; -- <0164> a = 58 -- putasc :
    039f : fba0 ; -- <0164> putasc :
    03a0 : 0050 ; -- <0164> "
    03a1 : fc00 ; -- <0164> "
    03a2 : 0220 ; -- <0164> a = 32 -- putasc { }
    03a3 : fba0 ; -- <0164> putasc { }
    03a4 : 0050 ; -- <0164> "
    03a5 : fc00 ; -- <0164> "
    03a6 : 4202 ; -- <0164> eread 2 ga
    03a7 : 180f ; -- <0164> "
    03a8 : 180f ; -- <0164> "
    03a9 : 0006 ; -- <0164> a = ga
    03aa : fba0 ; -- <0164> call put4x
    03ab : 006f ; -- <0164> "
    03ac : fc00 ; -- <0164> "
    03ad : 020d ; -- <0164> a = 13 -- puteol
    03ae : fba0 ; -- <0164> puteol
    03af : 0050 ; -- <0164> "
    03b0 : fc00 ; -- <0164> "
    03b1 : 020a ; -- <0164> a = 10 -- puteol
    03b2 : fba0 ; -- <0164> puteol
    03b3 : 0050 ; -- <0164> "
    03b4 : fc00 ; -- <0164> "



    03b5 : 0006 ; -- <0164> a = ga
    03b6 : 0642 ; -- <0164> b = 0x42

    03b7 : e007 ; -- <0162> br eq :else_951
    03b8 : 03bd ; -- <0162> "

    03b9 : 2242 ; -- <0163> pa = 0x42
    03ba : fba0 ; -- <0163> callx fail 0x42
    03bb : 04e3 ; -- <0163> "
    03bc : fc00 ; -- <0163> "



-- write-sensitive peripherals, represented by a write-sensitive counter.
    03bd : 4204 ; -- <0167> ewrite 4 0
    03be : 3e00 ; -- <0167> "
-- etest  4 0x0  0x50

    03bf : 0204 ; -- <0168> a = 4
    03c0 : fba0 ; -- <0168> call put4x
    03c1 : 006f ; -- <0168> "
    03c2 : fc00 ; -- <0168> "
    03c3 : 023a ; -- <0168> a = 58 -- putasc :
    03c4 : fba0 ; -- <0168> putasc :
    03c5 : 0050 ; -- <0168> "
    03c6 : fc00 ; -- <0168> "
    03c7 : 0220 ; -- <0168> a = 32 -- putasc { }
    03c8 : fba0 ; -- <0168> putasc { }
    03c9 : 0050 ; -- <0168> "
    03ca : fc00 ; -- <0168> "
    03cb : 4204 ; -- <0168> eread 4 ga
    03cc : 180f ; -- <0168> "
    03cd : 180f ; -- <0168> "
    03ce : 0006 ; -- <0168> a = ga
    03cf : fba0 ; -- <0168> call put4x
    03d0 : 006f ; -- <0168> "
    03d1 : fc00 ; -- <0168> "
    03d2 : 020d ; -- <0168> a = 13 -- puteol
    03d3 : fba0 ; -- <0168> puteol
    03d4 : 0050 ; -- <0168> "
    03d5 : fc00 ; -- <0168> "
    03d6 : 020a ; -- <0168> a = 10 -- puteol
    03d7 : fba0 ; -- <0168> puteol
    03d8 : 0050 ; -- <0168> "
    03d9 : fc00 ; -- <0168> "



    03da : 0006 ; -- <0168> a = ga
    03db : 0600 ; -- <0168> b = 0x0

    03dc : e007 ; -- <0166> br eq :else_988
    03dd : 03e2 ; -- <0166> "

    03de : 2250 ; -- <0167> pa = 0x50
    03df : fba0 ; -- <0167> callx fail 0x50
    03e0 : 04e3 ; -- <0167> "
    03e1 : fc00 ; -- <0167> "


    03e2 : 4204 ; -- <0169> ewrite 4 0xf0
    03e3 : 3ef0 ; -- <0169> "
-- etest  4 0x01 0x51

    03e4 : 0204 ; -- <0170> a = 4
    03e5 : fba0 ; -- <0170> call put4x
    03e6 : 006f ; -- <0170> "
    03e7 : fc00 ; -- <0170> "
    03e8 : 023a ; -- <0170> a = 58 -- putasc :
    03e9 : fba0 ; -- <0170> putasc :
    03ea : 0050 ; -- <0170> "
    03eb : fc00 ; -- <0170> "
    03ec : 0220 ; -- <0170> a = 32 -- putasc { }
    03ed : fba0 ; -- <0170> putasc { }
    03ee : 0050 ; -- <0170> "
    03ef : fc00 ; -- <0170> "
    03f0 : 4204 ; -- <0170> eread 4 ga
    03f1 : 180f ; -- <0170> "
    03f2 : 180f ; -- <0170> "
    03f3 : 0006 ; -- <0170> a = ga
    03f4 : fba0 ; -- <0170> call put4x
    03f5 : 006f ; -- <0170> "
    03f6 : fc00 ; -- <0170> "
    03f7 : 020d ; -- <0170> a = 13 -- puteol
    03f8 : fba0 ; -- <0170> puteol
    03f9 : 0050 ; -- <0170> "
    03fa : fc00 ; -- <0170> "
    03fb : 020a ; -- <0170> a = 10 -- puteol
    03fc : fba0 ; -- <0170> puteol
    03fd : 0050 ; -- <0170> "
    03fe : fc00 ; -- <0170> "



    03ff : 0006 ; -- <0170> a = ga
    0400 : 0601 ; -- <0170> b = 0x01

    0401 : e007 ; -- <0168> br eq :else_1025
    0402 : 0407 ; -- <0168> "

    0403 : 2251 ; -- <0169> pa = 0x51
    0404 : fba0 ; -- <0169> callx fail 0x51
    0405 : 04e3 ; -- <0169> "
    0406 : fc00 ; -- <0169> "


    0407 : 4204 ; -- <0171> ewrite 4 0xf0
    0408 : 3ef0 ; -- <0171> "
    0409 : 4204 ; -- <0172> ewrite 4 0xf0
    040a : 3ef0 ; -- <0172> "
    040b : 4204 ; -- <0173> ewrite 4 0xf0
    040c : 3ef0 ; -- <0173> "
-- etest  4 0x04 0x52

    040d : 0204 ; -- <0174> a = 4
    040e : fba0 ; -- <0174> call put4x
    040f : 006f ; -- <0174> "
    0410 : fc00 ; -- <0174> "
    0411 : 023a ; -- <0174> a = 58 -- putasc :
    0412 : fba0 ; -- <0174> putasc :
    0413 : 0050 ; -- <0174> "
    0414 : fc00 ; -- <0174> "
    0415 : 0220 ; -- <0174> a = 32 -- putasc { }
    0416 : fba0 ; -- <0174> putasc { }
    0417 : 0050 ; -- <0174> "
    0418 : fc00 ; -- <0174> "
    0419 : 4204 ; -- <0174> eread 4 ga
    041a : 180f ; -- <0174> "
    041b : 180f ; -- <0174> "
    041c : 0006 ; -- <0174> a = ga
    041d : fba0 ; -- <0174> call put4x
    041e : 006f ; -- <0174> "
    041f : fc00 ; -- <0174> "
    0420 : 020d ; -- <0174> a = 13 -- puteol
    0421 : fba0 ; -- <0174> puteol
    0422 : 0050 ; -- <0174> "
    0423 : fc00 ; -- <0174> "
    0424 : 020a ; -- <0174> a = 10 -- puteol
    0425 : fba0 ; -- <0174> puteol
    0426 : 0050 ; -- <0174> "
    0427 : fc00 ; -- <0174> "



    0428 : 0006 ; -- <0174> a = ga
    0429 : 0604 ; -- <0174> b = 0x04

    042a : e007 ; -- <0172> br eq :else_1066
    042b : 0430 ; -- <0172> "

    042c : 2252 ; -- <0173> pa = 0x52
    042d : fba0 ; -- <0173> callx fail 0x52
    042e : 04e3 ; -- <0173> "
    042f : fc00 ; -- <0173> "



-- read-sensitive peripherals, represented by a read-sensitive counter.
    0430 : 4205 ; -- <0177> ewrite 5 0
    0431 : 3e00 ; -- <0177> "
-- etest  5 0x0  0x60

    0432 : 0205 ; -- <0178> a = 5
    0433 : fba0 ; -- <0178> call put4x
    0434 : 006f ; -- <0178> "
    0435 : fc00 ; -- <0178> "
    0436 : 023a ; -- <0178> a = 58 -- putasc :
    0437 : fba0 ; -- <0178> putasc :
    0438 : 0050 ; -- <0178> "
    0439 : fc00 ; -- <0178> "
    043a : 0220 ; -- <0178> a = 32 -- putasc { }
    043b : fba0 ; -- <0178> putasc { }
    043c : 0050 ; -- <0178> "
    043d : fc00 ; -- <0178> "
    043e : 4205 ; -- <0178> eread 5 ga
    043f : 180f ; -- <0178> "
    0440 : 180f ; -- <0178> "
    0441 : 0006 ; -- <0178> a = ga
    0442 : fba0 ; -- <0178> call put4x
    0443 : 006f ; -- <0178> "
    0444 : fc00 ; -- <0178> "
    0445 : 020d ; -- <0178> a = 13 -- puteol
    0446 : fba0 ; -- <0178> puteol
    0447 : 0050 ; -- <0178> "
    0448 : fc00 ; -- <0178> "
    0449 : 020a ; -- <0178> a = 10 -- puteol
    044a : fba0 ; -- <0178> puteol
    044b : 0050 ; -- <0178> "
    044c : fc00 ; -- <0178> "



    044d : 0006 ; -- <0178> a = ga
    044e : 0600 ; -- <0178> b = 0x0

    044f : e007 ; -- <0176> br eq :else_1103
    0450 : 0455 ; -- <0176> "

    0451 : 2260 ; -- <0177> pa = 0x60
    0452 : fba0 ; -- <0177> callx fail 0x60
    0453 : 04e3 ; -- <0177> "
    0454 : fc00 ; -- <0177> "


-- etest  5 0x01 0x61

    0455 : 0205 ; -- <0179> a = 5
    0456 : fba0 ; -- <0179> call put4x
    0457 : 006f ; -- <0179> "
    0458 : fc00 ; -- <0179> "
    0459 : 023a ; -- <0179> a = 58 -- putasc :
    045a : fba0 ; -- <0179> putasc :
    045b : 0050 ; -- <0179> "
    045c : fc00 ; -- <0179> "
    045d : 0220 ; -- <0179> a = 32 -- putasc { }
    045e : fba0 ; -- <0179> putasc { }
    045f : 0050 ; -- <0179> "
    0460 : fc00 ; -- <0179> "
    0461 : 4205 ; -- <0179> eread 5 ga
    0462 : 180f ; -- <0179> "
    0463 : 180f ; -- <0179> "
    0464 : 0006 ; -- <0179> a = ga
    0465 : fba0 ; -- <0179> call put4x
    0466 : 006f ; -- <0179> "
    0467 : fc00 ; -- <0179> "
    0468 : 020d ; -- <0179> a = 13 -- puteol
    0469 : fba0 ; -- <0179> puteol
    046a : 0050 ; -- <0179> "
    046b : fc00 ; -- <0179> "
    046c : 020a ; -- <0179> a = 10 -- puteol
    046d : fba0 ; -- <0179> puteol
    046e : 0050 ; -- <0179> "
    046f : fc00 ; -- <0179> "



    0470 : 0006 ; -- <0179> a = ga
    0471 : 0601 ; -- <0179> b = 0x01

    0472 : e007 ; -- <0177> br eq :else_1138
    0473 : 0478 ; -- <0177> "

    0474 : 2261 ; -- <0178> pa = 0x61
    0475 : fba0 ; -- <0178> callx fail 0x61
    0476 : 04e3 ; -- <0178> "
    0477 : fc00 ; -- <0178> "


-- etest  5 0x02 0x62

    0478 : 0205 ; -- <0180> a = 5
    0479 : fba0 ; -- <0180> call put4x
    047a : 006f ; -- <0180> "
    047b : fc00 ; -- <0180> "
    047c : 023a ; -- <0180> a = 58 -- putasc :
    047d : fba0 ; -- <0180> putasc :
    047e : 0050 ; -- <0180> "
    047f : fc00 ; -- <0180> "
    0480 : 0220 ; -- <0180> a = 32 -- putasc { }
    0481 : fba0 ; -- <0180> putasc { }
    0482 : 0050 ; -- <0180> "
    0483 : fc00 ; -- <0180> "
    0484 : 4205 ; -- <0180> eread 5 ga
    0485 : 180f ; -- <0180> "
    0486 : 180f ; -- <0180> "
    0487 : 0006 ; -- <0180> a = ga
    0488 : fba0 ; -- <0180> call put4x
    0489 : 006f ; -- <0180> "
    048a : fc00 ; -- <0180> "
    048b : 020d ; -- <0180> a = 13 -- puteol
    048c : fba0 ; -- <0180> puteol
    048d : 0050 ; -- <0180> "
    048e : fc00 ; -- <0180> "
    048f : 020a ; -- <0180> a = 10 -- puteol
    0490 : fba0 ; -- <0180> puteol
    0491 : 0050 ; -- <0180> "
    0492 : fc00 ; -- <0180> "



    0493 : 0006 ; -- <0180> a = ga
    0494 : 0602 ; -- <0180> b = 0x02

    0495 : e007 ; -- <0178> br eq :else_1173
    0496 : 049b ; -- <0178> "

    0497 : 2262 ; -- <0179> pa = 0x62
    0498 : fba0 ; -- <0179> callx fail 0x62
    0499 : 04e3 ; -- <0179> "
    049a : fc00 ; -- <0179> "


-- etest  5 0x03 0x63

    049b : 0205 ; -- <0181> a = 5
    049c : fba0 ; -- <0181> call put4x
    049d : 006f ; -- <0181> "
    049e : fc00 ; -- <0181> "
    049f : 023a ; -- <0181> a = 58 -- putasc :
    04a0 : fba0 ; -- <0181> putasc :
    04a1 : 0050 ; -- <0181> "
    04a2 : fc00 ; -- <0181> "
    04a3 : 0220 ; -- <0181> a = 32 -- putasc { }
    04a4 : fba0 ; -- <0181> putasc { }
    04a5 : 0050 ; -- <0181> "
    04a6 : fc00 ; -- <0181> "
    04a7 : 4205 ; -- <0181> eread 5 ga
    04a8 : 180f ; -- <0181> "
    04a9 : 180f ; -- <0181> "
    04aa : 0006 ; -- <0181> a = ga
    04ab : fba0 ; -- <0181> call put4x
    04ac : 006f ; -- <0181> "
    04ad : fc00 ; -- <0181> "
    04ae : 020d ; -- <0181> a = 13 -- puteol
    04af : fba0 ; -- <0181> puteol
    04b0 : 0050 ; -- <0181> "
    04b1 : fc00 ; -- <0181> "
    04b2 : 020a ; -- <0181> a = 10 -- puteol
    04b3 : fba0 ; -- <0181> puteol
    04b4 : 0050 ; -- <0181> "
    04b5 : fc00 ; -- <0181> "



    04b6 : 0006 ; -- <0181> a = ga
    04b7 : 0603 ; -- <0181> b = 0x03

    04b8 : e007 ; -- <0179> br eq :else_1208
    04b9 : 04be ; -- <0179> "

    04ba : 2263 ; -- <0180> pa = 0x63
    04bb : fba0 ; -- <0180> callx fail 0x63
    04bc : 04e3 ; -- <0180> "
    04bd : fc00 ; -- <0180> "


-- etest  5 0x04 0x64

    04be : 0205 ; -- <0182> a = 5
    04bf : fba0 ; -- <0182> call put4x
    04c0 : 006f ; -- <0182> "
    04c1 : fc00 ; -- <0182> "
    04c2 : 023a ; -- <0182> a = 58 -- putasc :
    04c3 : fba0 ; -- <0182> putasc :
    04c4 : 0050 ; -- <0182> "
    04c5 : fc00 ; -- <0182> "
    04c6 : 0220 ; -- <0182> a = 32 -- putasc { }
    04c7 : fba0 ; -- <0182> putasc { }
    04c8 : 0050 ; -- <0182> "
    04c9 : fc00 ; -- <0182> "
    04ca : 4205 ; -- <0182> eread 5 ga
    04cb : 180f ; -- <0182> "
    04cc : 180f ; -- <0182> "
    04cd : 0006 ; -- <0182> a = ga
    04ce : fba0 ; -- <0182> call put4x
    04cf : 006f ; -- <0182> "
    04d0 : fc00 ; -- <0182> "
    04d1 : 020d ; -- <0182> a = 13 -- puteol
    04d2 : fba0 ; -- <0182> puteol
    04d3 : 0050 ; -- <0182> "
    04d4 : fc00 ; -- <0182> "
    04d5 : 020a ; -- <0182> a = 10 -- puteol
    04d6 : fba0 ; -- <0182> puteol
    04d7 : 0050 ; -- <0182> "
    04d8 : fc00 ; -- <0182> "



    04d9 : 0006 ; -- <0182> a = ga
    04da : 0604 ; -- <0182> b = 0x04

    04db : e007 ; -- <0180> br eq :else_1243
    04dc : 04e1 ; -- <0180> "

    04dd : 2264 ; -- <0181> pa = 0x64
    04de : fba0 ; -- <0181> callx fail 0x64
    04df : 04e3 ; -- <0181> "
    04e0 : fc00 ; -- <0181> "



    04e1 : e00f ; -- <0184> jmp :begin_test
    04e2 : 0162 ; -- <0184> "

-- ######## func fail -- = 0x04e3
    04e3 : 303e ; -- <0194> push rtna -- func fail

    04e4 : 03a0 ; -- <0187> a = :fail_msg
    04e5 : 004a ; -- <0187> "
    04e6 : fba0 ; -- <0188> call print_nt
    04e7 : 00fb ; -- <0188> "
    04e8 : fc00 ; -- <0188> "
    04e9 : 0008 ; -- <0189> a = fail_code_num
    04ea : fba0 ; -- <0190> call put4x
    04eb : 006f ; -- <0190> "
    04ec : fc00 ; -- <0190> "
    04ed : 020d ; -- <0191> a = 13 -- puteol
    04ee : fba0 ; -- <0191> puteol
    04ef : 0050 ; -- <0191> "
    04f0 : fc00 ; -- <0191> "
    04f1 : 020a ; -- <0191> a = 10 -- puteol
    04f2 : fba0 ; -- <0191> puteol
    04f3 : 0050 ; -- <0191> "
    04f4 : fc00 ; -- <0191> "
-- :fail_halt -- = 0x04f5
    04f5 : e00f ; -- <0193> jmp :fail_halt
    04f6 : 04f5 ; -- <0193> "

    04f7 : f80c ; -- <0195> pop rtna -- func fail
    04f8 : fc00 ; -- <0195> swapra = nop

-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d fduart_data
-- src reg 000e fduart_status
-- src reg 000f exp
-- src reg 0010 exp_addr
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d fduart_data
-- dest reg 000e fduart_status
-- dest reg 000f exp
-- dest reg 0010 exp_addr

END;
