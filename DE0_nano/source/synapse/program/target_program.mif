
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 06f4 ; -- <0004> "


-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- size of external register file.  all these registers are external to the Synapse316 core.
-- min_populated_ext_regs <= num_populated_ext_regs <= max_populated_ext_regs <= 48 supported in the core's muxer and module ports.
-- all those numbers are smaller than src_max and dest_max addresses of the architecture.
-- from num_populated_ext_regs through max_populated_ext_regs the external address space
-- is stubbed as "don't care" values by the Synapse core.
-- that doesn't affect operator results and other addresses implemented internally by the Synapse core.
--vdefine num_populated_ext_regs            32
--vdefine top_populated_ext_reg             $num_populated_ext_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- register addresses of operators and their operands.


-- program code dimensions.


-- register file configuration.
-- beyond top_populated_ext_reg the external address space is stubbed as "don't care" values by the Synapse core.
-- that doesn't affect operator results and other addresses implemented internally by the Synapse core.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.


-- throttle for each pass of data acquisition.
-- delay for anmux settling.
-- engine plan tick timer.


-- all Avalon addresses are BYTE addresses.  all Avalon sizes are in BYTES.
-- SDRAM notes:
-- - all addresses are BYTE addresses.  all must be divisible by 2, because this
-- system only supports 16-bit word accesses.  writes to an odd-numbered address
-- will be forced to the word boundary instead, overwriting data there.
-- - any read involves about 7 wait states, occasionally up to 12.  (those are
-- code_ready stalled cycles induced by Altera SDRAM controller through my Avalon-MM master.
-- plus time to e.g. set Avalon addres regs.  measured by scope with 50 MHz synapse sysclk on DE0 Nano).
-- - evidently no time difference between same-row and other-row reads (SDRAM row=512 words).
-- - evidently no time difference between first read and sequential burst-read.
-- - any write seems to take about 1 wait state, but is likely to be completing in the
-- background while the MCU moves on.  accessing again within 5 cycles or so may
-- cause wait states there until SDRAM controller is ready for it.
-- - apparently Altera's claims of SDRAM controller approaching 1 word per clock cycle must be
-- using e.g. Avalon burst transfers or Avalon-ST.  don't think my Avalon-MM master can go that fast.






-- ADC handling.

-- power relay duty cycles, in microseconds.  duty cycle time = relay OFF time.
-- relay actually remains energized for about another 5 us after pwm goes high,
-- due to the optocoupler pullup taking some time to climb through the MOSFET's threshold.

-- realtime counting.

-- text flag reporting.

-- error code constants.

-- ignition time capture.
-- all ignition time vars are expressed in 20us "jiffies" or "jf".
-- 8750 RPM = about 80 jf between rising edges on chevy ignition white wire.  ignition counter noise blanking begins here in svn revision 627.
-- 5000 RPM = about 140 jf
-- 1000 RPM = about 700 jf
--  100 RPM = about 7000 jf
--   22 RPM = about 32000 jf, the slowest figure that's safe for the divide routine.

-- fuel injection puff driver.
-- SETTING puff_len_us NON-ZERO ENABLES FUEL INJECTION!!  zero disables it.
-- MUST SET ign_timeout_len_jf NON-ZERO PRIOR TO ENABLING!
-- otherwise the module latches up in a non-working state.

-- engine state management.  each engine state is called a "plan".

    0002 : 0026 ; -- <0200> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0200>   
    0004 : 2020 ; -- <0200>   
    0005 : 2020 ; -- <0200>   
    0006 : 6120 ; -- <0200> a 
-- "       b"
    0007 : 2020 ; -- <0200>   
    0008 : 2020 ; -- <0200>   
    0009 : 2020 ; -- <0200>   
    000a : 6220 ; -- <0200> b 
-- "       i"
    000b : 2020 ; -- <0200>   
    000c : 2020 ; -- <0200>   
    000d : 2020 ; -- <0200>   
    000e : 6920 ; -- <0200> i 
-- "       j"
    000f : 2020 ; -- <0200>   
    0010 : 2020 ; -- <0200>   
    0011 : 2020 ; -- <0200>   
    0012 : 6a20 ; -- <0200> j 
-- "       x"
    0013 : 2020 ; -- <0200>   
    0014 : 2020 ; -- <0200>   
    0015 : 2020 ; -- <0200>   
    0016 : 7820 ; -- <0200> x 
-- "       y"
    0017 : 2020 ; -- <0200>   
    0018 : 2020 ; -- <0200>   
    0019 : 2020 ; -- <0200>   
    001a : 7920 ; -- <0200> y 
-- "      ga"
    001b : 2020 ; -- <0200>   
    001c : 2020 ; -- <0200>   
    001d : 2020 ; -- <0200>   
    001e : 6167 ; -- <0200> ag
-- "      gb"
    001f : 2020 ; -- <0200>   
    0020 : 2020 ; -- <0200>   
    0021 : 2020 ; -- <0200>   
    0022 : 6267 ; -- <0200> bg
-- "      pa"
    0023 : 2020 ; -- <0200>   
    0024 : 2020 ; -- <0200>   
    0025 : 2020 ; -- <0200>   
    0026 : 6170 ; -- <0200> ap
-- "      pb"
    0027 : 2020 ; -- <0200>   
    0028 : 2020 ; -- <0200>   
    0029 : 2020 ; -- <0200>   
    002a : 6270 ; -- <0200> bp
-- "      pc"
    002b : 2020 ; -- <0200>   
    002c : 2020 ; -- <0200>   
    002d : 2020 ; -- <0200>   
    002e : 6370 ; -- <0200> cp
-- "      pd"
    002f : 2020 ; -- <0200>   
    0030 : 2020 ; -- <0200>   
    0031 : 2020 ; -- <0200>   
    0032 : 6470 ; -- <0200> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0200> --
    0034 : 7372 ; -- <0200> sr
    0035 : 6b74 ; -- <0200> kt
    0036 : 2020 ; -- <0200>   
-- "  ev_pri"
    0037 : 2020 ; -- <0200>   
    0038 : 7665 ; -- <0200> ve
    0039 : 705f ; -- <0200> p_
    003a : 6972 ; -- <0200> ir
-- "softevnt"
    003b : 6f73 ; -- <0200> os
    003c : 7466 ; -- <0200> tf
    003d : 7665 ; -- <0200> ve
    003e : 746e ; -- <0200> tn
-- "   usage"
    003f : 2020 ; -- <0200>   
    0040 : 7520 ; -- <0200> u 
    0041 : 6173 ; -- <0200> as
    0042 : 6567 ; -- <0200> eg
-- "prductlo"
    0043 : 7270 ; -- <0200> rp
    0044 : 7564 ; -- <0200> ud
    0045 : 7463 ; -- <0200> tc
    0046 : 6f6c ; -- <0200> ol
-- "prducthi"
    0047 : 7270 ; -- <0200> rp
    0048 : 7564 ; -- <0200> ud
    0049 : 7463 ; -- <0200> tc
    004a : 6968 ; -- <0200> ih
-- "ustimer0"
    004b : 7375 ; -- <0200> su
    004c : 6974 ; -- <0200> it
    004d : 656d ; -- <0200> em
    004e : 3072 ; -- <0200> 0r
-- "mstimer0"
    004f : 736d ; -- <0200> sm
    0050 : 6974 ; -- <0200> it
    0051 : 656d ; -- <0200> em
    0052 : 3072 ; -- <0200> 0r
-- "mstimer1"
    0053 : 736d ; -- <0200> sm
    0054 : 6974 ; -- <0200> it
    0055 : 656d ; -- <0200> em
    0056 : 3172 ; -- <0200> 1r
-- "mstimer2"
    0057 : 736d ; -- <0200> sm
    0058 : 6974 ; -- <0200> it
    0059 : 656d ; -- <0200> em
    005a : 3272 ; -- <0200> 2r
-- "spi_data"
    005b : 7073 ; -- <0200> ps
    005c : 5f69 ; -- <0200> _i
    005d : 6164 ; -- <0200> ad
    005e : 6174 ; -- <0200> at
-- "--avwrdt"
    005f : 2f2f ; -- <0200> --
    0060 : 7661 ; -- <0200> va
    0061 : 7277 ; -- <0200> rw
    0062 : 7464 ; -- <0200> td
-- "av_rd_dt"
    0063 : 7661 ; -- <0200> va
    0064 : 725f ; -- <0200> r_
    0065 : 5f64 ; -- <0200> _d
    0066 : 7464 ; -- <0200> td
-- "av_ad_hi"
    0067 : 7661 ; -- <0200> va
    0068 : 615f ; -- <0200> a_
    0069 : 5f64 ; -- <0200> _d
    006a : 6968 ; -- <0200> ih
-- "av_ad_lo"
    006b : 7661 ; -- <0200> va
    006c : 615f ; -- <0200> a_
    006d : 5f64 ; -- <0200> _d
    006e : 6f6c ; -- <0200> ol
-- "--dromad"
    006f : 2f2f ; -- <0200> --
    0070 : 7264 ; -- <0200> rd
    0071 : 6d6f ; -- <0200> mo
    0072 : 6461 ; -- <0200> da
-- "dromdata"
    0073 : 7264 ; -- <0200> rd
    0074 : 6d6f ; -- <0200> mo
    0075 : 6164 ; -- <0200> ad
    0076 : 6174 ; -- <0200> at
-- "--uartdt"
    0077 : 2f2f ; -- <0200> --
    0078 : 6175 ; -- <0200> au
    0079 : 7472 ; -- <0200> tr
    007a : 7464 ; -- <0200> td
-- "uartstat"
    007b : 6175 ; -- <0200> au
    007c : 7472 ; -- <0200> tr
    007d : 7473 ; -- <0200> ts
    007e : 7461 ; -- <0200> ta
-- "    leds"
    007f : 2020 ; -- <0200>   
    0080 : 2020 ; -- <0200>   
    0081 : 656c ; -- <0200> el
    0082 : 7364 ; -- <0200> sd
-- "brd_ctrl"
    0083 : 7262 ; -- <0200> rb
    0084 : 5f64 ; -- <0200> _d
    0085 : 7463 ; -- <0200> tc
    0086 : 6c72 ; -- <0200> lr
-- "   anmux"
    0087 : 2020 ; -- <0200>   
    0088 : 6120 ; -- <0200> a 
    0089 : 6d6e ; -- <0200> mn
    008a : 7875 ; -- <0200> xu
-- "pwr_duty"
    008b : 7770 ; -- <0200> wp
    008c : 5f72 ; -- <0200> _r
    008d : 7564 ; -- <0200> ud
    008e : 7974 ; -- <0200> yt
-- "igntmcap"
    008f : 6769 ; -- <0200> gi
    0090 : 746e ; -- <0200> tn
    0091 : 636d ; -- <0200> cm
    0092 : 7061 ; -- <0200> pa
-- "igntmout"
    0093 : 6769 ; -- <0200> gi
    0094 : 746e ; -- <0200> tn
    0095 : 6f6d ; -- <0200> om
    0096 : 7475 ; -- <0200> tu
-- "puflenus"
    0097 : 7570 ; -- <0200> up
    0098 : 6c66 ; -- <0200> lf
    0099 : 6e65 ; -- <0200> ne
    009a : 7375 ; -- <0200> su

-- string resources
-- :boot_msg -- = 0x009b
-- "TGT\r\n\x0"
    009b : 4754 ; -- <0204> GT
    009c : 0d54 ; -- <0204>  T
    009d : 000a ; -- <0204>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- event loop.  this infrastructure is assembled directly into the main program, not a func.
-- first instruction of an event handler should be the 7th cycle after reading its priority from the event controller here.
-- :poll_events -- = 0x009e
-- initialize prior to polling loop, for minimum latency.
    009e : 07a0 ; -- <0006> b = :event_table
    009f : 07f4 ; -- <0006> "
-- 3-cycle polling loop.
-- :poll_events_again -- = 0x00a0
    00a0 : 000d ; -- <0009> a = event_priority
    00a1 : e000 ; -- <0010> br 0z :poll_events_again
    00a2 : 00a0 ; -- <0010> "
-- acknowledge the event to clear its capture register.  do this right away,
-- so another occurrence of the same event can be captured right away in the controller.
    00a3 : 3400 ; -- <0013> event_priority = a
-- compute an address in the event_table.  note the absence of a wait state for the adder here (not needed).
    00a4 : d300 ; -- <0015> fetch rtna from ad0
    00a5 : fbb0 ; -- <0015> "
-- jump to the address given in the event_table.  each handler MUST end with a end_event.
-- each handler does NOT need to save ANY registers (e.g. no convention_gpx).  they can all be trashed.
-- each handler is passed the event priority in a, in case the same handler is used on multiple priorities.
    00a6 : fc00 ; -- <0019> swapra = nop
-- just returned here from the handler, in case the handler accidentally did a rtn.  this should NEVER happen.
    00a7 : 7fa0 ; -- <0021> error_halt_code 0xffc0 -- leds = 0xffc0
    00a8 : ffc0 ; -- <0021> "
    00a9 : e00f ; -- <0021> error_halt_code 0xffc0
    00aa : 00a9 ; -- <0021> "


-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x00ab
    00ab : 3004 ; -- <0046> push x -- func putchar_fduart

    00ac : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    00ad : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x00ae
    00ae : 041e ; -- <0053> b = fduart_status
    00af : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    00b0 : 00ae ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    00b1 : 7404 ; -- <0057> fduart_data = x
    00b2 : 100c ; -- <0058> pop x -- end_func
    00b3 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x00b4
-- wait until FIFO is populated.
    00b4 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x00b5
    00b5 : 041e ; -- <0066> b = fduart_status
    00b6 : e403 ; -- <0067> bn and0z :wait_for_busy
    00b7 : 00b5 ; -- <0067> "
    00b8 : 001d ; -- <0068> a = fduart_data
    00b9 : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x00ba
-- check for FIFO is populated.
    00ba : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    00bb : 041e ; -- <0075> b = fduart_status
    00bc : e403 ; -- <0076> bn and0z :none
    00bd : 00c0 ; -- <0076> "
    00be : 001d ; -- <0077> a = fduart_data
    00bf : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x00c0
    00c0 : 0360 ; -- <0080> a = -1
    00c1 : fc00 ; -- <0080> swapra = nop


-- pass desired anmux channel in a.
-- after this returns, CALLER MUST WAIT for muxer & current driver to
-- settle down.  some delay for that is absolutely required (per testing).
-- 5 ms wait works well 2015/04.
-- ######## func anmux_set_chn -- = 0x00c2
-- set & enable analog muxer
    00c2 : 0608 ; -- <0007> b = $anmux_enable_mask
    00c3 : c800 ; -- <0008> anmux_ctrl = or
    00c4 : 8734 ; -- <0008> "
    00c5 : fc00 ; -- <0008> swapra = nop

-- ######## func anmux_get_chn -- = 0x00c6
    00c6 : 0021 ; -- <0012> a = anmux_ctrl
    00c7 : 0607 ; -- <0013> b = $anmux_channel_mask
    00c8 : c800 ; -- <0014> a = and
    00c9 : 0330 ; -- <0014> "
    00ca : fc00 ; -- <0014> swapra = nop



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x00cb
-- "0123456789abcdef"
    00cb : 3130 ; -- <0050> 10
    00cc : 3332 ; -- <0050> 32
    00cd : 3534 ; -- <0050> 54
    00ce : 3736 ; -- <0050> 76
    00cf : 3938 ; -- <0050> 98
    00d0 : 6261 ; -- <0050> ba
    00d1 : 6463 ; -- <0050> dc
    00d2 : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x00d3
    00d3 : 3004 ; -- <0054> push x -- func put4x
    00d4 : 3006 ; -- <0054> push ga -- "
    00d5 : 303e ; -- <0054> push rtna -- "
    00d6 : 13a0 ; -- <0055> x = :hexdigits
    00d7 : 00cb ; -- <0055> "

    00d8 : 1800 ; -- <0057> ga = a
    00d9 : 07a0 ; -- <0058> b = 0xF000
    00da : f000 ; -- <0058> "
    00db : c800 ; -- <0059> a = and
    00dc : 0330 ; -- <0059> "
    00dd : 0353 ; -- <0060> a = a>>4
    00de : 0353 ; -- <0061> a = a>>4
    00df : 0353 ; -- <0062> a = a>>4
    00e0 : fba0 ; -- <0063> call fetch_byte
    00e1 : 01ec ; -- <0063> "
    00e2 : fc00 ; -- <0063> "
    00e3 : fba0 ; -- <0064> putchar a
    00e4 : 00ab ; -- <0064> "
    00e5 : fc00 ; -- <0064> "

    00e6 : 0006 ; -- <0066> a = ga
    00e7 : 07a0 ; -- <0067> b = 0x0F00
    00e8 : 0f00 ; -- <0067> "
    00e9 : c800 ; -- <0068> a = and
    00ea : 0330 ; -- <0068> "
    00eb : 0353 ; -- <0069> a = a>>4
    00ec : 0353 ; -- <0070> a = a>>4
    00ed : fba0 ; -- <0071> call fetch_byte
    00ee : 01ec ; -- <0071> "
    00ef : fc00 ; -- <0071> "
    00f0 : fba0 ; -- <0072> putchar a
    00f1 : 00ab ; -- <0072> "
    00f2 : fc00 ; -- <0072> "

    00f3 : 0006 ; -- <0074> a = ga
    00f4 : 06f0 ; -- <0075> b = 0x00F0
    00f5 : c800 ; -- <0076> a = and
    00f6 : 0330 ; -- <0076> "
    00f7 : 0353 ; -- <0077> a = a>>4
    00f8 : fba0 ; -- <0078> call fetch_byte
    00f9 : 01ec ; -- <0078> "
    00fa : fc00 ; -- <0078> "
    00fb : fba0 ; -- <0079> putchar a
    00fc : 00ab ; -- <0079> "
    00fd : fc00 ; -- <0079> "

    00fe : 0006 ; -- <0081> a = ga
    00ff : 060f ; -- <0082> b = 0x000F
    0100 : c800 ; -- <0083> a = and
    0101 : 0330 ; -- <0083> "
    0102 : fba0 ; -- <0084> call fetch_byte
    0103 : 01ec ; -- <0084> "
    0104 : fc00 ; -- <0084> "
    0105 : fba0 ; -- <0085> putchar a
    0106 : 00ab ; -- <0085> "
    0107 : fc00 ; -- <0085> "

    0108 : f80c ; -- <0087> pop rtna -- end_func
    0109 : 180c ; -- <0087> pop ga -- "
    010a : 100c ; -- <0087> pop x -- "
    010b : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x010c
    010c : 3002 ; -- <0091> push i -- func get4x
    010d : 3003 ; -- <0091> push j -- "
    010e : 3004 ; -- <0091> push x -- "
    010f : 3005 ; -- <0091> push y -- "
    0110 : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    0111 : 1604 ; -- <0094> y = 4
-- :again -- = 0x0112
    0112 : fba0 ; -- <0096> getchar
    0113 : 00b4 ; -- <0096> "
    0114 : fc00 ; -- <0096> "
    0115 : 13a0 ; -- <0097> x = :hexdigits
    0116 : 00cb ; -- <0097> "
    0117 : 0a10 ; -- <0098> i = 16
    0118 : fba0 ; -- <0099> call :find_in_fetch
    0119 : 0200 ; -- <0099> "
    011a : fc00 ; -- <0099> "
    011b : 0760 ; -- <0100> b = -1
    011c : e007 ; -- <0101> br eq :fail
    011d : 0131 ; -- <0101> "
    011e : 0400 ; -- <0102> b = a
    011f : 0003 ; -- <0103> a = j
    0120 : 0352 ; -- <0104> a = a<<4
    0121 : c800 ; -- <0105> j = or
    0122 : 0f34 ; -- <0105> "
    0123 : 1360 ; -- <0106> x = -1
    0124 : c800 ; -- <0107> y = x+y
    0125 : 1720 ; -- <0107> "
    0126 : 0005 ; -- <0108> a = y
    0127 : e400 ; -- <0109> bn az :again
    0128 : 0112 ; -- <0109> "
    0129 : 0003 ; -- <0110> a = j
    012a : 0600 ; -- <0111> b = 0
    012b : f80c ; -- <0112> pop rtna -- rtn
    012c : 140c ; -- <0112> pop y -- "
    012d : 100c ; -- <0112> pop x -- "
    012e : 0c0c ; -- <0112> pop j -- "
    012f : 080c ; -- <0112> pop i -- "
    0130 : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x0131
    0131 : 0760 ; -- <0114> b = -1
    0132 : f80c ; -- <0115> pop rtna -- end_func
    0133 : 140c ; -- <0115> pop y -- "
    0134 : 100c ; -- <0115> pop x -- "
    0135 : 0c0c ; -- <0115> pop j -- "
    0136 : 080c ; -- <0115> pop i -- "
    0137 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x0138
    0138 : 3002 ; -- <0121> push i -- func print_fixed
    0139 : 3003 ; -- <0121> push j -- "
    013a : 3004 ; -- <0121> push x -- "
    013b : 3005 ; -- <0121> push y -- "
    013c : 3006 ; -- <0121> push ga -- "
    013d : 303e ; -- <0121> push rtna -- "
    013e : 0800 ; -- <0122> i = a
    013f : 0e01 ; -- <0123> j = 1
    0140 : 1001 ; -- <0124> x = b
    0141 : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x0142
    0142 : e002 ; -- <0127> br xz :done
    0143 : 0158 ; -- <0127> "
    0144 : 1320 ; -- <0128> x = ad2
    0145 : d002 ; -- <0129> fetch ga from i
    0146 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, ga = data word.
    0147 : 0006 ; -- <0131> a = ga -- putchar ga
    0148 : fba0 ; -- <0131> putchar ga
    0149 : 00ab ; -- <0131> "
    014a : fc00 ; -- <0131> "
    014b : e002 ; -- <0132> br xz :done
    014c : 0158 ; -- <0132> "
    014d : 1320 ; -- <0133> x = ad2
    014e : 0006 ; -- <0134> a = ga
    014f : 0353 ; -- <0135> a = a>>4
    0150 : 0353 ; -- <0136> a = a>>4
    0151 : fba0 ; -- <0137> putchar a
    0152 : 00ab ; -- <0137> "
    0153 : fc00 ; -- <0137> "
    0154 : c800 ; -- <0138> i = i+j
    0155 : 0b10 ; -- <0138> "
    0156 : e00f ; -- <0139> jmp :next_word
    0157 : 0142 ; -- <0139> "
-- :done -- = 0x0158
    0158 : f80c ; -- <0141> pop rtna -- end_func
    0159 : 180c ; -- <0141> pop ga -- "
    015a : 140c ; -- <0141> pop y -- "
    015b : 100c ; -- <0141> pop x -- "
    015c : 0c0c ; -- <0141> pop j -- "
    015d : 080c ; -- <0141> pop i -- "
    015e : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x015f
    015f : 3002 ; -- <0147> push i -- func print_nt
    0160 : 3003 ; -- <0147> push j -- "
    0161 : 3004 ; -- <0147> push x -- "
    0162 : 303e ; -- <0147> push rtna -- "
    0163 : 0800 ; -- <0148> i = a
    0164 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0165
    0165 : d002 ; -- <0151> fetch x from i
    0166 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0167 : 0004 ; -- <0153> a = x
    0168 : 06ff ; -- <0154> b = 0xff
    0169 : e003 ; -- <0155> br and0z :done
    016a : 017b ; -- <0155> "
    016b : fba0 ; -- <0156> putchar a
    016c : 00ab ; -- <0156> "
    016d : fc00 ; -- <0156> "
    016e : 0004 ; -- <0157> a = x
    016f : 0353 ; -- <0158> a = a>>4
    0170 : 0353 ; -- <0159> a = a>>4
    0171 : 06ff ; -- <0160> b = 0xff
    0172 : e003 ; -- <0161> br and0z :done
    0173 : 017b ; -- <0161> "
    0174 : fba0 ; -- <0162> putchar a
    0175 : 00ab ; -- <0162> "
    0176 : fc00 ; -- <0162> "
    0177 : c800 ; -- <0163> i = i+j
    0178 : 0b10 ; -- <0163> "
    0179 : e00f ; -- <0164> jmp :next_word
    017a : 0165 ; -- <0164> "
-- :done -- = 0x017b
    017b : f80c ; -- <0166> pop rtna -- end_func
    017c : 100c ; -- <0166> pop x -- "
    017d : 0c0c ; -- <0166> pop j -- "
    017e : 080c ; -- <0166> pop i -- "
    017f : fc00 ; -- <0165> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x0180
    0180 : 3002 ; -- <0004> push i -- func multiply
    0181 : 3003 ; -- <0004> push j -- "
    0182 : 3004 ; -- <0004> push x -- "
    0183 : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- x = operand a
-- y = operand b
-- i = total
-- x is shifted right so its low bit can be tested each time.
-- y is shifted left so its value (for summing) increases each time.
    0184 : 1000 ; -- <0014> x = a
    0185 : 1401 ; -- <0015> y = b
    0186 : 0a00 ; -- <0016> i = 0
-- :again -- = 0x0187
    0187 : e002 ; -- <0018> br xz :done
    0188 : 0196 ; -- <0018> "
    0189 : 0004 ; -- <0019> a = x
    018a : 0601 ; -- <0020> b = 1
    018b : e003 ; -- <0021> br and0z :skip_add
    018c : 0190 ; -- <0021> "
    018d : 0c05 ; -- <0022> j = y
    018e : c800 ; -- <0023> i = i+j
    018f : 0b10 ; -- <0023> "
-- :skip_add -- = 0x0190
    0190 : 0004 ; -- <0025> a = x
    0191 : 1350 ; -- <0026> x = a>>1
    0192 : 0005 ; -- <0027> a = y
    0193 : 1751 ; -- <0028> y = a<<1
    0194 : e00f ; -- <0029> jmp :again
    0195 : 0187 ; -- <0029> "
-- :done -- = 0x0196
    0196 : 0002 ; -- <0031> a = i
    0197 : 140c ; -- <0032> pop y -- end_func
    0198 : 100c ; -- <0032> pop x -- "
    0199 : 0c0c ; -- <0032> pop j -- "
    019a : 080c ; -- <0032> pop i -- "
    019b : fc00 ; -- <0031> swapra = nop

-- ######## func divide -- = 0x019c
    019c : 3002 ; -- <0034> push i -- func divide
    019d : 3003 ; -- <0034> push j -- "
    019e : 3004 ; -- <0034> push x -- "
    019f : 3005 ; -- <0034> push y -- "
    01a0 : 3006 ; -- <0034> push g6 -- "
    01a1 : 3007 ; -- <0034> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    01a2 : e005 ; -- <0042> br lt :zero
    01a3 : 01dd ; -- <0042> "
    01a4 : e000 ; -- <0043> br az :zero
    01a5 : 01dd ; -- <0043> "
    01a6 : 1000 ; -- <0044> x = a
--    g7 = x
    01a7 : 0001 ; -- <0046> a = b
    01a8 : e000 ; -- <0047> br az :zero
    01a9 : 01dd ; -- <0047> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    01aa : 0404 ; -- <0063> b = x
    01ab : 0a00 ; -- <0064> i = 0
    01ac : 0e01 ; -- <0065> j = 1
-- :shift_again -- = 0x01ad
    01ad : e006 ; -- <0067> br gt :shift_done
    01ae : 01b3 ; -- <0067> "
    01af : 0351 ; -- <0068> a = a<<1
    01b0 : 0b10 ; -- <0069> i = ad1
    01b1 : e00f ; -- <0070> jmp :shift_again
    01b2 : 01ad ; -- <0070> "
-- :shift_done -- = 0x01b3
    01b3 : 1b50 ; -- <0072> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    01b4 : 1e00 ; -- <0083> g7 = 0
    01b5 : 0f60 ; -- <0084> j = -1
-- :again -- = 0x01b6
    01b6 : e001 ; -- <0086> br iz :done
    01b7 : 01d4 ; -- <0086> "
    01b8 : 0006 ; -- <0087> a = g6
    01b9 : 0404 ; -- <0088> b = x
    01ba : e006 ; -- <0089> br gt :result0
    01bb : 01cc ; -- <0089> "
-- temp does fit; output a 1.
    01bc : 0007 ; -- <0091> a = g7
    01bd : 0351 ; -- <0092> a = a<<1
    01be : 0601 ; -- <0093> b = 1
    01bf : c800 ; -- <0094> g7 = or
    01c0 : 1f34 ; -- <0094> "
-- dividend = dividend - temp
    01c1 : 0006 ; -- <0096> a = g6
    01c2 : 0760 ; -- <0097> b = -1
    01c3 : c800 ; -- <0098> a = xor
    01c4 : 0338 ; -- <0098> "
    01c5 : 0601 ; -- <0099> b = 1
    01c6 : c800 ; -- <0100> y = a+b
    01c7 : 1700 ; -- <0100> "
    01c8 : c800 ; -- <0101> x = x+y
    01c9 : 1320 ; -- <0101> "
    01ca : e00f ; -- <0102> jmp :next
    01cb : 01ce ; -- <0102> "
-- :result0 -- = 0x01cc
-- temp does not fit; output a 0.
    01cc : 0007 ; -- <0105> a = g7
    01cd : 1f51 ; -- <0106> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x01ce
    01ce : 0006 ; -- <0109> a = g6
    01cf : 1b50 ; -- <0110> g6 = a>>1
    01d0 : c800 ; -- <0111> i = i+j
    01d1 : 0b10 ; -- <0111> "
    01d2 : e00f ; -- <0112> jmp :again
    01d3 : 01b6 ; -- <0112> "

-- :done -- = 0x01d4
    01d4 : 0407 ; -- <0115> b = g7
    01d5 : 0004 ; -- <0116> a = x
    01d6 : 1c0c ; -- <0117> pop g7 -- rtn
    01d7 : 180c ; -- <0117> pop g6 -- "
    01d8 : 140c ; -- <0117> pop y -- "
    01d9 : 100c ; -- <0117> pop x -- "
    01da : 0c0c ; -- <0117> pop j -- "
    01db : 080c ; -- <0117> pop i -- "
    01dc : fc00 ; -- <0116> swapra = nop

-- :zero -- = 0x01dd
    01dd : 0600 ; -- <0120> b = 0
    01de : 1c0c ; -- <0121> pop g7 -- rtn
    01df : 180c ; -- <0121> pop g6 -- "
    01e0 : 140c ; -- <0121> pop y -- "
    01e1 : 100c ; -- <0121> pop x -- "
    01e2 : 0c0c ; -- <0121> pop j -- "
    01e3 : 080c ; -- <0121> pop i -- "
    01e4 : fc00 ; -- <0120> swapra = nop
    01e5 : 1c0c ; -- <0122> pop g7 -- end_func
    01e6 : 180c ; -- <0122> pop g6 -- "
    01e7 : 140c ; -- <0122> pop y -- "
    01e8 : 100c ; -- <0122> pop x -- "
    01e9 : 0c0c ; -- <0122> pop j -- "
    01ea : 080c ; -- <0122> pop i -- "
    01eb : fc00 ; -- <0121> swapra = nop


--func multiply32 {arg_a in pa} {arg_b in pb} {product_lo out pa} {product_hi out pb} {
---- unsigned 16-bit multiplication with 32-bit product.

---- ga = product_lo
---- gb = product_hi
---- pa is shifted right so its low bit can be tested each time.
---- pb is shifted left so its value (for summing) increases each time.
--FAIL:  because pb is shifting, it will be destroyed in cases where total bits > 16.
--despite supporting carry overflow, the algorithm still assumes total bits <= 16.
--also i think the loop order is backward for correctly shifting into the hi word.
--could fix that by reversing the hi word shift.
--ga = 0
--gb = 0
--:again
--br xz :done
--a = arg_a
--b = 1
--br and0z :skip_add
--a = ga
--b = arg_b
--ga = a+b
--br ad0c :carry
--a = gb
--gb = a<<1
--jmp :carry_done
--:carry
--a = gb
--a = a<<1
--b = 1
--gb = a+b
--:carry_done
--:skip_add
--a = arg_a
--arg_a = a>>1
--a = arg_b
--arg_b = a<<1
--jmp :again
--:done
--product_lo = ga
--product_hi = gb
--end_func


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x01ec
    01ec : 0601 ; -- <0005> b = 1
    01ed : e003 ; -- <0006> br and0z :pick_byte_even
    01ee : 01f7 ; -- <0006> "
    01ef : 0350 ; -- <0007> a = a>>1
    01f0 : 0404 ; -- <0008> b = x
    01f1 : c800 ; -- <0009> fetch a from a+b
    01f2 : d300 ; -- <0009> "
    01f3 : 03b0 ; -- <0009> "
    01f4 : 0353 ; -- <0010> a = a>>4
    01f5 : 0353 ; -- <0011> a = a>>4
    01f6 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x01f7
    01f7 : 0350 ; -- <0014> a = a>>1
    01f8 : 0404 ; -- <0015> b = x
    01f9 : c800 ; -- <0016> fetch a from a+b
    01fa : d300 ; -- <0016> "
    01fb : 03b0 ; -- <0016> "
    01fc : 06ff ; -- <0017> b = 0xff
    01fd : c800 ; -- <0018> a = and
    01fe : 0330 ; -- <0018> "
    01ff : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x0200
    0200 : 3002 ; -- <0027> push i -- func find_in_fetch
    0201 : 3003 ; -- <0027> push j -- "
    0202 : 3005 ; -- <0027> push y -- "
    0203 : 303e ; -- <0027> push rtna -- "
    0204 : 1400 ; -- <0028> y = a
    0205 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0206
    0206 : e001 ; -- <0031> br iz :fail
    0207 : 0216 ; -- <0031> "
    0208 : 0b10 ; -- <0032> i = ad1
    0209 : 0002 ; -- <0033> a = i
    020a : fba0 ; -- <0034> call :fetch_byte
    020b : 01ec ; -- <0034> "
    020c : fc00 ; -- <0034> "
    020d : 0405 ; -- <0035> b = y
    020e : e407 ; -- <0036> bn eq :again
    020f : 0206 ; -- <0036> "
-- :found -- = 0x0210
    0210 : 0002 ; -- <0038> a = i
    0211 : f80c ; -- <0039> pop rtna -- rtn
    0212 : 140c ; -- <0039> pop y -- "
    0213 : 0c0c ; -- <0039> pop j -- "
    0214 : 080c ; -- <0039> pop i -- "
    0215 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0216
    0216 : 0360 ; -- <0041> a = -1
    0217 : f80c ; -- <0042> pop rtna -- end_func
    0218 : 140c ; -- <0042> pop y -- "
    0219 : 0c0c ; -- <0042> pop j -- "
    021a : 080c ; -- <0042> pop i -- "
    021b : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x021c
    021c : 3004 ; -- <0002> push x -- func spinwait
    021d : 3005 ; -- <0002> push y -- "
--patch
--rtn
    021e : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x021f
    021f : 13a0 ; -- <0007> x = 16666
    0220 : 411a ; -- <0007> "
    0221 : 1760 ; -- <0008> y = -1
    0222 : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x0223
-- use of the ad2 name overrides auto-nop here.
    0223 : 1320 ; -- <0012> x = ad2
    0224 : e402 ; -- <0013> bn xz :spinwait_inner
    0225 : 0223 ; -- <0013> "
    0226 : c800 ; -- <0014> a = a+b
    0227 : 0300 ; -- <0014> "
    0228 : e400 ; -- <0015> bn az :spinwait_outer
    0229 : 021f ; -- <0015> "
    022a : 140c ; -- <0016> pop y -- end_func
    022b : 100c ; -- <0016> pop x -- "
    022c : fc00 ; -- <0015> swapra = nop




-- ######## func fletcher16_init -- = 0x022d

    022d : 2a00 ; -- <0005> $fletcher_sum1_reg = 0
    022e : 2e00 ; -- <0006> $fletcher_sum2_reg = 0

    022f : fc00 ; -- <0008> swapra = nop

-- return the modulus(255) of a given number.
-- ######## func mod255 -- = 0x0230

-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x0230
    0230 : 06fe ; -- <0013> b = 0xfe
    0231 : e006 ; -- <0014> br gt :mod255_greater
    0232 : 0234 ; -- <0014> "
    0233 : fc00 ; -- <0014> swapra = nop
-- :mod255_greater -- = 0x0234
    0234 : 07a0 ; -- <0017> b = ([negate 0xff])
    0235 : ff01 ; -- <0017> "
    0236 : c800 ; -- <0018> a = a+b
    0237 : 0300 ; -- <0018> "
    0238 : e00f ; -- <0019> jmp :mod255_again
    0239 : 0230 ; -- <0019> "

    023a : fc00 ; -- <0021> swapra = nop

-- accumulate a Fletcher16 checksum, given the next byte of data.
-- ######## func fletcher16_input8 -- = 0x023b
    023b : 303e ; -- <0046> push rtna -- func fletcher16_input8

--TODO: debug only.
--x = a
--putasc " "
--a = x
--call put4x
--a = x

    023c : 040a ; -- <0031> b = $fletcher_sum1_reg
    023d : c800 ; -- <0032> a = a+b
    023e : 0300 ; -- <0032> "
    023f : fba0 ; -- <0032> callx mod255  a+b  $fletcher_sum1_reg
    0240 : 0230 ; -- <0032> "
    0241 : fc00 ; -- <0032> "
    0242 : 2800 ; -- <0032> pc = a

    0243 : 000a ; -- <0034> a = $fletcher_sum1_reg
    0244 : 040b ; -- <0035> b = $fletcher_sum2_reg
    0245 : c800 ; -- <0036> a = a+b
    0246 : 0300 ; -- <0036> "
    0247 : fba0 ; -- <0036> callx mod255  a+b  $fletcher_sum2_reg
    0248 : 0230 ; -- <0036> "
    0249 : fc00 ; -- <0036> "
    024a : 2c00 ; -- <0036> pd = a

--TODO: debug only.
--putasc " "
--a =  $fletcher_sum2_reg
--call put4x
--putasc " "
--a =  $fletcher_sum1_reg
--call put4x
--puteol

    024b : f80c ; -- <0047> pop rtna -- func fletcher16_input8
    024c : fc00 ; -- <0047> swapra = nop

-- accumulate a Fletcher16 checksum, given the next word of data.
-- ######## func fletcher16_input16 -- = 0x024d
    024d : 3002 ; -- <0055> push i -- func fletcher16_input16
    024e : 303e ; -- <0055> push rtna -- "

    024f : 0b53 ; -- <0050> i = a>>4
    0250 : 06ff ; -- <0051> b = 0xff
    0251 : c800 ; -- <0052> a = and
    0252 : 0330 ; -- <0052> "
    0253 : fba0 ; -- <0052> callx fletcher16_input8  and
    0254 : 023b ; -- <0052> "
    0255 : fc00 ; -- <0052> "
    0256 : 0002 ; -- <0053> a = i
    0257 : 0353 ; -- <0054> a = a>>4
    0258 : fba0 ; -- <0054> callx fletcher16_input8  a>>4
    0259 : 023b ; -- <0054> "
    025a : fc00 ; -- <0054> "

    025b : f80c ; -- <0056> pop rtna -- func fletcher16_input16
    025c : 080c ; -- <0056> pop i -- "
    025d : fc00 ; -- <0056> swapra = nop

-- return the combined 16-bit result of Fletcher16 checksum.
-- ######## func fletcher16_result -- = 0x025e

    025e : 000b ; -- <0059> a = $fletcher_sum2_reg
    025f : 0352 ; -- <0060> a = a<<4
    0260 : 0352 ; -- <0061> a = a<<4
    0261 : 040a ; -- <0062> b = $fletcher_sum1_reg
    0262 : c800 ; -- <0063> result = or
    0263 : 0334 ; -- <0063> "
    0264 : fc00 ; -- <0062> swapra = nop

    0265 : fc00 ; -- <0065> swapra = nop





-- the higher-res MAF ref is used to recover absolute flow.
-- so it has more cells than afrc_maf_rows.






-- ######## func init_drom -- = 0x0266
    0266 : 3002 ; -- <0122> push i -- func init_drom

-- copy entire ROM content to a shadow area in RAM.
    0267 : 67a0 ; -- <0116> av_ad_hi = ($drom_shadow_base >> 16)
    0268 : 0100 ; -- <0116> "
    0269 : 0a00 ; -- <0121> i = 0
-- :loop_617 -- = 0x026a

    026a : 6c02 ; -- <0117> drom_ad = i
    026b : 6802 ; -- <0118> av_ad_lo = i
    026c : 5c1c ; -- <0119> av_write_data = drom_data


    026d : 0002 ; -- <0121> a = i
    026e : 0601 ; -- <0121> b = 1
    026f : c800 ; -- <0121> i = a+b
    0270 : 0b00 ; -- <0121> "


    0271 : 0002 ; -- <0121> a = i
    0272 : 07a0 ; -- <0121> b = $drom_shadow_len_bytes
    0273 : 0b48 ; -- <0121> "
    0274 : e005 ; -- <0121> br lt :loop_617
    0275 : 026a ; -- <0121> "

-- :end_617 -- = 0x0276

    0276 : 080c ; -- <0123> pop i -- func init_drom
    0277 : fc00 ; -- <0123> swapra = nop

-- ######## func load_afrc_cmd -- = 0x0278
    0278 : 3002 ; -- <0158> push i -- func load_afrc_cmd
    0279 : 3005 ; -- <0158> push y -- "
    027a : 303e ; -- <0158> push rtna -- "

-- loads 1 row only.

    027b : fba0 ; -- <0127> callx fletcher16_init
    027c : 022d ; -- <0127> "
    027d : fc00 ; -- <0127> "
-- expect valid row index.
    027e : fba0 ; -- <0129> call  get4x
    027f : 010c ; -- <0129> "
    0280 : fc00 ; -- <0129> "
    0281 : 1400 ; -- <0130> y = a
    0282 : fba0 ; -- <0131> callx fletcher16_input16  a
    0283 : 024d ; -- <0131> "
    0284 : fc00 ; -- <0131> "

    0285 : 0005 ; -- <0152> a = y
    0286 : 0640 ; -- <0152> b = 64

    0287 : e405 ; -- <0132> bn lt :else_647
    0288 : 02ac ; -- <0132> "

-- set RAM address to start of given row.  call struct_read for its side effect on Avalon address regs.
    0289 : 0005 ; -- <0134> a = y
    028a : 0610 ; -- <0135> b = $afrc_rpm_cols
    028b : c800 ; -- <0136> nop
    028c : c800 ; -- <0137> nop
    028d : c800 ; -- <0138> nop
    028e : c800 ; -- <0139> nop
    028f : 0410 ; -- <0140> b = product_lo
    0290 : 0200 ; -- <0141> a = 0

    0291 : 0351 ; -- <0141> a = a<<1
    0292 : 0600 ; -- <0141> b = 0
    0293 : 67a0 ; -- <0141> av_ad_hi = 256
    0294 : 0100 ; -- <0141> "
    0295 : 6b00 ; -- <0141> av_ad_lo = ad0
    0296 : 0417 ; -- <0141> b = av_begin_read

    0297 : 0018 ; -- <0141> a = av_read_data

-- expect each cell value back-to-back.
    0298 : 0a00 ; -- <0151> i = 0
-- :loop_664 -- = 0x0299

    0299 : fba0 ; -- <0144> call  get4x
    029a : 010c ; -- <0144> "
    029b : fc00 ; -- <0144> "
    029c : 5c00 ; -- <0145> av_write_data = a
    029d : fba0 ; -- <0146> callx fletcher16_input16  a
    029e : 024d ; -- <0146> "
    029f : fc00 ; -- <0146> "
    02a0 : 001a ; -- <0147> a = av_ad_lo
    02a1 : 0602 ; -- <0148> b = 2
    02a2 : c800 ; -- <0149> av_ad_lo = a+b
    02a3 : 6b00 ; -- <0149> "


    02a4 : 0002 ; -- <0151> a = i
    02a5 : 0601 ; -- <0151> b = 1
    02a6 : c800 ; -- <0151> i = a+b
    02a7 : 0b00 ; -- <0151> "


    02a8 : 0002 ; -- <0151> a = i
    02a9 : 0610 ; -- <0151> b = $afrc_rpm_cols
    02aa : e005 ; -- <0151> br lt :loop_664
    02ab : 0299 ; -- <0151> "

-- :end_664 -- = 0x02ac


-- reply with checksum
    02ac : fba0 ; -- <0155> callx fletcher16_result a
    02ad : 025e ; -- <0155> "
    02ae : fc00 ; -- <0155> "
    02af : fba0 ; -- <0156> call put4x
    02b0 : 00d3 ; -- <0156> "
    02b1 : fc00 ; -- <0156> "
    02b2 : 020d ; -- <0157> a = 13 -- puteol
    02b3 : fba0 ; -- <0157> puteol
    02b4 : 00ab ; -- <0157> "
    02b5 : fc00 ; -- <0157> "
    02b6 : 020a ; -- <0157> a = 10 -- puteol
    02b7 : fba0 ; -- <0157> puteol
    02b8 : 00ab ; -- <0157> "
    02b9 : fc00 ; -- <0157> "

    02ba : f80c ; -- <0159> pop rtna -- func load_afrc_cmd
    02bb : 140c ; -- <0159> pop y -- "
    02bc : 080c ; -- <0159> pop i -- "
    02bd : fc00 ; -- <0159> swapra = nop

-- ######## func load_row_cmd -- = 0x02be
    02be : 3002 ; -- <0180> push i -- func load_row_cmd
    02bf : 303e ; -- <0180> push rtna -- "

-- loads 1 row of data having the given number of words.
-- start of row address must be already loaded into av_ad_hi and av_ad_lo.

    02c0 : fba0 ; -- <0164> callx fletcher16_init
    02c1 : 022d ; -- <0164> "
    02c2 : fc00 ; -- <0164> "

-- expect each cell value back-to-back.
    02c3 : 0a00 ; -- <0174> i = 0
-- :loop_707 -- = 0x02c4

    02c4 : fba0 ; -- <0167> call  get4x
    02c5 : 010c ; -- <0167> "
    02c6 : fc00 ; -- <0167> "
    02c7 : 5c00 ; -- <0168> av_write_data = a
    02c8 : fba0 ; -- <0169> callx fletcher16_input16  a
    02c9 : 024d ; -- <0169> "
    02ca : fc00 ; -- <0169> "
    02cb : 001a ; -- <0170> a = av_ad_lo
    02cc : 0602 ; -- <0171> b = 2
    02cd : c800 ; -- <0172> av_ad_lo = a+b
    02ce : 6b00 ; -- <0172> "


    02cf : 0002 ; -- <0174> a = i
    02d0 : 0601 ; -- <0174> b = 1
    02d1 : c800 ; -- <0174> i = a+b
    02d2 : 0b00 ; -- <0174> "


    02d3 : 0002 ; -- <0174> a = i
    02d4 : 0408 ; -- <0174> b = num_words
    02d5 : e005 ; -- <0174> br lt :loop_707
    02d6 : 02c4 ; -- <0174> "

-- :end_707 -- = 0x02d7

-- reply with checksum
    02d7 : fba0 ; -- <0177> callx fletcher16_result a
    02d8 : 025e ; -- <0177> "
    02d9 : fc00 ; -- <0177> "
    02da : fba0 ; -- <0178> call put4x
    02db : 00d3 ; -- <0178> "
    02dc : fc00 ; -- <0178> "
    02dd : 020d ; -- <0179> a = 13 -- puteol
    02de : fba0 ; -- <0179> puteol
    02df : 00ab ; -- <0179> "
    02e0 : fc00 ; -- <0179> "
    02e1 : 020a ; -- <0179> a = 10 -- puteol
    02e2 : fba0 ; -- <0179> puteol
    02e3 : 00ab ; -- <0179> "
    02e4 : fc00 ; -- <0179> "

    02e5 : f80c ; -- <0181> pop rtna -- func load_row_cmd
    02e6 : 080c ; -- <0181> pop i -- "
    02e7 : fc00 ; -- <0181> swapra = nop

-- ######## func load_rpm_ref_cmd -- = 0x02e8
    02e8 : 303e ; -- <0185> push rtna -- func load_rpm_ref_cmd

    02e9 : 0200 ; -- <0183> a = 0

    02ea : 0351 ; -- <0183> a = a<<1
    02eb : 07a0 ; -- <0183> b = 2560
    02ec : 0a00 ; -- <0183> "
    02ed : 67a0 ; -- <0183> av_ad_hi = 256
    02ee : 0100 ; -- <0183> "
    02ef : 6b00 ; -- <0183> av_ad_lo = ad0
    02f0 : 0417 ; -- <0183> b = av_begin_read

    02f1 : 0018 ; -- <0183> a = av_read_data
    02f2 : 2210 ; -- <0184> pa = 16
    02f3 : fba0 ; -- <0184> callx load_row_cmd $rpm_ref_num_cells
    02f4 : 02be ; -- <0184> "
    02f5 : fc00 ; -- <0184> "

    02f6 : f80c ; -- <0186> pop rtna -- func load_rpm_ref_cmd
    02f7 : fc00 ; -- <0186> swapra = nop

-- ######## func load_maf_ref_cmd -- = 0x02f8
    02f8 : 303e ; -- <0190> push rtna -- func load_maf_ref_cmd

    02f9 : 0200 ; -- <0188> a = 0

    02fa : 0351 ; -- <0188> a = a<<1
    02fb : 07a0 ; -- <0188> b = 2048
    02fc : 0800 ; -- <0188> "
    02fd : 67a0 ; -- <0188> av_ad_hi = 256
    02fe : 0100 ; -- <0188> "
    02ff : 6b00 ; -- <0188> av_ad_lo = ad0
    0300 : 0417 ; -- <0188> b = av_begin_read

    0301 : 0018 ; -- <0188> a = av_read_data
    0302 : 23a0 ; -- <0189> pa = 256
    0303 : 0100 ; -- <0189> "
    0304 : fba0 ; -- <0189> callx load_row_cmd $maf_ref_num_cells
    0305 : 02be ; -- <0189> "
    0306 : fc00 ; -- <0189> "

    0307 : f80c ; -- <0191> pop rtna -- func load_maf_ref_cmd
    0308 : fc00 ; -- <0191> swapra = nop

-- ######## func load_block_temp_ref_cmd -- = 0x0309
    0309 : 303e ; -- <0195> push rtna -- func load_block_temp_ref_cmd

    030a : 0200 ; -- <0193> a = 0

    030b : 0351 ; -- <0193> a = a<<1
    030c : 07a0 ; -- <0193> b = 2592
    030d : 0a20 ; -- <0193> "
    030e : 67a0 ; -- <0193> av_ad_hi = 256
    030f : 0100 ; -- <0193> "
    0310 : 6b00 ; -- <0193> av_ad_lo = ad0
    0311 : 0417 ; -- <0193> b = av_begin_read

    0312 : 0018 ; -- <0193> a = av_read_data
    0313 : 2240 ; -- <0194> pa = 64
    0314 : fba0 ; -- <0194> callx load_row_cmd $block_temp_num_cells
    0315 : 02be ; -- <0194> "
    0316 : fc00 ; -- <0194> "

    0317 : f80c ; -- <0196> pop rtna -- func load_block_temp_ref_cmd
    0318 : fc00 ; -- <0196> swapra = nop

-- ######## func load_block_temp_map_cmd -- = 0x0319
    0319 : 303e ; -- <0200> push rtna -- func load_block_temp_map_cmd

    031a : 0200 ; -- <0198> a = 0

    031b : 0351 ; -- <0198> a = a<<1
    031c : 07a0 ; -- <0198> b = 2720
    031d : 0aa0 ; -- <0198> "
    031e : 67a0 ; -- <0198> av_ad_hi = 256
    031f : 0100 ; -- <0198> "
    0320 : 6b00 ; -- <0198> av_ad_lo = ad0
    0321 : 0417 ; -- <0198> b = av_begin_read

    0322 : 0018 ; -- <0198> a = av_read_data
    0323 : 2240 ; -- <0199> pa = 64
    0324 : fba0 ; -- <0199> callx load_row_cmd $block_temp_num_cells
    0325 : 02be ; -- <0199> "
    0326 : fc00 ; -- <0199> "

    0327 : f80c ; -- <0201> pop rtna -- func load_block_temp_map_cmd
    0328 : fc00 ; -- <0201> swapra = nop

-- ######## func load_afterstart_ref_cmd -- = 0x0329
    0329 : 303e ; -- <0205> push rtna -- func load_afterstart_ref_cmd

    032a : 0200 ; -- <0203> a = 0

    032b : 0351 ; -- <0203> a = a<<1
    032c : 07a0 ; -- <0203> b = 2848
    032d : 0b20 ; -- <0203> "
    032e : 67a0 ; -- <0203> av_ad_hi = 256
    032f : 0100 ; -- <0203> "
    0330 : 6b00 ; -- <0203> av_ad_lo = ad0
    0331 : 0417 ; -- <0203> b = av_begin_read

    0332 : 0018 ; -- <0203> a = av_read_data
    0333 : 220a ; -- <0204> pa = 10
    0334 : fba0 ; -- <0204> callx load_row_cmd $afterstart_num_cells
    0335 : 02be ; -- <0204> "
    0336 : fc00 ; -- <0204> "

    0337 : f80c ; -- <0206> pop rtna -- func load_afterstart_ref_cmd
    0338 : fc00 ; -- <0206> swapra = nop

-- ######## func load_afterstart_map_cmd -- = 0x0339
    0339 : 303e ; -- <0210> push rtna -- func load_afterstart_map_cmd

    033a : 0200 ; -- <0208> a = 0

    033b : 0351 ; -- <0208> a = a<<1
    033c : 07a0 ; -- <0208> b = 2868
    033d : 0b34 ; -- <0208> "
    033e : 67a0 ; -- <0208> av_ad_hi = 256
    033f : 0100 ; -- <0208> "
    0340 : 6b00 ; -- <0208> av_ad_lo = ad0
    0341 : 0417 ; -- <0208> b = av_begin_read

    0342 : 0018 ; -- <0208> a = av_read_data
    0343 : 220a ; -- <0209> pa = 10
    0344 : fba0 ; -- <0209> callx load_row_cmd $afterstart_num_cells
    0345 : 02be ; -- <0209> "
    0346 : fc00 ; -- <0209> "

    0347 : f80c ; -- <0211> pop rtna -- func load_afterstart_map_cmd
    0348 : fc00 ; -- <0211> swapra = nop




-- command strings must be exactly key_buf_max bytes long (currently 7).
-- the other byte is the carriage return.
-- when commands share a common suffix, the longer command must come FIRST here.
-- :cmd_table -- = 0x0349
-- "  hello"
    0349 : 2020 ; -- <0008>   
    034a : 6568 ; -- <0008> eh
    034b : 6c6c ; -- <0008> ll
    034c : 006f ; -- <0008>  o
    034d : 0414 ; -- <0009> ([label hello_cmd])
-- "  plstp"
    034e : 2020 ; -- <0010>   
    034f : 6c70 ; -- <0010> lp
    0350 : 7473 ; -- <0010> ts
    0351 : 0070 ; -- <0010>  p
    0352 : 0418 ; -- <0011> ([label set_plan_stop_cmd])
-- "   plcr"
    0353 : 2020 ; -- <0012>   
    0354 : 7020 ; -- <0012> p 
    0355 : 636c ; -- <0012> cl
    0356 : 0072 ; -- <0012>  r
    0357 : 0423 ; -- <0013> ([label set_plan_crank_cmd])
--"   plwm"
--([label set_plan_warmup_cmd])
-- "   plrn"
    0358 : 2020 ; -- <0016>   
    0359 : 7020 ; -- <0016> p 
    035a : 726c ; -- <0016> rl
    035b : 006e ; -- <0016>  n
    035c : 042e ; -- <0017> ([label set_plan_run_cmd])
--"   plln"
--([label set_plan_learn_cmd])
-- "  stoff"
    035d : 2020 ; -- <0020>   
    035e : 7473 ; -- <0020> ts
    035f : 666f ; -- <0020> fo
    0360 : 0066 ; -- <0020>  f
    0361 : 0439 ; -- <0021> ([label status_off_cmd])
-- "   ston"
    0362 : 2020 ; -- <0022>   
    0363 : 7320 ; -- <0022> s 
    0364 : 6f74 ; -- <0022> ot
    0365 : 006e ; -- <0022>  n
    0366 : 043d ; -- <0023> ([label status_on_cmd])
-- " ldafrc"
    0367 : 6c20 ; -- <0024> l 
    0368 : 6164 ; -- <0024> ad
    0369 : 7266 ; -- <0024> rf
    036a : 0063 ; -- <0024>  c
    036b : 0278 ; -- <0025> ([label load_afrc_cmd])
-- when commands share a common suffix, the longer command must come FIRST here.
-- "   afrc"
    036c : 2020 ; -- <0027>   
    036d : 6120 ; -- <0027> a 
    036e : 7266 ; -- <0027> rf
    036f : 0063 ; -- <0027>  c
    0370 : 06a1 ; -- <0028> ([label dump_afrc_cmd])
-- "  ldrpm"
    0371 : 2020 ; -- <0029>   
    0372 : 646c ; -- <0029> dl
    0373 : 7072 ; -- <0029> pr
    0374 : 006d ; -- <0029>  m
    0375 : 02e8 ; -- <0030> ([label load_rpm_ref_cmd])
-- "  ldmaf"
    0376 : 2020 ; -- <0031>   
    0377 : 646c ; -- <0031> dl
    0378 : 616d ; -- <0031> am
    0379 : 0066 ; -- <0031>  f
    037a : 02f8 ; -- <0032> ([label load_maf_ref_cmd])
-- "ldbtref"
    037b : 646c ; -- <0033> dl
    037c : 7462 ; -- <0033> tb
    037d : 6572 ; -- <0033> er
    037e : 0066 ; -- <0033>  f
    037f : 0309 ; -- <0034> ([label load_block_temp_ref_cmd])
-- "ldbtmap"
    0380 : 646c ; -- <0035> dl
    0381 : 7462 ; -- <0035> tb
    0382 : 616d ; -- <0035> am
    0383 : 0070 ; -- <0035>  p
    0384 : 0319 ; -- <0036> ([label load_block_temp_map_cmd])
-- "ldasref"
    0385 : 646c ; -- <0037> dl
    0386 : 7361 ; -- <0037> sa
    0387 : 6572 ; -- <0037> er
    0388 : 0066 ; -- <0037>  f
    0389 : 0329 ; -- <0038> ([label load_afterstart_ref_cmd])
-- "ldasmap"
    038a : 646c ; -- <0039> dl
    038b : 7361 ; -- <0039> sa
    038c : 616d ; -- <0039> am
    038d : 0070 ; -- <0039>  p
    038e : 0339 ; -- <0040> ([label load_afterstart_map_cmd])
-- "      ,"
    038f : 2020 ; -- <0041>   
    0390 : 2020 ; -- <0041>   
    0391 : 2020 ; -- <0041>   
    0392 : 002c ; -- <0041>  ,
    0393 : 04e8 ; -- <0042> ([label trim_lean_cmd])
-- "      ."
    0394 : 2020 ; -- <0043>   
    0395 : 2020 ; -- <0043>   
    0396 : 2020 ; -- <0043>   
    0397 : 002e ; -- <0043>  .
    0398 : 04f9 ; -- <0044> ([label trim_rich_cmd])
-- "     \["
    0399 : 2020 ; -- <0045>   
    039a : 2020 ; -- <0045>   
    039b : 5b20 ; -- <0045> [ 
    039c : 050a ; -- <0046> ([label trim_2lean_cmd])
-- "     \]"
    039d : 2020 ; -- <0047>   
    039e : 2020 ; -- <0047>   
    039f : 5d20 ; -- <0047> ] 
    03a0 : 051b ; -- <0048> ([label trim_2rich_cmd])
-- "\x0\x0"
    03a1 : 0000 ; -- <0049>   


-- ######## func parse_key -- = 0x03a2
    03a2 : 3002 ; -- <0063> push i -- func parse_key
    03a3 : 3004 ; -- <0063> push x -- "
    03a4 : 3005 ; -- <0063> push y -- "
    03a5 : 303e ; -- <0063> push rtna -- "

-- memorize into ram_key_buf, pushing down existing content.
    03a6 : 1008 ; -- <0054> x = key
    03a7 : 0a07 ; -- <0059> i = $key_buf_max
-- :loop_935 -- = 0x03a8

    03a8 : 0002 ; -- <0055> a = i

    03a9 : 0351 ; -- <0055> a = a<<1
    03aa : 0600 ; -- <0055> b = 0
    03ab : 6600 ; -- <0055> av_ad_hi = 0
    03ac : 6b00 ; -- <0055> av_ad_lo = ad0
    03ad : 0417 ; -- <0055> b = av_begin_read

    03ae : 1418 ; -- <0055> y = av_read_data
    03af : 3004 ; -- <0056> push x -- push x
    03b0 : 0002 ; -- <0056> a = i

    03b1 : 0351 ; -- <0056> a = a<<1
    03b2 : 0600 ; -- <0056> b = 0
    03b3 : 6600 ; -- <0056> av_ad_hi = 0
    03b4 : 6b00 ; -- <0056> av_ad_lo = ad0

    03b5 : 5c0c ; -- <0056> pop av_write_data -- pop av_write_data
    03b6 : 1005 ; -- <0057> x = y


    03b7 : 0002 ; -- <0059> a = i
    03b8 : 0600 ; -- <0059> b = 0
    03b9 : e007 ; -- <0059> br eq :end_935
    03ba : 03c3 ; -- <0059> "


    03bb : 0002 ; -- <0059> a = i
    03bc : 0760 ; -- <0059> b = -1
    03bd : c800 ; -- <0059> i = a+b
    03be : 0b00 ; -- <0059> "


    03bf : 0002 ; -- <0059> a = i
    03c0 : 0600 ; -- <0059> b = 0
    03c1 : e405 ; -- <0059> bn lt :loop_935
    03c2 : 03a8 ; -- <0059> "

-- :end_935 -- = 0x03c3

    03c3 : 0008 ; -- <0062> a = key
    03c4 : 060d ; -- <0062> b = 13

    03c5 : e407 ; -- <0060> bn eq :else_965
    03c6 : 03ca ; -- <0060> "

    03c7 : fba0 ; -- <0061> callx  parse_command
    03c8 : 03d1 ; -- <0061> "
    03c9 : fc00 ; -- <0061> "


    03ca : f80c ; -- <0064> pop rtna -- func parse_key
    03cb : 140c ; -- <0064> pop y -- "
    03cc : 100c ; -- <0064> pop x -- "
    03cd : 080c ; -- <0064> pop i -- "
    03ce : fc00 ; -- <0064> swapra = nop

-- :cmd_ack_msg -- = 0x03cf
-- "OK\x0"
    03cf : 4b4f ; -- <0066> KO
    03d0 : 0000 ; -- <0066>   

-- ######## func parse_command -- = 0x03d1
    03d1 : 3002 ; -- <0106> push i -- func parse_command
    03d2 : 3004 ; -- <0106> push x -- "
    03d3 : 3005 ; -- <0106> push y -- "
    03d4 : 303e ; -- <0106> push rtna -- "

    03d5 : 13a0 ; -- <0069> x = :cmd_table
    03d6 : 0349 ; -- <0069> "
-- :next_cmd -- = 0x03d7
    03d7 : d004 ; -- <0071> fetch a from x
    03d8 : 03b0 ; -- <0071> "
    03d9 : e000 ; -- <0072> br az :done
    03da : 040f ; -- <0072> "

    03db : 0a00 ; -- <0087> i = 0
-- :loop_987 -- = 0x03dc

    03dc : 0002 ; -- <0074> a = i
    03dd : fba0 ; -- <0075> call :fetch_byte
    03de : 01ec ; -- <0075> "
    03df : fc00 ; -- <0075> "
    03e0 : 1400 ; -- <0076> y = a
    03e1 : 0620 ; -- <0077> b = 32 -- asc b = " "

    03e2 : 0000 ; -- <0085> a = a
    03e3 : 0401 ; -- <0085> b = b

    03e4 : e007 ; -- <0078> br eq :else_996
    03e5 : 03f0 ; -- <0078> "

--asc b = "*"
--br eq :matched
---- parameter character.  succeed early.
    03e6 : 0002 ; -- <0082> a = i

    03e7 : 0351 ; -- <0082> a = a<<1
    03e8 : 0600 ; -- <0082> b = 0
    03e9 : 6600 ; -- <0082> av_ad_hi = 0
    03ea : 6b00 ; -- <0082> av_ad_lo = ad0
    03eb : 0417 ; -- <0082> b = av_begin_read

    03ec : 0418 ; -- <0082> b = av_read_data
    03ed : 0005 ; -- <0083> a = y
    03ee : e407 ; -- <0084> bn eq :no_match
    03ef : 0404 ; -- <0084> "



    03f0 : 0002 ; -- <0087> a = i
    03f1 : 0601 ; -- <0087> b = 1
    03f2 : c800 ; -- <0087> i = a+b
    03f3 : 0b00 ; -- <0087> "


    03f4 : 0002 ; -- <0087> a = i
    03f5 : 0607 ; -- <0087> b = $key_buf_max
    03f6 : e005 ; -- <0087> br lt :loop_987
    03f7 : 03dc ; -- <0087> "

-- :end_987 -- = 0x03f8

-- at this point we have a match on the record beginning at x.
-- :matched -- = 0x03f8
    03f8 : 23a0 ; -- <0091> pa = :cmd_ack_msg
    03f9 : 03cf ; -- <0091> "
    03fa : fba0 ; -- <0091> callx  set_text_flag  :cmd_ack_msg
    03fb : 0bc0 ; -- <0091> "
    03fc : fc00 ; -- <0091> "
    03fd : 1604 ; -- <0092> y = ($key_buf_len / 2)
    03fe : c800 ; -- <0093> fetch rtna from x+y
    03ff : d320 ; -- <0093> "
    0400 : fbb0 ; -- <0093> "
    0401 : fc00 ; -- <0094> swapra = nop
    0402 : e00f ; -- <0096> jmp :done
    0403 : 040f ; -- <0096> "

-- :no_match -- = 0x0404
-- if ram_terminal_connected is still 0, quit searching after the very first command in the table.
    0404 : 6600 ; -- <0100> ram a = $ram_terminal_connected -- av_ad_hi = 0
    0405 : 6a96 ; -- <0100> ram a = $ram_terminal_connected -- av_ad_lo = 150
    0406 : 0017 ; -- <0100> ram a = $ram_terminal_connected -- a = av_write_data -- start read cycle
    0407 : 0018 ; -- <0100> ram a = $ram_terminal_connected -- a = av_read_data -- finish read cycle
    0408 : e000 ; -- <0101> br az :done
    0409 : 040f ; -- <0101> "

    040a : 1605 ; -- <0103> y = (($key_buf_len / 2) + 1)
    040b : c800 ; -- <0104> x = x+y
    040c : 1320 ; -- <0104> "
    040d : e00f ; -- <0105> jmp :next_cmd
    040e : 03d7 ; -- <0105> "
-- :done -- = 0x040f

    040f : f80c ; -- <0108> pop rtna -- func parse_command
    0410 : 140c ; -- <0108> pop y -- "
    0411 : 100c ; -- <0108> pop x -- "
    0412 : 080c ; -- <0108> pop i -- "
    0413 : fc00 ; -- <0108> swapra = nop

-- ######## func hello_cmd -- = 0x0414

    0414 : 6600 ; -- <0110> ram $ram_terminal_connected = 1 -- av_ad_hi = 0
    0415 : 6a96 ; -- <0110> ram $ram_terminal_connected = 1 -- av_ad_lo = 150
    0416 : 5e01 ; -- <0110> ram $ram_terminal_connected = 1 -- av_write_data = 1

    0417 : fc00 ; -- <0112> swapra = nop

-- ######## func set_plan_stop_cmd -- = 0x0418
    0418 : 303e ; -- <0117> push rtna -- func set_plan_stop_cmd

    0419 : 6600 ; -- <0114> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    041a : 6a90 ; -- <0114> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    041b : f817 ; -- <0114> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    041c : f818 ; -- <0114> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    041d : fc00 ; -- <0115> swapra = nop
    041e : fba0 ; -- <0117> callx  init_plan_stop
    041f : 0443 ; -- <0117> "
    0420 : fc00 ; -- <0117> "

    0421 : f80c ; -- <0119> pop rtna -- func set_plan_stop_cmd
    0422 : fc00 ; -- <0119> swapra = nop

-- ######## func set_plan_crank_cmd -- = 0x0423
    0423 : 303e ; -- <0124> push rtna -- func set_plan_crank_cmd

    0424 : 6600 ; -- <0121> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0425 : 6a90 ; -- <0121> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    0426 : f817 ; -- <0121> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0427 : f818 ; -- <0121> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0428 : fc00 ; -- <0122> swapra = nop
    0429 : fba0 ; -- <0124> callx  init_plan_crank
    042a : 0482 ; -- <0124> "
    042b : fc00 ; -- <0124> "

    042c : f80c ; -- <0126> pop rtna -- func set_plan_crank_cmd
    042d : fc00 ; -- <0126> swapra = nop

-- ######## func set_plan_run_cmd -- = 0x042e
    042e : 303e ; -- <0131> push rtna -- func set_plan_run_cmd

    042f : 6600 ; -- <0128> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0430 : 6a90 ; -- <0128> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    0431 : f817 ; -- <0128> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0432 : f818 ; -- <0128> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0433 : fc00 ; -- <0129> swapra = nop
    0434 : fba0 ; -- <0131> callx  init_plan_run
    0435 : 052d ; -- <0131> "
    0436 : fc00 ; -- <0131> "

    0437 : f80c ; -- <0133> pop rtna -- func set_plan_run_cmd
    0438 : fc00 ; -- <0133> swapra = nop

-- ######## func status_off_cmd -- = 0x0439

    0439 : 6600 ; -- <0135> ram $ram_enable_status_report = 0 -- av_ad_hi = 0
    043a : 6a3c ; -- <0135> ram $ram_enable_status_report = 0 -- av_ad_lo = 60
    043b : 5e00 ; -- <0135> ram $ram_enable_status_report = 0 -- av_write_data = 0

    043c : fc00 ; -- <0137> swapra = nop

-- ######## func status_on_cmd -- = 0x043d

    043d : 6600 ; -- <0139> ram $ram_enable_status_report = 1 -- av_ad_hi = 0
    043e : 6a3c ; -- <0139> ram $ram_enable_status_report = 1 -- av_ad_lo = 60
    043f : 5e01 ; -- <0139> ram $ram_enable_status_report = 1 -- av_write_data = 1

    0440 : fc00 ; -- <0141> swapra = nop


-- :plan_name_stop -- = 0x0441
-- "STP\x0"
    0441 : 5453 ; -- <0002> TS
    0442 : 0050 ; -- <0002>  P

-- ######## func init_plan_stop -- = 0x0443
    0443 : 303e ; -- <0023> push rtna -- func init_plan_stop

-- set up the stop plan.
    0444 : fba0 ; -- <0006> callx  clear_ign_history
    0445 : 088f ; -- <0006> "
    0446 : fc00 ; -- <0006> "
-- set noise filter to measure RPM between 50 and 1160 to indicate cranking.
    0447 : 6600 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_hi = 0
    0448 : 6a84 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_ad_lo = 132
    0449 : 5fa0 ; -- <0008> ram $ram_ign_fastest_jf = ([rpm_to_jf 1160]) -- av_write_data = 603
    044a : 025b ; -- <0008> "
    044b : 6600 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    044c : 6a86 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    044d : 5fa0 ; -- <0009> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    044e : 36b0 ; -- <0009> "
    044f : 93a0 ; -- <0010> ign_timeout_len_jf = ([rpm_to_jf 50])
    0450 : 36b0 ; -- <0010> "
-- normally puff length is not touched by an init func.
-- this one does it because it's part of the program boot,
-- and also a good idea whenever stopping the engine.
-- this might interrupt a puff in mid-pulse, but no matter in this case.
    0451 : 6600 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0452 : 6a92 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    0453 : 5e00 ; -- <0015> ram $ram_next_puff_len_us = 0 -- av_write_data = 0
    0454 : 9600 ; -- <0016> puff_len_us = 0

-- memorize state.
    0455 : 6600 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_hi = 0
    0456 : 6a8a ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_ad_lo = 138
    0457 : 5fa0 ; -- <0019> ram $ram_plan_name = :plan_name_stop -- av_write_data = :plan_name_stop
    0458 : 0441 ; -- <0019> "
    0459 : 6600 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_hi = 0
    045a : 6a8c ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_ad_lo = 140
    045b : 5fa0 ; -- <0020> ram $ram_puff_len_func = :puff_len_stop -- av_write_data = :puff_len_stop
    045c : 0468 ; -- <0020> "
    045d : 6600 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_hi = 0
    045e : 6a8e ; -- <0021> ram $ram_transition_func = :leave_stop -- av_ad_lo = 142
    045f : 5fa0 ; -- <0021> ram $ram_transition_func = :leave_stop -- av_write_data = :leave_stop
    0460 : 046c ; -- <0021> "
    0461 : 6600 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_hi = 0
    0462 : 6a90 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_ad_lo = 144
    0463 : 5fa0 ; -- <0022> ram $ram_destroy_plan_func = :destroy_plan_stop -- av_write_data = :destroy_plan_stop
    0464 : 0467 ; -- <0022> "

    0465 : f80c ; -- <0024> pop rtna -- func init_plan_stop
    0466 : fc00 ; -- <0024> swapra = nop

-- ######## func destroy_plan_stop -- = 0x0467


    0467 : fc00 ; -- <0027> swapra = nop

-- ######## func puff_len_stop -- = 0x0468

    0468 : 6600 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_hi = 0
    0469 : 6a92 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_ad_lo = 146
    046a : 5e00 ; -- <0029> ram $ram_next_puff_len_us = 0 -- av_write_data = 0

    046b : fc00 ; -- <0031> swapra = nop

-- ######## func leave_stop -- = 0x046c
    046c : 303e ; -- <0044> push rtna -- func leave_stop

-- leave stop plan if ignition switch is turned on AND more than half if the ignition history is valid.
-- requiring both conditions prevents spurious noise readings from starting up the injection.
    046d : 0022 ; -- <0035> a = power_duty
    046e : 0680 ; -- <0036> b = $ign_switch_off_mask
    046f : e403 ; -- <0037> bn and0z :stay
    0470 : 047e ; -- <0037> "
    0471 : 6600 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_hi = 0
    0472 : 6a82 ; -- <0038> ram a = $ram_ign_bad_samples -- av_ad_lo = 130
    0473 : 0017 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_write_data -- start read cycle
    0474 : 0018 ; -- <0038> ram a = $ram_ign_bad_samples -- a = av_read_data -- finish read cycle
    0475 : 0608 ; -- <0039> b = ($ign_history_len / 2)
    0476 : e006 ; -- <0040> br gt :stay
    0477 : 047e ; -- <0040> "
    0478 : fba0 ; -- <0041> callx  destroy_plan_stop
    0479 : 0467 ; -- <0041> "
    047a : fc00 ; -- <0041> "
    047b : fba0 ; -- <0042> callx  init_plan_crank
    047c : 0482 ; -- <0042> "
    047d : fc00 ; -- <0042> "
-- :stay -- = 0x047e

    047e : f80c ; -- <0045> pop rtna -- func leave_stop
    047f : fc00 ; -- <0045> swapra = nop



-- escalating puff length by 1500 us per puff while cranking slowly at e.g. 80 RPM
-- on a frozen winter morning will ramp up from 10000 to 20000 us length in about 5 seconds.

-- :plan_name_crank -- = 0x0480
-- "CR\x0"
    0480 : 5243 ; -- <0011> RC
    0481 : 0000 ; -- <0011>   

-- ######## func init_plan_crank -- = 0x0482
    0482 : 303e ; -- <0033> push rtna -- func init_plan_crank

-- set up the crank plan.
    0483 : 6600 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_hi = 0
    0484 : 6a94 ; -- <0015> ram $ram_puff_count = 0 -- av_ad_lo = 148
    0485 : 5e00 ; -- <0015> ram $ram_puff_count = 0 -- av_write_data = 0
-- set noise filter to measure RPM between 50 and 8000 to indicate running.
    0486 : 6600 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_hi = 0
    0487 : 6a84 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_ad_lo = 132
    0488 : 5e57 ; -- <0017> ram $ram_ign_fastest_jf = ([rpm_to_jf 8000]) -- av_write_data = 87
    0489 : 6600 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_hi = 0
    048a : 6a86 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_ad_lo = 134
    048b : 5fa0 ; -- <0018> ram $ram_ign_slowest_jf = ([rpm_to_jf 50]) -- av_write_data = 14000
    048c : 36b0 ; -- <0018> "
    048d : 93a0 ; -- <0019> ign_timeout_len_jf = ([rpm_to_jf 50])
    048e : 36b0 ; -- <0019> "
-- normally puff length is not touched by an init func.
-- this one does it because it's the beginning of a crank cycle, and puff length
-- should be enabled for the first puff.  otherwise the first puff would be missed.
    048f : 6600 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_hi = 0
    0490 : 6a92 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_ad_lo = 146
    0491 : 5fa0 ; -- <0023> ram $ram_next_puff_len_us = $crank_min_puff_len_us -- av_write_data = 12000
    0492 : 2ee0 ; -- <0023> "
    0493 : 97a0 ; -- <0024> puff_len_us = $crank_min_puff_len_us
    0494 : 2ee0 ; -- <0024> "
-- clear ignition history again to eliminate samples where the motor kept spinning after switching from plan_run to plan_stop.
    0495 : fba0 ; -- <0026> callx  clear_ign_history
    0496 : 088f ; -- <0026> "
    0497 : fc00 ; -- <0026> "

-- memorize state.
    0498 : 6600 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_hi = 0
    0499 : 6a8a ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_ad_lo = 138
    049a : 5fa0 ; -- <0029> ram $ram_plan_name = :plan_name_crank -- av_write_data = :plan_name_crank
    049b : 0480 ; -- <0029> "
    049c : 6600 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_hi = 0
    049d : 6a8c ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_ad_lo = 140
    049e : 5fa0 ; -- <0030> ram $ram_puff_len_func = :puff_len_crank -- av_write_data = :puff_len_crank
    049f : 04ab ; -- <0030> "
    04a0 : 6600 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_hi = 0
    04a1 : 6a8e ; -- <0031> ram $ram_transition_func = :leave_crank -- av_ad_lo = 142
    04a2 : 5fa0 ; -- <0031> ram $ram_transition_func = :leave_crank -- av_write_data = :leave_crank
    04a3 : 04c9 ; -- <0031> "
    04a4 : 6600 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_hi = 0
    04a5 : 6a90 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_ad_lo = 144
    04a6 : 5fa0 ; -- <0032> ram $ram_destroy_plan_func = :destroy_plan_crank -- av_write_data = :destroy_plan_crank
    04a7 : 04aa ; -- <0032> "

    04a8 : f80c ; -- <0034> pop rtna -- func init_plan_crank
    04a9 : fc00 ; -- <0034> swapra = nop

-- ######## func destroy_plan_crank -- = 0x04aa


    04aa : fc00 ; -- <0037> swapra = nop

-- ######## func puff_len_crank -- = 0x04ab
    04ab : 303e ; -- <0054> push rtna -- func puff_len_crank

    04ac : 6600 ; -- <0039> ram a = $ram_puff_count -- av_ad_hi = 0
    04ad : 6a94 ; -- <0039> ram a = $ram_puff_count -- av_ad_lo = 148
    04ae : 0017 ; -- <0039> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    04af : 0018 ; -- <0039> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    04b0 : 0602 ; -- <0040> b = $crank_max_puffs
    04b1 : e006 ; -- <0041> br gt :puff_limit
    04b2 : 04c0 ; -- <0041> "
-- linear escalation from min to max puff length, at a slope of crank_incr_us_per_puff.
    04b3 : 07a0 ; -- <0043> b = $crank_incr_us_per_puff
    04b4 : 0bb8 ; -- <0043> "
    04b5 : fba0 ; -- <0044> call :multiply
    04b6 : 0180 ; -- <0044> "
    04b7 : fc00 ; -- <0044> "
    04b8 : 07a0 ; -- <0045> b = $crank_min_puff_len_us
    04b9 : 2ee0 ; -- <0045> "
    04ba : 6600 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_hi = 0
    04bb : 6a92 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_ad_lo = 146
    04bc : c800 ; -- <0046> ram $ram_next_puff_len_us = a+b -- av_write_data = a+b
    04bd : 5f00 ; -- <0046> "
    04be : e00f ; -- <0047> jmp :done
    04bf : 04c7 ; -- <0047> "
-- :puff_limit -- = 0x04c0
-- prevent the puff counter from going higher & eventually rolling over.
    04c0 : 6600 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_hi = 0
    04c1 : 6a94 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_ad_lo = 148
    04c2 : 5e02 ; -- <0050> ram $ram_puff_count = $crank_max_puffs -- av_write_data = 2
-- accept max puff len.
    04c3 : 6600 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_hi = 0
    04c4 : 6a92 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_ad_lo = 146
    04c5 : 5fa0 ; -- <0052> ram $ram_next_puff_len_us = $crank_max_puff_len_us -- av_write_data = 20000
    04c6 : 4e20 ; -- <0052> "
-- :done -- = 0x04c7

    04c7 : f80c ; -- <0055> pop rtna -- func puff_len_crank
    04c8 : fc00 ; -- <0055> swapra = nop

-- ######## func leave_crank -- = 0x04c9
    04c9 : 303e ; -- <0071> push rtna -- func leave_crank

    04ca : fba0 ; -- <0057> callx  check_engine_stop  a
    04cb : 0cc6 ; -- <0057> "
    04cc : fc00 ; -- <0057> "
    04cd : 0008 ; -- <0057> a = pa
    04ce : e400 ; -- <0058> bn az :done
    04cf : 04e4 ; -- <0058> "

-- transition to warmup if RPM exceeds crank_success_rpm.
    04d0 : 6600 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_hi = 0
    04d1 : 6a80 ; -- <0061> ram a = $ram_rpm_valid -- av_ad_lo = 128
    04d2 : 0017 ; -- <0061> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    04d3 : 0018 ; -- <0061> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    04d4 : e000 ; -- <0062> br az :stay
    04d5 : 04e4 ; -- <0062> "
    04d6 : 6600 ; -- <0063> ram a = $ram_avg_rpm -- av_ad_hi = 0
    04d7 : 6a7e ; -- <0063> ram a = $ram_avg_rpm -- av_ad_lo = 126
    04d8 : 0017 ; -- <0063> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    04d9 : 0018 ; -- <0063> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle
    04da : 07a0 ; -- <0064> b = $crank_success_rpm
    04db : 0320 ; -- <0064> "
    04dc : e005 ; -- <0065> br lt :stay
    04dd : 04e4 ; -- <0065> "
    04de : fba0 ; -- <0066> callx  destroy_plan_crank
    04df : 04aa ; -- <0066> "
    04e0 : fc00 ; -- <0066> "
    04e1 : fba0 ; -- <0067> callx  init_plan_run
    04e2 : 052d ; -- <0067> "
    04e3 : fc00 ; -- <0067> "
-- :stay -- = 0x04e4

-- :done -- = 0x04e4

    04e4 : f80c ; -- <0072> pop rtna -- func leave_crank
    04e5 : fc00 ; -- <0072> swapra = nop


-- :plan_name_run -- = 0x04e6
-- "RN\x0"
    04e6 : 4e52 ; -- <0002> NR
    04e7 : 0000 ; -- <0002>   


-- 0.5 to 2.0 trim factor equivalent.









-- ######## func trim_lean_cmd -- = 0x04e8

    04e8 : 6600 ; -- <0037> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    04e9 : 6aac ; -- <0037> ram a = $ram_run_manual_trim -- av_ad_lo = 172
    04ea : 0017 ; -- <0037> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    04eb : 0018 ; -- <0037> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    04ec : 0000 ; -- <0042> a = a
    04ed : 0600 ; -- <0042> b = 0

    04ee : e407 ; -- <0038> bn eq :else_1262
    04ef : 04f2 ; -- <0038> "


    04f0 : e00f ; -- <0040> jmp :end_1262
    04f1 : 04f8 ; -- <0040> "

    04f2 : 07a0 ; -- <0041> b = ([negate $run_manual_trim_step])
    04f3 : ff40 ; -- <0041> "
    04f4 : 6600 ; -- <0042> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    04f5 : 6aac ; -- <0042> ram $ram_run_manual_trim = a+b -- av_ad_lo = 172
    04f6 : c800 ; -- <0042> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    04f7 : 5f00 ; -- <0042> "


    04f8 : fc00 ; -- <0044> swapra = nop

-- ######## func trim_rich_cmd -- = 0x04f9

    04f9 : 6600 ; -- <0046> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    04fa : 6aac ; -- <0046> ram a = $ram_run_manual_trim -- av_ad_lo = 172
    04fb : 0017 ; -- <0046> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    04fc : 0018 ; -- <0046> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    04fd : 0000 ; -- <0051> a = a
    04fe : 07a0 ; -- <0051> b = 800
    04ff : 0320 ; -- <0051> "

    0500 : e406 ; -- <0047> bn gt :else_1280
    0501 : 0504 ; -- <0047> "


    0502 : e00f ; -- <0049> jmp :end_1280
    0503 : 0509 ; -- <0049> "

    0504 : 06c0 ; -- <0050> b = $run_manual_trim_step
    0505 : 6600 ; -- <0051> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    0506 : 6aac ; -- <0051> ram $ram_run_manual_trim = a+b -- av_ad_lo = 172
    0507 : c800 ; -- <0051> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    0508 : 5f00 ; -- <0051> "


    0509 : fc00 ; -- <0053> swapra = nop

-- ######## func trim_2lean_cmd -- = 0x050a

    050a : 6600 ; -- <0055> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    050b : 6aac ; -- <0055> ram a = $ram_run_manual_trim -- av_ad_lo = 172
    050c : 0017 ; -- <0055> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    050d : 0018 ; -- <0055> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    050e : 0000 ; -- <0060> a = a
    050f : 0600 ; -- <0060> b = 0

    0510 : e407 ; -- <0056> bn eq :else_1296
    0511 : 0514 ; -- <0056> "


    0512 : e00f ; -- <0058> jmp :end_1296
    0513 : 051a ; -- <0058> "

    0514 : 07a0 ; -- <0059> b = ([negate [expr $run_manual_trim_step * 8]])
    0515 : fa00 ; -- <0059> "
    0516 : 6600 ; -- <0060> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    0517 : 6aac ; -- <0060> ram $ram_run_manual_trim = a+b -- av_ad_lo = 172
    0518 : c800 ; -- <0060> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    0519 : 5f00 ; -- <0060> "


    051a : fc00 ; -- <0062> swapra = nop

-- ######## func trim_2rich_cmd -- = 0x051b

    051b : 6600 ; -- <0064> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    051c : 6aac ; -- <0064> ram a = $ram_run_manual_trim -- av_ad_lo = 172
    051d : 0017 ; -- <0064> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    051e : 0018 ; -- <0064> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle

    051f : 0000 ; -- <0069> a = a
    0520 : 07a0 ; -- <0069> b = 800
    0521 : 0320 ; -- <0069> "

    0522 : e406 ; -- <0065> bn gt :else_1314
    0523 : 0526 ; -- <0065> "


    0524 : e00f ; -- <0067> jmp :end_1314
    0525 : 052c ; -- <0067> "

    0526 : 07a0 ; -- <0068> b = ($run_manual_trim_step * 8)
    0527 : 0600 ; -- <0068> "
    0528 : 6600 ; -- <0069> ram $ram_run_manual_trim = a+b -- av_ad_hi = 0
    0529 : 6aac ; -- <0069> ram $ram_run_manual_trim = a+b -- av_ad_lo = 172
    052a : c800 ; -- <0069> ram $ram_run_manual_trim = a+b -- av_write_data = a+b
    052b : 5f00 ; -- <0069> "


    052c : fc00 ; -- <0071> swapra = nop

-- ######## func init_plan_run -- = 0x052d

-- set up the run plan.
-- this code is repeated each crank cycle, so don't depend on RAM already being 0.
    052d : 6600 ; -- <0075> ram $ram_maf_valid = 0 -- av_ad_hi = 0
    052e : 6a98 ; -- <0075> ram $ram_maf_valid = 0 -- av_ad_lo = 152
    052f : 5e00 ; -- <0075> ram $ram_maf_valid = 0 -- av_write_data = 0
    0530 : 6600 ; -- <0076> ram $ram_afrc_maf_row_idx = 0 -- av_ad_hi = 0
    0531 : 6a9e ; -- <0076> ram $ram_afrc_maf_row_idx = 0 -- av_ad_lo = 158
    0532 : 5e00 ; -- <0076> ram $ram_afrc_maf_row_idx = 0 -- av_write_data = 0
    0533 : 6600 ; -- <0077> ram $ram_afrc_rpm_col_idx = 0 -- av_ad_hi = 0
    0534 : 6aa0 ; -- <0077> ram $ram_afrc_rpm_col_idx = 0 -- av_ad_lo = 160
    0535 : 5e00 ; -- <0077> ram $ram_afrc_rpm_col_idx = 0 -- av_write_data = 0
    0536 : 6600 ; -- <0078> ram $ram_block_temp_map_idx = 0 -- av_ad_hi = 0
    0537 : 6aa2 ; -- <0078> ram $ram_block_temp_map_idx = 0 -- av_ad_lo = 162
    0538 : 5e00 ; -- <0078> ram $ram_block_temp_map_idx = 0 -- av_write_data = 0
    0539 : 6600 ; -- <0079> ram $ram_block_temp_trim = $trim_unity -- av_ad_hi = 0
    053a : 6aa4 ; -- <0079> ram $ram_block_temp_trim = $trim_unity -- av_ad_lo = 164
    053b : 5fa0 ; -- <0079> ram $ram_block_temp_trim = $trim_unity -- av_write_data = 8192
    053c : 2000 ; -- <0079> "
    053d : 6600 ; -- <0080> ram $ram_afterstart_map_idx = 0 -- av_ad_hi = 0
    053e : 6aa6 ; -- <0080> ram $ram_afterstart_map_idx = 0 -- av_ad_lo = 166
    053f : 5e00 ; -- <0080> ram $ram_afterstart_map_idx = 0 -- av_write_data = 0
    0540 : 6600 ; -- <0081> ram $ram_afterstart_trim = $trim_unity -- av_ad_hi = 0
    0541 : 6aa8 ; -- <0081> ram $ram_afterstart_trim = $trim_unity -- av_ad_lo = 168
    0542 : 5fa0 ; -- <0081> ram $ram_afterstart_trim = $trim_unity -- av_write_data = 8192
    0543 : 2000 ; -- <0081> "
    0544 : 6600 ; -- <0082> ram $ram_o2_trim = $trim_unity -- av_ad_hi = 0
    0545 : 6aaa ; -- <0082> ram $ram_o2_trim = $trim_unity -- av_ad_lo = 170
    0546 : 5fa0 ; -- <0082> ram $ram_o2_trim = $trim_unity -- av_write_data = 8192
    0547 : 2000 ; -- <0082> "
    0548 : 6600 ; -- <0083> ram $ram_puff_count = 0 -- av_ad_hi = 0
    0549 : 6a94 ; -- <0083> ram $ram_puff_count = 0 -- av_ad_lo = 148
    054a : 5e00 ; -- <0083> ram $ram_puff_count = 0 -- av_write_data = 0
    054b : 6600 ; -- <0084> ram $ram_run_manual_trim = $trim_unity -- av_ad_hi = 0
    054c : 6aac ; -- <0084> ram $ram_run_manual_trim = $trim_unity -- av_ad_lo = 172
    054d : 5fa0 ; -- <0084> ram $ram_run_manual_trim = $trim_unity -- av_write_data = 8192
    054e : 2000 ; -- <0084> "
    054f : 6600 ; -- <0085> ram $ram_o2_trim = $trim_unity -- av_ad_hi = 0
    0550 : 6aaa ; -- <0085> ram $ram_o2_trim = $trim_unity -- av_ad_lo = 170
    0551 : 5fa0 ; -- <0085> ram $ram_o2_trim = $trim_unity -- av_write_data = 8192
    0552 : 2000 ; -- <0085> "
    0553 : 6600 ; -- <0086> ram $ram_total_trim = 0 -- av_ad_hi = 0
    0554 : 6aae ; -- <0086> ram $ram_total_trim = 0 -- av_ad_lo = 174
    0555 : 5e00 ; -- <0086> ram $ram_total_trim = 0 -- av_write_data = 0

-- memorize state.
    0556 : 6600 ; -- <0089> ram $ram_plan_name = :plan_name_run -- av_ad_hi = 0
    0557 : 6a8a ; -- <0089> ram $ram_plan_name = :plan_name_run -- av_ad_lo = 138
    0558 : 5fa0 ; -- <0089> ram $ram_plan_name = :plan_name_run -- av_write_data = :plan_name_run
    0559 : 04e6 ; -- <0089> "
    055a : 6600 ; -- <0090> ram $ram_puff_len_func = :puff_len_run -- av_ad_hi = 0
    055b : 6a8c ; -- <0090> ram $ram_puff_len_func = :puff_len_run -- av_ad_lo = 140
    055c : 5fa0 ; -- <0090> ram $ram_puff_len_func = :puff_len_run -- av_write_data = :puff_len_run
    055d : 05ac ; -- <0090> "
    055e : 6600 ; -- <0091> ram $ram_transition_func = :leave_run -- av_ad_hi = 0
    055f : 6a8e ; -- <0091> ram $ram_transition_func = :leave_run -- av_ad_lo = 142
    0560 : 5fa0 ; -- <0091> ram $ram_transition_func = :leave_run -- av_write_data = :leave_run
    0561 : 0628 ; -- <0091> "
    0562 : 6600 ; -- <0092> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_hi = 0
    0563 : 6a90 ; -- <0092> ram $ram_destroy_plan_func = :destroy_plan_run -- av_ad_lo = 144
    0564 : 5fa0 ; -- <0092> ram $ram_destroy_plan_func = :destroy_plan_run -- av_write_data = :destroy_plan_run
    0565 : 0567 ; -- <0092> "

    0566 : fc00 ; -- <0094> swapra = nop

-- ######## func destroy_plan_run -- = 0x0567


    0567 : fc00 ; -- <0097> swapra = nop

-- ######## func combine_trim -- = 0x0568
    0568 : 3002 ; -- <0138> push i -- func combine_trim
    0569 : 3003 ; -- <0138> push j -- "
    056a : 3004 ; -- <0138> push x -- "

-- combine the given increment with the given total trim factor, returning
-- the new total trim.  this process is complicated by the decision to keep the
-- 0.5 offset in the integer representation scheme.  that's done in case i ever
-- have to calculate puff without the aid of a hardware multiplier.
-- the process is to add the offset to each argument, multiply them,
-- undo the offsets, and saturate to prevent excess accumulation.
    056b : 0008 ; -- <0105> a = total
    056c : 07a0 ; -- <0106> b = $trim_unity
    056d : 2000 ; -- <0106> "
    056e : c800 ; -- <0107> a = a+b
    056f : 0300 ; -- <0107> "
    0570 : 0809 ; -- <0108> i = increment
    0571 : 0fa0 ; -- <0109> j = $trim_unity
    0572 : 2000 ; -- <0109> "
    0573 : c800 ; -- <0110> b = i+j
    0574 : 0710 ; -- <0110> "
    0575 : c800 ; -- <0111> nop
    0576 : c800 ; -- <0112> nop
    0577 : c800 ; -- <0113> nop
    0578 : c800 ; -- <0114> nop
-- total = product / 16384 = product >> 14
-- this cancels the two offsets that were added prior to the mult.
    0579 : 1011 ; -- <0117> x = product_hi
    057a : 0010 ; -- <0118> a = product_lo
    057b : 0353 ; -- <0119> a = a>>4
    057c : 0353 ; -- <0120> a = a>>4
    057d : 0353 ; -- <0121> a = a>>4
    057e : 0350 ; -- <0122> a = a>>1
    057f : 2350 ; -- <0123> out_total = a>>1
    0580 : 0004 ; -- <0124> a = x
    0581 : 07a0 ; -- <0125> b = 0x3fff
    0582 : 3fff ; -- <0125> "
    0583 : c800 ; -- <0126> a = and
    0584 : 0330 ; -- <0126> "
    0585 : 0351 ; -- <0127> a = a<<1
    0586 : 0351 ; -- <0128> a = a<<1
    0587 : 0408 ; -- <0129> b = out_total
    0588 : c800 ; -- <0130> a = or
    0589 : 0334 ; -- <0130> "
-- subtract the unity offset to get back to the correct integer representation.
    058a : 07a0 ; -- <0132> b = ([negate $trim_unity])
    058b : e000 ; -- <0132> "
    058c : c800 ; -- <0133> out_total = a+b
    058d : 2300 ; -- <0133> "
-- clamp.

    058e : 0008 ; -- <0137> a = out_total
    058f : 07a0 ; -- <0137> b = 24576
    0590 : 6000 ; -- <0137> "

    0591 : e406 ; -- <0135> bn gt :else_1425
    0592 : 0595 ; -- <0135> "

    0593 : 23a0 ; -- <0136> out_total = $trim_double
    0594 : 6000 ; -- <0136> "


    0595 : 100c ; -- <0139> pop x -- func combine_trim
    0596 : 0c0c ; -- <0139> pop j -- "
    0597 : 080c ; -- <0139> pop i -- "
    0598 : fc00 ; -- <0139> swapra = nop

-- ######## func fetch_afrc -- = 0x0599

-- look up Air/Fuel Ratio Correction in AFRC map.
-- index rows by MAF.
    0599 : 0008 ; -- <0143> a = maf_row_idx
    059a : 0610 ; -- <0144> b = $afrc_rpm_cols
    059b : c800 ; -- <0145> nop
    059c : c800 ; -- <0146> nop
    059d : c800 ; -- <0147> nop
    059e : c800 ; -- <0148> nop
    059f : 0410 ; -- <0149> b = product_lo
-- index columns by RPM.
    05a0 : 0009 ; -- <0151> a = rpm_col_idx
    05a1 : c800 ; -- <0152> a = a+b
    05a2 : 0300 ; -- <0152> "

    05a3 : 0351 ; -- <0152> a = a<<1
    05a4 : 0600 ; -- <0152> b = 0
    05a5 : 67a0 ; -- <0152> av_ad_hi = 256
    05a6 : 0100 ; -- <0152> "
    05a7 : 6b00 ; -- <0152> av_ad_lo = ad0
    05a8 : 0417 ; -- <0152> b = av_begin_read

    05a9 : 2018 ; -- <0153> afrc = av_read_data
    05aa : fc00 ; -- <0152> swapra = nop

    05ab : fc00 ; -- <0155> swapra = nop

-- ######## func puff_len_run -- = 0x05ac
    05ac : 3004 ; -- <0238> push x -- func puff_len_run
    05ad : 3007 ; -- <0238> push gb -- "
    05ae : 303e ; -- <0238> push rtna -- "

    05af : 6600 ; -- <0157> ram a = $ram_rpm_valid -- av_ad_hi = 0
    05b0 : 6a80 ; -- <0157> ram a = $ram_rpm_valid -- av_ad_lo = 128
    05b1 : 0017 ; -- <0157> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    05b2 : 0018 ; -- <0157> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle
    05b3 : e000 ; -- <0158> br az :abort
    05b4 : 0624 ; -- <0158> "
    05b5 : 6600 ; -- <0159> ram a = $ram_maf_valid -- av_ad_hi = 0
    05b6 : 6a98 ; -- <0159> ram a = $ram_maf_valid -- av_ad_lo = 152
    05b7 : 0017 ; -- <0159> ram a = $ram_maf_valid -- a = av_write_data -- start read cycle
    05b8 : 0018 ; -- <0159> ram a = $ram_maf_valid -- a = av_read_data -- finish read cycle
    05b9 : e000 ; -- <0160> br az :abort
    05ba : 0624 ; -- <0160> "

-- look up Air/Fuel Ratio Correction in AFRC map.
    05bb : 6600 ; -- <0163> ram pa = $ram_afrc_maf_row_idx -- av_ad_hi = 0
    05bc : 6a9e ; -- <0163> ram pa = $ram_afrc_maf_row_idx -- av_ad_lo = 158
    05bd : 2017 ; -- <0163> ram pa = $ram_afrc_maf_row_idx -- pa = av_write_data -- start read cycle
    05be : 2018 ; -- <0163> ram pa = $ram_afrc_maf_row_idx -- pa = av_read_data -- finish read cycle
    05bf : 6600 ; -- <0164> ram pb = $ram_afrc_rpm_col_idx -- av_ad_hi = 0
    05c0 : 6aa0 ; -- <0164> ram pb = $ram_afrc_rpm_col_idx -- av_ad_lo = 160
    05c1 : 2417 ; -- <0164> ram pb = $ram_afrc_rpm_col_idx -- pb = av_write_data -- start read cycle
    05c2 : 2418 ; -- <0164> ram pb = $ram_afrc_rpm_col_idx -- pb = av_read_data -- finish read cycle
    05c3 : fba0 ; -- <0165> callx fetch_afrc pa pb ga
    05c4 : 0599 ; -- <0165> "
    05c5 : fc00 ; -- <0165> "
    05c6 : 1808 ; -- <0165> ga = pa
-- now ga = total trim factor as integer.

-- apply block temperature trim factor.
    05c7 : 6600 ; -- <0169> ram b = $ram_block_temp_trim -- av_ad_hi = 0
    05c8 : 6aa4 ; -- <0169> ram b = $ram_block_temp_trim -- av_ad_lo = 164
    05c9 : 0417 ; -- <0169> ram b = $ram_block_temp_trim -- b = av_write_data -- start read cycle
    05ca : 0418 ; -- <0169> ram b = $ram_block_temp_trim -- b = av_read_data -- finish read cycle
    05cb : 2006 ; -- <0170> pa = ga
    05cc : 2401 ; -- <0170> pb = b
    05cd : fba0 ; -- <0170> callx combine_trim ga b ga
    05ce : 0568 ; -- <0170> "
    05cf : fc00 ; -- <0170> "
    05d0 : 1808 ; -- <0170> ga = pa

-- apply afterstart trim factor.
    05d1 : fba0 ; -- <0173> callx interpret_puff_count
    05d2 : 0661 ; -- <0173> "
    05d3 : fc00 ; -- <0173> "
    05d4 : 6600 ; -- <0174> ram b = $ram_afterstart_trim -- av_ad_hi = 0
    05d5 : 6aa8 ; -- <0174> ram b = $ram_afterstart_trim -- av_ad_lo = 168
    05d6 : 0417 ; -- <0174> ram b = $ram_afterstart_trim -- b = av_write_data -- start read cycle
    05d7 : 0418 ; -- <0174> ram b = $ram_afterstart_trim -- b = av_read_data -- finish read cycle
    05d8 : 2006 ; -- <0175> pa = ga
    05d9 : 2401 ; -- <0175> pb = b
    05da : fba0 ; -- <0175> callx combine_trim ga b ga
    05db : 0568 ; -- <0175> "
    05dc : fc00 ; -- <0175> "
    05dd : 1808 ; -- <0175> ga = pa

-- apply stoich learning trim factor.
    05de : 6600 ; -- <0178> ram b = $ram_o2_trim -- av_ad_hi = 0
    05df : 6aaa ; -- <0178> ram b = $ram_o2_trim -- av_ad_lo = 170
    05e0 : 0417 ; -- <0178> ram b = $ram_o2_trim -- b = av_write_data -- start read cycle
    05e1 : 0418 ; -- <0178> ram b = $ram_o2_trim -- b = av_read_data -- finish read cycle
    05e2 : 2006 ; -- <0179> pa = ga
    05e3 : 2401 ; -- <0179> pb = b
    05e4 : fba0 ; -- <0179> callx combine_trim ga b ga
    05e5 : 0568 ; -- <0179> "
    05e6 : fc00 ; -- <0179> "
    05e7 : 1808 ; -- <0179> ga = pa

-- apply manual trim factor.
    05e8 : 6600 ; -- <0182> ram b = $ram_run_manual_trim -- av_ad_hi = 0
    05e9 : 6aac ; -- <0182> ram b = $ram_run_manual_trim -- av_ad_lo = 172
    05ea : 0417 ; -- <0182> ram b = $ram_run_manual_trim -- b = av_write_data -- start read cycle
    05eb : 0418 ; -- <0182> ram b = $ram_run_manual_trim -- b = av_read_data -- finish read cycle
    05ec : 2006 ; -- <0183> pa = ga
    05ed : 2401 ; -- <0183> pb = b
    05ee : fba0 ; -- <0183> callx combine_trim ga b ga
    05ef : 0568 ; -- <0183> "
    05f0 : fc00 ; -- <0183> "
    05f1 : 1808 ; -- <0183> ga = pa

-- final multiplication for puff length.
-- (MAF linear flow) * (stoich ratio constant) * (total trim as floating point) = (puff length jf).
-- here the total trim float will have to be represented as a fraction (num/denom).
-- stoich ratio constant (8) (really the conversion factor from linear
-- flow to nominal jf)  is folded into that denominator (16384) at compile time.
-- that makes denom = 2048 = 11 bits.  so:
-- gb = (puff len jf) = (MAF linear flow) * [(total trim) + trim_unity] >> 11
    05f2 : 0006 ; -- <0192> a = ga
    05f3 : 07a0 ; -- <0193> b = $trim_unity
    05f4 : 2000 ; -- <0193> "
    05f5 : c800 ; -- <0194> a = a+b
    05f6 : 0300 ; -- <0194> "
    05f7 : 6600 ; -- <0195> ram b = $ram_maf_flow_hi_res -- av_ad_hi = 0
    05f8 : 6a9c ; -- <0195> ram b = $ram_maf_flow_hi_res -- av_ad_lo = 156
    05f9 : 0417 ; -- <0195> ram b = $ram_maf_flow_hi_res -- b = av_write_data -- start read cycle
    05fa : 0418 ; -- <0195> ram b = $ram_maf_flow_hi_res -- b = av_read_data -- finish read cycle
    05fb : c800 ; -- <0196> nop
    05fc : c800 ; -- <0197> nop
    05fd : c800 ; -- <0198> nop
    05fe : c800 ; -- <0199> nop
-- gb = 32-bit product shifted >> 11.  lower 11 bits of product_hi are
-- explicitly moved to upper 11 bits of gb.
    05ff : 0010 ; -- <0202> a = product_lo
    0600 : 0411 ; -- <0203> b = product_hi
    0601 : 0353 ; -- <0204> a = a>>4
    0602 : 0353 ; -- <0205> a = a>>4
    0603 : 0350 ; -- <0206> a = a>>1
    0604 : 0350 ; -- <0207> a = a>>1
    0605 : 1f50 ; -- <0208> gb = a>>1
    0606 : 0001 ; -- <0209> a = b
    0607 : 0352 ; -- <0210> a = a<<4
    0608 : 0351 ; -- <0211> a = a<<1
    0609 : 0407 ; -- <0212> b = gb
    060a : c800 ; -- <0213> gb = or
    060b : 1f34 ; -- <0213> "

-- clamp the (puff length jf) to sane range.
-- max is the floating duty cycle.  7/8 of puff cycle, or 87.5%.
    060c : 6600 ; -- <0217> ram a = $ram_ign_avg_jf -- av_ad_hi = 0
    060d : 6a7c ; -- <0217> ram a = $ram_ign_avg_jf -- av_ad_lo = 124
    060e : 0017 ; -- <0217> ram a = $ram_ign_avg_jf -- a = av_write_data -- start read cycle
    060f : 0018 ; -- <0217> ram a = $ram_ign_avg_jf -- a = av_read_data -- finish read cycle
    0610 : 0350 ; -- <0218> a = a>>1
    0611 : 0350 ; -- <0219> a = a>>1
    0612 : 0350 ; -- <0220> a = a>>1
    0613 : 0760 ; -- <0221> b = 0xffff
    0614 : c800 ; -- <0222> a = xor
    0615 : 0338 ; -- <0222> "
    0616 : 6600 ; -- <0223> ram b = $ram_ign_avg_jf -- av_ad_hi = 0
    0617 : 6a7c ; -- <0223> ram b = $ram_ign_avg_jf -- av_ad_lo = 124
    0618 : 0417 ; -- <0223> ram b = $ram_ign_avg_jf -- b = av_write_data -- start read cycle
    0619 : 0418 ; -- <0223> ram b = $ram_ign_avg_jf -- b = av_read_data -- finish read cycle
    061a : c800 ; -- <0224> x = a+b
    061b : 1300 ; -- <0224> "

    061c : 0007 ; -- <0227> a = gb
    061d : 0404 ; -- <0227> b = x

    061e : e406 ; -- <0225> bn gt :else_1566
    061f : 0621 ; -- <0225> "

    0620 : 1c04 ; -- <0226> gb = x

-- min is the safety amount to keep motor running and maybe prevent leaning damage.
--patch: don't know a proper minimum.

-- shut off puff during closed throttle engine braking.
--patch: not implemented.

-- memorize total puff.
    0621 : 6600 ; -- <0235> ram $ram_next_puff_len_us = ga -- av_ad_hi = 0
    0622 : 6a92 ; -- <0235> ram $ram_next_puff_len_us = ga -- av_ad_lo = 146
    0623 : 5c06 ; -- <0235> ram $ram_next_puff_len_us = ga -- av_write_data = ga

-- :abort -- = 0x0624

    0624 : f80c ; -- <0239> pop rtna -- func puff_len_run
    0625 : 1c0c ; -- <0239> pop gb -- "
    0626 : 100c ; -- <0239> pop x -- "
    0627 : fc00 ; -- <0239> swapra = nop

-- ######## func leave_run -- = 0x0628
    0628 : 303e ; -- <0242> push rtna -- func leave_run

    0629 : fba0 ; -- <0241> callx  check_engine_stop  pa
    062a : 0cc6 ; -- <0241> "
    062b : fc00 ; -- <0241> "

    062c : f80c ; -- <0243> pop rtna -- func leave_run
    062d : fc00 ; -- <0243> swapra = nop

-- ######## func interpret_block_temp -- = 0x062e
    062e : 3002 ; -- <0257> push i -- func interpret_block_temp
    062f : 3007 ; -- <0257> push gb -- "

-- look up block temperature map trim factor.
    0630 : 0202 ; -- <0246> a = 2

    0631 : 0351 ; -- <0246> a = a<<1
    0632 : 0616 ; -- <0246> b = 22
    0633 : 6600 ; -- <0246> av_ad_hi = 0
    0634 : 6b00 ; -- <0246> av_ad_lo = ad0
    0635 : 0417 ; -- <0246> b = av_begin_read

    0636 : 1c18 ; -- <0246> gb = av_read_data
    0637 : 0a00 ; -- <0255> i = 0
-- :loop_1591 -- = 0x0638

    0638 : 0002 ; -- <0247> a = i

    0639 : 0351 ; -- <0247> a = a<<1
    063a : 07a0 ; -- <0247> b = 2592
    063b : 0a20 ; -- <0247> "
    063c : 67a0 ; -- <0247> av_ad_hi = 256
    063d : 0100 ; -- <0247> "
    063e : 6b00 ; -- <0247> av_ad_lo = ad0
    063f : 0417 ; -- <0247> b = av_begin_read

    0640 : 0418 ; -- <0247> b = av_read_data

    0641 : 0001 ; -- <0253> a = b
    0642 : 0407 ; -- <0253> b = gb

    0643 : e406 ; -- <0248> bn gt :else_1603
    0644 : 0656 ; -- <0248> "

    0645 : 6600 ; -- <0249> ram $ram_block_temp_map_idx = i -- av_ad_hi = 0
    0646 : 6aa2 ; -- <0249> ram $ram_block_temp_map_idx = i -- av_ad_lo = 162
    0647 : 5c02 ; -- <0249> ram $ram_block_temp_map_idx = i -- av_write_data = i
    0648 : 0002 ; -- <0250> a = i

    0649 : 0351 ; -- <0250> a = a<<1
    064a : 07a0 ; -- <0250> b = 2720
    064b : 0aa0 ; -- <0250> "
    064c : 67a0 ; -- <0250> av_ad_hi = 256
    064d : 0100 ; -- <0250> "
    064e : 6b00 ; -- <0250> av_ad_lo = ad0
    064f : 0417 ; -- <0250> b = av_begin_read

    0650 : 0418 ; -- <0250> b = av_read_data
    0651 : 6600 ; -- <0251> ram $ram_block_temp_trim = b -- av_ad_hi = 0
    0652 : 6aa4 ; -- <0251> ram $ram_block_temp_trim = b -- av_ad_lo = 164
    0653 : 5c01 ; -- <0251> ram $ram_block_temp_trim = b -- av_write_data = b
    0654 : e00f ; -- <0252> jmp :temp_done
    0655 : 065e ; -- <0252> "



    0656 : 0002 ; -- <0255> a = i
    0657 : 0601 ; -- <0255> b = 1
    0658 : c800 ; -- <0255> i = a+b
    0659 : 0b00 ; -- <0255> "


    065a : 0002 ; -- <0255> a = i
    065b : 0640 ; -- <0255> b = $block_temp_num_cells
    065c : e005 ; -- <0255> br lt :loop_1591
    065d : 0638 ; -- <0255> "

-- :end_1591 -- = 0x065e
-- :temp_done -- = 0x065e

    065e : 1c0c ; -- <0258> pop gb -- func interpret_block_temp
    065f : 080c ; -- <0258> pop i -- "
    0660 : fc00 ; -- <0258> swapra = nop

-- ######## func interpret_puff_count -- = 0x0661
    0661 : 3002 ; -- <0275> push i -- func interpret_puff_count
    0662 : 3003 ; -- <0275> push j -- "
    0663 : 3007 ; -- <0275> push gb -- "

-- look up afterstart trim factor.
    0664 : 6600 ; -- <0261> ram gb = $ram_puff_count -- av_ad_hi = 0
    0665 : 6a94 ; -- <0261> ram gb = $ram_puff_count -- av_ad_lo = 148
    0666 : 1c17 ; -- <0261> ram gb = $ram_puff_count -- gb = av_write_data -- start read cycle
    0667 : 1c18 ; -- <0261> ram gb = $ram_puff_count -- gb = av_read_data -- finish read cycle
    0668 : 0a00 ; -- <0271> i = 0
-- :loop_1640 -- = 0x0669

    0669 : 0002 ; -- <0262> a = i

    066a : 0351 ; -- <0262> a = a<<1
    066b : 07a0 ; -- <0262> b = 2848
    066c : 0b20 ; -- <0262> "
    066d : 67a0 ; -- <0262> av_ad_hi = 256
    066e : 0100 ; -- <0262> "
    066f : 6b00 ; -- <0262> av_ad_lo = ad0
    0670 : 0417 ; -- <0262> b = av_begin_read

    0671 : 0418 ; -- <0262> b = av_read_data

    0672 : 0001 ; -- <0269> a = b
    0673 : 0407 ; -- <0269> b = gb

    0674 : e406 ; -- <0263> bn gt :else_1652
    0675 : 0689 ; -- <0263> "

    0676 : 0f60 ; -- <0264> j = -1
    0677 : 6600 ; -- <0265> ram $ram_afterstart_map_idx = i+j -- av_ad_hi = 0
    0678 : 6aa6 ; -- <0265> ram $ram_afterstart_map_idx = i+j -- av_ad_lo = 166
    0679 : c800 ; -- <0265> ram $ram_afterstart_map_idx = i+j -- av_write_data = i+j
    067a : 5f10 ; -- <0265> "
    067b : 0002 ; -- <0266> a = i

    067c : 0351 ; -- <0266> a = a<<1
    067d : 07a0 ; -- <0266> b = 2868
    067e : 0b34 ; -- <0266> "
    067f : 67a0 ; -- <0266> av_ad_hi = 256
    0680 : 0100 ; -- <0266> "
    0681 : 6b00 ; -- <0266> av_ad_lo = ad0
    0682 : 0417 ; -- <0266> b = av_begin_read

    0683 : 0418 ; -- <0266> b = av_read_data
    0684 : 6600 ; -- <0267> ram $ram_afterstart_trim = b -- av_ad_hi = 0
    0685 : 6aa8 ; -- <0267> ram $ram_afterstart_trim = b -- av_ad_lo = 168
    0686 : 5c01 ; -- <0267> ram $ram_afterstart_trim = b -- av_write_data = b
    0687 : e00f ; -- <0268> jmp :done
    0688 : 069d ; -- <0268> "



    0689 : 0002 ; -- <0271> a = i
    068a : 0601 ; -- <0271> b = 1
    068b : c800 ; -- <0271> i = a+b
    068c : 0b00 ; -- <0271> "


    068d : 0002 ; -- <0271> a = i
    068e : 060a ; -- <0271> b = $afterstart_num_cells
    068f : e005 ; -- <0271> br lt :loop_1640
    0690 : 0669 ; -- <0271> "

-- :end_1640 -- = 0x0691
    0691 : 0209 ; -- <0272> a = 9

    0692 : 0351 ; -- <0272> a = a<<1
    0693 : 07a0 ; -- <0272> b = 2868
    0694 : 0b34 ; -- <0272> "
    0695 : 67a0 ; -- <0272> av_ad_hi = 256
    0696 : 0100 ; -- <0272> "
    0697 : 6b00 ; -- <0272> av_ad_lo = ad0
    0698 : 0417 ; -- <0272> b = av_begin_read

    0699 : 0418 ; -- <0272> b = av_read_data
    069a : 6600 ; -- <0273> ram $ram_afterstart_trim = b -- av_ad_hi = 0
    069b : 6aa8 ; -- <0273> ram $ram_afterstart_trim = b -- av_ad_lo = 168
    069c : 5c01 ; -- <0273> ram $ram_afterstart_trim = b -- av_write_data = b
-- :done -- = 0x069d

    069d : 1c0c ; -- <0276> pop gb -- func interpret_puff_count
    069e : 0c0c ; -- <0276> pop j -- "
    069f : 080c ; -- <0276> pop i -- "
    06a0 : fc00 ; -- <0276> swapra = nop

-- ######## func dump_afrc_cmd -- = 0x06a1
    06a1 : 3002 ; -- <0300> push i -- func dump_afrc_cmd
    06a2 : 3004 ; -- <0300> push x -- "
    06a3 : 3006 ; -- <0300> push ga -- "
    06a4 : 3007 ; -- <0300> push gb -- "
    06a5 : 303e ; -- <0300> push rtna -- "

    06a6 : 020d ; -- <0278> a = 13 -- puteol
    06a7 : fba0 ; -- <0278> puteol
    06a8 : 00ab ; -- <0278> "
    06a9 : fc00 ; -- <0278> "
    06aa : 020a ; -- <0278> a = 10 -- puteol
    06ab : fba0 ; -- <0278> puteol
    06ac : 00ab ; -- <0278> "
    06ad : fc00 ; -- <0278> "
    06ae : 6600 ; -- <0279> ram ga = $ram_afrc_maf_row_idx -- av_ad_hi = 0
    06af : 6a9e ; -- <0279> ram ga = $ram_afrc_maf_row_idx -- av_ad_lo = 158
    06b0 : 1817 ; -- <0279> ram ga = $ram_afrc_maf_row_idx -- ga = av_write_data -- start read cycle
    06b1 : 1818 ; -- <0279> ram ga = $ram_afrc_maf_row_idx -- ga = av_read_data -- finish read cycle
    06b2 : 6600 ; -- <0280> ram gb = $ram_afrc_rpm_col_idx -- av_ad_hi = 0
    06b3 : 6aa0 ; -- <0280> ram gb = $ram_afrc_rpm_col_idx -- av_ad_lo = 160
    06b4 : 1c17 ; -- <0280> ram gb = $ram_afrc_rpm_col_idx -- gb = av_write_data -- start read cycle
    06b5 : 1c18 ; -- <0280> ram gb = $ram_afrc_rpm_col_idx -- gb = av_read_data -- finish read cycle
    06b6 : 67a0 ; -- <0281> av_ad_hi = ([ram_to_int $ram_afrc_map] >> 16)
    06b7 : 0100 ; -- <0281> "
    06b8 : 6a00 ; -- <0282> av_ad_lo = ([ram_to_int $ram_afrc_map] & 0xffff)
    06b9 : 0a00 ; -- <0299> i = 0
-- :loop_1721 -- = 0x06ba

    06ba : 1200 ; -- <0296> x = 0
-- :loop_1722 -- = 0x06bb

    06bb : 0017 ; -- <0283> a = av_begin_read
    06bc : 0018 ; -- <0284> a = av_read_data
    06bd : fba0 ; -- <0285> call put4x
    06be : 00d3 ; -- <0285> "
    06bf : fc00 ; -- <0285> "

    06c0 : 0004 ; -- <0290> a = x
    06c1 : 0407 ; -- <0290> b = gb

    06c2 : e407 ; -- <0286> bn eq :else_1730
    06c3 : 06ca ; -- <0286> "

    06c4 : 023c ; -- <0287> a = 60 -- putasc "<"
    06c5 : fba0 ; -- <0287> putasc "<"
    06c6 : 00ab ; -- <0287> "
    06c7 : fc00 ; -- <0287> "

    06c8 : e00f ; -- <0289> jmp :end_1730
    06c9 : 06ce ; -- <0289> "

    06ca : 0220 ; -- <0290> a = 32 -- putasc " "
    06cb : fba0 ; -- <0290> putasc " "
    06cc : 00ab ; -- <0290> "
    06cd : fc00 ; -- <0290> "

    06ce : 0220 ; -- <0291> a = 32 -- putasc " "
    06cf : fba0 ; -- <0291> putasc " "
    06d0 : 00ab ; -- <0291> "
    06d1 : fc00 ; -- <0291> "
    06d2 : 001a ; -- <0292> a = av_ad_lo
    06d3 : 0602 ; -- <0293> b = 2
    06d4 : c800 ; -- <0294> av_ad_lo = a+b
    06d5 : 6b00 ; -- <0294> "


    06d6 : 0004 ; -- <0296> a = x
    06d7 : 0601 ; -- <0296> b = 1
    06d8 : c800 ; -- <0296> x = a+b
    06d9 : 1300 ; -- <0296> "


    06da : 0004 ; -- <0296> a = x
    06db : 0610 ; -- <0296> b = $afrc_rpm_cols
    06dc : e005 ; -- <0296> br lt :loop_1722
    06dd : 06bb ; -- <0296> "

-- :end_1722 -- = 0x06de
    06de : 020d ; -- <0297> a = 13 -- puteol
    06df : fba0 ; -- <0297> puteol
    06e0 : 00ab ; -- <0297> "
    06e1 : fc00 ; -- <0297> "
    06e2 : 020a ; -- <0297> a = 10 -- puteol
    06e3 : fba0 ; -- <0297> puteol
    06e4 : 00ab ; -- <0297> "
    06e5 : fc00 ; -- <0297> "


    06e6 : 0002 ; -- <0299> a = i
    06e7 : 0601 ; -- <0299> b = 1
    06e8 : c800 ; -- <0299> i = a+b
    06e9 : 0b00 ; -- <0299> "


    06ea : 0002 ; -- <0299> a = i
    06eb : 0640 ; -- <0299> b = $afrc_maf_rows
    06ec : e005 ; -- <0299> br lt :loop_1721
    06ed : 06ba ; -- <0299> "

-- :end_1721 -- = 0x06ee

    06ee : f80c ; -- <0301> pop rtna -- func dump_afrc_cmd
    06ef : 1c0c ; -- <0301> pop gb -- "
    06f0 : 180c ; -- <0301> pop ga -- "
    06f1 : 100c ; -- <0301> pop x -- "
    06f2 : 080c ; -- <0301> pop i -- "
    06f3 : fc00 ; -- <0301> swapra = nop



-- #########################################################################
-- :main -- = 0x06f4
    06f4 : 03a0 ; -- <0227> a = :boot_msg
    06f5 : 009b ; -- <0227> "
    06f6 : fba0 ; -- <0228> call :print_nt
    06f7 : 015f ; -- <0228> "
    06f8 : fc00 ; -- <0228> "

-- clear the first 64k of RAM.
    06f9 : 6600 ; -- <0231> av_ad_hi = 0
    06fa : fba0 ; -- <0231> callx  clear_ram_page  0
    06fb : 0bb8 ; -- <0231> "
    06fc : fc00 ; -- <0231> "



-- write has 6 cases:
--  offset in a.
--  offset in some other register.
--  offset is constant.
    06fd : 0231 ; -- <0233> a = 0x31
    06fe : 1261 ; -- <0233> x = 0x61
    06ff : 3004 ; -- <0233> push x -- push x

    0700 : 0351 ; -- <0233> a = a<<1
    0701 : 07a0 ; -- <0233> b = 8192
    0702 : 2000 ; -- <0233> "
    0703 : 6601 ; -- <0233> av_ad_hi = 1
    0704 : 6b00 ; -- <0233> av_ad_lo = ad0

    0705 : 5c0c ; -- <0233> pop av_write_data -- pop av_write_data
    0706 : 1632 ; -- <0233> y = 0x32
    0707 : 1262 ; -- <0233> x = 0x62
    0708 : 3004 ; -- <0233> push x -- push x
    0709 : 0005 ; -- <0233> a = y

    070a : 0351 ; -- <0233> a = a<<1
    070b : 07a0 ; -- <0233> b = 8192
    070c : 2000 ; -- <0233> "
    070d : 6601 ; -- <0233> av_ad_hi = 1
    070e : 6b00 ; -- <0233> av_ad_lo = ad0

    070f : 5c0c ; -- <0233> pop av_write_data -- pop av_write_data
    0710 : 1263 ; -- <0233> x = 0x63
    0711 : 3004 ; -- <0233> push x -- push x
    0712 : 0233 ; -- <0233> a = 0x33

    0713 : 0351 ; -- <0233> a = a<<1
    0714 : 07a0 ; -- <0233> b = 8192
    0715 : 2000 ; -- <0233> "
    0716 : 6601 ; -- <0233> av_ad_hi = 1
    0717 : 6b00 ; -- <0233> av_ad_lo = ad0

    0718 : 5c0c ; -- <0233> pop av_write_data -- pop av_write_data
-- and those 3 again, with data content as a constant instead of a register.
    0719 : 0241 ; -- <0233> a = 0x41

    071a : 0351 ; -- <0233> a = a<<1
    071b : 07a0 ; -- <0233> b = 8192
    071c : 2000 ; -- <0233> "
    071d : 6601 ; -- <0233> av_ad_hi = 1
    071e : 6b00 ; -- <0233> av_ad_lo = ad0

    071f : 5e71 ; -- <0233> av_write_data = 0x71
    0720 : 1642 ; -- <0233> y = 0x42
    0721 : 0005 ; -- <0233> a = y

    0722 : 0351 ; -- <0233> a = a<<1
    0723 : 07a0 ; -- <0233> b = 8192
    0724 : 2000 ; -- <0233> "
    0725 : 6601 ; -- <0233> av_ad_hi = 1
    0726 : 6b00 ; -- <0233> av_ad_lo = ad0

    0727 : 5e72 ; -- <0233> av_write_data = 0x72
    0728 : 0243 ; -- <0233> a = 0x43

    0729 : 0351 ; -- <0233> a = a<<1
    072a : 07a0 ; -- <0233> b = 8192
    072b : 2000 ; -- <0233> "
    072c : 6601 ; -- <0233> av_ad_hi = 1
    072d : 6b00 ; -- <0233> av_ad_lo = ad0

    072e : 5e73 ; -- <0233> av_write_data = 0x73

-- read has the same 3 cases of offset.
-- test all those using the first case of write.
    072f : 0231 ; -- <0233> a = 0x31

    0730 : 0351 ; -- <0233> a = a<<1
    0731 : 07a0 ; -- <0233> b = 8192
    0732 : 2000 ; -- <0233> "
    0733 : 6601 ; -- <0233> av_ad_hi = 1
    0734 : 6b00 ; -- <0233> av_ad_lo = ad0
    0735 : 0417 ; -- <0233> b = av_begin_read

    0736 : 0818 ; -- <0233> i = av_read_data

    0737 : 0002 ; -- <0233> a = i
    0738 : 0661 ; -- <0233> b = 0x61

    0739 : e007 ; -- <0231> br eq :else_1849
    073a : 073d ; -- <0231> "

    073b : e00f ; -- <0232> jmp :struct_test_error
    073c : 07cc ; -- <0232> "

    073d : 1631 ; -- <0233> y = 0x31
    073e : 0005 ; -- <0233> a = y

    073f : 0351 ; -- <0233> a = a<<1
    0740 : 07a0 ; -- <0233> b = 8192
    0741 : 2000 ; -- <0233> "
    0742 : 6601 ; -- <0233> av_ad_hi = 1
    0743 : 6b00 ; -- <0233> av_ad_lo = ad0
    0744 : 0417 ; -- <0233> b = av_begin_read

    0745 : 0818 ; -- <0233> i = av_read_data

    0746 : 0002 ; -- <0233> a = i
    0747 : 0661 ; -- <0233> b = 0x61

    0748 : e007 ; -- <0231> br eq :else_1864
    0749 : 074c ; -- <0231> "

    074a : e00f ; -- <0232> jmp :struct_test_error
    074b : 07cc ; -- <0232> "

    074c : 0231 ; -- <0233> a = 0x31

    074d : 0351 ; -- <0233> a = a<<1
    074e : 07a0 ; -- <0233> b = 8192
    074f : 2000 ; -- <0233> "
    0750 : 6601 ; -- <0233> av_ad_hi = 1
    0751 : 6b00 ; -- <0233> av_ad_lo = ad0
    0752 : 0417 ; -- <0233> b = av_begin_read

    0753 : 0818 ; -- <0233> i = av_read_data

    0754 : 0002 ; -- <0233> a = i
    0755 : 0661 ; -- <0233> b = 0x61

    0756 : e007 ; -- <0231> br eq :else_1878
    0757 : 075a ; -- <0231> "

    0758 : e00f ; -- <0232> jmp :struct_test_error
    0759 : 07cc ; -- <0232> "


-- use read to verify all cases of write.
    075a : 0232 ; -- <0233> a = 0x32

    075b : 0351 ; -- <0233> a = a<<1
    075c : 07a0 ; -- <0233> b = 8192
    075d : 2000 ; -- <0233> "
    075e : 6601 ; -- <0233> av_ad_hi = 1
    075f : 6b00 ; -- <0233> av_ad_lo = ad0
    0760 : 0417 ; -- <0233> b = av_begin_read

    0761 : 0818 ; -- <0233> i = av_read_data

    0762 : 0002 ; -- <0233> a = i
    0763 : 0662 ; -- <0233> b = 0x62

    0764 : e007 ; -- <0231> br eq :else_1892
    0765 : 0768 ; -- <0231> "

    0766 : e00f ; -- <0232> jmp :struct_test_error
    0767 : 07cc ; -- <0232> "

    0768 : 0232 ; -- <0233> a = 0x32

    0769 : 0351 ; -- <0233> a = a<<1
    076a : 07a0 ; -- <0233> b = 8192
    076b : 2000 ; -- <0233> "
    076c : 6601 ; -- <0233> av_ad_hi = 1
    076d : 6b00 ; -- <0233> av_ad_lo = ad0
    076e : 0417 ; -- <0233> b = av_begin_read

    076f : 0818 ; -- <0233> i = av_read_data

    0770 : 0002 ; -- <0233> a = i
    0771 : 0662 ; -- <0233> b = 0x62

    0772 : e007 ; -- <0231> br eq :else_1906
    0773 : 0776 ; -- <0231> "

    0774 : e00f ; -- <0232> jmp :struct_test_error
    0775 : 07cc ; -- <0232> "

    0776 : 0233 ; -- <0233> a = 0x33

    0777 : 0351 ; -- <0233> a = a<<1
    0778 : 07a0 ; -- <0233> b = 8192
    0779 : 2000 ; -- <0233> "
    077a : 6601 ; -- <0233> av_ad_hi = 1
    077b : 6b00 ; -- <0233> av_ad_lo = ad0
    077c : 0417 ; -- <0233> b = av_begin_read

    077d : 0818 ; -- <0233> i = av_read_data

    077e : 0002 ; -- <0233> a = i
    077f : 0663 ; -- <0233> b = 0x63

    0780 : e007 ; -- <0231> br eq :else_1920
    0781 : 0784 ; -- <0231> "

    0782 : e00f ; -- <0232> jmp :struct_test_error
    0783 : 07cc ; -- <0232> "

    0784 : 0241 ; -- <0233> a = 0x41

    0785 : 0351 ; -- <0233> a = a<<1
    0786 : 07a0 ; -- <0233> b = 8192
    0787 : 2000 ; -- <0233> "
    0788 : 6601 ; -- <0233> av_ad_hi = 1
    0789 : 6b00 ; -- <0233> av_ad_lo = ad0
    078a : 0417 ; -- <0233> b = av_begin_read

    078b : 0818 ; -- <0233> i = av_read_data

    078c : 0002 ; -- <0233> a = i
    078d : 0671 ; -- <0233> b = 0x71

    078e : e007 ; -- <0231> br eq :else_1934
    078f : 0792 ; -- <0231> "

    0790 : e00f ; -- <0232> jmp :struct_test_error
    0791 : 07cc ; -- <0232> "

    0792 : 0242 ; -- <0233> a = 0x42

    0793 : 0351 ; -- <0233> a = a<<1
    0794 : 07a0 ; -- <0233> b = 8192
    0795 : 2000 ; -- <0233> "
    0796 : 6601 ; -- <0233> av_ad_hi = 1
    0797 : 6b00 ; -- <0233> av_ad_lo = ad0
    0798 : 0417 ; -- <0233> b = av_begin_read

    0799 : 0818 ; -- <0233> i = av_read_data

    079a : 0002 ; -- <0233> a = i
    079b : 0672 ; -- <0233> b = 0x72

    079c : e007 ; -- <0231> br eq :else_1948
    079d : 07a0 ; -- <0231> "

    079e : e00f ; -- <0232> jmp :struct_test_error
    079f : 07cc ; -- <0232> "

    07a0 : 0243 ; -- <0233> a = 0x43

    07a1 : 0351 ; -- <0233> a = a<<1
    07a2 : 07a0 ; -- <0233> b = 8192
    07a3 : 2000 ; -- <0233> "
    07a4 : 6601 ; -- <0233> av_ad_hi = 1
    07a5 : 6b00 ; -- <0233> av_ad_lo = ad0
    07a6 : 0417 ; -- <0233> b = av_begin_read

    07a7 : 0818 ; -- <0233> i = av_read_data

    07a8 : 0002 ; -- <0233> a = i
    07a9 : 0673 ; -- <0233> b = 0x73

    07aa : e007 ; -- <0231> br eq :else_1962
    07ab : 07ae ; -- <0231> "

    07ac : e00f ; -- <0232> jmp :struct_test_error
    07ad : 07cc ; -- <0232> "


-- read can also leave the result in av_read_data if needed.
    07ae : 0243 ; -- <0233> a = 0x43

    07af : 0351 ; -- <0233> a = a<<1
    07b0 : 07a0 ; -- <0233> b = 8192
    07b1 : 2000 ; -- <0233> "
    07b2 : 6601 ; -- <0233> av_ad_hi = 1
    07b3 : 6b00 ; -- <0233> av_ad_lo = ad0
    07b4 : 0417 ; -- <0233> b = av_begin_read


    07b5 : 0018 ; -- <0233> a = av_read_data
    07b6 : 0673 ; -- <0233> b = 0x73

    07b7 : e007 ; -- <0231> br eq :else_1975
    07b8 : 07bb ; -- <0231> "

    07b9 : e00f ; -- <0232> jmp :struct_test_error
    07ba : 07cc ; -- <0232> "


-- read with an expression for the offset.
    07bb : 0241 ; -- <0233> a = 65

    07bc : 0351 ; -- <0233> a = a<<1
    07bd : 07a0 ; -- <0233> b = 8192
    07be : 2000 ; -- <0233> "
    07bf : 6601 ; -- <0233> av_ad_hi = 1
    07c0 : 6b00 ; -- <0233> av_ad_lo = ad0
    07c1 : 0417 ; -- <0233> b = av_begin_read

    07c2 : 0818 ; -- <0233> i = av_read_data

    07c3 : 0002 ; -- <0233> a = i
    07c4 : 0671 ; -- <0233> b = 0x71

    07c5 : e007 ; -- <0231> br eq :else_1989
    07c6 : 07c9 ; -- <0231> "

    07c7 : e00f ; -- <0232> jmp :struct_test_error
    07c8 : 07cc ; -- <0232> "


-- :struct_test_ok -- = 0x07c9
    07c9 : c800 ; -- <0233> nop
    07ca : e00f ; -- <0233> jmp :struct_test_ok
    07cb : 07c9 ; -- <0233> "

-- :struct_test_error -- = 0x07cc
    07cc : c800 ; -- <0233> nop
    07cd : e00f ; -- <0233> jmp :struct_test_error
    07ce : 07cc ; -- <0233> "


    07cf : fba0 ; -- <0235> callx  init_drom
    07d0 : 0266 ; -- <0235> "
    07d1 : fc00 ; -- <0235> "

-- init fuel injection.
    07d2 : fba0 ; -- <0238> callx  init_plan_stop
    07d3 : 0443 ; -- <0238> "
    07d4 : fc00 ; -- <0238> "

-- power up FTDI USB board, and init any other special board control functions.
    07d5 : 8280 ; -- <0241> board_ctrl = $ftdi_power_mask
    07d6 : fba0 ; -- <0242> callx postpone_comm_restart
    07d7 : 0b8f ; -- <0242> "
    07d8 : fc00 ; -- <0242> "

-- check initial state of power management circuits.
-- if power is lost or ignition switch is off already, open relay & abort run.
-- that's important because then the event controller booted up too late to
-- see edges on those 2 signals.  regular system would never shut itself down.
-- this setup is the last thing done prior to the event handler loop.
    07d9 : 8a00 ; -- <0249> power_duty = $power_duty_closing

    07da : 0022 ; -- <0253> a = power_duty
    07db : 06c0 ; -- <0253> b = ( $power_lost_mask | $ign_switch_off_mask )

    07dc : e003 ; -- <0250> br and0z :else_2012
    07dd : 07e3 ; -- <0250> "

    07de : 8a32 ; -- <0251> power_duty = $power_duty_opening
    07df : 7fa0 ; -- <0252> error_halt_code $err_power_lost_at_boot -- leds = 0xfffb
    07e0 : fffb ; -- <0252> "
    07e1 : e00f ; -- <0252> error_halt_code $err_power_lost_at_boot
    07e2 : 07e1 ; -- <0252> "

    07e3 : 6600 ; -- <0254> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    07e4 : 6a3e ; -- <0254> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    07e5 : 5f60 ; -- <0254> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    07e6 : 6600 ; -- <0255> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_hi = 0
    07e7 : 6a40 ; -- <0255> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_ad_lo = 64
    07e8 : 5e02 ; -- <0255> ram $ram_relay_hold_at_pass = $relay_hold_passes -- av_write_data = 2

-- start handling events.
    07e9 : 3ba0 ; -- <0258> soft_event = $event_controller_reset_mask
    07ea : 8000 ; -- <0258> "
    07eb : 3a00 ; -- <0259> soft_event = 0
    07ec : 4fa0 ; -- <0260> mstimer0 = 1000
    07ed : 03e8 ; -- <0260> "
    07ee : 5614 ; -- <0261> mstimer2 = $plan_tick_ms
    07ef : 6600 ; -- <0262> ram $ram_enable_status_report = 1 -- av_ad_hi = 0
    07f0 : 6a3c ; -- <0262> ram $ram_enable_status_report = 1 -- av_ad_lo = 60
    07f1 : 5e01 ; -- <0262> ram $ram_enable_status_report = 1 -- av_write_data = 1
    07f2 : e00f ; -- <0263> jmp :poll_events
    07f3 : 009e ; -- <0263> "

-- event table;  begins with a null handler because that's the event 0 position, the MOST URGENT position.
-- event 0 not used in this app anyway.
-- :event_table -- = 0x07f4
    07f4 : 009e ; -- <0268> ([label :poll_events])
    07f5 : 0aea ; -- <0269> ([label :power_lost_handler])
    07f6 : 0809 ; -- <0270> ([label :ign_capture_handler])
    07f7 : 08a7 ; -- <0271> ([label :ign_capture_timeout_handler])
    07f8 : 0b1e ; -- <0272> ([label :puff1_done_handler])
    07f9 : 08ac ; -- <0273> ([label :ustimer0_handler])
    07fa : 0a57 ; -- <0274> ([label :spi_done_handler])
    07fb : 08ae ; -- <0275> ([label :mstimer0_handler])
    07fc : 0a1b ; -- <0276> ([label :mstimer1_handler])
    07fd : 08dd ; -- <0277> ([label :mstimer2_handler])
    07fe : 0909 ; -- <0278> ([label :uart_rx_handler])
    07ff : 0922 ; -- <0279> ([label :uart_rx_overflow_handler])
    0800 : 092a ; -- <0280> ([label :uart_tx_overflow_handler])
    0801 : 0931 ; -- <0281> ([label :key0_handler])
    0802 : 093b ; -- <0282> ([label :key1_handler])
    0803 : 0b01 ; -- <0283> ([label :ign_switch_off_handler])
    0804 : 0b14 ; -- <0284> ([label :ign_switch_on_handler])
    0805 : 0945 ; -- <0285> ([label :softevent3_handler])
    0806 : 0947 ; -- <0286> ([label :softevent2_handler])
    0807 : 0949 ; -- <0287> ([label :softevent1_handler])
    0808 : 094b ; -- <0288> ([label :softevent0_handler])

-- #########################################################################

-- ######## event ign_capture_handler -- = 0x0809
-- discard outlier time.
    0809 : 1823 ; -- <0294> g6 = ign_capture_jf
    080a : 6600 ; -- <0295> ram b = $ram_ign_fastest_jf -- av_ad_hi = 0
    080b : 6a84 ; -- <0295> ram b = $ram_ign_fastest_jf -- av_ad_lo = 132
    080c : 0417 ; -- <0295> ram b = $ram_ign_fastest_jf -- b = av_write_data -- start read cycle
    080d : 0418 ; -- <0295> ram b = $ram_ign_fastest_jf -- b = av_read_data -- finish read cycle

    080e : 0006 ; -- <0298> a = g6
    080f : 0401 ; -- <0298> b = b

    0810 : e405 ; -- <0296> bn lt :else_2064
    0811 : 0813 ; -- <0296> "

    0812 : 1a00 ; -- <0297> g6 = 0

    0813 : 6600 ; -- <0299> ram b = $ram_ign_slowest_jf -- av_ad_hi = 0
    0814 : 6a86 ; -- <0299> ram b = $ram_ign_slowest_jf -- av_ad_lo = 134
    0815 : 0417 ; -- <0299> ram b = $ram_ign_slowest_jf -- b = av_write_data -- start read cycle
    0816 : 0418 ; -- <0299> ram b = $ram_ign_slowest_jf -- b = av_read_data -- finish read cycle

    0817 : 0006 ; -- <0302> a = g6
    0818 : 0401 ; -- <0302> b = b

    0819 : e406 ; -- <0300> bn gt :else_2073
    081a : 081c ; -- <0300> "

    081b : 1a00 ; -- <0301> g6 = 0


-- increment buffer index and memorize time.
    081c : 6600 ; -- <0305> ram a = $ram_ign_history_idx -- av_ad_hi = 0
    081d : 6a5a ; -- <0305> ram a = $ram_ign_history_idx -- av_ad_lo = 90
    081e : 0017 ; -- <0305> ram a = $ram_ign_history_idx -- a = av_write_data -- start read cycle
    081f : 0018 ; -- <0305> ram a = $ram_ign_history_idx -- a = av_read_data -- finish read cycle
    0820 : 0601 ; -- <0306> b = 1
    0821 : c800 ; -- <0307> a = a+b
    0822 : 0300 ; -- <0307> "
    0823 : 060f ; -- <0308> b = $ign_history_idx_mask
    0824 : c800 ; -- <0309> a = and
    0825 : 0330 ; -- <0309> "
    0826 : 6600 ; -- <0310> ram $ram_ign_history_idx = a -- av_ad_hi = 0
    0827 : 6a5a ; -- <0310> ram $ram_ign_history_idx = a -- av_ad_lo = 90
    0828 : 5c00 ; -- <0310> ram $ram_ign_history_idx = a -- av_write_data = a
    0829 : 3006 ; -- <0311> push g6 -- push g6

    082a : 0351 ; -- <0311> a = a<<1
    082b : 065c ; -- <0311> b = 92
    082c : 6600 ; -- <0311> av_ad_hi = 0
    082d : 6b00 ; -- <0311> av_ad_lo = ad0

    082e : 5c0c ; -- <0311> pop av_write_data -- pop av_write_data

-- ---------- compute new jiffy estimate.
-- average entire history.
-- x = total, y = sample, i = index = loop count, g6 = count of invalid samples.
    082f : 1200 ; -- <0316> x = 0
    0830 : 1a00 ; -- <0317> g6 = 0
    0831 : 0a00 ; -- <0331> i = 0
-- :loop_2097 -- = 0x0832

    0832 : 0002 ; -- <0318> a = i

    0833 : 0351 ; -- <0318> a = a<<1
    0834 : 065c ; -- <0318> b = 92
    0835 : 6600 ; -- <0318> av_ad_hi = 0
    0836 : 6b00 ; -- <0318> av_ad_lo = ad0
    0837 : 0417 ; -- <0318> b = av_begin_read

    0838 : 1418 ; -- <0318> y = av_read_data

    0839 : 0005 ; -- <0329> a = y
    083a : 0600 ; -- <0329> b = 0

    083b : e407 ; -- <0319> bn eq :else_2107
    083c : 0843 ; -- <0319> "

    083d : 0006 ; -- <0320> a = g6
    083e : 0601 ; -- <0321> b = 1
    083f : c800 ; -- <0322> g6 = a+b
    0840 : 1b00 ; -- <0322> "

    0841 : e00f ; -- <0324> jmp :end_2107
    0842 : 084a ; -- <0324> "

    0843 : 0208 ; -- <0325> a = ($ign_history_len / 2)
    0844 : 0405 ; -- <0326> b = y
    0845 : c800 ; -- <0327> a = a+b
    0846 : 0300 ; -- <0327> "
    0847 : 1753 ; -- <0328> y = a>>$ign_history_idx_bits
    0848 : c800 ; -- <0329> x = x+y
    0849 : 1320 ; -- <0329> "



    084a : 0002 ; -- <0331> a = i
    084b : 0601 ; -- <0331> b = 1
    084c : c800 ; -- <0331> i = a+b
    084d : 0b00 ; -- <0331> "


    084e : 0002 ; -- <0331> a = i
    084f : 0610 ; -- <0331> b = $ign_history_len
    0850 : e005 ; -- <0331> br lt :loop_2097
    0851 : 0832 ; -- <0331> "

-- :end_2097 -- = 0x0852
    0852 : 6600 ; -- <0332> ram $ram_ign_avg_jf = x -- av_ad_hi = 0
    0853 : 6a7c ; -- <0332> ram $ram_ign_avg_jf = x -- av_ad_lo = 124
    0854 : 5c04 ; -- <0332> ram $ram_ign_avg_jf = x -- av_write_data = x
    0855 : 6600 ; -- <0333> ram $ram_ign_bad_samples = g6 -- av_ad_hi = 0
    0856 : 6a82 ; -- <0333> ram $ram_ign_bad_samples = g6 -- av_ad_lo = 130
    0857 : 5c06 ; -- <0333> ram $ram_ign_bad_samples = g6 -- av_write_data = g6
--patch: dividing before summing (instead of after) is much simpler and faster because it prevents overflow.
-- but it means we could be reading as much as 16 jf too low (16 = ign_history_len).
-- that error is way less than 1 RPM on the slow end,
-- or about 1,000 RPM too fast on the fast end!
-- might need to tighten that up.  one simple way might be adding ign_history_len / 2 to each history record prior to dividing.
-- that didn't seem to help much in simple testing.
-- probly because jf_to_rpm has only 32 RPM resolution.


    0858 : 0006 ; -- <0361> a = g6
    0859 : 0604 ; -- <0361> b = ( $ign_history_len / 4 )

    085a : e406 ; -- <0342> bn gt :else_2138
    085b : 0861 ; -- <0342> "

    085c : 6600 ; -- <0343> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    085d : 6a80 ; -- <0343> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    085e : 5e00 ; -- <0343> ram $ram_rpm_valid = 0 -- av_write_data = 0

    085f : e00f ; -- <0345> jmp :end_2138
    0860 : 088d ; -- <0345> "

-- convert jiffies b to new RPM estimate.
    0861 : 2004 ; -- <0347> pa = x
    0862 : fba0 ; -- <0347> callx  jf_to_rpm  x  pa
    0863 : 0cba ; -- <0347> "
    0864 : fc00 ; -- <0347> "
    0865 : 6600 ; -- <0348> ram $ram_avg_rpm = pa -- av_ad_hi = 0
    0866 : 6a7e ; -- <0348> ram $ram_avg_rpm = pa -- av_ad_lo = 126
    0867 : 5c08 ; -- <0348> ram $ram_avg_rpm = pa -- av_write_data = pa
    0868 : 6600 ; -- <0349> ram $ram_rpm_valid = 1 -- av_ad_hi = 0
    0869 : 6a80 ; -- <0349> ram $ram_rpm_valid = 1 -- av_ad_lo = 128
    086a : 5e01 ; -- <0349> ram $ram_rpm_valid = 1 -- av_write_data = 1

-- find RPM column in AFRC map.
    086b : 6600 ; -- <0352> ram gb = $ram_avg_rpm -- av_ad_hi = 0
    086c : 6a7e ; -- <0352> ram gb = $ram_avg_rpm -- av_ad_lo = 126
    086d : 1c17 ; -- <0352> ram gb = $ram_avg_rpm -- gb = av_write_data -- start read cycle
    086e : 1c18 ; -- <0352> ram gb = $ram_avg_rpm -- gb = av_read_data -- finish read cycle
    086f : 0a00 ; -- <0359> i = 0
-- :loop_2159 -- = 0x0870

    0870 : 0002 ; -- <0353> a = i

    0871 : 0351 ; -- <0353> a = a<<1
    0872 : 07a0 ; -- <0353> b = 2560
    0873 : 0a00 ; -- <0353> "
    0874 : 67a0 ; -- <0353> av_ad_hi = 256
    0875 : 0100 ; -- <0353> "
    0876 : 6b00 ; -- <0353> av_ad_lo = ad0
    0877 : 0417 ; -- <0353> b = av_begin_read

    0878 : 0418 ; -- <0353> b = av_read_data

    0879 : 0001 ; -- <0357> a = b
    087a : 0407 ; -- <0357> b = gb

    087b : e406 ; -- <0354> bn gt :else_2171
    087c : 0882 ; -- <0354> "

    087d : 6600 ; -- <0355> ram $ram_afrc_rpm_col_idx = i -- av_ad_hi = 0
    087e : 6aa0 ; -- <0355> ram $ram_afrc_rpm_col_idx = i -- av_ad_lo = 160
    087f : 5c02 ; -- <0355> ram $ram_afrc_rpm_col_idx = i -- av_write_data = i
    0880 : e00f ; -- <0356> jmp :rpm_found
    0881 : 088d ; -- <0356> "



    0882 : 0002 ; -- <0359> a = i
    0883 : 0601 ; -- <0359> b = 1
    0884 : c800 ; -- <0359> i = a+b
    0885 : 0b00 ; -- <0359> "


    0886 : 0002 ; -- <0359> a = i
    0887 : 0610 ; -- <0359> b = $rpm_ref_num_cells
    0888 : e005 ; -- <0359> br lt :loop_2159
    0889 : 0870 ; -- <0359> "

-- :end_2159 -- = 0x088a
    088a : 6600 ; -- <0360> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    088b : 6a80 ; -- <0360> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    088c : 5e00 ; -- <0360> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- :rpm_found -- = 0x088d

    088d : e00f ; -- <0362> end_event
    088e : 009e ; -- <0362> "

-- ######## func clear_ign_history -- = 0x088f
    088f : 3002 ; -- <0373> push i -- func clear_ign_history

-- invalidate the RPM estimate.
    0890 : 6600 ; -- <0366> ram $ram_rpm_valid = 0 -- av_ad_hi = 0
    0891 : 6a80 ; -- <0366> ram $ram_rpm_valid = 0 -- av_ad_lo = 128
    0892 : 5e00 ; -- <0366> ram $ram_rpm_valid = 0 -- av_write_data = 0
-- the last known RPM estimate is retained here, not cleared.
-- clear the history so it won't be valid again until several more valid samples are collected.
    0893 : 6600 ; -- <0369> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_hi = 0
    0894 : 6a82 ; -- <0369> ram $ram_ign_bad_samples = $ign_history_len -- av_ad_lo = 130
    0895 : 5e10 ; -- <0369> ram $ram_ign_bad_samples = $ign_history_len -- av_write_data = 16
    0896 : 0a00 ; -- <0372> i = 0
-- :loop_2198 -- = 0x0897

    0897 : 0002 ; -- <0370> a = i

    0898 : 0351 ; -- <0370> a = a<<1
    0899 : 065c ; -- <0370> b = 92
    089a : 6600 ; -- <0370> av_ad_hi = 0
    089b : 6b00 ; -- <0370> av_ad_lo = ad0

    089c : 5e00 ; -- <0370> av_write_data = 0


    089d : 0002 ; -- <0372> a = i
    089e : 0601 ; -- <0372> b = 1
    089f : c800 ; -- <0372> i = a+b
    08a0 : 0b00 ; -- <0372> "


    08a1 : 0002 ; -- <0372> a = i
    08a2 : 0610 ; -- <0372> b = $ign_history_len
    08a3 : e005 ; -- <0372> br lt :loop_2198
    08a4 : 0897 ; -- <0372> "

-- :end_2198 -- = 0x08a5

    08a5 : 080c ; -- <0374> pop i -- func clear_ign_history
    08a6 : fc00 ; -- <0374> swapra = nop

-- ######## event ign_capture_timeout_handler -- = 0x08a7
-- it's been too long since the last ignition pulse detect.
    08a7 : fba0 ; -- <0377> callx clear_ign_history
    08a8 : 088f ; -- <0377> "
    08a9 : fc00 ; -- <0377> "
    08aa : e00f ; -- <0378> end_event
    08ab : 009e ; -- <0378> "

-- ######## event ustimer0_handler -- = 0x08ac
    08ac : e00f ; -- <0381> end_event
    08ad : 009e ; -- <0381> "

-- ######## event mstimer0_handler -- = 0x08ae
-- unified 1-second periodic timer for all low-resolution tasks.

-- start timer again.
    08ae : 4fa0 ; -- <0387> mstimer0 = 1000
    08af : 03e8 ; -- <0387> "

-- realtime counters in RAM.
    08b0 : 6600 ; -- <0390> ram a = $ram_seconds_cnt -- av_ad_hi = 0
    08b1 : 6a44 ; -- <0390> ram a = $ram_seconds_cnt -- av_ad_lo = 68
    08b2 : 0017 ; -- <0390> ram a = $ram_seconds_cnt -- a = av_write_data -- start read cycle
    08b3 : 0018 ; -- <0390> ram a = $ram_seconds_cnt -- a = av_read_data -- finish read cycle
    08b4 : 0601 ; -- <0391> b = 1
    08b5 : c800 ; -- <0392> a = a+b
    08b6 : 0300 ; -- <0392> "

    08b7 : 0000 ; -- <0401> a = a
    08b8 : 063c ; -- <0401> b = 60

    08b9 : e407 ; -- <0393> bn eq :else_2233
    08ba : 08cc ; -- <0393> "

    08bb : 6600 ; -- <0394> ram $ram_seconds_cnt = 0 -- av_ad_hi = 0
    08bc : 6a44 ; -- <0394> ram $ram_seconds_cnt = 0 -- av_ad_lo = 68
    08bd : 5e00 ; -- <0394> ram $ram_seconds_cnt = 0 -- av_write_data = 0
    08be : 6600 ; -- <0395> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    08bf : 6a42 ; -- <0395> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    08c0 : 0017 ; -- <0395> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    08c1 : 0018 ; -- <0395> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    08c2 : 0601 ; -- <0396> b = 1
    08c3 : 6600 ; -- <0397> ram $ram_minutes_cnt = a+b -- av_ad_hi = 0
    08c4 : 6a42 ; -- <0397> ram $ram_minutes_cnt = a+b -- av_ad_lo = 66
    08c5 : c800 ; -- <0397> ram $ram_minutes_cnt = a+b -- av_write_data = a+b
    08c6 : 5f00 ; -- <0397> "
    08c7 : fba0 ; -- <0398> callx minute_events
    08c8 : 0b2d ; -- <0398> "
    08c9 : fc00 ; -- <0398> "

    08ca : e00f ; -- <0400> jmp :end_2233
    08cb : 08cf ; -- <0400> "

    08cc : 6600 ; -- <0401> ram $ram_seconds_cnt = a -- av_ad_hi = 0
    08cd : 6a44 ; -- <0401> ram $ram_seconds_cnt = a -- av_ad_lo = 68
    08ce : 5c00 ; -- <0401> ram $ram_seconds_cnt = a -- av_write_data = a


-- all 1-second functions here.
    08cf : fba0 ; -- <0404> callx check_power_relay
    08d0 : 0b35 ; -- <0404> "
    08d1 : fc00 ; -- <0404> "
    08d2 : fba0 ; -- <0405> callx check_communication
    08d3 : 0b62 ; -- <0405> "
    08d4 : fc00 ; -- <0405> "
    08d5 : fba0 ; -- <0406> callx start_daq_pass
    08d6 : 0966 ; -- <0406> "
    08d7 : fc00 ; -- <0406> "
    08d8 : e00f ; -- <0407> end_event
    08d9 : 009e ; -- <0407> "

-- :plan_transition_msg -- = 0x08da
-- "PLAN\x0"
    08da : 4c50 ; -- <0410> LP
    08db : 4e41 ; -- <0410> NA
    08dc : 0000 ; -- <0410>   

-- ######## event mstimer2_handler -- = 0x08dd
-- engine management plan tick timer.

-- restart timer.
    08dd : 5614 ; -- <0416> mstimer2 = $plan_tick_ms

-- start another TPS reading prior to every plan tick.
-- this will also invoke a o2 reading.  that's done last of all prior to plan_tick,
-- so there's minimal latency between that and the plan_tick utilizing it.
    08de : 6600 ; -- <0421> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    08df : 6a36 ; -- <0421> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    08e0 : 0017 ; -- <0421> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    08e1 : 0018 ; -- <0421> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    08e2 : 0000 ; -- <0424> a = a
    08e3 : 0600 ; -- <0424> b = 0

    08e4 : e407 ; -- <0422> bn eq :else_2276
    08e5 : 08ea ; -- <0422> "

    08e6 : 2206 ; -- <0423> pa = 6
    08e7 : fba0 ; -- <0423> callx  begin_adc_conversion  $tps_adc_channel
    08e8 : 0a49 ; -- <0423> "
    08e9 : fc00 ; -- <0423> "

    08ea : e00f ; -- <0425> end_event
    08eb : 009e ; -- <0425> "

-- ######## func plan_tick -- = 0x08ec
    08ec : 3004 ; -- <0442> push x -- func plan_tick
    08ed : 303e ; -- <0442> push rtna -- "

-- poll the engine management plan.
-- call the transition function for the current plan.
-- this might perform a transition to some other plan, so it's done first.
    08ee : 6600 ; -- <0431> ram rtna = $ram_transition_func -- av_ad_hi = 0
    08ef : 6a8e ; -- <0431> ram rtna = $ram_transition_func -- av_ad_lo = 142
    08f0 : f817 ; -- <0431> ram rtna = $ram_transition_func -- rtna = av_write_data -- start read cycle
    08f1 : f818 ; -- <0431> ram rtna = $ram_transition_func -- rtna = av_read_data -- finish read cycle
    08f2 : 103e ; -- <0432> x = rtna
    08f3 : fc00 ; -- <0433> swapra = nop
    08f4 : 6600 ; -- <0435> ram b = $ram_transition_func -- av_ad_hi = 0
    08f5 : 6a8e ; -- <0435> ram b = $ram_transition_func -- av_ad_lo = 142
    08f6 : 0417 ; -- <0435> ram b = $ram_transition_func -- b = av_write_data -- start read cycle
    08f7 : 0418 ; -- <0435> ram b = $ram_transition_func -- b = av_read_data -- finish read cycle

    08f8 : 0004 ; -- <0438> a = x
    08f9 : 0401 ; -- <0438> b = b

    08fa : e007 ; -- <0436> br eq :else_2298
    08fb : 0901 ; -- <0436> "

    08fc : 23a0 ; -- <0437> pa = :plan_transition_msg
    08fd : 08da ; -- <0437> "
    08fe : fba0 ; -- <0437> callx  set_text_flag  :plan_transition_msg
    08ff : 0bc0 ; -- <0437> "
    0900 : fc00 ; -- <0437> "

-- call the puff length function for the current plan.
-- this is done last, so if a plan transition just happened, its new puff length will init here.
    0901 : 6600 ; -- <0441> ram rtna = $ram_puff_len_func -- av_ad_hi = 0
    0902 : 6a8c ; -- <0441> ram rtna = $ram_puff_len_func -- av_ad_lo = 140
    0903 : f817 ; -- <0441> ram rtna = $ram_puff_len_func -- rtna = av_write_data -- start read cycle
    0904 : f818 ; -- <0441> ram rtna = $ram_puff_len_func -- rtna = av_read_data -- finish read cycle
    0905 : fc00 ; -- <0442> swapra = nop

    0906 : f80c ; -- <0445> pop rtna -- func plan_tick
    0907 : 100c ; -- <0445> pop x -- "
    0908 : fc00 ; -- <0445> swapra = nop

-- ######## event uart_rx_handler -- = 0x0909
-- :again -- = 0x0909
    0909 : fba0 ; -- <0448> pollchar
    090a : 00ba ; -- <0448> "
    090b : fc00 ; -- <0448> "
    090c : 1000 ; -- <0449> x = a

    090d : 0004 ; -- <0452> a = x
    090e : 0760 ; -- <0452> b = -1

    090f : e407 ; -- <0450> bn eq :else_2319
    0910 : 0913 ; -- <0450> "

    0911 : e00f ; -- <0451> event_return
    0912 : 009e ; -- <0451> "


    0913 : 0004 ; -- <0455> a = x
    0914 : 060a ; -- <0455> b = 10

    0915 : e407 ; -- <0453> bn eq :else_2325
    0916 : 091a ; -- <0453> "

    0917 : fba0 ; -- <0454> callx  postpone_comm_restart
    0918 : 0b8f ; -- <0454> "
    0919 : fc00 ; -- <0454> "

    091a : 2004 ; -- <0456> pa = x
    091b : fba0 ; -- <0456> callx  parse_key  x
    091c : 03a2 ; -- <0456> "
    091d : fc00 ; -- <0456> "
    091e : e00f ; -- <0457> jmp :again
    091f : 0909 ; -- <0457> "
    0920 : e00f ; -- <0458> end_event
    0921 : 009e ; -- <0458> "

-- ######## event uart_rx_overflow_handler -- = 0x0922
    0922 : 7fa0 ; -- <0461> error_halt_code $err_rx_overflow -- leds = 0xfffe
    0923 : fffe ; -- <0461> "
    0924 : e00f ; -- <0461> error_halt_code $err_rx_overflow
    0925 : 0924 ; -- <0461> "
    0926 : e00f ; -- <0462> end_event
    0927 : 009e ; -- <0462> "

-- :tx_overflow_msg -- = 0x0928
-- "TXO\x0"
    0928 : 5854 ; -- <0465> XT
    0929 : 004f ; -- <0465>  O

-- ######## event uart_tx_overflow_handler -- = 0x092a
-- error_halt_code $err_tx_overflow
    092a : 23a0 ; -- <0469> pa = :tx_overflow_msg
    092b : 0928 ; -- <0469> "
    092c : fba0 ; -- <0469> callx  set_text_flag  :tx_overflow_msg
    092d : 0bc0 ; -- <0469> "
    092e : fc00 ; -- <0469> "
    092f : e00f ; -- <0470> end_event
    0930 : 009e ; -- <0470> "

-- ######## event key0_handler -- = 0x0931
    0931 : 026b ; -- <0473> a = 107 -- putasc "k"
    0932 : fba0 ; -- <0473> putasc "k"
    0933 : 00ab ; -- <0473> "
    0934 : fc00 ; -- <0473> "
    0935 : 0230 ; -- <0474> a = 48 -- putasc "0"
    0936 : fba0 ; -- <0474> putasc "0"
    0937 : 00ab ; -- <0474> "
    0938 : fc00 ; -- <0474> "
    0939 : e00f ; -- <0475> end_event
    093a : 009e ; -- <0475> "

-- ######## event key1_handler -- = 0x093b
    093b : 026b ; -- <0478> a = 107 -- putasc "k"
    093c : fba0 ; -- <0478> putasc "k"
    093d : 00ab ; -- <0478> "
    093e : fc00 ; -- <0478> "
    093f : 0231 ; -- <0479> a = 49 -- putasc "1"
    0940 : fba0 ; -- <0479> putasc "1"
    0941 : 00ab ; -- <0479> "
    0942 : fc00 ; -- <0479> "
    0943 : e00f ; -- <0480> end_event
    0944 : 009e ; -- <0480> "

-- ######## event softevent3_handler -- = 0x0945
    0945 : e00f ; -- <0483> end_event
    0946 : 009e ; -- <0483> "

-- ######## event softevent2_handler -- = 0x0947
    0947 : e00f ; -- <0486> end_event
    0948 : 009e ; -- <0486> "

-- ######## event softevent1_handler -- = 0x0949
    0949 : e00f ; -- <0489> end_event
    094a : 009e ; -- <0489> "

-- ######## event softevent0_handler -- = 0x094b
    094b : e00f ; -- <0492> end_event
    094c : 009e ; -- <0492> "

-- :rpm_msg -- = 0x094d
-- ": rpm=\x0"
    094d : 203a ; -- <0495>  :
    094e : 7072 ; -- <0495> pr
    094f : 3d6d ; -- <0495> =m
    0950 : 0000 ; -- <0495>   

-- :puff_len_msg -- = 0x0951
-- " pfl=\x0"
    0951 : 7020 ; -- <0498> p 
    0952 : 6c66 ; -- <0498> lf
    0953 : 003d ; -- <0498>  =

-- :afrc_coords_msg -- = 0x0954
-- " map=\x0"
    0954 : 6d20 ; -- <0501> m 
    0955 : 7061 ; -- <0501> pa
    0956 : 003d ; -- <0501>  =

-- :o2_msg -- = 0x0957
-- " o2=\x0"
    0957 : 6f20 ; -- <0504> o 
    0958 : 3d32 ; -- <0504> =2
    0959 : 0000 ; -- <0504>   

-- :maf_msg -- = 0x095a
-- " af=\x0"
    095a : 6120 ; -- <0507> a 
    095b : 3d66 ; -- <0507> =f
    095c : 0000 ; -- <0507>   

-- :tps_msg -- = 0x095d
-- " tp=\x0"
    095d : 7420 ; -- <0510> t 
    095e : 3d70 ; -- <0510> =p
    095f : 0000 ; -- <0510>   

-- :block_temp_idx_msg -- = 0x0960
-- " bti=\x0"
    0960 : 6220 ; -- <0513> b 
    0961 : 6974 ; -- <0513> it
    0962 : 003d ; -- <0513>  =

-- :afterstart_idx_msg -- = 0x0963
-- " asi=\x0"
    0963 : 6120 ; -- <0516> a 
    0964 : 6973 ; -- <0516> is
    0965 : 003d ; -- <0516>  =

-- ######## func start_daq_pass -- = 0x0966
    0966 : 3002 ; -- <0594> push i -- func start_daq_pass
    0967 : 3004 ; -- <0594> push x -- "
    0968 : 303e ; -- <0594> push rtna -- "

-- daq pass counter in RAM.
    0969 : 6600 ; -- <0520> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    096a : 6a14 ; -- <0520> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    096b : 0017 ; -- <0520> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    096c : 0018 ; -- <0520> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    096d : 0601 ; -- <0521> b = 1
    096e : c800 ; -- <0522> a = a+b
    096f : 0300 ; -- <0522> "
    0970 : 0800 ; -- <0523> i = a
    0971 : 7c02 ; -- <0524> leds = i
    0972 : 6600 ; -- <0525> ram $ram_daq_pass_cnt = i -- av_ad_hi = 0
    0973 : 6a14 ; -- <0525> ram $ram_daq_pass_cnt = i -- av_ad_lo = 20
    0974 : 5c02 ; -- <0525> ram $ram_daq_pass_cnt = i -- av_write_data = i

    0975 : 6600 ; -- <0527> ram a = $ram_enable_status_report -- av_ad_hi = 0
    0976 : 6a3c ; -- <0527> ram a = $ram_enable_status_report -- av_ad_lo = 60
    0977 : 0017 ; -- <0527> ram a = $ram_enable_status_report -- a = av_write_data -- start read cycle
    0978 : 0018 ; -- <0527> ram a = $ram_enable_status_report -- a = av_read_data -- finish read cycle

    0979 : 0000 ; -- <0584> a = a
    097a : 0600 ; -- <0584> b = 0

    097b : e007 ; -- <0528> br eq :else_2427
    097c : 0a0e ; -- <0528> "

    097d : 0002 ; -- <0529> a = i
    097e : fba0 ; -- <0530> call :put4x
    097f : 00d3 ; -- <0530> "
    0980 : fc00 ; -- <0530> "

    0981 : 03a0 ; -- <0532> a = :rpm_msg
    0982 : 094d ; -- <0532> "
    0983 : fba0 ; -- <0533> call :print_nt
    0984 : 015f ; -- <0533> "
    0985 : fc00 ; -- <0533> "
    0986 : 0200 ; -- <0534> a = 0
    0987 : 6600 ; -- <0535> ram x = $ram_rpm_valid -- av_ad_hi = 0
    0988 : 6a80 ; -- <0535> ram x = $ram_rpm_valid -- av_ad_lo = 128
    0989 : 1017 ; -- <0535> ram x = $ram_rpm_valid -- x = av_write_data -- start read cycle
    098a : 1018 ; -- <0535> ram x = $ram_rpm_valid -- x = av_read_data -- finish read cycle

    098b : 0004 ; -- <0538> a = x
    098c : 0600 ; -- <0538> b = 0

    098d : e007 ; -- <0536> br eq :else_2445
    098e : 0993 ; -- <0536> "

    098f : 6600 ; -- <0537> ram a = $ram_avg_rpm -- av_ad_hi = 0
    0990 : 6a7e ; -- <0537> ram a = $ram_avg_rpm -- av_ad_lo = 126
    0991 : 0017 ; -- <0537> ram a = $ram_avg_rpm -- a = av_write_data -- start read cycle
    0992 : 0018 ; -- <0537> ram a = $ram_avg_rpm -- a = av_read_data -- finish read cycle

    0993 : fba0 ; -- <0539> call :put4x
    0994 : 00d3 ; -- <0539> "
    0995 : fc00 ; -- <0539> "

    0996 : 03a0 ; -- <0541> a = :puff_len_msg
    0997 : 0951 ; -- <0541> "
    0998 : fba0 ; -- <0542> call :print_nt
    0999 : 015f ; -- <0542> "
    099a : fc00 ; -- <0542> "
    099b : 0025 ; -- <0543> a = puff_len_us
    099c : fba0 ; -- <0544> call :put4x
    099d : 00d3 ; -- <0544> "
    099e : fc00 ; -- <0544> "
    099f : 022c ; -- <0545> a = 44 -- putasc ","
    09a0 : fba0 ; -- <0545> putasc ","
    09a1 : 00ab ; -- <0545> "
    09a2 : fc00 ; -- <0545> "
    09a3 : 6600 ; -- <0546> ram a = $ram_puff_count -- av_ad_hi = 0
    09a4 : 6a94 ; -- <0546> ram a = $ram_puff_count -- av_ad_lo = 148
    09a5 : 0017 ; -- <0546> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    09a6 : 0018 ; -- <0546> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    09a7 : fba0 ; -- <0547> call :put4x
    09a8 : 00d3 ; -- <0547> "
    09a9 : fc00 ; -- <0547> "

    09aa : 03a0 ; -- <0549> a = :afrc_coords_msg
    09ab : 0954 ; -- <0549> "
    09ac : fba0 ; -- <0550> call :print_nt
    09ad : 015f ; -- <0550> "
    09ae : fc00 ; -- <0550> "
    09af : 6600 ; -- <0551> ram a = $ram_afrc_rpm_col_idx -- av_ad_hi = 0
    09b0 : 6aa0 ; -- <0551> ram a = $ram_afrc_rpm_col_idx -- av_ad_lo = 160
    09b1 : 0017 ; -- <0551> ram a = $ram_afrc_rpm_col_idx -- a = av_write_data -- start read cycle
    09b2 : 0018 ; -- <0551> ram a = $ram_afrc_rpm_col_idx -- a = av_read_data -- finish read cycle
    09b3 : fba0 ; -- <0552> call :put4x
    09b4 : 00d3 ; -- <0552> "
    09b5 : fc00 ; -- <0552> "
    09b6 : 022c ; -- <0553> a = 44 -- putasc ","
    09b7 : fba0 ; -- <0553> putasc ","
    09b8 : 00ab ; -- <0553> "
    09b9 : fc00 ; -- <0553> "
    09ba : 6600 ; -- <0554> ram a = $ram_afrc_maf_row_idx -- av_ad_hi = 0
    09bb : 6a9e ; -- <0554> ram a = $ram_afrc_maf_row_idx -- av_ad_lo = 158
    09bc : 0017 ; -- <0554> ram a = $ram_afrc_maf_row_idx -- a = av_write_data -- start read cycle
    09bd : 0018 ; -- <0554> ram a = $ram_afrc_maf_row_idx -- a = av_read_data -- finish read cycle
    09be : fba0 ; -- <0555> call :put4x
    09bf : 00d3 ; -- <0555> "
    09c0 : fc00 ; -- <0555> "

    09c1 : 03a0 ; -- <0557> a = :o2_msg
    09c2 : 0957 ; -- <0557> "
    09c3 : fba0 ; -- <0558> call :print_nt
    09c4 : 015f ; -- <0558> "
    09c5 : fc00 ; -- <0558> "
    09c6 : 0205 ; -- <0559> a = 5

    09c7 : 0351 ; -- <0559> a = a<<1
    09c8 : 0626 ; -- <0559> b = 38
    09c9 : 6600 ; -- <0559> av_ad_hi = 0
    09ca : 6b00 ; -- <0559> av_ad_lo = ad0
    09cb : 0417 ; -- <0559> b = av_begin_read

    09cc : 0018 ; -- <0559> a = av_read_data
    09cd : fba0 ; -- <0560> call :put4x
    09ce : 00d3 ; -- <0560> "
    09cf : fc00 ; -- <0560> "

    09d0 : 03a0 ; -- <0562> a = :maf_msg
    09d1 : 095a ; -- <0562> "
    09d2 : fba0 ; -- <0563> call :print_nt
    09d3 : 015f ; -- <0563> "
    09d4 : fc00 ; -- <0563> "
    09d5 : 6600 ; -- <0564> ram a = $ram_maf_adc_filtered -- av_ad_hi = 0
    09d6 : 6a9a ; -- <0564> ram a = $ram_maf_adc_filtered -- av_ad_lo = 154
    09d7 : 0017 ; -- <0564> ram a = $ram_maf_adc_filtered -- a = av_write_data -- start read cycle
    09d8 : 0018 ; -- <0564> ram a = $ram_maf_adc_filtered -- a = av_read_data -- finish read cycle
    09d9 : fba0 ; -- <0565> call :put4x
    09da : 00d3 ; -- <0565> "
    09db : fc00 ; -- <0565> "

    09dc : 03a0 ; -- <0567> a = :tps_msg
    09dd : 095d ; -- <0567> "
    09de : fba0 ; -- <0568> call :print_nt
    09df : 015f ; -- <0568> "
    09e0 : fc00 ; -- <0568> "
    09e1 : 0206 ; -- <0569> a = 6

    09e2 : 0351 ; -- <0569> a = a<<1
    09e3 : 0626 ; -- <0569> b = 38
    09e4 : 6600 ; -- <0569> av_ad_hi = 0
    09e5 : 6b00 ; -- <0569> av_ad_lo = ad0
    09e6 : 0417 ; -- <0569> b = av_begin_read

    09e7 : 0018 ; -- <0569> a = av_read_data
    09e8 : fba0 ; -- <0570> call :put4x
    09e9 : 00d3 ; -- <0570> "
    09ea : fc00 ; -- <0570> "
    09eb : 022c ; -- <0571> a = 44 -- putasc ","
    09ec : fba0 ; -- <0571> putasc ","
    09ed : 00ab ; -- <0571> "
    09ee : fc00 ; -- <0571> "
    09ef : 6600 ; -- <0572> ram a = $ram_tps_avg -- av_ad_hi = 0
    09f0 : 6ab0 ; -- <0572> ram a = $ram_tps_avg -- av_ad_lo = 176
    09f1 : 0017 ; -- <0572> ram a = $ram_tps_avg -- a = av_write_data -- start read cycle
    09f2 : 0018 ; -- <0572> ram a = $ram_tps_avg -- a = av_read_data -- finish read cycle
    09f3 : fba0 ; -- <0573> call :put4x
    09f4 : 00d3 ; -- <0573> "
    09f5 : fc00 ; -- <0573> "

    09f6 : 03a0 ; -- <0575> a = :block_temp_idx_msg
    09f7 : 0960 ; -- <0575> "
    09f8 : fba0 ; -- <0576> call :print_nt
    09f9 : 015f ; -- <0576> "
    09fa : fc00 ; -- <0576> "
    09fb : 6600 ; -- <0577> ram a = $ram_block_temp_map_idx -- av_ad_hi = 0
    09fc : 6aa2 ; -- <0577> ram a = $ram_block_temp_map_idx -- av_ad_lo = 162
    09fd : 0017 ; -- <0577> ram a = $ram_block_temp_map_idx -- a = av_write_data -- start read cycle
    09fe : 0018 ; -- <0577> ram a = $ram_block_temp_map_idx -- a = av_read_data -- finish read cycle
    09ff : fba0 ; -- <0578> call :put4x
    0a00 : 00d3 ; -- <0578> "
    0a01 : fc00 ; -- <0578> "

    0a02 : 03a0 ; -- <0580> a = :afterstart_idx_msg
    0a03 : 0963 ; -- <0580> "
    0a04 : fba0 ; -- <0581> call :print_nt
    0a05 : 015f ; -- <0581> "
    0a06 : fc00 ; -- <0581> "
    0a07 : 6600 ; -- <0582> ram a = $ram_afterstart_map_idx -- av_ad_hi = 0
    0a08 : 6aa6 ; -- <0582> ram a = $ram_afterstart_map_idx -- av_ad_lo = 166
    0a09 : 0017 ; -- <0582> ram a = $ram_afterstart_map_idx -- a = av_write_data -- start read cycle
    0a0a : 0018 ; -- <0582> ram a = $ram_afterstart_map_idx -- a = av_read_data -- finish read cycle
    0a0b : fba0 ; -- <0583> call :put4x
    0a0c : 00d3 ; -- <0583> "
    0a0d : fc00 ; -- <0583> "


-- start to acquire & report all anmux channels.
    0a0e : 0207 ; -- <0587> a = ($anmux_num_channels - 1)
    0a0f : fba0 ; -- <0588> call :anmux_set_chn
    0a10 : 00c2 ; -- <0588> "
    0a11 : fc00 ; -- <0588> "
    0a12 : 5205 ; -- <0589> mstimer1 = $anmux_settle_ms

-- observe MCU utilization.  this RAM variable can be seen by the debugger.
    0a13 : 6600 ; -- <0592> ram $ram_mcu_usage_cnt = usage_count -- av_ad_hi = 0
    0a14 : 6a46 ; -- <0592> ram $ram_mcu_usage_cnt = usage_count -- av_ad_lo = 70
    0a15 : 5c0f ; -- <0592> ram $ram_mcu_usage_cnt = usage_count -- av_write_data = usage_count
    0a16 : 3e00 ; -- <0593> usage_count = 0

    0a17 : f80c ; -- <0595> pop rtna -- func start_daq_pass
    0a18 : 100c ; -- <0595> pop x -- "
    0a19 : 080c ; -- <0595> pop i -- "
    0a1a : fc00 ; -- <0595> swapra = nop

-- ######## event mstimer1_handler -- = 0x0a1b
-- anmux signal has settled.

    0a1b : 6600 ; -- <0599> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0a1c : 6a36 ; -- <0599> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    0a1d : 0017 ; -- <0599> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0a1e : 0018 ; -- <0599> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle

    0a1f : 0000 ; -- <0604> a = a
    0a20 : 0600 ; -- <0604> b = 0

    0a21 : e007 ; -- <0600> br eq :else_2593
    0a22 : 0a26 ; -- <0600> "

-- ADC is busy right now.  wait a while & try again.
    0a23 : 5202 ; -- <0602> mstimer1 = $anmux_retry_ms
    0a24 : e00f ; -- <0603> event_return
    0a25 : 009e ; -- <0603> "


-- start a reading from the current anmux channel.
    0a26 : 6600 ; -- <0607> ram a = $ram_enable_status_report -- av_ad_hi = 0
    0a27 : 6a3c ; -- <0607> ram a = $ram_enable_status_report -- av_ad_lo = 60
    0a28 : 0017 ; -- <0607> ram a = $ram_enable_status_report -- a = av_write_data -- start read cycle
    0a29 : 0018 ; -- <0607> ram a = $ram_enable_status_report -- a = av_read_data -- finish read cycle

    0a2a : 0000 ; -- <0615> a = a
    0a2b : 0600 ; -- <0615> b = 0

    0a2c : e007 ; -- <0608> br eq :else_2604
    0a2d : 0a43 ; -- <0608> "

    0a2e : 0220 ; -- <0609> a = 32 -- putasc " "
    0a2f : fba0 ; -- <0609> putasc " "
    0a30 : 00ab ; -- <0609> "
    0a31 : fc00 ; -- <0609> "
    0a32 : 0273 ; -- <0610> a = 115 -- putasc "s"
    0a33 : fba0 ; -- <0610> putasc "s"
    0a34 : 00ab ; -- <0610> "
    0a35 : fc00 ; -- <0610> "
    0a36 : fba0 ; -- <0611> call :anmux_get_chn
    0a37 : 00c6 ; -- <0611> "
    0a38 : fc00 ; -- <0611> "
    0a39 : 0630 ; -- <0612> b = 48 -- asc b = "0"
    0a3a : c800 ; -- <0613> a = a+b -- putchar a+b
    0a3b : 0300 ; -- <0613> "
    0a3c : fba0 ; -- <0613> putchar a+b
    0a3d : 00ab ; -- <0613> "
    0a3e : fc00 ; -- <0613> "
    0a3f : 023d ; -- <0614> a = 61 -- putasc "="
    0a40 : fba0 ; -- <0614> putasc "="
    0a41 : 00ab ; -- <0614> "
    0a42 : fc00 ; -- <0614> "

    0a43 : 2207 ; -- <0616> pa = 7
    0a44 : fba0 ; -- <0616> callx  begin_adc_conversion  $anmux_adc_channel
    0a45 : 0a49 ; -- <0616> "
    0a46 : fc00 ; -- <0616> "
    0a47 : e00f ; -- <0617> end_event
    0a48 : 009e ; -- <0617> "

-- ######## func begin_adc_conversion -- = 0x0a49

-- begin SPI transaction, specifying Nano ADC channel to take effect NEXT
-- conversion after this one.

    0a49 : 6600 ; -- <0623> ram $ram_adc_chn_pending = next_channel -- av_ad_hi = 0
    0a4a : 6a36 ; -- <0623> ram $ram_adc_chn_pending = next_channel -- av_ad_lo = 54
    0a4b : 5c08 ; -- <0623> ram $ram_adc_chn_pending = next_channel -- av_write_data = next_channel
    0a4c : 0008 ; -- <0624> a = next_channel
    0a4d : 0352 ; -- <0625> a = a<<4
    0a4e : 0352 ; -- <0626> a = a<<4
    0a4f : 0351 ; -- <0627> a = a<<1
    0a50 : 0351 ; -- <0628> a = a<<1
    0a51 : 0351 ; -- <0629> a = a<<1
    0a52 : 5800 ; -- <0630> spi_data = a
    0a53 : 6600 ; -- <0631> ram $ram_adc_junk = 1 -- av_ad_hi = 0
    0a54 : 6a38 ; -- <0631> ram $ram_adc_junk = 1 -- av_ad_lo = 56
    0a55 : 5e01 ; -- <0631> ram $ram_adc_junk = 1 -- av_write_data = 1

    0a56 : fc00 ; -- <0633> swapra = nop

-- ######## event spi_done_handler -- = 0x0a57
-- discard the results of the first SPI exchange with the ADC.  that's only for writing the channel num out to the ADC.
    0a57 : 6600 ; -- <0636> ram a = $ram_adc_junk -- av_ad_hi = 0
    0a58 : 6a38 ; -- <0636> ram a = $ram_adc_junk -- av_ad_lo = 56
    0a59 : 0017 ; -- <0636> ram a = $ram_adc_junk -- a = av_write_data -- start read cycle
    0a5a : 0018 ; -- <0636> ram a = $ram_adc_junk -- a = av_read_data -- finish read cycle

    0a5b : 0000 ; -- <0648> a = a
    0a5c : 0600 ; -- <0648> b = 0

    0a5d : e007 ; -- <0637> br eq :else_2653
    0a5e : 0a6e ; -- <0637> "

-- start another SPI exchange to retrieve the actual reading.
    0a5f : 6600 ; -- <0639> ram a = $ram_adc_chn_pending -- av_ad_hi = 0
    0a60 : 6a36 ; -- <0639> ram a = $ram_adc_chn_pending -- av_ad_lo = 54
    0a61 : 0017 ; -- <0639> ram a = $ram_adc_chn_pending -- a = av_write_data -- start read cycle
    0a62 : 0018 ; -- <0639> ram a = $ram_adc_chn_pending -- a = av_read_data -- finish read cycle
    0a63 : 0352 ; -- <0640> a = a<<4
    0a64 : 0352 ; -- <0641> a = a<<4
    0a65 : 0351 ; -- <0642> a = a<<1
    0a66 : 0351 ; -- <0643> a = a<<1
    0a67 : 0351 ; -- <0644> a = a<<1
    0a68 : 5800 ; -- <0645> spi_data = a
    0a69 : 6600 ; -- <0646> ram $ram_adc_junk = 0 -- av_ad_hi = 0
    0a6a : 6a38 ; -- <0646> ram $ram_adc_junk = 0 -- av_ad_lo = 56
    0a6b : 5e00 ; -- <0646> ram $ram_adc_junk = 0 -- av_write_data = 0
    0a6c : e00f ; -- <0647> event_return
    0a6d : 009e ; -- <0647> "


-- memorize an actual ADC reading.
    0a6e : 6600 ; -- <0651> ram i = $ram_adc_chn_pending -- av_ad_hi = 0
    0a6f : 6a36 ; -- <0651> ram i = $ram_adc_chn_pending -- av_ad_lo = 54
    0a70 : 0817 ; -- <0651> ram i = $ram_adc_chn_pending -- i = av_write_data -- start read cycle
    0a71 : 0818 ; -- <0651> ram i = $ram_adc_chn_pending -- i = av_read_data -- finish read cycle
    0a72 : 6600 ; -- <0652> ram $ram_adc_chn_pending = 0 -- av_ad_hi = 0
    0a73 : 6a36 ; -- <0652> ram $ram_adc_chn_pending = 0 -- av_ad_lo = 54
    0a74 : 5e00 ; -- <0652> ram $ram_adc_chn_pending = 0 -- av_write_data = 0
    0a75 : 3016 ; -- <0653> push spi_data -- push spi_data
    0a76 : 0002 ; -- <0653> a = i

    0a77 : 0351 ; -- <0653> a = a<<1
    0a78 : 0626 ; -- <0653> b = 38
    0a79 : 6600 ; -- <0653> av_ad_hi = 0
    0a7a : 6b00 ; -- <0653> av_ad_lo = ad0

    0a7b : 5c0c ; -- <0653> pop av_write_data -- pop av_write_data

-- react to ADC reading.

    0a7c : 0002 ; -- <0660> a = i
    0a7d : 0606 ; -- <0660> b = 6

    0a7e : e407 ; -- <0656> bn eq :else_2686
    0a7f : 0a89 ; -- <0656> "

    0a80 : 2205 ; -- <0657> pa = 5
    0a81 : fba0 ; -- <0657> callx  begin_adc_conversion  $o2_adc_channel
    0a82 : 0a49 ; -- <0657> "
    0a83 : fc00 ; -- <0657> "
    0a84 : fba0 ; -- <0658> callx  interpret_tps
    0a85 : 0c81 ; -- <0658> "
    0a86 : fc00 ; -- <0658> "
    0a87 : e00f ; -- <0659> event_return
    0a88 : 009e ; -- <0659> "


    0a89 : 0002 ; -- <0664> a = i
    0a8a : 0605 ; -- <0664> b = 5

    0a8b : e407 ; -- <0661> bn eq :else_2699
    0a8c : 0a93 ; -- <0661> "

    0a8d : 2204 ; -- <0662> pa = 4
    0a8e : fba0 ; -- <0662> callx  begin_adc_conversion  $maf_adc_channel
    0a8f : 0a49 ; -- <0662> "
    0a90 : fc00 ; -- <0662> "
    0a91 : e00f ; -- <0663> event_return
    0a92 : 009e ; -- <0663> "


    0a93 : 0002 ; -- <0669> a = i
    0a94 : 0604 ; -- <0669> b = 4

    0a95 : e407 ; -- <0665> bn eq :else_2709
    0a96 : 0a9f ; -- <0665> "

    0a97 : fba0 ; -- <0666> callx  interpret_maf
    0a98 : 0c42 ; -- <0666> "
    0a99 : fc00 ; -- <0666> "
    0a9a : fba0 ; -- <0667> callx  plan_tick
    0a9b : 08ec ; -- <0667> "
    0a9c : fc00 ; -- <0667> "
    0a9d : e00f ; -- <0668> event_return
    0a9e : 009e ; -- <0668> "


    0a9f : 0002 ; -- <0708> a = i
    0aa0 : 0607 ; -- <0708> b = 7

    0aa1 : e407 ; -- <0670> bn eq :else_2721
    0aa2 : 0ae6 ; -- <0670> "

    0aa3 : 6600 ; -- <0671> ram a = $ram_enable_status_report -- av_ad_hi = 0
    0aa4 : 6a3c ; -- <0671> ram a = $ram_enable_status_report -- av_ad_lo = 60
    0aa5 : 0017 ; -- <0671> ram a = $ram_enable_status_report -- a = av_write_data -- start read cycle
    0aa6 : 0018 ; -- <0671> ram a = $ram_enable_status_report -- a = av_read_data -- finish read cycle

    0aa7 : 0000 ; -- <0677> a = a
    0aa8 : 0600 ; -- <0677> b = 0

    0aa9 : e007 ; -- <0672> br eq :else_2729
    0aaa : 0aaf ; -- <0672> "

-- report anmux reading.
    0aab : 0016 ; -- <0674> a = spi_data

    0aac : fba0 ; -- <0676> call :put4x
    0aad : 00d3 ; -- <0676> "
    0aae : fc00 ; -- <0676> "


-- memorize anmux reading.
    0aaf : fba0 ; -- <0680> call :anmux_get_chn
    0ab0 : 00c6 ; -- <0680> "
    0ab1 : fc00 ; -- <0680> "
    0ab2 : 3016 ; -- <0681> push spi_data -- push spi_data

    0ab3 : 0351 ; -- <0681> a = a<<1
    0ab4 : 0616 ; -- <0681> b = 22
    0ab5 : 6600 ; -- <0681> av_ad_hi = 0
    0ab6 : 6b00 ; -- <0681> av_ad_lo = ad0

    0ab7 : 5c0c ; -- <0681> pop av_write_data -- pop av_write_data

-- decrement anmux channel & start waiting again.
    0ab8 : fba0 ; -- <0684> call :anmux_get_chn
    0ab9 : 00c6 ; -- <0684> "
    0aba : fc00 ; -- <0684> "

    0abb : 0000 ; -- <0691> a = a
    0abc : 0600 ; -- <0691> b = 0

    0abd : e007 ; -- <0685> br eq :else_2749
    0abe : 0ac8 ; -- <0685> "

    0abf : 0760 ; -- <0686> b = -1
    0ac0 : c800 ; -- <0687> a = a+b
    0ac1 : 0300 ; -- <0687> "
    0ac2 : fba0 ; -- <0688> call :anmux_set_chn
    0ac3 : 00c2 ; -- <0688> "
    0ac4 : fc00 ; -- <0688> "
    0ac5 : 5205 ; -- <0689> mstimer1 = $anmux_settle_ms
    0ac6 : e00f ; -- <0690> event_return
    0ac7 : 009e ; -- <0690> "


-- end of temperature daq pass.
    0ac8 : fba0 ; -- <0694> callx  interpret_block_temp
    0ac9 : 062e ; -- <0694> "
    0aca : fc00 ; -- <0694> "

-- wrap up status report on UART.
    0acb : 6600 ; -- <0697> ram a = $ram_enable_status_report -- av_ad_hi = 0
    0acc : 6a3c ; -- <0697> ram a = $ram_enable_status_report -- av_ad_lo = 60
    0acd : 0017 ; -- <0697> ram a = $ram_enable_status_report -- a = av_write_data -- start read cycle
    0ace : 0018 ; -- <0697> ram a = $ram_enable_status_report -- a = av_read_data -- finish read cycle

    0acf : 0000 ; -- <0702> a = a
    0ad0 : 0600 ; -- <0702> b = 0

    0ad1 : e007 ; -- <0698> br eq :else_2769
    0ad2 : 0ae1 ; -- <0698> "

    0ad3 : fba0 ; -- <0699> callx  report_plan
    0ad4 : 0c27 ; -- <0699> "
    0ad5 : fc00 ; -- <0699> "
    0ad6 : fba0 ; -- <0700> callx  report_text_flags
    0ad7 : 0bf6 ; -- <0700> "
    0ad8 : fc00 ; -- <0700> "
    0ad9 : 020d ; -- <0701> a = 13 -- puteol
    0ada : fba0 ; -- <0701> puteol
    0adb : 00ab ; -- <0701> "
    0adc : fc00 ; -- <0701> "
    0add : 020a ; -- <0701> a = 10 -- puteol
    0ade : fba0 ; -- <0701> puteol
    0adf : 00ab ; -- <0701> "
    0ae0 : fc00 ; -- <0701> "


--TODO: is this a hack??
    0ae1 : 6600 ; -- <0705> ram $ram_dial_setting = spi_data -- av_ad_hi = 0
    0ae2 : 6a3a ; -- <0705> ram $ram_dial_setting = spi_data -- av_ad_lo = 58
    0ae3 : 5c16 ; -- <0705> ram $ram_dial_setting = spi_data -- av_write_data = spi_data

    0ae4 : e00f ; -- <0707> event_return
    0ae5 : 009e ; -- <0707> "

    0ae6 : e00f ; -- <0709> end_event
    0ae7 : 009e ; -- <0709> "

-- :power_lost_msg -- = 0x0ae8
-- "PWL\x0"
    0ae8 : 5750 ; -- <0712> WP
    0ae9 : 004c ; -- <0712>  L

-- ######## event power_lost_handler -- = 0x0aea
-- at this time we have less than 2 ms of usable run time left.

-- this must be an uncommanded loss of main power, because if it was commanded,
-- no more events would be handled; this event handler wouldn't have a chance to run.
-- immediately set the power relay PWM to full power for a few seconds,
-- in case the power relay opened accidentally e.g. due to a hard pothole.
    0aea : 8a00 ; -- <0721> power_duty = $power_duty_closing
    0aeb : 6600 ; -- <0722> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0aec : 6a14 ; -- <0722> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0aed : 0017 ; -- <0722> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0aee : 0018 ; -- <0722> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0aef : 0602 ; -- <0723> b = $relay_hold_passes
    0af0 : 6600 ; -- <0724> ram $ram_relay_hold_at_pass = a+b -- av_ad_hi = 0
    0af1 : 6a40 ; -- <0724> ram $ram_relay_hold_at_pass = a+b -- av_ad_lo = 64
    0af2 : c800 ; -- <0724> ram $ram_relay_hold_at_pass = a+b -- av_write_data = a+b
    0af3 : 5f00 ; -- <0724> "

-- pause any non-vital power-hogging operations, to conserve power for the EEPROM write.

-- save persistent data in case the power remains down e.g. due to battery disconnect.
    0af4 : fba0 ; -- <0729> callx  save_persistent_data
    0af5 : 0b61 ; -- <0729> "
    0af6 : fc00 ; -- <0729> "

    0af7 : 23a0 ; -- <0731> pa = :power_lost_msg
    0af8 : 0ae8 ; -- <0731> "
    0af9 : fba0 ; -- <0731> callx  set_text_flag  :power_lost_msg
    0afa : 0bc0 ; -- <0731> "
    0afb : fc00 ; -- <0731> "
    0afc : e00f ; -- <0732> end_event
    0afd : 009e ; -- <0732> "

-- :ign_off_msg -- = 0x0afe
-- "IGOF\x0"
    0afe : 4749 ; -- <0735> GI
    0aff : 464f ; -- <0735> FO
    0b00 : 0000 ; -- <0735>   

-- ######## event ign_switch_off_handler -- = 0x0b01
-- set power-down deadline in RAM.  this makes the system remain powered for several more minutes, for cooldown data logging.
    0b01 : 6600 ; -- <0739> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0b02 : 6a42 ; -- <0739> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0b03 : 0017 ; -- <0739> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0b04 : 0018 ; -- <0739> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0b05 : 060a ; -- <0740> b = $power_extend_minutes
    0b06 : 6600 ; -- <0741> ram $ram_power_down_at_min = a+b -- av_ad_hi = 0
    0b07 : 6a3e ; -- <0741> ram $ram_power_down_at_min = a+b -- av_ad_lo = 62
    0b08 : c800 ; -- <0741> ram $ram_power_down_at_min = a+b -- av_write_data = a+b
    0b09 : 5f00 ; -- <0741> "
    0b0a : 23a0 ; -- <0742> pa = :ign_off_msg
    0b0b : 0afe ; -- <0742> "
    0b0c : fba0 ; -- <0742> callx  set_text_flag   :ign_off_msg
    0b0d : 0bc0 ; -- <0742> "
    0b0e : fc00 ; -- <0742> "
    0b0f : e00f ; -- <0743> end_event
    0b10 : 009e ; -- <0743> "

-- :ign_on_msg -- = 0x0b11
-- "IGON\x0"
    0b11 : 4749 ; -- <0746> GI
    0b12 : 4e4f ; -- <0746> NO
    0b13 : 0000 ; -- <0746>   

-- ######## event ign_switch_on_handler -- = 0x0b14
    0b14 : 6600 ; -- <0749> ram $ram_power_down_at_min = $power_down_never -- av_ad_hi = 0
    0b15 : 6a3e ; -- <0749> ram $ram_power_down_at_min = $power_down_never -- av_ad_lo = 62
    0b16 : 5f60 ; -- <0749> ram $ram_power_down_at_min = $power_down_never -- av_write_data = 0xffff
    0b17 : 23a0 ; -- <0750> pa = :ign_on_msg
    0b18 : 0b11 ; -- <0750> "
    0b19 : fba0 ; -- <0750> callx  set_text_flag   :ign_on_msg
    0b1a : 0bc0 ; -- <0750> "
    0b1b : fc00 ; -- <0750> "
    0b1c : e00f ; -- <0751> end_event
    0b1d : 009e ; -- <0751> "

-- ######## event puff1_done_handler -- = 0x0b1e
-- puff just finished.  set length of next puff.
    0b1e : 6600 ; -- <0755> ram puff_len_us = $ram_next_puff_len_us -- av_ad_hi = 0
    0b1f : 6a92 ; -- <0755> ram puff_len_us = $ram_next_puff_len_us -- av_ad_lo = 146
    0b20 : 9417 ; -- <0755> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_write_data -- start read cycle
    0b21 : 9418 ; -- <0755> ram puff_len_us = $ram_next_puff_len_us -- puff_len_us = av_read_data -- finish read cycle

-- count puffs.
    0b22 : 6600 ; -- <0758> ram a = $ram_puff_count -- av_ad_hi = 0
    0b23 : 6a94 ; -- <0758> ram a = $ram_puff_count -- av_ad_lo = 148
    0b24 : 0017 ; -- <0758> ram a = $ram_puff_count -- a = av_write_data -- start read cycle
    0b25 : 0018 ; -- <0758> ram a = $ram_puff_count -- a = av_read_data -- finish read cycle
    0b26 : 0601 ; -- <0759> b = 1
    0b27 : 6600 ; -- <0760> ram $ram_puff_count = a+b -- av_ad_hi = 0
    0b28 : 6a94 ; -- <0760> ram $ram_puff_count = a+b -- av_ad_lo = 148
    0b29 : c800 ; -- <0760> ram $ram_puff_count = a+b -- av_write_data = a+b
    0b2a : 5f00 ; -- <0760> "

-- hack to set puff length strictly by a hard-wired knob.
-- ram a = $ram_dial_setting
-- a = a<<1
-- a = a<<1
-- a = a<<1
-- bn az :nonzero
-- a = 1
-- :nonzero
-- puff_len_us = a
    0b2b : e00f ; -- <0771> end_event
    0b2c : 009e ; -- <0771> "

-- ######## func minute_events -- = 0x0b2d
    0b2d : 303e ; -- <0775> push rtna -- func minute_events

    0b2e : fba0 ; -- <0774> callx  check_power_down
    0b2f : 0b4a ; -- <0774> "
    0b30 : fc00 ; -- <0774> "

    0b31 : f80c ; -- <0776> pop rtna -- func minute_events
    0b32 : fc00 ; -- <0776> swapra = nop

-- :power_hold_msg -- = 0x0b33
-- "PWH\x0"
    0b33 : 5750 ; -- <0778> WP
    0b34 : 0048 ; -- <0778>  H

-- ######## func check_power_relay -- = 0x0b35
    0b35 : 303e ; -- <0788> push rtna -- func check_power_relay

    0b36 : 6600 ; -- <0781> ram a = $ram_daq_pass_cnt -- av_ad_hi = 0
    0b37 : 6a14 ; -- <0781> ram a = $ram_daq_pass_cnt -- av_ad_lo = 20
    0b38 : 0017 ; -- <0781> ram a = $ram_daq_pass_cnt -- a = av_write_data -- start read cycle
    0b39 : 0018 ; -- <0781> ram a = $ram_daq_pass_cnt -- a = av_read_data -- finish read cycle
    0b3a : 6600 ; -- <0782> ram b = $ram_relay_hold_at_pass -- av_ad_hi = 0
    0b3b : 6a40 ; -- <0782> ram b = $ram_relay_hold_at_pass -- av_ad_lo = 64
    0b3c : 0417 ; -- <0782> ram b = $ram_relay_hold_at_pass -- b = av_write_data -- start read cycle
    0b3d : 0418 ; -- <0782> ram b = $ram_relay_hold_at_pass -- b = av_read_data -- finish read cycle

    0b3e : 0000 ; -- <0787> a = a
    0b3f : 0401 ; -- <0787> b = b

    0b40 : e407 ; -- <0783> bn eq :else_2880
    0b41 : 0b48 ; -- <0783> "

-- time to begin "solenoid saver" coil power reduction by PWM.
    0b42 : 8a19 ; -- <0785> power_duty = $power_duty_holding
    0b43 : 23a0 ; -- <0786> pa = :power_hold_msg
    0b44 : 0b33 ; -- <0786> "
    0b45 : fba0 ; -- <0786> callx  set_text_flag  :power_hold_msg
    0b46 : 0bc0 ; -- <0786> "
    0b47 : fc00 ; -- <0786> "


    0b48 : f80c ; -- <0789> pop rtna -- func check_power_relay
    0b49 : fc00 ; -- <0789> swapra = nop

-- ######## func check_power_down -- = 0x0b4a

-- check power-down deadline in RAM.
    0b4a : 6600 ; -- <0792> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0b4b : 6a42 ; -- <0792> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0b4c : 0017 ; -- <0792> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0b4d : 0018 ; -- <0792> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0b4e : 6600 ; -- <0793> ram b = $ram_power_down_at_min -- av_ad_hi = 0
    0b4f : 6a3e ; -- <0793> ram b = $ram_power_down_at_min -- av_ad_lo = 62
    0b50 : 0417 ; -- <0793> ram b = $ram_power_down_at_min -- b = av_write_data -- start read cycle
    0b51 : 0418 ; -- <0793> ram b = $ram_power_down_at_min -- b = av_read_data -- finish read cycle

    0b52 : 0000 ; -- <0796> a = a
    0b53 : 0401 ; -- <0796> b = b

    0b54 : e407 ; -- <0794> bn eq :else_2900
    0b55 : 0b58 ; -- <0794> "

    0b56 : e00f ; -- <0795> jmp :power_down
    0b57 : 0b59 ; -- <0795> "


    0b58 : fc00 ; -- <0798> swapra = nop

-- :power_down -- = 0x0b59
-- this code never returns.
    0b59 : fba0 ; -- <0801> callx  save_persistent_data
    0b5a : 0b61 ; -- <0801> "
    0b5b : fc00 ; -- <0801> "
    0b5c : 8a32 ; -- <0802> power_duty = $power_duty_opening
    0b5d : 7fa0 ; -- <0803> error_halt_code $err_power_down -- leds = 0xfffc
    0b5e : fffc ; -- <0803> "
    0b5f : e00f ; -- <0803> error_halt_code $err_power_down
    0b60 : 0b5f ; -- <0803> "

-- ######## func save_persistent_data -- = 0x0b61


    0b61 : fc00 ; -- <0807> swapra = nop

-- ######## func check_communication -- = 0x0b62
    0b62 : 303e ; -- <0827> push rtna -- func check_communication

    0b63 : 6600 ; -- <0809> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_hi = 0
    0b64 : 6a12 ; -- <0809> ram a = $ram_ftdi_downtime_remain_sec -- av_ad_lo = 18
    0b65 : 0017 ; -- <0809> ram a = $ram_ftdi_downtime_remain_sec -- a = av_write_data -- start read cycle
    0b66 : 0018 ; -- <0809> ram a = $ram_ftdi_downtime_remain_sec -- a = av_read_data -- finish read cycle

    0b67 : 0000 ; -- <0817> a = a
    0b68 : 0600 ; -- <0817> b = 0

    0b69 : e007 ; -- <0810> br eq :else_2921
    0b6a : 0b78 ; -- <0810> "

    0b6b : 0760 ; -- <0811> b = -1
    0b6c : c800 ; -- <0812> a = a+b
    0b6d : 0300 ; -- <0812> "
    0b6e : 6600 ; -- <0813> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_hi = 0
    0b6f : 6a12 ; -- <0813> ram $ram_ftdi_downtime_remain_sec = a -- av_ad_lo = 18
    0b70 : 5c00 ; -- <0813> ram $ram_ftdi_downtime_remain_sec = a -- av_write_data = a

    0b71 : 0000 ; -- <0816> a = a
    0b72 : 0600 ; -- <0816> b = 0

    0b73 : e407 ; -- <0814> bn eq :else_2931
    0b74 : 0b78 ; -- <0814> "

    0b75 : fba0 ; -- <0815> callx  ftdi_power_on
    0b76 : 0bac ; -- <0815> "
    0b77 : fc00 ; -- <0815> "



    0b78 : 6600 ; -- <0819> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0b79 : 6a42 ; -- <0819> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0b7a : 0017 ; -- <0819> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0b7b : 0018 ; -- <0819> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0b7c : 6600 ; -- <0820> ram b = $ram_comm_restart_at_min -- av_ad_hi = 0
    0b7d : 6a10 ; -- <0820> ram b = $ram_comm_restart_at_min -- av_ad_lo = 16
    0b7e : 0417 ; -- <0820> ram b = $ram_comm_restart_at_min -- b = av_write_data -- start read cycle
    0b7f : 0418 ; -- <0820> ram b = $ram_comm_restart_at_min -- b = av_read_data -- finish read cycle

    0b80 : 0000 ; -- <0826> a = a
    0b81 : 0401 ; -- <0826> b = b

    0b82 : e407 ; -- <0821> bn eq :else_2946
    0b83 : 0b8d ; -- <0821> "

-- comm restart is required.
    0b84 : fba0 ; -- <0823> callx  postpone_comm_restart
    0b85 : 0b8f ; -- <0823> "
    0b86 : fc00 ; -- <0823> "
    0b87 : 6600 ; -- <0824> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_hi = 0
    0b88 : 6a12 ; -- <0824> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_ad_lo = 18
    0b89 : 5e05 ; -- <0824> ram $ram_ftdi_downtime_remain_sec = $ftdi_down_period_sec -- av_write_data = 5
    0b8a : fba0 ; -- <0825> callx  ftdi_power_off
    0b8b : 0b9c ; -- <0825> "
    0b8c : fc00 ; -- <0825> "


    0b8d : f80c ; -- <0828> pop rtna -- func check_communication
    0b8e : fc00 ; -- <0828> swapra = nop

-- ######## func postpone_comm_restart -- = 0x0b8f

    0b8f : 6600 ; -- <0830> ram a = $ram_minutes_cnt -- av_ad_hi = 0
    0b90 : 6a42 ; -- <0830> ram a = $ram_minutes_cnt -- av_ad_lo = 66
    0b91 : 0017 ; -- <0830> ram a = $ram_minutes_cnt -- a = av_write_data -- start read cycle
    0b92 : 0018 ; -- <0830> ram a = $ram_minutes_cnt -- a = av_read_data -- finish read cycle
    0b93 : 0602 ; -- <0831> b = $comm_grace_period_min
    0b94 : 6600 ; -- <0832> ram $ram_comm_restart_at_min = a+b -- av_ad_hi = 0
    0b95 : 6a10 ; -- <0832> ram $ram_comm_restart_at_min = a+b -- av_ad_lo = 16
    0b96 : c800 ; -- <0832> ram $ram_comm_restart_at_min = a+b -- av_write_data = a+b
    0b97 : 5f00 ; -- <0832> "

    0b98 : fc00 ; -- <0834> swapra = nop

-- :ftdi_off_msg -- = 0x0b99
-- "FTOF\x0"
    0b99 : 5446 ; -- <0836> TF
    0b9a : 464f ; -- <0836> FO
    0b9b : 0000 ; -- <0836>   

-- ######## func ftdi_power_off -- = 0x0b9c
    0b9c : 303e ; -- <0843> push rtna -- func ftdi_power_off

    0b9d : 0020 ; -- <0839> a = board_ctrl
    0b9e : 07a0 ; -- <0840> b = $not_ftdi_power_mask
    0b9f : ff7f ; -- <0840> "
    0ba0 : c800 ; -- <0841> board_ctrl = and
    0ba1 : 8330 ; -- <0841> "
    0ba2 : 23a0 ; -- <0842> pa = :ftdi_off_msg
    0ba3 : 0b99 ; -- <0842> "
    0ba4 : fba0 ; -- <0842> callx  set_text_flag  :ftdi_off_msg
    0ba5 : 0bc0 ; -- <0842> "
    0ba6 : fc00 ; -- <0842> "

    0ba7 : f80c ; -- <0844> pop rtna -- func ftdi_power_off
    0ba8 : fc00 ; -- <0844> swapra = nop

-- :ftdi_on_msg -- = 0x0ba9
-- "FTON\x0"
    0ba9 : 5446 ; -- <0846> TF
    0baa : 4e4f ; -- <0846> NO
    0bab : 0000 ; -- <0846>   

-- ######## func ftdi_power_on -- = 0x0bac
    0bac : 303e ; -- <0853> push rtna -- func ftdi_power_on

    0bad : 0020 ; -- <0849> a = board_ctrl
    0bae : 0680 ; -- <0850> b = $ftdi_power_mask
    0baf : c800 ; -- <0851> board_ctrl = or
    0bb0 : 8334 ; -- <0851> "
    0bb1 : 23a0 ; -- <0852> pa = :ftdi_on_msg
    0bb2 : 0ba9 ; -- <0852> "
    0bb3 : fba0 ; -- <0852> callx  set_text_flag  :ftdi_on_msg
    0bb4 : 0bc0 ; -- <0852> "
    0bb5 : fc00 ; -- <0852> "

    0bb6 : f80c ; -- <0854> pop rtna -- func ftdi_power_on
    0bb7 : fc00 ; -- <0854> swapra = nop

-- ######## func clear_ram_page -- = 0x0bb8

    0bb8 : 0200 ; -- <0856> a = 0
    0bb9 : 0602 ; -- <0857> b = 2
-- :clear_next_word -- = 0x0bba
    0bba : 6800 ; -- <0859> av_ad_lo = a
    0bbb : 5e00 ; -- <0860> av_write_data = 0
    0bbc : 0300 ; -- <0861> a = ad0
    0bbd : e400 ; -- <0862> bn az :clear_next_word
    0bbe : 0bba ; -- <0862> "

    0bbf : fc00 ; -- <0864> swapra = nop

-- ######## func set_text_flag -- = 0x0bc0

    0bc0 : 6600 ; -- <0866> ram a = $ram_next_tfp_idx -- av_ad_hi = 0
    0bc1 : 6a58 ; -- <0866> ram a = $ram_next_tfp_idx -- av_ad_lo = 88
    0bc2 : 0017 ; -- <0866> ram a = $ram_next_tfp_idx -- a = av_write_data -- start read cycle
    0bc3 : 0018 ; -- <0866> ram a = $ram_next_tfp_idx -- a = av_read_data -- finish read cycle
    0bc4 : 3008 ; -- <0867> push flag_addr -- push flag_addr

    0bc5 : 0351 ; -- <0867> a = a<<1
    0bc6 : 0648 ; -- <0867> b = 72
    0bc7 : 6600 ; -- <0867> av_ad_hi = 0
    0bc8 : 6b00 ; -- <0867> av_ad_lo = ad0

    0bc9 : 5c0c ; -- <0867> pop av_write_data -- pop av_write_data
    0bca : 0008 ; -- <0868> a = flag_addr
--TODO: ^^^ is this a bug?  should be ram a = $ram_next_tfp_idx instead??
    0bcb : 0760 ; -- <0870> b = -1
    0bcc : c800 ; -- <0871> a = a+b
    0bcd : 0300 ; -- <0871> "
    0bce : 0607 ; -- <0872> b = $tfp_mask
    0bcf : 6600 ; -- <0873> ram $ram_next_tfp_idx = and -- av_ad_hi = 0
    0bd0 : 6a58 ; -- <0873> ram $ram_next_tfp_idx = and -- av_ad_lo = 88
    0bd1 : c800 ; -- <0873> ram $ram_next_tfp_idx = and -- av_write_data = and
    0bd2 : 5f30 ; -- <0873> "

    0bd3 : fc00 ; -- <0875> swapra = nop

-- ######## func unique_text_flag -- = 0x0bd4
    0bd4 : 3002 ; -- <0885> push i -- func unique_text_flag
    0bd5 : 303e ; -- <0885> push rtna -- "

    0bd6 : 0a00 ; -- <0882> i = 0
-- :loop_3030 -- = 0x0bd7

    0bd7 : 0002 ; -- <0877> a = i

    0bd8 : 0351 ; -- <0877> a = a<<1
    0bd9 : 0648 ; -- <0877> b = 72
    0bda : 6600 ; -- <0877> av_ad_hi = 0
    0bdb : 6b00 ; -- <0877> av_ad_lo = ad0
    0bdc : 0417 ; -- <0877> b = av_begin_read

    0bdd : 0418 ; -- <0877> b = av_read_data

    0bde : 0001 ; -- <0880> a = b
    0bdf : 0408 ; -- <0880> b = flag_addr

    0be0 : e407 ; -- <0878> bn eq :else_3040
    0be1 : 0be4 ; -- <0878> "

    0be2 : e00f ; -- <0879> jmp :skip
    0be3 : 0bf0 ; -- <0879> "



    0be4 : 0002 ; -- <0882> a = i
    0be5 : 0601 ; -- <0882> b = 1
    0be6 : c800 ; -- <0882> i = a+b
    0be7 : 0b00 ; -- <0882> "


    0be8 : 0002 ; -- <0882> a = i
    0be9 : 0608 ; -- <0882> b = $num_text_flag_pointers
    0bea : e005 ; -- <0882> br lt :loop_3030
    0beb : 0bd7 ; -- <0882> "

-- :end_3030 -- = 0x0bec
    0bec : 2008 ; -- <0883> pa = flag_addr
    0bed : fba0 ; -- <0883> callx  set_text_flag  flag_addr
    0bee : 0bc0 ; -- <0883> "
    0bef : fc00 ; -- <0883> "
-- :skip -- = 0x0bf0

    0bf0 : f80c ; -- <0886> pop rtna -- func unique_text_flag
    0bf1 : 080c ; -- <0886> pop i -- "
    0bf2 : fc00 ; -- <0886> swapra = nop

-- :text_flags_msg -- = 0x0bf3
-- " tf=\x0"
    0bf3 : 7420 ; -- <0888> t 
    0bf4 : 3d66 ; -- <0888> =f
    0bf5 : 0000 ; -- <0888>   

-- ######## func report_text_flags -- = 0x0bf6
    0bf6 : 3002 ; -- <0901> push i -- func report_text_flags
    0bf7 : 303e ; -- <0901> push rtna -- "

    0bf8 : 03a0 ; -- <0891> a = :text_flags_msg
    0bf9 : 0bf3 ; -- <0891> "
    0bfa : fba0 ; -- <0892> call :print_nt
    0bfb : 015f ; -- <0892> "
    0bfc : fc00 ; -- <0892> "
    0bfd : 0a00 ; -- <0900> i = 0
-- :loop_3069 -- = 0x0bfe

    0bfe : 0002 ; -- <0893> a = i

    0bff : 0351 ; -- <0893> a = a<<1
    0c00 : 0648 ; -- <0893> b = 72
    0c01 : 6600 ; -- <0893> av_ad_hi = 0
    0c02 : 6b00 ; -- <0893> av_ad_lo = ad0
    0c03 : 0417 ; -- <0893> b = av_begin_read

    0c04 : 0418 ; -- <0893> b = av_read_data

    0c05 : 0001 ; -- <0898> a = b
    0c06 : 0600 ; -- <0898> b = 0

    0c07 : e007 ; -- <0894> br eq :else_3079
    0c08 : 0c16 ; -- <0894> "

    0c09 : fba0 ; -- <0895> call :print_nt
    0c0a : 015f ; -- <0895> "
    0c0b : fc00 ; -- <0895> "
    0c0c : 022c ; -- <0896> a = 44 -- putasc ","
    0c0d : fba0 ; -- <0896> putasc ","
    0c0e : 00ab ; -- <0896> "
    0c0f : fc00 ; -- <0896> "
    0c10 : 0002 ; -- <0897> a = i

    0c11 : 0351 ; -- <0897> a = a<<1
    0c12 : 0648 ; -- <0897> b = 72
    0c13 : 6600 ; -- <0897> av_ad_hi = 0
    0c14 : 6b00 ; -- <0897> av_ad_lo = ad0

    0c15 : 5e00 ; -- <0897> av_write_data = 0



    0c16 : 0002 ; -- <0900> a = i
    0c17 : 0601 ; -- <0900> b = 1
    0c18 : c800 ; -- <0900> i = a+b
    0c19 : 0b00 ; -- <0900> "


    0c1a : 0002 ; -- <0900> a = i
    0c1b : 0608 ; -- <0900> b = $num_text_flag_pointers
    0c1c : e005 ; -- <0900> br lt :loop_3069
    0c1d : 0bfe ; -- <0900> "

-- :end_3069 -- = 0x0c1e

    0c1e : f80c ; -- <0902> pop rtna -- func report_text_flags
    0c1f : 080c ; -- <0902> pop i -- "
    0c20 : fc00 ; -- <0902> swapra = nop

-- :plan_msg -- = 0x0c21
-- " pl=\x0"
    0c21 : 7020 ; -- <0904> p 
    0c22 : 3d6c ; -- <0904> =l
    0c23 : 0000 ; -- <0904>   
-- :manual_trim_msg -- = 0x0c24
-- " mt=\x0"
    0c24 : 6d20 ; -- <0906> m 
    0c25 : 3d74 ; -- <0906> =t
    0c26 : 0000 ; -- <0906>   

-- ######## func report_plan -- = 0x0c27
    0c27 : 303e ; -- <0918> push rtna -- func report_plan

    0c28 : 03a0 ; -- <0909> a = :plan_msg
    0c29 : 0c21 ; -- <0909> "
    0c2a : fba0 ; -- <0910> call :print_nt
    0c2b : 015f ; -- <0910> "
    0c2c : fc00 ; -- <0910> "
    0c2d : 6600 ; -- <0911> ram a = $ram_plan_name -- av_ad_hi = 0
    0c2e : 6a8a ; -- <0911> ram a = $ram_plan_name -- av_ad_lo = 138
    0c2f : 0017 ; -- <0911> ram a = $ram_plan_name -- a = av_write_data -- start read cycle
    0c30 : 0018 ; -- <0911> ram a = $ram_plan_name -- a = av_read_data -- finish read cycle
    0c31 : fba0 ; -- <0912> call :print_nt
    0c32 : 015f ; -- <0912> "
    0c33 : fc00 ; -- <0912> "

    0c34 : 03a0 ; -- <0914> a = :manual_trim_msg
    0c35 : 0c24 ; -- <0914> "
    0c36 : fba0 ; -- <0915> call :print_nt
    0c37 : 015f ; -- <0915> "
    0c38 : fc00 ; -- <0915> "
    0c39 : 6600 ; -- <0916> ram a = $ram_run_manual_trim -- av_ad_hi = 0
    0c3a : 6aac ; -- <0916> ram a = $ram_run_manual_trim -- av_ad_lo = 172
    0c3b : 0017 ; -- <0916> ram a = $ram_run_manual_trim -- a = av_write_data -- start read cycle
    0c3c : 0018 ; -- <0916> ram a = $ram_run_manual_trim -- a = av_read_data -- finish read cycle
    0c3d : fba0 ; -- <0917> call :put4x
    0c3e : 00d3 ; -- <0917> "
    0c3f : fc00 ; -- <0917> "

    0c40 : f80c ; -- <0919> pop rtna -- func report_plan
    0c41 : fc00 ; -- <0919> swapra = nop

-- ######## func interpret_maf -- = 0x0c42
    0c42 : 3002 ; -- <0951> push i -- func interpret_maf
    0c43 : 3004 ; -- <0951> push x -- "

-- range 0 to 1023 = 0x3ff at the ADC.

-- offset and clamp the MAF ADC count to 0..511.
    0c44 : 0204 ; -- <0924> a = 4

    0c45 : 0351 ; -- <0924> a = a<<1
    0c46 : 0626 ; -- <0924> b = 38
    0c47 : 6600 ; -- <0924> av_ad_hi = 0
    0c48 : 6b00 ; -- <0924> av_ad_lo = ad0
    0c49 : 0417 ; -- <0924> b = av_begin_read

    0c4a : 0018 ; -- <0924> a = av_read_data
    0c4b : 0350 ; -- <0925> a = a>>1
    0c4c : 07a0 ; -- <0926> b = 0x01ff
    0c4d : 01ff ; -- <0926> "
--patch: do some averaging here, like interpret_tps.
    0c4e : c800 ; -- <0928> x = and
    0c4f : 1330 ; -- <0928> "
    0c50 : 6600 ; -- <0929> ram $ram_maf_adc_filtered = and -- av_ad_hi = 0
    0c51 : 6a9a ; -- <0929> ram $ram_maf_adc_filtered = and -- av_ad_lo = 154
    0c52 : c800 ; -- <0929> ram $ram_maf_adc_filtered = and -- av_write_data = and
    0c53 : 5f30 ; -- <0929> "

-- recover linear flow from MAF ADC count using hi-res method,
-- for actual flow feeding into final puff multiply later.
-- 256 cell Brute-force lookup might take e.g. 80us to run.  That's 4 jf,
-- or 5% of ignition cycle at max RPM.
    0c54 : 6600 ; -- <0935> ram $ram_maf_valid = 0 -- av_ad_hi = 0
    0c55 : 6a98 ; -- <0935> ram $ram_maf_valid = 0 -- av_ad_lo = 152
    0c56 : 5e00 ; -- <0935> ram $ram_maf_valid = 0 -- av_write_data = 0
    0c57 : 0a00 ; -- <0943> i = 0
-- :loop_3159 -- = 0x0c58

    0c58 : 0002 ; -- <0936> a = i

    0c59 : 0351 ; -- <0936> a = a<<1
    0c5a : 07a0 ; -- <0936> b = 2048
    0c5b : 0800 ; -- <0936> "
    0c5c : 67a0 ; -- <0936> av_ad_hi = 256
    0c5d : 0100 ; -- <0936> "
    0c5e : 6b00 ; -- <0936> av_ad_lo = ad0
    0c5f : 0417 ; -- <0936> b = av_begin_read

    0c60 : 0418 ; -- <0936> b = av_read_data

    0c61 : 0001 ; -- <0941> a = b
    0c62 : 0404 ; -- <0941> b = x

    0c63 : e406 ; -- <0937> bn gt :else_3171
    0c64 : 0c6d ; -- <0937> "

    0c65 : 6600 ; -- <0938> ram $ram_maf_flow_hi_res = i -- av_ad_hi = 0
    0c66 : 6a9c ; -- <0938> ram $ram_maf_flow_hi_res = i -- av_ad_lo = 156
    0c67 : 5c02 ; -- <0938> ram $ram_maf_flow_hi_res = i -- av_write_data = i
    0c68 : 6600 ; -- <0939> ram $ram_maf_valid = 1 -- av_ad_hi = 0
    0c69 : 6a98 ; -- <0939> ram $ram_maf_valid = 1 -- av_ad_lo = 152
    0c6a : 5e01 ; -- <0939> ram $ram_maf_valid = 1 -- av_write_data = 1
    0c6b : e00f ; -- <0940> jmp :maf_done
    0c6c : 0c76 ; -- <0940> "



    0c6d : 0002 ; -- <0943> a = i
    0c6e : 0601 ; -- <0943> b = 1
    0c6f : c800 ; -- <0943> i = a+b
    0c70 : 0b00 ; -- <0943> "


    0c71 : 0002 ; -- <0943> a = i
    0c72 : 07a0 ; -- <0943> b = $maf_ref_num_cells
    0c73 : 0100 ; -- <0943> "
    0c74 : e005 ; -- <0943> br lt :loop_3159
    0c75 : 0c58 ; -- <0943> "

-- :end_3159 -- = 0x0c76
-- :maf_done -- = 0x0c76

-- quantize linear flow from hi-res to lo-res for indexing into AFRC map rows.
-- Lo-res = hi-res >> 2.
    0c76 : 6600 ; -- <0948> ram a = $ram_maf_flow_hi_res -- av_ad_hi = 0
    0c77 : 6a9c ; -- <0948> ram a = $ram_maf_flow_hi_res -- av_ad_lo = 156
    0c78 : 0017 ; -- <0948> ram a = $ram_maf_flow_hi_res -- a = av_write_data -- start read cycle
    0c79 : 0018 ; -- <0948> ram a = $ram_maf_flow_hi_res -- a = av_read_data -- finish read cycle
    0c7a : 0350 ; -- <0949> a = a>>1
    0c7b : 6600 ; -- <0950> ram $ram_afrc_maf_row_idx = a>>1 -- av_ad_hi = 0
    0c7c : 6a9e ; -- <0950> ram $ram_afrc_maf_row_idx = a>>1 -- av_ad_lo = 158
    0c7d : 5f50 ; -- <0950> ram $ram_afrc_maf_row_idx = a>>1 -- av_write_data = a>>1

    0c7e : 100c ; -- <0952> pop x -- func interpret_maf
    0c7f : 080c ; -- <0952> pop i -- "
    0c80 : fc00 ; -- <0952> swapra = nop

-- ######## func interpret_tps -- = 0x0c81
    0c81 : 3002 ; -- <0975> push i -- func interpret_tps
    0c82 : 3004 ; -- <0975> push x -- "
    0c83 : 3005 ; -- <0975> push y -- "
    0c84 : 3006 ; -- <0975> push ga -- "
    0c85 : 3007 ; -- <0975> push gb -- "

    0c86 : 0206 ; -- <0954> a = 6

    0c87 : 0351 ; -- <0954> a = a<<1
    0c88 : 0626 ; -- <0954> b = 38
    0c89 : 6600 ; -- <0954> av_ad_hi = 0
    0c8a : 6b00 ; -- <0954> av_ad_lo = ad0
    0c8b : 0417 ; -- <0954> b = av_begin_read

    0c8c : 0418 ; -- <0954> b = av_read_data
-- reverse the scale.
    0c8d : 03a0 ; -- <0956> a = 0x0fff
    0c8e : 0fff ; -- <0956> "
    0c8f : c800 ; -- <0957> b = xor
    0c90 : 0738 ; -- <0957> "
-- memorize reading into slot 0 and shift history up 1 slot.  total up as we go.
    0c91 : 1801 ; -- <0959> ga = b
    0c92 : 1200 ; -- <0960> x = 0
    0c93 : 0a00 ; -- <0967> i = 0
-- :loop_3219 -- = 0x0c94

    0c94 : 0002 ; -- <0961> a = i

    0c95 : 0351 ; -- <0961> a = a<<1
    0c96 : 06b2 ; -- <0961> b = 178
    0c97 : 6600 ; -- <0961> av_ad_hi = 0
    0c98 : 6b00 ; -- <0961> av_ad_lo = ad0
    0c99 : 0417 ; -- <0961> b = av_begin_read

    0c9a : 1c18 ; -- <0961> gb = av_read_data
    0c9b : 1407 ; -- <0962> y = gb
    0c9c : c800 ; -- <0963> x = x+y
    0c9d : 1320 ; -- <0963> "
    0c9e : 3006 ; -- <0964> push ga -- push ga
    0c9f : 0002 ; -- <0964> a = i

    0ca0 : 0351 ; -- <0964> a = a<<1
    0ca1 : 06b2 ; -- <0964> b = 178
    0ca2 : 6600 ; -- <0964> av_ad_hi = 0
    0ca3 : 6b00 ; -- <0964> av_ad_lo = ad0

    0ca4 : 5c0c ; -- <0964> pop av_write_data -- pop av_write_data
    0ca5 : 1807 ; -- <0965> ga = gb


    0ca6 : 0002 ; -- <0967> a = i
    0ca7 : 0601 ; -- <0967> b = 1
    0ca8 : c800 ; -- <0967> i = a+b
    0ca9 : 0b00 ; -- <0967> "


    0caa : 0002 ; -- <0967> a = i
    0cab : 0604 ; -- <0967> b = $tps_history_len
    0cac : e005 ; -- <0967> br lt :loop_3219
    0cad : 0c94 ; -- <0967> "

-- :end_3219 -- = 0x0cae
-- memorize average.
    0cae : 0004 ; -- <0969> a = x
    0caf : 0350 ; -- <0970> a = a>>1
    0cb0 : 1b50 ; -- <0971> ga = a>>1
    0cb1 : 6600 ; -- <0972> ram $ram_tps_avg = ga -- av_ad_hi = 0
    0cb2 : 6ab0 ; -- <0972> ram $ram_tps_avg = ga -- av_ad_lo = 176
    0cb3 : 5c06 ; -- <0972> ram $ram_tps_avg = ga -- av_write_data = ga

-- :end -- = 0x0cb4

    0cb4 : 1c0c ; -- <0976> pop gb -- func interpret_tps
    0cb5 : 180c ; -- <0976> pop ga -- "
    0cb6 : 140c ; -- <0976> pop y -- "
    0cb7 : 100c ; -- <0976> pop x -- "
    0cb8 : 080c ; -- <0976> pop i -- "
    0cb9 : fc00 ; -- <0976> swapra = nop

-- ######## func jf_to_rpm -- = 0x0cba
    0cba : 303e ; -- <0986> push rtna -- func jf_to_rpm

-- resolution = 32 rpm.
    0cbb : 0408 ; -- <0979> b = jiffies
    0cbc : 03a0 ; -- <0980> a = 0x5573
    0cbd : 5573 ; -- <0980> "
-- = 700000 >> 5
    0cbe : fba0 ; -- <0982> call :divide
    0cbf : 019c ; -- <0982> "
    0cc0 : fc00 ; -- <0982> "
    0cc1 : 0001 ; -- <0983> a = b
    0cc2 : 0352 ; -- <0984> a = a<<4
    0cc3 : 2351 ; -- <0985> rpm = a<<1

    0cc4 : f80c ; -- <0987> pop rtna -- func jf_to_rpm
    0cc5 : fc00 ; -- <0987> swapra = nop

-- ######## func check_engine_stop -- = 0x0cc6
    0cc6 : 303e ; -- <1003> push rtna -- func check_engine_stop

-- returns 1 if transitioned to stop, else 0.

-- transition to plan_stop if ignition switch is turned off AND rpm estimate is invalid.
-- requiring both conditions prevents spurious noise readings from shutting down the injection.

    0cc7 : 0022 ; -- <1001> a = power_duty
    0cc8 : 0680 ; -- <1001> b = ( 0x0080 )

    0cc9 : e003 ; -- <0993> br and0z :else_3273
    0cca : 0cde ; -- <0993> "

    0ccb : 6600 ; -- <0994> ram a = $ram_rpm_valid -- av_ad_hi = 0
    0ccc : 6a80 ; -- <0994> ram a = $ram_rpm_valid -- av_ad_lo = 128
    0ccd : 0017 ; -- <0994> ram a = $ram_rpm_valid -- a = av_write_data -- start read cycle
    0cce : 0018 ; -- <0994> ram a = $ram_rpm_valid -- a = av_read_data -- finish read cycle

    0ccf : 0000 ; -- <1000> a = a
    0cd0 : 0600 ; -- <1000> b = 0

    0cd1 : e407 ; -- <0995> bn eq :else_3281
    0cd2 : 0cde ; -- <0995> "

    0cd3 : 6600 ; -- <0996> ram rtna = $ram_destroy_plan_func -- av_ad_hi = 0
    0cd4 : 6a90 ; -- <0996> ram rtna = $ram_destroy_plan_func -- av_ad_lo = 144
    0cd5 : f817 ; -- <0996> ram rtna = $ram_destroy_plan_func -- rtna = av_write_data -- start read cycle
    0cd6 : f818 ; -- <0996> ram rtna = $ram_destroy_plan_func -- rtna = av_read_data -- finish read cycle
    0cd7 : fc00 ; -- <0997> swapra = nop
    0cd8 : fba0 ; -- <0999> callx  init_plan_stop
    0cd9 : 0443 ; -- <0999> "
    0cda : fc00 ; -- <0999> "
    0cdb : 2201 ; -- <1000> did_stop = 1
    0cdc : f80c ; -- <1000> pop rtna -- rtn 1
    0cdd : fc00 ; -- <0999> swapra = nop


    0cde : 2200 ; -- <1002> did_stop = 0
    0cdf : f80c ; -- <1002> pop rtna -- rtn 0
    0ce0 : fc00 ; -- <1001> swapra = nop

    0ce1 : f80c ; -- <1004> pop rtna -- func check_engine_stop
    0ce2 : fc00 ; -- <1004> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d event_priority
-- src reg 000e soft_event
-- src reg 000f usage_count
-- src reg 0010 product_lo
-- src reg 0011 product_hi
-- src reg 0012 ustimer0
-- src reg 0013 mstimer0
-- src reg 0014 mstimer1
-- src reg 0015 mstimer2
-- src reg 0016 spi_data
-- src reg 0017 av_begin_read
-- src reg 0018 av_read_data
-- src reg 0019 av_ad_hi
-- src reg 001a av_ad_lo
-- src reg 001c drom_data
-- src reg 001d fduart_data
-- src reg 001e fduart_status
-- src reg 001f leds
-- src reg 0020 board_ctrl
-- src reg 0021 anmux_ctrl
-- src reg 0022 power_duty
-- src reg 0023 ign_capture_jf
-- src reg 0024 ign_timeout_len_jf
-- src reg 0025 puff_len_us
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d event_priority
-- dest reg 000e soft_event
-- dest reg 000f usage_count
-- dest reg 0012 ustimer0
-- dest reg 0013 mstimer0
-- dest reg 0014 mstimer1
-- dest reg 0015 mstimer2
-- dest reg 0016 spi_data
-- dest reg 0017 av_write_data
-- dest reg 0019 av_ad_hi
-- dest reg 001a av_ad_lo
-- dest reg 001b drom_ad
-- dest reg 001d fduart_data
-- dest reg 001e fduart_status
-- dest reg 001f leds
-- dest reg 0020 board_ctrl
-- dest reg 0021 anmux_ctrl
-- dest reg 0022 power_duty
-- dest reg 0024 ign_timeout_len_jf
-- dest reg 0025 puff_len_us
-- ram 00000000 ram_key_buf
-- ram 00000010 ram_comm_restart_at_min
-- ram 00000012 ram_ftdi_downtime_remain_sec
-- ram 00000014 ram_daq_pass_cnt
-- ram 00000016 ram_last_anmux_data
-- ram 00000026 ram_last_adc_data
-- ram 00000036 ram_adc_chn_pending
-- ram 00000038 ram_adc_junk
-- ram 0000003a ram_dial_setting
-- ram 0000003c ram_enable_status_report
-- ram 0000003e ram_power_down_at_min
-- ram 00000040 ram_relay_hold_at_pass
-- ram 00000042 ram_minutes_cnt
-- ram 00000044 ram_seconds_cnt
-- ram 00000046 ram_mcu_usage_cnt
-- ram 00000048 ram_text_flag_pointers
-- ram 00000058 ram_next_tfp_idx
-- ram 0000005a ram_ign_history_idx
-- ram 0000005c ram_ign_history_jf
-- ram 0000007c ram_ign_avg_jf
-- ram 0000007e ram_avg_rpm
-- ram 00000080 ram_rpm_valid
-- ram 00000082 ram_ign_bad_samples
-- ram 00000084 ram_ign_fastest_jf
-- ram 00000086 ram_ign_slowest_jf
-- ram 00000088 ram_next_puff_len_us
-- ram 0000008a ram_plan_name
-- ram 0000008c ram_puff_len_func
-- ram 0000008e ram_transition_func
-- ram 00000090 ram_destroy_plan_func
-- ram 00000092 ram_next_puff_len_us
-- ram 00000094 ram_puff_count
-- ram 01000000 ram_afrc_map
-- ram 01000800 ram_maf_ref
-- ram 01000a00 ram_rpm_ref
-- ram 01000a20 ram_block_temp_ref
-- ram 01000aa0 ram_block_temp_map
-- ram 01000b20 ram_afterstart_ref
-- ram 01000b34 ram_afterstart_map
-- ram 00000096 ram_terminal_connected
-- ram 00000098 ram_maf_valid
-- ram 0000009a ram_maf_adc_filtered
-- ram 0000009c ram_maf_flow_hi_res
-- ram 0000009e ram_afrc_maf_row_idx
-- ram 000000a0 ram_afrc_rpm_col_idx
-- ram 000000a2 ram_block_temp_map_idx
-- ram 000000a4 ram_block_temp_trim
-- ram 000000a6 ram_afterstart_map_idx
-- ram 000000a8 ram_afterstart_trim
-- ram 000000aa ram_o2_trim
-- ram 000000ac ram_run_manual_trim
-- ram 000000ae ram_total_trim
-- ram 000000b0 ram_tps_avg
-- ram 000000b2 ram_tps_history

END;
