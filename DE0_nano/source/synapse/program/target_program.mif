
        DEPTH = 4096 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.

    0000 : e00f ; -- <0004> jmp :main
    0001 : 0202 ; -- <0004> "


-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.


-- register file configuration.
-- num_gp should include the p registers and the operators.  everything beneath the peripherals.

-- application-specific register aliases.
-- patch: g6, g7 obsolete.



-- I/O expansion bus.

    0002 : 0011 ; -- <0039> emit_debugger_register_table  counter
-- "       a"
    0003 : 2020 ; -- <0039>   
    0004 : 2020 ; -- <0039>   
    0005 : 2020 ; -- <0039>   
    0006 : 6120 ; -- <0039> a 
-- "       b"
    0007 : 2020 ; -- <0039>   
    0008 : 2020 ; -- <0039>   
    0009 : 2020 ; -- <0039>   
    000a : 6220 ; -- <0039> b 
-- "       i"
    000b : 2020 ; -- <0039>   
    000c : 2020 ; -- <0039>   
    000d : 2020 ; -- <0039>   
    000e : 6920 ; -- <0039> i 
-- "       j"
    000f : 2020 ; -- <0039>   
    0010 : 2020 ; -- <0039>   
    0011 : 2020 ; -- <0039>   
    0012 : 6a20 ; -- <0039> j 
-- "       x"
    0013 : 2020 ; -- <0039>   
    0014 : 2020 ; -- <0039>   
    0015 : 2020 ; -- <0039>   
    0016 : 7820 ; -- <0039> x 
-- "       y"
    0017 : 2020 ; -- <0039>   
    0018 : 2020 ; -- <0039>   
    0019 : 2020 ; -- <0039>   
    001a : 7920 ; -- <0039> y 
-- "      ga"
    001b : 2020 ; -- <0039>   
    001c : 2020 ; -- <0039>   
    001d : 2020 ; -- <0039>   
    001e : 6167 ; -- <0039> ag
-- "      gb"
    001f : 2020 ; -- <0039>   
    0020 : 2020 ; -- <0039>   
    0021 : 2020 ; -- <0039>   
    0022 : 6267 ; -- <0039> bg
-- "      pa"
    0023 : 2020 ; -- <0039>   
    0024 : 2020 ; -- <0039>   
    0025 : 2020 ; -- <0039>   
    0026 : 6170 ; -- <0039> ap
-- "      pb"
    0027 : 2020 ; -- <0039>   
    0028 : 2020 ; -- <0039>   
    0029 : 2020 ; -- <0039>   
    002a : 6270 ; -- <0039> bp
-- "      pc"
    002b : 2020 ; -- <0039>   
    002c : 2020 ; -- <0039>   
    002d : 2020 ; -- <0039>   
    002e : 6370 ; -- <0039> cp
-- "      pd"
    002f : 2020 ; -- <0039>   
    0030 : 2020 ; -- <0039>   
    0031 : 2020 ; -- <0039>   
    0032 : 6470 ; -- <0039> dp
-- "--rstk  "
    0033 : 2f2f ; -- <0039> --
    0034 : 7372 ; -- <0039> sr
    0035 : 6b74 ; -- <0039> kt
    0036 : 2020 ; -- <0039>   
-- "--uartdt"
    0037 : 2f2f ; -- <0039> --
    0038 : 6175 ; -- <0039> au
    0039 : 7472 ; -- <0039> tr
    003a : 7464 ; -- <0039> td
-- "uartstat"
    003b : 6175 ; -- <0039> au
    003c : 7472 ; -- <0039> tr
    003d : 7473 ; -- <0039> ts
    003e : 7461 ; -- <0039> ta
-- "--edata "
    003f : 2f2f ; -- <0039> --
    0040 : 6465 ; -- <0039> de
    0041 : 7461 ; -- <0039> ta
    0042 : 2061 ; -- <0039>  a
-- "   eaddr"
    0043 : 2020 ; -- <0039>   
    0044 : 6520 ; -- <0039> e 
    0045 : 6461 ; -- <0039> da
    0046 : 7264 ; -- <0039> rd

-- string resources
-- :boot_msg -- = 0x0047
-- "TGT\r\n\x0"
    0047 : 4754 ; -- <0043> GT
    0048 : 0d54 ; -- <0043>  T
    0049 : 000a ; -- <0043>   
-- :fail_msg -- = 0x004a
-- "FAIL TEST \x0"
    004a : 4146 ; -- <0045> AF
    004b : 4c49 ; -- <0045> LI
    004c : 5420 ; -- <0045> T 
    004d : 5345 ; -- <0045> SE
    004e : 2054 ; -- <0045>  T
    004f : 0000 ; -- <0045>   

-- libraries.  set calling convention FIRST to ensure correct assembly of lib funcs.

-- driver library for synapse316_uart simple async transceiver.






-- routine sends out the low byte from a to the UART.  blocks until the FIFO accepts the byte.
-- ######## func putchar_fduart -- = 0x0050
    0050 : 3004 ; -- <0046> push x -- func putchar_fduart

    0051 : 1000 ; -- <0048> x = a

-- wait for FIFO to be available.
    0052 : 0202 ; -- <0051> a = $atx_fifo_full_mask
-- :pcfduart_wait_for_idle -- = 0x0053
    0053 : 040e ; -- <0053> b = fduart_status
    0054 : e403 ; -- <0054> bn and0z :pcfduart_wait_for_idle
    0055 : 0053 ; -- <0054> "

-- push word to the UART.  its low byte is a character.
    0056 : 3404 ; -- <0057> fduart_data = x
    0057 : 100c ; -- <0058> pop x -- end_func
    0058 : fc00 ; -- <0057> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_fduart -- = 0x0059
-- wait until FIFO is populated.
    0059 : 0208 ; -- <0064> a = $arx_fifo_empty_mask
-- :wait_for_busy -- = 0x005a
    005a : 040e ; -- <0066> b = fduart_status
    005b : e403 ; -- <0067> bn and0z :wait_for_busy
    005c : 005a ; -- <0067> "
    005d : 000d ; -- <0068> a = fduart_data
    005e : fc00 ; -- <0068> swapra = nop

-- returns a character in a, or -1 if none.
-- ######## func pollchar_fduart -- = 0x005f
-- check for FIFO is populated.
    005f : 0208 ; -- <0074> a = $arx_fifo_empty_mask
    0060 : 040e ; -- <0075> b = fduart_status
    0061 : e403 ; -- <0076> bn and0z :none
    0062 : 0065 ; -- <0076> "
    0063 : 000d ; -- <0077> a = fduart_data
    0064 : fc00 ; -- <0077> swapra = nop
-- :none -- = 0x0065
    0065 : 0360 ; -- <0080> a = -1
    0066 : fc00 ; -- <0080> swapra = nop




-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0067
-- "0123456789abcdef"
    0067 : 3130 ; -- <0050> 10
    0068 : 3332 ; -- <0050> 32
    0069 : 3534 ; -- <0050> 54
    006a : 3736 ; -- <0050> 76
    006b : 3938 ; -- <0050> 98
    006c : 6261 ; -- <0050> ba
    006d : 6463 ; -- <0050> dc
    006e : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x006f
    006f : 3004 ; -- <0054> push x -- func put4x
    0070 : 3006 ; -- <0054> push ga -- "
    0071 : 303e ; -- <0054> push rtna -- "
    0072 : 13a0 ; -- <0055> x = :hexdigits
    0073 : 0067 ; -- <0055> "

    0074 : 1800 ; -- <0057> ga = a
    0075 : 07a0 ; -- <0058> b = 0xF000
    0076 : f000 ; -- <0058> "
    0077 : c800 ; -- <0059> a = and
    0078 : 0330 ; -- <0059> "
    0079 : 0353 ; -- <0060> a = a>>4
    007a : 0353 ; -- <0061> a = a>>4
    007b : 0353 ; -- <0062> a = a>>4
    007c : fba0 ; -- <0063> call fetch_byte
    007d : 0188 ; -- <0063> "
    007e : fc00 ; -- <0063> "
    007f : fba0 ; -- <0064> putchar a
    0080 : 0050 ; -- <0064> "
    0081 : fc00 ; -- <0064> "

    0082 : 0006 ; -- <0066> a = ga
    0083 : 07a0 ; -- <0067> b = 0x0F00
    0084 : 0f00 ; -- <0067> "
    0085 : c800 ; -- <0068> a = and
    0086 : 0330 ; -- <0068> "
    0087 : 0353 ; -- <0069> a = a>>4
    0088 : 0353 ; -- <0070> a = a>>4
    0089 : fba0 ; -- <0071> call fetch_byte
    008a : 0188 ; -- <0071> "
    008b : fc00 ; -- <0071> "
    008c : fba0 ; -- <0072> putchar a
    008d : 0050 ; -- <0072> "
    008e : fc00 ; -- <0072> "

    008f : 0006 ; -- <0074> a = ga
    0090 : 06f0 ; -- <0075> b = 0x00F0
    0091 : c800 ; -- <0076> a = and
    0092 : 0330 ; -- <0076> "
    0093 : 0353 ; -- <0077> a = a>>4
    0094 : fba0 ; -- <0078> call fetch_byte
    0095 : 0188 ; -- <0078> "
    0096 : fc00 ; -- <0078> "
    0097 : fba0 ; -- <0079> putchar a
    0098 : 0050 ; -- <0079> "
    0099 : fc00 ; -- <0079> "

    009a : 0006 ; -- <0081> a = ga
    009b : 060f ; -- <0082> b = 0x000F
    009c : c800 ; -- <0083> a = and
    009d : 0330 ; -- <0083> "
    009e : fba0 ; -- <0084> call fetch_byte
    009f : 0188 ; -- <0084> "
    00a0 : fc00 ; -- <0084> "
    00a1 : fba0 ; -- <0085> putchar a
    00a2 : 0050 ; -- <0085> "
    00a3 : fc00 ; -- <0085> "

    00a4 : f80c ; -- <0087> pop rtna -- end_func
    00a5 : 180c ; -- <0087> pop ga -- "
    00a6 : 100c ; -- <0087> pop x -- "
    00a7 : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x00a8
    00a8 : 3002 ; -- <0091> push i -- func get4x
    00a9 : 3003 ; -- <0091> push j -- "
    00aa : 3004 ; -- <0091> push x -- "
    00ab : 3005 ; -- <0091> push y -- "
    00ac : 303e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    00ad : 1604 ; -- <0094> y = 4
-- :again -- = 0x00ae
    00ae : fba0 ; -- <0096> getchar
    00af : 0059 ; -- <0096> "
    00b0 : fc00 ; -- <0096> "
    00b1 : 13a0 ; -- <0097> x = :hexdigits
    00b2 : 0067 ; -- <0097> "
    00b3 : 0a10 ; -- <0098> i = 16
    00b4 : fba0 ; -- <0099> call :find_in_fetch
    00b5 : 019c ; -- <0099> "
    00b6 : fc00 ; -- <0099> "
    00b7 : 0760 ; -- <0100> b = -1
    00b8 : e007 ; -- <0101> br eq :fail
    00b9 : 00cd ; -- <0101> "
    00ba : 0400 ; -- <0102> b = a
    00bb : 0003 ; -- <0103> a = j
    00bc : 0352 ; -- <0104> a = a<<4
    00bd : c800 ; -- <0105> j = or
    00be : 0f34 ; -- <0105> "
    00bf : 1360 ; -- <0106> x = -1
    00c0 : c800 ; -- <0107> y = x+y
    00c1 : 1720 ; -- <0107> "
    00c2 : 0005 ; -- <0108> a = y
    00c3 : e400 ; -- <0109> bn az :again
    00c4 : 00ae ; -- <0109> "
    00c5 : 0003 ; -- <0110> a = j
    00c6 : 0600 ; -- <0111> b = 0
    00c7 : f80c ; -- <0112> pop rtna -- rtn
    00c8 : 140c ; -- <0112> pop y -- "
    00c9 : 100c ; -- <0112> pop x -- "
    00ca : 0c0c ; -- <0112> pop j -- "
    00cb : 080c ; -- <0112> pop i -- "
    00cc : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x00cd
    00cd : 0760 ; -- <0114> b = -1
    00ce : f80c ; -- <0115> pop rtna -- end_func
    00cf : 140c ; -- <0115> pop y -- "
    00d0 : 100c ; -- <0115> pop x -- "
    00d1 : 0c0c ; -- <0115> pop j -- "
    00d2 : 080c ; -- <0115> pop i -- "
    00d3 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x00d4
    00d4 : 3002 ; -- <0121> push i -- func print_fixed
    00d5 : 3003 ; -- <0121> push j -- "
    00d6 : 3004 ; -- <0121> push x -- "
    00d7 : 3005 ; -- <0121> push y -- "
    00d8 : 3006 ; -- <0121> push ga -- "
    00d9 : 303e ; -- <0121> push rtna -- "
    00da : 0800 ; -- <0122> i = a
    00db : 0e01 ; -- <0123> j = 1
    00dc : 1001 ; -- <0124> x = b
    00dd : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x00de
    00de : e002 ; -- <0127> br xz :done
    00df : 00f4 ; -- <0127> "
    00e0 : 1320 ; -- <0128> x = ad2
    00e1 : d002 ; -- <0129> fetch ga from i
    00e2 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, ga = data word.
    00e3 : 0006 ; -- <0131> a = ga -- putchar ga
    00e4 : fba0 ; -- <0131> putchar ga
    00e5 : 0050 ; -- <0131> "
    00e6 : fc00 ; -- <0131> "
    00e7 : e002 ; -- <0132> br xz :done
    00e8 : 00f4 ; -- <0132> "
    00e9 : 1320 ; -- <0133> x = ad2
    00ea : 0006 ; -- <0134> a = ga
    00eb : 0353 ; -- <0135> a = a>>4
    00ec : 0353 ; -- <0136> a = a>>4
    00ed : fba0 ; -- <0137> putchar a
    00ee : 0050 ; -- <0137> "
    00ef : fc00 ; -- <0137> "
    00f0 : c800 ; -- <0138> i = i+j
    00f1 : 0b10 ; -- <0138> "
    00f2 : e00f ; -- <0139> jmp :next_word
    00f3 : 00de ; -- <0139> "
-- :done -- = 0x00f4
    00f4 : f80c ; -- <0141> pop rtna -- end_func
    00f5 : 180c ; -- <0141> pop ga -- "
    00f6 : 140c ; -- <0141> pop y -- "
    00f7 : 100c ; -- <0141> pop x -- "
    00f8 : 0c0c ; -- <0141> pop j -- "
    00f9 : 080c ; -- <0141> pop i -- "
    00fa : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x00fb
    00fb : 3002 ; -- <0147> push i -- func print_nt
    00fc : 3003 ; -- <0147> push j -- "
    00fd : 3004 ; -- <0147> push x -- "
    00fe : 303e ; -- <0147> push rtna -- "
    00ff : 0800 ; -- <0148> i = a
    0100 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x0101
    0101 : d002 ; -- <0151> fetch x from i
    0102 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    0103 : 0004 ; -- <0153> a = x
    0104 : 06ff ; -- <0154> b = 0xff
    0105 : e003 ; -- <0155> br and0z :done
    0106 : 0117 ; -- <0155> "
    0107 : fba0 ; -- <0156> putchar a
    0108 : 0050 ; -- <0156> "
    0109 : fc00 ; -- <0156> "
    010a : 0004 ; -- <0157> a = x
    010b : 0353 ; -- <0158> a = a>>4
    010c : 0353 ; -- <0159> a = a>>4
    010d : 06ff ; -- <0160> b = 0xff
    010e : e003 ; -- <0161> br and0z :done
    010f : 0117 ; -- <0161> "
    0110 : fba0 ; -- <0162> putchar a
    0111 : 0050 ; -- <0162> "
    0112 : fc00 ; -- <0162> "
    0113 : c800 ; -- <0163> i = i+j
    0114 : 0b10 ; -- <0163> "
    0115 : e00f ; -- <0164> jmp :next_word
    0116 : 0101 ; -- <0164> "
-- :done -- = 0x0117
    0117 : f80c ; -- <0166> pop rtna -- end_func
    0118 : 100c ; -- <0166> pop x -- "
    0119 : 0c0c ; -- <0166> pop j -- "
    011a : 080c ; -- <0166> pop i -- "
    011b : fc00 ; -- <0165> swapra = nop


-- function library for simple integer math.

-- ######## func multiply -- = 0x011c
    011c : 3002 ; -- <0004> push i -- func multiply
    011d : 3003 ; -- <0004> push j -- "
    011e : 3004 ; -- <0004> push x -- "
    011f : 3005 ; -- <0004> push y -- "
-- unsigned 16-bit multiplication.  a = a * b.
-- it's easy to roll over the 16-bit result by passing operands whose bit widths total more than 16.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- x = operand a
-- y = operand b
-- i = total
-- x is shifted right so its low bit can be tested each time.
-- y is shifted left so its value (for summing) increases each time.
    0120 : 1000 ; -- <0014> x = a
    0121 : 1401 ; -- <0015> y = b
    0122 : 0a00 ; -- <0016> i = 0
-- :again -- = 0x0123
    0123 : e002 ; -- <0018> br xz :done
    0124 : 0132 ; -- <0018> "
    0125 : 0004 ; -- <0019> a = x
    0126 : 0601 ; -- <0020> b = 1
    0127 : e003 ; -- <0021> br and0z :skip_add
    0128 : 012c ; -- <0021> "
    0129 : 0c05 ; -- <0022> j = y
    012a : c800 ; -- <0023> i = i+j
    012b : 0b10 ; -- <0023> "
-- :skip_add -- = 0x012c
    012c : 0004 ; -- <0025> a = x
    012d : 1350 ; -- <0026> x = a>>1
    012e : 0005 ; -- <0027> a = y
    012f : 1751 ; -- <0028> y = a<<1
    0130 : e00f ; -- <0029> jmp :again
    0131 : 0123 ; -- <0029> "
-- :done -- = 0x0132
    0132 : 0002 ; -- <0031> a = i
    0133 : 140c ; -- <0032> pop y -- end_func
    0134 : 100c ; -- <0032> pop x -- "
    0135 : 0c0c ; -- <0032> pop j -- "
    0136 : 080c ; -- <0032> pop i -- "
    0137 : fc00 ; -- <0031> swapra = nop

-- ######## func divide -- = 0x0138
    0138 : 3002 ; -- <0034> push i -- func divide
    0139 : 3003 ; -- <0034> push j -- "
    013a : 3004 ; -- <0034> push x -- "
    013b : 3005 ; -- <0034> push y -- "
    013c : 3006 ; -- <0034> push g6 -- "
    013d : 3007 ; -- <0034> push g7 -- "
-- unsigned 15-bit division.  b = a / b.  return remainder in a.
-- division by zero results in zero.
-- THE HIGH BIT OF A MUST BE 0!!  ALSO THE HIGH BIT OF B MUST BE 0!!
-- 1 in the high bit of either operand results in infinite loop or wrong results.
-- bigger/safer/faster math can be obtained from Altera IP blocks.

-- degenerate cases.
    013e : e005 ; -- <0042> br lt :zero
    013f : 0179 ; -- <0042> "
    0140 : e000 ; -- <0043> br az :zero
    0141 : 0179 ; -- <0043> "
    0142 : 1000 ; -- <0044> x = a
--    g7 = x
    0143 : 0001 ; -- <0046> a = b
    0144 : e000 ; -- <0047> br az :zero
    0145 : 0179 ; -- <0047> "
-- now operands are x / a.  also another copy of x in g7.

-- -- test for special case where high bit of dividend is 1.
-- y = 0
-- i = a
-- a = x
-- b = 0x8000
-- br and0z :msb_zero
-- y = 1
-- x = a>>1
-- :msb_zero
-- a = i
-- -- when msb was 1, then y = 1 and dividend x is shifted right 1.

-- shift "temp" divisor g6 left until it exceeds dividend, then right 1.
    0146 : 0404 ; -- <0063> b = x
    0147 : 0a00 ; -- <0064> i = 0
    0148 : 0e01 ; -- <0065> j = 1
-- :shift_again -- = 0x0149
    0149 : e006 ; -- <0067> br gt :shift_done
    014a : 014f ; -- <0067> "
    014b : 0351 ; -- <0068> a = a<<1
    014c : 0b10 ; -- <0069> i = ad1
    014d : e00f ; -- <0070> jmp :shift_again
    014e : 0149 ; -- <0070> "
-- :shift_done -- = 0x014f
    014f : 1b50 ; -- <0072> g6 = a>>1
-- now operands are x / g6.  i = number of passes of long division required.
-- notice i was not decremented here, so it has 1 more in it than the number of shifts required for digit parity.
-- that's exactly what it needs for correctness.

-- -- compensate for special case where msb was 1.  then 1 more division pass is needed.
-- j = y
-- i = i+j
-- x = g7

-- long division.  g7 = quotient.
    0150 : 1e00 ; -- <0083> g7 = 0
    0151 : 0f60 ; -- <0084> j = -1
-- :again -- = 0x0152
    0152 : e001 ; -- <0086> br iz :done
    0153 : 0170 ; -- <0086> "
    0154 : 0006 ; -- <0087> a = g6
    0155 : 0404 ; -- <0088> b = x
    0156 : e006 ; -- <0089> br gt :result0
    0157 : 0168 ; -- <0089> "
-- temp does fit; output a 1.
    0158 : 0007 ; -- <0091> a = g7
    0159 : 0351 ; -- <0092> a = a<<1
    015a : 0601 ; -- <0093> b = 1
    015b : c800 ; -- <0094> g7 = or
    015c : 1f34 ; -- <0094> "
-- dividend = dividend - temp
    015d : 0006 ; -- <0096> a = g6
    015e : 0760 ; -- <0097> b = -1
    015f : c800 ; -- <0098> a = xor
    0160 : 0338 ; -- <0098> "
    0161 : 0601 ; -- <0099> b = 1
    0162 : c800 ; -- <0100> y = a+b
    0163 : 1700 ; -- <0100> "
    0164 : c800 ; -- <0101> x = x+y
    0165 : 1320 ; -- <0101> "
    0166 : e00f ; -- <0102> jmp :next
    0167 : 016a ; -- <0102> "
-- :result0 -- = 0x0168
-- temp does not fit; output a 0.
    0168 : 0007 ; -- <0105> a = g7
    0169 : 1f51 ; -- <0106> g7 = a<<1
-- no change to dividend.
-- :next -- = 0x016a
    016a : 0006 ; -- <0109> a = g6
    016b : 1b50 ; -- <0110> g6 = a>>1
    016c : c800 ; -- <0111> i = i+j
    016d : 0b10 ; -- <0111> "
    016e : e00f ; -- <0112> jmp :again
    016f : 0152 ; -- <0112> "

-- :done -- = 0x0170
    0170 : 0407 ; -- <0115> b = g7
    0171 : 0004 ; -- <0116> a = x
    0172 : 1c0c ; -- <0117> pop g7 -- rtn
    0173 : 180c ; -- <0117> pop g6 -- "
    0174 : 140c ; -- <0117> pop y -- "
    0175 : 100c ; -- <0117> pop x -- "
    0176 : 0c0c ; -- <0117> pop j -- "
    0177 : 080c ; -- <0117> pop i -- "
    0178 : fc00 ; -- <0116> swapra = nop

-- :zero -- = 0x0179
    0179 : 0600 ; -- <0120> b = 0
    017a : 1c0c ; -- <0121> pop g7 -- rtn
    017b : 180c ; -- <0121> pop g6 -- "
    017c : 140c ; -- <0121> pop y -- "
    017d : 100c ; -- <0121> pop x -- "
    017e : 0c0c ; -- <0121> pop j -- "
    017f : 080c ; -- <0121> pop i -- "
    0180 : fc00 ; -- <0120> swapra = nop
    0181 : 1c0c ; -- <0122> pop g7 -- end_func
    0182 : 180c ; -- <0122> pop g6 -- "
    0183 : 140c ; -- <0122> pop y -- "
    0184 : 100c ; -- <0122> pop x -- "
    0185 : 0c0c ; -- <0122> pop j -- "
    0186 : 080c ; -- <0122> pop i -- "
    0187 : fc00 ; -- <0121> swapra = nop


--func multiply32 {arg_a in pa} {arg_b in pb} {product_lo out pa} {product_hi out pb} {
---- unsigned 16-bit multiplication with 32-bit product.

---- ga = product_lo
---- gb = product_hi
---- pa is shifted right so its low bit can be tested each time.
---- pb is shifted left so its value (for summing) increases each time.
--FAIL:  because pb is shifting, it will be destroyed in cases where total bits > 16.
--despite supporting carry overflow, the algorithm still assumes total bits <= 16.
--also i think the loop order is backward for correctly shifting into the hi word.
--could fix that by reversing the hi word shift.
--ga = 0
--gb = 0
--:again
--br xz :done
--a = arg_a
--b = 1
--br and0z :skip_add
--a = ga
--b = arg_b
--ga = a+b
--br ad0c :carry
--a = gb
--gb = a<<1
--jmp :carry_done
--:carry
--a = gb
--a = a<<1
--b = 1
--gb = a+b
--:carry_done
--:skip_add
--a = arg_a
--arg_a = a>>1
--a = arg_b
--arg_b = a<<1
--jmp :again
--:done
--product_lo = ga
--product_hi = gb
--end_func


-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x0188
    0188 : 0601 ; -- <0005> b = 1
    0189 : e003 ; -- <0006> br and0z :pick_byte_even
    018a : 0193 ; -- <0006> "
    018b : 0350 ; -- <0007> a = a>>1
    018c : 0404 ; -- <0008> b = x
    018d : c800 ; -- <0009> fetch a from a+b
    018e : d300 ; -- <0009> "
    018f : 03b0 ; -- <0009> "
    0190 : 0353 ; -- <0010> a = a>>4
    0191 : 0353 ; -- <0011> a = a>>4
    0192 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x0193
    0193 : 0350 ; -- <0014> a = a>>1
    0194 : 0404 ; -- <0015> b = x
    0195 : c800 ; -- <0016> fetch a from a+b
    0196 : d300 ; -- <0016> "
    0197 : 03b0 ; -- <0016> "
    0198 : 06ff ; -- <0017> b = 0xff
    0199 : c800 ; -- <0018> a = and
    019a : 0330 ; -- <0018> "
    019b : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x019c
    019c : 3002 ; -- <0027> push i -- func find_in_fetch
    019d : 3003 ; -- <0027> push j -- "
    019e : 3005 ; -- <0027> push y -- "
    019f : 303e ; -- <0027> push rtna -- "
    01a0 : 1400 ; -- <0028> y = a
    01a1 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x01a2
    01a2 : e001 ; -- <0031> br iz :fail
    01a3 : 01b2 ; -- <0031> "
    01a4 : 0b10 ; -- <0032> i = ad1
    01a5 : 0002 ; -- <0033> a = i
    01a6 : fba0 ; -- <0034> call :fetch_byte
    01a7 : 0188 ; -- <0034> "
    01a8 : fc00 ; -- <0034> "
    01a9 : 0405 ; -- <0035> b = y
    01aa : e407 ; -- <0036> bn eq :again
    01ab : 01a2 ; -- <0036> "
-- :found -- = 0x01ac
    01ac : 0002 ; -- <0038> a = i
    01ad : f80c ; -- <0039> pop rtna -- rtn
    01ae : 140c ; -- <0039> pop y -- "
    01af : 0c0c ; -- <0039> pop j -- "
    01b0 : 080c ; -- <0039> pop i -- "
    01b1 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x01b2
    01b2 : 0360 ; -- <0041> a = -1
    01b3 : f80c ; -- <0042> pop rtna -- end_func
    01b4 : 140c ; -- <0042> pop y -- "
    01b5 : 0c0c ; -- <0042> pop j -- "
    01b6 : 080c ; -- <0042> pop i -- "
    01b7 : fc00 ; -- <0041> swapra = nop


-- routine waits a number of milliseconds given in a.
-- ######## func spinwait -- = 0x01b8
    01b8 : 3004 ; -- <0002> push x -- func spinwait
    01b9 : 3005 ; -- <0002> push y -- "
--patch
--rtn
    01ba : 0760 ; -- <0005> b = -1
-- :spinwait_outer -- = 0x01bb
    01bb : 13a0 ; -- <0007> x = 16666
    01bc : 411a ; -- <0007> "
    01bd : 1760 ; -- <0008> y = -1
    01be : c800 ; -- <0009> nop
-- :spinwait_inner -- = 0x01bf
-- use of the ad2 name overrides auto-nop here.
    01bf : 1320 ; -- <0012> x = ad2
    01c0 : e402 ; -- <0013> bn xz :spinwait_inner
    01c1 : 01bf ; -- <0013> "
    01c2 : c800 ; -- <0014> a = a+b
    01c3 : 0300 ; -- <0014> "
    01c4 : e400 ; -- <0015> bn az :spinwait_outer
    01c5 : 01bb ; -- <0015> "
    01c6 : 140c ; -- <0016> pop y -- end_func
    01c7 : 100c ; -- <0016> pop x -- "
    01c8 : fc00 ; -- <0015> swapra = nop




-- ######## func fletcher16_init -- = 0x01c9

    01c9 : 2a00 ; -- <0005> $fletcher_sum1_reg = 0
    01ca : 2e00 ; -- <0006> $fletcher_sum2_reg = 0

    01cb : fc00 ; -- <0008> swapra = nop

-- return the modulus(255) of a given number.
-- ######## func mod255 -- = 0x01cc

-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x01cc
    01cc : 06fe ; -- <0013> b = 0xfe
    01cd : e006 ; -- <0014> br gt :mod255_greater
    01ce : 01d0 ; -- <0014> "
    01cf : fc00 ; -- <0014> swapra = nop
-- :mod255_greater -- = 0x01d0
    01d0 : 07a0 ; -- <0017> b = ([negate 0xfe])
    01d1 : ff02 ; -- <0017> "
    01d2 : c800 ; -- <0018> a = a+b
    01d3 : 0300 ; -- <0018> "
    01d4 : e00f ; -- <0019> jmp :mod255_again
    01d5 : 01cc ; -- <0019> "

    01d6 : fc00 ; -- <0021> swapra = nop

-- accumulate a Fletcher16 checksum, given the next byte of data.
-- ######## func fletcher16_input8 -- = 0x01d7
    01d7 : 303e ; -- <0030> push rtna -- func fletcher16_input8

    01d8 : 040a ; -- <0024> b = $fletcher_sum1_reg
    01d9 : c800 ; -- <0025> a = a+b
    01da : 0300 ; -- <0025> "
    01db : fba0 ; -- <0025> callx mod255  a+b  $fletcher_sum1_reg
    01dc : 01cc ; -- <0025> "
    01dd : fc00 ; -- <0025> "
    01de : 2800 ; -- <0025> pc = a

    01df : 000a ; -- <0027> a = $fletcher_sum1_reg
    01e0 : 040b ; -- <0028> b = $fletcher_sum2_reg
    01e1 : c800 ; -- <0029> a = a+b
    01e2 : 0300 ; -- <0029> "
    01e3 : fba0 ; -- <0029> callx mod255  a+b  $fletcher_sum2_reg
    01e4 : 01cc ; -- <0029> "
    01e5 : fc00 ; -- <0029> "
    01e6 : 2c00 ; -- <0029> pd = a

    01e7 : f80c ; -- <0031> pop rtna -- func fletcher16_input8
    01e8 : fc00 ; -- <0031> swapra = nop

-- accumulate a Fletcher16 checksum, given the next word of data.
-- ######## func fletcher16_input16 -- = 0x01e9
    01e9 : 3002 ; -- <0039> push i -- func fletcher16_input16
    01ea : 303e ; -- <0039> push rtna -- "

    01eb : 0b53 ; -- <0034> i = a>>4
    01ec : 06ff ; -- <0035> b = 0xff
    01ed : c800 ; -- <0036> a = and
    01ee : 0330 ; -- <0036> "
    01ef : fba0 ; -- <0036> callx fletcher16_input8  and
    01f0 : 01d7 ; -- <0036> "
    01f1 : fc00 ; -- <0036> "
    01f2 : 0002 ; -- <0037> a = i
    01f3 : 0353 ; -- <0038> a = a>>4
    01f4 : fba0 ; -- <0038> callx fletcher16_input8  a>>4
    01f5 : 01d7 ; -- <0038> "
    01f6 : fc00 ; -- <0038> "

    01f7 : f80c ; -- <0040> pop rtna -- func fletcher16_input16
    01f8 : 080c ; -- <0040> pop i -- "
    01f9 : fc00 ; -- <0040> swapra = nop

-- return the combined 16-bit result of Fletcher16 checksum.
-- ######## func fletcher16_result -- = 0x01fa

    01fa : 000b ; -- <0043> a = $fletcher_sum2_reg
    01fb : 0352 ; -- <0044> a = a<<4
    01fc : 0352 ; -- <0045> a = a<<4
    01fd : 040a ; -- <0046> b = $fletcher_sum1_reg
    01fe : c800 ; -- <0047> result = or
    01ff : 0334 ; -- <0047> "
    0200 : fc00 ; -- <0046> swapra = nop

    0201 : fc00 ; -- <0049> swapra = nop




-- #########################################################################
-- :main -- = 0x0202

    0202 : 03a0 ; -- <0105> a = :boot_msg
    0203 : 0047 ; -- <0105> "
    0204 : fba0 ; -- <0106> call print_nt
    0205 : 00fb ; -- <0106> "
    0206 : fc00 ; -- <0106> "

-- :begin_test -- = 0x0207

-- clear out contents
    0207 : 4200 ; -- <0111> ewrite 0 0
    0208 : c800 ; -- <0111> "
    0209 : 3e00 ; -- <0111> "
    020a : 4201 ; -- <0112> ewrite 1 0
    020b : c800 ; -- <0112> "
    020c : 3e00 ; -- <0112> "
    020d : 4202 ; -- <0113> ewrite 2 0
    020e : c800 ; -- <0113> "
    020f : 3e00 ; -- <0113> "
    0210 : 4203 ; -- <0114> ewrite 3 0
    0211 : c800 ; -- <0114> "
    0212 : 3e00 ; -- <0114> "
-- etest  0 0 0x00
-- etest  0 0 0x00

    0213 : 0200 ; -- <0115> a = 0
    0214 : fba0 ; -- <0115> call put4x
    0215 : 006f ; -- <0115> "
    0216 : fc00 ; -- <0115> "
    0217 : 023a ; -- <0115> a = 58 -- putasc :
    0218 : fba0 ; -- <0115> putasc :
    0219 : 0050 ; -- <0115> "
    021a : fc00 ; -- <0115> "
    021b : 0220 ; -- <0115> a = 32 -- putasc { }
    021c : fba0 ; -- <0115> putasc { }
    021d : 0050 ; -- <0115> "
    021e : fc00 ; -- <0115> "
    021f : 4200 ; -- <0115> eread 0 ga
    0220 : 180f ; -- <0115> "
    0221 : c800 ; -- <0115> "
    0222 : 180f ; -- <0115> "
    0223 : 0006 ; -- <0115> a = ga
    0224 : fba0 ; -- <0115> call put4x
    0225 : 006f ; -- <0115> "
    0226 : fc00 ; -- <0115> "
    0227 : 020d ; -- <0115> a = 13 -- puteol
    0228 : fba0 ; -- <0115> puteol
    0229 : 0050 ; -- <0115> "
    022a : fc00 ; -- <0115> "
    022b : 020a ; -- <0115> a = 10 -- puteol
    022c : fba0 ; -- <0115> puteol
    022d : 0050 ; -- <0115> "
    022e : fc00 ; -- <0115> "



    022f : 0006 ; -- <0115> a = ga
    0230 : 0600 ; -- <0115> b = 0

    0231 : e007 ; -- <0113> br eq :else_561
    0232 : 0237 ; -- <0113> "

    0233 : 2200 ; -- <0114> pa = 0x00
    0234 : fba0 ; -- <0114> callx fail 0x00
    0235 : 0489 ; -- <0114> "
    0236 : fc00 ; -- <0114> "


-- etest  1 0 0x01
-- etest  1 0 0x01

    0237 : 0201 ; -- <0116> a = 1
    0238 : fba0 ; -- <0116> call put4x
    0239 : 006f ; -- <0116> "
    023a : fc00 ; -- <0116> "
    023b : 023a ; -- <0116> a = 58 -- putasc :
    023c : fba0 ; -- <0116> putasc :
    023d : 0050 ; -- <0116> "
    023e : fc00 ; -- <0116> "
    023f : 0220 ; -- <0116> a = 32 -- putasc { }
    0240 : fba0 ; -- <0116> putasc { }
    0241 : 0050 ; -- <0116> "
    0242 : fc00 ; -- <0116> "
    0243 : 4201 ; -- <0116> eread 1 ga
    0244 : 180f ; -- <0116> "
    0245 : c800 ; -- <0116> "
    0246 : 180f ; -- <0116> "
    0247 : 0006 ; -- <0116> a = ga
    0248 : fba0 ; -- <0116> call put4x
    0249 : 006f ; -- <0116> "
    024a : fc00 ; -- <0116> "
    024b : 020d ; -- <0116> a = 13 -- puteol
    024c : fba0 ; -- <0116> puteol
    024d : 0050 ; -- <0116> "
    024e : fc00 ; -- <0116> "
    024f : 020a ; -- <0116> a = 10 -- puteol
    0250 : fba0 ; -- <0116> puteol
    0251 : 0050 ; -- <0116> "
    0252 : fc00 ; -- <0116> "



    0253 : 0006 ; -- <0116> a = ga
    0254 : 0600 ; -- <0116> b = 0

    0255 : e007 ; -- <0114> br eq :else_597
    0256 : 025b ; -- <0114> "

    0257 : 2201 ; -- <0115> pa = 0x01
    0258 : fba0 ; -- <0115> callx fail 0x01
    0259 : 0489 ; -- <0115> "
    025a : fc00 ; -- <0115> "


-- etest  2 0 0x02
-- etest  2 0 0x02

    025b : 0202 ; -- <0117> a = 2
    025c : fba0 ; -- <0117> call put4x
    025d : 006f ; -- <0117> "
    025e : fc00 ; -- <0117> "
    025f : 023a ; -- <0117> a = 58 -- putasc :
    0260 : fba0 ; -- <0117> putasc :
    0261 : 0050 ; -- <0117> "
    0262 : fc00 ; -- <0117> "
    0263 : 0220 ; -- <0117> a = 32 -- putasc { }
    0264 : fba0 ; -- <0117> putasc { }
    0265 : 0050 ; -- <0117> "
    0266 : fc00 ; -- <0117> "
    0267 : 4202 ; -- <0117> eread 2 ga
    0268 : 180f ; -- <0117> "
    0269 : c800 ; -- <0117> "
    026a : 180f ; -- <0117> "
    026b : 0006 ; -- <0117> a = ga
    026c : fba0 ; -- <0117> call put4x
    026d : 006f ; -- <0117> "
    026e : fc00 ; -- <0117> "
    026f : 020d ; -- <0117> a = 13 -- puteol
    0270 : fba0 ; -- <0117> puteol
    0271 : 0050 ; -- <0117> "
    0272 : fc00 ; -- <0117> "
    0273 : 020a ; -- <0117> a = 10 -- puteol
    0274 : fba0 ; -- <0117> puteol
    0275 : 0050 ; -- <0117> "
    0276 : fc00 ; -- <0117> "



    0277 : 0006 ; -- <0117> a = ga
    0278 : 0600 ; -- <0117> b = 0

    0279 : e007 ; -- <0115> br eq :else_633
    027a : 027f ; -- <0115> "

    027b : 2202 ; -- <0116> pa = 0x02
    027c : fba0 ; -- <0116> callx fail 0x02
    027d : 0489 ; -- <0116> "
    027e : fc00 ; -- <0116> "


-- etest  3 0 0x03
-- etest  3 0 0x03

    027f : 0203 ; -- <0118> a = 3
    0280 : fba0 ; -- <0118> call put4x
    0281 : 006f ; -- <0118> "
    0282 : fc00 ; -- <0118> "
    0283 : 023a ; -- <0118> a = 58 -- putasc :
    0284 : fba0 ; -- <0118> putasc :
    0285 : 0050 ; -- <0118> "
    0286 : fc00 ; -- <0118> "
    0287 : 0220 ; -- <0118> a = 32 -- putasc { }
    0288 : fba0 ; -- <0118> putasc { }
    0289 : 0050 ; -- <0118> "
    028a : fc00 ; -- <0118> "
    028b : 4203 ; -- <0118> eread 3 ga
    028c : 180f ; -- <0118> "
    028d : c800 ; -- <0118> "
    028e : 180f ; -- <0118> "
    028f : 0006 ; -- <0118> a = ga
    0290 : fba0 ; -- <0118> call put4x
    0291 : 006f ; -- <0118> "
    0292 : fc00 ; -- <0118> "
    0293 : 020d ; -- <0118> a = 13 -- puteol
    0294 : fba0 ; -- <0118> puteol
    0295 : 0050 ; -- <0118> "
    0296 : fc00 ; -- <0118> "
    0297 : 020a ; -- <0118> a = 10 -- puteol
    0298 : fba0 ; -- <0118> puteol
    0299 : 0050 ; -- <0118> "
    029a : fc00 ; -- <0118> "



    029b : 0006 ; -- <0118> a = ga
    029c : 0600 ; -- <0118> b = 0

    029d : e007 ; -- <0116> br eq :else_669
    029e : 02a3 ; -- <0116> "

    029f : 2203 ; -- <0117> pa = 0x03
    02a0 : fba0 ; -- <0117> callx fail 0x03
    02a1 : 0489 ; -- <0117> "
    02a2 : fc00 ; -- <0117> "



-- test for sufficient wait states on read.
    02a3 : 4201 ; -- <0121> ewrite 1 0x18
    02a4 : c800 ; -- <0121> "
    02a5 : 3e18 ; -- <0121> "
    02a6 : 4201 ; -- <0122> eread 1 ga
    02a7 : 180f ; -- <0122> "
    02a8 : c800 ; -- <0122> "
    02a9 : 180f ; -- <0122> "
-- another read after some cycles have elapsed.
    02aa : 4201 ; -- <0124> eread 1 gb
    02ab : 1c0f ; -- <0124> "
    02ac : c800 ; -- <0124> "
    02ad : 1c0f ; -- <0124> "
    02ae : 0006 ; -- <0125> a = ga
    02af : fba0 ; -- <0126> call put4x
    02b0 : 006f ; -- <0126> "
    02b1 : fc00 ; -- <0126> "
    02b2 : 020d ; -- <0127> a = 13 -- puteol
    02b3 : fba0 ; -- <0127> puteol
    02b4 : 0050 ; -- <0127> "
    02b5 : fc00 ; -- <0127> "
    02b6 : 020a ; -- <0127> a = 10 -- puteol
    02b7 : fba0 ; -- <0127> puteol
    02b8 : 0050 ; -- <0127> "
    02b9 : fc00 ; -- <0127> "
    02ba : 0007 ; -- <0128> a = gb
    02bb : fba0 ; -- <0129> call put4x
    02bc : 006f ; -- <0129> "
    02bd : fc00 ; -- <0129> "
    02be : 020d ; -- <0130> a = 13 -- puteol
    02bf : fba0 ; -- <0130> puteol
    02c0 : 0050 ; -- <0130> "
    02c1 : fc00 ; -- <0130> "
    02c2 : 020a ; -- <0130> a = 10 -- puteol
    02c3 : fba0 ; -- <0130> puteol
    02c4 : 0050 ; -- <0130> "
    02c5 : fc00 ; -- <0130> "

    02c6 : 0006 ; -- <0133> a = ga
    02c7 : 0407 ; -- <0133> b = gb

    02c8 : e007 ; -- <0131> br eq :else_712
    02c9 : 02ce ; -- <0131> "

    02ca : 220f ; -- <0132> pa = 0x0f
    02cb : fba0 ; -- <0132> callx fail 0x0f
    02cc : 0489 ; -- <0132> "
    02cd : fc00 ; -- <0132> "


-- basic function test.
-- consecutive writes, different addresses.
-- consecutive reads, different addresses.
    02ce : 4200 ; -- <0138> ewrite 0 0x40
    02cf : c800 ; -- <0138> "
    02d0 : 3e40 ; -- <0138> "
    02d1 : 4201 ; -- <0139> ewrite 1 0x41
    02d2 : c800 ; -- <0139> "
    02d3 : 3e41 ; -- <0139> "
    02d4 : 4202 ; -- <0140> ewrite 2 0x42
    02d5 : c800 ; -- <0140> "
    02d6 : 3e42 ; -- <0140> "
    02d7 : 4203 ; -- <0141> ewrite 3 0x43
    02d8 : c800 ; -- <0141> "
    02d9 : 3e43 ; -- <0141> "
-- etest  0 0x40 0x10
-- etest  0 0x40 0x10

    02da : 0200 ; -- <0142> a = 0
    02db : fba0 ; -- <0142> call put4x
    02dc : 006f ; -- <0142> "
    02dd : fc00 ; -- <0142> "
    02de : 023a ; -- <0142> a = 58 -- putasc :
    02df : fba0 ; -- <0142> putasc :
    02e0 : 0050 ; -- <0142> "
    02e1 : fc00 ; -- <0142> "
    02e2 : 0220 ; -- <0142> a = 32 -- putasc { }
    02e3 : fba0 ; -- <0142> putasc { }
    02e4 : 0050 ; -- <0142> "
    02e5 : fc00 ; -- <0142> "
    02e6 : 4200 ; -- <0142> eread 0 ga
    02e7 : 180f ; -- <0142> "
    02e8 : c800 ; -- <0142> "
    02e9 : 180f ; -- <0142> "
    02ea : 0006 ; -- <0142> a = ga
    02eb : fba0 ; -- <0142> call put4x
    02ec : 006f ; -- <0142> "
    02ed : fc00 ; -- <0142> "
    02ee : 020d ; -- <0142> a = 13 -- puteol
    02ef : fba0 ; -- <0142> puteol
    02f0 : 0050 ; -- <0142> "
    02f1 : fc00 ; -- <0142> "
    02f2 : 020a ; -- <0142> a = 10 -- puteol
    02f3 : fba0 ; -- <0142> puteol
    02f4 : 0050 ; -- <0142> "
    02f5 : fc00 ; -- <0142> "



    02f6 : 0006 ; -- <0142> a = ga
    02f7 : 0640 ; -- <0142> b = 0x40

    02f8 : e007 ; -- <0140> br eq :else_760
    02f9 : 02fe ; -- <0140> "

    02fa : 2210 ; -- <0141> pa = 0x10
    02fb : fba0 ; -- <0141> callx fail 0x10
    02fc : 0489 ; -- <0141> "
    02fd : fc00 ; -- <0141> "


-- etest  1 0x41 0x11
-- etest  1 0x41 0x11

    02fe : 0201 ; -- <0143> a = 1
    02ff : fba0 ; -- <0143> call put4x
    0300 : 006f ; -- <0143> "
    0301 : fc00 ; -- <0143> "
    0302 : 023a ; -- <0143> a = 58 -- putasc :
    0303 : fba0 ; -- <0143> putasc :
    0304 : 0050 ; -- <0143> "
    0305 : fc00 ; -- <0143> "
    0306 : 0220 ; -- <0143> a = 32 -- putasc { }
    0307 : fba0 ; -- <0143> putasc { }
    0308 : 0050 ; -- <0143> "
    0309 : fc00 ; -- <0143> "
    030a : 4201 ; -- <0143> eread 1 ga
    030b : 180f ; -- <0143> "
    030c : c800 ; -- <0143> "
    030d : 180f ; -- <0143> "
    030e : 0006 ; -- <0143> a = ga
    030f : fba0 ; -- <0143> call put4x
    0310 : 006f ; -- <0143> "
    0311 : fc00 ; -- <0143> "
    0312 : 020d ; -- <0143> a = 13 -- puteol
    0313 : fba0 ; -- <0143> puteol
    0314 : 0050 ; -- <0143> "
    0315 : fc00 ; -- <0143> "
    0316 : 020a ; -- <0143> a = 10 -- puteol
    0317 : fba0 ; -- <0143> puteol
    0318 : 0050 ; -- <0143> "
    0319 : fc00 ; -- <0143> "



    031a : 0006 ; -- <0143> a = ga
    031b : 0641 ; -- <0143> b = 0x41

    031c : e007 ; -- <0141> br eq :else_796
    031d : 0322 ; -- <0141> "

    031e : 2211 ; -- <0142> pa = 0x11
    031f : fba0 ; -- <0142> callx fail 0x11
    0320 : 0489 ; -- <0142> "
    0321 : fc00 ; -- <0142> "


-- etest  2 0x42 0x12
-- etest  2 0x42 0x12

    0322 : 0202 ; -- <0144> a = 2
    0323 : fba0 ; -- <0144> call put4x
    0324 : 006f ; -- <0144> "
    0325 : fc00 ; -- <0144> "
    0326 : 023a ; -- <0144> a = 58 -- putasc :
    0327 : fba0 ; -- <0144> putasc :
    0328 : 0050 ; -- <0144> "
    0329 : fc00 ; -- <0144> "
    032a : 0220 ; -- <0144> a = 32 -- putasc { }
    032b : fba0 ; -- <0144> putasc { }
    032c : 0050 ; -- <0144> "
    032d : fc00 ; -- <0144> "
    032e : 4202 ; -- <0144> eread 2 ga
    032f : 180f ; -- <0144> "
    0330 : c800 ; -- <0144> "
    0331 : 180f ; -- <0144> "
    0332 : 0006 ; -- <0144> a = ga
    0333 : fba0 ; -- <0144> call put4x
    0334 : 006f ; -- <0144> "
    0335 : fc00 ; -- <0144> "
    0336 : 020d ; -- <0144> a = 13 -- puteol
    0337 : fba0 ; -- <0144> puteol
    0338 : 0050 ; -- <0144> "
    0339 : fc00 ; -- <0144> "
    033a : 020a ; -- <0144> a = 10 -- puteol
    033b : fba0 ; -- <0144> puteol
    033c : 0050 ; -- <0144> "
    033d : fc00 ; -- <0144> "



    033e : 0006 ; -- <0144> a = ga
    033f : 0642 ; -- <0144> b = 0x42

    0340 : e007 ; -- <0142> br eq :else_832
    0341 : 0346 ; -- <0142> "

    0342 : 2212 ; -- <0143> pa = 0x12
    0343 : fba0 ; -- <0143> callx fail 0x12
    0344 : 0489 ; -- <0143> "
    0345 : fc00 ; -- <0143> "


-- etest  3 0x43 0x13
-- etest  3 0x43 0x13

    0346 : 0203 ; -- <0145> a = 3
    0347 : fba0 ; -- <0145> call put4x
    0348 : 006f ; -- <0145> "
    0349 : fc00 ; -- <0145> "
    034a : 023a ; -- <0145> a = 58 -- putasc :
    034b : fba0 ; -- <0145> putasc :
    034c : 0050 ; -- <0145> "
    034d : fc00 ; -- <0145> "
    034e : 0220 ; -- <0145> a = 32 -- putasc { }
    034f : fba0 ; -- <0145> putasc { }
    0350 : 0050 ; -- <0145> "
    0351 : fc00 ; -- <0145> "
    0352 : 4203 ; -- <0145> eread 3 ga
    0353 : 180f ; -- <0145> "
    0354 : c800 ; -- <0145> "
    0355 : 180f ; -- <0145> "
    0356 : 0006 ; -- <0145> a = ga
    0357 : fba0 ; -- <0145> call put4x
    0358 : 006f ; -- <0145> "
    0359 : fc00 ; -- <0145> "
    035a : 020d ; -- <0145> a = 13 -- puteol
    035b : fba0 ; -- <0145> puteol
    035c : 0050 ; -- <0145> "
    035d : fc00 ; -- <0145> "
    035e : 020a ; -- <0145> a = 10 -- puteol
    035f : fba0 ; -- <0145> puteol
    0360 : 0050 ; -- <0145> "
    0361 : fc00 ; -- <0145> "



    0362 : 0006 ; -- <0145> a = ga
    0363 : 0643 ; -- <0145> b = 0x43

    0364 : e007 ; -- <0143> br eq :else_868
    0365 : 036a ; -- <0143> "

    0366 : 2213 ; -- <0144> pa = 0x13
    0367 : fba0 ; -- <0144> callx fail 0x13
    0368 : 0489 ; -- <0144> "
    0369 : fc00 ; -- <0144> "



-- consecutive writes, same address.
    036a : 4203 ; -- <0148> ewrite 3 0x51
    036b : c800 ; -- <0148> "
    036c : 3e51 ; -- <0148> "
    036d : 4203 ; -- <0149> ewrite 3 0x52
    036e : c800 ; -- <0149> "
    036f : 3e52 ; -- <0149> "
    0370 : 4203 ; -- <0150> ewrite 3 0x53
    0371 : c800 ; -- <0150> "
    0372 : 3e53 ; -- <0150> "
    0373 : 4203 ; -- <0151> ewrite 3 0x54
    0374 : c800 ; -- <0151> "
    0375 : 3e54 ; -- <0151> "
    0376 : 4203 ; -- <0152> ewrite 3 0x55
    0377 : c800 ; -- <0152> "
    0378 : 3e55 ; -- <0152> "
-- etest  3 0x55 0x20
-- etest  3 0x55 0x20

    0379 : 0203 ; -- <0153> a = 3
    037a : fba0 ; -- <0153> call put4x
    037b : 006f ; -- <0153> "
    037c : fc00 ; -- <0153> "
    037d : 023a ; -- <0153> a = 58 -- putasc :
    037e : fba0 ; -- <0153> putasc :
    037f : 0050 ; -- <0153> "
    0380 : fc00 ; -- <0153> "
    0381 : 0220 ; -- <0153> a = 32 -- putasc { }
    0382 : fba0 ; -- <0153> putasc { }
    0383 : 0050 ; -- <0153> "
    0384 : fc00 ; -- <0153> "
    0385 : 4203 ; -- <0153> eread 3 ga
    0386 : 180f ; -- <0153> "
    0387 : c800 ; -- <0153> "
    0388 : 180f ; -- <0153> "
    0389 : 0006 ; -- <0153> a = ga
    038a : fba0 ; -- <0153> call put4x
    038b : 006f ; -- <0153> "
    038c : fc00 ; -- <0153> "
    038d : 020d ; -- <0153> a = 13 -- puteol
    038e : fba0 ; -- <0153> puteol
    038f : 0050 ; -- <0153> "
    0390 : fc00 ; -- <0153> "
    0391 : 020a ; -- <0153> a = 10 -- puteol
    0392 : fba0 ; -- <0153> puteol
    0393 : 0050 ; -- <0153> "
    0394 : fc00 ; -- <0153> "



    0395 : 0006 ; -- <0153> a = ga
    0396 : 0655 ; -- <0153> b = 0x55

    0397 : e007 ; -- <0151> br eq :else_919
    0398 : 039d ; -- <0151> "

    0399 : 2220 ; -- <0152> pa = 0x20
    039a : fba0 ; -- <0152> callx fail 0x20
    039b : 0489 ; -- <0152> "
    039c : fc00 ; -- <0152> "



-- consecutive write/read write/read turarounds, same address.
    039d : 4203 ; -- <0156> ewrite 3 0x30
    039e : c800 ; -- <0156> "
    039f : 3e30 ; -- <0156> "
-- etest  3 0x30 0x30
-- etest  3 0x30 0x30

    03a0 : 0203 ; -- <0157> a = 3
    03a1 : fba0 ; -- <0157> call put4x
    03a2 : 006f ; -- <0157> "
    03a3 : fc00 ; -- <0157> "
    03a4 : 023a ; -- <0157> a = 58 -- putasc :
    03a5 : fba0 ; -- <0157> putasc :
    03a6 : 0050 ; -- <0157> "
    03a7 : fc00 ; -- <0157> "
    03a8 : 0220 ; -- <0157> a = 32 -- putasc { }
    03a9 : fba0 ; -- <0157> putasc { }
    03aa : 0050 ; -- <0157> "
    03ab : fc00 ; -- <0157> "
    03ac : 4203 ; -- <0157> eread 3 ga
    03ad : 180f ; -- <0157> "
    03ae : c800 ; -- <0157> "
    03af : 180f ; -- <0157> "
    03b0 : 0006 ; -- <0157> a = ga
    03b1 : fba0 ; -- <0157> call put4x
    03b2 : 006f ; -- <0157> "
    03b3 : fc00 ; -- <0157> "
    03b4 : 020d ; -- <0157> a = 13 -- puteol
    03b5 : fba0 ; -- <0157> puteol
    03b6 : 0050 ; -- <0157> "
    03b7 : fc00 ; -- <0157> "
    03b8 : 020a ; -- <0157> a = 10 -- puteol
    03b9 : fba0 ; -- <0157> puteol
    03ba : 0050 ; -- <0157> "
    03bb : fc00 ; -- <0157> "



    03bc : 0006 ; -- <0157> a = ga
    03bd : 0630 ; -- <0157> b = 0x30

    03be : e007 ; -- <0155> br eq :else_958
    03bf : 03c4 ; -- <0155> "

    03c0 : 2230 ; -- <0156> pa = 0x30
    03c1 : fba0 ; -- <0156> callx fail 0x30
    03c2 : 0489 ; -- <0156> "
    03c3 : fc00 ; -- <0156> "


    03c4 : 4203 ; -- <0158> ewrite 3 0x31
    03c5 : c800 ; -- <0158> "
    03c6 : 3e31 ; -- <0158> "
-- etest  3 0x31 0x31
-- etest  3 0x31 0x31

    03c7 : 0203 ; -- <0159> a = 3
    03c8 : fba0 ; -- <0159> call put4x
    03c9 : 006f ; -- <0159> "
    03ca : fc00 ; -- <0159> "
    03cb : 023a ; -- <0159> a = 58 -- putasc :
    03cc : fba0 ; -- <0159> putasc :
    03cd : 0050 ; -- <0159> "
    03ce : fc00 ; -- <0159> "
    03cf : 0220 ; -- <0159> a = 32 -- putasc { }
    03d0 : fba0 ; -- <0159> putasc { }
    03d1 : 0050 ; -- <0159> "
    03d2 : fc00 ; -- <0159> "
    03d3 : 4203 ; -- <0159> eread 3 ga
    03d4 : 180f ; -- <0159> "
    03d5 : c800 ; -- <0159> "
    03d6 : 180f ; -- <0159> "
    03d7 : 0006 ; -- <0159> a = ga
    03d8 : fba0 ; -- <0159> call put4x
    03d9 : 006f ; -- <0159> "
    03da : fc00 ; -- <0159> "
    03db : 020d ; -- <0159> a = 13 -- puteol
    03dc : fba0 ; -- <0159> puteol
    03dd : 0050 ; -- <0159> "
    03de : fc00 ; -- <0159> "
    03df : 020a ; -- <0159> a = 10 -- puteol
    03e0 : fba0 ; -- <0159> puteol
    03e1 : 0050 ; -- <0159> "
    03e2 : fc00 ; -- <0159> "



    03e3 : 0006 ; -- <0159> a = ga
    03e4 : 0631 ; -- <0159> b = 0x31

    03e5 : e007 ; -- <0157> br eq :else_997
    03e6 : 03eb ; -- <0157> "

    03e7 : 2231 ; -- <0158> pa = 0x31
    03e8 : fba0 ; -- <0158> callx fail 0x31
    03e9 : 0489 ; -- <0158> "
    03ea : fc00 ; -- <0158> "


    03eb : 4203 ; -- <0160> ewrite 3 0x32
    03ec : c800 ; -- <0160> "
    03ed : 3e32 ; -- <0160> "
-- etest  3 0x32 0x32
-- etest  3 0x32 0x32

    03ee : 0203 ; -- <0161> a = 3
    03ef : fba0 ; -- <0161> call put4x
    03f0 : 006f ; -- <0161> "
    03f1 : fc00 ; -- <0161> "
    03f2 : 023a ; -- <0161> a = 58 -- putasc :
    03f3 : fba0 ; -- <0161> putasc :
    03f4 : 0050 ; -- <0161> "
    03f5 : fc00 ; -- <0161> "
    03f6 : 0220 ; -- <0161> a = 32 -- putasc { }
    03f7 : fba0 ; -- <0161> putasc { }
    03f8 : 0050 ; -- <0161> "
    03f9 : fc00 ; -- <0161> "
    03fa : 4203 ; -- <0161> eread 3 ga
    03fb : 180f ; -- <0161> "
    03fc : c800 ; -- <0161> "
    03fd : 180f ; -- <0161> "
    03fe : 0006 ; -- <0161> a = ga
    03ff : fba0 ; -- <0161> call put4x
    0400 : 006f ; -- <0161> "
    0401 : fc00 ; -- <0161> "
    0402 : 020d ; -- <0161> a = 13 -- puteol
    0403 : fba0 ; -- <0161> puteol
    0404 : 0050 ; -- <0161> "
    0405 : fc00 ; -- <0161> "
    0406 : 020a ; -- <0161> a = 10 -- puteol
    0407 : fba0 ; -- <0161> puteol
    0408 : 0050 ; -- <0161> "
    0409 : fc00 ; -- <0161> "



    040a : 0006 ; -- <0161> a = ga
    040b : 0632 ; -- <0161> b = 0x32

    040c : e007 ; -- <0159> br eq :else_1036
    040d : 0412 ; -- <0159> "

    040e : 2232 ; -- <0160> pa = 0x32
    040f : fba0 ; -- <0160> callx fail 0x32
    0410 : 0489 ; -- <0160> "
    0411 : fc00 ; -- <0160> "



-- consecutive write/read write/read turarounds, different addresses.
    0412 : 4200 ; -- <0164> ewrite 0 0x40
    0413 : c800 ; -- <0164> "
    0414 : 3e40 ; -- <0164> "
-- etest  0 0x40 0x40
-- etest  0 0x40 0x40

    0415 : 0200 ; -- <0165> a = 0
    0416 : fba0 ; -- <0165> call put4x
    0417 : 006f ; -- <0165> "
    0418 : fc00 ; -- <0165> "
    0419 : 023a ; -- <0165> a = 58 -- putasc :
    041a : fba0 ; -- <0165> putasc :
    041b : 0050 ; -- <0165> "
    041c : fc00 ; -- <0165> "
    041d : 0220 ; -- <0165> a = 32 -- putasc { }
    041e : fba0 ; -- <0165> putasc { }
    041f : 0050 ; -- <0165> "
    0420 : fc00 ; -- <0165> "
    0421 : 4200 ; -- <0165> eread 0 ga
    0422 : 180f ; -- <0165> "
    0423 : c800 ; -- <0165> "
    0424 : 180f ; -- <0165> "
    0425 : 0006 ; -- <0165> a = ga
    0426 : fba0 ; -- <0165> call put4x
    0427 : 006f ; -- <0165> "
    0428 : fc00 ; -- <0165> "
    0429 : 020d ; -- <0165> a = 13 -- puteol
    042a : fba0 ; -- <0165> puteol
    042b : 0050 ; -- <0165> "
    042c : fc00 ; -- <0165> "
    042d : 020a ; -- <0165> a = 10 -- puteol
    042e : fba0 ; -- <0165> puteol
    042f : 0050 ; -- <0165> "
    0430 : fc00 ; -- <0165> "



    0431 : 0006 ; -- <0165> a = ga
    0432 : 0640 ; -- <0165> b = 0x40

    0433 : e007 ; -- <0163> br eq :else_1075
    0434 : 0439 ; -- <0163> "

    0435 : 2240 ; -- <0164> pa = 0x40
    0436 : fba0 ; -- <0164> callx fail 0x40
    0437 : 0489 ; -- <0164> "
    0438 : fc00 ; -- <0164> "


    0439 : 4201 ; -- <0166> ewrite 1 0x41
    043a : c800 ; -- <0166> "
    043b : 3e41 ; -- <0166> "
-- etest  1 0x41 0x41
-- etest  1 0x41 0x41

    043c : 0201 ; -- <0167> a = 1
    043d : fba0 ; -- <0167> call put4x
    043e : 006f ; -- <0167> "
    043f : fc00 ; -- <0167> "
    0440 : 023a ; -- <0167> a = 58 -- putasc :
    0441 : fba0 ; -- <0167> putasc :
    0442 : 0050 ; -- <0167> "
    0443 : fc00 ; -- <0167> "
    0444 : 0220 ; -- <0167> a = 32 -- putasc { }
    0445 : fba0 ; -- <0167> putasc { }
    0446 : 0050 ; -- <0167> "
    0447 : fc00 ; -- <0167> "
    0448 : 4201 ; -- <0167> eread 1 ga
    0449 : 180f ; -- <0167> "
    044a : c800 ; -- <0167> "
    044b : 180f ; -- <0167> "
    044c : 0006 ; -- <0167> a = ga
    044d : fba0 ; -- <0167> call put4x
    044e : 006f ; -- <0167> "
    044f : fc00 ; -- <0167> "
    0450 : 020d ; -- <0167> a = 13 -- puteol
    0451 : fba0 ; -- <0167> puteol
    0452 : 0050 ; -- <0167> "
    0453 : fc00 ; -- <0167> "
    0454 : 020a ; -- <0167> a = 10 -- puteol
    0455 : fba0 ; -- <0167> puteol
    0456 : 0050 ; -- <0167> "
    0457 : fc00 ; -- <0167> "



    0458 : 0006 ; -- <0167> a = ga
    0459 : 0641 ; -- <0167> b = 0x41

    045a : e007 ; -- <0165> br eq :else_1114
    045b : 0460 ; -- <0165> "

    045c : 2241 ; -- <0166> pa = 0x41
    045d : fba0 ; -- <0166> callx fail 0x41
    045e : 0489 ; -- <0166> "
    045f : fc00 ; -- <0166> "


    0460 : 4202 ; -- <0168> ewrite 2 0x42
    0461 : c800 ; -- <0168> "
    0462 : 3e42 ; -- <0168> "
-- etest  2 0x42 0x42
-- etest  2 0x42 0x42

    0463 : 0202 ; -- <0169> a = 2
    0464 : fba0 ; -- <0169> call put4x
    0465 : 006f ; -- <0169> "
    0466 : fc00 ; -- <0169> "
    0467 : 023a ; -- <0169> a = 58 -- putasc :
    0468 : fba0 ; -- <0169> putasc :
    0469 : 0050 ; -- <0169> "
    046a : fc00 ; -- <0169> "
    046b : 0220 ; -- <0169> a = 32 -- putasc { }
    046c : fba0 ; -- <0169> putasc { }
    046d : 0050 ; -- <0169> "
    046e : fc00 ; -- <0169> "
    046f : 4202 ; -- <0169> eread 2 ga
    0470 : 180f ; -- <0169> "
    0471 : c800 ; -- <0169> "
    0472 : 180f ; -- <0169> "
    0473 : 0006 ; -- <0169> a = ga
    0474 : fba0 ; -- <0169> call put4x
    0475 : 006f ; -- <0169> "
    0476 : fc00 ; -- <0169> "
    0477 : 020d ; -- <0169> a = 13 -- puteol
    0478 : fba0 ; -- <0169> puteol
    0479 : 0050 ; -- <0169> "
    047a : fc00 ; -- <0169> "
    047b : 020a ; -- <0169> a = 10 -- puteol
    047c : fba0 ; -- <0169> puteol
    047d : 0050 ; -- <0169> "
    047e : fc00 ; -- <0169> "



    047f : 0006 ; -- <0169> a = ga
    0480 : 0642 ; -- <0169> b = 0x42

    0481 : e007 ; -- <0167> br eq :else_1153
    0482 : 0487 ; -- <0167> "

    0483 : 2242 ; -- <0168> pa = 0x42
    0484 : fba0 ; -- <0168> callx fail 0x42
    0485 : 0489 ; -- <0168> "
    0486 : fc00 ; -- <0168> "



--TODO: test exp_r_read with a read-sensitive counter.
-- also test a write-sensitive counter.


    0487 : e00f ; -- <0175> jmp :begin_test
    0488 : 0207 ; -- <0175> "

-- ######## func fail -- = 0x0489
    0489 : 303e ; -- <0185> push rtna -- func fail

    048a : 03a0 ; -- <0178> a = :fail_msg
    048b : 004a ; -- <0178> "
    048c : fba0 ; -- <0179> call print_nt
    048d : 00fb ; -- <0179> "
    048e : fc00 ; -- <0179> "
    048f : 0008 ; -- <0180> a = fail_code_num
    0490 : fba0 ; -- <0181> call put4x
    0491 : 006f ; -- <0181> "
    0492 : fc00 ; -- <0181> "
    0493 : 020d ; -- <0182> a = 13 -- puteol
    0494 : fba0 ; -- <0182> puteol
    0495 : 0050 ; -- <0182> "
    0496 : fc00 ; -- <0182> "
    0497 : 020a ; -- <0182> a = 10 -- puteol
    0498 : fba0 ; -- <0182> puteol
    0499 : 0050 ; -- <0182> "
    049a : fc00 ; -- <0182> "
-- :fail_halt -- = 0x049b
    049b : e00f ; -- <0184> jmp :fail_halt
    049c : 049b ; -- <0184> "

    049d : f80c ; -- <0186> pop rtna -- func fail
    049e : fc00 ; -- <0186> swapra = nop

-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 pa
-- src reg 0009 pb
-- src reg 000a pc
-- src reg 000b pd
-- src reg 000c rstk
-- src reg 000d fduart_data
-- src reg 000e fduart_status
-- src reg 000f exp
-- src reg 0010 exp_addr
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 pa
-- dest reg 0009 pb
-- dest reg 000a pc
-- dest reg 000b pd
-- dest reg 000c rstk
-- dest reg 000d fduart_data
-- dest reg 000e fduart_status
-- dest reg 000f exp
-- dest reg 0010 exp_addr

END;
