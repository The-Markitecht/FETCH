
        DEPTH = 2048 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- program code dimensions.

-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.

-- these are for the VISOR code, not the TARGET code.

-- register file configuration
-- DON'T reduce visor_num_regs from 32 to 26.  it costs 6% of the core's clock rate!

-- application-specific register aliases.  in this case debugging-specific ones.






-- Synapse instruction set architecture constants.


    0000 : e00f ; -- <0072> jmp :main
    0001 : 014d ; -- <0072> "


-- driver library for my_uart_v2 simple async transceiver.



-- :eol_msg -- = 0x0002
-- "\r\n\x0"
    0002 : 0a0d ; -- <0011>   
    0003 : 0000 ; -- <0011>   


-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
-- ######## func putchar_atx -- = 0x0004
    0004 : 2004 ; -- <0038> push x -- func putchar_atx

    0005 : 1000 ; -- <0040> x = a

-- wait for UART to be idle (not busy).
    0006 : 0202 ; -- <0043> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x0007
    0007 : 0412 ; -- <0045> b = atx_ctrl
    0008 : e403 ; -- <0046> bn and0z :pcatx_wait_for_idle
    0009 : 0007 ; -- <0046> "

-- push word to the UART.  its low byte is a character.
    000a : 4404 ; -- <0049> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    000b : 4a01 ; -- <0054> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    000c : 0202 ; -- <0057> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x000d
    000d : 0412 ; -- <0059> b = atx_ctrl
    000e : e003 ; -- <0060> br and0z :pcatx_wait_for_busy
    000f : 000d ; -- <0060> "
    0010 : 4a00 ; -- <0061> atx_ctrl = 0
    0011 : 1008 ; -- <0062> pop x -- end_func
    0012 : fc00 ; -- <0061> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_atx -- = 0x0013
-- wait until UART is busy, then idle.
    0013 : 0204 ; -- <0068> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0014
    0014 : 0412 ; -- <0070> b = atx_ctrl
    0015 : e003 ; -- <0071> br and0z :wait_for_busy
    0016 : 0014 ; -- <0071> "
-- :wait_for_idle -- = 0x0017
    0017 : 0412 ; -- <0073> b = atx_ctrl
    0018 : e403 ; -- <0074> bn and0z :wait_for_idle
    0019 : 0017 ; -- <0074> "
    001a : 0011 ; -- <0075> a = atx_data
    001b : fc00 ; -- <0075> swapra = nop

-- returns a character in a, or -1 if none.
-- this version can miss characters if not polled while the character is arriving.
-- ######## func pollchar_atx -- = 0x001c
-- check for UART is busy, then idle.
    001c : 0204 ; -- <0082> a = $arx_busy_mask
    001d : 0412 ; -- <0083> b = atx_ctrl
    001e : e003 ; -- <0084> br and0z :none
    001f : 0025 ; -- <0084> "
-- :wait_for_idle -- = 0x0020
    0020 : 0412 ; -- <0086> b = atx_ctrl
    0021 : e403 ; -- <0087> bn and0z :wait_for_idle
    0022 : 0020 ; -- <0087> "
    0023 : 0011 ; -- <0088> a = atx_data
    0024 : fc00 ; -- <0088> swapra = nop
-- :none -- = 0x0025
    0025 : 0360 ; -- <0091> a = -1
    0026 : fc00 ; -- <0091> swapra = nop



-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x0027
    0027 : 0601 ; -- <0005> b = 1
    0028 : e003 ; -- <0006> br and0z :pick_byte_even
    0029 : 0032 ; -- <0006> "
    002a : 0350 ; -- <0007> a = a>>1
    002b : 0404 ; -- <0008> b = x
    002c : c800 ; -- <0009> fetch a from a+b
    002d : d300 ; -- <0009> "
    002e : 03b0 ; -- <0009> "
    002f : 0353 ; -- <0010> a = a>>4
    0030 : 0353 ; -- <0011> a = a>>4
    0031 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x0032
    0032 : 0350 ; -- <0014> a = a>>1
    0033 : 0404 ; -- <0015> b = x
    0034 : c800 ; -- <0016> fetch a from a+b
    0035 : d300 ; -- <0016> "
    0036 : 03b0 ; -- <0016> "
    0037 : 06ff ; -- <0017> b = 0xff
    0038 : c800 ; -- <0018> a = and
    0039 : 0330 ; -- <0018> "
    003a : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x003b
    003b : 2002 ; -- <0027> push i -- func find_in_fetch
    003c : 2003 ; -- <0027> push j -- "
    003d : 2005 ; -- <0027> push y -- "
    003e : 203e ; -- <0027> push rtna -- "
    003f : 1400 ; -- <0028> y = a
    0040 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0041
    0041 : e001 ; -- <0031> br iz :fail
    0042 : 0051 ; -- <0031> "
    0043 : 0b10 ; -- <0032> i = ad1
    0044 : 0002 ; -- <0033> a = i
    0045 : fba0 ; -- <0034> call :fetch_byte
    0046 : 0027 ; -- <0034> "
    0047 : fc00 ; -- <0034> "
    0048 : 0405 ; -- <0035> b = y
    0049 : e407 ; -- <0036> bn eq :again
    004a : 0041 ; -- <0036> "
-- :found -- = 0x004b
    004b : 0002 ; -- <0038> a = i
    004c : f808 ; -- <0039> pop rtna -- rtn
    004d : 1408 ; -- <0039> pop y -- "
    004e : 0c08 ; -- <0039> pop j -- "
    004f : 0808 ; -- <0039> pop i -- "
    0050 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0051
    0051 : 0360 ; -- <0041> a = -1
    0052 : f808 ; -- <0042> pop rtna -- end_func
    0053 : 1408 ; -- <0042> pop y -- "
    0054 : 0c08 ; -- <0042> pop j -- "
    0055 : 0808 ; -- <0042> pop i -- "
    0056 : fc00 ; -- <0041> swapra = nop



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0057
-- "0123456789abcdef"
    0057 : 3130 ; -- <0050> 10
    0058 : 3332 ; -- <0050> 32
    0059 : 3534 ; -- <0050> 54
    005a : 3736 ; -- <0050> 76
    005b : 3938 ; -- <0050> 98
    005c : 6261 ; -- <0050> ba
    005d : 6463 ; -- <0050> dc
    005e : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x005f
    005f : 2004 ; -- <0054> push x -- func put4x
    0060 : 2006 ; -- <0054> push ga -- "
    0061 : 203e ; -- <0054> push rtna -- "
    0062 : 13a0 ; -- <0055> x = :hexdigits
    0063 : 0057 ; -- <0055> "

    0064 : 1800 ; -- <0057> ga = a
    0065 : 07a0 ; -- <0058> b = 0xF000
    0066 : f000 ; -- <0058> "
    0067 : c800 ; -- <0059> a = and
    0068 : 0330 ; -- <0059> "
    0069 : 0353 ; -- <0060> a = a>>4
    006a : 0353 ; -- <0061> a = a>>4
    006b : 0353 ; -- <0062> a = a>>4
    006c : fba0 ; -- <0063> call fetch_byte
    006d : 0027 ; -- <0063> "
    006e : fc00 ; -- <0063> "
    006f : fba0 ; -- <0064> putchar a
    0070 : 0004 ; -- <0064> "
    0071 : fc00 ; -- <0064> "

    0072 : 0006 ; -- <0066> a = ga
    0073 : 07a0 ; -- <0067> b = 0x0F00
    0074 : 0f00 ; -- <0067> "
    0075 : c800 ; -- <0068> a = and
    0076 : 0330 ; -- <0068> "
    0077 : 0353 ; -- <0069> a = a>>4
    0078 : 0353 ; -- <0070> a = a>>4
    0079 : fba0 ; -- <0071> call fetch_byte
    007a : 0027 ; -- <0071> "
    007b : fc00 ; -- <0071> "
    007c : fba0 ; -- <0072> putchar a
    007d : 0004 ; -- <0072> "
    007e : fc00 ; -- <0072> "

    007f : 0006 ; -- <0074> a = ga
    0080 : 06f0 ; -- <0075> b = 0x00F0
    0081 : c800 ; -- <0076> a = and
    0082 : 0330 ; -- <0076> "
    0083 : 0353 ; -- <0077> a = a>>4
    0084 : fba0 ; -- <0078> call fetch_byte
    0085 : 0027 ; -- <0078> "
    0086 : fc00 ; -- <0078> "
    0087 : fba0 ; -- <0079> putchar a
    0088 : 0004 ; -- <0079> "
    0089 : fc00 ; -- <0079> "

    008a : 0006 ; -- <0081> a = ga
    008b : 060f ; -- <0082> b = 0x000F
    008c : c800 ; -- <0083> a = and
    008d : 0330 ; -- <0083> "
    008e : fba0 ; -- <0084> call fetch_byte
    008f : 0027 ; -- <0084> "
    0090 : fc00 ; -- <0084> "
    0091 : fba0 ; -- <0085> putchar a
    0092 : 0004 ; -- <0085> "
    0093 : fc00 ; -- <0085> "

    0094 : f808 ; -- <0087> pop rtna -- end_func
    0095 : 1808 ; -- <0087> pop ga -- "
    0096 : 1008 ; -- <0087> pop x -- "
    0097 : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x0098
    0098 : 2002 ; -- <0091> push i -- func get4x
    0099 : 2003 ; -- <0091> push j -- "
    009a : 2004 ; -- <0091> push x -- "
    009b : 2005 ; -- <0091> push y -- "
    009c : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    009d : 1604 ; -- <0094> y = 4
-- :again -- = 0x009e
    009e : fba0 ; -- <0096> getchar
    009f : 0013 ; -- <0096> "
    00a0 : fc00 ; -- <0096> "
    00a1 : 13a0 ; -- <0097> x = :hexdigits
    00a2 : 0057 ; -- <0097> "
    00a3 : 0a10 ; -- <0098> i = 16
    00a4 : fba0 ; -- <0099> call :find_in_fetch
    00a5 : 003b ; -- <0099> "
    00a6 : fc00 ; -- <0099> "
    00a7 : 0760 ; -- <0100> b = -1
    00a8 : e007 ; -- <0101> br eq :fail
    00a9 : 00bd ; -- <0101> "
    00aa : 0400 ; -- <0102> b = a
    00ab : 0003 ; -- <0103> a = j
    00ac : 0352 ; -- <0104> a = a<<4
    00ad : c800 ; -- <0105> j = or
    00ae : 0f34 ; -- <0105> "
    00af : 1360 ; -- <0106> x = -1
    00b0 : c800 ; -- <0107> y = x+y
    00b1 : 1720 ; -- <0107> "
    00b2 : 0005 ; -- <0108> a = y
    00b3 : e400 ; -- <0109> bn az :again
    00b4 : 009e ; -- <0109> "
    00b5 : 0003 ; -- <0110> a = j
    00b6 : 0600 ; -- <0111> b = 0
    00b7 : f808 ; -- <0112> pop rtna -- rtn
    00b8 : 1408 ; -- <0112> pop y -- "
    00b9 : 1008 ; -- <0112> pop x -- "
    00ba : 0c08 ; -- <0112> pop j -- "
    00bb : 0808 ; -- <0112> pop i -- "
    00bc : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x00bd
    00bd : 0760 ; -- <0114> b = -1
    00be : f808 ; -- <0115> pop rtna -- end_func
    00bf : 1408 ; -- <0115> pop y -- "
    00c0 : 1008 ; -- <0115> pop x -- "
    00c1 : 0c08 ; -- <0115> pop j -- "
    00c2 : 0808 ; -- <0115> pop i -- "
    00c3 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x00c4
    00c4 : 2002 ; -- <0121> push i -- func print_fixed
    00c5 : 2003 ; -- <0121> push j -- "
    00c6 : 2004 ; -- <0121> push x -- "
    00c7 : 2005 ; -- <0121> push y -- "
    00c8 : 2006 ; -- <0121> push ga -- "
    00c9 : 203e ; -- <0121> push rtna -- "
    00ca : 0800 ; -- <0122> i = a
    00cb : 0e01 ; -- <0123> j = 1
    00cc : 1001 ; -- <0124> x = b
    00cd : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x00ce
    00ce : e002 ; -- <0127> br xz :done
    00cf : 00e4 ; -- <0127> "
    00d0 : 1320 ; -- <0128> x = ad2
    00d1 : d002 ; -- <0129> fetch ga from i
    00d2 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, ga = data word.
    00d3 : 0006 ; -- <0131> a = ga -- putchar ga
    00d4 : fba0 ; -- <0131> putchar ga
    00d5 : 0004 ; -- <0131> "
    00d6 : fc00 ; -- <0131> "
    00d7 : e002 ; -- <0132> br xz :done
    00d8 : 00e4 ; -- <0132> "
    00d9 : 1320 ; -- <0133> x = ad2
    00da : 0006 ; -- <0134> a = ga
    00db : 0353 ; -- <0135> a = a>>4
    00dc : 0353 ; -- <0136> a = a>>4
    00dd : fba0 ; -- <0137> putchar a
    00de : 0004 ; -- <0137> "
    00df : fc00 ; -- <0137> "
    00e0 : c800 ; -- <0138> i = i+j
    00e1 : 0b10 ; -- <0138> "
    00e2 : e00f ; -- <0139> jmp :next_word
    00e3 : 00ce ; -- <0139> "
-- :done -- = 0x00e4
    00e4 : f808 ; -- <0141> pop rtna -- end_func
    00e5 : 1808 ; -- <0141> pop ga -- "
    00e6 : 1408 ; -- <0141> pop y -- "
    00e7 : 1008 ; -- <0141> pop x -- "
    00e8 : 0c08 ; -- <0141> pop j -- "
    00e9 : 0808 ; -- <0141> pop i -- "
    00ea : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x00eb
    00eb : 2002 ; -- <0147> push i -- func print_nt
    00ec : 2003 ; -- <0147> push j -- "
    00ed : 2004 ; -- <0147> push x -- "
    00ee : 203e ; -- <0147> push rtna -- "
    00ef : 0800 ; -- <0148> i = a
    00f0 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x00f1
    00f1 : d002 ; -- <0151> fetch x from i
    00f2 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    00f3 : 0004 ; -- <0153> a = x
    00f4 : 06ff ; -- <0154> b = 0xff
    00f5 : e003 ; -- <0155> br and0z :done
    00f6 : 0107 ; -- <0155> "
    00f7 : fba0 ; -- <0156> putchar a
    00f8 : 0004 ; -- <0156> "
    00f9 : fc00 ; -- <0156> "
    00fa : 0004 ; -- <0157> a = x
    00fb : 0353 ; -- <0158> a = a>>4
    00fc : 0353 ; -- <0159> a = a>>4
    00fd : 06ff ; -- <0160> b = 0xff
    00fe : e003 ; -- <0161> br and0z :done
    00ff : 0107 ; -- <0161> "
    0100 : fba0 ; -- <0162> putchar a
    0101 : 0004 ; -- <0162> "
    0102 : fc00 ; -- <0162> "
    0103 : c800 ; -- <0163> i = i+j
    0104 : 0b10 ; -- <0163> "
    0105 : e00f ; -- <0164> jmp :next_word
    0106 : 00f1 ; -- <0164> "
-- :done -- = 0x0107
    0107 : f808 ; -- <0166> pop rtna -- end_func
    0108 : 1008 ; -- <0166> pop x -- "
    0109 : 0c08 ; -- <0166> pop j -- "
    010a : 0808 ; -- <0166> pop i -- "
    010b : fc00 ; -- <0165> swapra = nop




-- ######## func fletcher16_init -- = 0x010c

    010c : 1a00 ; -- <0005> $fletcher_sum1_reg = 0
    010d : 1e00 ; -- <0006> $fletcher_sum2_reg = 0

    010e : fc00 ; -- <0008> swapra = nop

-- return the modulus(255) of a given number.
-- ######## func mod255 -- = 0x010f

-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x010f
    010f : 06fe ; -- <0013> b = 0xfe
    0110 : e006 ; -- <0014> br gt :mod255_greater
    0111 : 0113 ; -- <0014> "
    0112 : fc00 ; -- <0014> swapra = nop
-- :mod255_greater -- = 0x0113
    0113 : 07a0 ; -- <0017> b = ([negate 0xfe])
    0114 : ff02 ; -- <0017> "
    0115 : c800 ; -- <0018> a = a+b
    0116 : 0300 ; -- <0018> "
    0117 : e00f ; -- <0019> jmp :mod255_again
    0118 : 010f ; -- <0019> "

    0119 : fc00 ; -- <0021> swapra = nop

-- accumulate a Fletcher16 checksum, given the next byte of data.
-- ######## func fletcher16_input8 -- = 0x011a
    011a : 203e ; -- <0030> push rtna -- func fletcher16_input8

    011b : 0406 ; -- <0024> b = $fletcher_sum1_reg
    011c : c800 ; -- <0025> a = a+b
    011d : 0300 ; -- <0025> "
    011e : fba0 ; -- <0025> callx mod255  a+b  $fletcher_sum1_reg
    011f : 010f ; -- <0025> "
    0120 : fc00 ; -- <0025> "
    0121 : 1800 ; -- <0025> ga = a

    0122 : 0006 ; -- <0027> a = $fletcher_sum1_reg
    0123 : 0407 ; -- <0028> b = $fletcher_sum2_reg
    0124 : c800 ; -- <0029> a = a+b
    0125 : 0300 ; -- <0029> "
    0126 : fba0 ; -- <0029> callx mod255  a+b  $fletcher_sum2_reg
    0127 : 010f ; -- <0029> "
    0128 : fc00 ; -- <0029> "
    0129 : 1c00 ; -- <0029> gb = a

    012a : f808 ; -- <0031> pop rtna -- func fletcher16_input8
    012b : fc00 ; -- <0031> swapra = nop

-- accumulate a Fletcher16 checksum, given the next word of data.
-- ######## func fletcher16_input16 -- = 0x012c
    012c : 2002 ; -- <0039> push i -- func fletcher16_input16
    012d : 203e ; -- <0039> push rtna -- "

    012e : 0b53 ; -- <0034> i = a>>4
    012f : 06ff ; -- <0035> b = 0xff
    0130 : c800 ; -- <0036> a = and
    0131 : 0330 ; -- <0036> "
    0132 : fba0 ; -- <0036> callx fletcher16_input8  and
    0133 : 011a ; -- <0036> "
    0134 : fc00 ; -- <0036> "
    0135 : 0002 ; -- <0037> a = i
    0136 : 0353 ; -- <0038> a = a>>4
    0137 : fba0 ; -- <0038> callx fletcher16_input8  a>>4
    0138 : 011a ; -- <0038> "
    0139 : fc00 ; -- <0038> "

    013a : f808 ; -- <0040> pop rtna -- func fletcher16_input16
    013b : 0808 ; -- <0040> pop i -- "
    013c : fc00 ; -- <0040> swapra = nop

-- return the combined 16-bit result of Fletcher16 checksum.
-- ######## func fletcher16_result -- = 0x013d

    013d : 0007 ; -- <0043> a = $fletcher_sum2_reg
    013e : 0352 ; -- <0044> a = a<<4
    013f : 0352 ; -- <0045> a = a<<4
    0140 : 0406 ; -- <0046> b = $fletcher_sum1_reg
    0141 : c800 ; -- <0047> result = or
    0142 : 0334 ; -- <0047> "
    0143 : fc00 ; -- <0046> swapra = nop

    0144 : fc00 ; -- <0049> swapra = nop




-- :boot_msg -- = 0x0145
-- "\r\nVISOR\x0"
    0145 : 0a0d ; -- <0091>   
    0146 : 4956 ; -- <0091> IV
    0147 : 4f53 ; -- <0091> OS
    0148 : 0052 ; -- <0091>  R
-- :running_msg -- = 0x0149
-- "\r\nRUN >\x0"
    0149 : 0a0d ; -- <0093>   
    014a : 5552 ; -- <0093> UR
    014b : 204e ; -- <0093>  N
    014c : 003e ; -- <0093>  >

-- --------------------------------------------
-- :main -- = 0x014d
-- put target into reset.
    014d : 3e02 ; -- <0098> bus_ctrl = $tg_reset_mask

-- init visor.
    014e : 3360 ; -- <0101> bp3_addr = $bp_disable
    014f : 2f60 ; -- <0102> bp2_addr = $bp_disable
    0150 : 2b60 ; -- <0103> bp1_addr = $bp_disable
    0151 : 2760 ; -- <0104> bp0_addr = $bp_disable

-- startup message
    0152 : 03a0 ; -- <0107> a = :boot_msg
    0153 : 0145 ; -- <0107> "
    0154 : fba0 ; -- <0108> call :print_nt
    0155 : 00eb ; -- <0108> "
    0156 : fc00 ; -- <0108> "

-- check for bootloader signal.
    0157 : 0019 ; -- <0111> a = boot_break
    0158 : e400 ; -- <0112> bn az :boot_run
    0159 : 0160 ; -- <0112> "
-- ^^^ for press-to-debug; runs target by default.
-- br az :boot_run
-- ^^^ for press-to-run; debugs target by default.

-- step into the first target instruction.
    015a : 3e08 ; -- <0118> bus_ctrl = $bp_step_mask
    015b : fba0 ; -- <0119> call :wait_for_bp
    015c : 02c9 ; -- <0119> "
    015d : fc00 ; -- <0119> "
    015e : e00f ; -- <0120> jmp :cmd_loop
    015f : 0161 ; -- <0120> "
-- :boot_run -- = 0x0160
-- release target reset, to run.
    0160 : 3e00 ; -- <0123> bus_ctrl = 0

-- command prompt loop.
-- :cmd_loop -- = 0x0161
    0161 : 000f ; -- <0127> a = bus_ctrl
    0162 : 0600 ; -- <0128> b = 0
    0163 : e007 ; -- <0129> br eq :running_prompt
    0164 : 0186 ; -- <0129> "

    0165 : fba0 ; -- <0131> call :dump_target
    0166 : 0371 ; -- <0131> "
    0167 : fc00 ; -- <0131> "
    0168 : 0016 ; -- <0132> a = tg_code_addr
    0169 : fba0 ; -- <0133> call :put4x
    016a : 005f ; -- <0133> "
    016b : fc00 ; -- <0133> "
    016c : 022c ; -- <0134> a = 44 -- putasc ","
    016d : fba0 ; -- <0134> putasc ","
    016e : 0004 ; -- <0134> "
    016f : fc00 ; -- <0134> "
    0170 : 0015 ; -- <0135> a = exr_shadow
    0171 : fba0 ; -- <0136> call :put4x
    0172 : 005f ; -- <0136> "
    0173 : fc00 ; -- <0136> "
    0174 : 0220 ; -- <0137> a = 32 -- putasc " "
    0175 : fba0 ; -- <0137> putasc " "
    0176 : 0004 ; -- <0137> "
    0177 : fc00 ; -- <0137> "
    0178 : 023e ; -- <0138> a = 62 -- putasc ">"
    0179 : fba0 ; -- <0138> putasc ">"
    017a : 0004 ; -- <0138> "
    017b : fc00 ; -- <0138> "
    017c : fba0 ; -- <0139> getchar_echo
    017d : 0013 ; -- <0139> "
    017e : fc00 ; -- <0139> "
    017f : 2000 ; -- <0139> push a -- "
    0180 : fba0 ; -- <0139> "
    0181 : 0004 ; -- <0139> "
    0182 : fc00 ; -- <0139> "
    0183 : 0008 ; -- <0139> pop a -- "
    0184 : e00f ; -- <0140> jmp :parse_cmd
    0185 : 0197 ; -- <0140> "

-- :running_prompt -- = 0x0186
    0186 : 03a0 ; -- <0143> a = :running_msg
    0187 : 0149 ; -- <0143> "
    0188 : fba0 ; -- <0144> call :print_nt
    0189 : 00eb ; -- <0144> "
    018a : fc00 ; -- <0144> "
-- :run_poll -- = 0x018b
    018b : fba0 ; -- <0146> pollchar
    018c : 001c ; -- <0146> "
    018d : fc00 ; -- <0146> "
    018e : 0760 ; -- <0147> b = -1
    018f : e407 ; -- <0148> bn eq :parse_cmd
    0190 : 0197 ; -- <0148> "
    0191 : 0018 ; -- <0149> a = bp_status
    0192 : e000 ; -- <0150> br az :run_poll
    0193 : 018b ; -- <0150> "
-- target hit a breakpoint; switch to stepping mode.
    0194 : 3e08 ; -- <0152> bus_ctrl = $bp_step_mask
    0195 : e00f ; -- <0153> jmp :cmd_loop
    0196 : 0161 ; -- <0153> "

-- :parse_cmd -- = 0x0197

-- command = step next instruction.
    0197 : 066e ; -- <0158> b = 110 -- asc b = "n"
    0198 : e407 ; -- <0159> bn eq :skip_step
    0199 : 01a1 ; -- <0159> "
    019a : 3e08 ; -- <0160> bus_ctrl = $bp_step_mask
    019b : 2409 ; -- <0161> bp0_addr = bp0_addr
    019c : fba0 ; -- <0162> call :wait_for_bp
    019d : 02c9 ; -- <0162> "
    019e : fc00 ; -- <0162> "
    019f : e00f ; -- <0163> jmp :cmd_loop
    01a0 : 0161 ; -- <0163> "
-- :skip_step -- = 0x01a1

-- command = reset target.
    01a1 : 0652 ; -- <0167> b = 82 -- asc b = "R"
    01a2 : e407 ; -- <0168> bn eq :skip_reset
    01a3 : 01ad ; -- <0168> "
    01a4 : 3e02 ; -- <0169> bus_ctrl = $tg_reset_mask
    01a5 : c800 ; -- <0170> nop
    01a6 : c800 ; -- <0171> nop
    01a7 : 3e08 ; -- <0172> bus_ctrl = $bp_step_mask
    01a8 : fba0 ; -- <0173> call :wait_for_bp
    01a9 : 02c9 ; -- <0173> "
    01aa : fc00 ; -- <0173> "
    01ab : e00f ; -- <0174> jmp :cmd_loop
    01ac : 0161 ; -- <0174> "
-- :skip_reset -- = 0x01ad

-- command = load program.
    01ad : 066c ; -- <0178> b = 108 -- asc b = "l"
    01ae : e407 ; -- <0179> bn eq :skip_load
    01af : 01b5 ; -- <0179> "
    01b0 : fba0 ; -- <0180> call :load_program
    01b1 : 03d9 ; -- <0180> "
    01b2 : fc00 ; -- <0180> "
    01b3 : e00f ; -- <0181> jmp :cmd_loop
    01b4 : 0161 ; -- <0181> "
-- :skip_load -- = 0x01b5

-- command = run full speed.
    01b5 : 0672 ; -- <0185> b = 114 -- asc b = "r"
    01b6 : e407 ; -- <0186> bn eq :skip_run
    01b7 : 01bc ; -- <0186> "
-- release target reset, to run.
    01b8 : 3e00 ; -- <0188> bus_ctrl = 0
    01b9 : 2409 ; -- <0189> bp0_addr = bp0_addr
    01ba : e00f ; -- <0190> jmp :cmd_loop
    01bb : 0161 ; -- <0190> "
-- :skip_run -- = 0x01bc

-- command = set breakpoint.
    01bc : 0662 ; -- <0194> b = 98 -- asc b = "b"
    01bd : e407 ; -- <0195> bn eq :skip_setbrk
    01be : 01c4 ; -- <0195> "
    01bf : fba0 ; -- <0196> call :set_bp
    01c0 : 02cd ; -- <0196> "
    01c1 : fc00 ; -- <0196> "
    01c2 : e00f ; -- <0197> jmp :cmd_loop
    01c3 : 0161 ; -- <0197> "
-- :skip_setbrk -- = 0x01c4

-- command = poke register.
    01c4 : 066f ; -- <0201> b = 111 -- asc b = "o"
    01c5 : e407 ; -- <0202> bn eq :skip_poke
    01c6 : 01cc ; -- <0202> "
    01c7 : fba0 ; -- <0203> call :poke_cmd
    01c8 : 031b ; -- <0203> "
    01c9 : fc00 ; -- <0203> "
    01ca : e00f ; -- <0204> jmp :cmd_loop
    01cb : 0161 ; -- <0204> "
-- :skip_poke -- = 0x01cc

-- command = dump Avalon data e.g. from SDRAM.
    01cc : 0675 ; -- <0208> b = 117 -- asc b = "u"
    01cd : e407 ; -- <0209> bn eq :skip_dump
    01ce : 01d4 ; -- <0209> "
    01cf : fba0 ; -- <0210> call :dump_avalon
    01d0 : 01df ; -- <0210> "
    01d1 : fc00 ; -- <0210> "
    01d2 : e00f ; -- <0211> jmp :cmd_loop
    01d3 : 0161 ; -- <0211> "
-- :skip_dump -- = 0x01d4

    01d4 : 023f ; -- <0214> a = 63 -- putasc "?"
    01d5 : fba0 ; -- <0214> putasc "?"
    01d6 : 0004 ; -- <0214> "
    01d7 : fc00 ; -- <0214> "
    01d8 : 03a0 ; -- <0215> a = :eol_msg -- puteol
    01d9 : 0002 ; -- <0215> "
    01da : fba0 ; -- <0215> puteol
    01db : 00eb ; -- <0215> "
    01dc : fc00 ; -- <0215> "
    01dd : e00f ; -- <0216> jmp :cmd_loop
    01de : 0161 ; -- <0216> "


-- ######## func dump_avalon -- = 0x01df
    01df : 2002 ; -- <0245> push i -- func dump_avalon
    01e0 : 2003 ; -- <0245> push j -- "
    01e1 : 2004 ; -- <0245> push x -- "
    01e2 : 2005 ; -- <0245> push y -- "
    01e3 : 2006 ; -- <0245> push ga -- "
    01e4 : 2007 ; -- <0245> push gb -- "
    01e5 : 203e ; -- <0245> push rtna -- "
-- test case: u0010 0011 0013 0012 0000 0000 0080.

-- this func may borrow some peripheral registers to hold temporary data.
-- but it can only borrow registers that don't have side effects that are relevant to this function.

-- parse av_write_data reg address into av_data_regs high byte.
    01e6 : fba0 ; -- <0254> call :get4x
    01e7 : 0098 ; -- <0254> "
    01e8 : fc00 ; -- <0254> "
    01e9 : 0801 ; -- <0255> i = b
    01ea : e401 ; -- <0256> bn iz :fail
    01eb : 02a2 ; -- <0256> "
    01ec : 0352 ; -- <0257> a = a<<4
    01ed : 1b52 ; -- <0258> $av_data_regs = a<<4
    01ee : fba0 ; -- <0259> getchar_echo
    01ef : 0013 ; -- <0259> "
    01f0 : fc00 ; -- <0259> "
    01f1 : 2000 ; -- <0259> push a -- "
    01f2 : fba0 ; -- <0259> "
    01f3 : 0004 ; -- <0259> "
    01f4 : fc00 ; -- <0259> "
    01f5 : 0008 ; -- <0259> pop a -- "

-- parse av_read_data reg address into av_data_regs low byte.
    01f6 : fba0 ; -- <0262> call :get4x
    01f7 : 0098 ; -- <0262> "
    01f8 : fc00 ; -- <0262> "
    01f9 : 0801 ; -- <0263> i = b
    01fa : e401 ; -- <0264> bn iz :fail
    01fb : 02a2 ; -- <0264> "
    01fc : 0406 ; -- <0265> b = $av_data_regs
    01fd : c800 ; -- <0266> $av_data_regs = or
    01fe : 1b34 ; -- <0266> "
    01ff : fba0 ; -- <0267> getchar_echo
    0200 : 0013 ; -- <0267> "
    0201 : fc00 ; -- <0267> "
    0202 : 2000 ; -- <0267> push a -- "
    0203 : fba0 ; -- <0267> "
    0204 : 0004 ; -- <0267> "
    0205 : fc00 ; -- <0267> "
    0206 : 0008 ; -- <0267> pop a -- "

-- parse av_ad_lo reg address into av_ad_lo_reg.
    0207 : fba0 ; -- <0270> call :get4x
    0208 : 0098 ; -- <0270> "
    0209 : fc00 ; -- <0270> "
    020a : 0801 ; -- <0271> i = b
    020b : e401 ; -- <0272> bn iz :fail
    020c : 02a2 ; -- <0272> "
    020d : 1c00 ; -- <0273> $av_ad_lo_reg = a
    020e : fba0 ; -- <0274> getchar_echo
    020f : 0013 ; -- <0274> "
    0210 : fc00 ; -- <0274> "
    0211 : 2000 ; -- <0274> push a -- "
    0212 : fba0 ; -- <0274> "
    0213 : 0004 ; -- <0274> "
    0214 : fc00 ; -- <0274> "
    0215 : 0008 ; -- <0274> pop a -- "

-- parse av_ad_hi reg address into x.
    0216 : fba0 ; -- <0277> call :get4x
    0217 : 0098 ; -- <0277> "
    0218 : fc00 ; -- <0277> "
    0219 : 0801 ; -- <0278> i = b
    021a : e401 ; -- <0279> bn iz :fail
    021b : 02a2 ; -- <0279> "
    021c : 1000 ; -- <0280> x = a
    021d : fba0 ; -- <0281> getchar_echo
    021e : 0013 ; -- <0281> "
    021f : fc00 ; -- <0281> "
    0220 : 2000 ; -- <0281> push a -- "
    0221 : fba0 ; -- <0281> "
    0222 : 0004 ; -- <0281> "
    0223 : fc00 ; -- <0281> "
    0224 : 0008 ; -- <0281> pop a -- "

-- parse start byte address high word into target's avalon master.
    0225 : fba0 ; -- <0284> call :get4x
    0226 : 0098 ; -- <0284> "
    0227 : fc00 ; -- <0284> "
    0228 : 0801 ; -- <0285> i = b
    0229 : e401 ; -- <0286> bn iz :fail
    022a : 02a2 ; -- <0286> "
    022b : 3800 ; -- <0287> poke_data = a
    022c : 0004 ; -- <0288> a = x
    022d : fba0 ; -- <0289> call :poke
    022e : 0352 ; -- <0289> "
    022f : fc00 ; -- <0289> "
    0230 : fba0 ; -- <0290> getchar_echo
    0231 : 0013 ; -- <0290> "
    0232 : fc00 ; -- <0290> "
    0233 : 2000 ; -- <0290> push a -- "
    0234 : fba0 ; -- <0290> "
    0235 : 0004 ; -- <0290> "
    0236 : fc00 ; -- <0290> "
    0237 : 0008 ; -- <0290> pop a -- "

-- parse start byte address low word into target's avalon master.
    0238 : fba0 ; -- <0293> call :get4x
    0239 : 0098 ; -- <0293> "
    023a : fc00 ; -- <0293> "
    023b : 0801 ; -- <0294> i = b
    023c : e401 ; -- <0295> bn iz :fail
    023d : 02a2 ; -- <0295> "
    023e : 3800 ; -- <0296> poke_data = a
    023f : 0007 ; -- <0297> a = $av_ad_lo_reg
    0240 : fba0 ; -- <0298> call :poke
    0241 : 0352 ; -- <0298> "
    0242 : fc00 ; -- <0298> "
    0243 : fba0 ; -- <0299> getchar_echo
    0244 : 0013 ; -- <0299> "
    0245 : fc00 ; -- <0299> "
    0246 : 2000 ; -- <0299> push a -- "
    0247 : fba0 ; -- <0299> "
    0248 : 0004 ; -- <0299> "
    0249 : fc00 ; -- <0299> "
    024a : 0008 ; -- <0299> pop a -- "

-- parse length (in bytes) into i.
    024b : fba0 ; -- <0302> call :get4x
    024c : 0098 ; -- <0302> "
    024d : fc00 ; -- <0302> "
    024e : 1001 ; -- <0303> x = b
    024f : e402 ; -- <0304> bn xz :fail
    0250 : 02a2 ; -- <0304> "
    0251 : 0b50 ; -- <0305> i = a>>1
    0252 : e001 ; -- <0306> br iz :fail
    0253 : 02a2 ; -- <0306> "

    0254 : fba0 ; -- <0308> getchar_echo
    0255 : 0013 ; -- <0308> "
    0256 : fc00 ; -- <0308> "
    0257 : 2000 ; -- <0308> push a -- "
    0258 : fba0 ; -- <0308> "
    0259 : 0004 ; -- <0308> "
    025a : fc00 ; -- <0308> "
    025b : 0008 ; -- <0308> pop a -- "
    025c : 062e ; -- <0309> b = 46 -- asc b = "."
    025d : e407 ; -- <0310> bn eq :fail
    025e : 02a2 ; -- <0310> "

-- :next_row -- = 0x025f
-- print row header.
    025f : 03a0 ; -- <0314> a = :eol_msg -- puteol
    0260 : 0002 ; -- <0314> "
    0261 : fba0 ; -- <0314> puteol
    0262 : 00eb ; -- <0314> "
    0263 : fc00 ; -- <0314> "
    0264 : 0007 ; -- <0315> a = $av_ad_lo_reg
    0265 : fba0 ; -- <0316> call :peek
    0266 : 0363 ; -- <0316> "
    0267 : fc00 ; -- <0316> "
    0268 : 0017 ; -- <0317> a = peek_data
    0269 : fba0 ; -- <0318> call :put4x
    026a : 005f ; -- <0318> "
    026b : fc00 ; -- <0318> "
    026c : 023a ; -- <0319> a = 58 -- putasc ":"
    026d : fba0 ; -- <0319> putasc ":"
    026e : 0004 ; -- <0319> "
    026f : fc00 ; -- <0319> "

-- print 8 data words.
    0270 : 1208 ; -- <0322> x = 8
-- :next_word -- = 0x0271
-- print data word from target's avalon master.
    0271 : 0220 ; -- <0325> a = 32 -- putasc " "
    0272 : fba0 ; -- <0325> putasc " "
    0273 : 0004 ; -- <0325> "
    0274 : fc00 ; -- <0325> "
    0275 : 0006 ; -- <0326> a = $av_data_regs
    0276 : fba0 ; -- <0327> call :peek_avalon
    0277 : 02b3 ; -- <0327> "
    0278 : fc00 ; -- <0327> "
    0279 : 0017 ; -- <0328> a = peek_data
    027a : fba0 ; -- <0329> call :put4x
    027b : 005f ; -- <0329> "
    027c : fc00 ; -- <0329> "

-- increment target's av_ad_lo.
    027d : 0007 ; -- <0332> a = $av_ad_lo_reg
    027e : fba0 ; -- <0333> call :peek
    027f : 0363 ; -- <0333> "
    0280 : fc00 ; -- <0333> "
    0281 : 0017 ; -- <0334> a = peek_data
    0282 : 0602 ; -- <0335> b = 2
    0283 : c800 ; -- <0336> poke_data = a+b
    0284 : 3b00 ; -- <0336> "
    0285 : 0007 ; -- <0337> a = $av_ad_lo_reg
    0286 : fba0 ; -- <0338> call :poke
    0287 : 0352 ; -- <0338> "
    0288 : fc00 ; -- <0338> "

-- check if all words have been dumped.
    0289 : 0f60 ; -- <0341> j = -1
    028a : c800 ; -- <0342> i = i+j
    028b : 0b10 ; -- <0342> "
    028c : e001 ; -- <0343> br iz :done
    028d : 0295 ; -- <0343> "

-- check for end of row.
    028e : 1760 ; -- <0346> y = -1
    028f : c800 ; -- <0347> x = x+y
    0290 : 1320 ; -- <0347> "
    0291 : e402 ; -- <0348> bn xz :next_word
    0292 : 0271 ; -- <0348> "
    0293 : e00f ; -- <0349> jmp :next_row
    0294 : 025f ; -- <0349> "

-- :done -- = 0x0295
    0295 : 03a0 ; -- <0352> a = :eol_msg -- puteol
    0296 : 0002 ; -- <0352> "
    0297 : fba0 ; -- <0352> puteol
    0298 : 00eb ; -- <0352> "
    0299 : fc00 ; -- <0352> "
    029a : f808 ; -- <0353> pop rtna -- rtn
    029b : 1c08 ; -- <0353> pop gb -- "
    029c : 1808 ; -- <0353> pop ga -- "
    029d : 1408 ; -- <0353> pop y -- "
    029e : 1008 ; -- <0353> pop x -- "
    029f : 0c08 ; -- <0353> pop j -- "
    02a0 : 0808 ; -- <0353> pop i -- "
    02a1 : fc00 ; -- <0352> swapra = nop

-- :fail -- = 0x02a2
    02a2 : 023f ; -- <0356> a = 63 -- putasc "?"
    02a3 : fba0 ; -- <0356> putasc "?"
    02a4 : 0004 ; -- <0356> "
    02a5 : fc00 ; -- <0356> "
    02a6 : 03a0 ; -- <0357> a = :eol_msg -- puteol
    02a7 : 0002 ; -- <0357> "
    02a8 : fba0 ; -- <0357> puteol
    02a9 : 00eb ; -- <0357> "
    02aa : fc00 ; -- <0357> "
    02ab : f808 ; -- <0358> pop rtna -- end_func
    02ac : 1c08 ; -- <0358> pop gb -- "
    02ad : 1808 ; -- <0358> pop ga -- "
    02ae : 1408 ; -- <0358> pop y -- "
    02af : 1008 ; -- <0358> pop x -- "
    02b0 : 0c08 ; -- <0358> pop j -- "
    02b1 : 0808 ; -- <0358> pop i -- "
    02b2 : fc00 ; -- <0357> swapra = nop

-- trigger a read in the target's avalon master.  return the data in peek_data.
-- the 32-bit avalon address must already be poked into the target's avalon master.
-- pass av_data_regs in a.  av_write_data reg address in its high byte; av_read_data reg address in its low byte.
-- ######## func peek_avalon -- = 0x02b3
    02b3 : 203e ; -- <0363> push rtna -- func peek_avalon
-- peek the target's av_write_data register to trigger an avalon read as a side effect.
    02b4 : 2000 ; -- <0365> push a -- push a
    02b5 : 0353 ; -- <0366> a = a>>4
    02b6 : 0353 ; -- <0367> a = a>>4
    02b7 : fba0 ; -- <0368> call :peek
    02b8 : 0363 ; -- <0368> "
    02b9 : fc00 ; -- <0368> "

-- wait for target's avalon master to receive data e.g. from SDRAM controller.
    02ba : 020f ; -- <0371> a = 15
    02bb : 0760 ; -- <0372> b = -1
-- :wait -- = 0x02bc
    02bc : c800 ; -- <0374> a = a+b
    02bd : 0300 ; -- <0374> "
    02be : e400 ; -- <0375> bn az :wait
    02bf : 02bc ; -- <0375> "

-- peek data word from target's avalon master.
    02c0 : 0008 ; -- <0378> pop a -- pop a
    02c1 : 06ff ; -- <0379> b = 0xff
    02c2 : c800 ; -- <0380> a = and
    02c3 : 0330 ; -- <0380> "
    02c4 : fba0 ; -- <0381> call :peek
    02c5 : 0363 ; -- <0381> "
    02c6 : fc00 ; -- <0381> "
    02c7 : f808 ; -- <0382> pop rtna -- end_func
    02c8 : fc00 ; -- <0381> swapra = nop

-- ######## func wait_for_bp -- = 0x02c9
-- :poll -- = 0x02c9
    02c9 : 0018 ; -- <0386> a = bp_status
    02ca : e000 ; -- <0387> br az :poll
    02cb : 02c9 ; -- <0387> "
    02cc : fc00 ; -- <0387> swapra = nop

-- ######## func set_bp -- = 0x02cd
    02cd : 2004 ; -- <0390> push x -- func set_bp
    02ce : 2005 ; -- <0390> push y -- "
    02cf : 203e ; -- <0390> push rtna -- "
    02d0 : fba0 ; -- <0391> getchar_echo
    02d1 : 0013 ; -- <0391> "
    02d2 : fc00 ; -- <0391> "
    02d3 : 2000 ; -- <0391> push a -- "
    02d4 : fba0 ; -- <0391> "
    02d5 : 0004 ; -- <0391> "
    02d6 : fc00 ; -- <0391> "
    02d7 : 0008 ; -- <0391> pop a -- "
    02d8 : 1000 ; -- <0392> x = a
    02d9 : fba0 ; -- <0393> getchar_echo
    02da : 0013 ; -- <0393> "
    02db : fc00 ; -- <0393> "
    02dc : 2000 ; -- <0393> push a -- "
    02dd : fba0 ; -- <0393> "
    02de : 0004 ; -- <0393> "
    02df : fc00 ; -- <0393> "
    02e0 : 0008 ; -- <0393> pop a -- "
    02e1 : 063d ; -- <0394> b = 61 -- asc b = "="
    02e2 : e407 ; -- <0395> bn eq :fail
    02e3 : 030e ; -- <0395> "
    02e4 : fba0 ; -- <0396> call :get4x
    02e5 : 0098 ; -- <0396> "
    02e6 : fc00 ; -- <0396> "
    02e7 : 1400 ; -- <0397> y = a
    02e8 : 0200 ; -- <0398> a = 0
    02e9 : e407 ; -- <0399> bn eq :fail
    02ea : 030e ; -- <0399> "
    02eb : 0004 ; -- <0400> a = x
    02ec : 0630 ; -- <0401> b = 48 -- asc b = "0"
    02ed : e007 ; -- <0402> br eq :b0
    02ee : 02fa ; -- <0402> "
    02ef : 0631 ; -- <0403> b = 49 -- asc b = "1"
    02f0 : e007 ; -- <0404> br eq :b1
    02f1 : 02ff ; -- <0404> "
    02f2 : 0632 ; -- <0405> b = 50 -- asc b = "2"
    02f3 : e007 ; -- <0406> br eq :b2
    02f4 : 0304 ; -- <0406> "
    02f5 : 0633 ; -- <0407> b = 51 -- asc b = "3"
    02f6 : e007 ; -- <0408> br eq :b3
    02f7 : 0309 ; -- <0408> "
    02f8 : e00f ; -- <0409> jmp :fail
    02f9 : 030e ; -- <0409> "
-- :b0 -- = 0x02fa
    02fa : 2405 ; -- <0411> bp0_addr = y
    02fb : f808 ; -- <0412> pop rtna -- rtn
    02fc : 1408 ; -- <0412> pop y -- "
    02fd : 1008 ; -- <0412> pop x -- "
    02fe : fc00 ; -- <0411> swapra = nop
-- :b1 -- = 0x02ff
    02ff : 2805 ; -- <0414> bp1_addr = y
    0300 : f808 ; -- <0415> pop rtna -- rtn
    0301 : 1408 ; -- <0415> pop y -- "
    0302 : 1008 ; -- <0415> pop x -- "
    0303 : fc00 ; -- <0414> swapra = nop
-- :b2 -- = 0x0304
    0304 : 2c05 ; -- <0417> bp2_addr = y
    0305 : f808 ; -- <0418> pop rtna -- rtn
    0306 : 1408 ; -- <0418> pop y -- "
    0307 : 1008 ; -- <0418> pop x -- "
    0308 : fc00 ; -- <0417> swapra = nop
-- :b3 -- = 0x0309
    0309 : 3005 ; -- <0420> bp3_addr = y
    030a : f808 ; -- <0421> pop rtna -- rtn
    030b : 1408 ; -- <0421> pop y -- "
    030c : 1008 ; -- <0421> pop x -- "
    030d : fc00 ; -- <0420> swapra = nop

-- :fail -- = 0x030e
    030e : 023f ; -- <0424> a = 63 -- putasc "?"
    030f : fba0 ; -- <0424> putasc "?"
    0310 : 0004 ; -- <0424> "
    0311 : fc00 ; -- <0424> "
    0312 : 03a0 ; -- <0425> a = :eol_msg -- puteol
    0313 : 0002 ; -- <0425> "
    0314 : fba0 ; -- <0425> puteol
    0315 : 00eb ; -- <0425> "
    0316 : fc00 ; -- <0425> "
    0317 : f808 ; -- <0426> pop rtna -- end_func
    0318 : 1408 ; -- <0426> pop y -- "
    0319 : 1008 ; -- <0426> pop x -- "
    031a : fc00 ; -- <0425> swapra = nop

-- ######## func poke_cmd -- = 0x031b
    031b : 2004 ; -- <0428> push x -- func poke_cmd
    031c : 203e ; -- <0428> push rtna -- "
-- x = destination register address to poke.
    031d : fba0 ; -- <0430> call :get4x
    031e : 0098 ; -- <0430> "
    031f : fc00 ; -- <0430> "
    0320 : 1000 ; -- <0431> x = a
    0321 : 0200 ; -- <0432> a = 0
    0322 : e407 ; -- <0433> bn eq :fail
    0323 : 033d ; -- <0433> "

    0324 : fba0 ; -- <0435> getchar_echo
    0325 : 0013 ; -- <0435> "
    0326 : fc00 ; -- <0435> "
    0327 : 2000 ; -- <0435> push a -- "
    0328 : fba0 ; -- <0435> "
    0329 : 0004 ; -- <0435> "
    032a : fc00 ; -- <0435> "
    032b : 0008 ; -- <0435> pop a -- "
    032c : 063d ; -- <0436> b = 61 -- asc b = "="
    032d : e407 ; -- <0437> bn eq :fail
    032e : 033d ; -- <0437> "

-- parse value to poke.
    032f : fba0 ; -- <0440> call :get4x
    0330 : 0098 ; -- <0440> "
    0331 : fc00 ; -- <0440> "
    0332 : 3800 ; -- <0441> poke_data = a
    0333 : 0200 ; -- <0442> a = 0
    0334 : e407 ; -- <0443> bn eq :fail
    0335 : 033d ; -- <0443> "

    0336 : 0004 ; -- <0445> a = x
    0337 : fba0 ; -- <0446> call :poke
    0338 : 0352 ; -- <0446> "
    0339 : fc00 ; -- <0446> "
    033a : f808 ; -- <0447> pop rtna -- rtn
    033b : 1008 ; -- <0447> pop x -- "
    033c : fc00 ; -- <0446> swapra = nop

-- :fail -- = 0x033d
    033d : 023f ; -- <0450> a = 63 -- putasc "?"
    033e : fba0 ; -- <0450> putasc "?"
    033f : 0004 ; -- <0450> "
    0340 : fc00 ; -- <0450> "
    0341 : 03a0 ; -- <0451> a = :eol_msg -- puteol
    0342 : 0002 ; -- <0451> "
    0343 : fba0 ; -- <0451> puteol
    0344 : 00eb ; -- <0451> "
    0345 : fc00 ; -- <0451> "
    0346 : f808 ; -- <0452> pop rtna -- end_func
    0347 : 1008 ; -- <0452> pop x -- "
    0348 : fc00 ; -- <0451> swapra = nop

-- force execution of the opcode passed in force_opcode.
-- ######## func force_instruction -- = 0x0349
    0349 : 3e04 ; -- <0456> bus_ctrl = $divert_code_bus_mask
    034a : 4201 ; -- <0457> tg_force = $hold_state_mask
    034b : 4203 ; -- <0458> tg_force = ($hold_state_mask | $force_load_exr_mask)
    034c : 4205 ; -- <0459> tg_force = ($hold_state_mask | $force_exec_mask)
    034d : 4201 ; -- <0460> tg_force = $hold_state_mask
-- refill target exr so it can resume seamlessly.
    034e : 3415 ; -- <0462> force_opcode = exr_shadow
    034f : 4203 ; -- <0463> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0350 : 4200 ; -- <0464> tg_force = 0
    0351 : fc00 ; -- <0464> swapra = nop

-- write to a register in the target MCU.  pass the value in poke_data.
-- pass its register address in a.
-- ######## func poke -- = 0x0352
    0352 : 203e ; -- <0469> push rtna -- func poke
    0353 : 063f ; -- <0470> b = $dest_mask
    0354 : c800 ; -- <0471> a = and
    0355 : 0330 ; -- <0471> "
    0356 : 0352 ; -- <0472> a = a<<4
    0357 : 0352 ; -- <0473> a = a<<4
    0358 : 0351 ; -- <0474> a = a<<1
    0359 : 0351 ; -- <0475> a = a<<1
    035a : 07a0 ; -- <0476> b = ([src dbgpoke])
    035b : 03c0 ; -- <0476> "
    035c : c800 ; -- <0477> force_opcode = or
    035d : 3734 ; -- <0477> "
    035e : fba0 ; -- <0478> call :force_instruction
    035f : 0349 ; -- <0478> "
    0360 : fc00 ; -- <0478> "
    0361 : f808 ; -- <0479> pop rtna -- end_func
    0362 : fc00 ; -- <0478> swapra = nop

-- observe a register in the target MCU.  return its value in peek_data.
-- pass its register address in a.
-- ######## func peek -- = 0x0363
    0363 : 203e ; -- <0483> push rtna -- func peek
    0364 : 07a0 ; -- <0484> b = $src_mask
    0365 : 03ff ; -- <0484> "
    0366 : c800 ; -- <0485> a = and
    0367 : 0330 ; -- <0485> "
    0368 : 07a0 ; -- <0486> b = ([dest nop] << $dest_lsb)
    0369 : c800 ; -- <0486> "
    036a : c800 ; -- <0487> force_opcode = or
    036b : 3734 ; -- <0487> "
    036c : fba0 ; -- <0488> call :force_instruction
    036d : 0349 ; -- <0488> "
    036e : fc00 ; -- <0488> "
-- target's register value is now in peek_data.
    036f : f808 ; -- <0490> pop rtna -- end_func
    0370 : fc00 ; -- <0489> swapra = nop

-- show target status display.
-- ######## func dump_target -- = 0x0371
    0371 : 2002 ; -- <0493> push i -- func dump_target
    0372 : 2003 ; -- <0493> push j -- "
    0373 : 203e ; -- <0493> push rtna -- "
    0374 : 03a0 ; -- <0494> a = :eol_msg -- puteol
    0375 : 0002 ; -- <0494> "
    0376 : fba0 ; -- <0494> puteol
    0377 : 00eb ; -- <0494> "
    0378 : fc00 ; -- <0494> "
    0379 : 0a00 ; -- <0495> i = 0
    037a : 0e01 ; -- <0496> j = 1
-- :next_reg -- = 0x037b
-- fetch register name from table in target program.
-- i = register number.
-- peek is skipped for any reg name starting with 2 slashes (good for read-sensitive regs).
    037b : 0002 ; -- <0501> a = i
    037c : 0351 ; -- <0502> a = a<<1
    037d : 0351 ; -- <0503> a = a<<1
    037e : 0603 ; -- <0504> b = 3
    037f : c800 ; -- <0505> a = a+b
    0380 : 0300 ; -- <0505> "
    0381 : 0404 ; -- <0506> b = x
    0382 : c800 ; -- <0507> m9k_addr = a+b
    0383 : 4f00 ; -- <0507> "
    0384 : 0014 ; -- <0508> a = m9k_data
    0385 : 07a0 ; -- <0509> b = 0x2f2f
    0386 : 2f2f ; -- <0509> "
    0387 : e007 ; -- <0510> br eq :no_peek
    0388 : 03a7 ; -- <0510> "
    0389 : 0220 ; -- <0511> a = 32 -- putasc " "
    038a : fba0 ; -- <0511> putasc " "
    038b : 0004 ; -- <0511> "
    038c : fc00 ; -- <0511> "
    038d : 0220 ; -- <0512> a = 32 -- putasc " "
    038e : fba0 ; -- <0512> putasc " "
    038f : 0004 ; -- <0512> "
    0390 : fc00 ; -- <0512> "
    0391 : 0013 ; -- <0513> a = m9k_addr
    0392 : 0608 ; -- <0514> b = 8
    0393 : fba0 ; -- <0515> call :print_fixed_target
    0394 : 03b2 ; -- <0515> "
    0395 : fc00 ; -- <0515> "
    0396 : 023d ; -- <0516> a = 61 -- putasc "="
    0397 : fba0 ; -- <0516> putasc "="
    0398 : 0004 ; -- <0516> "
    0399 : fc00 ; -- <0516> "
    039a : 0002 ; -- <0517> a = i
    039b : fba0 ; -- <0518> call :peek
    039c : 0363 ; -- <0518> "
    039d : fc00 ; -- <0518> "
    039e : 0017 ; -- <0519> a = peek_data
    039f : fba0 ; -- <0520> call :put4x
    03a0 : 005f ; -- <0520> "
    03a1 : fc00 ; -- <0520> "
    03a2 : 03a0 ; -- <0521> a = :eol_msg -- puteol
    03a3 : 0002 ; -- <0521> "
    03a4 : fba0 ; -- <0521> puteol
    03a5 : 00eb ; -- <0521> "
    03a6 : fc00 ; -- <0521> "
-- :no_peek -- = 0x03a7
    03a7 : c800 ; -- <0523> i = i+j
    03a8 : 0b10 ; -- <0523> "
-- loop up to the number of registers in the target program's register name table.
    03a9 : 4e02 ; -- <0525> m9k_addr = 2
    03aa : 0414 ; -- <0526> b = m9k_data
    03ab : 0002 ; -- <0527> a = i
    03ac : e407 ; -- <0528> bn eq :next_reg
    03ad : 037b ; -- <0528> "
    03ae : f808 ; -- <0529> pop rtna -- end_func
    03af : 0c08 ; -- <0529> pop j -- "
    03b0 : 0808 ; -- <0529> pop i -- "
    03b1 : fc00 ; -- <0528> swapra = nop

-- print a fixed-length string from packed words in TARGET program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed_target -- = 0x03b2
    03b2 : 2002 ; -- <0535> push i -- func print_fixed_target
    03b3 : 2003 ; -- <0535> push j -- "
    03b4 : 2004 ; -- <0535> push x -- "
    03b5 : 2005 ; -- <0535> push y -- "
    03b6 : 2006 ; -- <0535> push ga -- "
    03b7 : 203e ; -- <0535> push rtna -- "
    03b8 : 0800 ; -- <0536> i = a
    03b9 : 0e01 ; -- <0537> j = 1
    03ba : 1001 ; -- <0538> x = b
    03bb : 1760 ; -- <0539> y = -1
-- :next_word -- = 0x03bc
    03bc : e002 ; -- <0541> br xz :done
    03bd : 03d2 ; -- <0541> "
    03be : 1320 ; -- <0542> x = ad2
    03bf : 4c02 ; -- <0543> m9k_addr = i
    03c0 : 1814 ; -- <0544> ga = m9k_data
-- now x = bytes remaining, i = current word address, g6 = data word.
    03c1 : 0006 ; -- <0546> a = ga -- putchar ga
    03c2 : fba0 ; -- <0546> putchar ga
    03c3 : 0004 ; -- <0546> "
    03c4 : fc00 ; -- <0546> "
    03c5 : e002 ; -- <0547> br xz :done
    03c6 : 03d2 ; -- <0547> "
    03c7 : 1320 ; -- <0548> x = ad2
    03c8 : 0006 ; -- <0549> a = ga
    03c9 : 0353 ; -- <0550> a = a>>4
    03ca : 0353 ; -- <0551> a = a>>4
    03cb : fba0 ; -- <0552> putchar a
    03cc : 0004 ; -- <0552> "
    03cd : fc00 ; -- <0552> "
    03ce : c800 ; -- <0553> i = i+j
    03cf : 0b10 ; -- <0553> "
    03d0 : e00f ; -- <0554> jmp :next_word
    03d1 : 03bc ; -- <0554> "
-- :done -- = 0x03d2
    03d2 : f808 ; -- <0556> pop rtna -- end_func
    03d3 : 1808 ; -- <0556> pop ga -- "
    03d4 : 1408 ; -- <0556> pop y -- "
    03d5 : 1008 ; -- <0556> pop x -- "
    03d6 : 0c08 ; -- <0556> pop j -- "
    03d7 : 0808 ; -- <0556> pop i -- "
    03d8 : fc00 ; -- <0555> swapra = nop

-- ######## func load_program -- = 0x03d9
    03d9 : 2002 ; -- <0558> push i -- func load_program
    03da : 2003 ; -- <0558> push j -- "
    03db : 2004 ; -- <0558> push x -- "
    03dc : 203e ; -- <0558> push rtna -- "
-- load target program from UART.

-- length, little-endian.  memorize in x.
    03dd : 03a0 ; -- <0562> a = :eol_msg -- puteol
    03de : 0002 ; -- <0562> "
    03df : fba0 ; -- <0562> puteol
    03e0 : 00eb ; -- <0562> "
    03e1 : fc00 ; -- <0562> "
    03e2 : 024c ; -- <0563> a = 76 -- putasc L
    03e3 : fba0 ; -- <0563> putasc L
    03e4 : 0004 ; -- <0563> "
    03e5 : fc00 ; -- <0563> "
    03e6 : fba0 ; -- <0564> get16 x
    03e7 : 0013 ; -- <0564> "
    03e8 : fc00 ; -- <0564> "
    03e9 : 2000 ; -- <0564> push a -- "
    03ea : fba0 ; -- <0564> "
    03eb : 0013 ; -- <0564> "
    03ec : fc00 ; -- <0564> "
    03ed : 0352 ; -- <0564> "
    03ee : 0352 ; -- <0564> "
    03ef : 0408 ; -- <0564> pop b -- "
    03f0 : c800 ; -- <0564> "
    03f1 : 1334 ; -- <0564> "
    03f2 : 0004 ; -- <0565> a = x
    03f3 : fba0 ; -- <0566> call :put4x
    03f4 : 005f ; -- <0566> "
    03f5 : fc00 ; -- <0566> "
    03f6 : 03a0 ; -- <0567> a = :eol_msg -- puteol
    03f7 : 0002 ; -- <0567> "
    03f8 : fba0 ; -- <0567> puteol
    03f9 : 00eb ; -- <0567> "
    03fa : fc00 ; -- <0567> "

-- put target into reset again, in case this is a target warm boot.
    03fb : 3e02 ; -- <0570> bus_ctrl = $tg_reset_mask

-- load opcodes.  count up address in i.
    03fc : 0a00 ; -- <0573> i = 0
    03fd : 0e01 ; -- <0574> j = 1
    03fe : fba0 ; -- <0575> callx  fletcher16_init
    03ff : 010c ; -- <0575> "
    0400 : fc00 ; -- <0575> "
-- :loadword -- = 0x0401
-- receive, store in RAM.
    0401 : fba0 ; -- <0578> get16 a
    0402 : 0013 ; -- <0578> "
    0403 : fc00 ; -- <0578> "
    0404 : 2000 ; -- <0578> push a -- "
    0405 : fba0 ; -- <0578> "
    0406 : 0013 ; -- <0578> "
    0407 : fc00 ; -- <0578> "
    0408 : 0352 ; -- <0578> "
    0409 : 0352 ; -- <0578> "
    040a : 0408 ; -- <0578> pop b -- "
    040b : c800 ; -- <0578> "
    040c : 0334 ; -- <0578> "
    040d : 4c02 ; -- <0579> m9k_addr = i
    040e : 5000 ; -- <0580> m9k_data = a

-- read back from RAM and build checksum.
    040f : 0014 ; -- <0583> a = m9k_data
    0410 : fba0 ; -- <0583> callx  fletcher16_input16  m9k_data
    0411 : 012c ; -- <0583> "
    0412 : fc00 ; -- <0583> "

--  show decimated feedback text, for more speed:
    0413 : 0002 ; -- <0586> a = i
    0414 : 061f ; -- <0587> b = 0x1f
    0415 : e403 ; -- <0588> bn and0z :skip_text
    0416 : 041b ; -- <0588> "
    0417 : 022e ; -- <0589> a = 46 -- putasc "."
    0418 : fba0 ; -- <0589> putasc "."
    0419 : 0004 ; -- <0589> "
    041a : fc00 ; -- <0589> "
-- :skip_text -- = 0x041b

    041b : c800 ; -- <0592> i = i+j
    041c : 0b10 ; -- <0592> "
    041d : 0002 ; -- <0593> a = i
    041e : 0404 ; -- <0594> b = x
    041f : e407 ; -- <0595> bn eq :loadword
    0420 : 0401 ; -- <0595> "
    0421 : 03a0 ; -- <0596> a = :eol_msg -- puteol
    0422 : 0002 ; -- <0596> "
    0423 : fba0 ; -- <0596> puteol
    0424 : 00eb ; -- <0596> "
    0425 : fc00 ; -- <0596> "
    0426 : fba0 ; -- <0597> callx fletcher16_result  a
    0427 : 013d ; -- <0597> "
    0428 : fc00 ; -- <0597> "
    0429 : fba0 ; -- <0598> call :put4x
    042a : 005f ; -- <0598> "
    042b : fc00 ; -- <0598> "
    042c : 03a0 ; -- <0599> a = :eol_msg -- puteol
    042d : 0002 ; -- <0599> "
    042e : fba0 ; -- <0599> puteol
    042f : 00eb ; -- <0599> "
    0430 : fc00 ; -- <0599> "
    0431 : f808 ; -- <0600> pop rtna -- end_func
    0432 : 1008 ; -- <0600> pop x -- "
    0433 : 0c08 ; -- <0600> pop j -- "
    0434 : 0808 ; -- <0600> pop i -- "
    0435 : fc00 ; -- <0599> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 rstk
-- src reg 0009 bp0_addr
-- src reg 000a bp1_addr
-- src reg 000b bp2_addr
-- src reg 000c bp3_addr
-- src reg 000d force_opcode
-- src reg 000e poke_data
-- src reg 000f bus_ctrl
-- src reg 0010 tg_force
-- src reg 0011 atx_data
-- src reg 0012 atx_ctrl
-- src reg 0013 m9k_addr
-- src reg 0014 m9k_data
-- src reg 0015 exr_shadow
-- src reg 0016 tg_code_addr
-- src reg 0017 peek_data
-- src reg 0018 bp_status
-- src reg 0019 boot_break
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 rstk
-- dest reg 0009 bp0_addr
-- dest reg 000a bp1_addr
-- dest reg 000b bp2_addr
-- dest reg 000c bp3_addr
-- dest reg 000d force_opcode
-- dest reg 000e poke_data
-- dest reg 000f bus_ctrl
-- dest reg 0010 tg_force
-- dest reg 0011 atx_data
-- dest reg 0012 atx_ctrl
-- dest reg 0013 m9k_addr
-- dest reg 0014 m9k_data

END;
