
        DEPTH = 2048 ;  -- The size of memory in words
        WIDTH = 16;                   -- bits per data word
        ADDRESS_RADIX = HEX;          
        DATA_RADIX = HEX;             
        CONTENT                       
        BEGIN
    
-- #########################################################################
-- assembly source code.
-- for debugging supervisor mcu.

-- program code dimensions.

-- size of register file.  all registers are external to the Synapse316 core.
-- min_num_regs <= num_regs <= max_num_regs.
--vdefine num_regs                32
--vdefine top_reg                 $num_regs - 1
-- those 2 have been moved to the assembly program to be distinct for each core.

-- Synapse instruction set architecture constants.

-- Synapse instruction set codes.

-- debugging supervisor contants.  these are also required by implementation of the target MCU core.

-- program code dimensions.

-- these are for the VISOR code, not the TARGET code.

-- register file configuration

-- application-specific register aliases.






-- Synapse instruction set architecture constants.


    0000 : e00f ; -- <0072> jmp :main
    0001 : 014d ; -- <0072> "


-- driver library for my_uart_v2 simple async transceiver.



-- :eol_msg -- = 0x0002
-- "\r\n\x0"
    0002 : 0a0d ; -- <0011>   
    0003 : 0000 ; -- <0011>   


-- routine sends out the low byte from a to the UART.  blocks until the UART accepts the byte.
-- ######## func putchar_atx -- = 0x0004
    0004 : 2004 ; -- <0038> push x -- func putchar_atx

    0005 : 1000 ; -- <0040> x = a

-- wait for UART to be idle (not busy).
    0006 : 0202 ; -- <0043> a = $atx_busy_mask
-- :pcatx_wait_for_idle -- = 0x0007
    0007 : 0412 ; -- <0045> b = atx_ctrl
    0008 : e403 ; -- <0046> bn and0z :pcatx_wait_for_idle
    0009 : 0007 ; -- <0046> "

-- push word to the UART.  its low byte is a character.
    000a : 4404 ; -- <0049> atx_data = x

-- can't use the actual register load strobe that occurs here, because it's
-- much too fast for the UART to sample.
-- instead use a dedicated output word atx_ctrl.
    000b : 4a01 ; -- <0054> atx_ctrl = $atx_load_mask

-- wait until UART is busy, as acknowledgement.
    000c : 0202 ; -- <0057> a = $atx_busy_mask
-- :pcatx_wait_for_busy -- = 0x000d
    000d : 0412 ; -- <0059> b = atx_ctrl
    000e : e003 ; -- <0060> br and0z :pcatx_wait_for_busy
    000f : 000d ; -- <0060> "
    0010 : 4a00 ; -- <0061> atx_ctrl = 0
    0011 : 1008 ; -- <0062> pop x -- end_func
    0012 : fc00 ; -- <0061> swapra = nop

-- routine receives a byte from the UART.  blocks until the UART receives the byte.
-- returns it in the low byte of a.
-- ######## func getchar_atx -- = 0x0013
-- wait until UART is busy, then idle.
    0013 : 0204 ; -- <0068> a = $arx_busy_mask
-- :wait_for_busy -- = 0x0014
    0014 : 0412 ; -- <0070> b = atx_ctrl
    0015 : e003 ; -- <0071> br and0z :wait_for_busy
    0016 : 0014 ; -- <0071> "
-- :wait_for_idle -- = 0x0017
    0017 : 0412 ; -- <0073> b = atx_ctrl
    0018 : e403 ; -- <0074> bn and0z :wait_for_idle
    0019 : 0017 ; -- <0074> "
    001a : 0011 ; -- <0075> a = atx_data
    001b : fc00 ; -- <0075> swapra = nop

-- returns a character in a, or -1 if none.
-- this version can miss characters if not polled while the character is arriving.
-- ######## func pollchar_atx -- = 0x001c
-- check for UART is busy, then idle.
    001c : 0204 ; -- <0082> a = $arx_busy_mask
    001d : 0412 ; -- <0083> b = atx_ctrl
    001e : e003 ; -- <0084> br and0z :none
    001f : 0025 ; -- <0084> "
-- :wait_for_idle -- = 0x0020
    0020 : 0412 ; -- <0086> b = atx_ctrl
    0021 : e403 ; -- <0087> bn and0z :wait_for_idle
    0022 : 0020 ; -- <0087> "
    0023 : 0011 ; -- <0088> a = atx_data
    0024 : fc00 ; -- <0088> swapra = nop
-- :none -- = 0x0025
    0025 : 0360 ; -- <0091> a = -1
    0026 : fc00 ; -- <0091> swapra = nop



-- pick a byte from an array of packed words in program space.  fetch & return it in a.
-- pass array base address in x, byte offset in a.
-- ######## func fetch_byte -- = 0x0027
    0027 : 0601 ; -- <0005> b = 1
    0028 : e003 ; -- <0006> br and0z :pick_byte_even
    0029 : 0032 ; -- <0006> "
    002a : 0350 ; -- <0007> a = a>>1
    002b : 0404 ; -- <0008> b = x
    002c : c800 ; -- <0009> fetch a from a+b
    002d : d300 ; -- <0009> "
    002e : 03b0 ; -- <0009> "
    002f : 0353 ; -- <0010> a = a>>4
    0030 : 0353 ; -- <0011> a = a>>4
    0031 : fc00 ; -- <0011> swapra = nop
-- :pick_byte_even -- = 0x0032
    0032 : 0350 ; -- <0014> a = a>>1
    0033 : 0404 ; -- <0015> b = x
    0034 : c800 ; -- <0016> fetch a from a+b
    0035 : d300 ; -- <0016> "
    0036 : 03b0 ; -- <0016> "
    0037 : 06ff ; -- <0017> b = 0xff
    0038 : c800 ; -- <0018> a = and
    0039 : 0330 ; -- <0018> "
    003a : fc00 ; -- <0018> swapra = nop

-- find a byte in an array of packed words in program space.
-- pass data byte in a.
-- pass array base address in x.
-- array length in i.
-- returns found index in a (or -1 if not found).
-- if the data byte occurs more than once, the final one's position is returned.
-- ######## func find_in_fetch -- = 0x003b
    003b : 2002 ; -- <0027> push i -- func find_in_fetch
    003c : 2003 ; -- <0027> push j -- "
    003d : 2005 ; -- <0027> push y -- "
    003e : 203e ; -- <0027> push rtna -- "
    003f : 1400 ; -- <0028> y = a
    0040 : 0f60 ; -- <0029> j = -1
-- :again -- = 0x0041
    0041 : e001 ; -- <0031> br iz :fail
    0042 : 0051 ; -- <0031> "
    0043 : 0b10 ; -- <0032> i = ad1
    0044 : 0002 ; -- <0033> a = i
    0045 : fba0 ; -- <0034> call :fetch_byte
    0046 : 0027 ; -- <0034> "
    0047 : fc00 ; -- <0034> "
    0048 : 0405 ; -- <0035> b = y
    0049 : e407 ; -- <0036> bn eq :again
    004a : 0041 ; -- <0036> "
-- :found -- = 0x004b
    004b : 0002 ; -- <0038> a = i
    004c : f808 ; -- <0039> pop rtna -- rtn
    004d : 1408 ; -- <0039> pop y -- "
    004e : 0c08 ; -- <0039> pop j -- "
    004f : 0808 ; -- <0039> pop i -- "
    0050 : fc00 ; -- <0038> swapra = nop
-- :fail -- = 0x0051
    0051 : 0360 ; -- <0041> a = -1
    0052 : f808 ; -- <0042> pop rtna -- end_func
    0053 : 1408 ; -- <0042> pop y -- "
    0054 : 0c08 ; -- <0042> pop j -- "
    0055 : 0808 ; -- <0042> pop i -- "
    0056 : fc00 ; -- <0041> swapra = nop



-- function library for simple console i/o based on putchar & getchar.
-- requires a console driver library to be included prior to including this.


-- :hexdigits -- = 0x0057
-- "0123456789abcdef"
    0057 : 3130 ; -- <0050> 10
    0058 : 3332 ; -- <0050> 32
    0059 : 3534 ; -- <0050> 54
    005a : 3736 ; -- <0050> 76
    005b : 3938 ; -- <0050> 98
    005c : 6261 ; -- <0050> ba
    005d : 6463 ; -- <0050> dc
    005e : 6665 ; -- <0050> fe

-- function to print a 16-bit number formatted as 4 hex digits.
-- pass number in a.
-- ######## func put4x -- = 0x005f
    005f : 2004 ; -- <0054> push x -- func put4x
    0060 : 2006 ; -- <0054> push ga -- "
    0061 : 203e ; -- <0054> push rtna -- "
    0062 : 13a0 ; -- <0055> x = :hexdigits
    0063 : 0057 ; -- <0055> "

    0064 : 1800 ; -- <0057> ga = a
    0065 : 07a0 ; -- <0058> b = 0xF000
    0066 : f000 ; -- <0058> "
    0067 : c800 ; -- <0059> a = and
    0068 : 0330 ; -- <0059> "
    0069 : 0353 ; -- <0060> a = a>>4
    006a : 0353 ; -- <0061> a = a>>4
    006b : 0353 ; -- <0062> a = a>>4
    006c : fba0 ; -- <0063> call fetch_byte
    006d : 0027 ; -- <0063> "
    006e : fc00 ; -- <0063> "
    006f : fba0 ; -- <0064> putchar a
    0070 : 0004 ; -- <0064> "
    0071 : fc00 ; -- <0064> "

    0072 : 0006 ; -- <0066> a = ga
    0073 : 07a0 ; -- <0067> b = 0x0F00
    0074 : 0f00 ; -- <0067> "
    0075 : c800 ; -- <0068> a = and
    0076 : 0330 ; -- <0068> "
    0077 : 0353 ; -- <0069> a = a>>4
    0078 : 0353 ; -- <0070> a = a>>4
    0079 : fba0 ; -- <0071> call fetch_byte
    007a : 0027 ; -- <0071> "
    007b : fc00 ; -- <0071> "
    007c : fba0 ; -- <0072> putchar a
    007d : 0004 ; -- <0072> "
    007e : fc00 ; -- <0072> "

    007f : 0006 ; -- <0074> a = ga
    0080 : 06f0 ; -- <0075> b = 0x00F0
    0081 : c800 ; -- <0076> a = and
    0082 : 0330 ; -- <0076> "
    0083 : 0353 ; -- <0077> a = a>>4
    0084 : fba0 ; -- <0078> call fetch_byte
    0085 : 0027 ; -- <0078> "
    0086 : fc00 ; -- <0078> "
    0087 : fba0 ; -- <0079> putchar a
    0088 : 0004 ; -- <0079> "
    0089 : fc00 ; -- <0079> "

    008a : 0006 ; -- <0081> a = ga
    008b : 060f ; -- <0082> b = 0x000F
    008c : c800 ; -- <0083> a = and
    008d : 0330 ; -- <0083> "
    008e : fba0 ; -- <0084> call fetch_byte
    008f : 0027 ; -- <0084> "
    0090 : fc00 ; -- <0084> "
    0091 : fba0 ; -- <0085> putchar a
    0092 : 0004 ; -- <0085> "
    0093 : fc00 ; -- <0085> "

    0094 : f808 ; -- <0087> pop rtna -- end_func
    0095 : 1808 ; -- <0087> pop ga -- "
    0096 : 1008 ; -- <0087> pop x -- "
    0097 : fc00 ; -- <0086> swapra = nop

-- function to scan a 16-bit number formatted as 4 hex digits.
-- return number in a.  return 0 for success in b.
-- ######## func get4x -- = 0x0098
    0098 : 2002 ; -- <0091> push i -- func get4x
    0099 : 2003 ; -- <0091> push j -- "
    009a : 2004 ; -- <0091> push x -- "
    009b : 2005 ; -- <0091> push y -- "
    009c : 203e ; -- <0091> push rtna -- "
-- y = digit counter
-- j = sum
    009d : 1604 ; -- <0094> y = 4
-- :again -- = 0x009e
    009e : fba0 ; -- <0096> getchar
    009f : 0013 ; -- <0096> "
    00a0 : fc00 ; -- <0096> "
    00a1 : 13a0 ; -- <0097> x = :hexdigits
    00a2 : 0057 ; -- <0097> "
    00a3 : 0a10 ; -- <0098> i = 16
    00a4 : fba0 ; -- <0099> call :find_in_fetch
    00a5 : 003b ; -- <0099> "
    00a6 : fc00 ; -- <0099> "
    00a7 : 0760 ; -- <0100> b = -1
    00a8 : e007 ; -- <0101> br eq :fail
    00a9 : 00bd ; -- <0101> "
    00aa : 0400 ; -- <0102> b = a
    00ab : 0003 ; -- <0103> a = j
    00ac : 0352 ; -- <0104> a = a<<4
    00ad : c800 ; -- <0105> j = or
    00ae : 0f34 ; -- <0105> "
    00af : 1360 ; -- <0106> x = -1
    00b0 : c800 ; -- <0107> y = x+y
    00b1 : 1720 ; -- <0107> "
    00b2 : 0005 ; -- <0108> a = y
    00b3 : e400 ; -- <0109> bn az :again
    00b4 : 009e ; -- <0109> "
    00b5 : 0003 ; -- <0110> a = j
    00b6 : 0600 ; -- <0111> b = 0
    00b7 : f808 ; -- <0112> pop rtna -- rtn
    00b8 : 1408 ; -- <0112> pop y -- "
    00b9 : 1008 ; -- <0112> pop x -- "
    00ba : 0c08 ; -- <0112> pop j -- "
    00bb : 0808 ; -- <0112> pop i -- "
    00bc : fc00 ; -- <0111> swapra = nop
-- :fail -- = 0x00bd
    00bd : 0760 ; -- <0114> b = -1
    00be : f808 ; -- <0115> pop rtna -- end_func
    00bf : 1408 ; -- <0115> pop y -- "
    00c0 : 1008 ; -- <0115> pop x -- "
    00c1 : 0c08 ; -- <0115> pop j -- "
    00c2 : 0808 ; -- <0115> pop i -- "
    00c3 : fc00 ; -- <0114> swapra = nop

-- print a fixed-length string from packed words in program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed -- = 0x00c4
    00c4 : 2002 ; -- <0121> push i -- func print_fixed
    00c5 : 2003 ; -- <0121> push j -- "
    00c6 : 2004 ; -- <0121> push x -- "
    00c7 : 2005 ; -- <0121> push y -- "
    00c8 : 2006 ; -- <0121> push ga -- "
    00c9 : 203e ; -- <0121> push rtna -- "
    00ca : 0800 ; -- <0122> i = a
    00cb : 0e01 ; -- <0123> j = 1
    00cc : 1001 ; -- <0124> x = b
    00cd : 1760 ; -- <0125> y = -1
-- :next_word -- = 0x00ce
    00ce : e002 ; -- <0127> br xz :done
    00cf : 00e4 ; -- <0127> "
    00d0 : 1320 ; -- <0128> x = ad2
    00d1 : d002 ; -- <0129> fetch ga from i
    00d2 : 1bb0 ; -- <0129> "
-- now x = bytes remaining, i = current word address, ga = data word.
    00d3 : 0006 ; -- <0131> a = ga -- putchar ga
    00d4 : fba0 ; -- <0131> putchar ga
    00d5 : 0004 ; -- <0131> "
    00d6 : fc00 ; -- <0131> "
    00d7 : e002 ; -- <0132> br xz :done
    00d8 : 00e4 ; -- <0132> "
    00d9 : 1320 ; -- <0133> x = ad2
    00da : 0006 ; -- <0134> a = ga
    00db : 0353 ; -- <0135> a = a>>4
    00dc : 0353 ; -- <0136> a = a>>4
    00dd : fba0 ; -- <0137> putchar a
    00de : 0004 ; -- <0137> "
    00df : fc00 ; -- <0137> "
    00e0 : c800 ; -- <0138> i = i+j
    00e1 : 0b10 ; -- <0138> "
    00e2 : e00f ; -- <0139> jmp :next_word
    00e3 : 00ce ; -- <0139> "
-- :done -- = 0x00e4
    00e4 : f808 ; -- <0141> pop rtna -- end_func
    00e5 : 1808 ; -- <0141> pop ga -- "
    00e6 : 1408 ; -- <0141> pop y -- "
    00e7 : 1008 ; -- <0141> pop x -- "
    00e8 : 0c08 ; -- <0141> pop j -- "
    00e9 : 0808 ; -- <0141> pop i -- "
    00ea : fc00 ; -- <0140> swapra = nop

-- print a null-terminated string from packed words in program space.
-- pass its word address (not its byte address) in a.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_nt -- = 0x00eb
    00eb : 2002 ; -- <0147> push i -- func print_nt
    00ec : 2003 ; -- <0147> push j -- "
    00ed : 2004 ; -- <0147> push x -- "
    00ee : 203e ; -- <0147> push rtna -- "
    00ef : 0800 ; -- <0148> i = a
    00f0 : 0e01 ; -- <0149> j = 1
-- :next_word -- = 0x00f1
    00f1 : d002 ; -- <0151> fetch x from i
    00f2 : 13b0 ; -- <0151> "
-- now i = current word address, x = data word, b = low byte mask, a = data byte.
    00f3 : 0004 ; -- <0153> a = x
    00f4 : 06ff ; -- <0154> b = 0xff
    00f5 : e003 ; -- <0155> br and0z :done
    00f6 : 0107 ; -- <0155> "
    00f7 : fba0 ; -- <0156> putchar a
    00f8 : 0004 ; -- <0156> "
    00f9 : fc00 ; -- <0156> "
    00fa : 0004 ; -- <0157> a = x
    00fb : 0353 ; -- <0158> a = a>>4
    00fc : 0353 ; -- <0159> a = a>>4
    00fd : 06ff ; -- <0160> b = 0xff
    00fe : e003 ; -- <0161> br and0z :done
    00ff : 0107 ; -- <0161> "
    0100 : fba0 ; -- <0162> putchar a
    0101 : 0004 ; -- <0162> "
    0102 : fc00 ; -- <0162> "
    0103 : c800 ; -- <0163> i = i+j
    0104 : 0b10 ; -- <0163> "
    0105 : e00f ; -- <0164> jmp :next_word
    0106 : 00f1 ; -- <0164> "
-- :done -- = 0x0107
    0107 : f808 ; -- <0166> pop rtna -- end_func
    0108 : 1008 ; -- <0166> pop x -- "
    0109 : 0c08 ; -- <0166> pop j -- "
    010a : 0808 ; -- <0166> pop i -- "
    010b : fc00 ; -- <0165> swapra = nop




-- ######## func fletcher16_init -- = 0x010c

    010c : 1a00 ; -- <0005> $fletcher_sum1_reg = 0
    010d : 1e00 ; -- <0006> $fletcher_sum2_reg = 0

    010e : fc00 ; -- <0008> swapra = nop

-- return the modulus(255) of a given number.
-- ######## func mod255 -- = 0x010f

-- while a is greater than 254, subtract 255.
-- :mod255_again -- = 0x010f
    010f : 06fe ; -- <0013> b = 0xfe
    0110 : e006 ; -- <0014> br gt :mod255_greater
    0111 : 0113 ; -- <0014> "
    0112 : fc00 ; -- <0014> swapra = nop
-- :mod255_greater -- = 0x0113
    0113 : 07a0 ; -- <0017> b = ([negate 0xff])
    0114 : ff01 ; -- <0017> "
    0115 : c800 ; -- <0018> a = a+b
    0116 : 0300 ; -- <0018> "
    0117 : e00f ; -- <0019> jmp :mod255_again
    0118 : 010f ; -- <0019> "

    0119 : fc00 ; -- <0021> swapra = nop

-- accumulate a Fletcher16 checksum, given the next byte of data.
-- ######## func fletcher16_input8 -- = 0x011a
    011a : 203e ; -- <0046> push rtna -- func fletcher16_input8

--TODO: debug only.
--x = a
--putasc " "
--a = x
--call put4x
--a = x

    011b : 0406 ; -- <0031> b = $fletcher_sum1_reg
    011c : c800 ; -- <0032> a = a+b
    011d : 0300 ; -- <0032> "
    011e : fba0 ; -- <0032> callx mod255  a+b  $fletcher_sum1_reg
    011f : 010f ; -- <0032> "
    0120 : fc00 ; -- <0032> "
    0121 : 1800 ; -- <0032> ga = a

    0122 : 0006 ; -- <0034> a = $fletcher_sum1_reg
    0123 : 0407 ; -- <0035> b = $fletcher_sum2_reg
    0124 : c800 ; -- <0036> a = a+b
    0125 : 0300 ; -- <0036> "
    0126 : fba0 ; -- <0036> callx mod255  a+b  $fletcher_sum2_reg
    0127 : 010f ; -- <0036> "
    0128 : fc00 ; -- <0036> "
    0129 : 1c00 ; -- <0036> gb = a

--TODO: debug only.
--putasc " "
--a =  $fletcher_sum2_reg
--call put4x
--putasc " "
--a =  $fletcher_sum1_reg
--call put4x
--puteol

    012a : f808 ; -- <0047> pop rtna -- func fletcher16_input8
    012b : fc00 ; -- <0047> swapra = nop

-- accumulate a Fletcher16 checksum, given the next word of data.
-- ######## func fletcher16_input16 -- = 0x012c
    012c : 2002 ; -- <0055> push i -- func fletcher16_input16
    012d : 203e ; -- <0055> push rtna -- "

    012e : 0b53 ; -- <0050> i = a>>4
    012f : 06ff ; -- <0051> b = 0xff
    0130 : c800 ; -- <0052> a = and
    0131 : 0330 ; -- <0052> "
    0132 : fba0 ; -- <0052> callx fletcher16_input8  and
    0133 : 011a ; -- <0052> "
    0134 : fc00 ; -- <0052> "
    0135 : 0002 ; -- <0053> a = i
    0136 : 0353 ; -- <0054> a = a>>4
    0137 : fba0 ; -- <0054> callx fletcher16_input8  a>>4
    0138 : 011a ; -- <0054> "
    0139 : fc00 ; -- <0054> "

    013a : f808 ; -- <0056> pop rtna -- func fletcher16_input16
    013b : 0808 ; -- <0056> pop i -- "
    013c : fc00 ; -- <0056> swapra = nop

-- return the combined 16-bit result of Fletcher16 checksum.
-- ######## func fletcher16_result -- = 0x013d

    013d : 0007 ; -- <0059> a = $fletcher_sum2_reg
    013e : 0352 ; -- <0060> a = a<<4
    013f : 0352 ; -- <0061> a = a<<4
    0140 : 0406 ; -- <0062> b = $fletcher_sum1_reg
    0141 : c800 ; -- <0063> result = or
    0142 : 0334 ; -- <0063> "
    0143 : fc00 ; -- <0062> swapra = nop

    0144 : fc00 ; -- <0065> swapra = nop




-- :boot_msg -- = 0x0145
-- "\r\nVISOR\x0"
    0145 : 0a0d ; -- <0091>   
    0146 : 4956 ; -- <0091> IV
    0147 : 4f53 ; -- <0091> OS
    0148 : 0052 ; -- <0091>  R
-- :running_msg -- = 0x0149
-- "\r\nRUN >\x0"
    0149 : 0a0d ; -- <0093>   
    014a : 5552 ; -- <0093> UR
    014b : 204e ; -- <0093>  N
    014c : 003e ; -- <0093>  >

-- --------------------------------------------
-- :main -- = 0x014d
-- put target into reset.
    014d : 3e02 ; -- <0098> bus_ctrl = $tg_reset_mask

-- init visor.
    014e : 3360 ; -- <0101> bp3_addr = $bp_disable
    014f : 2f60 ; -- <0102> bp2_addr = $bp_disable
    0150 : 2b60 ; -- <0103> bp1_addr = $bp_disable
    0151 : 2760 ; -- <0104> bp0_addr = $bp_disable

-- startup message
    0152 : 03a0 ; -- <0107> a = :boot_msg
    0153 : 0145 ; -- <0107> "
    0154 : fba0 ; -- <0108> call :print_nt
    0155 : 00eb ; -- <0108> "
    0156 : fc00 ; -- <0108> "

-- check for bootloader signal.
    0157 : 0019 ; -- <0111> a = boot_break
    0158 : e400 ; -- <0112> bn az :boot_run
    0159 : 0160 ; -- <0112> "
-- ^^^ for press-to-debug; runs target by default.
-- br az :boot_run
-- ^^^ for press-to-run; debugs target by default.

-- step into the first target instruction.
    015a : 3e08 ; -- <0118> bus_ctrl = $bp_step_mask
    015b : fba0 ; -- <0119> call :wait_for_bp
    015c : 0306 ; -- <0119> "
    015d : fc00 ; -- <0119> "
    015e : e00f ; -- <0120> jmp :cmd_loop
    015f : 0161 ; -- <0120> "
-- :boot_run -- = 0x0160
-- release target reset, to run.
    0160 : 3e00 ; -- <0123> bus_ctrl = 0

-- command prompt loop.
-- :cmd_loop -- = 0x0161
    0161 : 000f ; -- <0127> a = bus_ctrl
    0162 : 0600 ; -- <0128> b = 0
    0163 : e007 ; -- <0129> br eq :running_prompt
    0164 : 0186 ; -- <0129> "

    0165 : fba0 ; -- <0131> call :dump_target
    0166 : 03ae ; -- <0131> "
    0167 : fc00 ; -- <0131> "
    0168 : 0016 ; -- <0132> a = tg_code_addr
    0169 : fba0 ; -- <0133> call :put4x
    016a : 005f ; -- <0133> "
    016b : fc00 ; -- <0133> "
    016c : 022c ; -- <0134> a = 44 -- putasc ","
    016d : fba0 ; -- <0134> putasc ","
    016e : 0004 ; -- <0134> "
    016f : fc00 ; -- <0134> "
    0170 : 0015 ; -- <0135> a = exr_shadow
    0171 : fba0 ; -- <0136> call :put4x
    0172 : 005f ; -- <0136> "
    0173 : fc00 ; -- <0136> "
    0174 : 0220 ; -- <0137> a = 32 -- putasc " "
    0175 : fba0 ; -- <0137> putasc " "
    0176 : 0004 ; -- <0137> "
    0177 : fc00 ; -- <0137> "
    0178 : 023e ; -- <0138> a = 62 -- putasc ">"
    0179 : fba0 ; -- <0138> putasc ">"
    017a : 0004 ; -- <0138> "
    017b : fc00 ; -- <0138> "
    017c : fba0 ; -- <0139> getchar_echo
    017d : 0013 ; -- <0139> "
    017e : fc00 ; -- <0139> "
    017f : 2000 ; -- <0139> push a -- "
    0180 : fba0 ; -- <0139> "
    0181 : 0004 ; -- <0139> "
    0182 : fc00 ; -- <0139> "
    0183 : 0008 ; -- <0139> pop a -- "
    0184 : e00f ; -- <0140> jmp :parse_cmd
    0185 : 0197 ; -- <0140> "

-- :running_prompt -- = 0x0186
    0186 : 03a0 ; -- <0143> a = :running_msg
    0187 : 0149 ; -- <0143> "
    0188 : fba0 ; -- <0144> call :print_nt
    0189 : 00eb ; -- <0144> "
    018a : fc00 ; -- <0144> "
-- :run_poll -- = 0x018b
    018b : fba0 ; -- <0146> pollchar
    018c : 001c ; -- <0146> "
    018d : fc00 ; -- <0146> "
    018e : 0760 ; -- <0147> b = -1
    018f : e407 ; -- <0148> bn eq :parse_cmd
    0190 : 0197 ; -- <0148> "
    0191 : 0018 ; -- <0149> a = bp_status
    0192 : e000 ; -- <0150> br az :run_poll
    0193 : 018b ; -- <0150> "
-- target hit a breakpoint; switch to stepping mode.
    0194 : 3e08 ; -- <0152> bus_ctrl = $bp_step_mask
    0195 : e00f ; -- <0153> jmp :cmd_loop
    0196 : 0161 ; -- <0153> "

-- :parse_cmd -- = 0x0197

-- command = step next instruction.
    0197 : 066e ; -- <0158> b = 110 -- asc b = "n"
    0198 : e407 ; -- <0159> bn eq :skip_step
    0199 : 019f ; -- <0159> "
    019a : fba0 ; -- <0160> call :step_target
    019b : 01e0 ; -- <0160> "
    019c : fc00 ; -- <0160> "
    019d : e00f ; -- <0161> jmp :cmd_loop
    019e : 0161 ; -- <0161> "
-- :skip_step -- = 0x019f

-- command = reset target.
    019f : 0652 ; -- <0165> b = 82 -- asc b = "R"
    01a0 : e407 ; -- <0166> bn eq :skip_reset
    01a1 : 01ab ; -- <0166> "
    01a2 : 3e02 ; -- <0167> bus_ctrl = $tg_reset_mask
    01a3 : c800 ; -- <0168> nop
    01a4 : c800 ; -- <0169> nop
    01a5 : 3e08 ; -- <0170> bus_ctrl = $bp_step_mask
    01a6 : fba0 ; -- <0171> call :wait_for_bp
    01a7 : 0306 ; -- <0171> "
    01a8 : fc00 ; -- <0171> "
    01a9 : e00f ; -- <0172> jmp :cmd_loop
    01aa : 0161 ; -- <0172> "
-- :skip_reset -- = 0x01ab

-- command = load program.
    01ab : 066c ; -- <0176> b = 108 -- asc b = "l"
    01ac : e407 ; -- <0177> bn eq :skip_load
    01ad : 01b6 ; -- <0177> "
    01ae : fba0 ; -- <0178> call :step_until_safe
    01af : 01ee ; -- <0178> "
    01b0 : fc00 ; -- <0178> "
    01b1 : fba0 ; -- <0179> call :load_program
    01b2 : 0425 ; -- <0179> "
    01b3 : fc00 ; -- <0179> "
    01b4 : e00f ; -- <0180> jmp :cmd_loop
    01b5 : 0161 ; -- <0180> "
-- :skip_load -- = 0x01b6

-- command = run full speed.
    01b6 : 0672 ; -- <0184> b = 114 -- asc b = "r"
    01b7 : e407 ; -- <0185> bn eq :skip_run
    01b8 : 01bd ; -- <0185> "
-- release target reset, to run.
    01b9 : 3e00 ; -- <0187> bus_ctrl = 0
    01ba : 2409 ; -- <0188> bp0_addr = bp0_addr
    01bb : e00f ; -- <0189> jmp :cmd_loop
    01bc : 0161 ; -- <0189> "
-- :skip_run -- = 0x01bd

-- command = set breakpoint.
    01bd : 0662 ; -- <0193> b = 98 -- asc b = "b"
    01be : e407 ; -- <0194> bn eq :skip_setbrk
    01bf : 01c5 ; -- <0194> "
    01c0 : fba0 ; -- <0195> call :set_bp
    01c1 : 030a ; -- <0195> "
    01c2 : fc00 ; -- <0195> "
    01c3 : e00f ; -- <0196> jmp :cmd_loop
    01c4 : 0161 ; -- <0196> "
-- :skip_setbrk -- = 0x01c5

-- command = poke register.
    01c5 : 066f ; -- <0200> b = 111 -- asc b = "o"
    01c6 : e407 ; -- <0201> bn eq :skip_poke
    01c7 : 01cd ; -- <0201> "
    01c8 : fba0 ; -- <0202> call :poke_cmd
    01c9 : 0358 ; -- <0202> "
    01ca : fc00 ; -- <0202> "
    01cb : e00f ; -- <0203> jmp :cmd_loop
    01cc : 0161 ; -- <0203> "
-- :skip_poke -- = 0x01cd

-- command = dump Avalon data e.g. from SDRAM.
    01cd : 0675 ; -- <0207> b = 117 -- asc b = "u"
    01ce : e407 ; -- <0208> bn eq :skip_dump
    01cf : 01d5 ; -- <0208> "
    01d0 : fba0 ; -- <0209> call :dump_avalon
    01d1 : 021c ; -- <0209> "
    01d2 : fc00 ; -- <0209> "
    01d3 : e00f ; -- <0210> jmp :cmd_loop
    01d4 : 0161 ; -- <0210> "
-- :skip_dump -- = 0x01d5

    01d5 : 023f ; -- <0213> a = 63 -- putasc "?"
    01d6 : fba0 ; -- <0213> putasc "?"
    01d7 : 0004 ; -- <0213> "
    01d8 : fc00 ; -- <0213> "
    01d9 : 03a0 ; -- <0214> a = :eol_msg -- puteol
    01da : 0002 ; -- <0214> "
    01db : fba0 ; -- <0214> puteol
    01dc : 00eb ; -- <0214> "
    01dd : fc00 ; -- <0214> "
    01de : e00f ; -- <0215> jmp :cmd_loop
    01df : 0161 ; -- <0215> "


-- ######## func step_target -- = 0x01e0
    01e0 : 203e ; -- <0244> push rtna -- func step_target
    01e1 : 3e08 ; -- <0245> bus_ctrl = $bp_step_mask
    01e2 : 2409 ; -- <0246> bp0_addr = bp0_addr
    01e3 : fba0 ; -- <0247> call :wait_for_bp
    01e4 : 0306 ; -- <0247> "
    01e5 : fc00 ; -- <0247> "
    01e6 : f808 ; -- <0248> pop rtna -- end_func
    01e7 : fc00 ; -- <0247> swapra = nop


-- :unsafe_msg -- = 0x01e8
-- "\r\n!UNSAFE!\r\n"
    01e8 : 0a0d ; -- <0252>   
    01e9 : 5521 ; -- <0252> U!
    01ea : 534e ; -- <0252> SN
    01eb : 4641 ; -- <0252> FA
    01ec : 2145 ; -- <0252> !E
    01ed : 0a0d ; -- <0252>   

-- ######## func step_until_safe -- = 0x01ee
    01ee : 203e ; -- <0254> push rtna -- func step_until_safe
    01ef : 0015 ; -- <0255> a = exr_shadow
    01f0 : 07a0 ; -- <0256> b = $exr_unsafe_mask
    01f1 : c000 ; -- <0256> "

    01f2 : c800 ; -- <0260> a = and
    01f3 : 0330 ; -- <0260> "
    01f4 : 07a0 ; -- <0260> b = 0xc000
    01f5 : c000 ; -- <0260> "

    01f6 : e407 ; -- <0257> bn eq :else_502
    01f7 : 01fb ; -- <0257> "

-- exr shows a branch in progress.  not safe to load a new program right now.
    01f8 : fba0 ; -- <0259> call step_target
    01f9 : 01e0 ; -- <0259> "
    01fa : fc00 ; -- <0259> "


    01fb : 0015 ; -- <0262> a = exr_shadow
    01fc : 07a0 ; -- <0263> b = $exr_unsafe_mask
    01fd : c000 ; -- <0263> "

    01fe : c800 ; -- <0267> a = and
    01ff : 0330 ; -- <0267> "
    0200 : 07a0 ; -- <0267> b = 0xc000
    0201 : c000 ; -- <0267> "

    0202 : e407 ; -- <0264> bn eq :else_514
    0203 : 0207 ; -- <0264> "

-- exr shows a branch in progress.  not safe to load a new program right now.
    0204 : fba0 ; -- <0266> call step_target
    0205 : 01e0 ; -- <0266> "
    0206 : fc00 ; -- <0266> "


    0207 : 0015 ; -- <0269> a = exr_shadow
    0208 : 07a0 ; -- <0270> b = $exr_unsafe_mask
    0209 : c000 ; -- <0270> "

    020a : c800 ; -- <0276> a = and
    020b : 0330 ; -- <0276> "
    020c : 07a0 ; -- <0276> b = 0xc000
    020d : c000 ; -- <0276> "

    020e : e407 ; -- <0271> bn eq :else_526
    020f : 021a ; -- <0271> "

-- failed to step to a safe state.
    0210 : 03a0 ; -- <0273> a = :unsafe_msg
    0211 : 01e8 ; -- <0273> "
    0212 : fba0 ; -- <0274> call print_nt
    0213 : 00eb ; -- <0274> "
    0214 : fc00 ; -- <0274> "
    0215 : 03a0 ; -- <0275> a = :eol_msg -- puteol
    0216 : 0002 ; -- <0275> "
    0217 : fba0 ; -- <0275> puteol
    0218 : 00eb ; -- <0275> "
    0219 : fc00 ; -- <0275> "

    021a : f808 ; -- <0277> pop rtna -- end_func
    021b : fc00 ; -- <0276> swapra = nop

-- ######## func dump_avalon -- = 0x021c
    021c : 2002 ; -- <0279> push i -- func dump_avalon
    021d : 2003 ; -- <0279> push j -- "
    021e : 2004 ; -- <0279> push x -- "
    021f : 2005 ; -- <0279> push y -- "
    0220 : 2006 ; -- <0279> push ga -- "
    0221 : 2007 ; -- <0279> push gb -- "
    0222 : 203e ; -- <0279> push rtna -- "
-- test case: u0010 0011 0013 0012 0000 0000 0080.

-- this func may borrow some peripheral registers to hold temporary data.
-- but it can only borrow registers that don't have side effects that are relevant to this function.

-- parse av_write_data reg address into av_data_regs high byte.
    0223 : fba0 ; -- <0288> call :get4x
    0224 : 0098 ; -- <0288> "
    0225 : fc00 ; -- <0288> "
    0226 : 0801 ; -- <0289> i = b
    0227 : e401 ; -- <0290> bn iz :fail
    0228 : 02df ; -- <0290> "
    0229 : 0352 ; -- <0291> a = a<<4
    022a : 1b52 ; -- <0292> $av_data_regs = a<<4
    022b : fba0 ; -- <0293> getchar_echo
    022c : 0013 ; -- <0293> "
    022d : fc00 ; -- <0293> "
    022e : 2000 ; -- <0293> push a -- "
    022f : fba0 ; -- <0293> "
    0230 : 0004 ; -- <0293> "
    0231 : fc00 ; -- <0293> "
    0232 : 0008 ; -- <0293> pop a -- "

-- parse av_read_data reg address into av_data_regs low byte.
    0233 : fba0 ; -- <0296> call :get4x
    0234 : 0098 ; -- <0296> "
    0235 : fc00 ; -- <0296> "
    0236 : 0801 ; -- <0297> i = b
    0237 : e401 ; -- <0298> bn iz :fail
    0238 : 02df ; -- <0298> "
    0239 : 0406 ; -- <0299> b = $av_data_regs
    023a : c800 ; -- <0300> $av_data_regs = or
    023b : 1b34 ; -- <0300> "
    023c : fba0 ; -- <0301> getchar_echo
    023d : 0013 ; -- <0301> "
    023e : fc00 ; -- <0301> "
    023f : 2000 ; -- <0301> push a -- "
    0240 : fba0 ; -- <0301> "
    0241 : 0004 ; -- <0301> "
    0242 : fc00 ; -- <0301> "
    0243 : 0008 ; -- <0301> pop a -- "

-- parse av_ad_lo reg address into av_ad_lo_reg.
    0244 : fba0 ; -- <0304> call :get4x
    0245 : 0098 ; -- <0304> "
    0246 : fc00 ; -- <0304> "
    0247 : 0801 ; -- <0305> i = b
    0248 : e401 ; -- <0306> bn iz :fail
    0249 : 02df ; -- <0306> "
    024a : 1c00 ; -- <0307> $av_ad_lo_reg = a
    024b : fba0 ; -- <0308> getchar_echo
    024c : 0013 ; -- <0308> "
    024d : fc00 ; -- <0308> "
    024e : 2000 ; -- <0308> push a -- "
    024f : fba0 ; -- <0308> "
    0250 : 0004 ; -- <0308> "
    0251 : fc00 ; -- <0308> "
    0252 : 0008 ; -- <0308> pop a -- "

-- parse av_ad_hi reg address into x.
    0253 : fba0 ; -- <0311> call :get4x
    0254 : 0098 ; -- <0311> "
    0255 : fc00 ; -- <0311> "
    0256 : 0801 ; -- <0312> i = b
    0257 : e401 ; -- <0313> bn iz :fail
    0258 : 02df ; -- <0313> "
    0259 : 1000 ; -- <0314> x = a
    025a : fba0 ; -- <0315> getchar_echo
    025b : 0013 ; -- <0315> "
    025c : fc00 ; -- <0315> "
    025d : 2000 ; -- <0315> push a -- "
    025e : fba0 ; -- <0315> "
    025f : 0004 ; -- <0315> "
    0260 : fc00 ; -- <0315> "
    0261 : 0008 ; -- <0315> pop a -- "

-- parse start byte address high word into target's avalon master.
    0262 : fba0 ; -- <0318> call :get4x
    0263 : 0098 ; -- <0318> "
    0264 : fc00 ; -- <0318> "
    0265 : 0801 ; -- <0319> i = b
    0266 : e401 ; -- <0320> bn iz :fail
    0267 : 02df ; -- <0320> "
    0268 : 3800 ; -- <0321> poke_data = a
    0269 : 0004 ; -- <0322> a = x
    026a : fba0 ; -- <0323> call :poke
    026b : 038f ; -- <0323> "
    026c : fc00 ; -- <0323> "
    026d : fba0 ; -- <0324> getchar_echo
    026e : 0013 ; -- <0324> "
    026f : fc00 ; -- <0324> "
    0270 : 2000 ; -- <0324> push a -- "
    0271 : fba0 ; -- <0324> "
    0272 : 0004 ; -- <0324> "
    0273 : fc00 ; -- <0324> "
    0274 : 0008 ; -- <0324> pop a -- "

-- parse start byte address low word into target's avalon master.
    0275 : fba0 ; -- <0327> call :get4x
    0276 : 0098 ; -- <0327> "
    0277 : fc00 ; -- <0327> "
    0278 : 0801 ; -- <0328> i = b
    0279 : e401 ; -- <0329> bn iz :fail
    027a : 02df ; -- <0329> "
    027b : 3800 ; -- <0330> poke_data = a
    027c : 0007 ; -- <0331> a = $av_ad_lo_reg
    027d : fba0 ; -- <0332> call :poke
    027e : 038f ; -- <0332> "
    027f : fc00 ; -- <0332> "
    0280 : fba0 ; -- <0333> getchar_echo
    0281 : 0013 ; -- <0333> "
    0282 : fc00 ; -- <0333> "
    0283 : 2000 ; -- <0333> push a -- "
    0284 : fba0 ; -- <0333> "
    0285 : 0004 ; -- <0333> "
    0286 : fc00 ; -- <0333> "
    0287 : 0008 ; -- <0333> pop a -- "

-- parse length (in bytes) into i.
    0288 : fba0 ; -- <0336> call :get4x
    0289 : 0098 ; -- <0336> "
    028a : fc00 ; -- <0336> "
    028b : 1001 ; -- <0337> x = b
    028c : e402 ; -- <0338> bn xz :fail
    028d : 02df ; -- <0338> "
    028e : 0b50 ; -- <0339> i = a>>1
    028f : e001 ; -- <0340> br iz :fail
    0290 : 02df ; -- <0340> "

    0291 : fba0 ; -- <0342> getchar_echo
    0292 : 0013 ; -- <0342> "
    0293 : fc00 ; -- <0342> "
    0294 : 2000 ; -- <0342> push a -- "
    0295 : fba0 ; -- <0342> "
    0296 : 0004 ; -- <0342> "
    0297 : fc00 ; -- <0342> "
    0298 : 0008 ; -- <0342> pop a -- "
    0299 : 062e ; -- <0343> b = 46 -- asc b = "."
    029a : e407 ; -- <0344> bn eq :fail
    029b : 02df ; -- <0344> "

-- :next_row -- = 0x029c
-- print row header.
    029c : 03a0 ; -- <0348> a = :eol_msg -- puteol
    029d : 0002 ; -- <0348> "
    029e : fba0 ; -- <0348> puteol
    029f : 00eb ; -- <0348> "
    02a0 : fc00 ; -- <0348> "
    02a1 : 0007 ; -- <0349> a = $av_ad_lo_reg
    02a2 : fba0 ; -- <0350> call :peek
    02a3 : 03a0 ; -- <0350> "
    02a4 : fc00 ; -- <0350> "
    02a5 : 0017 ; -- <0351> a = peek_data
    02a6 : fba0 ; -- <0352> call :put4x
    02a7 : 005f ; -- <0352> "
    02a8 : fc00 ; -- <0352> "
    02a9 : 023a ; -- <0353> a = 58 -- putasc ":"
    02aa : fba0 ; -- <0353> putasc ":"
    02ab : 0004 ; -- <0353> "
    02ac : fc00 ; -- <0353> "

-- print 8 data words.
    02ad : 1208 ; -- <0356> x = 8
-- :next_word -- = 0x02ae
-- print data word from target's avalon master.
    02ae : 0220 ; -- <0359> a = 32 -- putasc " "
    02af : fba0 ; -- <0359> putasc " "
    02b0 : 0004 ; -- <0359> "
    02b1 : fc00 ; -- <0359> "
    02b2 : 0006 ; -- <0360> a = $av_data_regs
    02b3 : fba0 ; -- <0361> call :peek_avalon
    02b4 : 02f0 ; -- <0361> "
    02b5 : fc00 ; -- <0361> "
    02b6 : 0017 ; -- <0362> a = peek_data
    02b7 : fba0 ; -- <0363> call :put4x
    02b8 : 005f ; -- <0363> "
    02b9 : fc00 ; -- <0363> "

-- increment target's av_ad_lo.
    02ba : 0007 ; -- <0366> a = $av_ad_lo_reg
    02bb : fba0 ; -- <0367> call :peek
    02bc : 03a0 ; -- <0367> "
    02bd : fc00 ; -- <0367> "
    02be : 0017 ; -- <0368> a = peek_data
    02bf : 0602 ; -- <0369> b = 2
    02c0 : c800 ; -- <0370> poke_data = a+b
    02c1 : 3b00 ; -- <0370> "
    02c2 : 0007 ; -- <0371> a = $av_ad_lo_reg
    02c3 : fba0 ; -- <0372> call :poke
    02c4 : 038f ; -- <0372> "
    02c5 : fc00 ; -- <0372> "

-- check if all words have been dumped.
    02c6 : 0f60 ; -- <0375> j = -1
    02c7 : c800 ; -- <0376> i = i+j
    02c8 : 0b10 ; -- <0376> "
    02c9 : e001 ; -- <0377> br iz :done
    02ca : 02d2 ; -- <0377> "

-- check for end of row.
    02cb : 1760 ; -- <0380> y = -1
    02cc : c800 ; -- <0381> x = x+y
    02cd : 1320 ; -- <0381> "
    02ce : e402 ; -- <0382> bn xz :next_word
    02cf : 02ae ; -- <0382> "
    02d0 : e00f ; -- <0383> jmp :next_row
    02d1 : 029c ; -- <0383> "

-- :done -- = 0x02d2
    02d2 : 03a0 ; -- <0386> a = :eol_msg -- puteol
    02d3 : 0002 ; -- <0386> "
    02d4 : fba0 ; -- <0386> puteol
    02d5 : 00eb ; -- <0386> "
    02d6 : fc00 ; -- <0386> "
    02d7 : f808 ; -- <0387> pop rtna -- rtn
    02d8 : 1c08 ; -- <0387> pop gb -- "
    02d9 : 1808 ; -- <0387> pop ga -- "
    02da : 1408 ; -- <0387> pop y -- "
    02db : 1008 ; -- <0387> pop x -- "
    02dc : 0c08 ; -- <0387> pop j -- "
    02dd : 0808 ; -- <0387> pop i -- "
    02de : fc00 ; -- <0386> swapra = nop

-- :fail -- = 0x02df
    02df : 023f ; -- <0390> a = 63 -- putasc "?"
    02e0 : fba0 ; -- <0390> putasc "?"
    02e1 : 0004 ; -- <0390> "
    02e2 : fc00 ; -- <0390> "
    02e3 : 03a0 ; -- <0391> a = :eol_msg -- puteol
    02e4 : 0002 ; -- <0391> "
    02e5 : fba0 ; -- <0391> puteol
    02e6 : 00eb ; -- <0391> "
    02e7 : fc00 ; -- <0391> "
    02e8 : f808 ; -- <0392> pop rtna -- end_func
    02e9 : 1c08 ; -- <0392> pop gb -- "
    02ea : 1808 ; -- <0392> pop ga -- "
    02eb : 1408 ; -- <0392> pop y -- "
    02ec : 1008 ; -- <0392> pop x -- "
    02ed : 0c08 ; -- <0392> pop j -- "
    02ee : 0808 ; -- <0392> pop i -- "
    02ef : fc00 ; -- <0391> swapra = nop

-- trigger a read in the target's avalon master.  return the data in peek_data.
-- the 32-bit avalon address must already be poked into the target's avalon master.
-- pass av_data_regs in a.  av_write_data reg address in its high byte; av_read_data reg address in its low byte.
-- ######## func peek_avalon -- = 0x02f0
    02f0 : 203e ; -- <0397> push rtna -- func peek_avalon
-- peek the target's av_write_data register to trigger an avalon read as a side effect.
    02f1 : 2000 ; -- <0399> push a -- push a
    02f2 : 0353 ; -- <0400> a = a>>4
    02f3 : 0353 ; -- <0401> a = a>>4
    02f4 : fba0 ; -- <0402> call :peek
    02f5 : 03a0 ; -- <0402> "
    02f6 : fc00 ; -- <0402> "

-- wait for target's avalon master to receive data e.g. from SDRAM controller.
    02f7 : 020f ; -- <0405> a = 15
    02f8 : 0760 ; -- <0406> b = -1
-- :wait -- = 0x02f9
    02f9 : c800 ; -- <0408> a = a+b
    02fa : 0300 ; -- <0408> "
    02fb : e400 ; -- <0409> bn az :wait
    02fc : 02f9 ; -- <0409> "

-- peek data word from target's avalon master.
    02fd : 0008 ; -- <0412> pop a -- pop a
    02fe : 06ff ; -- <0413> b = 0xff
    02ff : c800 ; -- <0414> a = and
    0300 : 0330 ; -- <0414> "
    0301 : fba0 ; -- <0415> call :peek
    0302 : 03a0 ; -- <0415> "
    0303 : fc00 ; -- <0415> "
    0304 : f808 ; -- <0416> pop rtna -- end_func
    0305 : fc00 ; -- <0415> swapra = nop

-- ######## func wait_for_bp -- = 0x0306
-- :poll -- = 0x0306
    0306 : 0018 ; -- <0420> a = bp_status
    0307 : e000 ; -- <0421> br az :poll
    0308 : 0306 ; -- <0421> "
    0309 : fc00 ; -- <0421> swapra = nop

-- ######## func set_bp -- = 0x030a
    030a : 2004 ; -- <0424> push x -- func set_bp
    030b : 2005 ; -- <0424> push y -- "
    030c : 203e ; -- <0424> push rtna -- "
    030d : fba0 ; -- <0425> getchar_echo
    030e : 0013 ; -- <0425> "
    030f : fc00 ; -- <0425> "
    0310 : 2000 ; -- <0425> push a -- "
    0311 : fba0 ; -- <0425> "
    0312 : 0004 ; -- <0425> "
    0313 : fc00 ; -- <0425> "
    0314 : 0008 ; -- <0425> pop a -- "
    0315 : 1000 ; -- <0426> x = a
    0316 : fba0 ; -- <0427> getchar_echo
    0317 : 0013 ; -- <0427> "
    0318 : fc00 ; -- <0427> "
    0319 : 2000 ; -- <0427> push a -- "
    031a : fba0 ; -- <0427> "
    031b : 0004 ; -- <0427> "
    031c : fc00 ; -- <0427> "
    031d : 0008 ; -- <0427> pop a -- "
    031e : 063d ; -- <0428> b = 61 -- asc b = "="
    031f : e407 ; -- <0429> bn eq :fail
    0320 : 034b ; -- <0429> "
    0321 : fba0 ; -- <0430> call :get4x
    0322 : 0098 ; -- <0430> "
    0323 : fc00 ; -- <0430> "
    0324 : 1400 ; -- <0431> y = a
    0325 : 0200 ; -- <0432> a = 0
    0326 : e407 ; -- <0433> bn eq :fail
    0327 : 034b ; -- <0433> "
    0328 : 0004 ; -- <0434> a = x
    0329 : 0630 ; -- <0435> b = 48 -- asc b = "0"
    032a : e007 ; -- <0436> br eq :b0
    032b : 0337 ; -- <0436> "
    032c : 0631 ; -- <0437> b = 49 -- asc b = "1"
    032d : e007 ; -- <0438> br eq :b1
    032e : 033c ; -- <0438> "
    032f : 0632 ; -- <0439> b = 50 -- asc b = "2"
    0330 : e007 ; -- <0440> br eq :b2
    0331 : 0341 ; -- <0440> "
    0332 : 0633 ; -- <0441> b = 51 -- asc b = "3"
    0333 : e007 ; -- <0442> br eq :b3
    0334 : 0346 ; -- <0442> "
    0335 : e00f ; -- <0443> jmp :fail
    0336 : 034b ; -- <0443> "
-- :b0 -- = 0x0337
    0337 : 2405 ; -- <0445> bp0_addr = y
    0338 : f808 ; -- <0446> pop rtna -- rtn
    0339 : 1408 ; -- <0446> pop y -- "
    033a : 1008 ; -- <0446> pop x -- "
    033b : fc00 ; -- <0445> swapra = nop
-- :b1 -- = 0x033c
    033c : 2805 ; -- <0448> bp1_addr = y
    033d : f808 ; -- <0449> pop rtna -- rtn
    033e : 1408 ; -- <0449> pop y -- "
    033f : 1008 ; -- <0449> pop x -- "
    0340 : fc00 ; -- <0448> swapra = nop
-- :b2 -- = 0x0341
    0341 : 2c05 ; -- <0451> bp2_addr = y
    0342 : f808 ; -- <0452> pop rtna -- rtn
    0343 : 1408 ; -- <0452> pop y -- "
    0344 : 1008 ; -- <0452> pop x -- "
    0345 : fc00 ; -- <0451> swapra = nop
-- :b3 -- = 0x0346
    0346 : 3005 ; -- <0454> bp3_addr = y
    0347 : f808 ; -- <0455> pop rtna -- rtn
    0348 : 1408 ; -- <0455> pop y -- "
    0349 : 1008 ; -- <0455> pop x -- "
    034a : fc00 ; -- <0454> swapra = nop

-- :fail -- = 0x034b
    034b : 023f ; -- <0458> a = 63 -- putasc "?"
    034c : fba0 ; -- <0458> putasc "?"
    034d : 0004 ; -- <0458> "
    034e : fc00 ; -- <0458> "
    034f : 03a0 ; -- <0459> a = :eol_msg -- puteol
    0350 : 0002 ; -- <0459> "
    0351 : fba0 ; -- <0459> puteol
    0352 : 00eb ; -- <0459> "
    0353 : fc00 ; -- <0459> "
    0354 : f808 ; -- <0460> pop rtna -- end_func
    0355 : 1408 ; -- <0460> pop y -- "
    0356 : 1008 ; -- <0460> pop x -- "
    0357 : fc00 ; -- <0459> swapra = nop

-- ######## func poke_cmd -- = 0x0358
    0358 : 2004 ; -- <0462> push x -- func poke_cmd
    0359 : 203e ; -- <0462> push rtna -- "
-- x = destination register address to poke.
    035a : fba0 ; -- <0464> call :get4x
    035b : 0098 ; -- <0464> "
    035c : fc00 ; -- <0464> "
    035d : 1000 ; -- <0465> x = a
    035e : 0200 ; -- <0466> a = 0
    035f : e407 ; -- <0467> bn eq :fail
    0360 : 037a ; -- <0467> "

    0361 : fba0 ; -- <0469> getchar_echo
    0362 : 0013 ; -- <0469> "
    0363 : fc00 ; -- <0469> "
    0364 : 2000 ; -- <0469> push a -- "
    0365 : fba0 ; -- <0469> "
    0366 : 0004 ; -- <0469> "
    0367 : fc00 ; -- <0469> "
    0368 : 0008 ; -- <0469> pop a -- "
    0369 : 063d ; -- <0470> b = 61 -- asc b = "="
    036a : e407 ; -- <0471> bn eq :fail
    036b : 037a ; -- <0471> "

-- parse value to poke.
    036c : fba0 ; -- <0474> call :get4x
    036d : 0098 ; -- <0474> "
    036e : fc00 ; -- <0474> "
    036f : 3800 ; -- <0475> poke_data = a
    0370 : 0200 ; -- <0476> a = 0
    0371 : e407 ; -- <0477> bn eq :fail
    0372 : 037a ; -- <0477> "

    0373 : 0004 ; -- <0479> a = x
    0374 : fba0 ; -- <0480> call :poke
    0375 : 038f ; -- <0480> "
    0376 : fc00 ; -- <0480> "
    0377 : f808 ; -- <0481> pop rtna -- rtn
    0378 : 1008 ; -- <0481> pop x -- "
    0379 : fc00 ; -- <0480> swapra = nop

-- :fail -- = 0x037a
    037a : 023f ; -- <0484> a = 63 -- putasc "?"
    037b : fba0 ; -- <0484> putasc "?"
    037c : 0004 ; -- <0484> "
    037d : fc00 ; -- <0484> "
    037e : 03a0 ; -- <0485> a = :eol_msg -- puteol
    037f : 0002 ; -- <0485> "
    0380 : fba0 ; -- <0485> puteol
    0381 : 00eb ; -- <0485> "
    0382 : fc00 ; -- <0485> "
    0383 : f808 ; -- <0486> pop rtna -- end_func
    0384 : 1008 ; -- <0486> pop x -- "
    0385 : fc00 ; -- <0485> swapra = nop

-- force execution of the opcode passed in force_opcode.
-- ######## func force_instruction -- = 0x0386
    0386 : 3e04 ; -- <0490> bus_ctrl = $divert_code_bus_mask
    0387 : 4201 ; -- <0491> tg_force = $hold_state_mask
    0388 : 4203 ; -- <0492> tg_force = ($hold_state_mask | $force_load_exr_mask)
    0389 : 4205 ; -- <0493> tg_force = ($hold_state_mask | $force_exec_mask)
    038a : 4201 ; -- <0494> tg_force = $hold_state_mask
-- refill target exr so it can resume seamlessly.
    038b : 3415 ; -- <0496> force_opcode = exr_shadow
    038c : 4203 ; -- <0497> tg_force = ($hold_state_mask | $force_load_exr_mask)
    038d : 4200 ; -- <0498> tg_force = 0
    038e : fc00 ; -- <0498> swapra = nop

-- write to a register in the target MCU.  pass the value in poke_data.
-- pass its register address in a.
-- ######## func poke -- = 0x038f
    038f : 203e ; -- <0503> push rtna -- func poke
    0390 : 063f ; -- <0504> b = $dest_mask
    0391 : c800 ; -- <0505> a = and
    0392 : 0330 ; -- <0505> "
    0393 : 0352 ; -- <0506> a = a<<4
    0394 : 0352 ; -- <0507> a = a<<4
    0395 : 0351 ; -- <0508> a = a<<1
    0396 : 0351 ; -- <0509> a = a<<1
    0397 : 07a0 ; -- <0510> b = ([src dbgpoke])
    0398 : 03c0 ; -- <0510> "
    0399 : c800 ; -- <0511> force_opcode = or
    039a : 3734 ; -- <0511> "
    039b : fba0 ; -- <0512> call :force_instruction
    039c : 0386 ; -- <0512> "
    039d : fc00 ; -- <0512> "
    039e : f808 ; -- <0513> pop rtna -- end_func
    039f : fc00 ; -- <0512> swapra = nop

-- observe a register in the target MCU.  return its value in peek_data.
-- pass its register address in a.
-- ######## func peek -- = 0x03a0
    03a0 : 203e ; -- <0517> push rtna -- func peek
    03a1 : 07a0 ; -- <0518> b = $src_mask
    03a2 : 03ff ; -- <0518> "
    03a3 : c800 ; -- <0519> a = and
    03a4 : 0330 ; -- <0519> "
    03a5 : 07a0 ; -- <0520> b = ([dest nop] << $dest_lsb)
    03a6 : c800 ; -- <0520> "
    03a7 : c800 ; -- <0521> force_opcode = or
    03a8 : 3734 ; -- <0521> "
    03a9 : fba0 ; -- <0522> call :force_instruction
    03aa : 0386 ; -- <0522> "
    03ab : fc00 ; -- <0522> "
-- target's register value is now in peek_data.
    03ac : f808 ; -- <0524> pop rtna -- end_func
    03ad : fc00 ; -- <0523> swapra = nop

-- show target status display.
-- ######## func dump_target -- = 0x03ae
    03ae : 2002 ; -- <0527> push i -- func dump_target
    03af : 2004 ; -- <0527> push x -- "
    03b0 : 203e ; -- <0527> push rtna -- "
    03b1 : 03a0 ; -- <0528> a = :eol_msg -- puteol
    03b2 : 0002 ; -- <0528> "
    03b3 : fba0 ; -- <0528> puteol
    03b4 : 00eb ; -- <0528> "
    03b5 : fc00 ; -- <0528> "
-- verify sane number of registers in the target program's register name table.
    03b6 : 4e02 ; -- <0530> m9k_addr = 2
    03b7 : 1014 ; -- <0531> x = m9k_data

    03b8 : 0004 ; -- <0561> a = x
    03b9 : 0630 ; -- <0561> b = 48

    03ba : e406 ; -- <0532> bn gt :else_954
    03bb : 03c8 ; -- <0532> "

    03bc : 03a0 ; -- <0533> a = :unsafe_msg
    03bd : 01e8 ; -- <0533> "
    03be : fba0 ; -- <0534> call print_nt
    03bf : 00eb ; -- <0534> "
    03c0 : fc00 ; -- <0534> "
    03c1 : 03a0 ; -- <0535> a = :eol_msg -- puteol
    03c2 : 0002 ; -- <0535> "
    03c3 : fba0 ; -- <0535> puteol
    03c4 : 00eb ; -- <0535> "
    03c5 : fc00 ; -- <0535> "

    03c6 : e00f ; -- <0537> jmp :end_954
    03c7 : 03fa ; -- <0537> "

-- loop up to the number of registers in the target program's register name table.
    03c8 : 0a00 ; -- <0561> i = 0
-- :loop_968 -- = 0x03c9

-- fetch register name from table in target program.
-- i = register number.
-- peek is skipped for any reg name starting with 2 slashes (good for read-sensitive regs).
    03c9 : 0002 ; -- <0542> a = i
    03ca : 0351 ; -- <0543> a = a<<1
    03cb : 0351 ; -- <0544> a = a<<1
    03cc : 0603 ; -- <0545> b = 3
    03cd : c800 ; -- <0546> m9k_addr = a+b
    03ce : 4f00 ; -- <0546> "

    03cf : 0014 ; -- <0559> a = m9k_data
    03d0 : 07a0 ; -- <0559> b = 0x2f2f
    03d1 : 2f2f ; -- <0559> "

    03d2 : e007 ; -- <0547> br eq :else_978
    03d3 : 03f2 ; -- <0547> "

    03d4 : 0220 ; -- <0548> a = 32 -- putasc " "
    03d5 : fba0 ; -- <0548> putasc " "
    03d6 : 0004 ; -- <0548> "
    03d7 : fc00 ; -- <0548> "
    03d8 : 0220 ; -- <0549> a = 32 -- putasc " "
    03d9 : fba0 ; -- <0549> putasc " "
    03da : 0004 ; -- <0549> "
    03db : fc00 ; -- <0549> "
    03dc : 0013 ; -- <0550> a = m9k_addr
    03dd : 0608 ; -- <0551> b = 8
    03de : fba0 ; -- <0552> call :print_fixed_target
    03df : 03fe ; -- <0552> "
    03e0 : fc00 ; -- <0552> "
    03e1 : 023d ; -- <0553> a = 61 -- putasc "="
    03e2 : fba0 ; -- <0553> putasc "="
    03e3 : 0004 ; -- <0553> "
    03e4 : fc00 ; -- <0553> "
    03e5 : 0002 ; -- <0554> a = i
    03e6 : fba0 ; -- <0555> call :peek
    03e7 : 03a0 ; -- <0555> "
    03e8 : fc00 ; -- <0555> "
    03e9 : 0017 ; -- <0556> a = peek_data
    03ea : fba0 ; -- <0557> call :put4x
    03eb : 005f ; -- <0557> "
    03ec : fc00 ; -- <0557> "
    03ed : 03a0 ; -- <0558> a = :eol_msg -- puteol
    03ee : 0002 ; -- <0558> "
    03ef : fba0 ; -- <0558> puteol
    03f0 : 00eb ; -- <0558> "
    03f1 : fc00 ; -- <0558> "



    03f2 : 0002 ; -- <0561> a = i
    03f3 : 0601 ; -- <0561> b = 1
    03f4 : c800 ; -- <0561> i = a+b
    03f5 : 0b00 ; -- <0561> "


    03f6 : 0002 ; -- <0561> a = i
    03f7 : 0404 ; -- <0561> b = x
    03f8 : e005 ; -- <0561> br lt :loop_968
    03f9 : 03c9 ; -- <0561> "

-- :end_968 -- = 0x03fa

    03fa : f808 ; -- <0562> pop rtna -- end_func
    03fb : 1008 ; -- <0562> pop x -- "
    03fc : 0808 ; -- <0562> pop i -- "
    03fd : fc00 ; -- <0561> swapra = nop

-- print a fixed-length string from packed words in TARGET program space.
-- pass its word address (not its byte address) in a,  its length (bytes) in b.
-- string must start on a word boundary.
-- no newline or other delimiter is added automatically.
-- ######## func print_fixed_target -- = 0x03fe
    03fe : 2002 ; -- <0568> push i -- func print_fixed_target
    03ff : 2003 ; -- <0568> push j -- "
    0400 : 2004 ; -- <0568> push x -- "
    0401 : 2005 ; -- <0568> push y -- "
    0402 : 2006 ; -- <0568> push ga -- "
    0403 : 203e ; -- <0568> push rtna -- "
    0404 : 0800 ; -- <0569> i = a
    0405 : 0e01 ; -- <0570> j = 1
    0406 : 1001 ; -- <0571> x = b
    0407 : 1760 ; -- <0572> y = -1
-- :next_word -- = 0x0408
    0408 : e002 ; -- <0574> br xz :done
    0409 : 041e ; -- <0574> "
    040a : 1320 ; -- <0575> x = ad2
    040b : 4c02 ; -- <0576> m9k_addr = i
    040c : 1814 ; -- <0577> ga = m9k_data
-- now x = bytes remaining, i = current word address, g6 = data word.
    040d : 0006 ; -- <0579> a = ga -- putchar ga
    040e : fba0 ; -- <0579> putchar ga
    040f : 0004 ; -- <0579> "
    0410 : fc00 ; -- <0579> "
    0411 : e002 ; -- <0580> br xz :done
    0412 : 041e ; -- <0580> "
    0413 : 1320 ; -- <0581> x = ad2
    0414 : 0006 ; -- <0582> a = ga
    0415 : 0353 ; -- <0583> a = a>>4
    0416 : 0353 ; -- <0584> a = a>>4
    0417 : fba0 ; -- <0585> putchar a
    0418 : 0004 ; -- <0585> "
    0419 : fc00 ; -- <0585> "
    041a : c800 ; -- <0586> i = i+j
    041b : 0b10 ; -- <0586> "
    041c : e00f ; -- <0587> jmp :next_word
    041d : 0408 ; -- <0587> "
-- :done -- = 0x041e
    041e : f808 ; -- <0589> pop rtna -- end_func
    041f : 1808 ; -- <0589> pop ga -- "
    0420 : 1408 ; -- <0589> pop y -- "
    0421 : 1008 ; -- <0589> pop x -- "
    0422 : 0c08 ; -- <0589> pop j -- "
    0423 : 0808 ; -- <0589> pop i -- "
    0424 : fc00 ; -- <0588> swapra = nop

-- ######## func load_program -- = 0x0425
    0425 : 2002 ; -- <0591> push i -- func load_program
    0426 : 2003 ; -- <0591> push j -- "
    0427 : 2004 ; -- <0591> push x -- "
    0428 : 203e ; -- <0591> push rtna -- "
-- load target program from UART.

-- length, little-endian.  memorize in x.
    0429 : 03a0 ; -- <0595> a = :eol_msg -- puteol
    042a : 0002 ; -- <0595> "
    042b : fba0 ; -- <0595> puteol
    042c : 00eb ; -- <0595> "
    042d : fc00 ; -- <0595> "
    042e : 024c ; -- <0596> a = 76 -- putasc L
    042f : fba0 ; -- <0596> putasc L
    0430 : 0004 ; -- <0596> "
    0431 : fc00 ; -- <0596> "
    0432 : fba0 ; -- <0597> get16 x
    0433 : 0013 ; -- <0597> "
    0434 : fc00 ; -- <0597> "
    0435 : 2000 ; -- <0597> push a -- "
    0436 : fba0 ; -- <0597> "
    0437 : 0013 ; -- <0597> "
    0438 : fc00 ; -- <0597> "
    0439 : 0352 ; -- <0597> "
    043a : 0352 ; -- <0597> "
    043b : 0408 ; -- <0597> pop b -- "
    043c : c800 ; -- <0597> "
    043d : 1334 ; -- <0597> "
    043e : 0004 ; -- <0598> a = x
    043f : fba0 ; -- <0599> call :put4x
    0440 : 005f ; -- <0599> "
    0441 : fc00 ; -- <0599> "
    0442 : 03a0 ; -- <0600> a = :eol_msg -- puteol
    0443 : 0002 ; -- <0600> "
    0444 : fba0 ; -- <0600> puteol
    0445 : 00eb ; -- <0600> "
    0446 : fc00 ; -- <0600> "

-- put target into reset again, in case this is a target warm boot.
    0447 : 3e02 ; -- <0603> bus_ctrl = $tg_reset_mask

-- load opcodes.  count up address in i.
    0448 : 0a00 ; -- <0606> i = 0
    0449 : 0e01 ; -- <0607> j = 1
    044a : fba0 ; -- <0608> callx  fletcher16_init
    044b : 010c ; -- <0608> "
    044c : fc00 ; -- <0608> "
-- :loadword -- = 0x044d
-- receive, store in RAM.
    044d : fba0 ; -- <0611> get16 a
    044e : 0013 ; -- <0611> "
    044f : fc00 ; -- <0611> "
    0450 : 2000 ; -- <0611> push a -- "
    0451 : fba0 ; -- <0611> "
    0452 : 0013 ; -- <0611> "
    0453 : fc00 ; -- <0611> "
    0454 : 0352 ; -- <0611> "
    0455 : 0352 ; -- <0611> "
    0456 : 0408 ; -- <0611> pop b -- "
    0457 : c800 ; -- <0611> "
    0458 : 0334 ; -- <0611> "
    0459 : 4c02 ; -- <0612> m9k_addr = i
    045a : 5000 ; -- <0613> m9k_data = a

-- read back from RAM and build checksum.
    045b : 0014 ; -- <0616> a = m9k_data
    045c : fba0 ; -- <0616> callx  fletcher16_input16  m9k_data
    045d : 012c ; -- <0616> "
    045e : fc00 ; -- <0616> "

--  show decimated feedback text, for more speed:
    045f : 0002 ; -- <0619> a = i
    0460 : 061f ; -- <0620> b = 0x1f
    0461 : e403 ; -- <0621> bn and0z :skip_text
    0462 : 0467 ; -- <0621> "
    0463 : 022e ; -- <0622> a = 46 -- putasc "."
    0464 : fba0 ; -- <0622> putasc "."
    0465 : 0004 ; -- <0622> "
    0466 : fc00 ; -- <0622> "
-- :skip_text -- = 0x0467

    0467 : c800 ; -- <0625> i = i+j
    0468 : 0b10 ; -- <0625> "
    0469 : 0002 ; -- <0626> a = i
    046a : 0404 ; -- <0627> b = x
    046b : e407 ; -- <0628> bn eq :loadword
    046c : 044d ; -- <0628> "
    046d : 03a0 ; -- <0629> a = :eol_msg -- puteol
    046e : 0002 ; -- <0629> "
    046f : fba0 ; -- <0629> puteol
    0470 : 00eb ; -- <0629> "
    0471 : fc00 ; -- <0629> "
    0472 : fba0 ; -- <0630> callx fletcher16_result  a
    0473 : 013d ; -- <0630> "
    0474 : fc00 ; -- <0630> "
    0475 : fba0 ; -- <0631> call :put4x
    0476 : 005f ; -- <0631> "
    0477 : fc00 ; -- <0631> "
    0478 : 03a0 ; -- <0632> a = :eol_msg -- puteol
    0479 : 0002 ; -- <0632> "
    047a : fba0 ; -- <0632> puteol
    047b : 00eb ; -- <0632> "
    047c : fc00 ; -- <0632> "
    047d : f808 ; -- <0633> pop rtna -- end_func
    047e : 1008 ; -- <0633> pop x -- "
    047f : 0c08 ; -- <0633> pop j -- "
    0480 : 0808 ; -- <0633> pop i -- "
    0481 : fc00 ; -- <0632> swapra = nop


-- src reg 0000 a
-- src reg 0001 b
-- src reg 0002 i
-- src reg 0003 j
-- src reg 0004 x
-- src reg 0005 y
-- src reg 0300 a+b
-- src reg 0310 i+j
-- src reg 0320 x+y
-- src reg 0330 and
-- src reg 0334 or
-- src reg 0338 xor
-- src reg 0350 a>>1
-- src reg 0351 a<<1
-- src reg 0352 a<<4
-- src reg 0353 a>>4
-- src reg 0360 0xffff
-- src reg 0006 ga
-- src reg 0007 gb
-- src reg 0008 rstk
-- src reg 0009 bp0_addr
-- src reg 000a bp1_addr
-- src reg 000b bp2_addr
-- src reg 000c bp3_addr
-- src reg 000d force_opcode
-- src reg 000e poke_data
-- src reg 000f bus_ctrl
-- src reg 0010 tg_force
-- src reg 0011 atx_data
-- src reg 0012 atx_ctrl
-- src reg 0013 m9k_addr
-- src reg 0014 m9k_data
-- src reg 0015 exr_shadow
-- src reg 0016 tg_code_addr
-- src reg 0017 peek_data
-- src reg 0018 bp_status
-- src reg 0019 boot_break
-- dest reg 0000 a
-- dest reg 0001 b
-- dest reg 0002 i
-- dest reg 0003 j
-- dest reg 0004 x
-- dest reg 0005 y
-- dest reg 0006 ga
-- dest reg 0007 gb
-- dest reg 0008 rstk
-- dest reg 0009 bp0_addr
-- dest reg 000a bp1_addr
-- dest reg 000b bp2_addr
-- dest reg 000c bp3_addr
-- dest reg 000d force_opcode
-- dest reg 000e poke_data
-- dest reg 000f bus_ctrl
-- dest reg 0010 tg_force
-- dest reg 0011 atx_data
-- dest reg 0012 atx_ctrl
-- dest reg 0013 m9k_addr
-- dest reg 0014 m9k_data

END;
